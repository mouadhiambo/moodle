{"version":3,"file":"normalise.min.js","sources":["../src/normalise.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * Normalisation helpers.\r\n *\r\n * @module     core/normalise\r\n * @copyright  2020 Andrew Nicols <andrew@nicols.co.uk>\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\n\r\nimport jQuery from 'jquery';\r\n\r\n/**\r\n * Normalise a list of Nodes into an Array of Nodes.\r\n *\r\n * @method getList\r\n * @param {(Array|jQuery|NodeList|HTMLElement)} nodes\r\n * @returns {HTMLElement[]}\r\n */\r\nexport const getList = nodes => {\r\n    if (nodes instanceof HTMLElement) {\r\n        // A single record to conver to a NodeList.\r\n        return [nodes];\r\n    }\r\n\r\n    if (nodes instanceof Array) {\r\n        // A single record to conver to a NodeList.\r\n        return nodes;\r\n    }\r\n\r\n    if (nodes instanceof NodeList) {\r\n        // Already a NodeList.\r\n        return Array.from(nodes);\r\n    }\r\n\r\n    if (nodes instanceof jQuery) {\r\n        // A jQuery object to a NodeList.\r\n        return nodes.get();\r\n    }\r\n\r\n    // Fallback to just having a go.\r\n    return Array.from(nodes);\r\n};\r\n\r\n/**\r\n * Return the first element in a list of normalised Nodes.\r\n *\r\n * @param {Array|jQuery|NodeList|HTMLElement} nodes the unmormalised list of nodes\r\n * @returns {HTMLElement|undefined} the first list element\r\n */\r\nexport const getFirst = nodes => {\r\n    const list = getList(nodes);\r\n    return list[0];\r\n};\r\n\r\n/**\r\n * Normalise a single node into an HTMLElement.\r\n *\r\n * @param {jQuery|Y.Node|HTMLElement} node The node to normalise\r\n * @returns {HTMLElement}\r\n */\r\nexport const getElement = (node) => {\r\n    if (node instanceof HTMLElement) {\r\n        return node;\r\n    }\r\n\r\n    if (node?._node) {\r\n        // This is likely a YUI Node.\r\n        // We can use (node instanceof Y.Node) but we would have to load YUI to do some.\r\n        return node._node;\r\n    }\r\n\r\n    if (node instanceof jQuery && node.length > 0) {\r\n        return node.get(0);\r\n    }\r\n\r\n    return null;\r\n};\r\n"],"names":["getList","nodes","HTMLElement","Array","NodeList","from","jQuery","get","node","_node","length"],"mappings":";;;;;;;yLAgCaA,QAAUC,OACfA,iBAAiBC,YAEV,CAACD,OAGRA,iBAAiBE,MAEVF,MAGPA,iBAAiBG,SAEVD,MAAME,KAAKJ,OAGlBA,iBAAiBK,gBAEVL,MAAMM,MAIVJ,MAAME,KAAKJ,kDASEA,OACPD,QAAQC,OACT,uBASWO,MACnBA,gBAAgBN,YACTM,KAGPA,MAAAA,MAAAA,KAAMC,MAGCD,KAAKC,MAGZD,gBAAgBF,iBAAUE,KAAKE,OAAS,EACjCF,KAAKD,IAAI,GAGb"}