{"version":3,"file":"pending.min.js","sources":["../src/pending.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * A helper used to inform Behat that an operation is in progress and that Behat must wait for it to complete.\r\n *\r\n * @module     core/pending\r\n * @copyright  2018 Andrew Nicols <andrew@nicols.co.uk>\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n * @since      3.6\r\n */\r\n\r\n/**\r\n * A helper used to register any long-running operations that are in-progress and that Behat must wait for it to complete.\r\n *\r\n * This is useful in cases where the user interface may be updated and take some time to change - for example where\r\n * applying a transition.\r\n *\r\n * This data is used by Behat, but may also be consumed by other location too.\r\n *\r\n * By informing Behat that an action is about to happen, and then that it is complete, allows\r\n * Behat to wait for that completion and avoid random failures in automated testing.\r\n *\r\n * Note: It is recommended that a descriptive key be used to aid in debugging where possible, but this is optional.\r\n */\r\nexport default class {\r\n\r\n    /**\r\n     * Create a new Pending Promise statically.\r\n     *\r\n     * @param {String} pendingKey An identifier to help in debugging\r\n     * @return {Promise} A Native Promise\r\n     * @deprecated since Moodle 4.2\r\n     */\r\n    static request(pendingKey) {\r\n        window.console.error(\r\n            `The core/pending::request method has been deprecated. ` +\r\n            `Please use one of the alternative calls to core/pending, for example \"new Pending('${pendingKey}')\". ` +\r\n            `Called with ${pendingKey}`\r\n        );\r\n        return new this(pendingKey);\r\n    }\r\n\r\n    /**\r\n     * Request a new pendingPromise for later resolution.\r\n     *\r\n     * When the action you are performing is complete, simply call resolve on the returned Promise.\r\n     *\r\n     * @param {String} [pendingKey='pendingPromise'] An identifier to help in debugging\r\n     * @return {Promise} A Native Promise\r\n     * @example\r\n     * import Pending from 'core/pending';\r\n     * import {getString} from 'core/str';\r\n     *\r\n     * const stringPromise = new Pending('mod_myexample/setup');\r\n     * const myString = getString('ok')\r\n     *     .then(okay => {\r\n     *         window.console.log(okay);\r\n     *     })\r\n     *     .then(okay => stringPromise.resolve(okay));\r\n     */\r\n    constructor(pendingKey = 'pendingPromise') {\r\n        let resolver;\r\n        let rejector;\r\n        const pendingPromise = this.constructor.Promise((resolve, reject) => {\r\n            resolver = resolve;\r\n            rejector = reject;\r\n        }, pendingKey);\r\n        pendingPromise.resolve = resolver;\r\n        pendingPromise.reject = rejector;\r\n\r\n        return pendingPromise;\r\n    }\r\n\r\n    /**\r\n     * Create a new Pending Promise with the same interface as a native Promise.\r\n     *\r\n     * @param {Callable} fn A callable which takes the resolve and reject arguments as in a Native Promise constructor.\r\n     * @param {String} [pendingKey='pendingPromise'] An identifier to help in debugging\r\n     * @returns {Promise}\r\n     * @since Moodle 4.2\r\n     * @example\r\n     * // Use the Pending class in the same way that you would a Native Promise.\r\n     * import Pending from 'core/pending';\r\n     * import {getString} from 'core/str';\r\n     *\r\n     * export const init => {\r\n     *     Pending.Promise((resolve, reject) => {\r\n     *         getString('ok')\r\n     *             .then(okay => {\r\n     *                 window.console.log(okay);\r\n     *                 return okay;\r\n     *             })\r\n     *             .then(resolve)\r\n     *             .catch(reject);\r\n     *     }, 'mod_myexample/setup:init');\r\n     * };\r\n     */\r\n    static Promise(fn, pendingKey = 'pendingPromise') {\r\n        const resolver = new Promise((resolve, reject) => {\r\n            M.util.js_pending(pendingKey);\r\n\r\n            fn(resolve, reject);\r\n        });\r\n\r\n        resolver.then(() => {\r\n            M.util.js_complete(pendingKey);\r\n            return;\r\n        }).catch();\r\n\r\n        return resolver;\r\n    }\r\n}\r\n"],"names":["pendingKey","window","console","error","this","constructor","resolver","rejector","pendingPromise","Promise","resolve","reject","fn","M","util","js_pending","then","js_complete","catch"],"mappings":";;;;;;;;;qBA8CmBA,mBACXC,OAAOC,QAAQC,MACX,uJACsFH,2CACvEA,aAEZ,IAAII,KAAKJ,YAqBpBK,kBACQC,SACAC,SAFIP,kEAAa,uBAGfQ,eAAiBJ,KAAKC,YAAYI,SAAQ,CAACC,QAASC,UACtDL,SAAWI,QACXH,SAAWI,SACZX,mBACHQ,eAAeE,QAAUJ,SACzBE,eAAeG,OAASJ,SAEjBC,8BA2BII,QAAIZ,kEAAa,uBACtBM,SAAW,IAAIG,SAAQ,CAACC,QAASC,UACnCE,EAAEC,KAAKC,WAAWf,YAElBY,GAAGF,QAASC,kBAGhBL,SAASU,MAAK,KACVH,EAAEC,KAAKG,YAAYjB,eAEpBkB,QAEIZ"}