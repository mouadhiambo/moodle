{"version":3,"file":"popover_region_controller.min.js","sources":["../src/popover_region_controller.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * Controls the popover region element.\r\n *\r\n * See template: core/popover_region\r\n *\r\n * @module     core/popover_region_controller\r\n * @copyright  2015 Ryan Wyllie <ryan@moodle.com>\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n * @since      3.2\r\n */\r\ndefine(['jquery', 'core/str', 'core/custom_interaction_events'],\r\n        function($, str, customEvents) {\r\n\r\n    var SELECTORS = {\r\n        CONTENT: '.popover-region-content',\r\n        CONTENT_CONTAINER: '.popover-region-content-container',\r\n        MENU_CONTAINER: '.popover-region-container',\r\n        MENU_TOGGLE: '.popover-region-toggle',\r\n        CAN_RECEIVE_FOCUS: 'input:not([type=\"hidden\"]), a[href], button, textarea, select, [tabindex]',\r\n    };\r\n\r\n    /**\r\n     * Constructor for the PopoverRegionController.\r\n     *\r\n     * @param {jQuery} element object root element of the popover\r\n     */\r\n    var PopoverRegionController = function(element) {\r\n        this.root = $(element);\r\n        this.content = this.root.find(SELECTORS.CONTENT);\r\n        this.contentContainer = this.root.find(SELECTORS.CONTENT_CONTAINER);\r\n        this.menuContainer = this.root.find(SELECTORS.MENU_CONTAINER);\r\n        this.menuToggle = this.root.find(SELECTORS.MENU_TOGGLE);\r\n        this.isLoading = false;\r\n        this.promises = {\r\n            closeHandlers: $.Deferred(),\r\n            navigationHandlers: $.Deferred(),\r\n        };\r\n\r\n        // Core event listeners to open and close.\r\n        this.registerBaseEventListeners();\r\n    };\r\n\r\n    /**\r\n     * The collection of events triggered by this controller.\r\n     *\r\n     * @returns {object}\r\n     */\r\n    PopoverRegionController.prototype.events = function() {\r\n        return {\r\n            menuOpened: 'popoverregion:menuopened',\r\n            menuClosed: 'popoverregion:menuclosed',\r\n            startLoading: 'popoverregion:startLoading',\r\n            stopLoading: 'popoverregion:stopLoading',\r\n        };\r\n    };\r\n\r\n    /**\r\n     * Return the container element for the content element.\r\n     *\r\n     * @method getContentContainer\r\n     * @return {jQuery} object\r\n     */\r\n    PopoverRegionController.prototype.getContentContainer = function() {\r\n        return this.contentContainer;\r\n    };\r\n\r\n    /**\r\n     * Return the content element.\r\n     *\r\n     * @method getContent\r\n     * @return {jQuery} object\r\n     */\r\n    PopoverRegionController.prototype.getContent = function() {\r\n        return this.content;\r\n    };\r\n\r\n    /**\r\n     * Checks if the popover is displayed.\r\n     *\r\n     * @method isMenuOpen\r\n     * @return {bool}\r\n     */\r\n    PopoverRegionController.prototype.isMenuOpen = function() {\r\n        return !this.root.hasClass('collapsed');\r\n    };\r\n\r\n    /**\r\n     * Toggle the visibility of the popover.\r\n     *\r\n     * @method toggleMenu\r\n     */\r\n    PopoverRegionController.prototype.toggleMenu = function() {\r\n        if (this.isMenuOpen()) {\r\n            this.closeMenu();\r\n        } else {\r\n            this.openMenu();\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Hide the popover.\r\n     *\r\n     * Note: This triggers the menuClosed event.\r\n     *\r\n     * @method closeMenu\r\n     */\r\n    PopoverRegionController.prototype.closeMenu = function() {\r\n        // We're already closed.\r\n        if (!this.isMenuOpen()) {\r\n            return;\r\n        }\r\n\r\n        this.root.addClass('collapsed');\r\n        this.menuToggle.attr('aria-expanded', 'false');\r\n        this.menuContainer.attr('aria-hidden', 'true');\r\n        this.updateButtonAriaLabel();\r\n        this.updateFocusItemTabIndex();\r\n        this.root.trigger(this.events().menuClosed);\r\n    };\r\n\r\n    /**\r\n     * Show the popover.\r\n     *\r\n     * Note: This triggers the menuOpened event.\r\n     *\r\n     * @method openMenu\r\n     */\r\n    PopoverRegionController.prototype.openMenu = function() {\r\n        // We're already open.\r\n        if (this.isMenuOpen()) {\r\n            return;\r\n        }\r\n\r\n        this.root.removeClass('collapsed');\r\n        this.menuToggle.attr('aria-expanded', 'true');\r\n        this.menuContainer.attr('aria-hidden', 'false');\r\n        this.updateButtonAriaLabel();\r\n        this.updateFocusItemTabIndex();\r\n        // Resolve the promises to allow the handlers to be added\r\n        // to the DOM, if they have been requested.\r\n        this.promises.closeHandlers.resolve();\r\n        this.promises.navigationHandlers.resolve();\r\n        this.root.trigger(this.events().menuOpened);\r\n    };\r\n\r\n    /**\r\n     * Set the appropriate aria label on the popover toggle.\r\n     *\r\n     * @method updateButtonAriaLabel\r\n     */\r\n    PopoverRegionController.prototype.updateButtonAriaLabel = function() {\r\n        if (this.isMenuOpen()) {\r\n            str.get_string('hidepopoverwindow').done(function(string) {\r\n                this.menuToggle.attr('aria-label', string);\r\n            }.bind(this));\r\n        } else {\r\n            str.get_string('showpopoverwindow').done(function(string) {\r\n                this.menuToggle.attr('aria-label', string);\r\n            }.bind(this));\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Set the loading state on this popover.\r\n     *\r\n     * Note: This triggers the startLoading event.\r\n     *\r\n     * @method startLoading\r\n     */\r\n    PopoverRegionController.prototype.startLoading = function() {\r\n        this.isLoading = true;\r\n        this.getContentContainer().addClass('loading');\r\n        this.getContentContainer().attr('aria-busy', 'true');\r\n        this.root.trigger(this.events().startLoading);\r\n    };\r\n\r\n    /**\r\n     * Undo the loading state on this popover.\r\n     *\r\n     * Note: This triggers the stopLoading event.\r\n     *\r\n     * @method stopLoading\r\n     */\r\n    PopoverRegionController.prototype.stopLoading = function() {\r\n        this.isLoading = false;\r\n        this.getContentContainer().removeClass('loading');\r\n        this.getContentContainer().attr('aria-busy', 'false');\r\n        this.root.trigger(this.events().stopLoading);\r\n    };\r\n\r\n    /**\r\n     * Sets the focus on the menu toggle.\r\n     *\r\n     * @method focusMenuToggle\r\n     */\r\n    PopoverRegionController.prototype.focusMenuToggle = function() {\r\n        this.menuToggle.focus();\r\n    };\r\n\r\n    /**\r\n     * Check if a content item has focus.\r\n     *\r\n     * @method contentItemHasFocus\r\n     * @return {bool}\r\n     */\r\n    PopoverRegionController.prototype.contentItemHasFocus = function() {\r\n        return this.getContentItemWithFocus().length > 0;\r\n    };\r\n\r\n    /**\r\n     * Return the currently focused content item.\r\n     *\r\n     * @method getContentItemWithFocus\r\n     * @return {jQuery} object\r\n     */\r\n    PopoverRegionController.prototype.getContentItemWithFocus = function() {\r\n        var currentFocus = $(document.activeElement);\r\n        var items = this.getContent().children();\r\n        var currentItem = items.filter(currentFocus);\r\n\r\n        if (!currentItem.length) {\r\n            currentItem = items.has(currentFocus);\r\n        }\r\n\r\n        return currentItem;\r\n    };\r\n\r\n    /**\r\n     * Focus the given content item or the first focusable element within\r\n     * the content item.\r\n     *\r\n     * @method focusContentItem\r\n     * @param {object} item The content item jQuery element\r\n     */\r\n    PopoverRegionController.prototype.focusContentItem = function(item) {\r\n        if (item.is(SELECTORS.CAN_RECEIVE_FOCUS)) {\r\n            item.focus();\r\n        } else {\r\n            item.find(SELECTORS.CAN_RECEIVE_FOCUS).first().focus();\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Set focus on the first content item in the list.\r\n     *\r\n     * @method focusFirstContentItem\r\n     */\r\n    PopoverRegionController.prototype.focusFirstContentItem = function() {\r\n        this.focusContentItem(this.getContent().children().first());\r\n    };\r\n\r\n    /**\r\n     * Set focus on the last content item in the list.\r\n     *\r\n     * @method focusLastContentItem\r\n     */\r\n    PopoverRegionController.prototype.focusLastContentItem = function() {\r\n        this.focusContentItem(this.getContent().children().last());\r\n    };\r\n\r\n    /**\r\n     * Set focus on the content item after the item that currently has focus\r\n     * in the list.\r\n     *\r\n     * @method focusNextContentItem\r\n     */\r\n    PopoverRegionController.prototype.focusNextContentItem = function() {\r\n        var currentItem = this.getContentItemWithFocus();\r\n\r\n        if (currentItem.length && currentItem.next()) {\r\n            this.focusContentItem(currentItem.next());\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Set focus on the content item preceding the item that currently has focus\r\n     * in the list.\r\n     *\r\n     * @method focusPreviousContentItem\r\n     */\r\n    PopoverRegionController.prototype.focusPreviousContentItem = function() {\r\n        var currentItem = this.getContentItemWithFocus();\r\n\r\n        if (currentItem.length && currentItem.prev()) {\r\n            this.focusContentItem(currentItem.prev());\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Register the minimal amount of listeners for the popover to function.\r\n     *\r\n     * @method registerBaseEventListeners\r\n     */\r\n    PopoverRegionController.prototype.registerBaseEventListeners = function() {\r\n        customEvents.define(this.root, [\r\n            customEvents.events.activate,\r\n            customEvents.events.escape,\r\n        ]);\r\n\r\n        // Toggle the popover visibility on activation (click/enter/space) of the toggle button.\r\n        this.root.on(customEvents.events.activate, SELECTORS.MENU_TOGGLE, function() {\r\n            this.toggleMenu();\r\n        }.bind(this));\r\n\r\n        // Delay the binding of these handlers until the region has been opened.\r\n        this.promises.closeHandlers.done(function() {\r\n            // Close the popover if escape is pressed.\r\n            this.root.on(customEvents.events.escape, function() {\r\n                this.closeMenu();\r\n                this.focusMenuToggle();\r\n            }.bind(this));\r\n\r\n            // Close the popover if any other part of the page is clicked.\r\n            document.addEventListener('click', (e) => {\r\n                const target = e.target;\r\n                // Check if the click is outside the root element.\r\n                if (!this.root.is(target) && !this.root.has(target).length) {\r\n                    this.closeMenu();\r\n                }\r\n            }, true); // `true` makes it a capture phase event listener.\r\n\r\n            customEvents.define(this.getContentContainer(), [\r\n                customEvents.events.scrollBottom\r\n            ]);\r\n        }.bind(this));\r\n    };\r\n\r\n    /**\r\n     * Set up the event listeners for keyboard navigating a list of content items.\r\n     *\r\n     * @method registerListNavigationEventListeners\r\n     */\r\n    PopoverRegionController.prototype.registerListNavigationEventListeners = function() {\r\n        customEvents.define(this.root, [\r\n            customEvents.events.down\r\n        ]);\r\n\r\n        // If the down arrow is pressed then open the menu and focus the first content\r\n        // item or focus the next content item if the menu is open.\r\n        this.root.on(customEvents.events.down, function(e, data) {\r\n            if (!this.isMenuOpen()) {\r\n                this.openMenu();\r\n                this.focusFirstContentItem();\r\n            } else {\r\n                if (this.contentItemHasFocus()) {\r\n                    this.focusNextContentItem();\r\n                } else {\r\n                    this.focusFirstContentItem();\r\n                }\r\n            }\r\n\r\n            data.originalEvent.preventDefault();\r\n        }.bind(this));\r\n\r\n        // Delay the binding of these handlers until the region has been opened.\r\n        this.promises.navigationHandlers.done(function() {\r\n            customEvents.define(this.root, [\r\n                customEvents.events.up,\r\n                customEvents.events.home,\r\n                customEvents.events.end,\r\n            ]);\r\n\r\n            // Shift focus to the previous content item if the up key is pressed.\r\n            this.root.on(customEvents.events.up, function(e, data) {\r\n                this.focusPreviousContentItem();\r\n                data.originalEvent.preventDefault();\r\n            }.bind(this));\r\n\r\n            // Jump focus to the first content item if the home key is pressed.\r\n            this.root.on(customEvents.events.home, function(e, data) {\r\n                this.focusFirstContentItem();\r\n                data.originalEvent.preventDefault();\r\n            }.bind(this));\r\n\r\n            // Jump focus to the last content item if the end key is pressed.\r\n            this.root.on(customEvents.events.end, function(e, data) {\r\n                this.focusLastContentItem();\r\n                data.originalEvent.preventDefault();\r\n            }.bind(this));\r\n        }.bind(this));\r\n    };\r\n\r\n    /**\r\n     * Set the appropriate tabindex attribute on the popover toggle.\r\n     *\r\n     * @method updateFocusItemTabIndex\r\n     */\r\n    PopoverRegionController.prototype.updateFocusItemTabIndex = function() {\r\n        if (this.isMenuOpen()) {\r\n            this.menuContainer.find(SELECTORS.CAN_RECEIVE_FOCUS).removeAttr('tabindex');\r\n        } else {\r\n            this.menuContainer.find(SELECTORS.CAN_RECEIVE_FOCUS).attr('tabindex', '-1');\r\n        }\r\n    };\r\n\r\n    return PopoverRegionController;\r\n});\r\n"],"names":["define","$","str","customEvents","SELECTORS","PopoverRegionController","element","root","content","this","find","contentContainer","menuContainer","menuToggle","isLoading","promises","closeHandlers","Deferred","navigationHandlers","registerBaseEventListeners","prototype","events","menuOpened","menuClosed","startLoading","stopLoading","getContentContainer","getContent","isMenuOpen","hasClass","toggleMenu","closeMenu","openMenu","addClass","attr","updateButtonAriaLabel","updateFocusItemTabIndex","trigger","removeClass","resolve","get_string","done","string","bind","focusMenuToggle","focus","contentItemHasFocus","getContentItemWithFocus","length","currentFocus","document","activeElement","items","children","currentItem","filter","has","focusContentItem","item","is","first","focusFirstContentItem","focusLastContentItem","last","focusNextContentItem","next","focusPreviousContentItem","prev","activate","escape","on","addEventListener","e","target","scrollBottom","registerListNavigationEventListeners","down","data","originalEvent","preventDefault","up","home","end","removeAttr"],"mappings":"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"}