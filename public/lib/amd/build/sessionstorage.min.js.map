{"version":3,"file":"sessionstorage.min.js","sources":["../src/sessionstorage.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * Simple API for set/get to sessionstorage, with cacherev expiration.\r\n *\r\n * Session storage will only persist for as long as the browser window\r\n * stays open.\r\n *\r\n * See:\r\n * https://developer.mozilla.org/en-US/docs/Web/API/Window/sessionStorage\r\n *\r\n * @module     core/sessionstorage\r\n * @copyright  2017 Ryan Wyllie <ryan@moodle.com>\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\ndefine(['core/config', 'core/storagewrapper'], function(config, StorageWrapper) {\r\n\r\n    // Private functions and variables.\r\n    /** @var {Object} StorageWrapper - Wraps browsers sessionStorage object */\r\n    var storage = new StorageWrapper(window.sessionStorage);\r\n\r\n    return /** @alias module:core/sessionstorage */ {\r\n        /**\r\n         * Get a value from session storage. Remember - all values must be strings.\r\n         *\r\n         * @method get\r\n         * @param {string} key The cache key to check.\r\n         * @return {boolean|string} False if the value is not in the cache, or some other error - a string otherwise.\r\n         */\r\n        get: function(key) {\r\n            return storage.get(key);\r\n        },\r\n\r\n        /**\r\n         * Set a value to session storage. Remember - all values must be strings.\r\n         *\r\n         * @method set\r\n         * @param {string} key The cache key to set.\r\n         * @param {string} value The value to set.\r\n         * @return {boolean} False if the value can't be saved in the cache, or some other error - true otherwise.\r\n         */\r\n        set: function(key, value) {\r\n            return storage.set(key, value);\r\n        }\r\n\r\n    };\r\n});\r\n"],"names":["define","config","StorageWrapper","storage","window","sessionStorage","get","key","set","value"],"mappings":";;;;;;;;;;;;;AA4BAA,6BAAO,CAAC,cAAe,wBAAwB,SAASC,OAAQC,oBAIxDC,QAAU,IAAID,eAAeE,OAAOC,sBAEQ,CAQ5CC,IAAK,SAASC,YACHJ,QAAQG,IAAIC,MAWvBC,IAAK,SAASD,IAAKE,cACRN,QAAQK,IAAID,IAAKE"}