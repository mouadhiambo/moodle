{"version":3,"file":"toast.min.js","sources":["../src/toast.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * A system for displaying small snackbar notifications to users which disappear shortly after they are shown.\r\n *\r\n * @module     core/toast\r\n * @copyright  2019 Andrew Nicols <andrew@nicols.co.uk>\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\nimport Templates from 'core/templates';\r\nimport Notification from 'core/notification';\r\nimport Pending from 'core/pending';\r\n\r\nconst regionSelector = '.toast-wrapper';\r\n\r\n/**\r\n * Add a new region to place toasts in, taking in a parent element.\r\n *\r\n * @method\r\n * @param {HTMLElement} parent\r\n */\r\nexport const addToastRegion = async(parent) => {\r\n    const pendingPromise = new Pending('addToastRegion');\r\n\r\n    try {\r\n        const {html, js} = await Templates.renderForPromise('core/local/toast/wrapper', {});\r\n        Templates.prependNodeContents(parent, html, js);\r\n    } catch (e) {\r\n        Notification.exception(e);\r\n    }\r\n\r\n    pendingPromise.resolve();\r\n};\r\n\r\n/**\r\n * Add a new toast or snackbar notification to the page.\r\n *\r\n * @method\r\n * @param {String|Promise<string>} message\r\n * @param {Object} configuration\r\n * @param {String} [configuration.title]\r\n * @param {String} [configuration.subtitle]\r\n * @param {String} [configuration.type=info] Optional type of the toast notification ('success', 'info', 'warning' or 'danger')\r\n * @param {Boolean} [configuration.autohide=true]\r\n * @param {Boolean} [configuration.closeButton=false]\r\n * @param {Number} [configuration.delay=4000]\r\n *\r\n * @example\r\n * import {add as addToast} from 'core/toast';\r\n * import {getString} from 'core/str';\r\n *\r\n * addToast('Example string', {\r\n *     type: 'warning',\r\n *     autohide: false,\r\n *     closeButton: true,\r\n * });\r\n *\r\n * addToast(getString('example', 'mod_myexample'), {\r\n *     type: 'warning',\r\n *     autohide: false,\r\n *     closeButton: true,\r\n * });\r\n */\r\nexport const add = async(message, configuration) => {\r\n    const pendingPromise = new Pending('addToastRegion');\r\n    configuration = {\r\n        type: 'info',\r\n        closeButton: false,\r\n        autohide: true,\r\n        delay: 4000,\r\n        ...configuration,\r\n    };\r\n\r\n    const templateName = `core/local/toast/message`;\r\n    try {\r\n        const {html, js} = await Templates.renderForPromise(templateName, {\r\n            message: await message,\r\n            ...configuration\r\n        });\r\n        const targetNode = await getTargetNode();\r\n        Templates.prependNodeContents(targetNode, html, js);\r\n    } catch (e) {\r\n        Notification.exception(e);\r\n    }\r\n\r\n    pendingPromise.resolve();\r\n};\r\n\r\nconst getTargetNode = async() => {\r\n    const regions = document.querySelectorAll(regionSelector);\r\n\r\n    if (regions.length) {\r\n        return regions[regions.length - 1];\r\n    }\r\n\r\n    await addToastRegion(document.body, 'fixed-bottom');\r\n    return getTargetNode();\r\n};\r\n\r\n/**\r\n * Remove a parent region.\r\n *\r\n * This is useful in cases such as where a dialog is to be removed and the toast region should be moved back to the body.\r\n *\r\n * @param {HTMLElement} parent The region that the toast region is currently a child of.\r\n * @param {HTMLElement} newParent The parent element to move the toast region content to.\r\n */\r\nexport const removeToastRegion = async(parent, newParent = document) => {\r\n    const pendingPromise = new Pending('core/toast:removeToastRegion');\r\n    const getRegionFromParent = (thisParent) => thisParent.querySelector(regionSelector);\r\n\r\n    const regionToRemove = getRegionFromParent(parent);\r\n    if (regionToRemove) {\r\n        const targetRegion = getRegionFromParent(newParent);\r\n\r\n        regionToRemove.children.forEach((node) => {\r\n            targetRegion.insertBefore(node, targetRegion.firstChild);\r\n        });\r\n\r\n        regionToRemove.remove();\r\n    }\r\n    pendingPromise.resolve();\r\n};\r\n"],"names":["addToastRegion","async","pendingPromise","Pending","html","js","Templates","renderForPromise","prependNodeContents","parent","e","exception","resolve","message","configuration","type","closeButton","autohide","delay","targetNode","getTargetNode","regions","document","querySelectorAll","length","body","newParent","getRegionFromParent","thisParent","querySelector","regionToRemove","targetRegion","children","forEach","node","insertBefore","firstChild","remove"],"mappings":";;;;;;;sRAkCaA,eAAiBC,MAAAA,eACpBC,eAAiB,IAAIC,iBAAQ,4BAGzBC,KAACA,KAADC,GAAOA,UAAYC,mBAAUC,iBAAiB,2BAA4B,uBACtEC,oBAAoBC,OAAQL,KAAMC,IAC9C,MAAOK,yBACQC,UAAUD,GAG3BR,eAAeU,+DAgCAX,MAAMY,QAASC,uBACxBZ,eAAiB,IAAIC,iBAAQ,kBACnCW,cAAgB,CACZC,KAAM,OACNC,aAAa,EACbC,UAAU,EACVC,MAAO,OACJJ,yBAKGV,KAACA,KAADC,GAAOA,UAAYC,mBAAUC,4CAA+B,CAC9DM,cAAeA,WACZC,gBAEDK,iBAAmBC,mCACfZ,oBAAoBW,WAAYf,KAAMC,IAClD,MAAOK,yBACQC,UAAUD,GAG3BR,eAAeU,iBAGbQ,cAAgBnB,gBACZoB,QAAUC,SAASC,iBA5EN,yBA8EfF,QAAQG,OACDH,QAAQA,QAAQG,OAAS,UAG9BxB,eAAesB,SAASG,MACvBL,6CAWsBnB,eAAMQ,YAAQiB,iEAAYJ,eACjDpB,eAAiB,IAAIC,iBAAQ,gCAC7BwB,oBAAuBC,YAAeA,WAAWC,cAhGpC,kBAkGbC,eAAiBH,oBAAoBlB,WACvCqB,eAAgB,OACVC,aAAeJ,oBAAoBD,WAEzCI,eAAeE,SAASC,SAASC,OAC7BH,aAAaI,aAAaD,KAAMH,aAAaK,eAGjDN,eAAeO,SAEnBnC,eAAeU"}