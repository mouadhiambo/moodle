{"version":3,"file":"sortable_list.min.js","sources":["../src/sortable_list.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * A javascript module to handle list items drag and drop\r\n *\r\n * Example of usage:\r\n *\r\n * Create a list (for example `<ul>` or `<tbody>`) where each draggable element has a drag handle.\r\n * The best practice is to use the template core/drag_handle:\r\n * $OUTPUT->render_from_template('core/drag_handle', ['movetitle' => get_string('movecontent', 'moodle', ELEMENTNAME)]);\r\n *\r\n * Attach this JS module to this list:\r\n *\r\n * Space between define and ( critical in comment but not allowed in code in order to function\r\n * correctly with Moodle's requirejs.php\r\n *\r\n * For the full list of possible parameters see var defaultParameters below.\r\n *\r\n * The following jQuery events are fired:\r\n * - SortableList.EVENTS.DRAGSTART : when user started dragging a list element\r\n * - SortableList.EVENTS.DRAG : when user dragged a list element to a new position\r\n * - SortableList.EVENTS.DROP : when user dropped a list element\r\n * - SortableList.EVENTS.DROPEND : when user finished dragging - either fired right after dropping or\r\n *                          if \"Esc\" was pressed during dragging\r\n *\r\n * @example\r\n * define (['jquery', 'core/sortable_list'], function($, SortableList) {\r\n *     var list = new SortableList('ul.my-awesome-list'); // source list (usually <ul> or <tbody>) - selector or element\r\n *\r\n *     // Listen to the events when element is dragged.\r\n *     $('ul.my-awesome-list > *').on(SortableList.EVENTS.DROP, function(evt, info) {\r\n *         console.log(info);\r\n *     });\r\n *\r\n *     // Advanced usage. Overwrite methods getElementName, getDestinationName, moveDialogueTitle, for example:\r\n *     list.getElementName = function(element) {\r\n *         return $.Deferred().resolve(element.attr('data-name'));\r\n *     }\r\n * });\r\n *\r\n * @module     core/sortable_list\r\n * @class      core/sortable_list\r\n * @copyright  2018 Marina Glancy\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\ndefine([\r\n    'jquery',\r\n    'core/log',\r\n    'core/autoscroll',\r\n    'core/event_dispatcher',\r\n    'core/str',\r\n    'core/modal_cancel',\r\n    'core/modal_events',\r\n    'core/notification',\r\n], function($, log, autoScroll, EventDispatcher, str, ModalCancel, ModalEvents, Notification) {\r\n\r\n    /**\r\n     * Default parameters\r\n     *\r\n     * @private\r\n     * @type {Object}\r\n     */\r\n    var defaultParameters = {\r\n        targetListSelector: null,\r\n        moveHandlerSelector: '[data-drag-type=move]',\r\n        isHorizontal: false,\r\n        autoScroll: true\r\n    };\r\n\r\n    /**\r\n     * Class names for different elements that may be changed during sorting\r\n     *\r\n     * @private\r\n     * @type {Object}\r\n     */\r\n    var CSS = {\r\n        keyboardDragClass: 'dragdrop-keyboard-drag',\r\n        isDraggedClass: 'sortable-list-is-dragged',\r\n        isDroppedClass: 'sortable-list-is-dropped',\r\n        currentPositionClass: 'sortable-list-current-position',\r\n        sourceListClass: 'sortable-list-source',\r\n        targetListClass: 'sortable-list-target',\r\n        overElementClass: 'sortable-list-over-element'\r\n    };\r\n\r\n    /**\r\n     * Test the browser support for options objects on event listeners.\r\n     * @return {Boolean}\r\n     */\r\n    var eventListenerOptionsSupported = function() {\r\n        var passivesupported = false,\r\n            options,\r\n            testeventname = \"testpassiveeventoptions\";\r\n\r\n        // Options support testing example from:\r\n        // https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener\r\n\r\n        try {\r\n            options = Object.defineProperty({}, \"passive\", {\r\n                // eslint-disable-next-line getter-return\r\n                get: function() {\r\n                    passivesupported = true;\r\n                }\r\n            });\r\n\r\n            // We use an event name that is not likely to conflict with any real event.\r\n            document.addEventListener(testeventname, options, options);\r\n            // We remove the event listener as we have tested the options already.\r\n            document.removeEventListener(testeventname, options, options);\r\n        } catch (err) {\r\n            // It's already false.\r\n            passivesupported = false;\r\n        }\r\n        return passivesupported;\r\n    };\r\n\r\n    /**\r\n     * Allow to create non-passive touchstart listeners and prevent page scrolling when dragging\r\n     * From: https://stackoverflow.com/a/48098097\r\n     *\r\n     * @param {string} eventname\r\n     * @returns {object}\r\n     */\r\n    var registerNotPassiveListeners = function(eventname) {\r\n        return {\r\n            setup: function(x, ns, handle) {\r\n                if (ns.includes('notPassive')) {\r\n                    this.addEventListener(eventname, handle, {passive: false});\r\n                    return true;\r\n                } else {\r\n                    return false;\r\n                }\r\n            }\r\n        };\r\n    };\r\n\r\n    if (eventListenerOptionsSupported) {\r\n        $.event.special.touchstart = registerNotPassiveListeners('touchstart');\r\n        $.event.special.touchmove = registerNotPassiveListeners('touchmove');\r\n        $.event.special.touchend = registerNotPassiveListeners('touchend');\r\n    }\r\n\r\n    /**\r\n     * Initialise sortable list.\r\n     *\r\n     * @param {(String|jQuery|Element)} root JQuery/DOM element representing sortable list (i.e. <ul>, <tbody>) or CSS selector\r\n     * @param {Object} config Parameters for the list. See defaultParameters above for examples.\r\n     * @param {(String|jQuery|Element)} config.targetListSelector target lists, by default same as root\r\n     * @param {String} config.moveHandlerSelector  CSS selector for a drag handle. By default '[data-drag-type=move]'\r\n     * @param {String} config.listSelector   CSS selector for target lists. By default the same as root\r\n     * @param {(Boolean|Function)} config.isHorizontal Set to true if the list is horizontal (can also be a callback\r\n     *                                                 with list as an argument)\r\n     * @param {Boolean} config.autoScroll Engages autoscroll module for automatic vertical scrolling of the whole page,\r\n     *                                    by default true\r\n     */\r\n    var SortableList = function(root, config) {\r\n\r\n        this.info = null;\r\n        this.proxy = null;\r\n        this.proxyDelta = null;\r\n        this.dragCounter = 0;\r\n        this.lastEvent = null;\r\n\r\n        this.config = $.extend({}, defaultParameters, config || {});\r\n        this.config.listSelector = root;\r\n        if (!this.config.targetListSelector) {\r\n            this.config.targetListSelector = root;\r\n        }\r\n        if (typeof this.config.listSelector === 'object') {\r\n            // The root is an element on the page. Register a listener for this element.\r\n            $(this.config.listSelector).on('mousedown touchstart.notPassive', $.proxy(this.dragStartHandler, this));\r\n        } else {\r\n            // The root is a CSS selector. Register a listener that picks up the element dynamically.\r\n            $('body').on('mousedown touchstart.notPassive', this.config.listSelector, $.proxy(this.dragStartHandler, this));\r\n        }\r\n        if (this.config.moveHandlerSelector !== null) {\r\n            $('body').on('click keypress', this.config.moveHandlerSelector, $.proxy(this.clickHandler, this));\r\n        }\r\n\r\n    };\r\n\r\n    /**\r\n     * Events fired by this entity\r\n     *\r\n     * @public\r\n     * @type {Object}\r\n     */\r\n    SortableList.EVENTS = {\r\n        // Legacy jQuery events.\r\n        DRAGSTART: 'sortablelist-dragstart',\r\n        DRAG: 'sortablelist-drag',\r\n        DROP: 'sortablelist-drop',\r\n        DRAGEND: 'sortablelist-dragend',\r\n        // Native Javascript events.\r\n        elementDragStart: 'core/sortable_list:dragStart',\r\n        elementDrag: 'core/sortable_list:drag',\r\n        elementDrop: 'core/sortable_list:drop',\r\n        elementDragEnd: 'core/sortable_list:dragEnd',\r\n    };\r\n\r\n    /**\r\n     * Resets the temporary classes assigned during dragging\r\n     * @private\r\n     */\r\n     SortableList.prototype.resetDraggedClasses = function() {\r\n        var classes = [\r\n            CSS.isDraggedClass,\r\n            CSS.currentPositionClass,\r\n            CSS.overElementClass,\r\n            CSS.targetListClass,\r\n        ];\r\n        for (var i in classes) {\r\n            $('.' + classes[i]).removeClass(classes[i]);\r\n        }\r\n        if (this.proxy) {\r\n            this.proxy.remove();\r\n            this.proxy = $();\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Calculates evt.pageX, evt.pageY, evt.clientX and evt.clientY\r\n     *\r\n     * For touch events pageX and pageY are taken from the first touch;\r\n     * For the emulated mousemove event they are taken from the last real event.\r\n     *\r\n     * @private\r\n     * @param {Event} evt\r\n     */\r\n    SortableList.prototype.calculatePositionOnPage = function(evt) {\r\n\r\n        if (evt.originalEvent && evt.originalEvent.touches && evt.originalEvent.touches[0] !== undefined) {\r\n            // This is a touchmove or touchstart event, get position from the first touch position.\r\n            var touch = evt.originalEvent.touches[0];\r\n            evt.pageX = touch.pageX;\r\n            evt.pageY = touch.pageY;\r\n        }\r\n\r\n        if (evt.pageX === undefined) {\r\n            // Information is not present in case of touchend or when event was emulated by autoScroll.\r\n            // Take the absolute mouse position from the last event.\r\n            evt.pageX = this.lastEvent.pageX;\r\n            evt.pageY = this.lastEvent.pageY;\r\n        } else {\r\n            this.lastEvent = evt;\r\n        }\r\n\r\n        if (evt.clientX === undefined) {\r\n            // If not provided in event calculate relative mouse position.\r\n            evt.clientX = Math.round(evt.pageX - $(window).scrollLeft());\r\n            evt.clientY = Math.round(evt.pageY - $(window).scrollTop());\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Handler from dragstart event\r\n     *\r\n     * @private\r\n     * @param {Event} evt\r\n     */\r\n    SortableList.prototype.dragStartHandler = function(evt) {\r\n        if (this.info !== null) {\r\n            if (this.info.type === 'click' || this.info.type === 'touchend') {\r\n                // Ignore double click.\r\n                return;\r\n            }\r\n            // Mouse down or touch while already dragging, cancel previous dragging.\r\n            this.moveElement(this.info.sourceList, this.info.sourceNextElement);\r\n            this.finishDragging();\r\n        }\r\n\r\n        if (evt.type === 'mousedown' && evt.which !== 1) {\r\n            // We only need left mouse click. If this is a mousedown event with right/middle click ignore it.\r\n            return;\r\n        }\r\n\r\n        this.calculatePositionOnPage(evt);\r\n        var movedElement = $(evt.target).closest($(evt.currentTarget).children());\r\n        if (!movedElement.length) {\r\n            // Can't find the element user wants to drag. They clicked on the list but outside of any element of the list.\r\n            return;\r\n        }\r\n\r\n        // Check that we grabbed the element by the handle.\r\n        if (this.config.moveHandlerSelector !== null) {\r\n            if (!$(evt.target).closest(this.config.moveHandlerSelector, movedElement).length) {\r\n                return;\r\n            }\r\n        }\r\n\r\n        evt.stopPropagation();\r\n        evt.preventDefault();\r\n\r\n        // Information about moved element with original location.\r\n        // This object is passed to event observers.\r\n        this.dragCounter++;\r\n        this.info = {\r\n            element: movedElement,\r\n            sourceNextElement: movedElement.next(),\r\n            sourceList: movedElement.parent(),\r\n            targetNextElement: movedElement.next(),\r\n            targetList: movedElement.parent(),\r\n            type: evt.type,\r\n            dropped: false,\r\n            startX: evt.pageX,\r\n            startY: evt.pageY,\r\n            startTime: new Date().getTime()\r\n        };\r\n\r\n        $(this.config.targetListSelector).addClass(CSS.targetListClass);\r\n\r\n        var offset = movedElement.offset();\r\n        movedElement.addClass(CSS.currentPositionClass);\r\n        this.proxyDelta = {x: offset.left - evt.pageX, y: offset.top - evt.pageY};\r\n        this.proxy = $();\r\n        var thisDragCounter = this.dragCounter;\r\n        setTimeout($.proxy(function() {\r\n            // This mousedown event may in fact be a beginning of a 'click' event. Use timeout before showing the\r\n            // dragged object so we can catch click event. When timeout finishes make sure that click event\r\n            // has not happened during this half a second.\r\n            // Verify dragcounter to make sure the user did not manage to do two very fast drag actions one after another.\r\n            if (this.info === null || this.info.type === 'click' || this.info.type === 'keypress'\r\n                    || this.dragCounter !== thisDragCounter) {\r\n                return;\r\n            }\r\n\r\n            // Create a proxy - the copy of the dragged element that moves together with a mouse.\r\n            this.createProxy();\r\n        }, this), 500);\r\n\r\n        // Start drag.\r\n        $(window).on('mousemove touchmove.notPassive mouseup touchend.notPassive', $.proxy(this.dragHandler, this));\r\n        $(window).on('keypress', $.proxy(this.dragcancelHandler, this));\r\n\r\n        // Start autoscrolling. Every time the page is scrolled emulate the mousemove event.\r\n        if (this.config.autoScroll) {\r\n            autoScroll.start(function() {\r\n                $(window).trigger('mousemove');\r\n            });\r\n        }\r\n\r\n       this.executeCallback(SortableList.EVENTS.elementDragStart);\r\n    };\r\n\r\n    /**\r\n     * Creates a \"proxy\" object - a copy of the element that is being moved that always follows the mouse\r\n     * @private\r\n     */\r\n    SortableList.prototype.createProxy = function() {\r\n        this.proxy = this.info.element.clone();\r\n        this.info.sourceList.append(this.proxy);\r\n        this.proxy.removeAttr('id').removeClass(CSS.currentPositionClass)\r\n            .addClass(CSS.isDraggedClass).css({position: 'fixed'});\r\n        this.proxy.offset({top: this.proxyDelta.y + this.lastEvent.pageY, left: this.proxyDelta.x + this.lastEvent.pageX});\r\n    };\r\n\r\n    /**\r\n     * Handler for click event - when user clicks on the drag handler or presses Enter on keyboard\r\n     *\r\n     * @private\r\n     * @param {Event} evt\r\n     */\r\n    SortableList.prototype.clickHandler = function(evt) {\r\n        if (evt.type === 'keypress' && evt.originalEvent.keyCode !== 13 && evt.originalEvent.keyCode !== 32) {\r\n            return;\r\n        }\r\n        if (this.info !== null) {\r\n            // Ignore double click.\r\n            return;\r\n        }\r\n\r\n        // Find the element that this draghandle belongs to.\r\n        var clickedElement = $(evt.target).closest(this.config.moveHandlerSelector),\r\n            sourceList = clickedElement.closest(this.config.listSelector),\r\n            movedElement = clickedElement.closest(sourceList.children());\r\n        if (!movedElement.length) {\r\n            return;\r\n        }\r\n\r\n        evt.preventDefault();\r\n        evt.stopPropagation();\r\n\r\n        // Store information about moved element with original location.\r\n        this.dragCounter++;\r\n        this.info = {\r\n            element: movedElement,\r\n            sourceNextElement: movedElement.next(),\r\n            sourceList: sourceList,\r\n            targetNextElement: movedElement.next(),\r\n            targetList: sourceList,\r\n            dropped: false,\r\n            type: evt.type,\r\n            startTime: new Date().getTime()\r\n        };\r\n\r\n        this.executeCallback(SortableList.EVENTS.elementDragStart);\r\n        this.displayMoveDialogue(clickedElement);\r\n    };\r\n\r\n    /**\r\n     * Finds the position of the mouse inside the element - on the top, on the bottom, on the right or on the left\\\r\n     *\r\n     * Used to determine if the moved element should be moved after or before the current element\r\n     *\r\n     * @private\r\n     * @param {Number} pageX\r\n     * @param {Number} pageY\r\n     * @param {jQuery} element\r\n     * @returns {(Object|null)}\r\n     */\r\n    SortableList.prototype.getPositionInNode = function(pageX, pageY, element) {\r\n        if (!element.length) {\r\n            return null;\r\n        }\r\n        var node = element[0],\r\n            offset = 0,\r\n            rect = node.getBoundingClientRect(),\r\n            y = pageY - (rect.top + window.scrollY),\r\n            x = pageX - (rect.left + window.scrollX);\r\n        if (x >= -offset && x <= rect.width + offset && y >= -offset && y <= rect.height + offset) {\r\n            return {\r\n                x: x,\r\n                y: y,\r\n                xRatio: rect.width ? (x / rect.width) : 0,\r\n                yRatio: rect.height ? (y / rect.height) : 0\r\n            };\r\n        }\r\n        return null;\r\n    };\r\n\r\n    /**\r\n     * Check if list is horizontal\r\n     *\r\n     * @param {jQuery} element\r\n     * @return {Boolean}\r\n     */\r\n    SortableList.prototype.isListHorizontal = function(element) {\r\n        var isHorizontal = this.config.isHorizontal;\r\n        if (isHorizontal === true || isHorizontal === false) {\r\n            return isHorizontal;\r\n        }\r\n        return isHorizontal(element);\r\n    };\r\n\r\n    /**\r\n     * Handler for events mousemove touchmove mouseup touchend\r\n     *\r\n     * @private\r\n     * @param {Event} evt\r\n     */\r\n    SortableList.prototype.dragHandler = function(evt) {\r\n\r\n        evt.preventDefault();\r\n        evt.stopPropagation();\r\n\r\n        this.calculatePositionOnPage(evt);\r\n\r\n        // We can not use evt.target here because it will most likely be our proxy.\r\n        // Move the proxy out of the way so we can find the element at the current mouse position.\r\n        this.proxy.offset({top: -1000, left: -1000});\r\n        // Find the element at the current mouse position.\r\n        var element = $(document.elementFromPoint(evt.clientX, evt.clientY));\r\n\r\n        // Find the list element and the list over the mouse position.\r\n        var mainElement = this.info.element[0],\r\n            isNotSelf = function() {\r\n                return this !== mainElement;\r\n            },\r\n            current = element.closest('.' + CSS.targetListClass + ' > :not(.' + CSS.isDraggedClass + ')').filter(isNotSelf),\r\n            currentList = element.closest('.' + CSS.targetListClass),\r\n            proxy = this.proxy,\r\n            isNotProxy = function() {\r\n                return !proxy || !proxy.length || this !== proxy[0];\r\n            };\r\n\r\n        // Add the specified class to the list element we are hovering.\r\n        $('.' + CSS.overElementClass).removeClass(CSS.overElementClass);\r\n        current.addClass(CSS.overElementClass);\r\n\r\n        // Move proxy to the current position.\r\n        this.proxy.offset({top: this.proxyDelta.y + evt.pageY, left: this.proxyDelta.x + evt.pageX});\r\n\r\n        if (currentList.length && !currentList.children().filter(isNotProxy).length) {\r\n            // Mouse is over an empty list.\r\n            this.moveElement(currentList, $());\r\n        } else if (current.length === 1 && !this.info.element.find(current[0]).length) {\r\n            // Mouse is over an element in a list - find whether we should move the current position\r\n            // above or below this element.\r\n            var coordinates = this.getPositionInNode(evt.pageX, evt.pageY, current);\r\n            if (coordinates) {\r\n                var parent = current.parent(),\r\n                    ratio = this.isListHorizontal(parent) ? coordinates.xRatio : coordinates.yRatio,\r\n                    subList = current.find('.' + CSS.targetListClass),\r\n                    subListEmpty = !subList.children().filter(isNotProxy).filter(isNotSelf).length;\r\n                if (subList.length && subListEmpty && ratio > 0.2 && ratio < 0.8) {\r\n                    // This is an element that is a parent of an empty list and we are around the middle of this element.\r\n                    // Treat it as if we are over this empty list.\r\n                   this.moveElement(subList, $());\r\n                } else if (ratio > 0.5) {\r\n                    // Insert after this element.\r\n                   this.moveElement(parent, current.next().filter(isNotProxy));\r\n                } else {\r\n                    // Insert before this element.\r\n                   this.moveElement(parent, current);\r\n                }\r\n            }\r\n        }\r\n\r\n        if (evt.type === 'mouseup' || evt.type === 'touchend') {\r\n            // Drop the moved element.\r\n            this.info.endX = evt.pageX;\r\n            this.info.endY = evt.pageY;\r\n            this.info.endTime = new Date().getTime();\r\n            this.info.dropped = true;\r\n            this.info.positionChanged = this.hasPositionChanged(this.info);\r\n            var oldinfo = this.info;\r\n            this.executeCallback(SortableList.EVENTS.elementDrop);\r\n            this.finishDragging();\r\n\r\n            if (evt.type === 'touchend'\r\n                    && this.config.moveHandlerSelector !== null\r\n                    && (oldinfo.endTime - oldinfo.startTime < 500)\r\n                    && !oldinfo.positionChanged) {\r\n                // The click event is not triggered on touch screens because we call preventDefault in touchstart handler.\r\n                // If the touchend quickly followed touchstart without moving, consider it a \"click\".\r\n                this.clickHandler(evt);\r\n            } else if (oldinfo.positionChanged) {\r\n                mainElement.classList.add(CSS.isDroppedClass);\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Checks if the position of the dragged element in the list has changed\r\n     *\r\n     * @private\r\n     * @param {Object} info\r\n     * @return {Boolean}\r\n     */\r\n    SortableList.prototype.hasPositionChanged = function(info) {\r\n        return info.sourceList[0] !== info.targetList[0] ||\r\n            info.sourceNextElement.length !== info.targetNextElement.length ||\r\n            (info.sourceNextElement.length && info.sourceNextElement[0] !== info.targetNextElement[0]);\r\n    };\r\n\r\n    /**\r\n     * Moves the current position of the dragged element\r\n     *\r\n     * @private\r\n     * @param {jQuery} parentElement\r\n     * @param {jQuery} beforeElement\r\n     */\r\n    SortableList.prototype.moveElement = function(parentElement, beforeElement) {\r\n        var dragEl = this.info.element;\r\n        if (beforeElement.length && beforeElement[0] === dragEl[0]) {\r\n            // Insert before the current position of the dragged element - nothing to do.\r\n            return;\r\n        }\r\n        if (parentElement[0] === this.info.targetList[0] &&\r\n                beforeElement.length === this.info.targetNextElement.length &&\r\n                beforeElement[0] === this.info.targetNextElement[0]) {\r\n            // Insert in the same location as the current position - nothing to do.\r\n            return;\r\n        }\r\n\r\n        if (beforeElement.length) {\r\n            // Move the dragged element before the specified element.\r\n            parentElement[0].insertBefore(dragEl[0], beforeElement[0]);\r\n        } else if (this.proxy && this.proxy.parent().length && this.proxy.parent()[0] === parentElement[0]) {\r\n            // We need to move to the end of the list but the last element in this list is a proxy.\r\n            // Always leave the proxy in the end of the list.\r\n            parentElement[0].insertBefore(dragEl[0], this.proxy[0]);\r\n        } else {\r\n            // Insert in the end of a list (when proxy is in another list).\r\n            parentElement[0].appendChild(dragEl[0]);\r\n        }\r\n\r\n        // Save the current position of the dragged element in the list.\r\n        this.info.targetList = parentElement;\r\n        this.info.targetNextElement = beforeElement;\r\n        this.executeCallback(SortableList.EVENTS.elementDrag);\r\n    };\r\n\r\n    /**\r\n     * Finish dragging (when dropped or cancelled).\r\n     * @private\r\n     */\r\n    SortableList.prototype.finishDragging = function() {\r\n        this.resetDraggedClasses();\r\n        if (this.config.autoScroll) {\r\n            autoScroll.stop();\r\n        }\r\n        $(window).off('mousemove touchmove.notPassive mouseup touchend.notPassive', $.proxy(this.dragHandler, this));\r\n        $(window).off('keypress', $.proxy(this.dragcancelHandler, this));\r\n        this.executeCallback(SortableList.EVENTS.elementDragEnd);\r\n        this.info = null;\r\n    };\r\n\r\n    /**\r\n     * Executes callback specified in sortable list parameters\r\n     *\r\n     * @private\r\n     * @param {String} eventName\r\n     */\r\n    SortableList.prototype.executeCallback = function(eventName) {\r\n        EventDispatcher.dispatchEvent(eventName, this.info, this.info.element[0]);\r\n\r\n        // The following event trigger is legacy and will be removed in the future.\r\n        // This approach provides a backwards-compatibility layer for the new events.\r\n        // Code should be updated to make use of native events.\r\n        const legacyEventNamesMap = new Map([\r\n            [SortableList.EVENTS.elementDragStart, SortableList.EVENTS.DRAGSTART],\r\n            [SortableList.EVENTS.elementDrag, SortableList.EVENTS.DRAG],\r\n            [SortableList.EVENTS.elementDrop, SortableList.EVENTS.DROP],\r\n            [SortableList.EVENTS.elementDragEnd, SortableList.EVENTS.DRAGEND],\r\n        ]);\r\n        this.info.element.trigger(legacyEventNamesMap.get(eventName), this.info);\r\n    };\r\n\r\n    /**\r\n     * Handler from keypress event (cancel dragging when Esc is pressed)\r\n     *\r\n     * @private\r\n     * @param {Event} evt\r\n     */\r\n    SortableList.prototype.dragcancelHandler = function(evt) {\r\n        if (evt.type !== 'keypress' || evt.originalEvent.keyCode !== 27) {\r\n            // Only cancel dragging when Esc was pressed.\r\n            return;\r\n        }\r\n        // Dragging was cancelled. Return item to the original position.\r\n        this.moveElement(this.info.sourceList, this.info.sourceNextElement);\r\n        this.finishDragging();\r\n    };\r\n\r\n    /**\r\n     * Returns the name of the current element to be used in the move dialogue\r\n     *\r\n     * @public\r\n     * @param {jQuery} element\r\n     * @return {Promise}\r\n     */\r\n    SortableList.prototype.getElementName = function(element) {\r\n        return $.Deferred().resolve(element.text());\r\n    };\r\n\r\n    /**\r\n     * Returns the label for the potential move destination, i.e. \"After ElementX\" or \"To the top of the list\"\r\n     *\r\n     * Note that we use \"after\" in the label for better UX\r\n     *\r\n     * @public\r\n     * @param {jQuery} parentElement\r\n     * @param {jQuery} afterElement\r\n     * @return {Promise}\r\n     */\r\n    SortableList.prototype.getDestinationName = function(parentElement, afterElement) {\r\n        if (!afterElement.length) {\r\n            return str.get_string('movecontenttothetop', 'moodle');\r\n        } else {\r\n            return this.getElementName(afterElement)\r\n                .then(function(name) {\r\n                    return str.get_string('movecontentafter', 'moodle', name);\r\n                });\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Returns the title for the move dialogue (\"Move elementY\")\r\n     *\r\n     * @public\r\n     * @param {jQuery} element\r\n     * @param {jQuery} handler\r\n     * @return {Promise}\r\n     */\r\n    SortableList.prototype.getMoveDialogueTitle = function(element, handler) {\r\n        if (handler.attr('title')) {\r\n            return $.Deferred().resolve(handler.attr('title'));\r\n        }\r\n        return this.getElementName(element).then(function(name) {\r\n            return str.get_string('movecontent', 'moodle', name);\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Returns the list of possible move destinations\r\n     *\r\n     * @private\r\n     * @return {Promise}\r\n     */\r\n    SortableList.prototype.getDestinationsList = function() {\r\n        var addedLists = [],\r\n            targets = $(this.config.targetListSelector),\r\n            destinations = $('<ul/>').addClass(CSS.keyboardDragClass),\r\n            result = $.when().then(function() {\r\n                return destinations;\r\n            }),\r\n            createLink = $.proxy(function(parentElement, beforeElement, afterElement) {\r\n                if (beforeElement.is(this.info.element) || afterElement.is(this.info.element)) {\r\n                    // Can not move before or after itself.\r\n                    return;\r\n                }\r\n                if ($.contains(this.info.element[0], parentElement[0])) {\r\n                    // Can not move to its own child.\r\n                    return;\r\n                }\r\n                result = result\r\n                .then($.proxy(function() {\r\n                    return this.getDestinationName(parentElement, afterElement);\r\n                }, this))\r\n                .then(function(txt) {\r\n                    var li = $('<li/>').appendTo(destinations);\r\n                    var a = $('<a href=\"#\"/>').attr('data-core_sortable_list-quickmove', 1).appendTo(li);\r\n                    a.data('parent-element', parentElement).data('before-element', beforeElement).text(txt);\r\n                    return destinations;\r\n                });\r\n            }, this),\r\n            addList = function() {\r\n                // Destination lists may be nested. We want to add all move destinations in the same\r\n                // order they appear on the screen for the user.\r\n                if ($.inArray(this, addedLists) !== -1) {\r\n                    return;\r\n                }\r\n                addedLists.push(this);\r\n                var list = $(this),\r\n                    children = list.children();\r\n                children.each(function() {\r\n                    var element = $(this);\r\n                    createLink(list, element, element.prev());\r\n                    // Add all nested lists.\r\n                    element.find(targets).each(addList);\r\n                });\r\n                createLink(list, $(), children.last());\r\n            };\r\n        targets.each(addList);\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Displays the dialogue to move element.\r\n     * @param {jQuery} clickedElement element to return focus to after the modal is closed\r\n     * @private\r\n     */\r\n    SortableList.prototype.displayMoveDialogue = function(clickedElement) {\r\n        ModalCancel.create({\r\n            title: this.getMoveDialogueTitle(this.info.element, clickedElement),\r\n            body: this.getDestinationsList()\r\n        }).then($.proxy(function(modal) {\r\n            var quickMoveHandler = $.proxy(function(e) {\r\n                e.preventDefault();\r\n                e.stopPropagation();\r\n                this.moveElement($(e.currentTarget).data('parent-element'), $(e.currentTarget).data('before-element'));\r\n                this.info.endTime = new Date().getTime();\r\n                this.info.positionChanged = this.hasPositionChanged(this.info);\r\n                this.info.dropped = true;\r\n                clickedElement.focus();\r\n                this.executeCallback(SortableList.EVENTS.elementDrop);\r\n                modal.hide();\r\n            }, this);\r\n            modal.getRoot().on('click', '[data-core_sortable_list-quickmove]', quickMoveHandler);\r\n            modal.getRoot().on(ModalEvents.hidden, $.proxy(function() {\r\n                // Always destroy when hidden, it is generated dynamically each time.\r\n                modal.getRoot().off('click', '[data-core_sortable_list-quickmove]', quickMoveHandler);\r\n                modal.destroy();\r\n                this.finishDragging();\r\n            }, this));\r\n            modal.setLarge();\r\n            modal.show();\r\n            return modal;\r\n        }, this)).catch(Notification.exception);\r\n    };\r\n\r\n    return SortableList;\r\n\r\n});\r\n"],"names":["define","$","log","autoScroll","EventDispatcher","str","ModalCancel","ModalEvents","Notification","defaultParameters","targetListSelector","moveHandlerSelector","isHorizontal","CSS","registerNotPassiveListeners","eventname","setup","x","ns","handle","includes","addEventListener","passive","options","passivesupported","Object","defineProperty","get","document","removeEventListener","err","event","special","touchstart","touchmove","touchend","SortableList","root","config","info","proxy","proxyDelta","dragCounter","lastEvent","extend","listSelector","this","on","dragStartHandler","clickHandler","EVENTS","DRAGSTART","DRAG","DROP","DRAGEND","elementDragStart","elementDrag","elementDrop","elementDragEnd","prototype","resetDraggedClasses","classes","i","removeClass","remove","calculatePositionOnPage","evt","originalEvent","touches","undefined","touch","pageX","pageY","clientX","Math","round","window","scrollLeft","clientY","scrollTop","type","moveElement","sourceList","sourceNextElement","finishDragging","which","movedElement","target","closest","currentTarget","children","length","stopPropagation","preventDefault","element","next","parent","targetNextElement","targetList","dropped","startX","startY","startTime","Date","getTime","addClass","offset","left","y","top","thisDragCounter","setTimeout","createProxy","dragHandler","dragcancelHandler","start","trigger","executeCallback","clone","append","removeAttr","css","position","keyCode","clickedElement","displayMoveDialogue","getPositionInNode","rect","getBoundingClientRect","scrollY","scrollX","width","height","xRatio","yRatio","isListHorizontal","elementFromPoint","mainElement","isNotSelf","current","filter","currentList","isNotProxy","find","coordinates","ratio","subList","subListEmpty","endX","endY","endTime","positionChanged","hasPositionChanged","oldinfo","classList","add","parentElement","beforeElement","dragEl","insertBefore","appendChild","stop","off","eventName","dispatchEvent","legacyEventNamesMap","Map","getElementName","Deferred","resolve","text","getDestinationName","afterElement","then","name","get_string","getMoveDialogueTitle","handler","attr","getDestinationsList","addedLists","targets","destinations","result","when","createLink","is","contains","txt","li","appendTo","data","addList","inArray","push","list","each","prev","last","create","title","body","modal","quickMoveHandler","e","focus","hide","getRoot","hidden","destroy","setLarge","show","catch","exception"],"mappings":"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"}