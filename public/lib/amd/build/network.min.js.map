{"version":3,"file":"network.min.js","sources":["../src/network.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * Poll the server to keep the session alive.\r\n *\r\n * @module     core/network\r\n * @copyright  2019 Damyon Wiese\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\ndefine(['jquery', 'core/ajax', 'core/config', 'core/notification', 'core/str'],\r\n        function($, Ajax, Config, Notification, Str) {\r\n\r\n    var started = false;\r\n    var warningDisplayed = false;\r\n    var keepAliveFrequency = 0;\r\n    var requestTimeout = 0;\r\n    var keepAliveMessage = false;\r\n    var sessionTimeout = false;\r\n    // 1/10 of session timeout, max of 10 minutes.\r\n    var checkFrequency = Math.min((Config.sessiontimeout / 10), 600) * 1000;\r\n    // Check if sessiontimeoutwarning is set or double the checkFrequency.\r\n    var warningLimit = (Config.sessiontimeoutwarning > 0) ? (Config.sessiontimeoutwarning * 1000) : (checkFrequency * 2);\r\n    // First wait is minimum of remaining time or half of the session timeout.\r\n    var firstWait = (Config.sessiontimeoutwarning > 0) ?\r\n        Math.min((Config.sessiontimeout - Config.sessiontimeoutwarning) * 1000, checkFrequency * 5) : checkFrequency * 5;\r\n    /**\r\n     * The session time has expired - we can't extend it now.\r\n     * @param {Modal} modal\r\n     */\r\n    var timeoutSessionExpired = function(modal) {\r\n        sessionTimeout = true;\r\n        warningDisplayed = false;\r\n        closeModal(modal);\r\n        displaySessionExpired();\r\n    };\r\n\r\n    /**\r\n     * Close modal - this relies on modal object passed from Notification.confirm.\r\n     *\r\n     * @param {Modal} modal\r\n     */\r\n    var closeModal = function(modal) {\r\n        modal.destroy();\r\n    };\r\n\r\n    /**\r\n     * The session time has expired - we can't extend it now.\r\n     * @return {Promise}\r\n     */\r\n    var displaySessionExpired = function() {\r\n        // Check again if its already extended before displaying session expired popup in case multiple tabs are open.\r\n        var request = {\r\n            methodname: 'core_session_time_remaining',\r\n            args: { }\r\n        };\r\n\r\n        return Ajax.call([request], true, true, true)[0].then(function(args) {\r\n            if (args.timeremaining * 1000 > warningLimit) {\r\n                return false;\r\n            } else {\r\n                return Str.get_strings([\r\n                    {key: 'sessionexpired', component: 'error'},\r\n                    {key: 'sessionerroruser', component: 'error'},\r\n                    {key: 'loginagain', component: 'moodle'},\r\n                    {key: 'cancel', component: 'moodle'}\r\n                ]).then(function(strings) {\r\n                    Notification.confirm(\r\n                        strings[0], // Title.\r\n                        strings[1], // Message.\r\n                        strings[2], // Login Again.\r\n                        strings[3], // Cancel.\r\n                        function() {\r\n                            location.reload();\r\n                            return true;\r\n                        }\r\n                    );\r\n                    return true;\r\n                }).catch(Notification.exception);\r\n            }\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Ping the server to keep the session alive.\r\n     *\r\n     * @return {Promise}\r\n     */\r\n    var touchSession = function() {\r\n        var request = {\r\n            methodname: 'core_session_touch',\r\n            args: { }\r\n        };\r\n\r\n        if (sessionTimeout) {\r\n            // We timed out before we extended the session.\r\n            return displaySessionExpired();\r\n        } else {\r\n            return Ajax.call([request], true, true, false, requestTimeout)[0].then(function() {\r\n                if (keepAliveFrequency > 0) {\r\n                    setTimeout(touchSession, keepAliveFrequency);\r\n                }\r\n                return true;\r\n            }).catch(function() {\r\n                Notification.alert('', keepAliveMessage);\r\n            });\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Ask the server how much time is remaining in this session and\r\n     * show confirm/cancel notifications if the session is about to run out.\r\n     *\r\n     * @return {Promise}\r\n     */\r\n    var checkSession = function() {\r\n        var request = {\r\n            methodname: 'core_session_time_remaining',\r\n            args: { }\r\n        };\r\n        sessionTimeout = false;\r\n        return Ajax.call([request], true, true, true)[0].then(function(args) {\r\n            if (args.userid <= 0) {\r\n                return false;\r\n            }\r\n            if (args.timeremaining <= 0) {\r\n                return displaySessionExpired();\r\n            } else if (args.timeremaining * 1000 <= warningLimit && !warningDisplayed) {\r\n                warningDisplayed = true;\r\n                Str.get_strings([\r\n                    {key: 'norecentactivity', component: 'moodle'},\r\n                    {key: 'sessiontimeoutsoon', component: 'moodle'},\r\n                    {key: 'extendsession', component: 'moodle'},\r\n                    {key: 'cancel', component: 'moodle'}\r\n                ]).then(function(strings) {\r\n                     return Notification.confirm(\r\n                        strings[0], // Title.\r\n                        strings[1], // Message.\r\n                        strings[2], // Extend session.\r\n                        strings[3], // Cancel.\r\n                        function() {\r\n                            touchSession();\r\n                            warningDisplayed = false;\r\n                            // First wait is minimum of remaining time or half of the session timeout.\r\n                            setTimeout(checkSession, firstWait);\r\n                            return true;\r\n                        },\r\n                        function() {\r\n                            // User has cancelled notification.\r\n                            setTimeout(checkSession, checkFrequency);\r\n                        }\r\n                    );\r\n                }).then(modal => {\r\n                    // If we don't extend the session before the timeout - warn.\r\n                    setTimeout(timeoutSessionExpired, args.timeremaining * 1000, modal);\r\n                    return;\r\n                }).catch(Notification.exception);\r\n            } else {\r\n                setTimeout(checkSession, checkFrequency);\r\n            }\r\n            return true;\r\n        });\r\n        // We do not catch the fails from the above ajax call because they will fail when\r\n        // we are not logged in - we don't need to take any action then.\r\n    };\r\n\r\n    /**\r\n     * Start calling a function to check if the session is still alive.\r\n     */\r\n    var start = function() {\r\n        if (keepAliveFrequency > 0) {\r\n            setTimeout(touchSession, keepAliveFrequency);\r\n        } else {\r\n            // First wait is minimum of remaining time or half of the session timeout.\r\n            setTimeout(checkSession, firstWait);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Are we in an iframe and the parent page is from the same Moodle site?\r\n     *\r\n     * @return {boolean} true if we are in an iframe in a page from this Moodle site.\r\n     */\r\n    const isMoodleIframe = function() {\r\n        if (window.parent === window) {\r\n            // Not in an iframe.\r\n            return false;\r\n        }\r\n\r\n        // We are in an iframe. Is the parent from the same Moodle site?\r\n        let parentUrl;\r\n        try {\r\n            parentUrl = window.parent.location.href;\r\n        } catch (e) {\r\n            // If we cannot access the URL of the parent page, it must be another site.\r\n            return false;\r\n        }\r\n\r\n        return parentUrl.startsWith(M.cfg.wwwroot);\r\n    };\r\n\r\n    /**\r\n     * Don't allow more than one of these polling loops in a single page.\r\n     */\r\n    var init = function() {\r\n        // We only allow one concurrent instance of this checker.\r\n        if (started) {\r\n            return;\r\n        }\r\n        started = true;\r\n\r\n        if (isMoodleIframe()) {\r\n            window.console.log('Not starting Moodle session timeout warning in this iframe.');\r\n            return;\r\n        }\r\n\r\n        window.console.log('Starting Moodle session timeout warning.');\r\n\r\n        start();\r\n    };\r\n\r\n    /**\r\n     * Start polling with more specific values for the frequency, timeout and message.\r\n     *\r\n     * @param {number} freq How ofter to poll the server.\r\n     * @param {number} timeout The time to wait for each request to the server.\r\n     * @param {string} identifier The string identifier for the message to show if session is going to time out.\r\n     * @param {string} component The string component for the message to show if session is going to time out.\r\n     */\r\n    var keepalive = async function(freq, timeout, identifier, component) {\r\n        // We only allow one concurrent instance of this checker.\r\n        if (started) {\r\n            window.console.warn('Ignoring session keep-alive. The core/network module was already initialised.');\r\n            return;\r\n        }\r\n        started = true;\r\n\r\n        if (isMoodleIframe()) {\r\n            window.console.warn('Ignoring session keep-alive in this iframe inside another Moodle page.');\r\n            return;\r\n        }\r\n\r\n        window.console.log('Starting Moodle session keep-alive.');\r\n\r\n        keepAliveFrequency = freq * 1000;\r\n        keepAliveMessage = await Str.get_string(identifier, component);\r\n        requestTimeout = timeout * 1000;\r\n        start();\r\n    };\r\n\r\n    return {\r\n        keepalive: keepalive,\r\n        init: init\r\n    };\r\n});\r\n"],"names":["define","$","Ajax","Config","Notification","Str","started","warningDisplayed","keepAliveFrequency","requestTimeout","keepAliveMessage","sessionTimeout","checkFrequency","Math","min","sessiontimeout","warningLimit","sessiontimeoutwarning","firstWait","timeoutSessionExpired","modal","closeModal","displaySessionExpired","destroy","call","methodname","args","then","timeremaining","get_strings","key","component","strings","confirm","location","reload","catch","exception","touchSession","setTimeout","alert","checkSession","userid","start","isMoodleIframe","window","parent","parentUrl","href","e","startsWith","M","cfg","wwwroot","keepalive","async","freq","timeout","identifier","console","warn","log","get_string","init"],"mappings":"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"}