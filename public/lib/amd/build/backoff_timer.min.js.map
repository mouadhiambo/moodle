{"version":3,"file":"backoff_timer.min.js","sources":["../src/backoff_timer.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * A timer that will execute a callback with decreasing frequency. Useful for\r\n * doing polling on the server without overwhelming it with requests.\r\n *\r\n * @module     core/backoff_timer\r\n * @copyright  2016 Ryan Wyllie <ryan@moodle.com>\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\ndefine(function() {\r\n\r\n    /**\r\n     * Constructor for the back off timer.\r\n     *\r\n     * @class\r\n     * @param {function} callback The function to execute after each tick\r\n     * @param {function} backoffFunction The function to determine what the next timeout value should be\r\n     */\r\n    var BackoffTimer = function(callback, backoffFunction) {\r\n        this.callback = callback;\r\n        this.backOffFunction = backoffFunction;\r\n    };\r\n\r\n    /**\r\n     * @property {function} callback The function to execute after each tick\r\n     */\r\n    BackoffTimer.prototype.callback = null;\r\n\r\n    /**\r\n     * @property {function} backoffFunction The function to determine what the next timeout value should be\r\n     */\r\n    BackoffTimer.prototype.backOffFunction = null;\r\n\r\n    /**\r\n     * @property {int} time The timeout value to use\r\n     */\r\n    BackoffTimer.prototype.time = null;\r\n\r\n    /**\r\n     * @property {numeric} timeout The timeout identifier\r\n     */\r\n    BackoffTimer.prototype.timeout = null;\r\n\r\n    /**\r\n     * Generate the next timeout in the back off time sequence\r\n     * for the timer.\r\n     *\r\n     * The back off function is called to calculate the next value.\r\n     * It is given the current value and an array of all previous values.\r\n     *\r\n     * @return {int} The new timeout value (in milliseconds)\r\n     */\r\n    BackoffTimer.prototype.generateNextTime = function() {\r\n        var newTime = this.backOffFunction(this.time);\r\n        this.time = newTime;\r\n\r\n        return newTime;\r\n    };\r\n\r\n    /**\r\n     * Stop the current timer and clear the previous time values\r\n     *\r\n     * @return {object} this\r\n     */\r\n    BackoffTimer.prototype.reset = function() {\r\n        this.time = null;\r\n        this.stop();\r\n\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Clear the current timeout, if one is set.\r\n     *\r\n     * @return {object} this\r\n     */\r\n    BackoffTimer.prototype.stop = function() {\r\n        if (this.timeout) {\r\n            window.clearTimeout(this.timeout);\r\n            this.timeout = null;\r\n        }\r\n\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Start the current timer by generating the new timeout value and\r\n     * starting the ticks.\r\n     *\r\n     * This function recurses after each tick with a new timeout value\r\n     * generated each time.\r\n     *\r\n     * The callback function is called after each tick.\r\n     *\r\n     * @return {object} this\r\n     */\r\n    BackoffTimer.prototype.start = function() {\r\n        // If we haven't already started.\r\n        if (!this.timeout) {\r\n            var time = this.generateNextTime();\r\n            this.timeout = window.setTimeout(function() {\r\n                this.callback();\r\n                // Clear the existing timer.\r\n                this.stop();\r\n                // Start the next timer.\r\n                this.start();\r\n            }.bind(this), time);\r\n        }\r\n\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Reset the timer and start it again from the initial timeout\r\n     * values\r\n     *\r\n     * @return {object} this\r\n     */\r\n    BackoffTimer.prototype.restart = function() {\r\n        return this.reset().start();\r\n    };\r\n\r\n    /**\r\n     * Returns an incremental function for the timer.\r\n     *\r\n     * @param {int} minamount The minimum amount of time we wait before checking\r\n     * @param {int} incrementamount The amount to increment the timer by\r\n     * @param {int} maxamount The max amount to ever increment to\r\n     * @param {int} timeoutamount The timeout to use once we reach the max amount\r\n     * @return {function}\r\n     */\r\n     BackoffTimer.getIncrementalCallback = function(minamount, incrementamount, maxamount, timeoutamount) {\r\n\r\n        /**\r\n         * An incremental function for the timer.\r\n         *\r\n         * @param {(int|null)} time The current timeout value or null if none set\r\n         * @return {int} The new timeout value\r\n         */\r\n        return function(time) {\r\n            if (!time) {\r\n                return minamount;\r\n            }\r\n\r\n            // Don't go over the max amount.\r\n            if (time + incrementamount > maxamount) {\r\n                return timeoutamount;\r\n            }\r\n\r\n            return time + incrementamount;\r\n        };\r\n    };\r\n\r\n    return BackoffTimer;\r\n});\r\n"],"names":["define","BackoffTimer","callback","backoffFunction","backOffFunction","prototype","time","timeout","generateNextTime","newTime","this","reset","stop","window","clearTimeout","start","setTimeout","bind","restart","getIncrementalCallback","minamount","incrementamount","maxamount","timeoutamount"],"mappings":";;;;;;;;AAuBAA,6BAAO,eASCC,aAAe,SAASC,SAAUC,sBAC7BD,SAAWA,cACXE,gBAAkBD,wBAM3BF,aAAaI,UAAUH,SAAW,KAKlCD,aAAaI,UAAUD,gBAAkB,KAKzCH,aAAaI,UAAUC,KAAO,KAK9BL,aAAaI,UAAUE,QAAU,KAWjCN,aAAaI,UAAUG,iBAAmB,eAClCC,QAAUC,KAAKN,gBAAgBM,KAAKJ,kBACnCA,KAAOG,QAELA,SAQXR,aAAaI,UAAUM,MAAQ,uBACtBL,KAAO,UACPM,OAEEF,MAQXT,aAAaI,UAAUO,KAAO,kBACtBF,KAAKH,UACLM,OAAOC,aAAaJ,KAAKH,cACpBA,QAAU,MAGZG,MAcXT,aAAaI,UAAUU,MAAQ,eAEtBL,KAAKH,QAAS,KACXD,KAAOI,KAAKF,wBACXD,QAAUM,OAAOG,WAAW,gBACxBd,gBAEAU,YAEAG,SACPE,KAAKP,MAAOJ,aAGXI,MASXT,aAAaI,UAAUa,QAAU,kBACtBR,KAAKC,QAAQI,SAYvBd,aAAakB,uBAAyB,SAASC,UAAWC,gBAAiBC,UAAWC,sBAQ5E,SAASjB,aACPA,KAKDA,KAAOe,gBAAkBC,UAClBC,cAGJjB,KAAOe,gBARHD,YAYZnB"}