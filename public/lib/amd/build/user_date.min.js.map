{"version":3,"file":"user_date.min.js","sources":["../src/user_date.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * Fetch and render dates from timestamps.\r\n *\r\n * @module     core/user_date\r\n * @copyright  2017 Ryan Wyllie <ryan@moodle.com>\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\ndefine(['jquery', 'core/ajax', 'core/sessionstorage', 'core/config'],\r\n        function($, Ajax, Storage, Config) {\r\n\r\n    var SECONDS_IN_DAY = 86400;\r\n\r\n    /** @var {object} promisesCache Store all promises we've seen so far. */\r\n    var promisesCache = {};\r\n\r\n    /**\r\n     * Generate a cache key for the given request. The request should\r\n     * have a timestamp and format key.\r\n     *\r\n     * @param {object} request\r\n     * @return {string}\r\n     */\r\n    var getKey = function(request) {\r\n        return 'core_user_date/' +\r\n               Config.language + '/' +\r\n               Config.usertimezone + '/' +\r\n               request.timestamp + '/' +\r\n               request.format;\r\n    };\r\n\r\n    /**\r\n     * Retrieve a transformed date from the browser's storage.\r\n     *\r\n     * @param {string} key\r\n     * @return {string}\r\n     */\r\n    var getFromLocalStorage = function(key) {\r\n        return Storage.get(key);\r\n    };\r\n\r\n    /**\r\n     * Save the transformed date in the browser's storage.\r\n     *\r\n     * @param {string} key\r\n     * @param {string} value\r\n     */\r\n    var addToLocalStorage = function(key, value) {\r\n        Storage.set(key, value);\r\n    };\r\n\r\n    /**\r\n     * Check if a key is in the module's cache.\r\n     *\r\n     * @param {string} key\r\n     * @return {bool}\r\n     */\r\n    var inPromisesCache = function(key) {\r\n        return (typeof promisesCache[key] !== 'undefined');\r\n    };\r\n\r\n    /**\r\n     * Retrieve a promise from the module's cache.\r\n     *\r\n     * @param {string} key\r\n     * @return {object} jQuery promise\r\n     */\r\n    var getFromPromisesCache = function(key) {\r\n        return promisesCache[key];\r\n    };\r\n\r\n    /**\r\n     * Save the given promise in the module's cache.\r\n     *\r\n     * @param {string} key\r\n     * @param {object} promise\r\n     */\r\n    var addToPromisesCache = function(key, promise) {\r\n        promisesCache[key] = promise;\r\n    };\r\n\r\n    /**\r\n     * Send a request to the server for each of the required timestamp\r\n     * and format combinations.\r\n     *\r\n     * Resolves the date's deferred with the values returned from the\r\n     * server and saves the value in local storage.\r\n     *\r\n     * @param {array} dates\r\n     * @return {object} jQuery promise\r\n     */\r\n    var loadDatesFromServer = function(dates) {\r\n        var args = dates.map(function(data) {\r\n            var fixDay = data.hasOwnProperty('fixday') ? data.fixday : 1;\r\n            var fixHour = data.hasOwnProperty('fixhour') ? data.fixhour : 1;\r\n            return {\r\n                timestamp: data.timestamp,\r\n                format: data.format,\r\n                type: data.type || null,\r\n                fixday: fixDay,\r\n                fixhour: fixHour\r\n            };\r\n        });\r\n\r\n        var request = {\r\n            methodname: 'core_get_user_dates',\r\n            args: {\r\n                contextid: Config.contextid,\r\n                timestamps: args\r\n            }\r\n        };\r\n\r\n        return Ajax.call([request], true, true)[0].then(function(results) {\r\n            results.dates.forEach(function(value, index) {\r\n                var date = dates[index];\r\n                var key = getKey(date);\r\n\r\n                addToLocalStorage(key, value);\r\n                date.deferred.resolve(value);\r\n            });\r\n            return;\r\n        })\r\n        .catch(function(ex) {\r\n            // If we failed to retrieve the dates then reject the date's\r\n            // deferred objects to make sure they don't hang.\r\n            dates.forEach(function(date) {\r\n                date.deferred.reject(ex);\r\n            });\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Takes an array of request objects and returns a promise that\r\n     * is resolved with an array of formatted dates.\r\n     *\r\n     * The values in the returned array will be ordered the same as\r\n     * the request array.\r\n     *\r\n     * This function will check both the module's static promises cache\r\n     * and the browser's session storage to see if the user dates have\r\n     * already been loaded in order to avoid sending a network request\r\n     * if possible.\r\n     *\r\n     * Only dates not found in either cache will be sent to the server\r\n     * for transforming.\r\n     *\r\n     * A request object must have a timestamp key and a format key and\r\n     * optionally may have a type key.\r\n     *\r\n     * E.g.\r\n     * var request = [\r\n     *     {\r\n     *         timestamp: 1293876000,\r\n     *         format: '%d %B %Y'\r\n     *     },\r\n     *     {\r\n     *         timestamp: 1293876000,\r\n     *         format: '%A, %d %B %Y, %I:%M %p',\r\n     *         type: 'gregorian',\r\n     *         fixday: false,\r\n     *         fixhour: false\r\n     *     }\r\n     * ];\r\n     *\r\n     * UserDate.get(request).done(function(dates) {\r\n     *     console.log(dates[0]); // prints \"1 January 2011\".\r\n     *     console.log(dates[1]); // prints \"Saturday, 1 January 2011, 10:00 AM\".\r\n     * });\r\n     *\r\n     * @param {array} requests\r\n     * @return {object} jQuery promise\r\n     */\r\n    var get = function(requests) {\r\n        var ajaxRequests = [];\r\n        var promises = [];\r\n\r\n        // Loop over each of the requested timestamp/format combos\r\n        // and add a promise to the promises array for them.\r\n        requests.forEach(function(request) {\r\n            var key = getKey(request);\r\n\r\n            // If we've already got a promise then use it.\r\n            if (inPromisesCache(key)) {\r\n                promises.push(getFromPromisesCache(key));\r\n            } else {\r\n                var deferred = $.Deferred();\r\n                var cached = getFromLocalStorage(key);\r\n\r\n                if (cached) {\r\n                    // If we were able to get the value from session storage\r\n                    // then we can resolve the deferred with that value. No\r\n                    // need to ask the server to transform it for us.\r\n                    deferred.resolve(cached);\r\n                } else {\r\n                    // Add this request to the list of ones we need to load\r\n                    // from the server. Include the deferred so that it can\r\n                    // be resolved when the server has responded with the\r\n                    // transformed values.\r\n                    request.deferred = deferred;\r\n                    ajaxRequests.push(request);\r\n                }\r\n\r\n                // Remember this promise for next time so that we can\r\n                // bail out early if it is requested again.\r\n                addToPromisesCache(key, deferred.promise());\r\n                promises.push(deferred.promise());\r\n            }\r\n        });\r\n\r\n        // If we have any requests that we couldn't resolve from the caches\r\n        // then let's ask the server to get them for us.\r\n        if (ajaxRequests.length) {\r\n            loadDatesFromServer(ajaxRequests);\r\n        }\r\n\r\n        // Wait for all of the promises to resolve. Some of them may be waiting\r\n        // for a response from the server.\r\n        return $.when.apply($, promises).then(function() {\r\n            // This looks complicated but it's just converting an unknown\r\n            // length of arguments into an array for the promise to resolve\r\n            // with.\r\n            return arguments.length === 1 ? [arguments[0]] : Array.apply(null, arguments);\r\n        });\r\n    };\r\n\r\n\r\n    /**\r\n     * For a given timestamp get the midnight value in the user's timezone.\r\n     *\r\n     * The calculation is performed relative to the user's midnight timestamp\r\n     * for today to ensure that timezones are preserved.\r\n     *\r\n     * E.g.\r\n     * Input:\r\n     * timestamp: 1514836800 (01/01/2018 8pm GMT)(02/01/2018 4am GMT+8)\r\n     * midnight: 1514851200 (02/01/2018 midnight GMT)\r\n     * Output:\r\n     * 1514764800 (01/01/2018 midnight GMT)\r\n     *\r\n     * Input:\r\n     * timestamp: 1514836800 (01/01/2018 8pm GMT)(02/01/2018 4am GMT+8)\r\n     * midnight: 1514822400 (02/01/2018 midnight GMT+8)\r\n     * Output:\r\n     * 1514822400 (02/01/2018 midnight GMT+8)\r\n     *\r\n     * @param {Number} timestamp The timestamp to calculate from\r\n     * @param {Number} todayMidnight The user's midnight timestamp\r\n     * @return {Number} The midnight value of the user's timestamp\r\n     */\r\n    var getUserMidnightForTimestamp = function(timestamp, todayMidnight) {\r\n        var future = timestamp > todayMidnight;\r\n        var diffSeconds = Math.abs(timestamp - todayMidnight);\r\n        var diffDays = future ? Math.floor(diffSeconds / SECONDS_IN_DAY) : Math.ceil(diffSeconds / SECONDS_IN_DAY);\r\n        var diffDaysInSeconds = diffDays * SECONDS_IN_DAY;\r\n        // Is the timestamp in the future or past?\r\n        var dayTimestamp = future ? todayMidnight + diffDaysInSeconds : todayMidnight - diffDaysInSeconds;\r\n        return dayTimestamp;\r\n    };\r\n\r\n    return {\r\n        get: get,\r\n        getUserMidnightForTimestamp: getUserMidnightForTimestamp\r\n    };\r\n});\r\n"],"names":["define","$","Ajax","Storage","Config","promisesCache","getKey","request","language","usertimezone","timestamp","format","loadDatesFromServer","dates","args","map","data","fixDay","hasOwnProperty","fixday","fixHour","fixhour","type","methodname","contextid","timestamps","call","then","results","forEach","value","index","date","key","set","addToLocalStorage","deferred","resolve","catch","ex","reject","get","requests","ajaxRequests","promises","inPromisesCache","push","getFromPromisesCache","Deferred","cached","getFromLocalStorage","promise","addToPromisesCache","length","when","apply","arguments","Array","getUserMidnightForTimestamp","todayMidnight","future","diffSeconds","Math","abs","diffDaysInSeconds","floor","ceil"],"mappings":";;;;;;;AAsBAA,wBAAO,CAAC,SAAU,YAAa,sBAAuB,gBAC9C,SAASC,EAAGC,KAAMC,QAASC,YAK3BC,cAAgB,GAShBC,OAAS,SAASC,eACX,kBACAH,OAAOI,SAAW,IAClBJ,OAAOK,aAAe,IACtBF,QAAQG,UAAY,IACpBH,QAAQI,QA+DfC,oBAAsB,SAASC,WAC3BC,KAAOD,MAAME,KAAI,SAASC,UACtBC,OAASD,KAAKE,eAAe,UAAYF,KAAKG,OAAS,EACvDC,QAAUJ,KAAKE,eAAe,WAAaF,KAAKK,QAAU,QACvD,CACHX,UAAWM,KAAKN,UAChBC,OAAQK,KAAKL,OACbW,KAAMN,KAAKM,MAAQ,KACnBH,OAAQF,OACRI,QAASD,YAIbb,QAAU,CACVgB,WAAY,sBACZT,KAAM,CACFU,UAAWpB,OAAOoB,UAClBC,WAAYX,cAIbZ,KAAKwB,KAAK,CAACnB,UAAU,GAAM,GAAM,GAAGoB,MAAK,SAASC,SACrDA,QAAQf,MAAMgB,SAAQ,SAASC,MAAOC,WAC9BC,KAAOnB,MAAMkB,QAnEL,SAASE,IAAKH,OAClC3B,QAAQ+B,IAAID,IAAKH,OAqETK,CAFU7B,OAAO0B,MAEMF,OACvBE,KAAKI,SAASC,QAAQP,aAI7BQ,OAAM,SAASC,IAGZ1B,MAAMgB,SAAQ,SAASG,MACnBA,KAAKI,SAASI,OAAOD,iBAqI1B,CACHE,IAxFM,SAASC,cACXC,aAAe,GACfC,SAAW,UAIfF,SAASb,SAAQ,SAAStB,aAClB0B,IAAM3B,OAAOC,YA1HH,SAAS0B,iBACW,IAAvB5B,cAAc4B,KA4HrBY,CAAgBZ,KAChBW,SAASE,KApHM,SAASb,YACzB5B,cAAc4B,KAmHCc,CAAqBd,UAChC,KACCG,SAAWnC,EAAE+C,WACbC,OArJU,SAAShB,YACxB9B,QAAQsC,IAAIR,KAoJEiB,CAAoBjB,KAE7BgB,OAIAb,SAASC,QAAQY,SAMjB1C,QAAQ6B,SAAWA,SACnBO,aAAaG,KAAKvC,UA1HT,SAAS0B,IAAKkB,SACnC9C,cAAc4B,KAAOkB,QA8HbC,CAAmBnB,IAAKG,SAASe,WACjCP,SAASE,KAAKV,SAASe,eAM3BR,aAAaU,QACbzC,oBAAoB+B,cAKjB1C,EAAEqD,KAAKC,MAAMtD,EAAG2C,UAAUjB,MAAK,kBAIN,IAArB6B,UAAUH,OAAe,CAACG,UAAU,IAAMC,MAAMF,MAAM,KAAMC,eAwCvEE,4BAZ8B,SAAShD,UAAWiD,mBAC9CC,OAASlD,UAAYiD,cACrBE,YAAcC,KAAKC,IAAIrD,UAAYiD,eAEnCK,kBAlPa,OAiPFJ,OAASE,KAAKG,MAAMJ,YAjPlB,OAiPkDC,KAAKI,KAAKL,YAjP5D,eAoPED,OAASD,cAAgBK,kBAAoBL,cAAgBK"}