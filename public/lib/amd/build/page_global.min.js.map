{"version":3,"file":"page_global.min.js","sources":["../src/page_global.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * Provide global helper code to enhance page elements.\r\n *\r\n * @module     core/page_global\r\n * @copyright  2018 Ryan Wyllie <ryan@moodle.com>\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\ndefine(\r\n[\r\n    'jquery',\r\n    'core/custom_interaction_events',\r\n    'core/str',\r\n    'core/network'\r\n],\r\nfunction(\r\n    $,\r\n    CustomEvents,\r\n    Str,\r\n    Network\r\n) {\r\n\r\n    /**\r\n     * Add an event handler for dropdown menus that wish to show their active item\r\n     * in the dropdown toggle element.\r\n     *\r\n     * By default the handler will add the \"active\" class to the selected dropdown\r\n     * item and set it's text as the HTML for the dropdown toggle.\r\n     *\r\n     * The behaviour of this handler is controlled by adding data attributes to\r\n     * the HTML and requires the typically Bootstrap dropdown markup.\r\n     *\r\n     * data-show-active-item - Add to the .dropdown-menu element to enable default\r\n     *                         functionality.\r\n     * data-skip-active-class - Add to the .dropdown-menu to prevent this code from\r\n     *                          adding the active class to the dropdown items\r\n     * data-active-item-text - Add to an element within the data-bs-toggle=\"dropdown\" element\r\n     *                         to use it as the active option text placeholder otherwise the\r\n     *                         data-bs-toggle=\"dropdown\" element itself will be used.\r\n     * data-active-item-button-aria-label-components - String components to set the aria\r\n     *                         lable on the dropdown button. The string will be given the\r\n     *                         active item text.\r\n     */\r\n    var initActionOptionDropdownHandler = function() {\r\n        var body = $('body');\r\n\r\n        // Ensure on load that the \"current\" item is always marked to ensure we make space for active item indicator.\r\n        body.find('.dropdown-menu').each(function() {\r\n            $(this).find('[aria-current=\"true\"]').addClass('dropdown-item-active');\r\n        });\r\n\r\n        CustomEvents.define(body, [CustomEvents.events.activate]);\r\n        body.on(CustomEvents.events.activate, '[data-show-active-item]', function(e) {\r\n            // The dropdown item that the user clicked on.\r\n            var option = $(e.target).closest('.dropdown-item');\r\n            // The dropdown menu element.\r\n            var menuContainer = option.closest('[data-show-active-item]');\r\n\r\n            if (!option.hasClass('dropdown-item')) {\r\n                // Ignore non Bootstrap dropdowns.\r\n                return;\r\n            }\r\n\r\n            if (option.hasClass('active')) {\r\n                // If it's already active then we don't need to do anything.\r\n                return;\r\n            }\r\n\r\n            // Clear the active class from all other options.\r\n            var dropdownItems = menuContainer.find('.dropdown-item');\r\n            dropdownItems.removeClass(['active', 'dropdown-item-active']);\r\n            dropdownItems.removeAttr('aria-current');\r\n\r\n            if (!menuContainer.attr('data-skip-active-class')) {\r\n                // Make this option active unless configured to ignore it.\r\n                // Some code, for example the Bootstrap tabs, may want to handle\r\n                // adding the active class itself.\r\n                option.addClass('active');\r\n            }\r\n            option.addClass('dropdown-item-active');\r\n\r\n            // Update aria attribute for active item.\r\n            option.attr('aria-current', true);\r\n\r\n            var activeOptionText = option.text();\r\n            var dropdownToggle = menuContainer.parent().find('[data-bs-toggle=\"dropdown\"]');\r\n            var dropdownToggleText = dropdownToggle.find('[data-active-item-text]');\r\n\r\n            if (dropdownToggleText.length) {\r\n                // We have a specific placeholder for the active item text so\r\n                // use that.\r\n                dropdownToggleText.html(activeOptionText);\r\n            } else {\r\n                // Otherwise just replace all of the toggle text with the active item.\r\n                dropdownToggle.html(activeOptionText);\r\n            }\r\n\r\n            var activeItemAriaLabelComponent = menuContainer.attr('data-active-item-button-aria-label-components');\r\n            if (activeItemAriaLabelComponent) {\r\n                // If we have string components for the aria label then load the string\r\n                // and set the label on the dropdown toggle.\r\n                var strParams = activeItemAriaLabelComponent.split(',');\r\n                strParams.push(activeOptionText);\r\n\r\n                Str.get_string(strParams[0].trim(), strParams[1].trim(), strParams[2].trim())\r\n                    .then(function(string) {\r\n                        dropdownToggle.attr('aria-label', string);\r\n                        return string;\r\n                    })\r\n                    .catch(function() {\r\n                        // Silently ignore that we couldn't load the string.\r\n                        return false;\r\n                    });\r\n            }\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Initialise the global helper functions.\r\n     */\r\n    var init = function() {\r\n        initActionOptionDropdownHandler();\r\n        Network.init();\r\n    };\r\n\r\n    return {\r\n        init: init\r\n    };\r\n});\r\n"],"names":["define","$","CustomEvents","Str","Network","init","body","find","each","this","addClass","events","activate","on","e","option","target","closest","menuContainer","hasClass","dropdownItems","removeClass","removeAttr","attr","activeOptionText","text","dropdownToggle","parent","dropdownToggleText","length","html","activeItemAriaLabelComponent","strParams","split","push","get_string","trim","then","string","catch"],"mappings":";;;;;;;AAsBAA,0BACA,CACI,SACA,iCACA,WACA,iBAEJ,SACIC,EACAC,aACAC,IACAC,eA0GO,CACHC,KANO,WA7E2B,IAC9BC,MAAAA,KAAOL,EAAE,SAGRM,KAAK,kBAAkBC,MAAK,WAC7BP,EAAEQ,MAAMF,KAAK,yBAAyBG,SAAS,2BAGnDR,aAAaF,OAAOM,KAAM,CAACJ,aAAaS,OAAOC,WAC/CN,KAAKO,GAAGX,aAAaS,OAAOC,SAAU,2BAA2B,SAASE,OAElEC,OAASd,EAAEa,EAAEE,QAAQC,QAAQ,kBAE7BC,cAAgBH,OAAOE,QAAQ,8BAE9BF,OAAOI,SAAS,mBAKjBJ,OAAOI,SAAS,eAMhBC,cAAgBF,cAAcX,KAAK,kBACvCa,cAAcC,YAAY,CAAC,SAAU,yBACrCD,cAAcE,WAAW,gBAEpBJ,cAAcK,KAAK,2BAIpBR,OAAOL,SAAS,UAEpBK,OAAOL,SAAS,wBAGhBK,OAAOQ,KAAK,gBAAgB,OAExBC,iBAAmBT,OAAOU,OAC1BC,eAAiBR,cAAcS,SAASpB,KAAK,+BAC7CqB,mBAAqBF,eAAenB,KAAK,2BAEzCqB,mBAAmBC,OAGnBD,mBAAmBE,KAAKN,kBAGxBE,eAAeI,KAAKN,sBAGpBO,6BAA+Bb,cAAcK,KAAK,oDAClDQ,6BAA8B,KAG1BC,UAAYD,6BAA6BE,MAAM,KACnDD,UAAUE,KAAKV,kBAEfrB,IAAIgC,WAAWH,UAAU,GAAGI,OAAQJ,UAAU,GAAGI,OAAQJ,UAAU,GAAGI,QACjEC,MAAK,SAASC,eACXZ,eAAeH,KAAK,aAAce,QAC3BA,UAEVC,OAAM,kBAEI,UAWvBnC,QAAQC"}