{"version":3,"file":"dynamic_tabs.min.js","sources":["../src/dynamic_tabs.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * Dynamic Tabs UI element with AJAX loading of tabs content\r\n *\r\n * @module      core/dynamic_tabs\r\n * @copyright   2021 David Matamoros <davidmc@moodle.com> based on code from Marina Glancy\r\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\n\r\nimport {processCollectedJavascript} from 'core/fragment';\r\nimport {addIconToContainer} from 'core/loadingicon';\r\nimport Notification from 'core/notification';\r\nimport {prependPageTitle} from 'core/page_title';\r\nimport Pending from 'core/pending';\r\nimport {getString} from 'core/str';\r\nimport Templates from 'core/templates';\r\nimport {getContent} from 'core/local/repository/dynamic_tabs';\r\nimport {isAnyWatchedFormDirty, resetAllFormDirtyStates} from 'core_form/changechecker';\r\n\r\nconst SELECTORS = {\r\n    dynamicTabs: '.dynamictabs',\r\n    activeTab: '.dynamictabs .nav-link.active',\r\n    allActiveTabs: '.dynamictabs .nav-link[data-bs-toggle=\"tab\"]:not(.disabled)',\r\n    tabContent: '.dynamictabs .tab-pane [data-tab-content]',\r\n    tabToggle: 'a[data-bs-toggle=\"tab\"]',\r\n    tabPane: '.dynamictabs .tab-pane',\r\n};\r\n\r\nSELECTORS.forTabName = tabName => `.dynamictabs [data-tab-content=\"${tabName}\"]`;\r\nSELECTORS.forTabId = tabName => `.dynamictabs [data-bs-toggle=\"tab\"][href=\"#${tabName}\"]`;\r\n\r\nlet watchedFormDirtyNotification = false;\r\n\r\n/**\r\n * Initialises the tabs view on the page (only one tabs view per page is supported)\r\n */\r\nexport const init = () => {\r\n    const tabToggles = document.querySelectorAll(SELECTORS.tabToggle);\r\n    tabToggles.forEach(tabToggle => {\r\n        // Listen to click, warn user if they are navigating away with unsaved form changes.\r\n        tabToggle.addEventListener('show.bs.tab', (event) => {\r\n            if (isAnyWatchedFormDirty()) {\r\n                event.preventDefault();\r\n                event.stopPropagation();\r\n\r\n                // Prevent double execution of event listener.\r\n                if (!watchedFormDirtyNotification) {\r\n                    watchedFormDirtyNotification = true;\r\n\r\n                    Notification.saveCancelPromise(\r\n                        getString('changesmade'),\r\n                        getString('changesmadereallygoaway'),\r\n                        getString('confirm'),\r\n                        {triggerElement: tabToggle}\r\n                    ).then(() => {\r\n                        // Reset form dirty state on confirmation, re-trigger the event.\r\n                        resetAllFormDirtyStates();\r\n                        tabToggle.dispatchEvent(new Event('click', {bubbles: true}));\r\n                        return;\r\n                    }).catch(() => {\r\n                        // User cancelled the dialogue.\r\n                    }).finally(() => {\r\n                        watchedFormDirtyNotification = false;\r\n                    });\r\n                }\r\n\r\n                return;\r\n            }\r\n\r\n            // Clean content from previous tab.\r\n            const previousTabName = getActiveTabName();\r\n            if (previousTabName) {\r\n                const previousTab = document.querySelector(SELECTORS.forTabName(previousTabName));\r\n                previousTab.textContent = '';\r\n            }\r\n        });\r\n\r\n        tabToggle.addEventListener('shown.bs.tab', () => {\r\n            const tabPane = document.getElementById(tabToggle.getAttribute('href').replace(/^#/, ''));\r\n            if (tabPane) {\r\n                loadTab(tabPane.id);\r\n            }\r\n        });\r\n    });\r\n\r\n    if (!openTabFromHash()) {\r\n        const tabs = document.querySelector(SELECTORS.allActiveTabs);\r\n        if (tabs) {\r\n            openTab(tabs.getAttribute('aria-controls'));\r\n        } else {\r\n            // We may hide tabs if there is only one available, just load the contents of the first tab.\r\n            const tabPane = document.querySelector(SELECTORS.tabPane);\r\n            if (tabPane) {\r\n                tabPane.classList.add('active', 'show');\r\n                loadTab(tabPane.getAttribute('id'));\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Returns id/name of the currently active tab\r\n *\r\n * @return {String|null}\r\n */\r\nconst getActiveTabName = () => {\r\n    const element = document.querySelector(SELECTORS.activeTab);\r\n    return element?.getAttribute('aria-controls') || null;\r\n};\r\n\r\n/**\r\n * Returns the id/name of the first tab\r\n *\r\n * @return {String|null}\r\n */\r\nconst getFirstTabName = () => {\r\n    const element = document.querySelector(SELECTORS.tabContent);\r\n    return element?.dataset.tabContent || null;\r\n};\r\n\r\n/**\r\n * Loads contents of a tab using an AJAX request\r\n *\r\n * @param {String} tabName\r\n */\r\nconst loadTab = (tabName) => {\r\n    // If tabName is not specified find the active tab, or if is not defined, the first available tab.\r\n    tabName = tabName ?? getActiveTabName() ?? getFirstTabName();\r\n    const tab = document.querySelector(SELECTORS.forTabName(tabName));\r\n    if (!tab) {\r\n        return;\r\n    }\r\n\r\n    const pendingPromise = new Pending('core/dynamic_tabs:loadTab:' + tabName);\r\n\r\n    const tabLabelledBy = document.getElementById(tab.getAttribute('aria-labelledby'));\r\n    prependPageTitle(tabLabelledBy.innerText);\r\n\r\n    addIconToContainer(tab)\r\n    .then(() => {\r\n        let tabArgs = {...tab.dataset};\r\n        delete tabArgs.tabClass;\r\n        delete tabArgs.tabContent;\r\n        return getContent(tab.dataset.tabClass, JSON.stringify(tabArgs));\r\n    })\r\n    .then(response => Promise.all([\r\n        processCollectedJavascript(response.javascript),\r\n        Templates.renderForPromise(response.template, JSON.parse(response.content)),\r\n    ]))\r\n    .then(([responseJs, {html, js}]) => Templates.replaceNodeContents(tab, html, js + responseJs))\r\n    .then(() => pendingPromise.resolve())\r\n    .catch(Notification.exception);\r\n};\r\n\r\n/**\r\n * Return the tab given the tab name\r\n *\r\n * @param {String} tabName\r\n * @return {HTMLElement}\r\n */\r\nconst getTab = (tabName) => {\r\n    return document.querySelector(SELECTORS.forTabId(tabName));\r\n};\r\n\r\n/**\r\n * Return the tab pane given the tab name\r\n *\r\n * @param {String} tabName\r\n * @return {HTMLElement}\r\n */\r\nconst getTabPane = (tabName) => {\r\n    return document.getElementById(tabName);\r\n};\r\n\r\n/**\r\n * Open the tab on page load. If this script loads before theme_boost/tab we need to open tab ourselves\r\n *\r\n * @param {String} tabName\r\n * @return {Boolean}\r\n */\r\nconst openTab = (tabName) => {\r\n    const tab = getTab(tabName);\r\n    if (!tab) {\r\n        return false;\r\n    }\r\n\r\n    loadTab(tabName);\r\n    tab.classList.add('active');\r\n    getTabPane(tabName).classList.add('active', 'show');\r\n    return true;\r\n};\r\n\r\n/**\r\n * If there is a location hash that is the same as the tab name - open this tab.\r\n *\r\n * @return {Boolean}\r\n */\r\nconst openTabFromHash = () => {\r\n    const hash = document.location.hash;\r\n    if (hash.match(/^#\\w+$/g)) {\r\n        return openTab(hash.replace(/^#/g, ''));\r\n    }\r\n\r\n    return false;\r\n};\r\n"],"names":["SELECTORS","dynamicTabs","activeTab","allActiveTabs","tabContent","tabToggle","tabPane","tabName","watchedFormDirtyNotification","document","querySelectorAll","forEach","addEventListener","event","preventDefault","stopPropagation","saveCancelPromise","triggerElement","then","dispatchEvent","Event","bubbles","catch","finally","previousTabName","getActiveTabName","querySelector","forTabName","textContent","getElementById","getAttribute","replace","loadTab","id","openTabFromHash","tabs","openTab","classList","add","element","dataset","getFirstTabName","tab","pendingPromise","Pending","tabLabelledBy","innerText","tabArgs","tabClass","JSON","stringify","response","Promise","all","javascript","Templates","renderForPromise","template","parse","content","_ref2","responseJs","html","js","replaceNodeContents","resolve","Notification","exception","forTabId","getTab","getTabPane","hash","location","match"],"mappings":";;;;;;;oOAiCMA,UAAY,CACdC,YAAa,eACbC,UAAW,gCACXC,cAAe,8DACfC,WAAY,4CACZC,UAAW,0BACXC,QAAS,yBAGbN,WAAuBO,mDAA8CA,cACrEP,SAAqBO,8DAAyDA,mBAE1EC,8BAA+B,gBAKf,QACGC,SAASC,iBAAiBV,UAAUK,WAC5CM,SAAQN,YAEfA,UAAUO,iBAAiB,eAAgBC,YACnC,iDACAA,MAAMC,iBACND,MAAME,uBAGDP,+BACDA,8BAA+B,wBAElBQ,mBACT,kBAAU,gBACV,kBAAU,4BACV,kBAAU,WACV,CAACC,eAAgBZ,YACnBa,MAAK,kDAGHb,UAAUc,cAAc,IAAIC,MAAM,QAAS,CAACC,SAAS,QAEtDC,OAAM,SAENC,SAAQ,KACPf,8BAA+B,aAQrCgB,gBAAkBC,sBACpBD,gBAAiB,CACGf,SAASiB,cAAc1B,UAAU2B,WAAWH,kBACpDI,YAAc,OAIlCvB,UAAUO,iBAAiB,gBAAgB,WACjCN,QAAUG,SAASoB,eAAexB,UAAUyB,aAAa,QAAQC,QAAQ,KAAM,KACjFzB,SACA0B,QAAQ1B,QAAQ2B,WAKvBC,kBAAmB,OACdC,KAAO1B,SAASiB,cAAc1B,UAAUG,kBAC1CgC,KACAC,QAAQD,KAAKL,aAAa,sBACvB,OAEGxB,QAAUG,SAASiB,cAAc1B,UAAUM,SAC7CA,UACAA,QAAQ+B,UAAUC,IAAI,SAAU,QAChCN,QAAQ1B,QAAQwB,aAAa,iBAWvCL,iBAAmB,WACfc,QAAU9B,SAASiB,cAAc1B,UAAUE,kBAC1CqC,MAAAA,eAAAA,QAAST,aAAa,mBAAoB,MAkB/CE,QAAWzB,4BAEbA,sCAAUA,qCAAWkB,wCAZD,YACdc,QAAU9B,SAASiB,cAAc1B,UAAUI,mBAC1CmC,MAAAA,eAAAA,QAASC,QAAQpC,aAAc,MAUKqC,SACrCC,IAAMjC,SAASiB,cAAc1B,UAAU2B,WAAWpB,cACnDmC,iBAICC,eAAiB,IAAIC,iBAAQ,6BAA+BrC,SAE5DsC,cAAgBpC,SAASoB,eAAea,IAAIZ,aAAa,qDAC9Ce,cAAcC,+CAEZJ,KAClBxB,MAAK,SACE6B,QAAU,IAAIL,IAAIF,uBACfO,QAAQC,gBACRD,QAAQ3C,YACR,4BAAWsC,IAAIF,QAAQQ,SAAUC,KAAKC,UAAUH,aAE1D7B,MAAKiC,UAAYC,QAAQC,IAAI,EAC1B,wCAA2BF,SAASG,YACpCC,mBAAUC,iBAAiBL,SAASM,SAAUR,KAAKS,MAAMP,SAASQ,cAErEzC,MAAK0C,YAAEC,YAAYC,KAACA,KAADC,GAAOA,kBAASR,mBAAUS,oBAAoBtB,IAAKoB,KAAMC,GAAKF,eACjF3C,MAAK,IAAMyB,eAAesB,YAC1B3C,MAAM4C,sBAAaC,YA6BlB/B,QAAW7B,gBACPmC,IArBMnC,CAAAA,SACLE,SAASiB,cAAc1B,UAAUoE,SAAS7D,UAoBrC8D,CAAO9D,iBACdmC,MAILV,QAAQzB,SACRmC,IAAIL,UAAUC,IAAI,UAjBF/B,CAAAA,SACTE,SAASoB,eAAetB,SAiB/B+D,CAAW/D,SAAS8B,UAAUC,IAAI,SAAU,SACrC,IAQLJ,gBAAkB,WACdqC,KAAO9D,SAAS+D,SAASD,aAC3BA,KAAKE,MAAM,YACJrC,QAAQmC,KAAKxC,QAAQ,MAAO"}