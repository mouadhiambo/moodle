{"version":3,"file":"event_dispatcher.min.js","sources":["../src/event_dispatcher.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/ //\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * An Event dispatcher used to dispatch Native JS CustomEvent objects with custom default properties.\r\n *\r\n * @module     core/event_dispatcher\r\n * @copyright  2021 Andrew Nicols <andrew@nicols.co.uk>\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n * @since      4.0\r\n */\r\n\r\n/**\r\n * Dispatch an event as a CustomEvent on the specified container.\r\n * By default events are bubbled, and cancelable.\r\n *\r\n * The eventName should typically by sourced using a constant. See the supplied examples.\r\n *\r\n * Note: This function uses native events. Any additional details are passed to the function in event.detail.\r\n *\r\n * This function mimics the behaviour of EventTarget.dispatchEvent but bubbles by default.\r\n *\r\n * @method dispatchEvent\r\n * @param {String} eventName The name of the event\r\n * @param {Object} detail Any additional details to pass into the eveent\r\n * @param {HTMLElement} container The point at which to dispatch the event\r\n * @param {Object} options\r\n * @param {Boolean} options.bubbles Whether to bubble up the DOM\r\n * @param {Boolean} options.cancelable Whether preventDefault() can be called\r\n * @param {Boolean} options.composed Whether the event can bubble across the ShadowDOM bounadry\r\n * @returns {CustomEvent}\r\n *\r\n * @example <caption>Using a native CustomEvent to indicate that some example data was displayed.</caption>\r\n * // mod/example/amd/src/events.js\r\n *\r\n * import {dispatchEvent} from 'core/event_dispatcher';\r\n *\r\n * export const eventTypes = {\r\n *     exampleDataDisplayed: 'mod_example/exampleDataDisplayed',\r\n * };\r\n *\r\n * export const notifyExampleDisplayed = someArgument => dispatchEvent(eventTypes.exampleDataDisplayed, {\r\n *     someArgument,\r\n * }, document, {\r\n *     cancelable: false,\r\n * });\r\n */\r\nexport const dispatchEvent = (\r\n    eventName,\r\n    detail = {},\r\n    container = document,\r\n    {\r\n        bubbles = true,\r\n        cancelable = false,\r\n        composed = false,\r\n    } = {}\r\n) => {\r\n    const customEvent = new CustomEvent(\r\n        eventName,\r\n        {\r\n            bubbles,\r\n            cancelable,\r\n            composed,\r\n            detail,\r\n        }\r\n    );\r\n\r\n    container.dispatchEvent(customEvent);\r\n\r\n    return customEvent;\r\n};\r\n"],"names":["eventName","detail","container","document","bubbles","cancelable","composed","customEvent","CustomEvent","dispatchEvent"],"mappings":"4KA0D6B,SACzBA,eACAC,8DAAS,GACTC,iEAAYC,UACZC,QACIA,SAAU,EADdC,WAEIA,YAAa,EAFjBC,SAGIA,UAAW,0DACX,SAEEC,YAAc,IAAIC,YACpBR,UACA,CACII,QAAAA,QACAC,WAAAA,WACAC,SAAAA,SACAL,OAAAA,gBAIRC,UAAUO,cAAcF,aAEjBA"}