{"version":3,"file":"form-autocomplete.min.js","sources":["../src/form-autocomplete.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * Autocomplete wrapper for select2 library.\r\n *\r\n * @module     core/form-autocomplete\r\n * @copyright  2015 Damyon Wiese <damyon@moodle.com>\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n * @since      3.0\r\n */\r\ndefine([\r\n    'jquery',\r\n    'core/log',\r\n    'core/str',\r\n    'core/templates',\r\n    'core/notification',\r\n    'core/loadingicon',\r\n    'core/aria',\r\n    'core_form/changechecker',\r\n    'core/popper2',\r\n    'theme_boost/bootstrap/dom/event-handler',\r\n], function(\r\n    $,\r\n    log,\r\n    str,\r\n    templates,\r\n    notification,\r\n    LoadingIcon,\r\n    Aria,\r\n    FormChangeChecker,\r\n    Popper,\r\n    EventHandler,\r\n) {\r\n    // Private functions and variables.\r\n    /** @var {Object} KEYS - List of keycode constants. */\r\n    var KEYS = {\r\n        DOWN: 40,\r\n        ENTER: 13,\r\n        SPACE: 32,\r\n        ESCAPE: 27,\r\n        COMMA: 44,\r\n        UP: 38,\r\n        LEFT: 37,\r\n        RIGHT: 39\r\n    };\r\n\r\n    var uniqueId = Date.now();\r\n\r\n    /**\r\n     * Make an item in the selection list \"active\".\r\n     *\r\n     * @method activateSelection\r\n     * @private\r\n     * @param {Number} index The index in the current (visible) list of selection.\r\n     * @param {Object} state State variables for this autocomplete element.\r\n     * @return {Promise}\r\n     */\r\n    var activateSelection = function(index, state) {\r\n        // Find the elements in the DOM.\r\n        var selectionElement = $(document.getElementById(state.selectionId));\r\n\r\n        index = wrapListIndex(index, selectionElement.children('[aria-selected=true]').length);\r\n        // Find the specified element.\r\n        var element = $(selectionElement.children('[aria-selected=true]').get(index));\r\n        // Create an id we can assign to this element.\r\n        var itemId = state.selectionId + '-' + index;\r\n\r\n        // Deselect all the selections.\r\n        selectionElement.children().attr('data-active-selection', null).attr('id', '');\r\n\r\n        // Select only this suggestion and assign it the id.\r\n        element.attr('data-active-selection', true).attr('id', itemId);\r\n\r\n        // Tell the input field it has a new active descendant so the item is announced.\r\n        selectionElement.attr('aria-activedescendant', itemId);\r\n        selectionElement.attr('data-active-value', element.attr('data-value'));\r\n\r\n        return $.Deferred().resolve();\r\n    };\r\n\r\n    /**\r\n     * Get the actively selected element from the state object.\r\n     *\r\n     * @param   {Object} state\r\n     * @returns {jQuery}\r\n     */\r\n    var getActiveElementFromState = function(state) {\r\n        var selectionRegion = $(document.getElementById(state.selectionId));\r\n        var activeId = selectionRegion.attr('aria-activedescendant');\r\n\r\n        if (activeId) {\r\n            var activeElement = $(document.getElementById(activeId));\r\n            if (activeElement.length) {\r\n                // The active descendent still exists.\r\n                return activeElement;\r\n            }\r\n        }\r\n\r\n        // Ensure we are creating a properly formed selector based on the active value.\r\n        var activeValue = selectionRegion.attr('data-active-value')?.replace(/\"/g, '\\\\\"');\r\n        return selectionRegion.find('[data-value=\"' + activeValue + '\"]');\r\n    };\r\n\r\n    /**\r\n     * Update the active selection from the given state object.\r\n     *\r\n     * @param   {Object} state\r\n     */\r\n    var updateActiveSelectionFromState = function(state) {\r\n        var activeElement = getActiveElementFromState(state);\r\n        var activeValue = activeElement.attr('data-value');\r\n\r\n        var selectionRegion = $(document.getElementById(state.selectionId));\r\n        if (activeValue) {\r\n            // Find the index of the currently selected index.\r\n            var activeIndex = selectionRegion.find('[aria-selected=true]').index(activeElement);\r\n\r\n            if (activeIndex !== -1) {\r\n                activateSelection(activeIndex, state);\r\n                return;\r\n            }\r\n        }\r\n\r\n        // Either the active index was not set, or it could not be found.\r\n        // Select the first value instead.\r\n        activateSelection(0, state);\r\n    };\r\n\r\n    /**\r\n     * Update the element that shows the currently selected items.\r\n     *\r\n     * @method updateSelectionList\r\n     * @private\r\n     * @param {Object} options Original options for this autocomplete element.\r\n     * @param {Object} state State variables for this autocomplete element.\r\n     * @param {JQuery} originalSelect The JQuery object matching the hidden select list.\r\n     * @return {Promise}\r\n     */\r\n    var updateSelectionList = function(options, state, originalSelect) {\r\n        var pendingKey = 'form-autocomplete-updateSelectionList-' + state.inputId;\r\n        M.util.js_pending(pendingKey);\r\n\r\n        // Build up a valid context to re-render the template.\r\n        var items = rebuildOptions(originalSelect.children('option:selected'), false);\r\n        var newSelection = $(document.getElementById(state.selectionId));\r\n\r\n        if (!hasItemListChanged(state, items)) {\r\n            M.util.js_complete(pendingKey);\r\n            return Promise.resolve();\r\n        }\r\n\r\n        state.items = items;\r\n\r\n        var context = $.extend(options, state);\r\n        // Render the template.\r\n        return templates.render(options.templates.items, context)\r\n        .then(function(html, js) {\r\n            // Add it to the page.\r\n            templates.replaceNodeContents(newSelection, html, js);\r\n\r\n            updateActiveSelectionFromState(state);\r\n\r\n            return;\r\n        })\r\n        .then(function() {\r\n            return M.util.js_complete(pendingKey);\r\n        })\r\n        .catch(notification.exception);\r\n    };\r\n\r\n    /**\r\n     * Check whether the list of items stored in the state has changed.\r\n     *\r\n     * @param   {Object} state\r\n     * @param   {Array} items\r\n     * @returns {Boolean}\r\n     */\r\n    var hasItemListChanged = function(state, items) {\r\n        if (state.items.length !== items.length) {\r\n            return true;\r\n        }\r\n\r\n        // Check for any items in the state items which are not present in the new items list.\r\n        return state.items.filter(item => items.indexOf(item) === -1).length > 0;\r\n    };\r\n\r\n    /**\r\n     * Notify of a change in the selection.\r\n     *\r\n     * @param {jQuery} originalSelect The jQuery object matching the hidden select list.\r\n     */\r\n    var notifyChange = function(originalSelect) {\r\n        FormChangeChecker.markFormChangedFromNode(originalSelect[0]);\r\n\r\n        // Note, jQuery .change() was not working here. Better to\r\n        // use plain JavaScript anyway.\r\n        originalSelect[0].dispatchEvent(new Event('change', {bubbles: true}));\r\n    };\r\n\r\n    /**\r\n     * Remove the given item from the list of selected things.\r\n     *\r\n     * @method deselectItem\r\n     * @private\r\n     * @param {Object} options Original options for this autocomplete element.\r\n     * @param {Object} state State variables for this autocomplete element.\r\n     * @param {Element} item The item to be deselected.\r\n     * @param {Element} originalSelect The original select list.\r\n     * @return {Promise}\r\n     */\r\n    const deselectItem = async(options, state, item, originalSelect) => {\r\n        var selectedItemValue = $(item).attr('data-value');\r\n\r\n        // Preprend an empty option to the select list to avoid having a default selected option.\r\n        if (originalSelect.find('option').first().attr('value') !== undefined) {\r\n            originalSelect.prepend($('<option>'));\r\n        }\r\n\r\n        // Look for a match, and toggle the selected property if there is a match.\r\n        originalSelect.children('option').each(function(index, ele) {\r\n            if ($(ele).attr('value') == selectedItemValue) {\r\n                $(ele).prop('selected', false);\r\n                // We remove newly created custom tags from the suggestions list when they are deselected.\r\n                if ($(ele).attr('data-iscustom')) {\r\n                    $(ele).remove();\r\n                }\r\n            }\r\n        });\r\n\r\n        const selectedItemText = item[0].childNodes[2].textContent?.trim();\r\n        await announceChanges(state.selectionId, selectedItemText, 'removed');\r\n\r\n        // Rerender the selection list.\r\n        await updateSelectionList(options, state, originalSelect);\r\n\r\n        // Notify that the selection changed.\r\n        notifyChange(originalSelect);\r\n    };\r\n\r\n    /**\r\n     * Make an item in the suggestions \"active\" (about to be selected).\r\n     *\r\n     * @method activateItem\r\n     * @private\r\n     * @param {Number} index The index in the current (visible) list of suggestions.\r\n     * @param {Object} state State variables for this instance of autocomplete.\r\n     * @return {Promise}\r\n     */\r\n    var activateItem = function(index, state) {\r\n        // Find the elements in the DOM.\r\n        var inputElement = $(document.getElementById(state.inputId));\r\n        var suggestionsElement = $(document.getElementById(state.suggestionsId));\r\n\r\n        // Count the visible items.\r\n        var length = suggestionsElement.children(':not([aria-hidden])').length;\r\n        // Limit the index to the upper/lower bounds of the list (wrap in both directions).\r\n        index = index % length;\r\n        while (index < 0) {\r\n            index += length;\r\n        }\r\n        // Find the specified element.\r\n        var element = $(suggestionsElement.children(':not([aria-hidden])').get(index));\r\n        // Find the index of this item in the full list of suggestions (including hidden).\r\n        var globalIndex = $(suggestionsElement.children('[role=option]')).index(element);\r\n        // Create an id we can assign to this element.\r\n        var itemId = state.suggestionsId + '-' + globalIndex;\r\n\r\n        // Deselect all the suggestions.\r\n        suggestionsElement.children().attr('aria-selected', false).attr('id', '');\r\n        // Select only this suggestion and assign it the id.\r\n        element.attr('aria-selected', true).attr('id', itemId);\r\n        // Tell the input field it has a new active descendant so the item is announced.\r\n        inputElement.attr('aria-activedescendant', itemId);\r\n\r\n        // Scroll it into view.\r\n        var scrollPos = element.offset().top\r\n                       - suggestionsElement.offset().top\r\n                       + suggestionsElement.scrollTop()\r\n                       - (suggestionsElement.height() / 2);\r\n        return suggestionsElement.animate({\r\n            scrollTop: scrollPos\r\n        }, 100).promise();\r\n    };\r\n\r\n    /**\r\n     * Return the index of the currently selected item in the suggestions list.\r\n     *\r\n     * @param {jQuery} suggestionsElement\r\n     * @return {Integer}\r\n     */\r\n    var getCurrentItem = function(suggestionsElement) {\r\n        // Find the active one.\r\n        var element = suggestionsElement.children('[aria-selected=true]');\r\n        // Find its index.\r\n        return suggestionsElement.children(':not([aria-hidden])').index(element);\r\n    };\r\n\r\n    /**\r\n     * Limit the index to the upper/lower bounds of the list (wrap in both directions).\r\n     *\r\n     * @param {Integer} index The target index.\r\n     * @param {Integer} length The length of the list of visible items.\r\n     * @return {Integer} The resulting index with necessary wrapping applied.\r\n     */\r\n    var wrapListIndex = function(index, length) {\r\n        index = index % length;\r\n        while (index < 0) {\r\n            index += length;\r\n        }\r\n        return index;\r\n    };\r\n\r\n    /**\r\n     * Return the index of the next item in the list without aria-disabled=true.\r\n     *\r\n     * @param {Integer} current The index of the current item.\r\n     * @param {Array} suggestions The list of suggestions.\r\n     * @return {Integer}\r\n     */\r\n    var getNextEnabledItem = function(current, suggestions) {\r\n        var nextIndex = wrapListIndex(current + 1, suggestions.length);\r\n        if (suggestions[nextIndex].getAttribute('aria-disabled')) {\r\n            return getNextEnabledItem(nextIndex, suggestions);\r\n        }\r\n        return nextIndex;\r\n    };\r\n\r\n    /**\r\n     * Return the index of the previous item in the list without aria-disabled=true.\r\n     *\r\n     * @param {Integer} current The index of the current item.\r\n     * @param {Array} suggestions The list of suggestions.\r\n     * @return {Integer}\r\n     */\r\n    var getPreviousEnabledItem = function(current, suggestions) {\r\n        var previousIndex = wrapListIndex(current - 1, suggestions.length);\r\n        if (suggestions[previousIndex].getAttribute('aria-disabled')) {\r\n            return getPreviousEnabledItem(previousIndex, suggestions);\r\n        }\r\n        return previousIndex;\r\n    };\r\n\r\n    /**\r\n     * Build a list of renderable options based on a set of option elements from the original select list.\r\n     *\r\n     * @param {jQuery} originalOptions\r\n     * @param {Boolean} includeEmpty\r\n     * @return {Array}\r\n     */\r\n    var rebuildOptions = function(originalOptions, includeEmpty) {\r\n        var options = [];\r\n        originalOptions.each(function(index, ele) {\r\n            var label;\r\n            if ($(ele).data('html')) {\r\n                label = $(ele).data('html');\r\n            } else {\r\n                label = $(ele).html();\r\n            }\r\n            if (includeEmpty || label !== '') {\r\n                options.push({\r\n                    label: label,\r\n                    value: $(ele).attr('value'),\r\n                    disabled: ele.disabled,\r\n                    classes: ele.classList,\r\n                });\r\n            }\r\n        });\r\n        return options;\r\n    };\r\n\r\n    /**\r\n     * Find the index of the current active suggestion, and activate the next one.\r\n     *\r\n     * @method activateNextItem\r\n     * @private\r\n     * @param {Object} state State variable for this auto complete element.\r\n     * @return {Promise}\r\n     */\r\n    var activateNextItem = function(state) {\r\n        // Find the list of suggestions.\r\n        var suggestionsElement = $(document.getElementById(state.suggestionsId));\r\n        var suggestions = suggestionsElement.children(':not([aria-hidden])');\r\n        var current = getCurrentItem(suggestionsElement);\r\n        // Activate the next one.\r\n        return activateItem(getNextEnabledItem(current, suggestions), state);\r\n    };\r\n\r\n    /**\r\n     * Find the index of the current active selection, and activate the previous one.\r\n     *\r\n     * @method activatePreviousSelection\r\n     * @private\r\n     * @param {Object} state State variables for this instance of autocomplete.\r\n     * @return {Promise}\r\n     */\r\n    var activatePreviousSelection = function(state) {\r\n        // Find the list of selections.\r\n        var selectionsElement = $(document.getElementById(state.selectionId));\r\n        // Find the active one.\r\n        var element = selectionsElement.children('[data-active-selection]');\r\n        if (!element) {\r\n            return activateSelection(0, state);\r\n        }\r\n        // Find it's index.\r\n        var current = selectionsElement.children('[aria-selected=true]').index(element);\r\n        // Activate the next one.\r\n        return activateSelection(current - 1, state);\r\n    };\r\n\r\n    /**\r\n     * Find the index of the current active selection, and activate the next one.\r\n     *\r\n     * @method activateNextSelection\r\n     * @private\r\n     * @param {Object} state State variables for this instance of autocomplete.\r\n     * @return {Promise}\r\n     */\r\n    var activateNextSelection = function(state) {\r\n        // Find the list of selections.\r\n        var selectionsElement = $(document.getElementById(state.selectionId));\r\n\r\n        // Find the active one.\r\n        var element = selectionsElement.children('[data-active-selection]');\r\n        var current = 0;\r\n\r\n        if (element) {\r\n            // The element was found. Determine the index and move to the next one.\r\n            current = selectionsElement.children('[aria-selected=true]').index(element);\r\n            current = current + 1;\r\n        } else {\r\n            // No selected item found. Move to the first.\r\n            current = 0;\r\n        }\r\n\r\n        return activateSelection(current, state);\r\n    };\r\n\r\n    /**\r\n     * Find the index of the current active suggestion, and activate the previous one.\r\n     *\r\n     * @method activatePreviousItem\r\n     * @private\r\n     * @param {Object} state State variables for this autocomplete element.\r\n     * @return {Promise}\r\n     */\r\n    var activatePreviousItem = function(state) {\r\n        var suggestionsElement = $(document.getElementById(state.suggestionsId));\r\n        var suggestions = suggestionsElement.children(':not([aria-hidden])');\r\n        var current = getCurrentItem(suggestionsElement);\r\n        // Activate the previous one.\r\n        return activateItem(getPreviousEnabledItem(current, suggestions), state);\r\n    };\r\n\r\n    /**\r\n     * Close the list of suggestions.\r\n     *\r\n     * @method closeSuggestions\r\n     * @private\r\n     * @param {Object} state State variables for this autocomplete element.\r\n     * @return {Promise}\r\n     */\r\n    var closeSuggestions = function(state) {\r\n        // Find the elements in the DOM.\r\n        var inputElement = $(document.getElementById(state.inputId));\r\n        var suggestionsElement = $(document.getElementById(state.suggestionsId));\r\n\r\n        if (inputElement.attr('aria-expanded') === \"true\") {\r\n            // Announce the list of suggestions was closed.\r\n            inputElement.attr('aria-expanded', false);\r\n        }\r\n        // Read the current list of selections.\r\n        inputElement.attr('aria-activedescendant', state.selectionId);\r\n\r\n        // Hide the suggestions list (from screen readers too).\r\n        Aria.hide(suggestionsElement.get());\r\n        suggestionsElement.hide();\r\n\r\n        return $.Deferred().resolve();\r\n    };\r\n\r\n    /**\r\n     * Rebuild the list of suggestions based on the current values in the select list, and the query.\r\n     * Any options in the original select with [data-enabled=disabled] will not be included\r\n     * as a suggestion option in the enhanced field.\r\n     *\r\n     * @method updateSuggestions\r\n     * @private\r\n     * @param {Object} options The original options for this autocomplete.\r\n     * @param {Object} state The state variables for this autocomplete.\r\n     * @param {String} query The current text for the search string.\r\n     * @param {JQuery} originalSelect The JQuery object matching the hidden select list.\r\n     * @return {Promise}\r\n     */\r\n    var updateSuggestions = function(options, state, query, originalSelect) {\r\n        var pendingKey = 'form-autocomplete-updateSuggestions-' + state.inputId;\r\n        M.util.js_pending(pendingKey);\r\n\r\n        // Find the elements in the DOM.\r\n        var inputElement = $(document.getElementById(state.inputId));\r\n        var suggestionsElement = $(document.getElementById(state.suggestionsId));\r\n\r\n        // Used to track if we found any visible suggestions.\r\n        var matchingElements = false;\r\n        // Options is used by the context when rendering the suggestions from a template.\r\n        var suggestions = rebuildOptions(originalSelect.children('option:not(:selected, [data-enabled=\"disabled\"])'), true);\r\n\r\n        // Re-render the list of suggestions.\r\n        var searchquery = state.caseSensitive ? query : query.toLocaleLowerCase();\r\n        var context = $.extend({options: suggestions}, options, state);\r\n        var returnVal = templates.render(\r\n            'core/form_autocomplete_suggestions',\r\n            context\r\n        )\r\n        .then(function(html, js) {\r\n            // We have the new template, insert it in the page.\r\n            templates.replaceNode(suggestionsElement, html, js);\r\n\r\n            // Get the element again.\r\n            suggestionsElement = $(document.getElementById(state.suggestionsId));\r\n\r\n            // Show it if it is hidden.\r\n            Aria.unhide(suggestionsElement.get());\r\n            Popper.createPopper(inputElement[0], suggestionsElement[0], {\r\n                placement: 'bottom-start',\r\n                modifiers: [{name: 'flip', enabled: false}],\r\n            });\r\n\r\n            // For each option in the list, hide it if it doesn't match the query.\r\n            suggestionsElement.children().each(function(index, node) {\r\n                node = $(node);\r\n                if ((options.caseSensitive && node.text().indexOf(searchquery) > -1) ||\r\n                        (!options.caseSensitive && node.text().toLocaleLowerCase().indexOf(searchquery) > -1)) {\r\n                    Aria.unhide(node.get());\r\n                    node.show();\r\n                    matchingElements = true;\r\n                } else {\r\n                    node.hide();\r\n                    Aria.hide(node.get());\r\n                }\r\n            });\r\n            // If we found any matches, show the list.\r\n            inputElement.attr('aria-expanded', true);\r\n            if (originalSelect.attr('data-notice')) {\r\n                // Display a notice rather than actual suggestions.\r\n                suggestionsElement.html(originalSelect.attr('data-notice'));\r\n            } else if (matchingElements) {\r\n                // We only activate the first item in the list if tags is false,\r\n                // because otherwise \"Enter\" would select the first item, instead of\r\n                // creating a new tag.\r\n                if (!options.tags) {\r\n                    activateItem(0, state);\r\n                }\r\n            } else {\r\n                // Nothing matches. Tell them that.\r\n                str.get_string('nosuggestions', 'form').done(function(nosuggestionsstr) {\r\n                    suggestionsElement.html(nosuggestionsstr);\r\n                });\r\n            }\r\n\r\n            return suggestionsElement;\r\n        })\r\n        .then(function() {\r\n            return M.util.js_complete(pendingKey);\r\n        })\r\n        .catch(notification.exception);\r\n\r\n        return returnVal;\r\n    };\r\n\r\n    /**\r\n     * Create a new item for the list (a tag).\r\n     *\r\n     * @method createItem\r\n     * @private\r\n     * @param {Object} options The original options for the autocomplete.\r\n     * @param {Object} state State variables for the autocomplete.\r\n     * @param {JQuery} originalSelect The JQuery object matching the hidden select list.\r\n     * @return {Promise}\r\n     */\r\n    const createItem = async(options, state, originalSelect) => {\r\n        // Find the element in the DOM.\r\n        var inputElement = $(document.getElementById(state.inputId));\r\n        // Get the current text in the input field.\r\n        var query = inputElement.val();\r\n        var tags = query.split(',');\r\n        var found = false;\r\n\r\n        $.each(tags, function(tagindex, tag) {\r\n            // If we can only select one at a time, deselect any current value.\r\n            tag = tag.trim();\r\n            if (tag !== '') {\r\n                if (!options.multiple) {\r\n                    originalSelect.children('option').prop('selected', false);\r\n                }\r\n                // Look for an existing option in the select list that matches this new tag.\r\n                originalSelect.children('option').each(function(index, ele) {\r\n                    if ($(ele).attr('value') == tag) {\r\n                        found = true;\r\n                        $(ele).prop('selected', true);\r\n                    }\r\n                });\r\n                // Only create the item if it's new.\r\n                if (!found) {\r\n                    var option = $('<option>');\r\n                    option.append(document.createTextNode(tag));\r\n                    option.attr('value', tag);\r\n                    originalSelect.append(option);\r\n                    option.prop('selected', true);\r\n                    // We mark newly created custom options as we handle them differently if they are \"deselected\".\r\n                    option.attr('data-iscustom', true);\r\n                }\r\n            }\r\n        });\r\n\r\n        // Announce the changes to the assistive technology.\r\n        await announceChanges(state.selectionId, query.trim(), 'added');\r\n\r\n        await updateSelectionList(options, state, originalSelect);\r\n        // Notify that the selection changed.\r\n        notifyChange(originalSelect);\r\n\r\n        // Clear the input field.\r\n        inputElement.val('');\r\n        // Close the suggestions list.\r\n        await closeSuggestions(state);\r\n    };\r\n\r\n    /**\r\n     * Select the currently active item from the suggestions list.\r\n     *\r\n     * @method selectCurrentItem\r\n     * @private\r\n     * @param {Object} options The original options for the autocomplete.\r\n     * @param {Object} state State variables for the autocomplete.\r\n     * @param {JQuery} originalSelect The JQuery object matching the hidden select list.\r\n     * @param {string|null} selectedItem The item to be selected.\r\n     * @return {Promise}\r\n     */\r\n    const selectCurrentItem = async(options, state, originalSelect, selectedItem) => {\r\n        // Find the elements in the page.\r\n        var inputElement = $(document.getElementById(state.inputId));\r\n        var suggestionsElement = $(document.getElementById(state.suggestionsId));\r\n        // Here loop through suggestions and set val to join of all selected items.\r\n\r\n        var selectedItemValue = suggestionsElement.children('[aria-selected=true]').attr('data-value');\r\n        // The select will either be a single or multi select, so the following will either\r\n        // select one or more items correctly.\r\n        // Take care to use 'prop' and not 'attr' for selected properties.\r\n        // If only one can be selected at a time, start by deselecting everything.\r\n        if (!options.multiple) {\r\n            originalSelect.children('option').prop('selected', false);\r\n        }\r\n        // Look for a match, and toggle the selected property if there is a match.\r\n        originalSelect.children('option').each(function (index, ele) {\r\n            if ($(ele).attr('value') == selectedItemValue) {\r\n                $(ele).prop('selected', true);\r\n            }\r\n        });\r\n\r\n        await announceChanges(state.selectionId, selectedItem, 'added');\r\n\r\n        await updateSelectionList(options, state, originalSelect);\r\n\r\n        // Notify that the selection changed.\r\n        notifyChange(originalSelect);\r\n\r\n        if (options.closeSuggestionsOnSelect) {\r\n            // Clear the input element.\r\n            inputElement.val('');\r\n            // Close the list of suggestions.\r\n            await closeSuggestions(state);\r\n        } else {\r\n            // Focus on the input element so the suggestions does not auto-close.\r\n            inputElement.focus();\r\n            // Remove the last selected item from the suggestions list.\r\n            await updateSuggestions(options, state, inputElement.val(), originalSelect);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Fetch a new list of options via ajax.\r\n     *\r\n     * @method updateAjax\r\n     * @private\r\n     * @param {Event} e The event that triggered this update.\r\n     * @param {Object} options The original options for the autocomplete.\r\n     * @param {Object} state The state variables for the autocomplete.\r\n     * @param {JQuery} originalSelect The JQuery object matching the hidden select list.\r\n     * @param {Object} ajaxHandler This is a module that does the ajax fetch and translates the results.\r\n     * @return {Promise}\r\n     */\r\n    var updateAjax = function(e, options, state, originalSelect, ajaxHandler) {\r\n        var pendingPromise = addPendingJSPromise('updateAjax');\r\n        // We need to show the indicator outside of the hidden select list.\r\n        // So we get the parent id of the hidden select list.\r\n        var parentElement = $(document.getElementById(state.selectId)).parent();\r\n        LoadingIcon.addIconToContainerRemoveOnCompletion(parentElement, pendingPromise);\r\n\r\n        // Get the query to pass to the ajax function.\r\n        var query = $(e.currentTarget).val();\r\n        // Call the transport function to do the ajax (name taken from Select2).\r\n        ajaxHandler.transport(options.selector, query, function(results) {\r\n            // We got a result - pass it through the translator before using it.\r\n            var processedResults = ajaxHandler.processResults(options.selector, results);\r\n            var existingValues = [];\r\n\r\n            // Now destroy all options that are not current\r\n            originalSelect.children('option').each(function(optionIndex, option) {\r\n                option = $(option);\r\n                if (!option.prop('selected')) {\r\n                    option.remove();\r\n                } else {\r\n                    existingValues.push(String(option.attr('value')));\r\n                }\r\n            });\r\n\r\n            if (!options.multiple && originalSelect.children('option').length === 0) {\r\n                // If this is a single select - and there are no current options\r\n                // the first option added will be selected by the browser. This causes a bug!\r\n                // We need to insert an empty option so that none of the real options are selected.\r\n                var option = $('<option>');\r\n                originalSelect.append(option);\r\n            }\r\n            if ($.isArray(processedResults)) {\r\n                // Add all the new ones returned from ajax.\r\n                $.each(processedResults, function(resultIndex, result) {\r\n                    if (existingValues.indexOf(String(result.value)) === -1) {\r\n                        var option = $('<option>');\r\n                        option.append(result.label);\r\n                        option.attr('value', result.value);\r\n                        originalSelect.append(option);\r\n                    }\r\n                });\r\n                originalSelect.attr('data-notice', '');\r\n            } else {\r\n                // The AJAX handler returned a string instead of the array.\r\n                originalSelect.attr('data-notice', processedResults);\r\n            }\r\n            // Update the list of suggestions now from the new values in the select list.\r\n            pendingPromise.resolve(updateSuggestions(options, state, '', originalSelect));\r\n        }, function(error) {\r\n            pendingPromise.reject(error);\r\n        });\r\n\r\n        return pendingPromise;\r\n    };\r\n\r\n    /**\r\n     * Add all the event listeners required for keyboard nav, blur clicks etc.\r\n     *\r\n     * @method addNavigation\r\n     * @private\r\n     * @param {Object} options The options used to create this autocomplete element.\r\n     * @param {Object} state State variables for this autocomplete element.\r\n     * @param {JQuery} originalSelect The JQuery object matching the hidden select list.\r\n     */\r\n    var addNavigation = function(options, state, originalSelect) {\r\n        // Start with the input element.\r\n        var inputElement = $(document.getElementById(state.inputId));\r\n        // Add keyboard nav with keydown.\r\n        inputElement.on('keydown', function(e) {\r\n            var pendingJsPromise = addPendingJSPromise('addNavigation-' + state.inputId + '-' + e.keyCode);\r\n\r\n            switch (e.keyCode) {\r\n                case KEYS.DOWN:\r\n                    // If the suggestion list is open, move to the next item.\r\n                    if (!options.showSuggestions) {\r\n                        // Do not consume this event.\r\n                        pendingJsPromise.resolve();\r\n                        return true;\r\n                    } else if (inputElement.attr('aria-expanded') === \"true\") {\r\n                        pendingJsPromise.resolve(activateNextItem(state));\r\n                    } else {\r\n                        // Handle ajax population of suggestions.\r\n                        if (!inputElement.val() && options.ajax) {\r\n                            require([options.ajax], function(ajaxHandler) {\r\n                                pendingJsPromise.resolve(updateAjax(e, options, state, originalSelect, ajaxHandler));\r\n                            });\r\n                        } else {\r\n                            // Open the suggestions list.\r\n                            pendingJsPromise.resolve(updateSuggestions(options, state, inputElement.val(), originalSelect));\r\n                        }\r\n                    }\r\n                    // We handled this event, so prevent it.\r\n                    e.preventDefault();\r\n                    return false;\r\n                case KEYS.UP:\r\n                    // Choose the previous active item.\r\n                    pendingJsPromise.resolve(activatePreviousItem(state));\r\n\r\n                    // We handled this event, so prevent it.\r\n                    e.preventDefault();\r\n                    return false;\r\n                case KEYS.ENTER:\r\n                    var suggestionsElement = $(document.getElementById(state.suggestionsId));\r\n                    if ((inputElement.attr('aria-expanded') === \"true\") &&\r\n                            (suggestionsElement.children('[aria-selected=true]').length > 0)) {\r\n                        const selectedItemText = suggestionsElement.children('[aria-selected=true]')[0].textContent.trim();\r\n                        // If the suggestion list has an active item, select it.\r\n                        pendingJsPromise.resolve(selectCurrentItem(options, state, originalSelect, selectedItemText));\r\n                    } else if (options.tags) {\r\n                        // If tags are enabled, create a tag.\r\n                        pendingJsPromise.resolve(createItem(options, state, originalSelect));\r\n                    } else {\r\n                        pendingJsPromise.resolve();\r\n                    }\r\n\r\n                    // We handled this event, so prevent it.\r\n                    e.preventDefault();\r\n                    return false;\r\n                case KEYS.ESCAPE:\r\n                    if (inputElement.attr('aria-expanded') === \"true\") {\r\n                        // If the suggestion list is open, close it.\r\n                        pendingJsPromise.resolve(closeSuggestions(state));\r\n                    } else {\r\n                        pendingJsPromise.resolve();\r\n                    }\r\n                    // We handled this event, so prevent it.\r\n                    e.preventDefault();\r\n                    return false;\r\n            }\r\n            pendingJsPromise.resolve();\r\n            return true;\r\n        });\r\n        // Support multi lingual COMMA keycode (44).\r\n        inputElement.on('keypress', function(e) {\r\n\r\n            if (e.keyCode === KEYS.COMMA) {\r\n                if (options.tags) {\r\n                    // If we are allowing tags, comma should create a tag (or enter).\r\n                    addPendingJSPromise('keypress-' + e.keyCode)\r\n                    .resolve(createItem(options, state, originalSelect));\r\n                }\r\n                // We handled this event, so prevent it.\r\n                e.preventDefault();\r\n                return false;\r\n            }\r\n            return true;\r\n        });\r\n        // Support submitting the form without leaving the autocomplete element,\r\n        // or submitting too quick before the blur handler action is completed.\r\n        inputElement.closest('form').on('submit', function() {\r\n            if (options.tags) {\r\n                // If tags are enabled, create a tag.\r\n                addPendingJSPromise('form-autocomplete-submit')\r\n                .resolve(createItem(options, state, originalSelect));\r\n            }\r\n\r\n            return true;\r\n        });\r\n        inputElement.on('blur', function() {\r\n            var pendingPromise = addPendingJSPromise('form-autocomplete-blur');\r\n            window.setTimeout(function() {\r\n                // Get the current element with focus.\r\n                var focusElement = $(document.activeElement);\r\n                var timeoutPromise = $.Deferred();\r\n\r\n                // Only close the menu if the input hasn't regained focus and if the element still exists,\r\n                // and regain focus if the scrollbar is clicked.\r\n                // Due to the half a second delay, it is possible that the input element no longer exist\r\n                // by the time this code is being executed.\r\n                if (focusElement.is(document.getElementById(state.suggestionsId))) {\r\n                    inputElement.focus(); // Probably the scrollbar is clicked. Regain focus.\r\n                } else if (!focusElement.is(inputElement) && $(document.getElementById(state.inputId)).length) {\r\n                    if (options.tags) {\r\n                        timeoutPromise.then(function() {\r\n                            return createItem(options, state, originalSelect);\r\n                        })\r\n                        .catch();\r\n                    }\r\n                    timeoutPromise.then(function() {\r\n                        return closeSuggestions(state);\r\n                    })\r\n                    .catch();\r\n                }\r\n\r\n                timeoutPromise.then(function() {\r\n                    return pendingPromise.resolve();\r\n                })\r\n                .catch();\r\n                timeoutPromise.resolve();\r\n            }, 500);\r\n        });\r\n        if (options.showSuggestions) {\r\n            var arrowElement = $(document.getElementById(state.downArrowId));\r\n            arrowElement.on('click', function(e) {\r\n                var pendingPromise = addPendingJSPromise('form-autocomplete-show-suggestions');\r\n\r\n                // Prevent the close timer, or we will open, then close the suggestions.\r\n                inputElement.focus();\r\n\r\n                // Handle ajax population of suggestions.\r\n                if (!inputElement.val() && options.ajax) {\r\n                    require([options.ajax], function(ajaxHandler) {\r\n                        pendingPromise.resolve(updateAjax(e, options, state, originalSelect, ajaxHandler));\r\n                    });\r\n                } else {\r\n                    // Else - open the suggestions list.\r\n                    pendingPromise.resolve(updateSuggestions(options, state, inputElement.val(), originalSelect));\r\n                }\r\n            });\r\n        }\r\n\r\n        var suggestionsElement = $(document.getElementById(state.suggestionsId));\r\n        // Remove any click handler first.\r\n        suggestionsElement.parent().prop(\"onclick\", null).off(\"click\");\r\n        suggestionsElement.parent().on('click', `#${state.suggestionsId} [role=option]`, function(e) {\r\n            var pendingPromise = addPendingJSPromise('form-autocomplete-parent');\r\n            // Handle clicks on suggestions.\r\n            var element = $(e.currentTarget).closest('[role=option]');\r\n            var suggestionsElement = $(document.getElementById(state.suggestionsId));\r\n            // Find the index of the clicked on suggestion.\r\n            var current = suggestionsElement.children(':not([aria-hidden])').index(element);\r\n\r\n            // Activate it.\r\n            activateItem(current, state)\r\n            .then(function() {\r\n                // And select it.\r\n                const selectedItemText = element[0].textContent.trim();\r\n                return selectCurrentItem(options, state, originalSelect, selectedItemText);\r\n            })\r\n            .then(function() {\r\n                return pendingPromise.resolve();\r\n            })\r\n            .catch(notification.exception);\r\n        });\r\n        var selectionElement = $(document.getElementById(state.selectionId));\r\n\r\n        // Handle clicks on the selected items (will unselect an item).\r\n        selectionElement.on('click', '[role=option]', function(e) {\r\n            var pendingPromise = addPendingJSPromise('form-autocomplete-clicks');\r\n\r\n            // Remove it from the selection.\r\n            pendingPromise.resolve(deselectItem(options, state, $(e.currentTarget), originalSelect));\r\n        });\r\n\r\n        // When listbox is focused, focus on the first option if there is no focused option.\r\n        selectionElement.on('focus', function() {\r\n            updateActiveSelectionFromState(state);\r\n        });\r\n\r\n        // Keyboard navigation for the selection list.\r\n        selectionElement.on('keydown', function(e) {\r\n            var pendingPromise = addPendingJSPromise('form-autocomplete-keydown-' + e.keyCode);\r\n            switch (e.keyCode) {\r\n                case KEYS.RIGHT:\r\n                case KEYS.DOWN:\r\n                    // We handled this event, so prevent it.\r\n                    e.preventDefault();\r\n\r\n                    // Choose the next selection item.\r\n                    pendingPromise.resolve(activateNextSelection(state));\r\n                    return;\r\n                case KEYS.LEFT:\r\n                case KEYS.UP:\r\n                    // We handled this event, so prevent it.\r\n                    e.preventDefault();\r\n\r\n                    // Choose the previous selection item.\r\n                    pendingPromise.resolve(activatePreviousSelection(state));\r\n                    return;\r\n                case KEYS.SPACE:\r\n                case KEYS.ENTER:\r\n                    // Get the item that is currently selected.\r\n                    var selectedItem = $(document.getElementById(state.selectionId)).children('[data-active-selection]');\r\n                    if (selectedItem) {\r\n                        e.preventDefault();\r\n\r\n                        // Unselect this item.\r\n                        pendingPromise.resolve(deselectItem(options, state, selectedItem, originalSelect));\r\n                    }\r\n                    return;\r\n            }\r\n\r\n            // Not handled. Resolve the promise.\r\n            pendingPromise.resolve();\r\n        });\r\n        // Whenever the input field changes, update the suggestion list.\r\n        if (options.showSuggestions) {\r\n            // Store the value of the field as its last value, when the field gains focus.\r\n            inputElement.on('focus', function(e) {\r\n                var query = $(e.currentTarget).val();\r\n                $(e.currentTarget).data('last-value', query);\r\n            });\r\n\r\n            // If this field uses ajax, set it up.\r\n            if (options.ajax) {\r\n                require([options.ajax], function(ajaxHandler) {\r\n                    // Creating throttled handlers free of race conditions, and accurate.\r\n                    // This code keeps track of a throttleTimeout, which is periodically polled.\r\n                    // Once the throttled function is executed, the fact that it is running is noted.\r\n                    // If a subsequent request comes in whilst it is running, this request is re-applied.\r\n                    var throttleTimeout = null;\r\n                    var inProgress = false;\r\n                    var pendingKey = 'autocomplete-throttledhandler';\r\n                    var handler = function(e) {\r\n                        // Empty the current timeout.\r\n                        throttleTimeout = null;\r\n\r\n                        // Mark this request as in-progress.\r\n                        inProgress = true;\r\n\r\n                        // Process the request.\r\n                        updateAjax(e, options, state, originalSelect, ajaxHandler)\r\n                        .then(function() {\r\n                            // Check if the throttleTimeout is still empty.\r\n                            // There's a potential condition whereby the JS request takes long enough to complete that\r\n                            // another task has been queued.\r\n                            // In this case another task will be kicked off and we must wait for that before marking htis as\r\n                            // complete.\r\n                            if (null === throttleTimeout) {\r\n                                // Mark this task as complete.\r\n                                M.util.js_complete(pendingKey);\r\n                            }\r\n                            inProgress = false;\r\n\r\n                            return arguments[0];\r\n                        })\r\n                        .catch(notification.exception);\r\n                    };\r\n\r\n                    // For input events, we do not want to trigger many, many updates.\r\n                    var throttledHandler = function(e) {\r\n                        window.clearTimeout(throttleTimeout);\r\n                        if (inProgress) {\r\n                            // A request is currently ongoing.\r\n                            // Delay this request another 100ms.\r\n                            throttleTimeout = window.setTimeout(throttledHandler.bind(this, e), 100);\r\n                            return;\r\n                        }\r\n\r\n                        if (throttleTimeout === null) {\r\n                            // There is currently no existing timeout handler, and it has not been recently cleared, so\r\n                            // this is the start of a throttling check.\r\n                            M.util.js_pending(pendingKey);\r\n                        }\r\n\r\n                        // There is currently no existing timeout handler, and it has not been recently cleared, so this\r\n                        // is the start of a throttling check.\r\n                        // Queue a call to the handler.\r\n                        throttleTimeout = window.setTimeout(handler.bind(this, e), 300);\r\n                    };\r\n\r\n                    // Trigger an ajax update after the text field value changes.\r\n                    inputElement.on('input', function(e) {\r\n                        var query = $(e.currentTarget).val();\r\n                        var last = $(e.currentTarget).data('last-value');\r\n                        // IE11 fires many more input events than required - even when the value has not changed.\r\n                        if (last !== query) {\r\n                            throttledHandler(e);\r\n                        }\r\n                        $(e.currentTarget).data('last-value', query);\r\n                    });\r\n                });\r\n            } else {\r\n                inputElement.on('input', function(e) {\r\n                    var query = $(e.currentTarget).val();\r\n                    var last = $(e.currentTarget).data('last-value');\r\n                    // IE11 fires many more input events than required - even when the value has not changed.\r\n                    // We need to only do this for real value changed events or the suggestions will be\r\n                    // unclickable on IE11 (because they will be rebuilt before the click event fires).\r\n                    // Note - because of this we cannot close the list when the query is empty or it will break\r\n                    // on IE11.\r\n                    if (last !== query) {\r\n                        updateSuggestions(options, state, query, originalSelect);\r\n                    }\r\n                    $(e.currentTarget).data('last-value', query);\r\n                });\r\n            }\r\n        }\r\n\r\n        // Add a Bootstrap keydown handler to close the suggestions list preventing the whole Dropdown close.\r\n        EventHandler.on(document, 'keydown.bs.dropdown.data-api', '.dropdown-menu', (event) => {\r\n            const pendingPromise = addPendingJSPromise('addNavigation-' + state.inputId + '-' + event.key);\r\n            if (event.key === \"Escape\" && inputElement.attr('aria-expanded') === \"true\") {\r\n                event.stopImmediatePropagation();\r\n                return pendingPromise.resolve(closeSuggestions(state));\r\n            }\r\n            return pendingPromise.resolve();\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Create and return an unresolved Promise for some pending JS.\r\n     *\r\n     * @param   {String} key The unique identifier for this promise\r\n     * @return  {Promise}\r\n     */\r\n    var addPendingJSPromise = function(key) {\r\n            var pendingKey = 'form-autocomplete:' + key;\r\n\r\n            M.util.js_pending(pendingKey);\r\n\r\n            var pendingPromise = $.Deferred();\r\n\r\n            pendingPromise\r\n            .then(function() {\r\n                M.util.js_complete(pendingKey);\r\n\r\n                return arguments[0];\r\n            })\r\n            .catch(notification.exception);\r\n\r\n            return pendingPromise;\r\n    };\r\n\r\n    /**\r\n     * Turn a boring select box into an auto-complete beast.\r\n     *\r\n     * @method enhanceField\r\n     * @param {string} selector The selector that identifies the select box.\r\n     * @param {boolean} tags Whether to allow support for tags (can define new entries).\r\n     * @param {string} ajax Name of an AMD module to handle ajax requests. If specified, the AMD\r\n     *                      module must expose 2 functions \"transport\" and \"processResults\".\r\n     *                      These are modeled on Select2 see: https://select2.github.io/options.html#ajax\r\n     * @param {String|Promise<string>} placeholder - The text to display before a selection is made.\r\n     * @param {Boolean} caseSensitive - If search has to be made case sensitive.\r\n     * @param {Boolean} showSuggestions - If suggestions should be shown\r\n     * @param {String|Promise<string>} noSelectionString - Text to display when there is no selection\r\n     * @param {Boolean} closeSuggestionsOnSelect - Whether to close the suggestions immediately after making a selection.\r\n     * @param {Object} templateOverrides A set of templates to use instead of the standard templates\r\n     * @return {Promise}\r\n     */\r\n     var enhanceField = async function(selector, tags, ajax, placeholder, caseSensitive, showSuggestions, noSelectionString,\r\n                          closeSuggestionsOnSelect, templateOverrides) {\r\n            // Set some default values.\r\n            var options = {\r\n                selector: selector,\r\n                tags: false,\r\n                ajax: false,\r\n                placeholder: await placeholder,\r\n                caseSensitive: false,\r\n                showSuggestions: true,\r\n                noSelectionString: await noSelectionString,\r\n                templates: $.extend({\r\n                        input: 'core/form_autocomplete_input',\r\n                        items: 'core/form_autocomplete_selection_items',\r\n                        layout: 'core/form_autocomplete_layout',\r\n                        selection: 'core/form_autocomplete_selection',\r\n                        suggestions: 'core/form_autocomplete_suggestions',\r\n                    }, templateOverrides),\r\n            };\r\n            var pendingKey = 'autocomplete-setup-' + selector;\r\n            M.util.js_pending(pendingKey);\r\n            if (typeof tags !== \"undefined\") {\r\n                options.tags = tags;\r\n            }\r\n            if (typeof ajax !== \"undefined\") {\r\n                options.ajax = ajax;\r\n            }\r\n            if (typeof caseSensitive !== \"undefined\") {\r\n                options.caseSensitive = caseSensitive;\r\n            }\r\n            if (typeof showSuggestions !== \"undefined\") {\r\n                options.showSuggestions = showSuggestions;\r\n            }\r\n            if (typeof noSelectionString === \"undefined\") {\r\n                str.get_string('noselection', 'form').done(function(result) {\r\n                    options.noSelectionString = result;\r\n                }).fail(notification.exception);\r\n            }\r\n\r\n            // Look for the select element.\r\n            var originalSelect = $(selector);\r\n            if (!originalSelect) {\r\n                log.debug('Selector not found: ' + selector);\r\n                M.util.js_complete(pendingKey);\r\n                return false;\r\n            }\r\n\r\n            // Ensure we enhance the element only once.\r\n            if (originalSelect.data('enhanced') === 'enhanced') {\r\n                M.util.js_complete(pendingKey);\r\n                return false;\r\n            }\r\n            originalSelect.data('enhanced', 'enhanced');\r\n\r\n            // Hide the original select.\r\n            Aria.hide(originalSelect.get());\r\n            originalSelect.css('visibility', 'hidden');\r\n\r\n            // Find or generate some ids.\r\n            var state = {\r\n                selectId: originalSelect.attr('id'),\r\n                inputId: 'form_autocomplete_input-' + uniqueId,\r\n                suggestionsId: 'form_autocomplete_suggestions-' + uniqueId,\r\n                selectionId: 'form_autocomplete_selection-' + uniqueId,\r\n                downArrowId: 'form_autocomplete_downarrow-' + uniqueId,\r\n                items: [],\r\n                required: originalSelect[0]?.ariaRequired === 'true',\r\n            };\r\n\r\n            // Increment the unique counter so we don't get duplicates ever.\r\n            uniqueId++;\r\n\r\n            options.multiple = originalSelect.attr('multiple');\r\n            if (!options.multiple) {\r\n                // If this is a single select then there is no way to de-select the current value -\r\n                // unless we add a bogus blank option to be selected when nothing else is.\r\n                // This matches similar code in updateAjax above.\r\n                originalSelect.prepend('<option>');\r\n            }\r\n\r\n            if (typeof closeSuggestionsOnSelect !== \"undefined\") {\r\n                options.closeSuggestionsOnSelect = closeSuggestionsOnSelect;\r\n            } else {\r\n                // If not specified, this will close suggestions by default for single-select elements only.\r\n                options.closeSuggestionsOnSelect = !options.multiple;\r\n            }\r\n\r\n            var originalLabel = $('[for=' + state.selectId + ']');\r\n            // Create the new markup and insert it after the select.\r\n            var suggestions = rebuildOptions(originalSelect.children('option'), true);\r\n\r\n            // Render all the parts of our UI.\r\n            var context = $.extend({}, options, state);\r\n            context.options = suggestions;\r\n            context.items = [];\r\n\r\n            // Collect rendered inline JS to be executed once the HTML is shown.\r\n            var collectedjs = '';\r\n\r\n            var renderLayout = templates.render(options.templates.layout, {})\r\n            .then(function(html) {\r\n                return $(html);\r\n            });\r\n\r\n            var renderInput = templates.render(options.templates.input, context).then(function(html, js) {\r\n                collectedjs += js;\r\n                return $(html);\r\n            });\r\n\r\n            var renderDatalist = templates.render(options.templates.suggestions, context).then(function(html, js) {\r\n                collectedjs += js;\r\n                return $(html);\r\n            });\r\n\r\n            var renderSelection = templates.render(options.templates.selection, context).then(function(html, js) {\r\n                collectedjs += js;\r\n                return $(html);\r\n            });\r\n\r\n            return Promise.all([renderLayout, renderInput, renderDatalist, renderSelection])\r\n            .then(function([layout, input, suggestions, selection]) {\r\n                originalSelect.hide();\r\n                var container = originalSelect.parent();\r\n\r\n                // Ensure that the data-fieldtype is set for behat.\r\n                input.find('input').attr('data-fieldtype', 'autocomplete');\r\n\r\n                container.append(layout);\r\n                container.find('[data-region=\"form_autocomplete-input\"]').replaceWith(input);\r\n                container.find('[data-region=\"form_autocomplete-suggestions\"]').replaceWith(suggestions);\r\n                container.find('[data-region=\"form_autocomplete-selection\"]').replaceWith(selection);\r\n\r\n                templates.runTemplateJS(collectedjs);\r\n\r\n                // Update the form label to point to the text input.\r\n                originalLabel.attr('for', state.inputId);\r\n                // Add the event handlers.\r\n                addNavigation(options, state, originalSelect);\r\n\r\n                var suggestionsElement = $(document.getElementById(state.suggestionsId));\r\n                // Hide the suggestions by default.\r\n                suggestionsElement.hide();\r\n                Aria.hide(suggestionsElement.get());\r\n\r\n                return;\r\n            })\r\n            .then(function() {\r\n                // Show the current values in the selection list.\r\n                return updateSelectionList(options, state, originalSelect);\r\n            })\r\n            .then(function() {\r\n                return M.util.js_complete(pendingKey);\r\n            })\r\n            .catch(function(error) {\r\n                M.util.js_complete(pendingKey);\r\n                notification.exception(error);\r\n            });\r\n    };\r\n\r\n    /**\r\n     * Announces changes to a tag in the autocomplete form.\r\n     *\r\n     * Updates the text content of a status element to inform users about the addition or removal\r\n     * of a tag. This is useful for accessibility purposes, ensuring screen readers can notify users\r\n     * of changes in the autocomplete component.\r\n     *\r\n     * @param {string} selectionId - The ID of the selection element used to locate the announcer element.\r\n     * @param {string|null|undefined} tagname - The name of the tag that was added or removed.\r\n     * @param {string} action - The action performed on the tag (e.g., \"added\" or \"removed\").\r\n     */\r\n    const announceChanges = async(selectionId, tagname, action) => {\r\n        if (!tagname) {\r\n            return;\r\n        }\r\n\r\n        const status = document.getElementById(`${selectionId}-announcer`);\r\n        if (!status) {\r\n            return;\r\n        }\r\n\r\n        status.textContent = await str.get_string(action, 'core', tagname);\r\n\r\n        // Remove the status message after 4 seconds to prevent screen readers from announcing it.\r\n        setTimeout(() => {\r\n            status.textContent = '';\r\n        }, 4000);\r\n\r\n    };\r\n\r\n    return {\r\n        // Public variables and functions.\r\n        enhanceField: enhanceField,\r\n\r\n        /**\r\n         * We need to use jQuery here as some calling code uses .done() and .fail() rather than native .then() and .catch()\r\n         *\r\n         * @method enhance\r\n         * @return {Promise} A jQuery promise\r\n         */\r\n        enhance: function() {\r\n            return $.when(enhanceField(...arguments));\r\n        }\r\n    };\r\n});\r\n"],"names":["define","$","log","str","templates","notification","LoadingIcon","Aria","FormChangeChecker","Popper","EventHandler","KEYS","uniqueId","Date","now","activateSelection","index","state","selectionElement","document","getElementById","selectionId","wrapListIndex","children","length","element","get","itemId","attr","Deferred","resolve","updateActiveSelectionFromState","activeElement","selectionRegion","activeId","activeValue","_selectionRegion$attr","replace","find","getActiveElementFromState","activeIndex","updateSelectionList","options","originalSelect","pendingKey","inputId","M","util","js_pending","items","rebuildOptions","newSelection","hasItemListChanged","js_complete","Promise","context","extend","render","then","html","js","replaceNodeContents","catch","exception","filter","item","indexOf","notifyChange","markFormChangedFromNode","dispatchEvent","Event","bubbles","deselectItem","async","selectedItemValue","undefined","first","prepend","each","ele","prop","remove","selectedItemText","childNodes","textContent","_item$0$childNodes$2$","trim","announceChanges","activateItem","inputElement","suggestionsElement","suggestionsId","globalIndex","scrollPos","offset","top","scrollTop","height","animate","promise","getCurrentItem","getNextEnabledItem","current","suggestions","nextIndex","getAttribute","getPreviousEnabledItem","previousIndex","originalOptions","includeEmpty","label","data","push","value","disabled","classes","classList","closeSuggestions","hide","updateSuggestions","query","matchingElements","searchquery","caseSensitive","toLocaleLowerCase","replaceNode","unhide","createPopper","placement","modifiers","name","enabled","node","text","show","tags","get_string","done","nosuggestionsstr","createItem","val","split","found","tagindex","tag","multiple","option","append","createTextNode","selectCurrentItem","selectedItem","closeSuggestionsOnSelect","focus","updateAjax","e","ajaxHandler","pendingPromise","addPendingJSPromise","parentElement","selectId","parent","addIconToContainerRemoveOnCompletion","currentTarget","transport","selector","results","processedResults","processResults","existingValues","optionIndex","String","isArray","resultIndex","result","error","reject","addNavigation","on","pendingJsPromise","keyCode","showSuggestions","activateNextItem","ajax","require","preventDefault","activatePreviousItem","closest","window","setTimeout","focusElement","timeoutPromise","is","downArrowId","off","selectionsElement","activateNextSelection","activatePreviousSelection","throttleTimeout","inProgress","handler","arguments","throttledHandler","clearTimeout","bind","this","event","key","stopImmediatePropagation","enhanceField","placeholder","noSelectionString","templateOverrides","input","layout","selection","fail","debug","css","required","ariaRequired","originalLabel","collectedjs","renderLayout","renderInput","renderDatalist","renderSelection","all","container","replaceWith","runTemplateJS","tagname","action","status","enhance","when"],"mappings":"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"}