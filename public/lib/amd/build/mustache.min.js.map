{"version":3,"file":"mustache.min.js","sources":["../src/mustache.js"],"sourcesContent":["// The MIT License\r\n//\r\n// Copyright (c) 2009 Chris Wanstrath (Ruby)\r\n// Copyright (c) 2010-2014 Jan Lehnardt (JavaScript)\r\n// Copyright (c) 2010-2015 The mustache.js community\r\n//\r\n// Permission is hereby granted, free of charge, to any person obtaining\r\n// a copy of this software and associated documentation files (the\r\n// \"Software\"), to deal in the Software without restriction, including\r\n// without limitation the rights to use, copy, modify, merge, publish,\r\n// distribute, sublicense, and/or sell copies of the Software, and to\r\n// permit persons to whom the Software is furnished to do so, subject to\r\n// the following conditions:\r\n//\r\n// The above copyright notice and this permission notice shall be\r\n// included in all copies or substantial portions of the Software.\r\n//\r\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\r\n// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\r\n// IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\r\n// CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\r\n// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\n// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n//\r\n\r\n// Description of import into Moodle:\r\n// Checkout from https://github.com/moodle/custom-mustache.js Branch: LAMBDA_ARGS (see note below)\r\n// Rebase onto latest release tag from https://github.com/janl/mustache.js\r\n// Copy mustache.js into lib/amd/src/ in Moodle folder.\r\n// Add the license as a comment to the file and these instructions.\r\n// Make sure that you have not removed the custom code for '$' and '<'.\r\n// Run unit tests.\r\n// NOTE:\r\n// Check if pull request from branch lambdaUpgrade420 has been accepted\r\n// by moodle/custom-mustache.js repo. If not, create one and use lambdaUpgrade420\r\n// as your branch in place of LAMBDA_ARGS.\r\n\r\n/*!\r\n * mustache.js - Logic-less {{mustache}} templates with JavaScript\r\n * http://github.com/janl/mustache.js\r\n */\r\n\r\nvar objectToString = Object.prototype.toString;\r\nvar isArray = Array.isArray || function isArrayPolyfill (object) {\r\n  return objectToString.call(object) === '[object Array]';\r\n};\r\n\r\nfunction isFunction (object) {\r\n  return typeof object === 'function';\r\n}\r\n\r\n/**\r\n * More correct typeof string handling array\r\n * which normally returns typeof 'object'\r\n */\r\nfunction typeStr (obj) {\r\n  return isArray(obj) ? 'array' : typeof obj;\r\n}\r\n\r\nfunction escapeRegExp (string) {\r\n  return string.replace(/[\\-\\[\\]{}()*+?.,\\\\\\^$|#\\s]/g, '\\\\$&');\r\n}\r\n\r\n/**\r\n * Null safe way of checking whether or not an object,\r\n * including its prototype, has a given property\r\n */\r\nfunction hasProperty (obj, propName) {\r\n  return obj != null && typeof obj === 'object' && (propName in obj);\r\n}\r\n\r\n/**\r\n * Safe way of detecting whether or not the given thing is a primitive and\r\n * whether it has the given property\r\n */\r\nfunction primitiveHasOwnProperty (primitive, propName) {\r\n  return (\r\n    primitive != null\r\n    && typeof primitive !== 'object'\r\n    && primitive.hasOwnProperty\r\n    && primitive.hasOwnProperty(propName)\r\n  );\r\n}\r\n\r\n// Workaround for https://issues.apache.org/jira/browse/COUCHDB-577\r\n// See https://github.com/janl/mustache.js/issues/189\r\nvar regExpTest = RegExp.prototype.test;\r\nfunction testRegExp (re, string) {\r\n  return regExpTest.call(re, string);\r\n}\r\n\r\nvar nonSpaceRe = /\\S/;\r\nfunction isWhitespace (string) {\r\n  return !testRegExp(nonSpaceRe, string);\r\n}\r\n\r\nvar entityMap = {\r\n  '&': '&amp;',\r\n  '<': '&lt;',\r\n  '>': '&gt;',\r\n  '\"': '&quot;',\r\n  \"'\": '&#39;',\r\n  '/': '&#x2F;',\r\n  '`': '&#x60;',\r\n  '=': '&#x3D;'\r\n};\r\n\r\nfunction escapeHtml (string) {\r\n  return String(string).replace(/[&<>\"'`=\\/]/g, function fromEntityMap (s) {\r\n    return entityMap[s];\r\n  });\r\n}\r\n\r\nvar whiteRe = /\\s*/;\r\nvar spaceRe = /\\s+/;\r\nvar equalsRe = /\\s*=/;\r\nvar curlyRe = /\\s*\\}/;\r\nvar tagRe = /#|\\^|\\/|>|\\{|&|=|!|\\$|</;\r\n\r\n/**\r\n * Breaks up the given `template` string into a tree of tokens. If the `tags`\r\n * argument is given here it must be an array with two string values: the\r\n * opening and closing tags used in the template (e.g. [ \"<%\", \"%>\" ]). Of\r\n * course, the default is to use mustaches (i.e. mustache.tags).\r\n *\r\n * A token is an array with at least 4 elements. The first element is the\r\n * mustache symbol that was used inside the tag, e.g. \"#\" or \"&\". If the tag\r\n * did not contain a symbol (i.e. {{myValue}}) this element is \"name\". For\r\n * all text that appears outside a symbol this element is \"text\".\r\n *\r\n * The second element of a token is its \"value\". For mustache tags this is\r\n * whatever else was inside the tag besides the opening symbol. For text tokens\r\n * this is the text itself.\r\n *\r\n * The third and fourth elements of the token are the start and end indices,\r\n * respectively, of the token in the original template.\r\n *\r\n * Tokens that are the root node of a subtree contain two more elements: 1) an\r\n * array of tokens in the subtree and 2) the index in the original template at\r\n * which the closing tag for that section begins.\r\n *\r\n * Tokens for partials also contain two more elements: 1) a string value of\r\n * indendation prior to that tag and 2) the index of that tag on that line -\r\n * eg a value of 2 indicates the partial is the third tag on this line.\r\n */\r\nfunction parseTemplate (template, tags) {\r\n  if (!template)\r\n    return [];\r\n  var lineHasNonSpace = false;\r\n  var sections = [];     // Stack to hold section tokens\r\n  var tokens = [];       // Buffer to hold the tokens\r\n  var spaces = [];       // Indices of whitespace tokens on the current line\r\n  var hasTag = false;    // Is there a {{tag}} on the current line?\r\n  var nonSpace = false;  // Is there a non-space char on the current line?\r\n  var indentation = '';  // Tracks indentation for tags that use it\r\n  var tagIndex = 0;      // Stores a count of number of tags encountered on a line\r\n\r\n  // Strips all whitespace tokens array for the current line\r\n  // if there was a {{#tag}} on it and otherwise only space.\r\n  function stripSpace () {\r\n    if (hasTag && !nonSpace) {\r\n      while (spaces.length)\r\n        delete tokens[spaces.pop()];\r\n    } else {\r\n      spaces = [];\r\n    }\r\n\r\n    hasTag = false;\r\n    nonSpace = false;\r\n  }\r\n\r\n  var openingTagRe, closingTagRe, closingCurlyRe;\r\n  function compileTags (tagsToCompile) {\r\n    if (typeof tagsToCompile === 'string')\r\n      tagsToCompile = tagsToCompile.split(spaceRe, 2);\r\n\r\n    if (!isArray(tagsToCompile) || tagsToCompile.length !== 2)\r\n      throw new Error('Invalid tags: ' + tagsToCompile);\r\n\r\n    openingTagRe = new RegExp(escapeRegExp(tagsToCompile[0]) + '\\\\s*');\r\n    closingTagRe = new RegExp('\\\\s*' + escapeRegExp(tagsToCompile[1]));\r\n    closingCurlyRe = new RegExp('\\\\s*' + escapeRegExp('}' + tagsToCompile[1]));\r\n  }\r\n\r\n  compileTags(tags || mustache.tags);\r\n\r\n  var scanner = new Scanner(template);\r\n\r\n  var start, type, value, chr, token, openSection, tagName, endTagName;\r\n  while (!scanner.eos()) {\r\n    start = scanner.pos;\r\n\r\n    // Match any text between tags.\r\n    value = scanner.scanUntil(openingTagRe);\r\n\r\n    if (value) {\r\n      for (var i = 0, valueLength = value.length; i < valueLength; ++i) {\r\n        chr = value.charAt(i);\r\n\r\n        if (isWhitespace(chr)) {\r\n          spaces.push(tokens.length);\r\n          indentation += chr;\r\n        } else {\r\n          nonSpace = true;\r\n          lineHasNonSpace = true;\r\n          indentation += ' ';\r\n        }\r\n\r\n        tokens.push([ 'text', chr, start, start + 1 ]);\r\n        start += 1;\r\n\r\n        // Check for whitespace on the current line.\r\n        if (chr === '\\n') {\r\n          stripSpace();\r\n          indentation = '';\r\n          tagIndex = 0;\r\n          lineHasNonSpace = false;\r\n        }\r\n      }\r\n    }\r\n\r\n    // Match the opening tag.\r\n    if (!scanner.scan(openingTagRe))\r\n      break;\r\n\r\n    hasTag = true;\r\n\r\n    // Get the tag type.\r\n    type = scanner.scan(tagRe) || 'name';\r\n    scanner.scan(whiteRe);\r\n\r\n    // Get the tag value.\r\n    if (type === '=') {\r\n      value = scanner.scanUntil(equalsRe);\r\n      scanner.scan(equalsRe);\r\n      scanner.scanUntil(closingTagRe);\r\n    } else if (type === '{') {\r\n      value = scanner.scanUntil(closingCurlyRe);\r\n      scanner.scan(curlyRe);\r\n      scanner.scanUntil(closingTagRe);\r\n      type = '&';\r\n    } else {\r\n      value = scanner.scanUntil(closingTagRe);\r\n    }\r\n\r\n    // Match the closing tag.\r\n    if (!scanner.scan(closingTagRe))\r\n      throw new Error('Unclosed tag at ' + scanner.pos);\r\n\r\n    if (type == '>') {\r\n      token = [ type, value, start, scanner.pos, indentation, tagIndex, lineHasNonSpace ];\r\n    } else {\r\n      token = [ type, value, start, scanner.pos ];\r\n    }\r\n    tagIndex++;\r\n    tokens.push(token);\r\n\r\n    if (type === '#' || type === '^' || type === '$' || type === '<') {\r\n      sections.push(token);\r\n    } else if (type === '/') {\r\n      // Check section nesting.\r\n      openSection = sections.pop();\r\n\r\n      if (!openSection)\r\n        throw new Error('Unopened section \"' + value + '\" at ' + start);\r\n      tagName = openSection[1].split(' ', 1)[0];\r\n      endTagName = value.split(' ', 1)[0];\r\n      if (tagName !== endTagName)\r\n        throw new Error('Unclosed section \"' + tagName + '\" at ' + start);\r\n    } else if (type === 'name' || type === '{' || type === '&') {\r\n      nonSpace = true;\r\n    } else if (type === '=') {\r\n      // Set the tags for the next time around.\r\n      compileTags(value);\r\n    }\r\n  }\r\n\r\n  stripSpace();\r\n\r\n  // Make sure there are no open sections when we're done.\r\n  openSection = sections.pop();\r\n\r\n  if (openSection)\r\n    throw new Error('Unclosed section \"' + openSection[1] + '\" at ' + scanner.pos);\r\n\r\n  return nestTokens(squashTokens(tokens));\r\n}\r\n\r\n/**\r\n * Combines the values of consecutive text tokens in the given `tokens` array\r\n * to a single token.\r\n */\r\nfunction squashTokens (tokens) {\r\n  var squashedTokens = [];\r\n\r\n  var token, lastToken;\r\n  for (var i = 0, numTokens = tokens.length; i < numTokens; ++i) {\r\n    token = tokens[i];\r\n\r\n    if (token) {\r\n      if (token[0] === 'text' && lastToken && lastToken[0] === 'text') {\r\n        lastToken[1] += token[1];\r\n        lastToken[3] = token[3];\r\n      } else {\r\n        squashedTokens.push(token);\r\n        lastToken = token;\r\n      }\r\n    }\r\n  }\r\n\r\n  return squashedTokens;\r\n}\r\n\r\n/**\r\n * Forms the given array of `tokens` into a nested tree structure where\r\n * tokens that represent a section have two additional items: 1) an array of\r\n * all tokens that appear in that section and 2) the index in the original\r\n * template that represents the end of that section.\r\n */\r\nfunction nestTokens (tokens) {\r\n  var nestedTokens = [];\r\n  var collector = nestedTokens;\r\n  var sections = [];\r\n\r\n  var token, section;\r\n  for (var i = 0, numTokens = tokens.length; i < numTokens; ++i) {\r\n    token = tokens[i];\r\n\r\n    switch (token[0]) {\r\n      case '$':\r\n      case '<':\r\n      case '#':\r\n      case '^':\r\n        collector.push(token);\r\n        sections.push(token);\r\n        collector = token[4] = [];\r\n        break;\r\n      case '/':\r\n        section = sections.pop();\r\n        section[5] = token[2];\r\n        collector = sections.length > 0 ? sections[sections.length - 1][4] : nestedTokens;\r\n        break;\r\n      default:\r\n        collector.push(token);\r\n    }\r\n  }\r\n\r\n  return nestedTokens;\r\n}\r\n\r\n/**\r\n * A simple string scanner that is used by the template parser to find\r\n * tokens in template strings.\r\n */\r\nfunction Scanner (string) {\r\n  this.string = string;\r\n  this.tail = string;\r\n  this.pos = 0;\r\n}\r\n\r\n/**\r\n * Returns `true` if the tail is empty (end of string).\r\n */\r\nScanner.prototype.eos = function eos () {\r\n  return this.tail === '';\r\n};\r\n\r\n/**\r\n * Tries to match the given regular expression at the current position.\r\n * Returns the matched text if it can match, the empty string otherwise.\r\n */\r\nScanner.prototype.scan = function scan (re) {\r\n  var match = this.tail.match(re);\r\n\r\n  if (!match || match.index !== 0)\r\n    return '';\r\n\r\n  var string = match[0];\r\n\r\n  this.tail = this.tail.substring(string.length);\r\n  this.pos += string.length;\r\n\r\n  return string;\r\n};\r\n\r\n/**\r\n * Skips all text until the given regular expression can be matched. Returns\r\n * the skipped string, which is the entire tail if no match can be made.\r\n */\r\nScanner.prototype.scanUntil = function scanUntil (re) {\r\n  var index = this.tail.search(re), match;\r\n\r\n  switch (index) {\r\n    case -1:\r\n      match = this.tail;\r\n      this.tail = '';\r\n      break;\r\n    case 0:\r\n      match = '';\r\n      break;\r\n    default:\r\n      match = this.tail.substring(0, index);\r\n      this.tail = this.tail.substring(index);\r\n  }\r\n\r\n  this.pos += match.length;\r\n\r\n  return match;\r\n};\r\n\r\n/**\r\n * Represents a rendering context by wrapping a view object and\r\n * maintaining a reference to the parent context.\r\n */\r\nfunction Context (view, parentContext) {\r\n  this.view = view;\r\n  this.blocks = {};\r\n  this.cache = { '.': this.view };\r\n  this.parent = parentContext;\r\n}\r\n\r\n/**\r\n * Creates a new context using the given view with this context\r\n * as the parent.\r\n */\r\nContext.prototype.push = function push (view) {\r\n  return new Context(view, this);\r\n};\r\n\r\n/**\r\n * Set a value in the current block context.\r\n */\r\nContext.prototype.setBlockVar = function set (name, value) {\r\n  var blocks = this.blocks;\r\n  blocks[name] = value;\r\n  return value;\r\n};\r\n/**\r\n * Clear all current block vars.\r\n */\r\nContext.prototype.clearBlockVars = function clearBlockVars () {\r\n  this.blocks = {};\r\n};\r\n/**\r\n * Get a value only from the current block context.\r\n */\r\nContext.prototype.getBlockVar = function getBlockVar (name) {\r\n  var blocks = this.blocks;\r\n  var value;\r\n  if (blocks.hasOwnProperty(name)) {\r\n    value = blocks[name];\r\n  } else {\r\n    if (this.parent) {\r\n      value = this.parent.getBlockVar(name);\r\n    }\r\n  }\r\n  // Can return undefined.\r\n  return value;\r\n};\r\n\r\n/**\r\n * Parse a tag name into an array of name and arguments (space separated, quoted strings allowed).\r\n */\r\nContext.prototype.parseNameAndArgs = function parseNameAndArgs (name) {\r\n  var parts = name.split(' ');\r\n  var inString = false;\r\n  var first = true;\r\n  var i = 0;\r\n  var arg;\r\n  var unescapedArg;\r\n  var argbuffer;\r\n  var finalArgs = [];\r\n\r\n  for (i = 0; i < parts.length; i++) {\r\n    arg = parts[i];\r\n    argbuffer = '';\r\n\r\n    if (inString) {\r\n      unescapedArg = arg.replace('\\\\\\\\', '');\r\n      if (unescapedArg.search(/^\"$|[^\\\\]\"$/) !== -1) {\r\n        finalArgs[finalArgs.length] = argbuffer + ' ' + arg.substr(0, arg.length - 1);\r\n        argbuffer = '';\r\n        inString = false;\r\n      } else {\r\n        argbuffer += ' ' + arg;\r\n      }\r\n    } else {\r\n      if (arg.search(/^\"/) !== -1 && !first) {\r\n        unescapedArg = arg.replace('\\\\\\\\', '');\r\n        if (unescapedArg.search(/^\".*[^\\\\]\"$/) !== -1) {\r\n          finalArgs[finalArgs.length] = arg.substr(1, arg.length - 2);\r\n        } else {\r\n          inString = true;\r\n          argbuffer = arg.substr(1);\r\n        }\r\n      } else {\r\n        if (arg.search(/^\\d+(\\.\\d*)?$/) !== -1) {\r\n          finalArgs[finalArgs.length] = parseFloat(arg);\r\n        } else if (arg === 'true') {\r\n          finalArgs[finalArgs.length] = 1;\r\n        } else if (arg === 'false') {\r\n          finalArgs[finalArgs.length] = 0;\r\n        } else if (first) {\r\n          finalArgs[finalArgs.length] = arg;\r\n        } else {\r\n          finalArgs[finalArgs.length] = this.lookup(arg);\r\n        }\r\n        first = false;\r\n      }\r\n    }\r\n  }\r\n\r\n  return finalArgs;\r\n};\r\n\r\n/**\r\n * Returns the value of the given name in this context, traversing\r\n * up the context hierarchy if the value is absent in this context's view.\r\n */\r\nContext.prototype.lookup = function lookup (name) {\r\n  var cache = this.cache;\r\n  var lambdaArgs = this.parseNameAndArgs(name);\r\n  name= lambdaArgs.shift();\r\n\r\n  var value;\r\n  if (cache.hasOwnProperty(name)) {\r\n    value = cache[name];\r\n  } else {\r\n    var context = this, intermediateValue, names, index, lookupHit = false;\r\n\r\n    while (context) {\r\n      if (name.indexOf('.') > 0) {\r\n        intermediateValue = context.view;\r\n        names = name.split('.');\r\n        index = 0;\r\n\r\n        /**\r\n         * Using the dot notion path in `name`, we descend through the\r\n         * nested objects.\r\n         *\r\n         * To be certain that the lookup has been successful, we have to\r\n         * check if the last object in the path actually has the property\r\n         * we are looking for. We store the result in `lookupHit`.\r\n         *\r\n         * This is specially necessary for when the value has been set to\r\n         * `undefined` and we want to avoid looking up parent contexts.\r\n         *\r\n         * In the case where dot notation is used, we consider the lookup\r\n         * to be successful even if the last \"object\" in the path is\r\n         * not actually an object but a primitive (e.g., a string, or an\r\n         * integer), because it is sometimes useful to access a property\r\n         * of an autoboxed primitive, such as the length of a string.\r\n         **/\r\n        while (intermediateValue != null && index < names.length) {\r\n          if (index === names.length - 1)\r\n            lookupHit = (\r\n              hasProperty(intermediateValue, names[index])\r\n              || primitiveHasOwnProperty(intermediateValue, names[index])\r\n            );\r\n\r\n          intermediateValue = intermediateValue[names[index++]];\r\n        }\r\n      } else {\r\n        intermediateValue = context.view[name];\r\n\r\n        /**\r\n         * Only checking against `hasProperty`, which always returns `false` if\r\n         * `context.view` is not an object. Deliberately omitting the check\r\n         * against `primitiveHasOwnProperty` if dot notation is not used.\r\n         *\r\n         * Consider this example:\r\n         * ```\r\n         * Mustache.render(\"The length of a football field is {{#length}}{{length}}{{/length}}.\", {length: \"100 yards\"})\r\n         * ```\r\n         *\r\n         * If we were to check also against `primitiveHasOwnProperty`, as we do\r\n         * in the dot notation case, then render call would return:\r\n         *\r\n         * \"The length of a football field is 9.\"\r\n         *\r\n         * rather than the expected:\r\n         *\r\n         * \"The length of a football field is 100 yards.\"\r\n         **/\r\n        lookupHit = hasProperty(context.view, name);\r\n      }\r\n\r\n      if (lookupHit) {\r\n        value = intermediateValue;\r\n        break;\r\n      }\r\n\r\n      context = context.parent;\r\n    }\r\n\r\n    cache[name] = value;\r\n  }\r\n\r\n  if (isFunction(value))\r\n    value = value.call(this.view, lambdaArgs);\r\n\r\n  return value;\r\n};\r\n\r\n/**\r\n * A Writer knows how to take a stream of tokens and render them to a\r\n * string, given a context. It also maintains a cache of templates to\r\n * avoid the need to parse the same template twice.\r\n */\r\nfunction Writer () {\r\n  this.templateCache = {\r\n    _cache: {},\r\n    set: function set (key, value) {\r\n      this._cache[key] = value;\r\n    },\r\n    get: function get (key) {\r\n      return this._cache[key];\r\n    },\r\n    clear: function clear () {\r\n      this._cache = {};\r\n    }\r\n  };\r\n}\r\n\r\n/**\r\n * Clears all cached templates in this writer.\r\n */\r\nWriter.prototype.clearCache = function clearCache () {\r\n  if (typeof this.templateCache !== 'undefined') {\r\n    this.templateCache.clear();\r\n  }\r\n};\r\n\r\n/**\r\n * Parses and caches the given `template` according to the given `tags` or\r\n * `mustache.tags` if `tags` is omitted,  and returns the array of tokens\r\n * that is generated from the parse.\r\n */\r\nWriter.prototype.parse = function parse (template, tags) {\r\n  var cache = this.templateCache;\r\n  var cacheKey = template + ':' + (tags || mustache.tags).join(':');\r\n  var isCacheEnabled = typeof cache !== 'undefined';\r\n  var tokens = isCacheEnabled ? cache.get(cacheKey) : undefined;\r\n\r\n  if (tokens == undefined) {\r\n    tokens = parseTemplate(template, tags);\r\n    isCacheEnabled && cache.set(cacheKey, tokens);\r\n  }\r\n  return tokens;\r\n};\r\n\r\n/**\r\n * High-level method that is used to render the given `template` with\r\n * the given `view`.\r\n *\r\n * The optional `partials` argument may be an object that contains the\r\n * names and templates of partials that are used in the template. It may\r\n * also be a function that is used to load partial templates on the fly\r\n * that takes a single argument: the name of the partial.\r\n *\r\n * If the optional `config` argument is given here, then it should be an\r\n * object with a `tags` attribute or an `escape` attribute or both.\r\n * If an array is passed, then it will be interpreted the same way as\r\n * a `tags` attribute on a `config` object.\r\n *\r\n * The `tags` attribute of a `config` object must be an array with two\r\n * string values: the opening and closing tags used in the template (e.g.\r\n * [ \"<%\", \"%>\" ]). The default is to mustache.tags.\r\n *\r\n * The `escape` attribute of a `config` object must be a function which\r\n * accepts a string as input and outputs a safely escaped string.\r\n * If an `escape` function is not provided, then an HTML-safe string\r\n * escaping function is used as the default.\r\n */\r\nWriter.prototype.render = function render (template, view, partials, config) {\r\n  var tags = this.getConfigTags(config);\r\n  var tokens = this.parse(template, tags);\r\n  var context = (view instanceof Context) ? view : new Context(view, undefined);\r\n  return this.renderTokens(tokens, context, partials, template, config);\r\n};\r\n\r\n/**\r\n * Low-level method that renders the given array of `tokens` using\r\n * the given `context` and `partials`.\r\n *\r\n * Note: The `originalTemplate` is only ever used to extract the portion\r\n * of the original template that was contained in a higher-order section.\r\n * If the template doesn't use higher-order sections, this argument may\r\n * be omitted.\r\n */\r\nWriter.prototype.renderTokens = function renderTokens (tokens, context, partials, originalTemplate, config) {\r\n  var buffer = '';\r\n\r\n  var token, symbol, value;\r\n  for (var i = 0, numTokens = tokens.length; i < numTokens; ++i) {\r\n    value = undefined;\r\n    token = tokens[i];\r\n    symbol = token[0];\r\n\r\n    if (symbol === '#') value = this.renderSection(token, context, partials, originalTemplate, config);\r\n    else if (symbol === '^') value = this.renderInverted(token, context, partials, originalTemplate, config);\r\n    else if (symbol === '>') value = this.renderPartial(token, context, partials, config);\r\n    else if (symbol === '<') value = this.renderBlock(token, context, partials, originalTemplate, config);\r\n    else if (symbol === '$') value = this.renderBlockVariable(token, context, partials, originalTemplate, config);\r\n    else if (symbol === '&') value = this.unescapedValue(token, context);\r\n    else if (symbol === 'name') value = this.escapedValue(token, context, config);\r\n    else if (symbol === 'text') value = this.rawValue(token);\r\n\r\n    if (value !== undefined)\r\n      buffer += value;\r\n  }\r\n\r\n  return buffer;\r\n};\r\n\r\nWriter.prototype.renderSection = function renderSection (token, context, partials, originalTemplate, config) {\r\n  var self = this;\r\n  var buffer = '';\r\n  var lambdaArgs = context.parseNameAndArgs(token[1]);\r\n  var name = lambdaArgs.shift();\r\n  var value = context.lookup(name);\r\n\r\n  // This function is used to render an arbitrary template\r\n  // in the current context by higher-order sections.\r\n  function subRender (template) {\r\n    return self.render(template, context, partials, config);\r\n  }\r\n\r\n  if (!value) return;\r\n\r\n  if (isArray(value)) {\r\n    for (var j = 0, valueLength = value.length; j < valueLength; ++j) {\r\n      buffer += this.renderTokens(token[4], context.push(value[j]), partials, originalTemplate, config);\r\n    }\r\n  } else if (typeof value === 'object' || typeof value === 'string' || typeof value === 'number') {\r\n    buffer += this.renderTokens(token[4], context.push(value), partials, originalTemplate, config);\r\n  } else if (isFunction(value)) {\r\n    if (typeof originalTemplate !== 'string')\r\n      throw new Error('Cannot use higher-order sections without the original template');\r\n\r\n    // Extract the portion of the original template that the section contains.\r\n    value = value.call(context.view, originalTemplate.slice(token[3], token[5]), subRender, lambdaArgs);\r\n\r\n    if (value != null)\r\n      buffer += value;\r\n  } else {\r\n    buffer += this.renderTokens(token[4], context, partials, originalTemplate, config);\r\n  }\r\n  return buffer;\r\n};\r\n\r\nWriter.prototype.renderInverted = function renderInverted (token, context, partials, originalTemplate, config) {\r\n  var value = context.lookup(token[1]);\r\n\r\n  // Use JavaScript's definition of falsy. Include empty arrays.\r\n  // See https://github.com/janl/mustache.js/issues/186\r\n  if (!value || (isArray(value) && value.length === 0))\r\n    return this.renderTokens(token[4], context, partials, originalTemplate, config);\r\n};\r\n\r\nWriter.prototype.indentPartial = function indentPartial (partial, indentation, lineHasNonSpace) {\r\n  var filteredIndentation = indentation.replace(/[^ \\t]/g, '');\r\n  var partialByNl = partial.split('\\n');\r\n  for (var i = 0; i < partialByNl.length; i++) {\r\n    if (partialByNl[i].length && (i > 0 || !lineHasNonSpace)) {\r\n      partialByNl[i] = filteredIndentation + partialByNl[i];\r\n    }\r\n  }\r\n  return partialByNl.join('\\n');\r\n};\r\n\r\nWriter.prototype.renderPartial = function renderPartial (token, context, partials, config) {\r\n  if (!partials) return;\r\n  var tags = this.getConfigTags(config);\r\n\r\n  var value = isFunction(partials) ? partials(token[1]) : partials[token[1]];\r\n  if (value != null) {\r\n    var lineHasNonSpace = token[6];\r\n    var tagIndex = token[5];\r\n    var indentation = token[4];\r\n    var indentedValue = value;\r\n    if (tagIndex == 0 && indentation) {\r\n      indentedValue = this.indentPartial(value, indentation, lineHasNonSpace);\r\n    }\r\n    var tokens = this.parse(indentedValue, tags);\r\n    return this.renderTokens(tokens, context, partials, indentedValue, config);\r\n  }\r\n};\r\n\r\nWriter.prototype.renderBlock = function renderBlock (token, context, partials, originalTemplate, config) {\r\n  if (!partials) return;\r\n\r\n  var value = isFunction(partials) ? partials(token[1]) : partials[token[1]];\r\n  if (value != null)\r\n    // Ignore any wrongly set block vars before we started.\r\n    context.clearBlockVars();\r\n    // We are only rendering to record the default block variables.\r\n    this.renderTokens(token[4], context, partials, originalTemplate, config);\r\n    // Now we render and return the result.\r\n    var result = this.renderTokens(this.parse(value), context, partials, value, config);\r\n    // Don't leak the block variables outside this include.\r\n    context.clearBlockVars();\r\n    return result;\r\n};\r\n\r\nWriter.prototype.renderBlockVariable = function renderBlockVariable (token, context, partials, originalTemplate, config) {\r\n  var value = token[1];\r\n\r\n  var exists = context.getBlockVar(value);\r\n  if (!exists) {\r\n    context.setBlockVar(value, originalTemplate.slice(token[3], token[5]));\r\n    return this.renderTokens(token[4], context, partials, originalTemplate, config);\r\n  } else {\r\n    return this.renderTokens(this.parse(exists), context, partials, exists, config);\r\n  }\r\n};\r\n\r\nWriter.prototype.unescapedValue = function unescapedValue (token, context) {\r\n  var value = context.lookup(token[1]);\r\n  if (value != null)\r\n    return value;\r\n};\r\n\r\nWriter.prototype.escapedValue = function escapedValue (token, context, config) {\r\n  var escape = this.getConfigEscape(config) || mustache.escape;\r\n  var value = context.lookup(token[1]);\r\n  if (value != null)\r\n    return (typeof value === 'number' && escape === mustache.escape) ? String(value) : escape(value);\r\n};\r\n\r\nWriter.prototype.rawValue = function rawValue (token) {\r\n  return token[1];\r\n};\r\n\r\nWriter.prototype.getConfigTags = function getConfigTags (config) {\r\n  if (isArray(config)) {\r\n    return config;\r\n  }\r\n  else if (config && typeof config === 'object') {\r\n    return config.tags;\r\n  }\r\n  else {\r\n    return undefined;\r\n  }\r\n};\r\n\r\nWriter.prototype.getConfigEscape = function getConfigEscape (config) {\r\n  if (config && typeof config === 'object' && !isArray(config)) {\r\n    return config.escape;\r\n  }\r\n  else {\r\n    return undefined;\r\n  }\r\n};\r\n\r\nvar mustache = {\r\n  name: 'mustache.js',\r\n  version: '4.2.0',\r\n  tags: [ '{{', '}}' ],\r\n  clearCache: undefined,\r\n  escape: undefined,\r\n  parse: undefined,\r\n  render: undefined,\r\n  Scanner: undefined,\r\n  Context: undefined,\r\n  Writer: undefined,\r\n  /**\r\n   * Allows a user to override the default caching strategy, by providing an\r\n   * object with set, get and clear methods. This can also be used to disable\r\n   * the cache by setting it to the literal `undefined`.\r\n   */\r\n  set templateCache (cache) {\r\n    defaultWriter.templateCache = cache;\r\n  },\r\n  /**\r\n   * Gets the default or overridden caching object from the default writer.\r\n   */\r\n  get templateCache () {\r\n    return defaultWriter.templateCache;\r\n  }\r\n};\r\n\r\n// All high-level mustache.* functions use this writer.\r\nvar defaultWriter = new Writer();\r\n\r\n/**\r\n * Clears all cached templates in the default writer.\r\n */\r\nmustache.clearCache = function clearCache () {\r\n  return defaultWriter.clearCache();\r\n};\r\n\r\n/**\r\n * Parses and caches the given template in the default writer and returns the\r\n * array of tokens it contains. Doing this ahead of time avoids the need to\r\n * parse templates on the fly as they are rendered.\r\n */\r\nmustache.parse = function parse (template, tags) {\r\n  return defaultWriter.parse(template, tags);\r\n};\r\n\r\n/**\r\n * Renders the `template` with the given `view`, `partials`, and `config`\r\n * using the default writer.\r\n */\r\nmustache.render = function render (template, view, partials, config) {\r\n  if (typeof template !== 'string') {\r\n    throw new TypeError('Invalid template! Template should be a \"string\" ' +\r\n                        'but \"' + typeStr(template) + '\" was given as the first ' +\r\n                        'argument for mustache#render(template, view, partials)');\r\n  }\r\n\r\n  return defaultWriter.render(template, view, partials, config);\r\n};\r\n\r\n// Export the escaping function so that the user may override it.\r\n// See https://github.com/janl/mustache.js/issues/244\r\nmustache.escape = escapeHtml;\r\n\r\n// Export these mainly for testing, but also for advanced usage.\r\nmustache.Scanner = Scanner;\r\nmustache.Context = Context;\r\nmustache.Writer = Writer;\r\n\r\nexport default mustache;\r\n"],"names":["objectToString","Object","prototype","toString","isArray","Array","object","call","isFunction","escapeRegExp","string","replace","hasProperty","obj","propName","regExpTest","RegExp","test","nonSpaceRe","isWhitespace","re","testRegExp","entityMap","whiteRe","spaceRe","equalsRe","curlyRe","tagRe","Scanner","tail","pos","Context","view","parentContext","blocks","cache","this","parent","Writer","templateCache","_cache","set","key","value","get","clear","eos","scan","match","index","substring","length","scanUntil","search","push","setBlockVar","name","clearBlockVars","getBlockVar","hasOwnProperty","parseNameAndArgs","arg","argbuffer","parts","split","inString","first","i","finalArgs","substr","parseFloat","lookup","primitive","lambdaArgs","shift","intermediateValue","names","context","lookupHit","indexOf","clearCache","parse","template","tags","cacheKey","mustache","join","isCacheEnabled","tokens","undefined","openingTagRe","closingTagRe","closingCurlyRe","lineHasNonSpace","sections","spaces","hasTag","nonSpace","indentation","tagIndex","stripSpace","pop","compileTags","tagsToCompile","Error","start","type","chr","token","openSection","tagName","scanner","valueLength","charAt","nestedTokens","collector","numTokens","nestTokens","lastToken","squashedTokens","squashTokens","parseTemplate","render","partials","config","getConfigTags","renderTokens","originalTemplate","symbol","buffer","renderSection","renderInverted","renderPartial","renderBlock","renderBlockVariable","unescapedValue","escapedValue","rawValue","self","j","slice","indentPartial","partial","filteredIndentation","partialByNl","indentedValue","result","exists","escape","getConfigEscape","String","version","defaultWriter","TypeError","s"],"mappings":"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"}