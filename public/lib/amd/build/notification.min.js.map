{"version":3,"file":"notification.min.js","sources":["../src/notification.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * Notification manager for in-page notifications in Moodle.\r\n *\r\n * @module     core/notification\r\n * @copyright  2015 Damyon Wiese <damyon@moodle.com>\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n * @since      2.9\r\n */\r\n\r\nimport Pending from 'core/pending';\r\nimport ModalEvents from 'core/modal_events';\r\nimport Log from 'core/log';\r\n\r\nlet currentContextId = M.cfg.contextid;\r\n\r\nconst notificationTypes = {\r\n    success:  'core/notification_success',\r\n    info:     'core/notification_info',\r\n    warning:  'core/notification_warning',\r\n    error:    'core/notification_error',\r\n};\r\n\r\nconst notificationRegionId = 'user-notifications';\r\n\r\nconst Selectors = {\r\n    notificationRegion: `#${notificationRegionId}`,\r\n    fallbackRegionParents: [\r\n        '#region-main',\r\n        '[role=\"main\"]',\r\n        'body',\r\n    ],\r\n};\r\n\r\nconst setupTargetRegion = () => {\r\n    let targetRegion = getNotificationRegion();\r\n    if (targetRegion) {\r\n        return false;\r\n    }\r\n\r\n    const newRegion = document.createElement('span');\r\n    newRegion.id = notificationRegionId;\r\n\r\n    return Selectors.fallbackRegionParents.some(selector => {\r\n        const targetRegion = document.querySelector(selector);\r\n\r\n        if (targetRegion) {\r\n            targetRegion.prepend(newRegion);\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    });\r\n};\r\n\r\n/**\r\n * A notification object displayed to a user.\r\n *\r\n * @typedef  {Object} Notification\r\n * @property {string} message       The body of the notification\r\n * @property {string} type          The type of notification to add (error, warning, info, success).\r\n * @property {Boolean} closebutton  Whether to show the close button.\r\n * @property {Boolean} announce     Whether to announce to screen readers.\r\n */\r\n\r\n/**\r\n * Poll the server for any new notifications.\r\n *\r\n * @method\r\n * @returns {Promise}\r\n */\r\nexport const fetchNotifications = async() => {\r\n    const Ajax = await import('core/ajax');\r\n\r\n    return Ajax.call([{\r\n        methodname: 'core_fetch_notifications',\r\n        args: {\r\n            contextid: currentContextId\r\n        }\r\n    }])[0]\r\n    .then(addNotifications);\r\n};\r\n\r\n/**\r\n * Add all of the supplied notifications.\r\n *\r\n * @method\r\n * @param {Notification[]} notifications The list of notificaitons\r\n * @returns {Promise}\r\n */\r\nconst addNotifications = notifications => {\r\n    if (!notifications.length) {\r\n        return Promise.resolve();\r\n    }\r\n\r\n    const pendingPromise = new Pending('core/notification:addNotifications');\r\n    notifications.forEach(notification => renderNotification(notification.template, notification.variables));\r\n\r\n    return pendingPromise.resolve();\r\n};\r\n\r\n/**\r\n * Add a notification to the page.\r\n *\r\n * Note: This does not cause the notification to be added to the session.\r\n *\r\n * @method\r\n * @param {Notification} notification The notification to add.\r\n * @returns {Promise}\r\n */\r\nexport const addNotification = notification => {\r\n    const pendingPromise = new Pending('core/notification:addNotifications');\r\n\r\n    let template = notificationTypes.error;\r\n\r\n    notification = {\r\n        closebutton:    true,\r\n        announce:       true,\r\n        type:           'error',\r\n        ...notification,\r\n    };\r\n\r\n    if (notification.template) {\r\n        template = notification.template;\r\n        delete notification.template;\r\n    } else if (notification.type) {\r\n        if (typeof notificationTypes[notification.type] !== 'undefined') {\r\n            template = notificationTypes[notification.type];\r\n        }\r\n        delete notification.type;\r\n    }\r\n\r\n    return renderNotification(template, notification)\r\n    .then(pendingPromise.resolve);\r\n};\r\n\r\nconst renderNotification = async(template, variables) => {\r\n    if (typeof variables.message === 'undefined' || !variables.message) {\r\n        Log.debug('Notification received without content. Skipping.');\r\n        return;\r\n    }\r\n\r\n    const pendingPromise = new Pending('core/notification:renderNotification');\r\n    const Templates = await import('core/templates');\r\n\r\n    Templates.renderForPromise(template, variables)\r\n    .then(({html, js = ''}) => {\r\n        Templates.prependNodeContents(getNotificationRegion(), html, js);\r\n\r\n        return;\r\n    })\r\n    .then(pendingPromise.resolve)\r\n    .catch(exception);\r\n};\r\n\r\nconst getNotificationRegion = () => document.querySelector(Selectors.notificationRegion);\r\n\r\n/**\r\n * Alert dialogue.\r\n *\r\n * @method\r\n * @param {String|Promise} title\r\n * @param {String|Promise} message\r\n * @param {String|Promise} cancelText\r\n * @returns {Promise}\r\n */\r\nexport const alert = async(title, message, cancelText) => {\r\n    var pendingPromise = new Pending('core/notification:alert');\r\n\r\n    const AlertModal = await import('core/local/modal/alert');\r\n\r\n    const modal = await AlertModal.create({\r\n        body: message,\r\n        title: title,\r\n        buttons: {\r\n            cancel: cancelText,\r\n        },\r\n        removeOnClose: true,\r\n        show: true,\r\n    });\r\n    pendingPromise.resolve();\r\n    return modal;\r\n};\r\n\r\n/**\r\n * The confirm has now been replaced with a save and cancel dialogue.\r\n *\r\n * @method\r\n * @param {String|Promise} title\r\n * @param {String|Promise} question\r\n * @param {String|Promise} saveLabel\r\n * @param {String|Promise} noLabel\r\n * @param {String|Promise} saveCallback\r\n * @param {String|Promise} cancelCallback\r\n * @returns {Promise}\r\n */\r\nexport const confirm = (title, question, saveLabel, noLabel, saveCallback, cancelCallback) =>\r\n        saveCancel(title, question, saveLabel, saveCallback, cancelCallback);\r\n\r\n/**\r\n * The Save and Cancel dialogue helper.\r\n *\r\n * @method\r\n * @param {String|Promise} title\r\n * @param {String|Promise} question\r\n * @param {String|Promise} saveLabel\r\n * @param {String|Promise} saveCallback\r\n * @param {String|Promise} cancelCallback\r\n * @param {Object} options\r\n * @param {HTMLElement} [options.triggerElement=null] The element that triggered the modal (will receive the focus after hidden)\r\n * @returns {Promise}\r\n */\r\nexport const saveCancel = async(title, question, saveLabel, saveCallback, cancelCallback, {\r\n    triggerElement = null,\r\n} = {}) => {\r\n    const pendingPromise = new Pending('core/notification:confirm');\r\n\r\n    const [\r\n        SaveCancelModal,\r\n    ] = await Promise.all([\r\n        import('core/modal_save_cancel'),\r\n    ]);\r\n\r\n    const modal = await SaveCancelModal.create({\r\n        title,\r\n        body: question,\r\n        buttons: {\r\n            // Note: The noLabel is no longer supported.\r\n            save: saveLabel,\r\n        },\r\n        removeOnClose: true,\r\n        show: true,\r\n    });\r\n    modal.getRoot().on(ModalEvents.save, saveCallback);\r\n    modal.getRoot().on(ModalEvents.cancel, cancelCallback);\r\n    modal.getRoot().on(ModalEvents.hidden, () => triggerElement?.focus());\r\n    pendingPromise.resolve();\r\n\r\n    return modal;\r\n};\r\n\r\n/**\r\n * The Delete and Cancel dialogue helper.\r\n *\r\n * @method\r\n * @param {String|Promise} title\r\n * @param {String|Promise} question\r\n * @param {String|Promise} deleteLabel\r\n * @param {String|Promise} deleteCallback\r\n * @param {String|Promise} cancelCallback\r\n * @param {Object} options\r\n * @param {HTMLElement} [options.triggerElement=null] The element that triggered the modal (will receive the focus after hidden)\r\n * @returns {Promise}\r\n */\r\nexport const deleteCancel = async(title, question, deleteLabel, deleteCallback, cancelCallback, {\r\n    triggerElement = null,\r\n} = {}) => {\r\n    const pendingPromise = new Pending('core/notification:confirm');\r\n\r\n    const [\r\n        DeleteCancelModal,\r\n    ] = await Promise.all([\r\n        import('core/modal_delete_cancel'),\r\n    ]);\r\n\r\n    const modal = await DeleteCancelModal.create({\r\n        title: title,\r\n        body: question,\r\n        buttons: {\r\n            'delete': deleteLabel\r\n        },\r\n        removeOnClose: true,\r\n        show: true,\r\n    });\r\n        modal.getRoot().on(ModalEvents.delete, deleteCallback);\r\n        modal.getRoot().on(ModalEvents.cancel, cancelCallback);\r\n        modal.getRoot().on(ModalEvents.hidden, () => triggerElement?.focus());\r\n        pendingPromise.resolve();\r\n\r\n        return modal;\r\n};\r\n\r\n\r\n/**\r\n * Add all of the supplied notifications.\r\n *\r\n * @param {Promise|String} title The header of the modal\r\n * @param {Promise|String} question What do we want the user to confirm\r\n * @param {Promise|String} saveLabel The modal action link text\r\n * @param {Object} options\r\n * @param {HTMLElement} [options.triggerElement=null] The element that triggered the modal (will receive the focus after hidden)\r\n * @return {Promise}\r\n */\r\nexport const saveCancelPromise = (title, question, saveLabel, {\r\n    triggerElement = null,\r\n} = {}) => new Promise((resolve, reject) => {\r\n    saveCancel(title, question, saveLabel, resolve, reject, {triggerElement})\r\n        .then(modal => modal.getRoot().on(ModalEvents.hidden, reject));\r\n});\r\n\r\n/**\r\n * Add all of the supplied notifications.\r\n *\r\n * @param {Promise|String} title The header of the modal\r\n * @param {Promise|String} question What do we want the user to confirm\r\n * @param {Promise|String} deleteLabel The modal action link text\r\n * @param {Object} options\r\n * @param {HTMLElement} [options.triggerElement=null] The element that triggered the modal (will receive the focus after hidden)\r\n * @return {Promise}\r\n */\r\nexport const deleteCancelPromise = (title, question, deleteLabel, {\r\n    triggerElement = null,\r\n} = {}) => new Promise((resolve, reject) => {\r\n    deleteCancel(title, question, deleteLabel, resolve, reject, {triggerElement});\r\n});\r\n\r\n/**\r\n * Wrap M.core.exception.\r\n *\r\n * @method\r\n * @param {Error} ex\r\n */\r\nexport const exception = async ex => {\r\n    const pendingPromise = new Pending('core/notification:displayException');\r\n\r\n    // Fudge some parameters.\r\n    if (!ex.stack) {\r\n        ex.stack = '';\r\n    }\r\n\r\n    if (ex.debuginfo) {\r\n        ex.stack += ex.debuginfo + '\\n';\r\n    }\r\n\r\n    if (!ex.backtrace && ex.stacktrace) {\r\n        ex.backtrace = ex.stacktrace;\r\n    }\r\n\r\n    if (ex.backtrace) {\r\n        ex.stack += ex.backtrace;\r\n        const ln = ex.backtrace.match(/line ([^ ]*) of/);\r\n        const fn = ex.backtrace.match(/ of ([^:]*): /);\r\n        if (ln && ln[1]) {\r\n            ex.lineNumber = ln[1];\r\n        }\r\n        if (fn && fn[1]) {\r\n            ex.fileName = fn[1];\r\n            if (ex.fileName.length > 30) {\r\n                ex.fileName = '...' + ex.fileName.substr(ex.fileName.length - 27);\r\n            }\r\n        }\r\n    }\r\n\r\n    if (typeof ex.name === 'undefined' && ex.errorcode) {\r\n        ex.name = ex.errorcode;\r\n    }\r\n\r\n    const Y = await import('core/yui');\r\n    Y.use('moodle-core-notification-exception', function() {\r\n        var modal = new M.core.exception(ex);\r\n\r\n        modal.show();\r\n\r\n        pendingPromise.resolve();\r\n    });\r\n};\r\n\r\n/**\r\n * Initialise the page for the suppled context, and displaying the supplied notifications.\r\n *\r\n * @method\r\n * @param {Number} contextId\r\n * @param {Notification[]} notificationList\r\n */\r\nexport const init = (contextId, notificationList) => {\r\n    currentContextId = contextId;\r\n\r\n    // Setup the message target region if it isn't setup already.\r\n    setupTargetRegion();\r\n\r\n    // Add provided notifications.\r\n    addNotifications(notificationList);\r\n};\r\n\r\n// To maintain backwards compatability we export default here.\r\nexport default {\r\n    init,\r\n    fetchNotifications,\r\n    addNotification,\r\n    alert,\r\n    confirm,\r\n    saveCancel,\r\n    deleteCancel,\r\n    saveCancelPromise,\r\n    deleteCancelPromise,\r\n    exception,\r\n};\r\n"],"names":["currentContextId","M","cfg","contextid","notificationTypes","success","info","warning","error","Selectors","notificationRegion","fallbackRegionParents","fetchNotifications","async","call","methodname","args","then","addNotifications","notifications","length","Promise","resolve","pendingPromise","Pending","forEach","notification","renderNotification","template","variables","addNotification","closebutton","announce","type","message","debug","Templates","renderForPromise","_ref","html","js","prependNodeContents","getNotificationRegion","catch","exception","document","querySelector","alert","title","cancelText","AlertModal","modal","create","body","buttons","cancel","removeOnClose","show","confirm","question","saveLabel","noLabel","saveCallback","cancelCallback","saveCancel","triggerElement","SaveCancelModal","all","save","getRoot","on","ModalEvents","hidden","focus","deleteCancel","deleteLabel","deleteCallback","DeleteCancelModal","delete","saveCancelPromise","reject","deleteCancelPromise","ex","stack","debuginfo","backtrace","stacktrace","ln","match","fn","lineNumber","fileName","substr","name","errorcode","use","core","init","contextId","notificationList","newRegion","createElement","id","some","selector","targetRegion","prepend","setupTargetRegion"],"mappings":"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"}