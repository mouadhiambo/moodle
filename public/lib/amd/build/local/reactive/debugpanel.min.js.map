{"version":3,"file":"debugpanel.min.js","sources":["../../../src/local/reactive/debugpanel.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * Reactive module debug panel.\r\n *\r\n * This module contains all the UI components for the reactive debug tools.\r\n * Those tools are only available if the debug is enables and could be used\r\n * from the footer.\r\n *\r\n * @module     core/local/reactive/debugpanel\r\n * @copyright  2021 Ferran Recio <ferran@moodle.com>\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\n\r\nimport {BaseComponent, DragDrop, debug} from 'core/reactive';\r\nimport log from 'core/log';\r\nimport {debounce} from 'core/utils';\r\n\r\n/**\r\n * Init the main reactive panel.\r\n *\r\n * @param {element|string} target the DOM main element or its ID\r\n * @param {object} selectors optional css selector overrides\r\n */\r\nexport const init = (target, selectors) => {\r\n    const element = document.getElementById(target);\r\n    // Check if the debug reactive module is available.\r\n    if (debug === undefined) {\r\n        element.remove();\r\n        return;\r\n    }\r\n    // Create the main component.\r\n    new GlobalDebugPanel({\r\n        element,\r\n        reactive: debug,\r\n        selectors,\r\n    });\r\n};\r\n\r\n/**\r\n * Init an instance reactive subpanel.\r\n *\r\n * @param {element|string} target the DOM main element or its ID\r\n * @param {object} selectors optional css selector overrides\r\n */\r\nexport const initsubpanel = (target, selectors) => {\r\n    const element = document.getElementById(target);\r\n    // Check if the debug reactive module is available.\r\n    if (debug === undefined) {\r\n        element.remove();\r\n        return;\r\n    }\r\n    // Create the main component.\r\n    new DebugInstanceSubpanel({\r\n        element,\r\n        reactive: debug,\r\n        selectors,\r\n    });\r\n};\r\n\r\n/**\r\n * Component for the main reactive dev panel.\r\n *\r\n * This component shows the list of reactive instances and handle the buttons\r\n * to open a specific instance panel.\r\n */\r\nclass GlobalDebugPanel extends BaseComponent {\r\n\r\n    /**\r\n     * Constructor hook.\r\n     */\r\n    create() {\r\n        // Optional component name for debugging.\r\n        this.name = 'GlobalDebugPanel';\r\n        // Default query selectors.\r\n        this.selectors = {\r\n            LOADERS: `[data-for='loaders']`,\r\n            SUBPANEL: `[data-for='subpanel']`,\r\n            NOINSTANCES: `[data-for='noinstances']`,\r\n            LOG: `[data-for='log']`,\r\n        };\r\n        this.classes = {\r\n            HIDE: `d-none`,\r\n        };\r\n        // The list of loaded debuggers.\r\n        this.subPanels = new Set();\r\n    }\r\n\r\n    /**\r\n     * Initial state ready method.\r\n     *\r\n     * @param {object} state the initial state\r\n     */\r\n    stateReady(state) {\r\n        this._updateReactivesPanels({state});\r\n        // Remove loading wheel.\r\n        this.getElement(this.selectors.SUBPANEL).innerHTML = '';\r\n    }\r\n\r\n    /**\r\n     * Component watchers.\r\n     *\r\n     * @returns {Array} of watchers\r\n     */\r\n    getWatchers() {\r\n        return [\r\n            {watch: `reactives:created`, handler: this._updateReactivesPanels},\r\n        ];\r\n    }\r\n\r\n    /**\r\n     * Update the list of reactive instances.\r\n     * @param {Object} args\r\n     * @param {Object} args.state the current state\r\n     */\r\n    _updateReactivesPanels({state}) {\r\n        this.getElement(this.selectors.NOINSTANCES)?.classList?.toggle(\r\n            this.classes.HIDE,\r\n            state.reactives.size > 0\r\n        );\r\n        // Generate loading buttons.\r\n        state.reactives.forEach(\r\n            instance => {\r\n                this._createLoader(instance);\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Create a debug panel button for a specific reactive instance.\r\n     *\r\n     * @param {object} instance hte instance data\r\n     */\r\n    _createLoader(instance) {\r\n        if (this.subPanels.has(instance.id)) {\r\n            return;\r\n        }\r\n        this.subPanels.add(instance.id);\r\n        const loaders = this.getElement(this.selectors.LOADERS);\r\n        const btn = document.createElement(\"button\");\r\n        btn.innerHTML = instance.id;\r\n        btn.dataset.id = instance.id;\r\n        loaders.appendChild(btn);\r\n        // Add click event.\r\n        this.addEventListener(btn, 'click', () => this._openPanel(btn, instance));\r\n    }\r\n\r\n    /**\r\n     * Open a debug panel.\r\n     *\r\n     * @param {Element} btn the button element\r\n     * @param {object} instance the instance data\r\n     */\r\n    async _openPanel(btn, instance) {\r\n        try {\r\n            const target = this.getElement(this.selectors.SUBPANEL);\r\n            const data = {...instance};\r\n            await this.renderComponent(target, 'core/local/reactive/debuginstancepanel', data);\r\n        } catch (error) {\r\n            log.error('Cannot load reactive debug subpanel');\r\n            throw error;\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Component for the main reactive dev panel.\r\n *\r\n * This component shows the list of reactive instances and handle the buttons\r\n * to open a specific instance panel.\r\n */\r\nclass DebugInstanceSubpanel extends BaseComponent {\r\n\r\n    /**\r\n     * Constructor hook.\r\n     */\r\n    create() {\r\n        // Optional component name for debugging.\r\n        this.name = 'DebugInstanceSubpanel';\r\n        // Default query selectors.\r\n        this.selectors = {\r\n            NAME: `[data-for='name']`,\r\n            CLOSE: `[data-for='close']`,\r\n            READMODE: `[data-for='readmode']`,\r\n            HIGHLIGHT: `[data-for='highlight']`,\r\n            LOG: `[data-for='log']`,\r\n            STATE: `[data-for='state']`,\r\n            CLEAN: `[data-for='clean']`,\r\n            PIN: `[data-for='pin']`,\r\n            SAVE: `[data-for='save']`,\r\n            INVALID: `[data-for='invalid']`,\r\n        };\r\n        this.id = this.element.dataset.id;\r\n        this.controller = M.reactive[this.id];\r\n\r\n        // The component is created always pinned.\r\n        this.draggable = false;\r\n        // We want the element to be dragged like modal.\r\n        this.relativeDrag = true;\r\n        // Save warning (will be loaded when state is ready.\r\n        this.strings = {\r\n            savewarning: '',\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Initial state ready method.\r\n     *\r\n     */\r\n    stateReady() {\r\n        // Enable drag and drop.\r\n        this.dragdrop = new DragDrop(this);\r\n\r\n        // Close button.\r\n        this.addEventListener(\r\n            this.getElement(this.selectors.CLOSE),\r\n            'click',\r\n            this.remove\r\n        );\r\n        // Highlight button.\r\n        if (this.controller.highlight) {\r\n            this._toggleButtonText(this.getElement(this.selectors.HIGHLIGHT));\r\n        }\r\n        this.addEventListener(\r\n            this.getElement(this.selectors.HIGHLIGHT),\r\n            'click',\r\n            () => {\r\n                this.controller.highlight = !this.controller.highlight;\r\n                this._toggleButtonText(this.getElement(this.selectors.HIGHLIGHT));\r\n            }\r\n        );\r\n        // Edit mode button.\r\n        this.addEventListener(\r\n            this.getElement(this.selectors.READMODE),\r\n            'click',\r\n            this._toggleEditMode\r\n        );\r\n        // Clean log and state.\r\n        this.addEventListener(\r\n            this.getElement(this.selectors.CLEAN),\r\n            'click',\r\n            this._cleanAreas\r\n        );\r\n        // Unpin panel butotn.\r\n        this.addEventListener(\r\n            this.getElement(this.selectors.PIN),\r\n            'click',\r\n            this._togglePin\r\n        );\r\n        // Save button, state format error message and state textarea.\r\n        this.getElement(this.selectors.SAVE).disabled = true;\r\n\r\n        this.addEventListener(\r\n            this.getElement(this.selectors.STATE),\r\n            'keyup',\r\n            debounce(this._checkJSON.bind(this), 500)\r\n        );\r\n\r\n        this.addEventListener(\r\n            this.getElement(this.selectors.SAVE),\r\n            'click',\r\n            this._saveState\r\n        );\r\n        // Save the default save warning message.\r\n        this.strings.savewarning = this.getElement(this.selectors.INVALID)?.innerHTML ?? '';\r\n        // Add current state.\r\n        this._refreshState();\r\n    }\r\n\r\n    /**\r\n     * Remove all subcomponents dependencies.\r\n     */\r\n    destroy() {\r\n        if (this.dragdrop !== undefined) {\r\n            this.dragdrop.unregister();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Component watchers.\r\n     *\r\n     * @returns {Array} of watchers\r\n     */\r\n    getWatchers() {\r\n        return [\r\n            {watch: `reactives[${this.id}].lastChanges:updated`, handler: this._refreshLog},\r\n            {watch: `reactives[${this.id}].modified:updated`, handler: this._refreshState},\r\n            {watch: `reactives[${this.id}].readOnly:updated`, handler: this._refreshReadOnly},\r\n        ];\r\n    }\r\n\r\n    /**\r\n     * Watcher method to refresh the log panel.\r\n     *\r\n     * @param {object} args\r\n     * @param {HTMLElement} args.element\r\n     */\r\n    _refreshLog({element}) {\r\n        const list = element?.lastChanges ?? [];\r\n\r\n        // Append last log.\r\n\r\n        const target = this.getElement(this.selectors.LOG);\r\n        if (target.value !== '') {\r\n            target.value += '\\n\\n';\r\n        }\r\n\r\n        const logContent = list.join(\"\\n\");\r\n\r\n        target.value += `= Transaction =\\n${logContent}`;\r\n        target.scrollTop = target.scrollHeight;\r\n    }\r\n\r\n    /**\r\n     * Listener method to clean the log area.\r\n     */\r\n    _cleanAreas() {\r\n        let target = this.getElement(this.selectors.LOG);\r\n        target.value = '';\r\n\r\n        this._refreshState();\r\n    }\r\n\r\n    /**\r\n     * Watcher to refresh the state information.\r\n     */\r\n    _refreshState() {\r\n        const target = this.getElement(this.selectors.STATE);\r\n        target.value = JSON.stringify(this.controller.state, null, 4);\r\n    }\r\n\r\n    /**\r\n     * Watcher to update the read only information.\r\n     */\r\n    _refreshReadOnly() {\r\n        // Toggle the read mode button.\r\n        const target = this.getElement(this.selectors.READMODE);\r\n        if (target.dataset.readonly === undefined) {\r\n            target.dataset.readonly = target.innerHTML;\r\n        }\r\n        if (this.controller.readOnly) {\r\n            target.innerHTML = target.dataset.readonly;\r\n        } else {\r\n            target.innerHTML = target.dataset.alt;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Listener to toggle the edit mode of the component.\r\n     */\r\n    _toggleEditMode() {\r\n        this.controller.readOnly = !this.controller.readOnly;\r\n    }\r\n\r\n    /**\r\n     * Check that the edited state JSON is valid.\r\n     *\r\n     * Not all valid JSON are suitable for transforming the state. For example,\r\n     * the first level attributes cannot change the type.\r\n     *\r\n     * @return {undefined|array} Array of state updates.\r\n     */\r\n    _checkJSON() {\r\n        const invalid = this.getElement(this.selectors.INVALID);\r\n        const save = this.getElement(this.selectors.SAVE);\r\n\r\n        const edited = this.getElement(this.selectors.STATE).value;\r\n\r\n        const currentStateData = this.controller.stateData;\r\n\r\n        // Check if the json is tha same as state.\r\n        if (edited == JSON.stringify(this.controller.state, null, 4)) {\r\n            invalid.style.color = '';\r\n            invalid.innerHTML = '';\r\n            save.disabled = true;\r\n            return undefined;\r\n        }\r\n\r\n        // Check if the json format is valid.\r\n        try {\r\n            const newState = JSON.parse(edited);\r\n            // Check the first level did not change types.\r\n            const result = this._generateStateUpdates(currentStateData, newState);\r\n            // Enable save button.\r\n            invalid.style.color = '';\r\n            invalid.innerHTML = this.strings.savewarning;\r\n            save.disabled = false;\r\n            return result;\r\n        } catch (error) {\r\n            invalid.style.color = 'red';\r\n            invalid.innerHTML = error.message ?? 'Invalid JSON sctructure';\r\n            save.disabled = true;\r\n            return undefined;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Listener to save the current edited state into the real state.\r\n     */\r\n    _saveState() {\r\n        const updates = this._checkJSON();\r\n        if (!updates) {\r\n            return;\r\n        }\r\n        // Sent the updates to the state manager.\r\n        this.controller.processUpdates(updates);\r\n    }\r\n\r\n    /**\r\n     * Check that the edited state JSON is valid.\r\n     *\r\n     * Not all valid JSON are suitable for transforming the state. For example,\r\n     * the first level attributes cannot change the type. This method do a two\r\n     * steps comparison between the current state data and the new state data.\r\n     *\r\n     * A reactive state cannot be overridden like any other variable. To keep\r\n     * the watchers updated is necessary to transform the current state into\r\n     * the new one. As a result, this method generates all the necessary state\r\n     * updates to convert the state into the new state.\r\n     *\r\n     * @param {object} currentStateData\r\n     * @param {object} newStateData\r\n     * @return {array} Array of state updates.\r\n     * @throws {Error} is the structure is not compatible\r\n     */\r\n    _generateStateUpdates(currentStateData, newStateData) {\r\n\r\n        const updates = [];\r\n\r\n        const ids = {};\r\n\r\n        // Step 1: Add all overrides newStateData.\r\n        for (const [key, newValue] of Object.entries(newStateData)) {\r\n            // Check is it is new.\r\n            if (Array.isArray(newValue)) {\r\n                ids[key] = {};\r\n                newValue.forEach(element => {\r\n                    if (element.id === undefined) {\r\n                        throw Error(`Array ${key} element without id attribute`);\r\n                    }\r\n                    updates.push({\r\n                        name: key,\r\n                        action: 'override',\r\n                        fields: element,\r\n                    });\r\n                    const index = String(element.id).valueOf();\r\n                    ids[key][index] = true;\r\n                });\r\n            } else {\r\n                updates.push({\r\n                    name: key,\r\n                    action: 'override',\r\n                    fields: newValue,\r\n                });\r\n            }\r\n        }\r\n        // Step 2: delete unnecesary data from currentStateData.\r\n        for (const [key, oldValue] of Object.entries(currentStateData)) {\r\n            let deleteField = false;\r\n            // Check if the attribute is still there.\r\n            if (newStateData[key] === undefined) {\r\n                deleteField = true;\r\n            }\r\n            if (Array.isArray(oldValue)) {\r\n                if (!deleteField && ids[key] === undefined) {\r\n                    throw Error(`Array ${key} cannot change to object.`);\r\n                }\r\n                oldValue.forEach(element => {\r\n                    const index = String(element.id).valueOf();\r\n                    let deleteEntry = deleteField;\r\n                    // Check if the id is there.\r\n                    if (!deleteEntry && ids[key][index] === undefined) {\r\n                        deleteEntry = true;\r\n                    }\r\n                    if (deleteEntry) {\r\n                        updates.push({\r\n                            name: key,\r\n                            action: 'delete',\r\n                            fields: element,\r\n                        });\r\n                    }\r\n                });\r\n            } else {\r\n                if (!deleteField && ids[key] !== undefined) {\r\n                    throw Error(`Object ${key} cannot change to array.`);\r\n                }\r\n                if (deleteField) {\r\n                    updates.push({\r\n                        name: key,\r\n                        action: 'delete',\r\n                        fields: oldValue,\r\n                    });\r\n                }\r\n            }\r\n        }\r\n        // Delete all elements without action.\r\n        return updates;\r\n    }\r\n\r\n    // Drag and drop methods.\r\n\r\n    /**\r\n     * Get the draggable data of this component.\r\n     *\r\n     * @returns {Object} exported course module drop data\r\n     */\r\n    getDraggableData() {\r\n        return this.draggable;\r\n    }\r\n\r\n    /**\r\n     * The element drop end hook.\r\n     *\r\n     * @param {Object} dropdata the dropdata\r\n     * @param {Event} event the dropdata\r\n     */\r\n    dragEnd(dropdata, event) {\r\n        this.element.style.top = `${event.newFixedTop}px`;\r\n        this.element.style.left = `${event.newFixedLeft}px`;\r\n    }\r\n\r\n    /**\r\n     * Pin and unpin the panel.\r\n     */\r\n    _togglePin() {\r\n        this.draggable = !this.draggable;\r\n        this.dragdrop.setDraggable(this.draggable);\r\n        if (this.draggable) {\r\n            this._unpin();\r\n        } else {\r\n            this._pin();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Unpin the panel form the footer.\r\n     */\r\n    _unpin() {\r\n        // Find the initial spot.\r\n        const pageCenterY = window.innerHeight / 2;\r\n        const pageCenterX = window.innerWidth / 2;\r\n        // Put the element in the middle of the screen\r\n        const style = {\r\n            position: 'fixed',\r\n            resize: 'both',\r\n            overflow: 'auto',\r\n            height: '400px',\r\n            width: '400px',\r\n            top: `${pageCenterY - 200}px`,\r\n            left: `${pageCenterX - 200}px`,\r\n        };\r\n        Object.assign(this.element.style, style);\r\n        // Small also the text areas.\r\n        this.getElement(this.selectors.STATE).style.height = '50px';\r\n        this.getElement(this.selectors.LOG).style.height = '50px';\r\n\r\n        this._toggleButtonText(this.getElement(this.selectors.PIN));\r\n    }\r\n\r\n    /**\r\n     * Pin the panel into the footer.\r\n     */\r\n    _pin() {\r\n        const props = [\r\n            'position',\r\n            'resize',\r\n            'overflow',\r\n            'top',\r\n            'left',\r\n            'height',\r\n            'width',\r\n        ];\r\n        props.forEach(\r\n            prop => this.element.style.removeProperty(prop)\r\n        );\r\n        this._toggleButtonText(this.getElement(this.selectors.PIN));\r\n    }\r\n\r\n    /**\r\n     * Toogle the button text with the data-alt value.\r\n     *\r\n     * @param {Element} element the button element\r\n     */\r\n    _toggleButtonText(element) {\r\n        [element.innerHTML, element.dataset.alt] = [element.dataset.alt, element.innerHTML];\r\n    }\r\n\r\n}\r\n"],"names":["target","selectors","element","document","getElementById","undefined","debug","GlobalDebugPanel","reactive","remove","DebugInstanceSubpanel","BaseComponent","create","name","LOADERS","SUBPANEL","NOINSTANCES","LOG","classes","HIDE","subPanels","Set","stateReady","state","_updateReactivesPanels","getElement","this","innerHTML","getWatchers","watch","handler","classList","toggle","reactives","size","forEach","instance","_createLoader","has","id","add","loaders","btn","createElement","dataset","appendChild","addEventListener","_openPanel","data","renderComponent","error","NAME","CLOSE","READMODE","HIGHLIGHT","STATE","CLEAN","PIN","SAVE","INVALID","controller","M","draggable","relativeDrag","strings","savewarning","dragdrop","DragDrop","highlight","_toggleButtonText","_toggleEditMode","_cleanAreas","_togglePin","disabled","_checkJSON","bind","_saveState","_this$getElement2","_refreshState","destroy","unregister","_refreshLog","_refreshReadOnly","list","lastChanges","value","logContent","join","scrollTop","scrollHeight","JSON","stringify","readonly","readOnly","alt","invalid","save","edited","currentStateData","stateData","style","color","newState","parse","result","_generateStateUpdates","message","updates","processUpdates","newStateData","ids","key","newValue","Object","entries","Array","isArray","Error","push","action","fields","index","String","valueOf","oldValue","deleteField","deleteEntry","getDraggableData","dragEnd","dropdata","event","top","newFixedTop","left","newFixedLeft","setDraggable","_unpin","_pin","pageCenterY","window","innerHeight","pageCenterX","innerWidth","position","resize","overflow","height","width","assign","prop","removeProperty"],"mappings":"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"}