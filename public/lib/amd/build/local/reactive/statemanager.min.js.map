{"version":3,"file":"statemanager.min.js","sources":["../../../src/local/reactive/statemanager.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * Reactive simple state manager.\r\n *\r\n * The state manager contains the state data, trigger update events and\r\n * can lock and unlock the state data.\r\n *\r\n * This file contains the three main elements of the state manager:\r\n * - State manager: the public class to alter the state, dispatch events and process update messages.\r\n * - Proxy handler: a private class to keep track of the state object changes.\r\n * - StateMap class: a private class extending Map class that triggers event when a state list is modifed.\r\n *\r\n * @module     core/local/reactive/statemanager\r\n * @class      StateManager\r\n * @copyright  2021 Ferran Recio <ferran@moodle.com>\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\n\r\nimport Logger from 'core/local/reactive/logger';\r\n\r\n/**\r\n * State manager class.\r\n *\r\n * This class handle the reactive state and ensure only valid mutations can modify the state.\r\n * It also provide methods to apply batch state update messages (see processUpdates function doc\r\n * for more details on update messages).\r\n *\r\n * Implementing a deep state manager is complex and will require many frontend resources. To keep\r\n * the state fast and simple, the state can ONLY store two kind of data:\r\n *  - Object with attributes\r\n *  - Sets of objects with id attributes.\r\n *\r\n * This is an example of a valid state:\r\n *\r\n * {\r\n *  course: {\r\n *      name: 'course name',\r\n *      shortname: 'courseshort',\r\n *      sectionlist: [21, 34]\r\n *  },\r\n *  sections: [\r\n *      {id: 21, name: 'Topic 1', visible: true},\r\n *      {id: 34, name: 'Topic 2', visible: false,\r\n *  ],\r\n * }\r\n *\r\n * The following cases are NOT allowed at a state ROOT level (throws an exception if they are assigned):\r\n *  - Simple values (strings, boolean...).\r\n *  - Arrays of simple values.\r\n *  - Array of objects without ID attribute (all arrays will be converted to maps and requires an ID).\r\n *\r\n * Thanks to those limitations it can simplify the state update messages and the event names. If You\r\n * need to store simple data, just group them in an object.\r\n *\r\n * To grant any state change triggers the proper events, the class uses two private structures:\r\n * - proxy handler: any object stored in the state is proxied using this class.\r\n * - StateMap class: any object set in the state will be converted to StateMap using the\r\n *   objects id attribute.\r\n */\r\nexport default class StateManager {\r\n\r\n    /**\r\n     * Create a basic reactive state store.\r\n     *\r\n     * The state manager is meant to work with native JS events. To ensure each reactive module can use\r\n     * it in its own way, the parent element must provide a valid event dispatcher function and an optional\r\n     * DOM element to anchor the event.\r\n     *\r\n     * @param {function} dispatchEvent the function to dispatch the custom event when the state changes.\r\n     * @param {element} target the state changed custom event target (document if none provided)\r\n     */\r\n    constructor(dispatchEvent, target) {\r\n\r\n        // The dispatch event function.\r\n        /** @package */\r\n        this.dispatchEvent = dispatchEvent;\r\n\r\n        // The DOM container to trigger events.\r\n        /** @package */\r\n        this.target = target ?? document;\r\n\r\n        // State can be altered freely until initial state is set.\r\n        /** @package */\r\n        this.readonly = false;\r\n\r\n        // List of state changes pending to be published as events.\r\n        /** @package */\r\n        this.eventsToPublish = [];\r\n\r\n        // The update state types functions.\r\n        /** @package */\r\n        this.updateTypes = {\r\n            \"create\": this.defaultCreate.bind(this),\r\n            \"update\": this.defaultUpdate.bind(this),\r\n            \"delete\": this.defaultDelete.bind(this),\r\n            \"put\": this.defaultPut.bind(this),\r\n            \"override\": this.defaultOverride.bind(this),\r\n            \"remove\": this.defaultRemove.bind(this),\r\n            \"prepareFields\": this.defaultPrepareFields.bind(this),\r\n        };\r\n\r\n        // The state_loaded event is special because it only happens one but all components\r\n        // may react to that state, even if they are registered after the setIinitialState.\r\n        // For these reason we use a promise for that event.\r\n        this.initialPromise = new Promise((resolve) => {\r\n            const initialStateDone = (event) => {\r\n                resolve(event.detail.state);\r\n            };\r\n            this.target.addEventListener('state:loaded', initialStateDone);\r\n        });\r\n\r\n        this.logger = new Logger();\r\n    }\r\n\r\n    /**\r\n     * Loads the initial state.\r\n     *\r\n     * Note this method will trigger a state changed event with \"state:loaded\" actionname.\r\n     *\r\n     * The state mode will be set to read only when the initial state is loaded.\r\n     *\r\n     * @param {object} initialState\r\n     */\r\n    setInitialState(initialState) {\r\n\r\n        if (this.state !== undefined) {\r\n            throw Error('Initial state can only be initialized ones');\r\n        }\r\n\r\n        // Create the state object.\r\n        const state = new Proxy({}, new Handler('state', this, true));\r\n        for (const [prop, propValue] of Object.entries(initialState)) {\r\n            state[prop] = propValue;\r\n        }\r\n        this.state = state;\r\n\r\n        // When the state is loaded we can lock it to prevent illegal changes.\r\n        this.readonly = true;\r\n\r\n        this.dispatchEvent({\r\n            action: 'state:loaded',\r\n            state: this.state,\r\n        }, this.target);\r\n    }\r\n\r\n    /**\r\n     * Generate a promise that will be resolved when the initial state is loaded.\r\n     *\r\n     * In most cases the final state will be loaded using an ajax call. This is the reason\r\n     * why states manager are created unlocked and won't be reactive until the initial state is set.\r\n     *\r\n     * @return {Promise} the resulting promise\r\n     */\r\n    getInitialPromise() {\r\n        return this.initialPromise;\r\n    }\r\n\r\n    /**\r\n     * Locks or unlocks the state to prevent illegal updates.\r\n     *\r\n     * Mutations use this method to modify the state. Once the state is updated, they must\r\n     * block again the state.\r\n     *\r\n     * All changes done while the state is writable will be registered using registerStateAction.\r\n     * When the state is set again to read only the method will trigger _publishEvents to communicate\r\n     * changes to all watchers.\r\n     *\r\n     * @param {bool} readonly if the state is in read only mode enabled\r\n     */\r\n    setReadOnly(readonly) {\r\n\r\n        this.readonly = readonly;\r\n\r\n        let mode = 'off';\r\n\r\n        // When the state is in readonly again is time to publish all pending events.\r\n        if (this.readonly) {\r\n            mode = 'on';\r\n            this._publishEvents();\r\n        }\r\n\r\n        // Dispatch a read only event.\r\n        this.dispatchEvent({\r\n            action: `readmode:${mode}`,\r\n            state: this.state,\r\n            element: null,\r\n        }, this.target);\r\n    }\r\n\r\n    /**\r\n     * Add methods to process update state messages.\r\n     *\r\n     * The state manager provide a default update, create and delete methods. However,\r\n     * some applications may require to override the default methods or even add new ones\r\n     * like \"refresh\" or \"error\".\r\n     *\r\n     * @param {Object} newFunctions the new update types functions.\r\n     */\r\n    addUpdateTypes(newFunctions) {\r\n        for (const [updateType, updateFunction] of Object.entries(newFunctions)) {\r\n            if (typeof updateFunction === 'function') {\r\n                this.updateTypes[updateType] = updateFunction.bind(newFunctions);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Process a state updates array and do all the necessary changes.\r\n     *\r\n     * Note this method unlocks the state while it is executing and relocks it\r\n     * when finishes.\r\n     *\r\n     * @param {array} updates\r\n     * @param {Object} updateTypes optional functions to override the default update types.\r\n     */\r\n    processUpdates(updates, updateTypes) {\r\n        if (!Array.isArray(updates)) {\r\n            throw Error('State updates must be an array');\r\n        }\r\n        this.setReadOnly(false);\r\n        updates.forEach((update) => {\r\n            if (update.name === undefined) {\r\n                throw Error('Missing state update name');\r\n            }\r\n            this.processUpdate(\r\n                update.name,\r\n                update.action,\r\n                update.fields,\r\n                updateTypes\r\n            );\r\n        });\r\n        this.setReadOnly(true);\r\n    }\r\n\r\n    /**\r\n     * Process a single state update.\r\n     *\r\n     * Note this method will not lock or unlock the state by itself.\r\n     *\r\n     * @param {string} updateName the state element to update\r\n     * @param {string} action to action to perform\r\n     * @param {object} fields the new data\r\n     * @param {Object} updateTypes optional functions to override the default update types.\r\n     */\r\n    processUpdate(updateName, action, fields, updateTypes) {\r\n\r\n        if (!fields) {\r\n            throw Error('Missing state update fields');\r\n        }\r\n\r\n        if (updateTypes === undefined) {\r\n            updateTypes = {};\r\n        }\r\n\r\n        action = action ?? 'update';\r\n\r\n        const method = updateTypes[action] ?? this.updateTypes[action];\r\n\r\n        if (method === undefined) {\r\n            throw Error(`Unkown update action ${action}`);\r\n        }\r\n\r\n        // Some state data may require some cooking before sending to the\r\n        // state. Reactive instances can overrdide the default fieldDefaults\r\n        // method to add extra logic to all updates.\r\n        const prepareFields = updateTypes.prepareFields ?? this.updateTypes.prepareFields;\r\n\r\n        method(this, updateName, prepareFields(this, updateName, fields));\r\n    }\r\n\r\n    /**\r\n     * Prepare fields for processing.\r\n     *\r\n     * This method is used to add default values or calculations from the frontend side.\r\n     *\r\n     * @param {Object} stateManager the state manager\r\n     * @param {String} updateName the state element to update\r\n     * @param {Object} fields the new data\r\n     * @returns {Object} final fields data\r\n     */\r\n    defaultPrepareFields(stateManager, updateName, fields) {\r\n        return fields;\r\n    }\r\n\r\n\r\n    /**\r\n     * Process a create state message.\r\n     *\r\n     * @param {Object} stateManager the state manager\r\n     * @param {String} updateName the state element to update\r\n     * @param {Object} fields the new data\r\n     */\r\n    defaultCreate(stateManager, updateName, fields) {\r\n\r\n        let state = stateManager.state;\r\n\r\n        // Create can be applied only to lists, not to objects.\r\n        if (state[updateName] instanceof StateMap) {\r\n            state[updateName].add(fields);\r\n            return;\r\n        }\r\n        state[updateName] = fields;\r\n    }\r\n\r\n    /**\r\n     * Process a delete state message.\r\n     *\r\n     * @param {Object} stateManager the state manager\r\n     * @param {String} updateName the state element to update\r\n     * @param {Object} fields the new data\r\n     */\r\n    defaultDelete(stateManager, updateName, fields) {\r\n\r\n        // Get the current value.\r\n        let current = stateManager.get(updateName, fields.id);\r\n        if (!current) {\r\n            throw Error(`Inexistent ${updateName} ${fields.id}`);\r\n        }\r\n\r\n        // Process deletion.\r\n        let state = stateManager.state;\r\n\r\n        if (state[updateName] instanceof StateMap) {\r\n            state[updateName].delete(fields.id);\r\n            return;\r\n        }\r\n        delete state[updateName];\r\n    }\r\n\r\n    /**\r\n     * Process a remove state message.\r\n     *\r\n     * @param {Object} stateManager the state manager\r\n     * @param {String} updateName the state element to update\r\n     * @param {Object} fields the new data\r\n     */\r\n    defaultRemove(stateManager, updateName, fields) {\r\n\r\n        // Get the current value.\r\n        let current = stateManager.get(updateName, fields.id);\r\n        if (!current) {\r\n            return;\r\n        }\r\n\r\n        // Process deletion.\r\n        let state = stateManager.state;\r\n\r\n        if (state[updateName] instanceof StateMap) {\r\n            state[updateName].delete(fields.id);\r\n            return;\r\n        }\r\n        delete state[updateName];\r\n    }\r\n\r\n    /**\r\n     * Process a update state message.\r\n     *\r\n     * @param {Object} stateManager the state manager\r\n     * @param {String} updateName the state element to update\r\n     * @param {Object} fields the new data\r\n     */\r\n    defaultUpdate(stateManager, updateName, fields) {\r\n\r\n        // Get the current value.\r\n        let current = stateManager.get(updateName, fields.id);\r\n        if (!current) {\r\n            throw Error(`Inexistent ${updateName} ${fields.id}`);\r\n        }\r\n\r\n        // Execute updates.\r\n        for (const [fieldName, fieldValue] of Object.entries(fields)) {\r\n            current[fieldName] = fieldValue;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Process a put state message.\r\n     *\r\n     * @param {Object} stateManager the state manager\r\n     * @param {String} updateName the state element to update\r\n     * @param {Object} fields the new data\r\n     */\r\n    defaultPut(stateManager, updateName, fields) {\r\n\r\n        // Get the current value.\r\n        let current = stateManager.get(updateName, fields.id);\r\n        if (current) {\r\n            // Update attributes.\r\n            for (const [fieldName, fieldValue] of Object.entries(fields)) {\r\n                current[fieldName] = fieldValue;\r\n            }\r\n        } else {\r\n            // Create new object.\r\n            let state = stateManager.state;\r\n            if (state[updateName] instanceof StateMap) {\r\n                state[updateName].add(fields);\r\n                return;\r\n            }\r\n            state[updateName] = fields;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Process an override state message.\r\n     *\r\n     * @param {Object} stateManager the state manager\r\n     * @param {String} updateName the state element to update\r\n     * @param {Object} fields the new data\r\n     */\r\n    defaultOverride(stateManager, updateName, fields) {\r\n\r\n        // Get the current value.\r\n        let current = stateManager.get(updateName, fields.id);\r\n        if (current) {\r\n            // Remove any unnecessary fields.\r\n            for (const [fieldName] of Object.entries(current)) {\r\n                if (fields[fieldName] === undefined) {\r\n                    delete current[fieldName];\r\n                }\r\n            }\r\n            // Update field.\r\n            for (const [fieldName, fieldValue] of Object.entries(fields)) {\r\n                current[fieldName] = fieldValue;\r\n            }\r\n        } else {\r\n            // Create the element if not exists.\r\n            let state = stateManager.state;\r\n            if (state[updateName] instanceof StateMap) {\r\n                state[updateName].add(fields);\r\n                return;\r\n            }\r\n            state[updateName] = fields;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Set the logger class instance.\r\n     *\r\n     * Reactive instances can provide alternative loggers to provide advanced logging.\r\n     * @param {Logger} logger\r\n     */\r\n    setLogger(logger) {\r\n        this.logger = logger;\r\n    }\r\n\r\n    /**\r\n     * Add a new log entry into the reactive logger.\r\n     * @param {LoggerEntry} entry\r\n     */\r\n    addLoggerEntry(entry) {\r\n        this.logger.add(entry);\r\n    }\r\n\r\n    /**\r\n     * Get an element from the state or form an alternative state object.\r\n     *\r\n     * The altstate param is used by external update functions that gets the current\r\n     * state as param.\r\n     *\r\n     * @param {String} name the state object name\r\n     * @param {*} id and object id for state maps.\r\n     * @return {Object|undefined} the state object found\r\n     */\r\n    get(name, id) {\r\n        const state = this.state;\r\n\r\n        let current = state[name];\r\n        if (current instanceof StateMap) {\r\n            if (id === undefined) {\r\n                throw Error(`Missing id for ${name} state update`);\r\n            }\r\n            current = state[name].get(id);\r\n        }\r\n\r\n        return current;\r\n    }\r\n\r\n    /**\r\n     * Get all element ids from the given state.\r\n     *\r\n     * @param {String} name the state object name\r\n     * @return {Array} the element ids.\r\n     */\r\n    getIds(name) {\r\n        const state = this.state;\r\n        const current = state[name];\r\n        if (!(current instanceof StateMap)) {\r\n            throw Error(`${name} is not an instance of StateMap`);\r\n        }\r\n        return [...state[name].keys()];\r\n    }\r\n\r\n    /**\r\n     * Register a state modification and generate the necessary events.\r\n     *\r\n     * This method is used mainly by proxy helpers to dispatch state change event.\r\n     * However, mutations can use it to inform components about non reactive changes\r\n     * in the state (only the two first levels of the state are reactive).\r\n     *\r\n     * Each action can produce several events:\r\n     * - The specific attribute updated, created or deleter (example: \"cm.visible:updated\")\r\n     * - The general state object updated, created or deleted (example: \"cm:updated\")\r\n     * - If the element has an ID attribute, the specific event with id (example: \"cm[42].visible:updated\")\r\n     * - If the element has an ID attribute, the general event with id (example: \"cm[42]:updated\")\r\n     * - A generic state update event \"state:update\"\r\n     *\r\n     * @param {string} field the affected state field name\r\n     * @param {string|null} prop the affecter field property (null if affect the full object)\r\n     * @param {string} action the action done (created/updated/deleted)\r\n     * @param {*} data the affected data\r\n     */\r\n    registerStateAction(field, prop, action, data) {\r\n\r\n        let parentAction = 'updated';\r\n\r\n        if (prop !== null) {\r\n            this.eventsToPublish.push({\r\n                eventName: `${field}.${prop}:${action}`,\r\n                eventData: data,\r\n                action,\r\n            });\r\n        } else {\r\n            parentAction = action;\r\n        }\r\n\r\n        // Trigger extra events if the element has an ID attribute.\r\n        if (data.id !== undefined) {\r\n            if (prop !== null) {\r\n                this.eventsToPublish.push({\r\n                    eventName: `${field}[${data.id}].${prop}:${action}`,\r\n                    eventData: data,\r\n                    action,\r\n                });\r\n            }\r\n            this.eventsToPublish.push({\r\n                eventName: `${field}[${data.id}]:${parentAction}`,\r\n                eventData: data,\r\n                action: parentAction,\r\n            });\r\n        }\r\n\r\n        // Register the general change.\r\n        this.eventsToPublish.push({\r\n            eventName: `${field}:${parentAction}`,\r\n            eventData: data,\r\n            action: parentAction,\r\n        });\r\n\r\n        // Register state updated event.\r\n        this.eventsToPublish.push({\r\n            eventName: `state:updated`,\r\n            eventData: data,\r\n            action: 'updated',\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Internal method to publish events.\r\n     *\r\n     * This is a private method, it will be invoked when the state is set back to read only mode.\r\n     */\r\n    _publishEvents() {\r\n        const fieldChanges = this.eventsToPublish;\r\n        this.eventsToPublish = [];\r\n\r\n        // Dispatch a transaction start event.\r\n        this.dispatchEvent({\r\n            action: 'transaction:start',\r\n            state: this.state,\r\n            element: null,\r\n            changes: fieldChanges,\r\n        }, this.target);\r\n\r\n        // State changes can be registered in any order. However it will avoid many\r\n        // components errors if they are sorted to have creations-updates-deletes in case\r\n        // some component needs to create or destroy DOM elements before updating them.\r\n        fieldChanges.sort((a, b) => {\r\n            const weights = {\r\n                created: 0,\r\n                updated: 1,\r\n                deleted: 2,\r\n            };\r\n            const aweight = weights[a.action] ?? 0;\r\n            const bweight = weights[b.action] ?? 0;\r\n            // In case both have the same weight, the eventName length decide.\r\n            if (aweight === bweight) {\r\n                return a.eventName.length - b.eventName.length;\r\n            }\r\n            return aweight - bweight;\r\n        });\r\n\r\n        // List of the published events to prevent redundancies.\r\n        let publishedEvents = new Set();\r\n        let transactionEvents = [];\r\n\r\n        fieldChanges.forEach((event) => {\r\n\r\n            const eventkey = `${event.eventName}.${event.eventData.id ?? 0}`;\r\n\r\n            if (!publishedEvents.has(eventkey)) {\r\n                this.dispatchEvent({\r\n                    action: event.eventName,\r\n                    state: this.state,\r\n                    element: event.eventData\r\n                }, this.target);\r\n\r\n                publishedEvents.add(eventkey);\r\n                transactionEvents.push(event);\r\n            }\r\n        });\r\n\r\n        // Dispatch a transaction end event.\r\n        this.dispatchEvent({\r\n            action: 'transaction:end',\r\n            state: this.state,\r\n            element: null,\r\n            changes: transactionEvents,\r\n        }, this.target);\r\n    }\r\n}\r\n\r\n// Proxy helpers.\r\n\r\n/**\r\n * The proxy handler.\r\n *\r\n * This class will inform any value change directly to the state manager.\r\n *\r\n * The proxied variable will throw an error if it is altered when the state manager is\r\n * in read only mode.\r\n */\r\nclass Handler {\r\n\r\n    /**\r\n     * Class constructor.\r\n     *\r\n     * @param {string} name the variable name used for identify triggered actions\r\n     * @param {StateManager} stateManager the state manager object\r\n     * @param {boolean} proxyValues if new values must be proxied (used only at state root level)\r\n     */\r\n    constructor(name, stateManager, proxyValues) {\r\n        this.name = name;\r\n        this.stateManager = stateManager;\r\n        this.proxyValues = proxyValues ?? false;\r\n    }\r\n\r\n    /**\r\n     * Set trap to trigger events when the state changes.\r\n     *\r\n     * @param {object} obj the source object (not proxied)\r\n     * @param {string} prop the attribute to set\r\n     * @param {*} value the value to save\r\n     * @param {*} receiver the proxied element to be attached to events\r\n     * @returns {boolean} if the value is set\r\n     */\r\n    set(obj, prop, value, receiver) {\r\n\r\n        // Only mutations should be able to set state values.\r\n        if (this.stateManager.readonly) {\r\n            throw new Error(`State locked. Use mutations to change ${prop} value in ${this.name}.`);\r\n        }\r\n\r\n        // Check any data change.\r\n        if (JSON.stringify(obj[prop]) === JSON.stringify(value)) {\r\n            return true;\r\n        }\r\n\r\n        const action = (obj[prop] !== undefined) ? 'updated' : 'created';\r\n\r\n        // Proxy value if necessary (used at state root level).\r\n        if (this.proxyValues) {\r\n            if (Array.isArray(value)) {\r\n                obj[prop] = new StateMap(prop, this.stateManager).loadValues(value);\r\n            } else {\r\n                obj[prop] = new Proxy(value, new Handler(prop, this.stateManager));\r\n            }\r\n        } else {\r\n            obj[prop] = value;\r\n        }\r\n\r\n        // If the state is not ready yet means the initial state is not yet loaded.\r\n        if (this.stateManager.state === undefined) {\r\n            return true;\r\n        }\r\n\r\n        this.stateManager.registerStateAction(this.name, prop, action, receiver);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Delete property trap to trigger state change events.\r\n     *\r\n     * @param {*} obj the affected object (not proxied)\r\n     * @param {*} prop the prop to delete\r\n     * @returns {boolean} if prop is deleted\r\n     */\r\n    deleteProperty(obj, prop) {\r\n        // Only mutations should be able to set state values.\r\n        if (this.stateManager.readonly) {\r\n            throw new Error(`State locked. Use mutations to delete ${prop} in ${this.name}.`);\r\n        }\r\n        if (prop in obj) {\r\n\r\n            delete obj[prop];\r\n\r\n            this.stateManager.registerStateAction(this.name, prop, 'deleted', obj);\r\n        }\r\n        return true;\r\n    }\r\n}\r\n\r\n/**\r\n * Class to add events dispatching to the JS Map class.\r\n *\r\n * When the state has a list of objects (with IDs) it will be converted into a StateMap.\r\n * StateMap is used almost in the same way as a regular JS map. Because all elements have an\r\n * id attribute, it has some specific methods:\r\n *  - add: a convenient method to add an element without specifying the key (\"id\" attribute will be used as a key).\r\n *  - loadValues: to add many elements at once wihout specifying keys (\"id\" attribute will be used).\r\n *\r\n * Apart, the main difference between regular Map and MapState is that this one will inform any change to the\r\n * state manager.\r\n */\r\nclass StateMap extends Map {\r\n\r\n    /**\r\n     * Create a reactive Map.\r\n     *\r\n     * @param {string} name the property name\r\n     * @param {StateManager} stateManager the state manager\r\n     * @param {iterable} iterable an iterable object to create the Map\r\n     */\r\n    constructor(name, stateManager, iterable) {\r\n        // We don't have any \"this\" until be call super.\r\n        super(iterable);\r\n        this.name = name;\r\n        this.stateManager = stateManager;\r\n    }\r\n\r\n    /**\r\n     * Set an element into the map.\r\n     *\r\n     * Each value needs it's own id attribute. Objects without id will be rejected.\r\n     * The function will throw an error if the value id and the key are not the same.\r\n     *\r\n     * @param {*} key the key to store\r\n     * @param {*} value the value to store\r\n     * @returns {Map} the resulting Map object\r\n     */\r\n    set(key, value) {\r\n\r\n        // Only mutations should be able to set state values.\r\n        if (this.stateManager.readonly) {\r\n            throw new Error(`State locked. Use mutations to change ${key} value in ${this.name}.`);\r\n        }\r\n\r\n        // Normalize keys as string to prevent json decoding errors.\r\n        key = this.normalizeKey(key);\r\n\r\n        this.checkValue(value);\r\n\r\n        if (key === undefined || key === null) {\r\n            throw Error('State lists keys cannot be null or undefined');\r\n        }\r\n\r\n        // ID is mandatory and should be the same as the key.\r\n        if (this.normalizeKey(value.id) !== key) {\r\n            throw new Error(`State error: ${this.name} list element ID (${value.id}) and key (${key}) mismatch`);\r\n        }\r\n\r\n        const action = (super.has(key)) ? 'updated' : 'created';\r\n\r\n        // Save proxied data into the list.\r\n        const result = super.set(key, new Proxy(value, new Handler(this.name, this.stateManager)));\r\n\r\n        // If the state is not ready yet means the initial state is not yet loaded.\r\n        if (this.stateManager.state === undefined) {\r\n            return result;\r\n        }\r\n\r\n        this.stateManager.registerStateAction(this.name, null, action, super.get(key));\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Check if a value is valid to be stored in a a State List.\r\n     *\r\n     * Only objects with id attribute can be stored in State lists.\r\n     *\r\n     * This method throws an error if the value is not valid.\r\n     *\r\n     * @param {object} value (with ID)\r\n     */\r\n    checkValue(value) {\r\n        if (!typeof value === 'object' && value !== null) {\r\n            throw Error('State lists can contain objects only');\r\n        }\r\n\r\n        if (value.id === undefined) {\r\n            throw Error('State lists elements must contain at least an id attribute');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Return a normalized key value for state map.\r\n     *\r\n     * Regular maps uses strict key comparissons but state maps are indexed by ID.JSON conversions\r\n     * and webservices sometimes do unexpected types conversions so we convert any integer key to string.\r\n     *\r\n     * @param {*} key the provided key\r\n     * @returns {string}\r\n     */\r\n    normalizeKey(key) {\r\n        return String(key).valueOf();\r\n    }\r\n\r\n    /**\r\n     * Insert a new element int a list.\r\n     *\r\n     * Each value needs it's own id attribute. Objects withouts id will be rejected.\r\n     *\r\n     * @param {object} value the value to add (needs an id attribute)\r\n     * @returns {Map} the resulting Map object\r\n     */\r\n    add(value) {\r\n        this.checkValue(value);\r\n        return this.set(value.id, value);\r\n    }\r\n\r\n    /**\r\n     * Return a state map element.\r\n     *\r\n     * @param {*} key the element id\r\n     * @return {Object}\r\n     */\r\n    get(key) {\r\n        return super.get(this.normalizeKey(key));\r\n    }\r\n\r\n    /**\r\n     * Check whether an element with the specified key exists or not.\r\n     *\r\n     * @param {*} key the key to find\r\n     * @return {boolean}\r\n     */\r\n    has(key) {\r\n        return super.has(this.normalizeKey(key));\r\n    }\r\n\r\n    /**\r\n     * Delete an element from the map.\r\n     *\r\n     * @param {*} key\r\n     * @returns {boolean}\r\n     */\r\n    delete(key) {\r\n        // State maps uses only string keys to avoid strict comparisons.\r\n        key = this.normalizeKey(key);\r\n\r\n        // Only mutations should be able to set state values.\r\n        if (this.stateManager.readonly) {\r\n            throw new Error(`State locked. Use mutations to change ${key} value in ${this.name}.`);\r\n        }\r\n\r\n        const previous = super.get(key);\r\n\r\n        const result = super.delete(key);\r\n        if (!result) {\r\n            return result;\r\n        }\r\n\r\n        this.stateManager.registerStateAction(this.name, null, 'deleted', previous);\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Return a suitable structure for JSON conversion.\r\n     *\r\n     * This function is needed because new values are compared in JSON. StateMap has Private\r\n     * attributes which cannot be stringified (like this.stateManager which will produce an\r\n     * infinite recursivity).\r\n     *\r\n     * @returns {array}\r\n     */\r\n    toJSON() {\r\n        let result = [];\r\n        this.forEach((value) => {\r\n            result.push(value);\r\n        });\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Insert a full list of values using the id attributes as keys.\r\n     *\r\n     * This method is used mainly to initialize the list. Note each element is indexed by its \"id\" attribute.\r\n     * This is a basic restriction of StateMap. All elements need an id attribute, otherwise it won't be saved.\r\n     *\r\n     * @param {iterable} values the values to load\r\n     * @returns {StateMap} return the this value\r\n     */\r\n    loadValues(values) {\r\n        values.forEach((data) => {\r\n            this.checkValue(data);\r\n            let key = data.id;\r\n            let newvalue = new Proxy(data, new Handler(this.name, this.stateManager));\r\n            this.set(key, newvalue);\r\n        });\r\n        return this;\r\n    }\r\n}\r\n"],"names":["constructor","dispatchEvent","target","document","readonly","eventsToPublish","updateTypes","this","defaultCreate","bind","defaultUpdate","defaultDelete","defaultPut","defaultOverride","defaultRemove","defaultPrepareFields","initialPromise","Promise","resolve","addEventListener","event","detail","state","logger","Logger","setInitialState","initialState","undefined","Error","Proxy","Handler","prop","propValue","Object","entries","action","getInitialPromise","setReadOnly","mode","_publishEvents","element","addUpdateTypes","newFunctions","updateType","updateFunction","processUpdates","updates","Array","isArray","forEach","update","name","processUpdate","fields","updateName","method","prepareFields","stateManager","StateMap","add","get","id","delete","current","fieldName","fieldValue","setLogger","addLoggerEntry","entry","getIds","keys","registerStateAction","field","data","parentAction","push","eventName","eventData","fieldChanges","changes","sort","a","b","weights","created","updated","deleted","aweight","bweight","length","publishedEvents","Set","transactionEvents","eventkey","has","proxyValues","set","obj","value","receiver","JSON","stringify","loadValues","deleteProperty","Map","iterable","key","normalizeKey","checkValue","super","result","String","valueOf","previous","toJSON","values","newvalue"],"mappings":"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"}