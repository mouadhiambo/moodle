{"version":3,"file":"processqueue.min.js","sources":["../../../src/local/process_monitor/processqueue.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\nimport {debounce} from 'core/utils';\r\nimport {LoadingProcess} from 'core/local/process_monitor/loadingprocess';\r\nimport log from 'core/log';\r\n\r\nconst TOASTSTIMER = 3000;\r\n\r\n/**\r\n * A process queue manager.\r\n *\r\n * Adding process to the queue will guarante process are executed in sequence.\r\n *\r\n * @module     core/local/process_monitor/processqueue\r\n * @class      ProcessQueue\r\n * @copyright  2022 Ferran Recio <ferran@moodle.com>\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\nexport class ProcessQueue {\r\n    /** @var {Array} pending the pending queue. */\r\n    pending = [];\r\n\r\n    /** @var {LoadingProcess} current the current uploading process. */\r\n    currentProcess = null;\r\n\r\n    /**\r\n     * Class constructor.\r\n     * @param {ProcessMonitorManager} manager the monitor manager\r\n     */\r\n    constructor(manager) {\r\n        this.manager = manager;\r\n        this.cleanFinishedProcesses = debounce(\r\n            () => manager.dispatch('cleanFinishedProcesses'),\r\n            TOASTSTIMER\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Adds a new pending upload to the queue.\r\n     * @param {String} processName the process name\r\n     * @param {Function} processor the execution function\r\n     */\r\n    addPending(processName, processor) {\r\n        const process = new LoadingProcess(this.manager, {name: processName});\r\n        process.setExtraData({\r\n            processor,\r\n        });\r\n        process.onFinish((uploadedFile) => {\r\n            if (this.currentProcess?.id !== uploadedFile.id) {\r\n                return;\r\n            }\r\n            this._discardCurrent();\r\n        });\r\n        this.pending.push(process);\r\n        this._continueProcessing();\r\n    }\r\n\r\n    /**\r\n     * Adds a new pending upload to the queue.\r\n     * @param {String} processName the file info\r\n     * @param {String} errorMessage the file processor\r\n     */\r\n    addError(processName, errorMessage) {\r\n        const process = new LoadingProcess(this.manager, {name: processName});\r\n        process.setError(errorMessage);\r\n    }\r\n\r\n    /**\r\n     * Discard the current process and execute the next one if any.\r\n     */\r\n    _discardCurrent() {\r\n        if (this.currentProcess) {\r\n            this.currentProcess = null;\r\n        }\r\n        this.cleanFinishedProcesses();\r\n        this._continueProcessing();\r\n    }\r\n\r\n    /**\r\n     * Return the current file uploader.\r\n     * @return {FileUploader}\r\n     */\r\n    _currentProcessor() {\r\n        return this.currentProcess.data.processor;\r\n    }\r\n\r\n    /**\r\n     * Continue the queue processing if no current process is defined.\r\n     */\r\n    async _continueProcessing() {\r\n        if (this.currentProcess !== null || this.pending.length === 0) {\r\n            return;\r\n        }\r\n        this.currentProcess = this.pending.shift();\r\n        try {\r\n            const processor = this._currentProcessor();\r\n            await processor(this.currentProcess);\r\n        } catch (error) {\r\n            this.currentProcess.setError(error.message);\r\n            log.error(error);\r\n        }\r\n    }\r\n}\r\n"],"names":["constructor","manager","cleanFinishedProcesses","dispatch","addPending","processName","processor","process","LoadingProcess","this","name","setExtraData","onFinish","uploadedFile","currentProcess","id","_discardCurrent","pending","push","_continueProcessing","addError","errorMessage","setError","_currentProcessor","data","length","shift","error","message"],"mappings":";;;;;;;;;;;MA0CIA,YAAYC,wCATF,0CAGO,WAORA,QAAUA,aACVC,wBAAyB,oBAC1B,IAAMD,QAAQE,SAAS,2BA1Bf,KAoChBC,WAAWC,YAAaC,iBACdC,QAAU,IAAIC,+BAAeC,KAAKR,QAAS,CAACS,KAAML,cACxDE,QAAQI,aAAa,CACjBL,UAAAA,YAEJC,QAAQK,UAAUC,2EACLC,2EAAgBC,MAAOF,aAAaE,SAGxCC,0BAEJC,QAAQC,KAAKX,cACbY,sBAQTC,SAASf,YAAagB,cACF,IAAIb,+BAAeC,KAAKR,QAAS,CAACS,KAAML,cAChDiB,SAASD,cAMrBL,kBACQP,KAAKK,sBACAA,eAAiB,WAErBZ,8BACAiB,sBAOTI,2BACWd,KAAKK,eAAeU,KAAKlB,yCAOJ,OAAxBG,KAAKK,gBAAmD,IAAxBL,KAAKQ,QAAQQ,aAG5CX,eAAiBL,KAAKQ,QAAQS,kBAEzBpB,UAAYG,KAAKc,0BACjBjB,UAAUG,KAAKK,gBACvB,MAAOa,YACAb,eAAeQ,SAASK,MAAMC,sBAC/BD,MAAMA"}