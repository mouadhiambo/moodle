{"version":3,"file":"manager.min.js","sources":["../../../src/local/process_monitor/manager.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * The course file uploader.\r\n *\r\n * This module is used to upload files directly into the course.\r\n *\r\n * @module     core/local/process_monitor/manager\r\n * @copyright  2022 Ferran Recio <ferran@moodle.com>\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\n\r\nimport {Reactive} from 'core/reactive';\r\nimport {eventTypes, dispatchStateChangedEvent} from 'core/local/process_monitor/events';\r\n\r\nconst initialState = {\r\n    display: {\r\n        show: false,\r\n    },\r\n    queue: [],\r\n};\r\n\r\n/**\r\n * The reactive file uploader class.\r\n *\r\n * As all the upload queues are reactive, any plugin can implement its own upload monitor.\r\n *\r\n * @module     core/local/process_monitor/manager\r\n * @class      ProcessMonitorManager\r\n * @copyright  2021 Ferran Recio <ferran@moodle.com>\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\nclass ProcessMonitorManager extends Reactive {\r\n    /**\r\n     * The next process id to use.\r\n     *\r\n     * @attribute nextId\r\n     * @type number\r\n     * @default 1\r\n     * @package\r\n     */\r\n    nextId = 1;\r\n\r\n    /**\r\n     * Generate a unique process id.\r\n     * @return {number} a generated process Id\r\n     */\r\n    generateProcessId() {\r\n        return this.nextId++;\r\n    }\r\n}\r\n\r\n/**\r\n * @var {Object} mutations the monitor mutations.\r\n */\r\nconst mutations = {\r\n    /**\r\n     * Add a new process to the queue.\r\n     *\r\n     * @param {StateManager} stateManager the current state manager\r\n     * @param {Object} processData the upload id to finish\r\n     */\r\n    addProcess: function(stateManager, processData) {\r\n        const state = stateManager.state;\r\n        stateManager.setReadOnly(false);\r\n        state.queue.add({...processData});\r\n        state.display.show = true;\r\n        stateManager.setReadOnly(true);\r\n    },\r\n\r\n    /**\r\n     * Remove a process from the queue.\r\n     *\r\n     * @param {StateManager} stateManager the current state manager\r\n     * @param {Number} processId the process id\r\n     */\r\n    removeProcess: function(stateManager, processId) {\r\n        const state = stateManager.state;\r\n        stateManager.setReadOnly(false);\r\n        state.queue.delete(processId);\r\n        if (state.queue.size === 0) {\r\n            state.display.show = false;\r\n        }\r\n        stateManager.setReadOnly(true);\r\n    },\r\n\r\n    /**\r\n     * Update a process process to the queue.\r\n     *\r\n     * @param {StateManager} stateManager the current state manager\r\n     * @param {Object} processData the upload id to finish\r\n     * @param {Number} processData.id the process id\r\n     */\r\n    updateProcess: function(stateManager, processData) {\r\n        if (processData.id === undefined) {\r\n            throw Error(`Missing process ID in process data`);\r\n        }\r\n        const state = stateManager.state;\r\n        stateManager.setReadOnly(false);\r\n        const queueItem = state.queue.get(processData.id);\r\n        if (!queueItem) {\r\n            throw Error(`Unkown process with id ${processData.id}`);\r\n        }\r\n        for (const [prop, propValue] of Object.entries(processData)) {\r\n            queueItem[prop] = propValue;\r\n        }\r\n        stateManager.setReadOnly(true);\r\n    },\r\n\r\n    /**\r\n     * Set the monitor show attribute.\r\n     *\r\n     * @param {StateManager} stateManager the current state manager\r\n     * @param {Boolean} show the show value\r\n     */\r\n    setShow: function(stateManager, show) {\r\n        const state = stateManager.state;\r\n        stateManager.setReadOnly(false);\r\n        state.display.show = show;\r\n        if (!show) {\r\n            this.cleanFinishedProcesses(stateManager);\r\n        }\r\n        stateManager.setReadOnly(true);\r\n    },\r\n\r\n    /**\r\n     * Remove a processes from the queue.\r\n     *\r\n     * @param {StateManager} stateManager the current state manager\r\n     */\r\n    removeAllProcesses: function(stateManager) {\r\n        const state = stateManager.state;\r\n        stateManager.setReadOnly(false);\r\n        state.queue.forEach((element) => {\r\n            state.queue.delete(element.id);\r\n        });\r\n        state.display.show = false;\r\n        stateManager.setReadOnly(true);\r\n    },\r\n\r\n    /**\r\n     * Clean all finished processes.\r\n     *\r\n     * @param {StateManager} stateManager the current state manager\r\n     */\r\n    cleanFinishedProcesses: function(stateManager) {\r\n        const state = stateManager.state;\r\n        stateManager.setReadOnly(false);\r\n        state.queue.forEach((element) => {\r\n            if (element.finished && !element.error) {\r\n                state.queue.delete(element.id);\r\n            }\r\n        });\r\n        if (state.queue.size === 0) {\r\n            state.display.show = false;\r\n        }\r\n        stateManager.setReadOnly(true);\r\n    },\r\n};\r\n\r\nconst manager = new ProcessMonitorManager({\r\n    name: `ProcessMonitor`,\r\n    eventName: eventTypes.processMonitorStateChange,\r\n    eventDispatch: dispatchStateChangedEvent,\r\n    mutations: mutations,\r\n    state: initialState,\r\n});\r\n\r\nexport {manager};\r\n"],"names":["ProcessMonitorManager","Reactive","generateProcessId","this","nextId","mutations","addProcess","stateManager","processData","state","setReadOnly","queue","add","display","show","removeProcess","processId","delete","size","updateProcess","undefined","id","Error","queueItem","get","prop","propValue","Object","entries","setShow","cleanFinishedProcesses","removeAllProcesses","forEach","element","finished","error","manager","name","eventName","eventTypes","processMonitorStateChange","eventDispatch","dispatchStateChangedEvent"],"mappings":";;;;;;;;;;;MA6CMA,8BAA8BC,6EASvB,mIAMTC,2BACWC,KAAKC,gBAOdC,UAAY,CAOdC,WAAY,SAASC,aAAcC,mBACzBC,MAAQF,aAAaE,MAC3BF,aAAaG,aAAY,GACzBD,MAAME,MAAMC,IAAI,IAAIJ,cACpBC,MAAMI,QAAQC,MAAO,EACrBP,aAAaG,aAAY,IAS7BK,cAAe,SAASR,aAAcS,iBAC5BP,MAAQF,aAAaE,MAC3BF,aAAaG,aAAY,GACzBD,MAAME,MAAMM,OAAOD,WACM,IAArBP,MAAME,MAAMO,OACZT,MAAMI,QAAQC,MAAO,GAEzBP,aAAaG,aAAY,IAU7BS,cAAe,SAASZ,aAAcC,qBACXY,IAAnBZ,YAAYa,SACNC,kDAEJb,MAAQF,aAAaE,MAC3BF,aAAaG,aAAY,SACnBa,UAAYd,MAAME,MAAMa,IAAIhB,YAAYa,QACzCE,gBACKD,uCAAgCd,YAAYa,SAEjD,MAAOI,KAAMC,aAAcC,OAAOC,QAAQpB,aAC3Ce,UAAUE,MAAQC,UAEtBnB,aAAaG,aAAY,IAS7BmB,QAAS,SAAStB,aAAcO,YACtBL,MAAQF,aAAaE,MAC3BF,aAAaG,aAAY,GACzBD,MAAMI,QAAQC,KAAOA,KAChBA,WACIgB,uBAAuBvB,cAEhCA,aAAaG,aAAY,IAQ7BqB,mBAAoB,SAASxB,oBACnBE,MAAQF,aAAaE,MAC3BF,aAAaG,aAAY,GACzBD,MAAME,MAAMqB,SAASC,UACjBxB,MAAME,MAAMM,OAAOgB,QAAQZ,OAE/BZ,MAAMI,QAAQC,MAAO,EACrBP,aAAaG,aAAY,IAQ7BoB,uBAAwB,SAASvB,oBACvBE,MAAQF,aAAaE,MAC3BF,aAAaG,aAAY,GACzBD,MAAME,MAAMqB,SAASC,UACbA,QAAQC,WAAaD,QAAQE,OAC7B1B,MAAME,MAAMM,OAAOgB,QAAQZ,OAGV,IAArBZ,MAAME,MAAMO,OACZT,MAAMI,QAAQC,MAAO,GAEzBP,aAAaG,aAAY,KAI3B0B,QAAU,IAAIpC,sBAAsB,CACtCqC,sBACAC,UAAWC,mBAAWC,0BACtBC,cAAeC,kCACfrC,UAAWA,UACXI,MAtJiB,CACjBI,QAAS,CACLC,MAAM,GAEVH,MAAO"}