{"version":3,"file":"loadingprocess.min.js","sources":["../../../src/local/process_monitor/loadingprocess.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * The process wrapper class.\r\n *\r\n * This module is used to update a process in the process monitor.\r\n *\r\n * @module     core/local/process_monitor/loadingprocess\r\n * @class      LoadingProcess\r\n * @copyright  2022 Ferran Recio <ferran@moodle.com>\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\n\r\nimport log from 'core/log';\r\n\r\nexport class LoadingProcess {\r\n\r\n    /** @var {Map} editorUpdates the courses pending to be updated. */\r\n    processData = null;\r\n\r\n    /** @var {Object} extraData any extra process information to store. */\r\n    extraData = null;\r\n\r\n    /** @var {ProcessMonitorManager} manager the page monitor. */\r\n    manager = null;\r\n\r\n    /** @var {Function} finishedCallback the finished callback if any. */\r\n    finishedCallback = null;\r\n\r\n    /** @var {Function} removedCallback the removed callback if any. */\r\n    removedCallback = null;\r\n\r\n    /** @var {Function} errorCallback the error callback if any. */\r\n    errorCallback = null;\r\n\r\n    /**\r\n     * Class constructor\r\n     * @param {ProcessMonitorManager} manager the monitor manager\r\n     * @param {Object} definition the process definition data\r\n     */\r\n    constructor(manager, definition) {\r\n        this.manager = manager;\r\n        // Add defaults.\r\n        this.processData = {\r\n            id: manager.generateProcessId(),\r\n            name: '',\r\n            percentage: 0,\r\n            url: null,\r\n            error: null,\r\n            finished: false,\r\n            ...definition,\r\n        };\r\n        // Create a new entry.\r\n        this._dispatch('addProcess', this.processData);\r\n    }\r\n\r\n    /**\r\n     * Execute a monitor manager mutation when the state is ready.\r\n     *\r\n     * @private\r\n     * @param {String} action the mutation to dispatch\r\n     * @param {*} params the mutaiton params\r\n     */\r\n    _dispatch(action, params) {\r\n        this.manager.getInitialStatePromise().then(() => {\r\n            this.manager.dispatch(action, params);\r\n            return;\r\n        }).catch(() => {\r\n            log.error(`Cannot update process monitor.`);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Define a finished process callback function.\r\n     * @param {Function} callback the callback function\r\n     */\r\n    onFinish(callback) {\r\n        this.finishedCallback = callback;\r\n    }\r\n\r\n    /**\r\n     * Define a removed from monitor process callback function.\r\n     * @param {Function} callback the callback function\r\n     */\r\n    onRemove(callback) {\r\n        this.removedCallback = callback;\r\n    }\r\n\r\n    /**\r\n     * Define a error process callback function.\r\n     * @param {Function} callback the callback function\r\n     */\r\n    onError(callback) {\r\n        this.errorCallback = callback;\r\n    }\r\n\r\n    /**\r\n     * Set the process percentage.\r\n     * @param {Number} percentage\r\n     */\r\n    setPercentage(percentage) {\r\n        this.processData.percentage = percentage;\r\n        this._dispatch('updateProcess', this.processData);\r\n    }\r\n\r\n    /**\r\n     * Stores extra information to the process.\r\n     *\r\n     * This method is used to add information like the course, the user\r\n     * or any other needed information.\r\n     *\r\n     * @param {Object} extraData any extra process information to store\r\n     */\r\n    setExtraData(extraData) {\r\n        this.extraData = extraData;\r\n    }\r\n\r\n    /**\r\n     * Set the process error string.\r\n     *\r\n     * Note: set the error message will mark the process as finished.\r\n     *\r\n     * @param {String} error the string message\r\n     */\r\n    setError(error) {\r\n        this.processData.error = error;\r\n        if (this.errorCallback !== null) {\r\n            this.errorCallback(this);\r\n        }\r\n        this.processData.finished = true;\r\n        if (this.finishedCallback !== null) {\r\n            this.finishedCallback(this);\r\n        }\r\n        this._dispatch('updateProcess', this.processData);\r\n    }\r\n\r\n    /**\r\n     * Rename the process\r\n     * @param {String} name the new process name\r\n     */\r\n    setName(name) {\r\n        this.processData.name = name;\r\n        this._dispatch('updateProcess', this.processData);\r\n    }\r\n\r\n    /**\r\n     * Mark the process as finished.\r\n     */\r\n    finish() {\r\n        this.processData.finished = true;\r\n        if (this.finishedCallback !== null) {\r\n            this.finishedCallback(this);\r\n        }\r\n        this._dispatch('updateProcess', this.processData);\r\n    }\r\n\r\n    /**\r\n     * Remove the process from the monitor.\r\n     */\r\n    remove() {\r\n        if (this.removedCallback !== null) {\r\n            this.removedCallback(this);\r\n        }\r\n        this._dispatch('removeProcess', this.processData.id);\r\n    }\r\n\r\n    /**\r\n     * Returns the current rpocess data.\r\n     * @returns {Object} the process data\r\n     */\r\n    getData() {\r\n        return {...this.processData};\r\n    }\r\n\r\n    /**\r\n     * Return the process name\r\n     * @return {String}\r\n     */\r\n    get name() {\r\n        return this.processData.name;\r\n    }\r\n\r\n    /**\r\n     * Return the process internal id\r\n     * @return {Number}\r\n     */\r\n    get id() {\r\n        return this.processData.id;\r\n    }\r\n\r\n    /**\r\n     * Return the process extra data.\r\n     * @return {*} whatever is in extra data\r\n     */\r\n    get data() {\r\n        return this.extraData;\r\n    }\r\n}\r\n"],"names":["constructor","manager","definition","processData","id","generateProcessId","name","percentage","url","error","finished","_dispatch","this","action","params","getInitialStatePromise","then","dispatch","catch","onFinish","callback","finishedCallback","onRemove","removedCallback","onError","errorCallback","setPercentage","setExtraData","extraData","setError","setName","finish","remove","getData","data"],"mappings":"sbAqDIA,YAAYC,QAASC,+CAtBP,uCAGF,qCAGF,8CAGS,6CAGD,2CAGF,WAQPD,QAAUA,aAEVE,YAAc,CACfC,GAAIH,QAAQI,oBACZC,KAAM,GACNC,WAAY,EACZC,IAAK,KACLC,MAAO,KACPC,UAAU,KACPR,iBAGFS,UAAU,aAAcC,KAAKT,aAUtCQ,UAAUE,OAAQC,aACTb,QAAQc,yBAAyBC,MAAK,UAClCf,QAAQgB,SAASJ,OAAQC,WAE/BI,OAAM,kBACDT,2CAQZU,SAASC,eACAC,iBAAmBD,SAO5BE,SAASF,eACAG,gBAAkBH,SAO3BI,QAAQJ,eACCK,cAAgBL,SAOzBM,cAAcnB,iBACLJ,YAAYI,WAAaA,gBACzBI,UAAU,gBAAiBC,KAAKT,aAWzCwB,aAAaC,gBACJA,UAAYA,UAUrBC,SAASpB,YACAN,YAAYM,MAAQA,MACE,OAAvBG,KAAKa,oBACAA,cAAcb,WAElBT,YAAYO,UAAW,EACE,OAA1BE,KAAKS,uBACAA,iBAAiBT,WAErBD,UAAU,gBAAiBC,KAAKT,aAOzC2B,QAAQxB,WACCH,YAAYG,KAAOA,UACnBK,UAAU,gBAAiBC,KAAKT,aAMzC4B,cACS5B,YAAYO,UAAW,EACE,OAA1BE,KAAKS,uBACAA,iBAAiBT,WAErBD,UAAU,gBAAiBC,KAAKT,aAMzC6B,SACiC,OAAzBpB,KAAKW,sBACAA,gBAAgBX,WAEpBD,UAAU,gBAAiBC,KAAKT,YAAYC,IAOrD6B,gBACW,IAAIrB,KAAKT,aAOhBG,kBACOM,KAAKT,YAAYG,KAOxBF,gBACOQ,KAAKT,YAAYC,GAOxB8B,kBACOtB,KAAKgB"}