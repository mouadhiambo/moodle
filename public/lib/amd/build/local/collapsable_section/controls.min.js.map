{"version":3,"file":"controls.min.js","sources":["../../../src/local/collapsable_section/controls.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * The collapsable sections controls.\r\n *\r\n * @module     core/local/collapsable_section/controls\r\n * @copyright  2024 Ferran Recio <ferran@moodle.com>\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n *\r\n * @example <caption>Example of controlling a collapsable section.</caption>\r\n *\r\n * import CollapsableSection from 'core/local/collapsable_section/controls';\r\n *\r\n * const section = CollapsableSection.instanceFromSelector('#MyCollapsableSection');\r\n *\r\n * // Use hide, show and toggle methods to control the section.\r\n * section.hide();\r\n */\r\n\r\nimport {\r\n    eventTypes,\r\n    notifyCollapsableSectionHidden,\r\n    notifyCollapsableSectionShown\r\n} from 'core/local/collapsable_section/events';\r\nimport Collapse from 'theme_boost/bootstrap/collapse';\r\n\r\nlet initialized = false;\r\n\r\nexport default class {\r\n    /**\r\n     * Create a new instance from a query selector.\r\n     *\r\n     * @param {String} selector The selector of the collapsable section.\r\n     * @return {CollapsableSection} The collapsable section controls.\r\n     * @throws {Error} If no elements are found with the selector.\r\n     */\r\n    static instanceFromSelector(selector) {\r\n        const elements = document.querySelector(selector);\r\n        if (!elements) {\r\n            throw new Error('No elements found with the selector: ' + selector);\r\n        }\r\n        return new this(elements);\r\n    }\r\n\r\n    /**\r\n     * Initialize the collapsable section controls.\r\n     */\r\n    static init() {\r\n        if (initialized) {\r\n            return;\r\n        }\r\n        initialized = true;\r\n\r\n        // We want to add extra events to the standard bootstrap collapsable events.\r\n        document.addEventListener(eventTypes.hiddenBsCollapse, event => {\r\n            if (!this.isCollapsableComponent(event.target)) {\r\n                return;\r\n            }\r\n            notifyCollapsableSectionHidden(event.target);\r\n        });\r\n        document.addEventListener(eventTypes.shownBsCollapse, event => {\r\n            if (!this.isCollapsableComponent(event.target)) {\r\n                return;\r\n            }\r\n            notifyCollapsableSectionShown(event.target);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Check if the element is a collapsable section.\r\n     *\r\n     * @private\r\n     * @param {HTMLElement} element The element to check.\r\n     * @return {boolean} True if the element is a collapsable section.\r\n     */\r\n    static isCollapsableComponent(element) {\r\n        return element.hasAttribute('data-mdl-component')\r\n            && element.getAttribute('data-mdl-component') === 'core/local/collapsable_section';\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of the controls for a collapsable section.\r\n     *\r\n     * @param {HTMLElement} element - The DOM element that this control will manage.\r\n     */\r\n    constructor(element) {\r\n        this.element = element;\r\n    }\r\n\r\n    /**\r\n     * Hides the collapsible section element.\r\n     */\r\n    hide() {\r\n        Collapse.getOrCreateInstance(this.element).hide();\r\n    }\r\n\r\n    /**\r\n     * Shows the collapsible section element.\r\n     */\r\n    show() {\r\n        Collapse.getOrCreateInstance(this.element).show();\r\n    }\r\n\r\n    /**\r\n     * Toggle the collapsible section element.\r\n     */\r\n    toggle() {\r\n        Collapse.getOrCreateInstance(this.element).toggle();\r\n    }\r\n\r\n    /**\r\n     * Check if the collapsable section is visible.\r\n     *\r\n     * @return {boolean} True if the collapsable section is visible.\r\n     */\r\n    isVisible() {\r\n        return Collapse.getOrCreateInstance(this.element)._isShown();\r\n    }\r\n}\r\n"],"names":["initialized","selector","elements","document","querySelector","Error","this","addEventListener","eventTypes","hiddenBsCollapse","event","isCollapsableComponent","target","shownBsCollapse","element","hasAttribute","getAttribute","constructor","hide","getOrCreateInstance","show","toggle","isVisible","Collapse","_isShown"],"mappings":";;;;;;;;;;;;;;;;qJAuCIA,aAAc,4DAUcC,gBAClBC,SAAWC,SAASC,cAAcH,cACnCC,eACK,IAAIG,MAAM,wCAA0CJ,iBAEvD,IAAIK,KAAKJ,wBAOZF,cAGJA,aAAc,EAGdG,SAASI,iBAAiBC,mBAAWC,kBAAkBC,QAC9CJ,KAAKK,uBAAuBD,MAAME,oDAGRF,MAAME,WAEzCT,SAASI,iBAAiBC,mBAAWK,iBAAiBH,QAC7CJ,KAAKK,uBAAuBD,MAAME,mDAGTF,MAAME,0CAWdE,gBACnBA,QAAQC,aAAa,uBAC0B,mCAA/CD,QAAQE,aAAa,sBAQhCC,YAAYH,cACHA,QAAUA,QAMnBI,yBACaC,oBAAoBb,KAAKQ,SAASI,OAM/CE,yBACaD,oBAAoBb,KAAKQ,SAASM,OAM/CC,2BACaF,oBAAoBb,KAAKQ,SAASO,SAQ/CC,mBACWC,kBAASJ,oBAAoBb,KAAKQ,SAASU"}