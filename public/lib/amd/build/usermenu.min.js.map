{"version":3,"file":"usermenu.min.js","sources":["../src/usermenu.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * Initializes and handles events in the user menu.\r\n *\r\n * @module     core/usermenu\r\n * @copyright  2021 Moodle\r\n * @author     Mihail Geshoski <mihail@moodle.com>\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\n\r\nimport Carousel from 'theme_boost/bootstrap/carousel';\r\nimport {space, enter} from 'core/key_codes';\r\n\r\n/**\r\n * User menu constants.\r\n */\r\nconst selectors = {\r\n    userMenu: '.usermenu',\r\n    userMenuCarousel: '.usermenu #usermenu-carousel',\r\n    userMenuCarouselItem: '.usermenu #usermenu-carousel .carousel-item',\r\n    userMenuCarouselItemActive: '.usermenu #usermenu-carousel .carousel-item.active',\r\n    userMenuCarouselNavigationLink: '.usermenu #usermenu-carousel .carousel-navigation-link',\r\n};\r\n\r\n/**\r\n * Register event listeners.\r\n */\r\nconst registerEventListeners = () => {\r\n    const userMenu = document.querySelector(selectors.userMenu);\r\n    const userMenuCarousel = document.querySelector(selectors.userMenuCarousel);\r\n\r\n    // Handle the 'shown.bs.dropdown' event (Fired when the dropdown menu is fully displayed).\r\n    userMenu.addEventListener('shown.bs.dropdown', () => {\r\n        const activeCarouselItem = document.querySelector(selectors.userMenuCarouselItemActive);\r\n        // Set the focus on the active carousel item.\r\n        activeCarouselItem.focus();\r\n\r\n        userMenu.querySelectorAll(selectors.userMenuCarouselItem).forEach(element => {\r\n            // Resize all non-active carousel items to match the height and width of the current active (main)\r\n            // carousel item to avoid sizing inconsistencies. This has to be done once the dropdown menu is fully\r\n            // displayed ('shown.bs.dropdown') as the offsetWidth and offsetHeight cannot be obtained when the\r\n            // element is hidden.\r\n            if (!element.classList.contains('active')) {\r\n                element.style.width = activeCarouselItem.offsetWidth + 'px';\r\n                element.style.height = activeCarouselItem.offsetHeight + 'px';\r\n            }\r\n        });\r\n    });\r\n\r\n    // Handle click events in the user menu.\r\n    userMenu.addEventListener('click', (e) => {\r\n\r\n        // Handle click event on the carousel navigation (control) links in the user menu.\r\n        if (e.target.matches(selectors.userMenuCarouselNavigationLink)) {\r\n            carouselManagement(e);\r\n        }\r\n    });\r\n\r\n    userMenu.addEventListener('keydown', e => {\r\n        // Handle keydown event on the carousel navigation (control) links in the user menu.\r\n        if ((e.keyCode === space ||\r\n            e.keyCode === enter) &&\r\n            e.target.matches(selectors.userMenuCarouselNavigationLink)) {\r\n            e.preventDefault();\r\n            carouselManagement(e);\r\n        }\r\n    });\r\n\r\n    /**\r\n     * We do the same actions here even if the caller was a click or button press.\r\n     *\r\n     * @param {Event} e The triggering element and key presses etc.\r\n     */\r\n    const carouselManagement = e => {\r\n        // By default the user menu dropdown element closes on a click event. This behaviour is not desirable\r\n        // as we need to be able to navigate through the carousel items (submenus of the user menu) within the\r\n        // user menu. Therefore, we need to prevent the propagation of this event and then manually call the\r\n        // carousel transition.\r\n        e.stopPropagation();\r\n        // The id of the targeted carousel item.\r\n        const targetedCarouselItemId = e.target.dataset.carouselTargetId;\r\n        const targetedCarouselItem = userMenu.querySelector('#' + targetedCarouselItemId);\r\n        // Get the position (index) of the targeted carousel item within the parent container element.\r\n        const index = Array.from(targetedCarouselItem.parentNode.children).indexOf(targetedCarouselItem);\r\n        // Navigate to the targeted carousel item.\r\n        Carousel.getOrCreateInstance(userMenuCarousel).to(index);\r\n    };\r\n\r\n    // Handle the 'hide.bs.dropdown' event (Fired when the dropdown menu is being closed).\r\n    userMenu.addEventListener('hide.bs.dropdown', () => {\r\n        // Reset the state once the user menu dropdown is closed and return back to the first (main) carousel item\r\n        // if necessary.\r\n        Carousel.getOrCreateInstance(userMenuCarousel).to(0);\r\n    });\r\n\r\n    // Handle the 'slid.bs.carousel' event (Fired when the carousel has completed its slide transition).\r\n    userMenuCarousel?.addEventListener('slid.bs.carousel', () => {\r\n        const activeCarouselItem = userMenu.querySelector(selectors.userMenuCarouselItemActive);\r\n        // Set the focus on the newly activated carousel item.\r\n        activeCarouselItem.focus();\r\n    });\r\n};\r\n\r\n/**\r\n * Initialize the user menu.\r\n */\r\nconst init = () => {\r\n    registerEventListeners();\r\n};\r\n\r\nexport default {\r\n    init: init,\r\n};\r\n"],"names":["selectors","init","userMenu","document","querySelector","userMenuCarousel","addEventListener","activeCarouselItem","focus","querySelectorAll","forEach","element","classList","contains","style","width","offsetWidth","height","offsetHeight","e","target","matches","carouselManagement","keyCode","space","enter","preventDefault","stopPropagation","targetedCarouselItemId","dataset","carouselTargetId","targetedCarouselItem","index","Array","from","parentNode","children","indexOf","getOrCreateInstance","to","registerEventListeners"],"mappings":";;;;;;;;uJA8BMA,mBACQ,YADRA,2BAEgB,+BAFhBA,+BAGoB,8CAHpBA,qCAI0B,qDAJ1BA,yCAK8B,sEAyFrB,CACXC,KALS,KA/EkB,YACrBC,SAAWC,SAASC,cAAcJ,oBAClCK,iBAAmBF,SAASC,cAAcJ,4BAGhDE,SAASI,iBAAiB,qBAAqB,WACrCC,mBAAqBJ,SAASC,cAAcJ,sCAElDO,mBAAmBC,QAEnBN,SAASO,iBAAiBT,gCAAgCU,SAAQC,UAKzDA,QAAQC,UAAUC,SAAS,YAC5BF,QAAQG,MAAMC,MAAQR,mBAAmBS,YAAc,KACvDL,QAAQG,MAAMG,OAASV,mBAAmBW,aAAe,YAMrEhB,SAASI,iBAAiB,SAAUa,IAG5BA,EAAEC,OAAOC,QAAQrB,2CACjBsB,mBAAmBH,MAI3BjB,SAASI,iBAAiB,WAAWa,IAE5BA,EAAEI,UAAYC,kBACfL,EAAEI,UAAYE,mBACdN,EAAEC,OAAOC,QAAQrB,4CACjBmB,EAAEO,iBACFJ,mBAAmBH,aASrBG,mBAAqBH,IAKvBA,EAAEQ,wBAEIC,uBAAyBT,EAAEC,OAAOS,QAAQC,iBAC1CC,qBAAuB7B,SAASE,cAAc,IAAMwB,wBAEpDI,MAAQC,MAAMC,KAAKH,qBAAqBI,WAAWC,UAAUC,QAAQN,wCAElEO,oBAAoBjC,kBAAkBkC,GAAGP,QAItD9B,SAASI,iBAAiB,oBAAoB,uBAGjCgC,oBAAoBjC,kBAAkBkC,GAAG,MAItDlC,MAAAA,kBAAAA,iBAAkBC,iBAAiB,oBAAoB,KACxBJ,SAASE,cAAcJ,sCAE/BQ,YAQvBgC"}