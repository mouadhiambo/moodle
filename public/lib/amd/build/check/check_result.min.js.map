{"version":3,"file":"check_result.min.js","sources":["../../src/check/check_result.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * Check API result functions\r\n *\r\n * @module core/check\r\n * @author Matthew Hilton <matthewhilton@catalyst-au.net>\r\n * @copyright Catalyst IT, 2023\r\n * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\n\r\nimport {getCheckResult} from './repository';\r\nimport {getString} from 'core/str';\r\nimport * as Templates from 'core/templates';\r\n\r\n/**\r\n * Get the result of a check and replace a given DOM element with the result.\r\n *\r\n * @method getAndRender\r\n * @param {String} domSelector A CSS selector for a dom element to replace the the HTML for.\r\n * @param {String} adminTreeId Id of the admin_setting that called this webservice. Used to retrieve the check registered to it.\r\n * @param {String} settingName Name of setting (used to find the parent node in the admin tree)\r\n * @param {Boolean} includeDetails If true, details will be included in the check.\r\n * By default only the status and the summary is returned.\r\n */\r\nexport async function getAndRender(domSelector, adminTreeId, settingName, includeDetails) {\r\n    const element = document.querySelector(domSelector);\r\n\r\n    if (!element) {\r\n        window.console.error('Check selector not found');\r\n        return;\r\n    }\r\n\r\n    try {\r\n        const result = await getCheckResult(adminTreeId, settingName, includeDetails);\r\n        const decoded = new DOMParser().parseFromString(result.html, \"text/html\").documentElement.textContent;\r\n        element.innerHTML = decoded;\r\n    } catch (e) {\r\n        window.console.error(e);\r\n\r\n        // Render error as a red notification.\r\n        element.innerHTML = await Templates.render('core/notification', {\r\n            iserror: true,\r\n            closebutton: false,\r\n            announce: 0,\r\n            extraclasses: '',\r\n            message: await getString('checkerror', 'core', adminTreeId)\r\n        });\r\n    }\r\n}\r\n"],"names":["domSelector","adminTreeId","settingName","includeDetails","element","document","querySelector","window","console","error","result","decoded","DOMParser","parseFromString","html","documentElement","textContent","innerHTML","e","Templates","render","iserror","closebutton","announce","extraclasses","message"],"mappings":";;;;;;;;;eAsCmCA,YAAaC,YAAaC,YAAaC,sBAChEC,QAAUC,SAASC,cAAcN,iBAElCI,oBACDG,OAAOC,QAAQC,MAAM,sCAKfC,aAAe,8BAAeT,YAAaC,YAAaC,gBACxDQ,SAAU,IAAIC,WAAYC,gBAAgBH,OAAOI,KAAM,aAAaC,gBAAgBC,YAC1FZ,QAAQa,UAAYN,QACtB,MAAOO,GACLX,OAAOC,QAAQC,MAAMS,GAGrBd,QAAQa,gBAAkBE,UAAUC,OAAO,oBAAqB,CAC5DC,SAAS,EACTC,aAAa,EACbC,SAAU,EACVC,aAAc,GACdC,cAAe,kBAAU,aAAc,OAAQxB"}