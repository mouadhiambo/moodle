{"version":3,"file":"auto_rows.min.js","sources":["../src/auto_rows.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * Enhance a textarea with auto growing rows to fit the content.\r\n *\r\n * @module     core/auto_rows\r\n * @copyright  2016 Ryan Wyllie <ryan@moodle.com>\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n * @since      3.2\r\n */\r\ndefine(['jquery'], function($) {\r\n    var SELECTORS = {\r\n        ELEMENT: '[data-auto-rows]'\r\n    };\r\n\r\n    var EVENTS = {\r\n        ROW_CHANGE: 'autorows:rowchange',\r\n    };\r\n\r\n    /**\r\n     * Determine how many rows should be set for the given element.\r\n     *\r\n     * @method calculateRows\r\n     * @param {jQuery} element The textarea element\r\n     * @return {int} The number of rows for the element\r\n     * @private\r\n     */\r\n    var calculateRows = function(element) {\r\n        var currentRows = element.attr('rows');\r\n        var minRows = element.data('min-rows');\r\n        var maxRows = element.attr('data-max-rows');\r\n\r\n        var height = element.height();\r\n        var innerHeight = element.innerHeight();\r\n        var padding = innerHeight - height;\r\n\r\n        var scrollHeight = element[0].scrollHeight;\r\n        var rows = (scrollHeight - padding) / (height / currentRows);\r\n\r\n        // Remove the height styling to let the height be calculated automatically\r\n        // based on the row attribute.\r\n        element.css('height', '');\r\n\r\n        if (rows < minRows) {\r\n            return minRows;\r\n        } else if (maxRows && rows >= maxRows) {\r\n            return maxRows;\r\n        } else {\r\n            return rows;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Listener for change events to trigger resizing of the element.\r\n     *\r\n     * @method changeListener\r\n     * @param {Event} e The triggered event.\r\n     * @private\r\n     */\r\n    var changeListener = function(e) {\r\n        var element = $(e.target);\r\n        var minRows = element.data('min-rows');\r\n        var currentRows = element.attr('rows');\r\n\r\n        if (typeof minRows === \"undefined\") {\r\n            element.data('min-rows', currentRows);\r\n        }\r\n\r\n        // Reset element to single row so that the scroll height of the\r\n        // element is correctly calculated each time.\r\n        element.attr('rows', 1);\r\n        var rows = calculateRows(element);\r\n        element.attr('rows', rows);\r\n\r\n        if (rows != currentRows) {\r\n            element.trigger(EVENTS.ROW_CHANGE);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Add the event listeners for all text areas within the given element.\r\n     *\r\n     * @method init\r\n     * @param {jQuery|selector} root The container element of all enhanced text areas\r\n     * @public\r\n     */\r\n    var init = function(root) {\r\n        if ($(root).data('auto-rows')) {\r\n            $(root).on('input propertychange', changeListener.bind(this));\r\n        } else {\r\n            $(root).on('input propertychange', SELECTORS.ELEMENT, changeListener.bind(this));\r\n        }\r\n    };\r\n\r\n    return /** @module core/auto_rows */ {\r\n        init: init,\r\n        events: EVENTS,\r\n    };\r\n});\r\n"],"names":["define","$","SELECTORS","EVENTS","ROW_CHANGE","changeListener","e","element","target","minRows","data","currentRows","attr","rows","maxRows","height","padding","innerHeight","scrollHeight","css","calculateRows","trigger","init","root","on","bind","this","events"],"mappings":";;;;;;;;AAuBAA,wBAAO,CAAC,WAAW,SAASC,OACpBC,kBACS,mBAGTC,OAAS,CACTC,WAAY,sBA2CZC,eAAiB,SAASC,OACtBC,QAAUN,EAAEK,EAAEE,QACdC,QAAUF,QAAQG,KAAK,YACvBC,YAAcJ,QAAQK,KAAK,aAER,IAAZH,SACPF,QAAQG,KAAK,WAAYC,aAK7BJ,QAAQK,KAAK,OAAQ,OACjBC,KA5CY,SAASN,aACrBI,YAAcJ,QAAQK,KAAK,QAC3BH,QAAUF,QAAQG,KAAK,YACvBI,QAAUP,QAAQK,KAAK,iBAEvBG,OAASR,QAAQQ,SAEjBC,QADcT,QAAQU,cACEF,OAGxBF,MADeN,QAAQ,GAAGW,aACHF,UAAYD,OAASJ,oBAIhDJ,QAAQY,IAAI,SAAU,IAElBN,KAAOJ,QACAA,QACAK,SAAWD,MAAQC,QACnBA,QAEAD,KAuBAO,CAAcb,SACzBA,QAAQK,KAAK,OAAQC,MAEjBA,MAAQF,aACRJ,QAAQc,QAAQlB,OAAOC,mBAmBM,CACjCkB,KATO,SAASC,MACZtB,EAAEsB,MAAMb,KAAK,aACbT,EAAEsB,MAAMC,GAAG,uBAAwBnB,eAAeoB,KAAKC,OAEvDzB,EAAEsB,MAAMC,GAAG,uBAAwBtB,kBAAmBG,eAAeoB,KAAKC,QAM9EC,OAAQxB"}