{"version":3,"file":"prefetch.min.js","sources":["../src/prefetch.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * Prefetch module to help lazily load content for use on the current page.\r\n *\r\n * @module     core/prefetch\r\n * @copyright  2020 Andrew Nicols <andrew@nicols.co.uk>\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n *\r\n * @example <caption>Pre-fetching a set of strings to use later</caption>\r\n *\r\n * import prefetch from 'core/prefetch';\r\n *\r\n * // A single string prefetch.\r\n * prefetch.prefetchString('error', 'cannotfindteacher');\r\n *\r\n * // Prefetch multiple strings in the same component.\r\n * prefetch.prefetchStrings('core', [\r\n *     'yes',\r\n *     'no',\r\n * ]);\r\n *\r\n * // Use the strings.\r\n * import {getString, getStrings} from 'core/str';\r\n * getString('cannotfindteacher', 'error')\r\n * .then(str => {\r\n *     window.console.log(str); // Cannot find teacher\r\n * })\r\n * .catch();\r\n * getStrings([\r\n *     {\r\n *         key: 'cannotfindteacher',\r\n *         component: 'error',\r\n *     },\r\n *     {\r\n *         key: 'yes',\r\n *         component: 'core',\r\n *     },\r\n *     {\r\n *         key: 'no',\r\n *         component: 'core',\r\n *     },\r\n * ])\r\n * .then((cannotFindTeacher, yes, no) => {\r\n *     window.console.log(cannotFindTeacher); // Cannot find teacher\r\n *     window.console.log(yes); // Yes\r\n *     window.console.log(no); // No\r\n * })\r\n * .catch();\r\n */\r\nimport Config from 'core/config';\r\n\r\n// Keep track of whether the initial prefetch has occurred.\r\nlet initialPrefetchComplete = false;\r\n\r\n// Prefetch templates.\r\nlet templateList = [];\r\n\r\n// Prefetch strings.\r\nlet stringList = {};\r\n\r\nlet prefetchTimer;\r\n\r\n/**\r\n * Fetch all queued items in the queue.\r\n *\r\n * Should only be called via processQueue.\r\n * @private\r\n */\r\nconst fetchQueue = () => {\r\n    // Prefetch templates.\r\n    if (templateList) {\r\n        const templatesToLoad = templateList.slice();\r\n        templateList = [];\r\n        import('core/templates')\r\n        .then(Templates => Templates.prefetchTemplates(templatesToLoad))\r\n        .catch();\r\n    }\r\n\r\n    // Prefetch strings.\r\n    const mappedStringsToFetch = stringList;\r\n    stringList = {};\r\n\r\n    const stringsToFetch = [];\r\n    Object.keys(mappedStringsToFetch).forEach(component => {\r\n        stringsToFetch.push(...mappedStringsToFetch[component].map(key => {\r\n            return {component, key};\r\n        }));\r\n    });\r\n\r\n    if (stringsToFetch) {\r\n        import('core/str')\r\n        .then(Str => Str.get_strings(stringsToFetch))\r\n        .catch();\r\n    }\r\n};\r\n\r\n/**\r\n * Process the prefetch queues as required.\r\n *\r\n * The initial call will queue the first fetch after a delay.\r\n * Subsequent fetches are immediate.\r\n *\r\n * @private\r\n */\r\nconst processQueue = () => {\r\n    if (prefetchTimer) {\r\n        // There is a live prefetch timer. The initial prefetch has been scheduled but is not complete.\r\n        return;\r\n    }\r\n\r\n    // The initial prefetch has compelted. Just queue as normal.\r\n    if (initialPrefetchComplete) {\r\n        fetchQueue();\r\n\r\n        return;\r\n    }\r\n\r\n    // Queue the initial prefetch in a short while.\r\n    prefetchTimer = setTimeout(() => {\r\n        initialPrefetchComplete = true;\r\n        prefetchTimer = null;\r\n\r\n        // Ensure that the icon system is loaded.\r\n        // This can be quite slow and delay UI interactions if it is loaded on demand.\r\n        import(Config.iconsystemmodule)\r\n        .then(IconSystem => {\r\n            const iconSystem = new IconSystem();\r\n            prefetchTemplate(iconSystem.getTemplateName());\r\n\r\n            return iconSystem;\r\n        })\r\n        .then(iconSystem => {\r\n            fetchQueue();\r\n            iconSystem.init();\r\n\r\n            return;\r\n        })\r\n        .catch();\r\n    }, 500);\r\n};\r\n\r\n/**\r\n * Add a set of templates to the prefetch queue.\r\n *\r\n * @param {Array} templatesNames A list of the template names to fetch\r\n * @static\r\n */\r\nconst prefetchTemplates = templatesNames => {\r\n    templateList = templateList.concat(templatesNames);\r\n\r\n    processQueue();\r\n};\r\n\r\n/**\r\n * Add a single template to the prefetch queue.\r\n *\r\n * @param {String} templateName The template names to fetch\r\n * @static\r\n */\r\nconst prefetchTemplate = templateName => {\r\n    prefetchTemplates([templateName]);\r\n};\r\n\r\n/**\r\n * Add a set of strings from the same component to the prefetch queue.\r\n *\r\n * @param {String} component The component that all of the strings belongs to\r\n * @param {String[]} keys An array of string identifiers.\r\n * @static\r\n */\r\nconst prefetchStrings = (component, keys) => {\r\n    if (!stringList[component]) {\r\n        stringList[component] = [];\r\n    }\r\n\r\n    stringList[component] = stringList[component].concat(keys);\r\n\r\n    processQueue();\r\n};\r\n\r\n/**\r\n * Add a single string to the prefetch queue.\r\n *\r\n * @param {String} component The component that the string belongs to\r\n * @param {String} key The string identifier\r\n * @static\r\n */\r\nconst prefetchString = (component, key) => {\r\n    if (!stringList[component]) {\r\n        stringList[component] = [];\r\n    }\r\n\r\n    stringList[component].push(key);\r\n\r\n    processQueue();\r\n};\r\n\r\n// Prefetch some commonly-used templates.\r\nprefetchTemplates([].concat(\r\n    ['core/loading'],\r\n    ['core/modal'],\r\n    ['core/modal_backdrop'],\r\n));\r\n\r\n// And some commonly used strings.\r\nprefetchStrings('core', [\r\n    'cancel',\r\n    'closebuttontitle',\r\n    'loading',\r\n    'savechanges',\r\n]);\r\nprefetchStrings('core_form', [\r\n    'showless',\r\n    'showmore',\r\n]);\r\n\r\nexport default {\r\n    prefetchTemplate,\r\n    prefetchTemplates,\r\n    prefetchString,\r\n    prefetchStrings,\r\n};\r\n"],"names":["prefetchTimer","initialPrefetchComplete","templateList","stringList","fetchQueue","templatesToLoad","slice","then","Templates","prefetchTemplates","catch","mappedStringsToFetch","stringsToFetch","Object","keys","forEach","component","push","map","key","Str","get_strings","processQueue","setTimeout","Config","iconsystemmodule","IconSystem","iconSystem","prefetchTemplate","getTemplateName","init","templatesNames","concat","templateName","prefetchStrings","prefetchString"],"mappings":"mXA0EIA,cARAC,yBAA0B,EAG1BC,aAAe,GAGfC,WAAa,SAUXC,WAAa,QAEXF,aAAc,OACRG,gBAAkBH,aAAaI,QACrCJ,aAAe,gmBAEdK,MAAKC,WAAaA,UAAUC,kBAAkBJ,mBAC9CK,cAICC,qBAAuBR,WAC7BA,WAAa,SAEPS,eAAiB,GACvBC,OAAOC,KAAKH,sBAAsBI,SAAQC,YACtCJ,eAAeK,QAAQN,qBAAqBK,WAAWE,KAAIC,MAChD,CAACH,UAAAA,UAAWG,IAAAA,YAIvBP,2lBAECL,MAAKa,KAAOA,IAAIC,YAAYT,kBAC5BF,SAYHY,aAAe,KACbtB,gBAMAC,wBACAG,aAMJJ,cAAgBuB,YAAW,KACvBtB,yBAA0B,EAC1BD,cAAgB,sNAITwB,gBAAOC,4SAAPD,gBAAP,4EAAOA,gBAAOC,oBACblB,MAAKmB,mBACIC,WAAa,IAAID,kBACvBE,iBAAiBD,WAAWE,mBAErBF,cAEVpB,MAAKoB,aACFvB,aACAuB,WAAWG,UAIdpB,UACF,OASDD,kBAAoBsB,iBACtB7B,aAAeA,aAAa8B,OAAOD,gBAEnCT,gBASEM,iBAAmBK,eACrBxB,kBAAkB,CAACwB,gBAUjBC,gBAAkB,CAAClB,UAAWF,QAC3BX,WAAWa,aACZb,WAAWa,WAAa,IAG5Bb,WAAWa,WAAab,WAAWa,WAAWgB,OAAOlB,MAErDQ,gBAqBJb,kBAAkB,GAAGuB,OACjB,CAAC,gBACD,CAAC,cACD,CAAC,yBAILE,gBAAgB,OAAQ,CACpB,SACA,mBACA,UACA,gBAEJA,gBAAgB,YAAa,CACzB,WACA,0BAGW,CACXN,iBAAAA,iBACAnB,kBAAAA,kBACA0B,eAhCmB,CAACnB,UAAWG,OAC1BhB,WAAWa,aACZb,WAAWa,WAAa,IAG5Bb,WAAWa,WAAWC,KAAKE,KAE3BG,gBA0BAY,gBAAAA"}