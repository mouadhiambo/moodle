{"version":3,"file":"truncate.min.js","sources":["../src/truncate.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * Description of import/upgrade into Moodle:\r\n * 1.) Download from https://github.com/pathable/truncate\r\n * 2.) Copy jquery.truncate.js into lib/amd/src/truncate.js\r\n * 3.) Edit truncate.js to return the $.truncate function as truncate\r\n * 4.) Apply Moodle changes from git commit 7172b33e241c4d42cff01f78bf8570408f43fdc2\r\n */\r\n\r\n/**\r\n * Module for text truncation.\r\n *\r\n * Implementation provided by Pathable (thanks!).\r\n * See: https://github.com/pathable/truncate\r\n *\r\n * @module     core/truncate\r\n * @copyright  2017 Pathable\r\n *             2017 Mathias Bynens\r\n *             2017 Ryan Wyllie <ryan@moodle.com>\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\ndefine(['jquery'], function($) {\r\n\r\n  // Matches trailing non-space characters.\r\n  var chop = /(\\s*\\S+|\\s)$/;\r\n\r\n  // Matches the first word in the string.\r\n  var start = /^(\\S*)/;\r\n\r\n  // Matches any space characters.\r\n  var space = /\\s/;\r\n\r\n  // Special thanks to Mathias Bynens for the multi-byte char\r\n  // implementation. Much love.\r\n  // see: https://github.com/mathiasbynens/String.prototype.at/blob/master/at.js\r\n  var charLengthAt = function(text, position) {\r\n    var string = String(text);\r\n    var size = string.length;\r\n    // `ToInteger`\r\n    var index = position ? Number(position) : 0;\r\n    if (index != index) { // better `isNaN`\r\n      index = 0;\r\n    }\r\n    // Account for out-of-bounds indices\r\n    // The odd lower bound is because the ToInteger operation is\r\n    // going to round `n` to `0` for `-1 < n <= 0`.\r\n    if (index <= -1 || index >= size) {\r\n      return '';\r\n    }\r\n    // Second half of `ToInteger`\r\n    index = index | 0;\r\n    // Get the first code unit and code unit value\r\n    var cuFirst = string.charCodeAt(index);\r\n    var cuSecond;\r\n    var nextIndex = index + 1;\r\n    var len = 1;\r\n    if ( // Check if itâ€™s the start of a surrogate pair.\r\n      cuFirst >= 0xD800 && cuFirst <= 0xDBFF && // high surrogate\r\n      size > nextIndex // there is a next code unit\r\n    ) {\r\n      cuSecond = string.charCodeAt(nextIndex);\r\n      if (cuSecond >= 0xDC00 && cuSecond <= 0xDFFF) { // low surrogate\r\n        len = 2;\r\n      }\r\n    }\r\n    return len;\r\n  };\r\n\r\n  var lengthMultiByte = function(text) {\r\n    var count = 0;\r\n\r\n    for (var i = 0; i < text.length; i += charLengthAt(text, i)) {\r\n      count++;\r\n    }\r\n\r\n    return count;\r\n  };\r\n\r\n  var getSliceLength = function(text, amount) {\r\n    if (!text.length) {\r\n      return 0;\r\n    }\r\n\r\n    var length = 0;\r\n    var count = 0;\r\n\r\n    do {\r\n      length += charLengthAt(text, length);\r\n      count++;\r\n    } while (length < text.length && count < amount);\r\n\r\n    return length;\r\n  };\r\n\r\n  // Return a truncated html string.  Delegates to $.fn.truncate.\r\n  $.truncate = function(html, options) {\r\n    return $('<div></div>').append(html).truncate(options).html();\r\n  };\r\n\r\n  // Truncate the contents of an element in place.\r\n  $.fn.truncate = function(options) {\r\n    if (!isNaN(parseFloat(options))) options = {length: options};\r\n    var o = $.extend({}, $.truncate.defaults, options);\r\n\r\n    return this.each(function() {\r\n      var self = $(this);\r\n\r\n      if (o.noBreaks) self.find('br').replaceWith(' ');\r\n\r\n      var ellipsisLength = o.ellipsis.length;\r\n      var text = self.text();\r\n      var textLength = lengthMultiByte(text);\r\n      var excess = textLength - o.length + ellipsisLength;\r\n\r\n      if (textLength < o.length) return;\r\n      if (o.stripTags) self.text(text);\r\n\r\n      // Chop off any partial words if appropriate.\r\n      if (o.words && excess > 0) {\r\n        var sliced = text.slice(0, getSliceLength(text, o.length - ellipsisLength) + 1);\r\n        var replaced = sliced.replace(chop, '');\r\n        var truncated = lengthMultiByte(replaced);\r\n        var oneWord = sliced.match(space) ? false : true;\r\n\r\n        if (o.keepFirstWord && truncated === 0) {\r\n          excess = textLength - lengthMultiByte(start.exec(text)[0]) - ellipsisLength;\r\n        } else if (oneWord && truncated === 0) {\r\n          excess = textLength - o.length + ellipsisLength;\r\n        } else {\r\n          excess = textLength - truncated - 1;\r\n        }\r\n      }\r\n\r\n      // The requested length is larger than the text. No need for ellipsis.\r\n      if (excess > textLength) {\r\n        excess = textLength - o.length;\r\n      }\r\n\r\n      if (excess < 0 || !excess && !o.truncated) return;\r\n\r\n      // Iterate over each child node in reverse, removing excess text.\r\n      $.each(self.contents().get().reverse(), function(i, el) {\r\n        var $el = $(el);\r\n        var text = $el.text();\r\n        var length = lengthMultiByte(text);\r\n\r\n        // If the text is longer than the excess, remove the node and continue.\r\n        if (length <= excess) {\r\n          o.truncated = true;\r\n          excess -= length;\r\n          $el.remove();\r\n          return;\r\n        }\r\n\r\n        // Remove the excess text and append the ellipsis.\r\n        if (el.nodeType === 3) {\r\n          var splitAmount = length - excess;\r\n          splitAmount = splitAmount >= 0 ? getSliceLength(text, splitAmount) : 0;\r\n          $(el.splitText(splitAmount)).replaceWith(o.ellipsis);\r\n          return false;\r\n        }\r\n\r\n        // Recursively truncate child nodes.\r\n        $el.truncate($.extend(o, {length: length - excess + ellipsisLength}));\r\n        return false;\r\n      });\r\n    });\r\n  };\r\n\r\n  $.truncate.defaults = {\r\n\r\n    // Strip all html elements, leaving only plain text.\r\n    stripTags: false,\r\n\r\n    // Only truncate at word boundaries.\r\n    words: false,\r\n\r\n    // When 'words' is active, keeps the first word in the string\r\n    // even if it's longer than a target length.\r\n    keepFirstWord: false,\r\n\r\n    // Replace instances of <br> with a single space.\r\n    noBreaks: false,\r\n\r\n    // The maximum length of the truncated html.\r\n    length: Infinity,\r\n\r\n    // The character to use as the ellipsis.  The word joiner (U+2060) can be\r\n    // used to prevent a hanging ellipsis, but displays incorrectly in Chrome\r\n    // on Windows 7.\r\n    // http://code.google.com/p/chromium/issues/detail?id=68323\r\n    //ellipsis: '\\u2026' // '\\u2060\\u2026'\r\n    ellipsis: '\\u2026' // '\\u2060\\u2026'\r\n\r\n  };\r\n\r\n    return {\r\n        truncate: $.truncate,\r\n    };\r\n});\r\n"],"names":["define","$","chop","start","space","charLengthAt","text","position","string","String","size","length","index","Number","cuSecond","cuFirst","charCodeAt","nextIndex","len","lengthMultiByte","count","i","getSliceLength","amount","truncate","html","options","append","fn","isNaN","parseFloat","o","extend","defaults","this","each","self","noBreaks","find","replaceWith","ellipsisLength","ellipsis","textLength","excess","stripTags","words","sliced","slice","replaced","replace","truncated","oneWord","match","keepFirstWord","exec","contents","get","reverse","el","$el","remove","nodeType","splitAmount","splitText","Infinity"],"mappings":";;;;;;;;;;;;AAmCAA,uBAAO,CAAC,WAAW,SAASC,OAGtBC,KAAO,eAGPC,MAAQ,SAGRC,MAAQ,KAKRC,aAAe,SAASC,KAAMC,cAC5BC,OAASC,OAAOH,MAChBI,KAAOF,OAAOG,OAEdC,MAAQL,SAAWM,OAAON,UAAY,KACtCK,OAASA,QACXA,MAAQ,GAKNA,QAAU,GAAKA,OAASF,WACnB,GAGTE,OAAgB,MAGZE,SADAC,QAAUP,OAAOQ,WAAWJ,OAE5BK,UAAYL,MAAQ,EACpBM,IAAM,SAERH,SAAW,OAAUA,SAAW,OAChCL,KAAOO,YAEPH,SAAWN,OAAOQ,WAAWC,aACb,OAAUH,UAAY,QACpCI,IAAM,GAGHA,KAGLC,gBAAkB,SAASb,cACzBc,MAAQ,EAEHC,EAAI,EAAGA,EAAIf,KAAKK,OAAQU,GAAKhB,aAAaC,KAAMe,GACvDD,eAGKA,OAGLE,eAAiB,SAAShB,KAAMiB,YAC7BjB,KAAKK,cACD,MAGLA,OAAS,EACTS,MAAQ,KAGVT,QAAUN,aAAaC,KAAMK,QAC7BS,cACOT,OAASL,KAAKK,QAAUS,MAAQG,eAElCZ,eAITV,EAAEuB,SAAW,SAASC,KAAMC,gBACnBzB,EAAE,eAAe0B,OAAOF,MAAMD,SAASE,SAASD,QAIzDxB,EAAE2B,GAAGJ,SAAW,SAASE,SAClBG,MAAMC,WAAWJ,YAAWA,QAAU,CAACf,OAAQe,cAChDK,EAAI9B,EAAE+B,OAAO,GAAI/B,EAAEuB,SAASS,SAAUP,gBAEnCQ,KAAKC,MAAK,eACXC,KAAOnC,EAAEiC,MAETH,EAAEM,UAAUD,KAAKE,KAAK,MAAMC,YAAY,SAExCC,eAAiBT,EAAEU,SAAS9B,OAC5BL,KAAO8B,KAAK9B,OACZoC,WAAavB,gBAAgBb,MAC7BqC,OAASD,WAAaX,EAAEpB,OAAS6B,oBAEjCE,WAAaX,EAAEpB,YACfoB,EAAEa,WAAWR,KAAK9B,KAAKA,MAGvByB,EAAEc,OAASF,OAAS,EAAG,KACrBG,OAASxC,KAAKyC,MAAM,EAAGzB,eAAehB,KAAMyB,EAAEpB,OAAS6B,gBAAkB,GACzEQ,SAAWF,OAAOG,QAAQ/C,KAAM,IAChCgD,UAAY/B,gBAAgB6B,UAC5BG,SAAUL,OAAOM,MAAMhD,OAGzBuC,OADEZ,EAAEsB,eAA+B,IAAdH,UACZR,WAAavB,gBAAgBhB,MAAMmD,KAAKhD,MAAM,IAAMkC,eACpDW,SAAyB,IAAdD,UACXR,WAAaX,EAAEpB,OAAS6B,eAExBE,WAAaQ,UAAY,EAKlCP,OAASD,aACXC,OAASD,WAAaX,EAAEpB,QAGtBgC,OAAS,IAAMA,SAAWZ,EAAEmB,WAGhCjD,EAAEkC,KAAKC,KAAKmB,WAAWC,MAAMC,WAAW,SAASpC,EAAGqC,QAC9CC,IAAM1D,EAAEyD,IACRpD,KAAOqD,IAAIrD,OACXK,OAASQ,gBAAgBb,SAGzBK,QAAUgC,cACZZ,EAAEmB,WAAY,EACdP,QAAUhC,YACVgD,IAAIC,YAKc,IAAhBF,GAAGG,SAAgB,KACjBC,YAAcnD,OAASgC,cAC3BmB,YAAcA,aAAe,EAAIxC,eAAehB,KAAMwD,aAAe,EACrE7D,EAAEyD,GAAGK,UAAUD,cAAcvB,YAAYR,EAAEU,WACpC,SAITkB,IAAInC,SAASvB,EAAE+B,OAAOD,EAAG,CAACpB,OAAQA,OAASgC,OAASH,mBAC7C,UAKbvC,EAAEuB,SAASS,SAAW,CAGpBW,WAAW,EAGXC,OAAO,EAIPQ,eAAe,EAGfhB,UAAU,EAGV1B,OAAQqD,EAAAA,EAORvB,SAAU,KAIH,CACHjB,SAAUvB,EAAEuB"}