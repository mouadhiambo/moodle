{"version":3,"file":"filtertype.min.js","sources":["../../src/datafilter/filtertype.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * Base Filter class for a filter type in the filter UI.\r\n *\r\n * @module     core/datafilter/filtertype\r\n * @copyright  2020 Andrew Nicols <andrew@nicols.co.uk>\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\nimport Autocomplete from 'core/form-autocomplete';\r\nimport Selectors from 'core/datafilter/selectors';\r\nimport {getString} from 'core/str';\r\nimport Notification from 'core/notification';\r\n\r\n/**\r\n * Fetch all checked options in the select.\r\n *\r\n * This is a poor-man's polyfill for select.selectedOptions, which is not available in IE11.\r\n *\r\n * @param {HTMLSelectElement} select\r\n * @returns {HTMLOptionElement[]} All selected options\r\n */\r\nconst getOptionsForSelect = select => {\r\n    return select.querySelectorAll(':checked');\r\n};\r\n\r\nexport default class {\r\n\r\n    /**\r\n     * Constructor for a new filter.\r\n     *\r\n     * @param {String} filterType The type of filter that this relates to\r\n     * @param {HTMLElement} rootNode The root node for the participants filterset\r\n     * @param {Array} initialValues The initial values for the selector\r\n     */\r\n    constructor(filterType, rootNode, initialValues) {\r\n        this.filterType = filterType;\r\n        this.rootNode = rootNode;\r\n\r\n        this.addValueSelector(initialValues).then(() => {\r\n            const filterRoot = this.filterRoot;\r\n            if (filterRoot && filterRoot.querySelector(Selectors.data.required)) {\r\n                filterRoot.querySelector(Selectors.filter.actions.remove).remove();\r\n            }\r\n            return filterRoot;\r\n        }).catch(Notification.exception);\r\n\r\n    }\r\n\r\n    /**\r\n     * Perform any tear-down for this filter type.\r\n     */\r\n    tearDown() {\r\n        // eslint-disable-line no-empty-function\r\n    }\r\n\r\n    /**\r\n     * Get the placeholder to use when showing the value selector.\r\n     *\r\n     * @return {Promise} Resolving to a String\r\n     */\r\n    get placeholder() {\r\n        return getString('placeholdertypeorselect', 'core');\r\n    }\r\n\r\n    /**\r\n     * Whether to show suggestions in the autocomplete.\r\n     *\r\n     * @return {Boolean}\r\n     */\r\n    get showSuggestions() {\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Add the value selector to the filter row.\r\n     *\r\n     * @param {Array} initialValues\r\n     * @return {Promise}\r\n     */\r\n    async addValueSelector(initialValues = []) {\r\n        const filterValueNode = this.getFilterValueNode();\r\n\r\n        // Copy the data in place.\r\n        const sourceDataNode = this.getSourceDataForFilter();\r\n        if (!sourceDataNode) {\r\n            throw new Error('No source data for filter.');\r\n        }\r\n        filterValueNode.innerHTML = sourceDataNode.outerHTML;\r\n\r\n        const dataSource = filterValueNode.querySelector('select');\r\n\r\n        // Set an ID for this filter value element.\r\n        dataSource.id = 'filter-value-' + dataSource.getAttribute('data-field-name');\r\n\r\n        // Create a hidden label for the filter value.\r\n        const filterValueLabel = document.createElement('label');\r\n        filterValueLabel.setAttribute('for', dataSource.id);\r\n        filterValueLabel.classList.add('visually-hidden');\r\n        filterValueLabel.innerText = dataSource.getAttribute('data-field-title');\r\n\r\n        // Append this label to the filter value container.\r\n        filterValueNode.appendChild(filterValueLabel);\r\n\r\n        // If there are any initial values then attempt to apply them.\r\n        initialValues.forEach(filterValue => {\r\n            let selectedOption = dataSource.querySelector(`option[value=\"${filterValue}\"]`);\r\n            if (selectedOption) {\r\n                selectedOption.selected = true;\r\n            } else if (!this.showSuggestions) {\r\n                selectedOption = document.createElement('option');\r\n                selectedOption.value = filterValue;\r\n                selectedOption.innerHTML = filterValue;\r\n                selectedOption.selected = true;\r\n\r\n                dataSource.append(selectedOption);\r\n            }\r\n        });\r\n\r\n        return Autocomplete.enhance(\r\n            // The source select element.\r\n            dataSource,\r\n\r\n            // Whether to allow 'tags' (custom entries).\r\n            dataSource.dataset.allowCustom == \"1\",\r\n\r\n            // We do not require AJAX at all as standard.\r\n            null,\r\n\r\n            // The string to use as a placeholder.\r\n            await this.placeholder,\r\n\r\n            // Disable case sensitivity on searches.\r\n            false,\r\n\r\n            // Show suggestions.\r\n            this.showSuggestions,\r\n\r\n            // Do not override the 'no suggestions' string.\r\n            null,\r\n\r\n            // Close the suggestions if this is not a multi-select.\r\n            !dataSource.multiple,\r\n\r\n            // Template overrides.\r\n            {\r\n                items: 'core/datafilter/autocomplete_selection_items',\r\n                layout: 'core/datafilter/autocomplete_layout',\r\n                selection: 'core/datafilter/autocomplete_selection',\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Get the root node for this filter.\r\n     *\r\n     * @returns {HTMLElement}\r\n     */\r\n    get filterRoot() {\r\n        return this.rootNode.querySelector(Selectors.filter.byName(this.filterType));\r\n    }\r\n\r\n    /**\r\n     * Get the possible data for this filter type.\r\n     *\r\n     * @returns {Array}\r\n     */\r\n    getSourceDataForFilter() {\r\n        const filterDataNode = this.rootNode.querySelector(Selectors.filterset.regions.datasource);\r\n\r\n        return filterDataNode.querySelector(Selectors.data.fields.byName(this.filterType));\r\n    }\r\n\r\n    /**\r\n     * Get the HTMLElement which contains the value selector.\r\n     *\r\n     * @returns {HTMLElement}\r\n     */\r\n    getFilterValueNode() {\r\n        return this.filterRoot.querySelector(Selectors.filter.regions.values);\r\n    }\r\n\r\n    /**\r\n     * Get the name of this filter.\r\n     *\r\n     * @returns {String}\r\n     */\r\n    get name() {\r\n        return this.filterType;\r\n    }\r\n\r\n    /**\r\n     * Get the type of join specified.\r\n     *\r\n     * @returns {Number}\r\n     */\r\n    get jointype() {\r\n        return parseInt(this.filterRoot.querySelector(Selectors.filter.fields.join).value, 10);\r\n    }\r\n\r\n    /**\r\n     * Get the list of raw values for this filter type.\r\n     *\r\n     * @returns {Array}\r\n     */\r\n    get rawValues() {\r\n        const filterValueNode = this.getFilterValueNode();\r\n        const filterValueSelect = filterValueNode.querySelector('select');\r\n\r\n        return Object.values(getOptionsForSelect(filterValueSelect)).map(option => option.value);\r\n    }\r\n\r\n    /**\r\n     * Get the list of values for this filter type.\r\n     *\r\n     * @returns {Array}\r\n     */\r\n    get values() {\r\n        return this.rawValues.map(option => parseInt(option, 10));\r\n    }\r\n\r\n    /**\r\n     * Get options specific to this filter type.\r\n     *\r\n     * @returns {Array} of {name:, value:} objects\r\n     */\r\n    get filterOptions() {\r\n        return [];\r\n    }\r\n\r\n    /**\r\n     * Get the composed value for this filter.\r\n     *\r\n     * @returns {Object}\r\n     */\r\n    get filterValue() {\r\n        return {\r\n            name: this.name,\r\n            jointype: this.jointype,\r\n            values: this.values,\r\n            filteroptions: this.filterOptions,\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Validate the entered values for the filter.\r\n     *\r\n     * Return true if all values are valid, false otherwise.\r\n     * To display validation errors, use the standard setCustomValidity() and reportValidity() methods.\r\n     *\r\n     * @return {boolean}\r\n     */\r\n    validate() {\r\n        return true;\r\n    }\r\n}\r\n"],"names":["constructor","filterType","rootNode","initialValues","addValueSelector","then","filterRoot","this","querySelector","Selectors","data","required","filter","actions","remove","catch","Notification","exception","tearDown","placeholder","showSuggestions","filterValueNode","getFilterValueNode","sourceDataNode","getSourceDataForFilter","Error","innerHTML","outerHTML","dataSource","id","getAttribute","filterValueLabel","document","createElement","setAttribute","classList","add","innerText","appendChild","forEach","filterValue","selectedOption","selected","value","append","Autocomplete","enhance","dataset","allowCustom","multiple","items","layout","selection","byName","filterset","regions","datasource","fields","values","name","jointype","parseInt","join","rawValues","filterValueSelect","Object","select","querySelectorAll","map","option","filterOptions","filteroptions","validate"],"mappings":";;;;;;;iRAgDIA,YAAYC,WAAYC,SAAUC,oBACzBF,WAAaA,gBACbC,SAAWA,cAEXE,iBAAiBD,eAAeE,MAAK,WAChCC,WAAaC,KAAKD,kBACpBA,YAAcA,WAAWE,cAAcC,mBAAUC,KAAKC,WACtDL,WAAWE,cAAcC,mBAAUG,OAAOC,QAAQC,QAAQA,SAEvDR,cACRS,MAAMC,sBAAaC,WAO1BC,YASIC,yBACO,kBAAU,0BAA2B,QAQ5CC,6BACO,+BASYjB,qEAAgB,SAC7BkB,gBAAkBd,KAAKe,qBAGvBC,eAAiBhB,KAAKiB,6BACvBD,qBACK,IAAIE,MAAM,8BAEpBJ,gBAAgBK,UAAYH,eAAeI,gBAErCC,WAAaP,gBAAgBb,cAAc,UAGjDoB,WAAWC,GAAK,gBAAkBD,WAAWE,aAAa,yBAGpDC,iBAAmBC,SAASC,cAAc,gBAChDF,iBAAiBG,aAAa,MAAON,WAAWC,IAChDE,iBAAiBI,UAAUC,IAAI,mBAC/BL,iBAAiBM,UAAYT,WAAWE,aAAa,oBAGrDT,gBAAgBiB,YAAYP,kBAG5B5B,cAAcoC,SAAQC,kBACdC,eAAiBb,WAAWpB,sCAA+BgC,mBAC3DC,eACAA,eAAeC,UAAW,EAClBnC,KAAKa,kBACbqB,eAAiBT,SAASC,cAAc,UACxCQ,eAAeE,MAAQH,YACvBC,eAAef,UAAYc,YAC3BC,eAAeC,UAAW,EAE1Bd,WAAWgB,OAAOH,oBAInBI,0BAAaC,QAEhBlB,WAGkC,KAAlCA,WAAWmB,QAAQC,YAGnB,WAGMzC,KAAKY,aAGX,EAGAZ,KAAKa,gBAGL,MAGCQ,WAAWqB,SAGZ,CACIC,MAAO,+CACPC,OAAQ,sCACRC,UAAW,2CAUnB9C,wBACOC,KAAKL,SAASM,cAAcC,mBAAUG,OAAOyC,OAAO9C,KAAKN,aAQpEuB,gCAC2BjB,KAAKL,SAASM,cAAcC,mBAAU6C,UAAUC,QAAQC,YAEzDhD,cAAcC,mBAAUC,KAAK+C,OAAOJ,OAAO9C,KAAKN,aAQ1EqB,4BACWf,KAAKD,WAAWE,cAAcC,mBAAUG,OAAO2C,QAAQG,QAQ9DC,kBACOpD,KAAKN,WAQZ2D,sBACOC,SAAStD,KAAKD,WAAWE,cAAcC,mBAAUG,OAAO6C,OAAOK,MAAMnB,MAAO,IAQnFoB,sBAEMC,kBADkBzD,KAAKe,qBACad,cAAc,iBAEjDyD,OAAOP,QA3LMQ,OA2LqBF,kBA1LtCE,OAAOC,iBAAiB,cA0LkCC,KAAIC,QAAUA,OAAO1B,QA3L9DuB,IAAAA,OAmMpBR,oBACOnD,KAAKwD,UAAUK,KAAIC,QAAUR,SAASQ,OAAQ,MAQrDC,0BACO,GAQP9B,wBACO,CACHmB,KAAMpD,KAAKoD,KACXC,SAAUrD,KAAKqD,SACfF,OAAQnD,KAAKmD,OACba,cAAehE,KAAK+D,eAY5BE,kBACW"}