{"version":3,"file":"datetime.min.js","sources":["../../../src/datafilter/filtertypes/datetime.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * Base filter for a date/time selector\r\n *\r\n * @module     core/datafilter/filtertypes/datetime\r\n * @author     Mark Johnson <mark.johnson@catalyst-eu.net>\r\n * @copyright  2024 Catalyst IT Europe Ltd\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\n\r\nimport Filter from 'core/datafilter/filtertype';\r\nimport Selectors from 'core/datafilter/selectors';\r\nimport Templates from 'core/templates';\r\nimport Notification from 'core/notification';\r\nimport {get_strings as getStrings} from 'core/str';\r\n\r\nconst MODES = {\r\n    before: 'before',\r\n    after: 'after',\r\n    between: 'between',\r\n};\r\n\r\nexport default class extends Filter {\r\n\r\n    SELECTORS = {\r\n        afterwrapper: `.${this.filterType}-afterwrapper`,\r\n        beforewrapper: `.${this.filterType}-beforewrapper`,\r\n        betweenwrapper: `.${this.filterType}-betweenwrapper`,\r\n        mode: `[data-filterfield=${this.filterType}-mode]`,\r\n    };\r\n\r\n    mode = null;\r\n\r\n    constructor(filterType, rootNode, initialValues, filterOptions = {mode: MODES.before}) {\r\n        super(filterType, rootNode, initialValues);\r\n        this.addModeSelector(filterOptions.mode);\r\n    }\r\n\r\n    /**\r\n     * Get the context object to be sent through to the mustache template.\r\n     * This can be overridden by any filters which inherit from datetime to add/exclude data.\r\n     *\r\n     * @param {array} initialValues\r\n     * @returns {Promise<{filtertype: *, afterlabel: *, beforelabel: *, required, aftervalue: *, beforevalue: *}>}\r\n     */\r\n    async getContext(initialValues) {\r\n        const sourceDataNode = this.getSourceDataForFilter();\r\n        const defaultBefore = sourceDataNode.getElementsByTagName('option')[0].value;\r\n        const defaultAfter = sourceDataNode.getElementsByTagName('option')[1].value;\r\n        const title = sourceDataNode.getAttribute('data-field-title');\r\n        const labels = await getStrings([\r\n            {\r\n                key: 'datetimefilterafter',\r\n                component: 'core',\r\n                param: {title},\r\n            },\r\n            {\r\n                key: 'datetimefilterbefore',\r\n                component: 'core',\r\n                param: {title},\r\n            },\r\n        ]);\r\n        return {\r\n            filtertype: this.filterType,\r\n            afterlabel: labels[0],\r\n            beforelabel: labels[1],\r\n            required: sourceDataNode.dataset.required,\r\n            aftervalue: initialValues[0] ?? defaultAfter,\r\n            beforevalue: initialValues[1] ?? defaultBefore,\r\n        };\r\n    }\r\n\r\n    async addValueSelector(initialValues = []) {\r\n        // We specify a specific filterset in case there are multiple filtering condition - avoiding glitches.\r\n        const specificFilterSet = this.rootNode.querySelector(Selectors.filter.byName(this.filterType));\r\n        const context = await this.getContext(initialValues);\r\n        const datetimeUi = await Templates.renderForPromise('core/datafilter/filtertypes/datetime_selector', context);\r\n        return Templates.replaceNodeContents(\r\n            specificFilterSet.querySelector(Selectors.filter.regions.values),\r\n            datetimeUi.html,\r\n            datetimeUi.js\r\n        );\r\n    }\r\n    async addModeSelector(mode) {\r\n        const modeStrings = await getStrings([\r\n            {key: 'selectdates'},\r\n            {key: 'filterdatebefore', component: 'reportbuilder'},\r\n            {key: 'filterdateafter', component: 'reportbuilder'},\r\n            {key: 'between'}\r\n        ]);\r\n        const context = {\r\n            label: modeStrings[0],\r\n            filtertype: this.filterType,\r\n            modeoptions: [\r\n                {\r\n                    value: MODES.before,\r\n                    label: modeStrings[1],\r\n                    selected: mode === MODES.before ? 'selected' : '',\r\n                },\r\n                {\r\n                    value: MODES.after,\r\n                    label: modeStrings[2],\r\n                    selected: mode === MODES.after ? 'selected' : '',\r\n                },\r\n                {\r\n                    value: MODES.between,\r\n                    label: modeStrings[3],\r\n                    selected: mode === MODES.between ? 'selected' : '',\r\n                },\r\n            ],\r\n        };\r\n        const modeUi = await Templates.renderForPromise('core/datafilter/filtertypes/datetime_mode', context);\r\n        const filterValueNode = this.getFilterValueNode();\r\n        filterValueNode.insertAdjacentHTML('beforebegin', modeUi.html);\r\n        const modeSelect = this.filterRoot.querySelector(this.SELECTORS.mode);\r\n        modeSelect.addEventListener('change', this.updateFieldVisibility.bind(this));\r\n        modeSelect.dispatchEvent(new Event('change')); // Update field visibility based on initial mode.\r\n    }\r\n\r\n    updateFieldVisibility(event) {\r\n        const filterValueNode = this.getFilterValueNode();\r\n        const afterWrapper = filterValueNode.querySelector(this.SELECTORS.afterwrapper);\r\n        const beforeWrapper = filterValueNode.querySelector(this.SELECTORS.beforewrapper);\r\n        const betweenWrapper = filterValueNode.querySelector(this.SELECTORS.betweenwrapper);\r\n        const value = event.target.value;\r\n        if (value === MODES.between) {\r\n            betweenWrapper.classList.remove('d-none');\r\n        } else {\r\n            betweenWrapper.classList.add('d-none');\r\n        }\r\n        if (value === MODES.after || value === MODES.between) {\r\n            afterWrapper.classList.remove('d-none');\r\n        } else {\r\n            afterWrapper.classList.add('d-none');\r\n        }\r\n        if (value === MODES.before || value === MODES.between) {\r\n            beforeWrapper.classList.remove('d-none');\r\n        } else {\r\n            beforeWrapper.classList.add('d-none');\r\n        }\r\n    }\r\n\r\n    get values() {\r\n        return [\r\n            this.filterRoot.querySelector(`[data-filterfield=\"${this.name}1\"]`).value,\r\n            this.filterRoot.querySelector(`[data-filterfield=\"${this.name}2\"]`).value,\r\n        ];\r\n    }\r\n\r\n    get filterOptions() {\r\n        return [\r\n            {name: 'mode', value: this.filterRoot.querySelector(this.SELECTORS.mode).value}\r\n        ];\r\n    }\r\n\r\n    get filterValue() {\r\n        return {\r\n            name: this.name,\r\n            jointype: this.jointype,\r\n            values: this.values,\r\n            filteroptions: this.filterOptions,\r\n        };\r\n    }\r\n\r\n    validate() {\r\n        const mode = document.querySelector(this.SELECTORS.mode).value;\r\n        const before = document.querySelector(this.SELECTORS.beforewrapper + ' input');\r\n        const after = document.querySelector(this.SELECTORS.afterwrapper + ' input');\r\n        after.setCustomValidity('');\r\n        if (mode === MODES.between) {\r\n            if (after.value >= before.value) {\r\n                getStrings([\r\n                    {\r\n                        key: 'invaliddatetimebetween',\r\n                        component: 'error',\r\n                        param: {\r\n                            before: before.value,\r\n                            after: after.value,\r\n                        },\r\n                    },\r\n                ]).then((strings) => {\r\n                    after.setCustomValidity(strings[0]);\r\n                    after.reportValidity();\r\n                    return strings;\r\n                }).catch(Notification.exception);\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n}"],"names":["MODES","Filter","constructor","filterType","rootNode","initialValues","filterOptions","mode","afterwrapper","this","beforewrapper","betweenwrapper","addModeSelector","sourceDataNode","getSourceDataForFilter","defaultBefore","getElementsByTagName","value","defaultAfter","title","getAttribute","labels","key","component","param","filtertype","afterlabel","beforelabel","required","dataset","aftervalue","beforevalue","specificFilterSet","querySelector","Selectors","filter","byName","context","getContext","datetimeUi","Templates","renderForPromise","replaceNodeContents","regions","values","html","js","modeStrings","label","modeoptions","selected","modeUi","getFilterValueNode","insertAdjacentHTML","modeSelect","filterRoot","SELECTORS","addEventListener","updateFieldVisibility","bind","dispatchEvent","Event","event","filterValueNode","afterWrapper","beforeWrapper","betweenWrapper","target","classList","remove","add","name","filterValue","jointype","filteroptions","validate","document","before","after","setCustomValidity","then","strings","reportValidity","catch","Notification","exception"],"mappings":"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"}