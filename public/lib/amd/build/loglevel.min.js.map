{"version":3,"file":"loglevel.min.js","sources":["../src/loglevel.js"],"sourcesContent":["// Copyright (c) 2013 Tim Perry\r\n//\r\n// Permission is hereby granted, free of charge, to any person\r\n// obtaining a copy of this software and associated documentation\r\n// files (the \"Software\"), to deal in the Software without\r\n// restriction, including without limitation the rights to use,\r\n// copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n// copies of the Software, and to permit persons to whom the\r\n// Software is furnished to do so, subject to the following\r\n// conditions:\r\n//\r\n// The above copyright notice and this permission notice shall be\r\n// included in all copies or substantial portions of the Software.\r\n//\r\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\r\n// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\r\n// OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\r\n// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\r\n// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\r\n// WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\r\n// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\r\n// OTHER DEALINGS IN THE SOFTWARE.\r\n\r\n// Description of import into Moodle:\r\n// Download from https://github.com/pimterry/loglevel/tree/main/dist\r\n// Copy loglevel.js into lib/amd/src/ in Moodle folder, and use grunt to build the code\r\n// Add the license as a comment to the file and these instructions.\r\n\r\n/*! loglevel - v1.9.2 - https://github.com/pimterry/loglevel - (c) 2024 Tim Perry - licensed MIT */\r\n(function (root, definition) {\r\n    \"use strict\";\r\n    if (typeof define === 'function' && define.amd) {\r\n        define(definition);\r\n    } else if (typeof module === 'object' && module.exports) {\r\n        module.exports = definition();\r\n    } else {\r\n        root.log = definition();\r\n    }\r\n}(this, function () {\r\n    \"use strict\";\r\n\r\n    // Slightly dubious tricks to cut down minimized file size\r\n    var noop = function() {};\r\n    var undefinedType = \"undefined\";\r\n    var isIE = (typeof window !== undefinedType) && (typeof window.navigator !== undefinedType) && (\r\n        /Trident\\/|MSIE /.test(window.navigator.userAgent)\r\n    );\r\n\r\n    var logMethods = [\r\n        \"trace\",\r\n        \"debug\",\r\n        \"info\",\r\n        \"warn\",\r\n        \"error\"\r\n    ];\r\n\r\n    var _loggersByName = {};\r\n    var defaultLogger = null;\r\n\r\n    // Cross-browser bind equivalent that works at least back to IE6\r\n    function bindMethod(obj, methodName) {\r\n        var method = obj[methodName];\r\n        if (typeof method.bind === 'function') {\r\n            return method.bind(obj);\r\n        } else {\r\n            try {\r\n                return Function.prototype.bind.call(method, obj);\r\n            } catch (e) {\r\n                // Missing bind shim or IE8 + Modernizr, fallback to wrapping\r\n                return function() {\r\n                    return Function.prototype.apply.apply(method, [obj, arguments]);\r\n                };\r\n            }\r\n        }\r\n    }\r\n\r\n    // Trace() doesn't print the message in IE, so for that case we need to wrap it\r\n    function traceForIE() {\r\n        if (console.log) {\r\n            if (console.log.apply) {\r\n                console.log.apply(console, arguments);\r\n            } else {\r\n                // In old IE, native console methods themselves don't have apply().\r\n                Function.prototype.apply.apply(console.log, [console, arguments]);\r\n            }\r\n        }\r\n        if (console.trace) console.trace();\r\n    }\r\n\r\n    // Build the best logging method possible for this env\r\n    // Wherever possible we want to bind, not wrap, to preserve stack traces\r\n    function realMethod(methodName) {\r\n        if (methodName === 'debug') {\r\n            methodName = 'log';\r\n        }\r\n\r\n        if (typeof console === undefinedType) {\r\n            return false; // No method possible, for now - fixed later by enableLoggingWhenConsoleArrives\r\n        } else if (methodName === 'trace' && isIE) {\r\n            return traceForIE;\r\n        } else if (console[methodName] !== undefined) {\r\n            return bindMethod(console, methodName);\r\n        } else if (console.log !== undefined) {\r\n            return bindMethod(console, 'log');\r\n        } else {\r\n            return noop;\r\n        }\r\n    }\r\n\r\n    // These private functions always need `this` to be set properly\r\n\r\n    function replaceLoggingMethods() {\r\n        /*jshint validthis:true */\r\n        var level = this.getLevel();\r\n\r\n        // Replace the actual methods.\r\n        for (var i = 0; i < logMethods.length; i++) {\r\n            var methodName = logMethods[i];\r\n            this[methodName] = (i < level) ?\r\n                noop :\r\n                this.methodFactory(methodName, level, this.name);\r\n        }\r\n\r\n        // Define log.log as an alias for log.debug\r\n        this.log = this.debug;\r\n\r\n        // Return any important warnings.\r\n        if (typeof console === undefinedType && level < this.levels.SILENT) {\r\n            return \"No console available for logging\";\r\n        }\r\n    }\r\n\r\n    // In old IE versions, the console isn't present until you first open it.\r\n    // We build realMethod() replacements here that regenerate logging methods\r\n    function enableLoggingWhenConsoleArrives(methodName) {\r\n        return function () {\r\n            if (typeof console !== undefinedType) {\r\n                replaceLoggingMethods.call(this);\r\n                this[methodName].apply(this, arguments);\r\n            }\r\n        };\r\n    }\r\n\r\n    // By default, we use closely bound real methods wherever possible, and\r\n    // otherwise we wait for a console to appear, and then try again.\r\n    function defaultMethodFactory(methodName, _level, _loggerName) {\r\n        /*jshint validthis:true */\r\n        return realMethod(methodName) ||\r\n               enableLoggingWhenConsoleArrives.apply(this, arguments);\r\n    }\r\n\r\n    function Logger(name, factory) {\r\n      // Private instance variables.\r\n      var self = this;\r\n      /**\r\n       * The level inherited from a parent logger (or a global default). We\r\n       * cache this here rather than delegating to the parent so that it stays\r\n       * in sync with the actual logging methods that we have installed (the\r\n       * parent could change levels but we might not have rebuilt the loggers\r\n       * in this child yet).\r\n       * @type {number}\r\n       */\r\n      var inheritedLevel;\r\n      /**\r\n       * The default level for this logger, if any. If set, this overrides\r\n       * `inheritedLevel`.\r\n       * @type {number|null}\r\n       */\r\n      var defaultLevel;\r\n      /**\r\n       * A user-specific level for this logger. If set, this overrides\r\n       * `defaultLevel`.\r\n       * @type {number|null}\r\n       */\r\n      var userLevel;\r\n\r\n      var storageKey = \"loglevel\";\r\n      if (typeof name === \"string\") {\r\n        storageKey += \":\" + name;\r\n      } else if (typeof name === \"symbol\") {\r\n        storageKey = undefined;\r\n      }\r\n\r\n      function persistLevelIfPossible(levelNum) {\r\n          var levelName = (logMethods[levelNum] || 'silent').toUpperCase();\r\n\r\n          if (typeof window === undefinedType || !storageKey) return;\r\n\r\n          // Use localStorage if available\r\n          try {\r\n              window.localStorage[storageKey] = levelName;\r\n              return;\r\n          } catch (ignore) {}\r\n\r\n          // Use session cookie as fallback\r\n          try {\r\n              window.document.cookie =\r\n                encodeURIComponent(storageKey) + \"=\" + levelName + \";\";\r\n          } catch (ignore) {}\r\n      }\r\n\r\n      function getPersistedLevel() {\r\n          var storedLevel;\r\n\r\n          if (typeof window === undefinedType || !storageKey) return;\r\n\r\n          try {\r\n              storedLevel = window.localStorage[storageKey];\r\n          } catch (ignore) {}\r\n\r\n          // Fallback to cookies if local storage gives us nothing\r\n          if (typeof storedLevel === undefinedType) {\r\n              try {\r\n                  var cookie = window.document.cookie;\r\n                  var cookieName = encodeURIComponent(storageKey);\r\n                  var location = cookie.indexOf(cookieName + \"=\");\r\n                  if (location !== -1) {\r\n                      storedLevel = /^([^;]+)/.exec(\r\n                          cookie.slice(location + cookieName.length + 1)\r\n                      )[1];\r\n                  }\r\n              } catch (ignore) {}\r\n          }\r\n\r\n          // If the stored level is not valid, treat it as if nothing was stored.\r\n          if (self.levels[storedLevel] === undefined) {\r\n              storedLevel = undefined;\r\n          }\r\n\r\n          return storedLevel;\r\n      }\r\n\r\n      function clearPersistedLevel() {\r\n          if (typeof window === undefinedType || !storageKey) return;\r\n\r\n          // Use localStorage if available\r\n          try {\r\n              window.localStorage.removeItem(storageKey);\r\n          } catch (ignore) {}\r\n\r\n          // Use session cookie as fallback\r\n          try {\r\n              window.document.cookie =\r\n                encodeURIComponent(storageKey) + \"=; expires=Thu, 01 Jan 1970 00:00:00 UTC\";\r\n          } catch (ignore) {}\r\n      }\r\n\r\n      function normalizeLevel(input) {\r\n          var level = input;\r\n          if (typeof level === \"string\" && self.levels[level.toUpperCase()] !== undefined) {\r\n              level = self.levels[level.toUpperCase()];\r\n          }\r\n          if (typeof level === \"number\" && level >= 0 && level <= self.levels.SILENT) {\r\n              return level;\r\n          } else {\r\n              throw new TypeError(\"log.setLevel() called with invalid level: \" + input);\r\n          }\r\n      }\r\n\r\n      /*\r\n       *\r\n       * Public logger API - see https://github.com/pimterry/loglevel for details\r\n       *\r\n       */\r\n\r\n      self.name = name;\r\n\r\n      self.levels = { \"TRACE\": 0, \"DEBUG\": 1, \"INFO\": 2, \"WARN\": 3,\r\n          \"ERROR\": 4, \"SILENT\": 5};\r\n\r\n      self.methodFactory = factory || defaultMethodFactory;\r\n\r\n      self.getLevel = function () {\r\n          if (userLevel != null) {\r\n            return userLevel;\r\n          } else if (defaultLevel != null) {\r\n            return defaultLevel;\r\n          } else {\r\n            return inheritedLevel;\r\n          }\r\n      };\r\n\r\n      self.setLevel = function (level, persist) {\r\n          userLevel = normalizeLevel(level);\r\n          if (persist !== false) {  // defaults to true\r\n              persistLevelIfPossible(userLevel);\r\n          }\r\n\r\n          // NOTE: in v2, this should call rebuild(), which updates children.\r\n          return replaceLoggingMethods.call(self);\r\n      };\r\n\r\n      self.setDefaultLevel = function (level) {\r\n          defaultLevel = normalizeLevel(level);\r\n          if (!getPersistedLevel()) {\r\n              self.setLevel(level, false);\r\n          }\r\n      };\r\n\r\n      self.resetLevel = function () {\r\n          userLevel = null;\r\n          clearPersistedLevel();\r\n          replaceLoggingMethods.call(self);\r\n      };\r\n\r\n      self.enableAll = function(persist) {\r\n          self.setLevel(self.levels.TRACE, persist);\r\n      };\r\n\r\n      self.disableAll = function(persist) {\r\n          self.setLevel(self.levels.SILENT, persist);\r\n      };\r\n\r\n      self.rebuild = function () {\r\n          if (defaultLogger !== self) {\r\n              inheritedLevel = normalizeLevel(defaultLogger.getLevel());\r\n          }\r\n          replaceLoggingMethods.call(self);\r\n\r\n          if (defaultLogger === self) {\r\n              for (var childName in _loggersByName) {\r\n                _loggersByName[childName].rebuild();\r\n              }\r\n          }\r\n      };\r\n\r\n      // Initialize all the internal levels.\r\n      inheritedLevel = normalizeLevel(\r\n          defaultLogger ? defaultLogger.getLevel() : \"WARN\"\r\n      );\r\n      var initialLevel = getPersistedLevel();\r\n      if (initialLevel != null) {\r\n          userLevel = normalizeLevel(initialLevel);\r\n      }\r\n      replaceLoggingMethods.call(self);\r\n    }\r\n\r\n    /*\r\n     *\r\n     * Top-level API\r\n     *\r\n     */\r\n\r\n    defaultLogger = new Logger();\r\n\r\n    defaultLogger.getLogger = function getLogger(name) {\r\n        if ((typeof name !== \"symbol\" && typeof name !== \"string\") || name === \"\") {\r\n            throw new TypeError(\"You must supply a name when creating a logger.\");\r\n        }\r\n\r\n        var logger = _loggersByName[name];\r\n        if (!logger) {\r\n            logger = _loggersByName[name] = new Logger(\r\n                name,\r\n                defaultLogger.methodFactory\r\n            );\r\n        }\r\n        return logger;\r\n    };\r\n\r\n    // Grab the current global log variable in case of overwrite\r\n    var _log = (typeof window !== undefinedType) ? window.log : undefined;\r\n    defaultLogger.noConflict = function() {\r\n        if (typeof window !== undefinedType &&\r\n               window.log === defaultLogger) {\r\n            window.log = _log;\r\n        }\r\n\r\n        return defaultLogger;\r\n    };\r\n\r\n    defaultLogger.getLoggers = function getLoggers() {\r\n        return _loggersByName;\r\n    };\r\n\r\n    // ES6 default export, for compatibility\r\n    defaultLogger['default'] = defaultLogger;\r\n\r\n    return defaultLogger;\r\n}));\r\n"],"names":["root","definition","this","noop","isIE","window","navigator","test","userAgent","logMethods","_loggersByName","defaultLogger","bindMethod","obj","methodName","method","bind","Function","prototype","call","e","apply","arguments","traceForIE","console","log","trace","realMethod","undefined","replaceLoggingMethods","level","getLevel","i","length","methodFactory","name","debug","levels","SILENT","enableLoggingWhenConsoleArrives","defaultMethodFactory","_level","_loggerName","Logger","factory","inheritedLevel","defaultLevel","userLevel","self","storageKey","getPersistedLevel","storedLevel","localStorage","ignore","cookie","document","cookieName","encodeURIComponent","location","indexOf","exec","slice","normalizeLevel","input","toUpperCase","TypeError","setLevel","persist","levelNum","levelName","persistLevelIfPossible","setDefaultLevel","resetLevel","removeItem","clearPersistedLevel","enableAll","TRACE","disableAll","rebuild","childName","initialLevel","getLogger","logger","_log","noConflict","getLoggers","define","amd","module","exports"],"mappings":"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"}