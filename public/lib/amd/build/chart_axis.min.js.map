{"version":3,"file":"chart_axis.min.js","sources":["../src/chart_axis.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * Chart axis.\r\n *\r\n * @module core/chart_axis\r\n * @copyright  2016 Frédéric Massart - FMCorz.net\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\ndefine([], function() {\r\n\r\n    /**\r\n     * Chart axis class.\r\n     *\r\n     * This is used to represent an axis, whether X or Y.\r\n     *\r\n     * @class core/chart_axis\r\n     */\r\n    function Axis() {\r\n        // Please eslint no-empty-function.\r\n    }\r\n\r\n    /**\r\n     * Default axis position.\r\n     * @const {Null}\r\n     */\r\n    Axis.prototype.POS_DEFAULT = null;\r\n\r\n    /**\r\n     * Bottom axis position.\r\n     * @const {String}\r\n     */\r\n    Axis.prototype.POS_BOTTOM = 'bottom';\r\n\r\n    /**\r\n     * Left axis position.\r\n     * @const {String}\r\n     */\r\n    Axis.prototype.POS_LEFT = 'left';\r\n\r\n    /**\r\n     * Right axis position.\r\n     * @const {String}\r\n     */\r\n    Axis.prototype.POS_RIGHT = 'right';\r\n\r\n    /**\r\n     * Top axis position.\r\n     * @const {String}\r\n     */\r\n    Axis.prototype.POS_TOP = 'top';\r\n\r\n    /**\r\n     * Label of the axis.\r\n     * @type {String}\r\n     * @protected\r\n     */\r\n    Axis.prototype._label = null;\r\n\r\n    /**\r\n     * Labels of the ticks.\r\n     * @type {String[]}\r\n     * @protected\r\n     */\r\n    Axis.prototype._labels = null;\r\n\r\n    /**\r\n     * Maximum value of the axis.\r\n     * @type {Number}\r\n     * @protected\r\n     */\r\n    Axis.prototype._max = null;\r\n\r\n    /**\r\n     * Minimum value of the axis.\r\n     * @type {Number}\r\n     * @protected\r\n     */\r\n    Axis.prototype._min = null;\r\n\r\n    /**\r\n     * Position of the axis.\r\n     * @type {String}\r\n     * @protected\r\n     */\r\n    Axis.prototype._position = null;\r\n\r\n    /**\r\n     * Steps on the axis.\r\n     * @type {Number}\r\n     * @protected\r\n     */\r\n    Axis.prototype._stepSize = null;\r\n\r\n    /**\r\n     * Create a new instance of an axis from serialised data.\r\n     *\r\n     * @static\r\n     * @method create\r\n     * @param {Object} obj The data of the axis.\r\n     * @return {module:core/chart_axis}\r\n     */\r\n    Axis.prototype.create = function(obj) {\r\n        var s = new Axis();\r\n        s.setPosition(obj.position);\r\n        s.setLabel(obj.label);\r\n        s.setStepSize(obj.stepSize);\r\n        s.setMax(obj.max);\r\n        s.setMin(obj.min);\r\n        s.setLabels(obj.labels);\r\n        return s;\r\n    };\r\n\r\n    /**\r\n     * Get the label of the axis.\r\n     *\r\n     * @method getLabel\r\n     * @return {String}\r\n     */\r\n    Axis.prototype.getLabel = function() {\r\n        return this._label;\r\n    };\r\n\r\n    /**\r\n     * Get the labels of the ticks of the axis.\r\n     *\r\n     * @method getLabels\r\n     * @return {String[]}\r\n     */\r\n    Axis.prototype.getLabels = function() {\r\n        return this._labels;\r\n    };\r\n\r\n    /**\r\n     * Get the maximum value of the axis.\r\n     *\r\n     * @method getMax\r\n     * @return {Number}\r\n     */\r\n    Axis.prototype.getMax = function() {\r\n        return this._max;\r\n    };\r\n\r\n    /**\r\n     * Get the minimum value of the axis.\r\n     *\r\n     * @method getMin\r\n     * @return {Number}\r\n     */\r\n    Axis.prototype.getMin = function() {\r\n        return this._min;\r\n    };\r\n\r\n    /**\r\n     * Get the position of the axis.\r\n     *\r\n     * @method getPosition\r\n     * @return {String}\r\n     */\r\n    Axis.prototype.getPosition = function() {\r\n        return this._position;\r\n    };\r\n\r\n    /**\r\n     * Get the step size of the axis.\r\n     *\r\n     * @method getStepSize\r\n     * @return {Number}\r\n     */\r\n    Axis.prototype.getStepSize = function() {\r\n        return this._stepSize;\r\n    };\r\n\r\n    /**\r\n     * Set the label of the axis.\r\n     *\r\n     * @method setLabel\r\n     * @param {String} label The label.\r\n     */\r\n    Axis.prototype.setLabel = function(label) {\r\n        this._label = label || null;\r\n    };\r\n\r\n    /**\r\n     * Set the labels of the values on the axis.\r\n     *\r\n     * This automatically sets the [_stepSize]{@link module:core/chart_axis#_stepSize},\r\n     * [_min]{@link module:core/chart_axis#_min} and [_max]{@link module:core/chart_axis#_max}\r\n     * to define a scale from 0 to the number of labels when none of the previously\r\n     * mentioned values have been modified.\r\n     *\r\n     * You can use other values so long that your values in a series are mapped\r\n     * to the values represented by your _min, _max and _stepSize.\r\n     *\r\n     * @method setLabels\r\n     * @param {String[]} labels The labels.\r\n     */\r\n    Axis.prototype.setLabels = function(labels) {\r\n        this._labels = labels || null;\r\n\r\n        // By default we set the grid according to the labels.\r\n        if (this._labels !== null\r\n                && this._stepSize === null\r\n                && (this._min === null || this._min === 0)\r\n                && this._max === null) {\r\n            this.setStepSize(1);\r\n            this.setMin(0);\r\n            this.setMax(labels.length - 1);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Set the maximum value on the axis.\r\n     *\r\n     * When this is not set (or set to null) it is left for the output\r\n     * library to best guess what should be used.\r\n     *\r\n     * @method setMax\r\n     * @param {Number} max The value.\r\n     */\r\n    Axis.prototype.setMax = function(max) {\r\n        this._max = typeof max !== 'undefined' ? max : null;\r\n    };\r\n\r\n    /**\r\n     * Set the minimum value on the axis.\r\n     *\r\n     * When this is not set (or set to null) it is left for the output\r\n     * library to best guess what should be used.\r\n     *\r\n     * @method setMin\r\n     * @param {Number} min The value.\r\n     */\r\n    Axis.prototype.setMin = function(min) {\r\n        this._min = typeof min !== 'undefined' ? min : null;\r\n    };\r\n\r\n    /**\r\n     * Set the position of the axis.\r\n     *\r\n     * This does not validate whether or not the constant used is valid\r\n     * as the axis itself is not aware whether it represents the X or Y axis.\r\n     *\r\n     * The output library has to have a fallback in case the values are incorrect.\r\n     * When this is not set to {@link module:core/chart_axis#POS_DEFAULT} it is up\r\n     * to the output library to choose what position fits best.\r\n     *\r\n     * @method setPosition\r\n     * @param {String} position The value.\r\n     */\r\n    Axis.prototype.setPosition = function(position) {\r\n        if (position != this.POS_DEFAULT\r\n                && position != this.POS_BOTTOM\r\n                && position != this.POS_LEFT\r\n                && position != this.POS_RIGHT\r\n                && position != this.POS_TOP) {\r\n            throw new Error('Invalid axis position.');\r\n        }\r\n        this._position = position;\r\n    };\r\n\r\n    /**\r\n     * Set the stepSize on the axis.\r\n     *\r\n     * This is used to determine where ticks are displayed on the axis between min and max.\r\n     *\r\n     * @method setStepSize\r\n     * @param {Number} stepSize The value.\r\n     */\r\n    Axis.prototype.setStepSize = function(stepSize) {\r\n        if (typeof stepSize === 'undefined' || stepSize === null) {\r\n            stepSize = null;\r\n        } else if (isNaN(Number(stepSize))) {\r\n            throw new Error('Value for stepSize is not a number.');\r\n        } else {\r\n            stepSize = Number(stepSize);\r\n        }\r\n\r\n        this._stepSize = stepSize;\r\n    };\r\n\r\n    return Axis;\r\n\r\n});\r\n"],"names":["define","Axis","prototype","POS_DEFAULT","POS_BOTTOM","POS_LEFT","POS_RIGHT","POS_TOP","_label","_labels","_max","_min","_position","_stepSize","create","obj","s","setPosition","position","setLabel","label","setStepSize","stepSize","setMax","max","setMin","min","setLabels","labels","getLabel","this","getLabels","getMax","getMin","getPosition","getStepSize","length","Error","isNaN","Number"],"mappings":";;;;;;;AAsBAA,yBAAO,IAAI,oBASEC,eAQTA,KAAKC,UAAUC,YAAc,KAM7BF,KAAKC,UAAUE,WAAa,SAM5BH,KAAKC,UAAUG,SAAW,OAM1BJ,KAAKC,UAAUI,UAAY,QAM3BL,KAAKC,UAAUK,QAAU,MAOzBN,KAAKC,UAAUM,OAAS,KAOxBP,KAAKC,UAAUO,QAAU,KAOzBR,KAAKC,UAAUQ,KAAO,KAOtBT,KAAKC,UAAUS,KAAO,KAOtBV,KAAKC,UAAUU,UAAY,KAO3BX,KAAKC,UAAUW,UAAY,KAU3BZ,KAAKC,UAAUY,OAAS,SAASC,SACzBC,EAAI,IAAIf,YACZe,EAAEC,YAAYF,IAAIG,UAClBF,EAAEG,SAASJ,IAAIK,OACfJ,EAAEK,YAAYN,IAAIO,UAClBN,EAAEO,OAAOR,IAAIS,KACbR,EAAES,OAAOV,IAAIW,KACbV,EAAEW,UAAUZ,IAAIa,QACTZ,GASXf,KAAKC,UAAU2B,SAAW,kBACfC,KAAKtB,QAShBP,KAAKC,UAAU6B,UAAY,kBAChBD,KAAKrB,SAShBR,KAAKC,UAAU8B,OAAS,kBACbF,KAAKpB,MAShBT,KAAKC,UAAU+B,OAAS,kBACbH,KAAKnB,MAShBV,KAAKC,UAAUgC,YAAc,kBAClBJ,KAAKlB,WAShBX,KAAKC,UAAUiC,YAAc,kBAClBL,KAAKjB,WAShBZ,KAAKC,UAAUiB,SAAW,SAASC,YAC1BZ,OAASY,OAAS,MAiB3BnB,KAAKC,UAAUyB,UAAY,SAASC,aAC3BnB,QAAUmB,QAAU,KAGJ,OAAjBE,KAAKrB,SACqB,OAAnBqB,KAAKjB,WACU,OAAdiB,KAAKnB,MAA+B,IAAdmB,KAAKnB,MACd,OAAdmB,KAAKpB,YACPW,YAAY,QACZI,OAAO,QACPF,OAAOK,OAAOQ,OAAS,KAapCnC,KAAKC,UAAUqB,OAAS,SAASC,UACxBd,UAAsB,IAARc,IAAsBA,IAAM,MAYnDvB,KAAKC,UAAUuB,OAAS,SAASC,UACxBf,UAAsB,IAARe,IAAsBA,IAAM,MAgBnDzB,KAAKC,UAAUe,YAAc,SAASC,aAC9BA,UAAYY,KAAK3B,aACVe,UAAYY,KAAK1B,YACjBc,UAAYY,KAAKzB,UACjBa,UAAYY,KAAKxB,WACjBY,UAAYY,KAAKvB,cAClB,IAAI8B,MAAM,+BAEfzB,UAAYM,UAWrBjB,KAAKC,UAAUmB,YAAc,SAASC,aAC9B,MAAOA,SACPA,SAAW,SACR,CAAA,GAAIgB,MAAMC,OAAOjB,iBACd,IAAIe,MAAM,uCAEhBf,SAAWiB,OAAOjB,eAGjBT,UAAYS,UAGdrB"}