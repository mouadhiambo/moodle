{"version":3,"file":"bulk_actions.min.js","sources":["../../src/bulkactions/bulk_actions.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\nimport Templates from 'core/templates';\r\nimport {get_string as getString} from 'core/str';\r\nimport {disableStickyFooter, enableStickyFooter} from 'core/sticky-footer';\r\n\r\n/**\r\n * Base class for defining a bulk actions area within a page.\r\n *\r\n * @module     core/bulkactions/bulk_actions\r\n * @copyright  2023 Mihail Geshoski <mihail@moodle.com>\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\n\r\n/** @constant {Object} The object containing the relevant selectors. */\r\nconst Selectors = {\r\n    stickyFooterContainer: '#sticky-footer',\r\n    selectedItemsCountContainer: '[data-type=\"bulkactions\"] [data-for=\"bulkcount\"]',\r\n    cancelBulkActionModeElement: '[data-type=\"bulkactions\"] [data-action=\"bulkcancel\"]',\r\n    bulkModeContainer: '[data-type=\"bulkactions\"]',\r\n    bulkActionsContainer: '[data-type=\"bulkactions\"] [data-for=\"bulktools\"]'\r\n};\r\n\r\nexport default class BulkActions {\r\n\r\n    /** @property {string|null} initialStickyFooterContent The initial content of the sticky footer. */\r\n    initialStickyFooterContent = null;\r\n\r\n    /** @property {Array} selectedItems The array of selected item elements. */\r\n    selectedItems = [];\r\n\r\n    /** @property {boolean} isBulkActionsModeEnabled Whether the bulk actions mode is enabled. */\r\n    isBulkActionsModeEnabled = false;\r\n\r\n    /**\r\n     * @property {int} maxButtons Sets the maximum number of action buttons to display. If exceeded, additional actions\r\n     *                            are shown in a dropdown menu.\r\n     */\r\n    maxButtons = 5;\r\n\r\n    /**\r\n     * The class constructor.\r\n     *\r\n     * @param {int|null} maxButtons Sets the maximum number of action buttons to display. If exceeded, additional actions\r\n     *                              are shown in a dropdown menu.\r\n     * @returns {void}\r\n     */\r\n    constructor(maxButtons = null) {\r\n        if (!this.getStickyFooterContainer()) {\r\n            throw new Error('Sticky footer not found.');\r\n        }\r\n        // Store any pre-existing content in the sticky footer. When bulk actions mode is enabled, this content will be\r\n        // replaced with the bulk actions content and restored when bulk actions mode is disabled.\r\n        this.initialStickyFooterContent = this.getStickyFooterContainer().innerHTML;\r\n        if (maxButtons) {\r\n            this.maxButtons = maxButtons;\r\n        }\r\n        // Register and handle the item select change event.\r\n        this.registerItemSelectChangeEvent(async() => {\r\n            this.selectedItems = this.getSelectedItems();\r\n            if (this.selectedItems.length > 0) { // At least one item is selected.\r\n                // If the bulk actions mode is already enabled only update the selected items count.\r\n                if (this.isBulkActionsModeEnabled) {\r\n                    await this.updateBulkItemSelection();\r\n                } else { // Otherwise, enable the bulk action mode.\r\n                    await this.enableBulkActionsMode();\r\n                }\r\n            } else { // No items are selected, disable the bulk action mode.\r\n                this.disableBulkActionsMode();\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Returns the array of the relevant bulk action objects.\r\n     *\r\n     * @method getBulkActions\r\n     * @returns {Array}\r\n     */\r\n    getBulkActions() {\r\n        throw new Error(`getBulkActions() must be implemented in ${this.constructor.name}`);\r\n    }\r\n\r\n    /**\r\n     * Returns the array of selected items.\r\n     *\r\n     * @method getSelectedItems\r\n     * @returns {Array}\r\n     */\r\n    getSelectedItems() {\r\n        throw new Error(`getSelectedItems() must be implemented in ${this.constructor.name}`);\r\n    }\r\n\r\n    /**\r\n     * Adds the listener for the item select change event.\r\n     * The event handler function that is passed as a parameter should be called right after the event is triggered.\r\n     *\r\n     * @method registerItemSelectChangeEvent\r\n     * @param {function} eventHandler The event handler function.\r\n     * @returns {void}\r\n     */\r\n    registerItemSelectChangeEvent(eventHandler) {\r\n        throw new Error(`registerItemSelectChangeEvent(${eventHandler}) must be implemented in ${this.constructor.name}`);\r\n    }\r\n\r\n    /**\r\n     * Defines the action for deselecting a selected item.\r\n     *\r\n     * The base bulk actions class supports deselecting all selected items but does not have knowledge of the type of the\r\n     * selected element. Therefore, each subclass must explicitly define the action of resetting the attributes that\r\n     * indicate a selected state.\r\n     *\r\n     * @method deselectItem\r\n     * @param {HTMLElement} selectedItem The selected element.\r\n     * @returns {void}\r\n     */\r\n    deselectItem(selectedItem) {\r\n        throw new Error(`deselectItem(${selectedItem}) must be implemented in ${this.constructor.name}`);\r\n    }\r\n\r\n    /**\r\n     * Returns the sticky footer container.\r\n     *\r\n     * @method getStickyFooterContainer\r\n     * @returns {HTMLElement}\r\n     */\r\n    getStickyFooterContainer() {\r\n        return document.querySelector(Selectors.stickyFooterContainer);\r\n    }\r\n\r\n    /**\r\n     * Enables the bulk action mode.\r\n     *\r\n     * @method enableBulkActionsMode\r\n     * @returns {Promise<void>}\r\n     */\r\n    async enableBulkActionsMode() {\r\n        // Make sure that the sticky footer is enabled.\r\n        enableStickyFooter();\r\n        // Render the bulk actions content in the sticky footer container.\r\n        this.getStickyFooterContainer().innerHTML = await this.renderBulkActions();\r\n        const bulkModeContainer = this.getStickyFooterContainer().querySelector(Selectors.bulkModeContainer);\r\n        const bulkActionsContainer = bulkModeContainer.querySelector(Selectors.bulkActionsContainer);\r\n        this.getBulkActions().forEach((bulkAction) => {\r\n            // Register the listener events for each available bulk action.\r\n            bulkAction.registerListenerEvents(bulkActionsContainer);\r\n            // Set the selected items for each available bulk action.\r\n            bulkAction.setSelectedItems(this.selectedItems);\r\n        });\r\n        // Register the click listener event for the cancel bulk mode button.\r\n        bulkModeContainer.addEventListener('click', (e) => {\r\n            if (e.target.closest(Selectors.cancelBulkActionModeElement)) {\r\n                // Deselect all selected items.\r\n                this.selectedItems.forEach((item) => {\r\n                    this.deselectItem(item);\r\n                });\r\n                // Disable the bulk action mode.\r\n                this.disableBulkActionsMode();\r\n            }\r\n        });\r\n        this.isBulkActionsModeEnabled = true;\r\n\r\n        // Calling `renderBulkActions()` already renders the item selection count.\r\n        // Because of this, screen readers will not announce the item selection count on first load given that aria-live regions\r\n        // must be present in the DOM and have their contents changed before screen readers can announce their content.\r\n        // So, we call `updateBulkItemSelection()` after a short delay to ensure that screen readers announce the item count.\r\n        setTimeout(async() => {\r\n            await this.updateBulkItemSelection();\r\n        }, 300);\r\n    }\r\n\r\n    /**\r\n     * Disables the bulk action mode.\r\n     *\r\n     * @method disableBulkActionsMode\r\n     * @returns {void}\r\n     */\r\n    disableBulkActionsMode() {\r\n        // If there was any previous (initial) content in the sticky footer, restore it.\r\n        if (this.initialStickyFooterContent.length > 0) {\r\n            this.getStickyFooterContainer().innerHTML = this.initialStickyFooterContent;\r\n        } else { // No previous content to restore, disable the sticky footer.\r\n            disableStickyFooter();\r\n        }\r\n        this.isBulkActionsModeEnabled = false;\r\n    }\r\n\r\n    /**\r\n     * Renders the bulk actions content.\r\n     *\r\n     * @method renderBulkActions\r\n     * @returns {Promise<string>}\r\n     */\r\n    async renderBulkActions() {\r\n        const data = {\r\n            bulkselectioncount: this.selectedItems.length,\r\n            actions: [],\r\n            moreactions: [],\r\n            hasmoreactions: false,\r\n        };\r\n        const bulkActions = this.getBulkActions();\r\n        const showMoreButton = bulkActions.length > this.maxButtons;\r\n\r\n        // Get all bulk actions and render them in order.\r\n        const actions = await Promise.all(\r\n            bulkActions.map((bulkAction, index) =>\r\n                bulkAction.renderBulkActionTrigger(\r\n                    showMoreButton && (index >= this.maxButtons - 1),\r\n                    index\r\n                )\r\n            )\r\n        );\r\n\r\n        // Separate rendered actions into data.actions and data.moreactions in the correct order.\r\n        actions.forEach((actionTrigger, index) => {\r\n            if (showMoreButton && (index >= this.maxButtons - 1)) {\r\n                data.moreactions.push({'actiontrigger': actionTrigger});\r\n            } else {\r\n                data.actions.push({'actiontrigger': actionTrigger});\r\n            }\r\n        });\r\n\r\n        data.hasmoreactions = data.moreactions.length > 0;\r\n\r\n        return Templates.render('core/bulkactions/bulk_actions', data);\r\n    }\r\n\r\n    /**\r\n     * Updates the selected items count in the bulk actions content.\r\n     *\r\n     * @method updateBulkItemSelection\r\n     * @returns {void}\r\n     */\r\n    async updateBulkItemSelection() {\r\n        const bulkSelection = await getString('bulkselection', 'core', this.selectedItems.length);\r\n        document.querySelector(Selectors.selectedItemsCountContainer).innerHTML = bulkSelection;\r\n    }\r\n}\r\n"],"names":["Selectors","constructor","maxButtons","this","getStickyFooterContainer","Error","initialStickyFooterContent","innerHTML","registerItemSelectChangeEvent","async","selectedItems","getSelectedItems","length","isBulkActionsModeEnabled","updateBulkItemSelection","enableBulkActionsMode","disableBulkActionsMode","getBulkActions","name","eventHandler","deselectItem","selectedItem","document","querySelector","renderBulkActions","bulkModeContainer","bulkActionsContainer","forEach","bulkAction","registerListenerEvents","setSelectedItems","addEventListener","e","target","closest","item","setTimeout","data","bulkselectioncount","actions","moreactions","hasmoreactions","bulkActions","showMoreButton","Promise","all","map","index","renderBulkActionTrigger","actionTrigger","push","Templates","render","bulkSelection"],"mappings":";;;;;;;yJA4BMA,gCACqB,iBADrBA,sCAE2B,mDAF3BA,sCAG2B,uDAH3BA,4BAIiB,4BAJjBA,+BAKoB,iFA2BtBC,kBAAYC,kEAAa,0DArBI,2CAGb,qDAGW,qCAMd,IAUJC,KAAKC,iCACA,IAAIC,MAAM,iCAIfC,2BAA6BH,KAAKC,2BAA2BG,UAC9DL,kBACKA,WAAaA,iBAGjBM,+BAA8BC,eAC1BC,cAAgBP,KAAKQ,mBACtBR,KAAKO,cAAcE,OAAS,EAExBT,KAAKU,+BACCV,KAAKW,gCAELX,KAAKY,6BAGVC,4BAWjBC,uBACU,IAAIZ,wDAAiDF,KAAKF,YAAYiB,OAShFP,yBACU,IAAIN,0DAAmDF,KAAKF,YAAYiB,OAWlFV,8BAA8BW,oBACpB,IAAId,8CAAuCc,iDAAwChB,KAAKF,YAAYiB,OAc9GE,aAAaC,oBACH,IAAIhB,6BAAsBgB,iDAAwClB,KAAKF,YAAYiB,OAS7Fd,kCACWkB,SAASC,cAAcvB,2GAazBI,2BAA2BG,gBAAkBJ,KAAKqB,0BACjDC,kBAAoBtB,KAAKC,2BAA2BmB,cAAcvB,6BAClE0B,qBAAuBD,kBAAkBF,cAAcvB,qCACxDiB,iBAAiBU,SAASC,aAE3BA,WAAWC,uBAAuBH,sBAElCE,WAAWE,iBAAiB3B,KAAKO,kBAGrCe,kBAAkBM,iBAAiB,SAAUC,IACrCA,EAAEC,OAAOC,QAAQlC,8CAEZU,cAAciB,SAASQ,YACnBf,aAAae,cAGjBnB,kCAGRH,0BAA2B,EAMhCuB,YAAW3B,gBACDN,KAAKW,4BACZ,KASPE,yBAEQb,KAAKG,2BAA2BM,OAAS,OACpCR,2BAA2BG,UAAYJ,KAAKG,wEAIhDO,0BAA2B,kCAU1BwB,KAAO,CACTC,mBAAoBnC,KAAKO,cAAcE,OACvC2B,QAAS,GACTC,YAAa,GACbC,gBAAgB,GAEdC,YAAcvC,KAAKc,iBACnB0B,eAAiBD,YAAY9B,OAAST,KAAKD,wBAG3B0C,QAAQC,IAC1BH,YAAYI,KAAI,CAAClB,WAAYmB,QACzBnB,WAAWoB,wBACPL,gBAAmBI,OAAS5C,KAAKD,WAAa,EAC9C6C,WAMJpB,SAAQ,CAACsB,cAAeF,SACxBJ,gBAAmBI,OAAS5C,KAAKD,WAAa,EAC9CmC,KAAKG,YAAYU,KAAK,eAAkBD,gBAExCZ,KAAKE,QAAQW,KAAK,eAAkBD,mBAI5CZ,KAAKI,eAAiBJ,KAAKG,YAAY5B,OAAS,EAEzCuC,mBAAUC,OAAO,gCAAiCf,4CAUnDgB,oBAAsB,mBAAU,gBAAiB,OAAQlD,KAAKO,cAAcE,QAClFU,SAASC,cAAcvB,uCAAuCO,UAAY8C"}