{"version":3,"file":"bulk_action.min.js","sources":["../../src/bulkactions/bulk_action.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * Base class for defining a bulk action.\r\n *\r\n * @module     core/bulkactions/bulk_action\r\n * @copyright  2023 Mihail Geshoski <mihail@moodle.com>\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\n\r\nexport default class BulkAction {\r\n\r\n    /** @property {array} selectedItems The array of selected item elements. */\r\n    selectedItems = [];\r\n\r\n    /**\r\n     * Registers the listener events for the bulk actions.\r\n     *\r\n     * @method registerListenerEvents\r\n     * @param {HTMLElement} containerElement The container element for the bulk actions.\r\n     * @returns {void}\r\n     */\r\n    registerListenerEvents(containerElement) {\r\n        // Listen for the click event on the bulk action trigger element.\r\n        containerElement.addEventListener('click', (e) => {\r\n            if (e.target.closest(this.getBulkActionTriggerSelector())) {\r\n                e.preventDefault();\r\n                this.triggerBulkAction();\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Setter method for the selectedItems property.\r\n     *\r\n     * @method setSelectedItems\r\n     * @param {Array} selectedItems The array of selected item elements..\r\n     * @returns {void}\r\n     */\r\n    setSelectedItems(selectedItems) {\r\n        this.selectedItems = selectedItems;\r\n    }\r\n\r\n    /**\r\n     * Defines the selector of the element that triggers the bulk action.\r\n     *\r\n     * @method getBulkActionTriggerSelector\r\n     * @returns {string}\r\n     */\r\n    getBulkActionTriggerSelector() {\r\n        throw new Error(`getBulkActionTriggerSelector() must be implemented in ${this.constructor.name}`);\r\n    }\r\n\r\n    /**\r\n     * Defines the behavior once the bulk action is triggered.\r\n     *\r\n     * @method triggerBulkAction\r\n     */\r\n    triggerBulkAction() {\r\n        throw new Error(`triggerBulkAction() must be implemented in ${this.constructor.name}`);\r\n    }\r\n\r\n    /**\r\n     * Renders the bulk action trigger element.\r\n     *\r\n     * @method renderBulkActionTrigger\r\n     * @param {boolean} showInDropdown Whether the action is displayed under a 'More' dropdown or as a separate button.\r\n     * @param {number} index The index of the action.\r\n     * @returns {Promise}\r\n     */\r\n    renderBulkActionTrigger(showInDropdown = false, index) {\r\n        throw new Error(`renderBulkActionTrigger(${showInDropdown}, ${index}) must be implemented in ${this.constructor.name}`);\r\n    }\r\n}\r\n"],"names":["registerListenerEvents","containerElement","addEventListener","e","target","closest","this","getBulkActionTriggerSelector","preventDefault","triggerBulkAction","setSelectedItems","selectedItems","Error","constructor","name","renderBulkActionTrigger","index"],"mappings":";;;;;;;;4CA0BoB,2IAShBA,uBAAuBC,kBAEnBA,iBAAiBC,iBAAiB,SAAUC,IACpCA,EAAEC,OAAOC,QAAQC,KAAKC,kCACtBJ,EAAEK,sBACGC,wBAYjBC,iBAAiBC,oBACRA,cAAgBA,cASzBJ,qCACU,IAAIK,sEAA+DN,KAAKO,YAAYC,OAQ9FL,0BACU,IAAIG,2DAAoDN,KAAKO,YAAYC,OAWnFC,8BAAgDC,mDACtC,IAAIJ,6GAAoDI,0CAAiCV,KAAKO,YAAYC"}