{"version":3,"file":"utility.min.js","sources":["../src/utility.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * Javascript handling for HTML attributes. This module gets autoloaded on page load.\r\n *\r\n * With the appropriate HTML attributes, various functionalities defined in this module can be used such as a displaying\r\n * an alert or a confirmation modal, etc.\r\n *\r\n * @module     core/utility\r\n * @copyright  2021 Andrew Nicols <andrew@nicols.co.uk>\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n * @since      4.0\r\n *\r\n * @example <caption>Calling the confirmation modal to delete a block</caption>\r\n *\r\n * // The following is an example of how to use this module via an indirect PHP call with a button.\r\n *\r\n * $controls[] = new action_menu_link_secondary(\r\n *     $deleteactionurl,\r\n *     new pix_icon('t/delete', $str, 'moodle', array('class' => 'iconsmall', 'title' => '')),\r\n *     $str,\r\n *     [\r\n *         'class' => 'editing_delete',\r\n *         'data-modal' => 'confirmation', // Needed so this module will pick it up in the click handler.\r\n *         'data-modal-title-str' => json_encode(['deletecheck_modal', 'block']),\r\n *         'data-modal-content-str' => json_encode(['deleteblockcheck', 'block', $blocktitle]),\r\n *         'data-modal-yes-button-str' => json_encode(['delete', 'core']),\r\n *         'data-modal-toast' => 'true', // Can be set to inform the user that their action was a success.\r\n *         'data-modal-toast-confirmation-str' => json_encode(['deleteblockinprogress', 'block', $blocktitle]),\r\n *         'data-modal-destination' => $deleteconfirmationurl->out(false), // Where do you want to direct the user?\r\n *     ]\r\n * );\r\n */\r\n\r\nimport * as Str from 'core/str';\r\nimport Pending from 'core/pending';\r\nimport {add as addToast} from 'core/toast';\r\nimport {saveCancelPromise, deleteCancelPromise, exception} from 'core/notification';\r\n\r\n// We want to ensure that we only initialize the listeners only once.\r\nlet registered = false;\r\n\r\n/**\r\n * Either fetch the string or return it from the dom node.\r\n *\r\n * @method getConfirmationString\r\n * @private\r\n * @param {HTMLElement} dataset The page element to fetch dataset items in\r\n * @param {String} type The type of string to fetch\r\n * @param {String} field The dataset field name to fetch the contents of\r\n * @param {Array|null} [defaultValue=null] The default params to pass to get_string if no value is found in a dataset\r\n * @return {Promise}\r\n *\r\n */\r\nconst getModalString = (dataset, type, field, defaultValue = null) => {\r\n    if (dataset[`${type}${field}Str`]) {\r\n        return Str.get_string.apply(null, JSON.parse(dataset[`${type}${field}Str`]));\r\n    }\r\n    if (dataset[`${type}${field}`]) {\r\n        return Promise.resolve(dataset[`${type}${field}`]);\r\n    }\r\n\r\n    if (defaultValue) {\r\n        return Str.get_string.apply(null, defaultValue);\r\n    }\r\n\r\n    return null;\r\n};\r\n\r\n/**\r\n * Display a save/cancel confirmation.\r\n *\r\n * @private\r\n * @param {HTMLElement} source The title of the confirmation\r\n * @param {String} type The content of the confirmation\r\n * @returns {Promise}\r\n */\r\nconst displayConfirmation = (source, type) => {\r\n    let confirmationPromise = null;\r\n    if (`${type}Type` in source.dataset && source.dataset[`${type}Type`] === 'delete') {\r\n        confirmationPromise = deleteCancelPromise(\r\n            getModalString(source.dataset, type, 'Title', ['confirm', 'core']),\r\n            getModalString(source.dataset, type, 'Content'),\r\n            getModalString(source.dataset, type, 'YesButton', ['yes', 'core'])\r\n        );\r\n    } else {\r\n        confirmationPromise = saveCancelPromise(\r\n            getModalString(source.dataset, type, 'Title', ['confirm', 'core']),\r\n            getModalString(source.dataset, type, 'Content'),\r\n            getModalString(source.dataset, type, 'YesButton', ['yes', 'core'])\r\n        );\r\n    }\r\n    return confirmationPromise.then(() => {\r\n        if (source.dataset[`${type}Toast`] === 'true') {\r\n            const stringForToast = getModalString(source.dataset, type, 'ToastConfirmation');\r\n            if (typeof stringForToast === \"string\") {\r\n                addToast(stringForToast);\r\n            } else {\r\n                stringForToast.then(str => addToast(str)).catch(e => exception(e));\r\n            }\r\n        }\r\n\r\n        if (source.dataset[`${type}Destination`]) {\r\n            window.location.href = source.dataset[`${type}Destination`];\r\n            return;\r\n        }\r\n\r\n        if (source.closest('form')) {\r\n            // Update the modal and confirmation data fields so that we don't loop.\r\n            source.dataset.confirmation = 'none';\r\n            source.dataset.modal = 'none';\r\n\r\n            // Click on the button again.\r\n            // Note: Do not use the form.submit() because it will not work for cancel buttons.\r\n            source.click();\r\n            return;\r\n        }\r\n\r\n        const link = source.closest('a');\r\n        if (link && link.href && link.href !== '#') {\r\n            window.location.href = link.href;\r\n            return;\r\n        }\r\n\r\n        const button = source.closest('button, input[type=\"submit\"], input[type=\"button\"], input[type=\"reset\"]');\r\n        if (button) {\r\n            source.dataset.modalSubmitting = true;\r\n            source.click();\r\n            return;\r\n        }\r\n\r\n        window.console.error(`No destination found for ${type} modal`);\r\n        return;\r\n    }).catch(() => {\r\n        return;\r\n    });\r\n};\r\n\r\n/**\r\n * Display an alert and return the promise from it.\r\n *\r\n * @private\r\n * @param {String} title The title of the alert\r\n * @param {String} body The content of the alert\r\n * @returns {Promise<ModalAlert>}\r\n */\r\nconst displayAlert = async(title, body) => {\r\n    const pendingPromise = new Pending('core/confirm:alert');\r\n    const AlertModal = await import('core/local/modal/alert');\r\n\r\n    return AlertModal.create({\r\n        title,\r\n        body,\r\n        removeOnClose: true,\r\n        show: true,\r\n    })\r\n    .then((modal) => {\r\n        pendingPromise.resolve();\r\n        return modal;\r\n    });\r\n};\r\n\r\n/**\r\n * Set up the listeners for the confirmation modal widget within the page.\r\n *\r\n * @method registerConfirmationListeners\r\n * @private\r\n */\r\nconst registerConfirmationListeners = () => {\r\n    document.addEventListener('click', e => {\r\n        if (e.target.closest('[data-modal-submitting]')) {\r\n            return;\r\n        }\r\n        const confirmRequest = e.target.closest('[data-confirmation=\"modal\"]');\r\n        if (confirmRequest) {\r\n            e.preventDefault();\r\n            displayConfirmation(confirmRequest, 'confirmation');\r\n        }\r\n\r\n        const modalConfirmation = e.target.closest('[data-modal=\"confirmation\"]');\r\n        if (modalConfirmation) {\r\n            e.preventDefault();\r\n            displayConfirmation(modalConfirmation, 'modal');\r\n        }\r\n\r\n        const alertRequest = e.target.closest('[data-modal=\"alert\"]');\r\n        if (alertRequest) {\r\n            e.preventDefault();\r\n            displayAlert(\r\n                getModalString(alertRequest.dataset, 'modal', 'Title'),\r\n                getModalString(alertRequest.dataset, 'modal', 'Content'),\r\n            );\r\n        }\r\n    });\r\n};\r\n\r\nif (!registered) {\r\n    registerConfirmationListeners();\r\n    registered = true;\r\n}\r\n"],"names":["registered","getModalString","dataset","type","field","defaultValue","Str","get_string","apply","JSON","parse","Promise","resolve","displayConfirmation","source","confirmationPromise","then","stringForToast","str","catch","e","window","location","href","closest","confirmation","modal","click","link","modalSubmitting","console","error","document","addEventListener","target","confirmRequest","preventDefault","modalConfirmation","alertRequest","async","title","body","pendingPromise","Pending","create","removeOnClose","show","displayAlert","registerConfirmationListeners"],"mappings":"iwCAqDIA,YAAa,QAcXC,eAAiB,SAACC,QAASC,KAAMC,WAAOC,oEAAe,YACrDH,kBAAWC,aAAOC,cACXE,IAAIC,WAAWC,MAAM,KAAMC,KAAKC,MAAMR,kBAAWC,aAAOC,gBAE/DF,kBAAWC,aAAOC,QACXO,QAAQC,QAAQV,kBAAWC,aAAOC,SAGzCC,aACOC,IAAIC,WAAWC,MAAM,KAAMH,cAG/B,MAWLQ,oBAAsB,CAACC,OAAQX,YAC7BY,oBAAsB,YAEtBA,oBADA,UAAGZ,eAAcW,OAAOZ,SAA6C,WAAlCY,OAAOZ,kBAAWC,eAC/B,qCAClBF,eAAea,OAAOZ,QAASC,KAAM,QAAS,CAAC,UAAW,SAC1DF,eAAea,OAAOZ,QAASC,KAAM,WACrCF,eAAea,OAAOZ,QAASC,KAAM,YAAa,CAAC,MAAO,WAGxC,mCAClBF,eAAea,OAAOZ,QAASC,KAAM,QAAS,CAAC,UAAW,SAC1DF,eAAea,OAAOZ,QAASC,KAAM,WACrCF,eAAea,OAAOZ,QAASC,KAAM,YAAa,CAAC,MAAO,UAG3DY,oBAAoBC,MAAK,QACW,SAAnCF,OAAOZ,kBAAWC,eAAyB,OACrCc,eAAiBhB,eAAea,OAAOZ,QAASC,KAAM,qBAC9B,iBAAnBc,8BACEA,gBAETA,eAAeD,MAAKE,MAAO,cAASA,OAAMC,OAAMC,IAAK,2BAAUA,QAInEN,OAAOZ,kBAAWC,iCAClBkB,OAAOC,SAASC,KAAOT,OAAOZ,kBAAWC,yBAIzCW,OAAOU,QAAQ,eAEfV,OAAOZ,QAAQuB,aAAe,OAC9BX,OAAOZ,QAAQwB,MAAQ,YAIvBZ,OAAOa,cAILC,KAAOd,OAAOU,QAAQ,QACxBI,MAAQA,KAAKL,MAAsB,MAAdK,KAAKL,iBAC1BF,OAAOC,SAASC,KAAOK,KAAKL,SAIjBT,OAAOU,QAAQ,kFAE1BV,OAAOZ,QAAQ2B,iBAAkB,OACjCf,OAAOa,QAIXN,OAAOS,QAAQC,yCAAkC5B,mBAElDgB,OAAM,UA+DRnB,aA5BiC,MAClCgC,SAASC,iBAAiB,SAASb,OAC3BA,EAAEc,OAAOV,QAAQ,wCAGfW,eAAiBf,EAAEc,OAAOV,QAAQ,+BACpCW,iBACAf,EAAEgB,iBACFvB,oBAAoBsB,eAAgB,uBAGlCE,kBAAoBjB,EAAEc,OAAOV,QAAQ,+BACvCa,oBACAjB,EAAEgB,iBACFvB,oBAAoBwB,kBAAmB,gBAGrCC,aAAelB,EAAEc,OAAOV,QAAQ,wBAClCc,eACAlB,EAAEgB,iBAzCOG,OAAMC,MAAOC,cACxBC,eAAiB,IAAIC,iBAAQ,kpBAGjBC,OAAO,CACrBJ,MAAAA,MACAC,KAAAA,KACAI,eAAe,EACfC,MAAM,IAET9B,MAAMU,QACHgB,eAAe9B,UACRc,UA8BHqB,CACI9C,eAAeqC,aAAapC,QAAS,QAAS,SAC9CD,eAAeqC,aAAapC,QAAS,QAAS,iBAO1D8C,GACAhD,YAAa"}