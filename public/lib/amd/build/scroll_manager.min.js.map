{"version":3,"file":"scroll_manager.min.js","sources":["../src/scroll_manager.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * Scroll manager is a class that help with saving the scroll positing when you\r\n * click on an action icon, and then when the page is reloaded after processing\r\n * the action, it scrolls you to exactly where you were. This is much nicer for\r\n * the user.\r\n *\r\n * To use this in your code, you need to ensure that:\r\n * 1. The button that triggers the action has to have a click event handler that\r\n *    calls saveScrollPos()\r\n * 2. After doing the processing, the redirect() function will add 'mdlscrollto'\r\n *    parameter into the redirect url automatically.\r\n * 3. Finally, on the page that is reloaded (which should be the same as the one\r\n *    the user started on) you need to call scrollToSavedPosition()\r\n *    on page load.\r\n *\r\n * @module     core/scroll_manager\r\n * @copyright  2021 The Open University\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\n\r\n/** @property {HTMLElement} scrollingElement the current scrolling element. */\r\nlet scrollingElement = null;\r\n\r\n/**\r\n * Is the element scrollable?\r\n *\r\n * @param {HTMLElement} element Element.\r\n * @returns {boolean}\r\n */\r\nconst isScrollable = (element) => {\r\n    // Check if the element has scrollable content.\r\n    const hasScrollableContent = element.scrollHeight > element.clientHeight;\r\n\r\n    // If 'overflow-y' is set to hidden, the scroll bar is't show.\r\n    const elementOverflow = window.getComputedStyle(element).overflowY;\r\n    const isOverflowHidden = elementOverflow.indexOf('hidden') !== -1;\r\n\r\n    return hasScrollableContent && !isOverflowHidden;\r\n};\r\n\r\n/**\r\n * Get the scrolling element.\r\n *\r\n * @returns {HTMLElement}\r\n */\r\nconst getScrollingElement = () => {\r\n    if (scrollingElement === null) {\r\n        const page = document.getElementById('page');\r\n        if (isScrollable(page)) {\r\n            scrollingElement = page;\r\n        } else {\r\n            scrollingElement = document.scrollingElement;\r\n        }\r\n    }\r\n\r\n    return scrollingElement;\r\n};\r\n\r\n/**\r\n * Get current scroll position.\r\n *\r\n * @returns {Number} Scroll position.\r\n */\r\nconst getScrollPos = () => {\r\n    const scrollingElement = getScrollingElement();\r\n\r\n    return scrollingElement.scrollTop;\r\n};\r\n\r\n/**\r\n * Get the scroll position for this form.\r\n *\r\n * @param {HTMLFormElement} form\r\n * @returns {HTMLInputElement}\r\n */\r\nconst getScrollPositionElement = (form) => {\r\n    const element = form.querySelector('input[name=mdlscrollto]');\r\n    if (element) {\r\n        return element;\r\n    }\r\n\r\n    const scrollPos = document.createElement('input');\r\n    scrollPos.type = 'hidden';\r\n    scrollPos.name = 'mdlscrollto';\r\n    form.appendChild(scrollPos);\r\n\r\n    return scrollPos;\r\n};\r\n\r\n/**\r\n * In the form that contains the element, set the value of the form field with\r\n * name mdlscrollto to the current scroll position. If there is no element with\r\n * that name, it creates a hidden form field with that name within the form.\r\n *\r\n * @param {string} elementId The element in the form.\r\n */\r\nexport const saveScrollPos = (elementId) => {\r\n    const element = document.getElementById(elementId);\r\n    const form = element.closest('form');\r\n    if (!form) {\r\n        return;\r\n    }\r\n\r\n    saveScrollPositionToForm(form);\r\n};\r\n\r\n/**\r\n * Init event handlers for all links with data-savescrollposition=true.\r\n * Set the value to the closest form.\r\n */\r\nexport const watchScrollButtonSaves = () => {\r\n    document.addEventListener('click', (e) => {\r\n        const button = e.target.closest('[data-savescrollposition=\"true\"]');\r\n        if (button) {\r\n            saveScrollPositionToForm(button.form);\r\n        }\r\n    });\r\n};\r\n\r\n/**\r\n * Save the position to form.\r\n *\r\n * @param {Object} form The form is saved scroll position.\r\n */\r\nexport const saveScrollPositionToForm = (form) => {\r\n    getScrollPositionElement(form).value = getScrollPos();\r\n};\r\n\r\n/**\r\n * Init event handlers for all links with data-save-scroll=true.\r\n * Handle to add mdlscrollto parameter to link using js when we click on the link.\r\n *\r\n */\r\nexport const initLinksScrollPos = () => {\r\n    document.addEventListener('click', (e) => {\r\n        const link = e.target.closest('a[data-save-scroll=true]');\r\n        if (!link) {\r\n            return;\r\n        }\r\n\r\n        e.preventDefault();\r\n        const url = new URL(e.target.href);\r\n        url.searchParams.set('mdlscrollto', getScrollPos());\r\n        window.location = url;\r\n    });\r\n};\r\n\r\n/**\r\n * If there is a parameter like mdlscrollto=123 in the URL, scroll to that saved position.\r\n */\r\nexport const scrollToSavedPosition = () => {\r\n    const url = new URL(window.location.href);\r\n    if (!url.searchParams.has('mdlscrollto')) {\r\n        return;\r\n    }\r\n\r\n    const scrollPosition = url.searchParams.get('mdlscrollto');\r\n\r\n    // Event onDOMReady is the effective one here. I am leaving the immediate call to\r\n    // window.scrollTo in case it reduces flicker.\r\n    const scrollingElement = getScrollingElement();\r\n    scrollingElement.scrollTo(0, scrollPosition);\r\n    document.addEventListener('DOMContentLoaded', () => {\r\n        scrollingElement.scrollTo(0, scrollPosition);\r\n    });\r\n};\r\n"],"names":["scrollingElement","getScrollingElement","page","document","getElementById","element","hasScrollableContent","scrollHeight","clientHeight","isOverflowHidden","window","getComputedStyle","overflowY","indexOf","isScrollable","getScrollPos","scrollTop","elementId","form","closest","saveScrollPositionToForm","addEventListener","e","button","target","querySelector","scrollPos","createElement","type","name","appendChild","getScrollPositionElement","value","preventDefault","url","URL","href","searchParams","set","location","has","scrollPosition","get","scrollTo"],"mappings":";;;;;;;;;;;;;;;;;;;;IAoCIA,iBAAmB,WAwBjBC,oBAAsB,QACC,OAArBD,iBAA2B,OACrBE,KAAOC,SAASC,eAAe,QAEjCJ,iBApBUK,CAAAA,gBAEZC,qBAAuBD,QAAQE,aAAeF,QAAQG,aAItDC,kBAA0D,IADxCC,OAAOC,iBAAiBN,SAASO,UAChBC,QAAQ,iBAE1CP,uBAAyBG,kBAWxBK,CAAaZ,MACMA,KAEAC,SAASH,wBAI7BA,kBAQLe,aAAe,IACQd,sBAEDe,iCA8BEC,kBAEpBC,KADUf,SAASC,eAAea,WACnBE,QAAQ,QACxBD,MAILE,yBAAyBF,uCAOS,KAClCf,SAASkB,iBAAiB,SAAUC,UAC1BC,OAASD,EAAEE,OAAOL,QAAQ,oCAC5BI,QACAH,yBAAyBG,OAAOL,gBAU/BE,yBAA4BF,OAjDPA,CAAAA,aACxBb,QAAUa,KAAKO,cAAc,8BAC/BpB,eACOA,cAGLqB,UAAYvB,SAASwB,cAAc,gBACzCD,UAAUE,KAAO,SACjBF,UAAUG,KAAO,cACjBX,KAAKY,YAAYJ,WAEVA,WAuCPK,CAAyBb,MAAMc,MAAQjB,uGAQT,KAC9BZ,SAASkB,iBAAiB,SAAUC,QACnBA,EAAEE,OAAOL,QAAQ,mCAK9BG,EAAEW,uBACIC,IAAM,IAAIC,IAAIb,EAAEE,OAAOY,MAC7BF,IAAIG,aAAaC,IAAI,cAAevB,gBACpCL,OAAO6B,SAAWL,uCAOW,WAC3BA,IAAM,IAAIC,IAAIzB,OAAO6B,SAASH,UAC/BF,IAAIG,aAAaG,IAAI,4BAIpBC,eAAiBP,IAAIG,aAAaK,IAAI,eAItC1C,iBAAmBC,sBACzBD,iBAAiB2C,SAAS,EAAGF,gBAC7BtC,SAASkB,iBAAiB,oBAAoB,KAC1CrB,iBAAiB2C,SAAS,EAAGF"}