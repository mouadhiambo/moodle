{"version":3,"file":"paged_content_paging_bar.min.js","sources":["../src/paged_content_paging_bar.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * Javascript to enhance the paged content paging bar.\r\n *\r\n * @module     core/paged_content_paging_bar\r\n * @copyright  2018 Ryan Wyllie <ryan@moodle.com>\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\ndefine([\r\n    'jquery',\r\n    'core/custom_interaction_events',\r\n    'core/paged_content_events',\r\n    'core/str',\r\n    'core/pubsub',\r\n    'core/pending',\r\n],\r\nfunction(\r\n    $,\r\n    CustomEvents,\r\n    PagedContentEvents,\r\n    Str,\r\n    PubSub,\r\n    Pending\r\n) {\r\n\r\n    var SELECTORS = {\r\n        ROOT: '[data-region=\"paging-bar\"]',\r\n        PAGE: '[data-page]',\r\n        PAGE_ITEM: '[data-region=\"page-item\"]',\r\n        PAGE_LINK: '[data-region=\"page-link\"]',\r\n        FIRST_BUTTON: '[data-control=\"first\"]',\r\n        LAST_BUTTON: '[data-control=\"last\"]',\r\n        NEXT_BUTTON: '[data-control=\"next\"]',\r\n        PREVIOUS_BUTTON: '[data-control=\"previous\"]',\r\n        DOTS_BUTTONS: '[data-dots]',\r\n        BEGINNING_DOTS_BUTTON: '[data-dots=\"beginning\"]',\r\n        ENDING_DOTS_BUTTON: '[data-dots=\"ending\"]',\r\n    };\r\n\r\n    /**\r\n     * Get the page element by number.\r\n     *\r\n     * @param {object} root The root element.\r\n     * @param {Number} pageNumber The page number.\r\n     * @return {jQuery}\r\n     */\r\n    var getPageByNumber = function(root, pageNumber) {\r\n        return root.find(SELECTORS.PAGE_ITEM + '[data-page-number=\"' + pageNumber + '\"]');\r\n    };\r\n\r\n    /**\r\n     * Get the next button element.\r\n     *\r\n     * @param {object} root The root element.\r\n     * @return {jQuery}\r\n     */\r\n    var getNextButton = function(root) {\r\n        return root.find(SELECTORS.NEXT_BUTTON);\r\n    };\r\n\r\n    /**\r\n     * Set the last page number after which no more pages\r\n     * should be loaded.\r\n     *\r\n     * @param {object} root The root element.\r\n     * @param {Number} number Page number.\r\n     */\r\n    var setLastPageNumber = function(root, number) {\r\n        root.attr('data-last-page-number', number);\r\n    };\r\n\r\n    /**\r\n     * Get the last page number.\r\n     *\r\n     * @param {object} root The root element.\r\n     * @return {Number}\r\n     */\r\n    var getLastPageNumber = function(root) {\r\n        return parseInt(root.attr('data-last-page-number'), 10);\r\n    };\r\n\r\n    /**\r\n     * Get the active page number.\r\n     *\r\n     * @param {object} root The root element.\r\n     * @returns {Number} The page number\r\n     */\r\n    var getActivePageNumber = function(root) {\r\n        return parseInt(root.attr('data-active-page-number'), 10);\r\n    };\r\n\r\n    /**\r\n     * Set the active page number.\r\n     *\r\n     * @param {object} root The root element.\r\n     * @param {Number} number Page number.\r\n     */\r\n    var setActivePageNumber = function(root, number) {\r\n        root.attr('data-active-page-number', number);\r\n    };\r\n\r\n    /**\r\n     * Check if there is an active page number.\r\n     *\r\n     * @param {object} root The root element.\r\n     * @returns {bool}\r\n     */\r\n    var hasActivePageNumber = function(root) {\r\n        var number = getActivePageNumber(root);\r\n        return !isNaN(number) && number != 0;\r\n    };\r\n\r\n    /**\r\n     * Get the page number for a given page.\r\n     *\r\n     * @param {object} root The root element.\r\n     * @param {object} page The page element.\r\n     * @returns {Number} The page number\r\n     */\r\n    var getPageNumber = function(root, page) {\r\n        if (page.attr('data-page') != undefined) {\r\n            // If it's an actual page then we can just use the page number\r\n            // attribute.\r\n            return parseInt(page.attr('data-page-number'), 10);\r\n        }\r\n\r\n        var pageNumber = 1;\r\n        var activePageNumber = null;\r\n\r\n        switch (page.attr('data-control')) {\r\n            case 'first':\r\n                pageNumber = 1;\r\n                break;\r\n\r\n            case 'last':\r\n                pageNumber = getLastPageNumber(root);\r\n                break;\r\n\r\n            case 'next':\r\n                activePageNumber = getActivePageNumber(root);\r\n                var lastPage = getLastPageNumber(root);\r\n                if (!lastPage) {\r\n                    pageNumber = activePageNumber + 1;\r\n                } else if (activePageNumber && activePageNumber < lastPage) {\r\n                    pageNumber = activePageNumber + 1;\r\n                } else {\r\n                    pageNumber = lastPage;\r\n                }\r\n                break;\r\n\r\n            case 'previous':\r\n                activePageNumber = getActivePageNumber(root);\r\n                if (activePageNumber && activePageNumber > 1) {\r\n                    pageNumber = activePageNumber - 1;\r\n                } else {\r\n                    pageNumber = 1;\r\n                }\r\n                break;\r\n\r\n            default:\r\n                pageNumber = 1;\r\n                break;\r\n        }\r\n\r\n        // Make sure we return an int not a string.\r\n        return parseInt(pageNumber, 10);\r\n    };\r\n\r\n    /**\r\n     * Get the limit of items for each page.\r\n     *\r\n     * @param {object} root The root element.\r\n     * @returns {Number}\r\n     */\r\n    var getLimit = function(root) {\r\n        return parseInt(root.attr('data-items-per-page'), 10);\r\n    };\r\n\r\n    /**\r\n     * Set the limit of items for each page.\r\n     *\r\n     * @param {object} root The root element.\r\n     * @param {Number} limit Items per page limit.\r\n     */\r\n    var setLimit = function(root, limit) {\r\n        root.attr('data-items-per-page', limit);\r\n    };\r\n\r\n    /**\r\n     * Show the paging bar.\r\n     *\r\n     * @param {object} root The root element.\r\n     */\r\n    var show = function(root) {\r\n        root.removeClass('hidden');\r\n    };\r\n\r\n    /**\r\n     * Hide the paging bar.\r\n     *\r\n     * @param {object} root The root element.\r\n     */\r\n    var hide = function(root) {\r\n        root.addClass('hidden');\r\n    };\r\n\r\n    /**\r\n     * Disable the next and last buttons in the paging bar.\r\n     *\r\n     * @param {object} root The root element.\r\n     */\r\n    var disableNextControlButtons = function(root) {\r\n        var nextButton = root.find(SELECTORS.NEXT_BUTTON);\r\n        var lastButton = root.find(SELECTORS.LAST_BUTTON);\r\n\r\n        nextButton.addClass('disabled');\r\n        nextButton.attr('aria-disabled', true);\r\n        lastButton.addClass('disabled');\r\n        lastButton.attr('aria-disabled', true);\r\n    };\r\n\r\n    /**\r\n     * Enable the next and last buttons in the paging bar.\r\n     *\r\n     * @param {object} root The root element.\r\n     */\r\n    var enableNextControlButtons = function(root) {\r\n        var nextButton = root.find(SELECTORS.NEXT_BUTTON);\r\n        var lastButton = root.find(SELECTORS.LAST_BUTTON);\r\n\r\n        nextButton.removeClass('disabled');\r\n        nextButton.removeAttr('aria-disabled');\r\n        lastButton.removeClass('disabled');\r\n        lastButton.removeAttr('aria-disabled');\r\n    };\r\n\r\n    /**\r\n     * Disable the previous and first buttons in the paging bar.\r\n     *\r\n     * @param {object} root The root element.\r\n     */\r\n    var disablePreviousControlButtons = function(root) {\r\n        var previousButton = root.find(SELECTORS.PREVIOUS_BUTTON);\r\n        var firstButton = root.find(SELECTORS.FIRST_BUTTON);\r\n\r\n        previousButton.addClass('disabled');\r\n        previousButton.attr('aria-disabled', true);\r\n        firstButton.addClass('disabled');\r\n        firstButton.attr('aria-disabled', true);\r\n    };\r\n\r\n    /**\r\n     * Adjusts the size of the paging bar and hides unnecessary pages.\r\n     *\r\n     * @param {object} root The root element.\r\n     */\r\n    var adjustPagingBarSize = function(root) {\r\n        var activePageNumber = getActivePageNumber(root);\r\n        var lastPageNumber = getLastPageNumber(root);\r\n\r\n        var dotsButtons = root.find(SELECTORS.DOTS_BUTTONS);\r\n        var beginningDotsButton = root.find(SELECTORS.BEGINNING_DOTS_BUTTON);\r\n        var endingDotsButton = root.find(SELECTORS.ENDING_DOTS_BUTTON);\r\n\r\n        var pages = root.find(SELECTORS.PAGE);\r\n        var barSize = parseInt(root.attr('data-bar-size'), 10);\r\n\r\n        if (barSize && lastPageNumber > barSize) {\r\n\r\n            var minpage = Math.max(activePageNumber - Math.round(barSize / 2), 1);\r\n            var maxpage = minpage + barSize - 1;\r\n\r\n            if (maxpage >= lastPageNumber) {\r\n                maxpage = lastPageNumber;\r\n                minpage = maxpage - barSize + 1;\r\n            }\r\n\r\n            if (minpage > 1) {\r\n                show(beginningDotsButton);\r\n                minpage++;\r\n            } else {\r\n                hide(beginningDotsButton);\r\n            }\r\n            if (maxpage < lastPageNumber) {\r\n                show(endingDotsButton);\r\n                maxpage--;\r\n            } else {\r\n                hide(endingDotsButton);\r\n            }\r\n            dotsButtons.addClass('disabled');\r\n            dotsButtons.attr('aria-disabled', true);\r\n\r\n            hide(pages);\r\n\r\n            pages.each(function(index, page) {\r\n                page = $(page);\r\n                if ((index + 1) >= minpage && (index + 1) <= maxpage) {\r\n                    show(page);\r\n                }\r\n            });\r\n\r\n        } else {\r\n            hide(dotsButtons);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Enable the previous and first buttons in the paging bar.\r\n     *\r\n     * @param {object} root The root element.\r\n     */\r\n    var enablePreviousControlButtons = function(root) {\r\n        var previousButton = root.find(SELECTORS.PREVIOUS_BUTTON);\r\n        var firstButton = root.find(SELECTORS.FIRST_BUTTON);\r\n\r\n        previousButton.removeClass('disabled');\r\n        previousButton.removeAttr('aria-disabled');\r\n        firstButton.removeClass('disabled');\r\n        firstButton.removeAttr('aria-disabled');\r\n    };\r\n\r\n    /**\r\n     * Get the components for a get_string request for the aria-label\r\n     * on a page. The value is a comma separated string of key and\r\n     * component.\r\n     *\r\n     * @param {object} root The root element.\r\n     * @return {array} First element is the key, second is the component.\r\n     */\r\n    var getPageAriaLabelComponents = function(root) {\r\n        var componentString = root.attr('data-aria-label-components-pagination-item');\r\n        var components = componentString.split(',').map(function(component) {\r\n            return component.trim();\r\n        });\r\n        return components;\r\n    };\r\n\r\n    /**\r\n     * Get the components for a get_string request for the aria-label\r\n     * on an active page. The value is a comma separated string of key and\r\n     * component.\r\n     *\r\n     * @param {object} root The root element.\r\n     * @return {array} First element is the key, second is the component.\r\n     */\r\n    var getActivePageAriaLabelComponents = function(root) {\r\n        var componentString = root.attr('data-aria-label-components-pagination-active-item');\r\n        var components = componentString.split(',').map(function(component) {\r\n            return component.trim();\r\n        });\r\n        return components;\r\n    };\r\n\r\n    /**\r\n     * Set page numbers on each of the given items. Page numbers are set\r\n     * from 1..n (where n is the number of items).\r\n     *\r\n     * Sets the active page number to be the last page found with\r\n     * an \"active\" class (if any).\r\n     *\r\n     * Sets the last page number.\r\n     *\r\n     * @param {object} root The root element.\r\n     * @param {jQuery} items A jQuery list of items.\r\n     */\r\n    var generatePageNumbers = function(root, items) {\r\n        var lastPageNumber = 0;\r\n        setActivePageNumber(root, 0);\r\n\r\n        items.each(function(index, item) {\r\n            var pageNumber = index + 1;\r\n            item = $(item);\r\n            item.attr('data-page-number', pageNumber);\r\n            lastPageNumber++;\r\n\r\n            if (item.hasClass('active')) {\r\n                setActivePageNumber(root, pageNumber);\r\n            }\r\n        });\r\n\r\n        setLastPageNumber(root, lastPageNumber);\r\n    };\r\n\r\n    /**\r\n     * Set the aria-labels on each of the page items in the paging bar.\r\n     * This includes the next, previous, first, and last items.\r\n     *\r\n     * @param {object} root The root element.\r\n     */\r\n    var generateAriaLabels = function(root) {\r\n        var pageAriaLabelComponents = getPageAriaLabelComponents(root);\r\n        var activePageAriaLabelComponents = getActivePageAriaLabelComponents(root);\r\n        var activePageNumber = getActivePageNumber(root);\r\n        var pageItems = root.find(SELECTORS.PAGE_ITEM);\r\n        // We want to request all of the strings at once rather than\r\n        // one at a time.\r\n        var stringRequests = pageItems.toArray().map(function(index, page) {\r\n            page = $(page);\r\n            var pageNumber = getPageNumber(root, page);\r\n\r\n            if (pageNumber === activePageNumber) {\r\n                return {\r\n                    key: activePageAriaLabelComponents[0],\r\n                    component: activePageAriaLabelComponents[1],\r\n                    param: pageNumber\r\n                };\r\n            } else {\r\n                return {\r\n                    key: pageAriaLabelComponents[0],\r\n                    component: pageAriaLabelComponents[1],\r\n                    param: pageNumber\r\n                };\r\n            }\r\n        });\r\n\r\n        Str.get_strings(stringRequests).then(function(strings) {\r\n            pageItems.each(function(index, page) {\r\n                page = $(page);\r\n                var string = strings[index];\r\n                page.attr('aria-label', string);\r\n                page.find(SELECTORS.PAGE_LINK).attr('aria-label', string);\r\n            });\r\n\r\n            return strings;\r\n        })\r\n        .catch(function() {\r\n            // No need to interrupt the page if we can't load the aria lang strings.\r\n            return;\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Make the paging bar item for the given page number visible and fire\r\n     * the SHOW_PAGES paged content event to tell any listening content to\r\n     * update.\r\n     *\r\n     * @param {object} root The root element.\r\n     * @param {Number} pageNumber The number for the page to show.\r\n     * @param {string} id A uniqie id for this instance.\r\n     */\r\n    var showPage = function(root, pageNumber, id) {\r\n        var pendingPromise = new Pending('core/paged_content_paging_bar:showPage');\r\n        var lastPageNumber = getLastPageNumber(root);\r\n        var isSamePage = pageNumber == getActivePageNumber(root);\r\n        var limit = getLimit(root);\r\n        var offset = (pageNumber - 1) * limit;\r\n\r\n        if (!isSamePage) {\r\n            // We only need to toggle the active class if the user didn't click\r\n            // on the already active page.\r\n            root.find(SELECTORS.PAGE_ITEM).removeClass('active').removeAttr('aria-current');\r\n            var page = getPageByNumber(root, pageNumber);\r\n            page.addClass('active');\r\n            page.attr('aria-current', true);\r\n            setActivePageNumber(root, pageNumber);\r\n\r\n            adjustPagingBarSize(root);\r\n        }\r\n\r\n        // Make sure the control buttons are disabled as the user navigates\r\n        // to either end of the limits.\r\n        if (lastPageNumber && pageNumber >= lastPageNumber) {\r\n            disableNextControlButtons(root);\r\n        } else {\r\n            enableNextControlButtons(root);\r\n        }\r\n\r\n        if (pageNumber > 1) {\r\n            enablePreviousControlButtons(root);\r\n        } else {\r\n            disablePreviousControlButtons(root);\r\n        }\r\n\r\n        generateAriaLabels(root);\r\n\r\n        // This event requires a payload that contains a list of all pages that\r\n        // were activated. In the case of the paging bar we only show one page at\r\n        // a time.\r\n        PubSub.publish(id + PagedContentEvents.SHOW_PAGES, [{\r\n            pageNumber: pageNumber,\r\n            limit: limit,\r\n            offset: offset\r\n        }]);\r\n\r\n        pendingPromise.resolve();\r\n    };\r\n\r\n    /**\r\n     * Add event listeners for interactions with the paging bar as well as listening\r\n     * for custom paged content events.\r\n     *\r\n     * Each event will trigger different logic to update parts of the paging bar's\r\n     * display.\r\n     *\r\n     * @param {object} root The root element.\r\n     * @param {string} id A uniqie id for this instance.\r\n     */\r\n    var registerEventListeners = function(root, id) {\r\n        var ignoreControlWhileLoading = root.attr('data-ignore-control-while-loading');\r\n        var loading = false;\r\n\r\n        if (ignoreControlWhileLoading == \"\") {\r\n            // Default to ignoring control while loading if not specified.\r\n            ignoreControlWhileLoading = true;\r\n        }\r\n\r\n        CustomEvents.define(root, [\r\n            CustomEvents.events.activate\r\n        ]);\r\n\r\n        root.on(CustomEvents.events.activate, SELECTORS.PAGE_ITEM, function(e, data) {\r\n            data.originalEvent.preventDefault();\r\n            data.originalEvent.stopPropagation();\r\n\r\n            if (ignoreControlWhileLoading && loading) {\r\n                // Do nothing if configured to ignore control while loading.\r\n                return;\r\n            }\r\n\r\n            var page = $(e.target).closest(SELECTORS.PAGE_ITEM);\r\n\r\n            if (!page.hasClass('disabled')) {\r\n                var pageNumber = getPageNumber(root, page);\r\n                showPage(root, pageNumber, id);\r\n                loading = true;\r\n            }\r\n        });\r\n\r\n        // This event is fired when all of the items have been loaded. Typically used\r\n        // in an \"infinite\" pages context when we don't know the exact number of pages\r\n        // ahead of time.\r\n        PubSub.subscribe(id + PagedContentEvents.ALL_ITEMS_LOADED, function(pageNumber) {\r\n            loading = false;\r\n            var currentLastPage = getLastPageNumber(root);\r\n\r\n            if (!currentLastPage || pageNumber < currentLastPage) {\r\n                // Somehow the value we've got saved is higher than the new\r\n                // value we just received. Perhaps events came out of order.\r\n                // In any case, save the lowest value.\r\n                setLastPageNumber(root, pageNumber);\r\n            }\r\n\r\n            if (pageNumber === 1 && root.attr('data-hide-control-on-single-page')) {\r\n                // If all items were loaded on the first page then we can hide\r\n                // the paging bar because there are no other pages to load.\r\n                hide(root);\r\n                disableNextControlButtons(root);\r\n                disablePreviousControlButtons(root);\r\n            } else {\r\n                show(root);\r\n                disableNextControlButtons(root);\r\n            }\r\n        });\r\n\r\n        // This event is fired after all of the requested pages have been rendered.\r\n        PubSub.subscribe(id + PagedContentEvents.PAGES_SHOWN, function() {\r\n            // All pages have been shown so turn off the loading flag.\r\n            loading = false;\r\n        });\r\n\r\n        // This is triggered when the paging limit is modified.\r\n        PubSub.subscribe(id + PagedContentEvents.SET_ITEMS_PER_PAGE_LIMIT, function(limit) {\r\n            // Update the limit.\r\n            setLimit(root, limit);\r\n            setLastPageNumber(root, 0);\r\n            setActivePageNumber(root, 0);\r\n            show(root);\r\n            // Reload the data from page 1 again.\r\n            showPage(root, 1, id);\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Initialise the paging bar.\r\n     * @param {object} root The root element.\r\n     * @param {string} id A uniqie id for this instance.\r\n     */\r\n    var init = function(root, id) {\r\n        root = $(root);\r\n        var pages = root.find(SELECTORS.PAGE);\r\n        generatePageNumbers(root, pages);\r\n        registerEventListeners(root, id);\r\n\r\n        if (hasActivePageNumber(root)) {\r\n            var activePageNumber = getActivePageNumber(root);\r\n            // If the the paging bar was rendered with an active page selected\r\n            // then make sure we fired off the event to tell the content page to\r\n            // show.\r\n            getPageByNumber(root, activePageNumber).click();\r\n            if (activePageNumber == 1) {\r\n                // If the first page is active then disable the previous buttons.\r\n                disablePreviousControlButtons(root);\r\n            }\r\n        } else {\r\n            // There was no active page number so load the first page using\r\n            // the next button. This allows the infinite pagination to work.\r\n            getNextButton(root).click();\r\n        }\r\n\r\n        adjustPagingBarSize(root);\r\n    };\r\n\r\n    return {\r\n        init: init,\r\n        disableNextControlButtons: disableNextControlButtons,\r\n        enableNextControlButtons: enableNextControlButtons,\r\n        disablePreviousControlButtons: disablePreviousControlButtons,\r\n        enablePreviousControlButtons: enablePreviousControlButtons,\r\n        showPage: showPage,\r\n        rootSelector: SELECTORS.ROOT,\r\n    };\r\n});\r\n"],"names":["define","$","CustomEvents","PagedContentEvents","Str","PubSub","Pending","SELECTORS","getPageByNumber","root","pageNumber","find","setLastPageNumber","number","attr","getLastPageNumber","parseInt","getActivePageNumber","setActivePageNumber","getPageNumber","page","undefined","activePageNumber","lastPage","show","removeClass","hide","addClass","disableNextControlButtons","nextButton","lastButton","enableNextControlButtons","removeAttr","disablePreviousControlButtons","previousButton","firstButton","adjustPagingBarSize","lastPageNumber","dotsButtons","beginningDotsButton","endingDotsButton","pages","barSize","minpage","Math","max","round","maxpage","each","index","enablePreviousControlButtons","showPage","id","pendingPromise","isSamePage","limit","getLimit","offset","pageAriaLabelComponents","split","map","component","trim","getPageAriaLabelComponents","activePageAriaLabelComponents","getActivePageAriaLabelComponents","pageItems","stringRequests","toArray","key","param","get_strings","then","strings","string","catch","generateAriaLabels","publish","SHOW_PAGES","resolve","init","items","item","hasClass","generatePageNumbers","ignoreControlWhileLoading","loading","events","activate","on","e","data","originalEvent","preventDefault","stopPropagation","target","closest","subscribe","ALL_ITEMS_LOADED","currentLastPage","PAGES_SHOWN","SET_ITEMS_PER_PAGE_LIMIT","setLimit","registerEventListeners","isNaN","hasActivePageNumber","click","getNextButton","rootSelector"],"mappings":"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"}