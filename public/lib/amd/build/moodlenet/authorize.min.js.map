{"version":3,"file":"authorize.min.js","sources":["../../src/moodlenet/authorize.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * MoodleNet authorization.\r\n *\r\n * @module     core/moodlenet/authorize\r\n * @copyright  2023 Huong Nguyen <huongnv13@gmail.com>\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n * @since      4.3\r\n */\r\n\r\nimport {alert as displayAlert, exception as displayException} from 'core/notification';\r\nimport * as MoodleNetService from 'core/moodlenet/service';\r\nimport {sendToMoodleNet} from 'core/moodlenet/send_resource';\r\n\r\n/**\r\n * Handle authorization with MoodleNet server.\r\n *\r\n * @param {int} issuerId The OAuth 2 issuer ID.\r\n * @param {int} courseId Course id.\r\n * @param {int} resourceId Resource id.\r\n * @param {int} shareFormat Share format.\r\n * @return {promise}\r\n */\r\nexport const handleAuthorization = (issuerId, courseId, resourceId, shareFormat) => {\r\n    const windowSizeWidth = 550;\r\n    const windowSizeHeight = 550;\r\n\r\n    // Check if the user is authorized with MoodleNet or not.\r\n    return MoodleNetService.authorizationCheck(issuerId, courseId).then(async(data) => {\r\n        if (!data.status) {\r\n            // Not yet authorized.\r\n            // Declare moodleNetAuthorize variable, so we can call it later in the callback.\r\n            window.moodleNetAuthorize = (error, errorDescription) => {\r\n                // This will be called by the callback after the authorization is successful.\r\n                if (error === '') {\r\n                    handleAuthorization(issuerId, courseId, resourceId, shareFormat);\r\n                } else if (error !== 'access_denied') {\r\n                    displayAlert(\r\n                        'Authorization error',\r\n                        'Error: ' + error + '<br><br>Error description: ' + errorDescription,\r\n                        'Cancel'\r\n                    );\r\n                }\r\n            };\r\n            // Open the login url of the OAuth 2 issuer for user to login into MoodleNet and authorize.\r\n            return window.open(data.loginurl, 'moodlenet_auth',\r\n                `location=0,status=0,width=${windowSizeWidth},height=${windowSizeHeight},scrollbars=yes`);\r\n        } else {\r\n            // Already authorized.\r\n            return sendToMoodleNet(issuerId, resourceId, shareFormat);\r\n        }\r\n    }).catch(displayException);\r\n};\r\n"],"names":["handleAuthorization","issuerId","courseId","resourceId","shareFormat","MoodleNetService","authorizationCheck","then","async","data","status","window","moodleNetAuthorize","error","errorDescription","open","loginurl","catch","displayException"],"mappings":";;;;;;;;8BAqCaA,oBAAsB,CAACC,SAAUC,SAAUC,WAAYC,cAKzDC,iBAAiBC,mBAAmBL,SAAUC,UAAUK,MAAKC,MAAAA,MAC3DC,KAAKC,QAoBC,kCAAgBT,SAAUE,WAAYC,cAjB7CO,OAAOC,mBAAqB,CAACC,MAAOC,oBAElB,KAAVD,MACAb,oBAAoBC,SAAUC,SAAUC,WAAYC,aACnC,kBAAVS,+BAEH,sBACA,UAAYA,MAAQ,8BAAgCC,iBACpD,WAKLH,OAAOI,KAAKN,KAAKO,SAAU,qDArBlB,uBACC,2BA0BtBC,MAAMC"}