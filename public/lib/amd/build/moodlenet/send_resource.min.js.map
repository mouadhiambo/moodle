{"version":3,"file":"send_resource.min.js","sources":["../../src/moodlenet/send_resource.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * A module to handle Share operations of the MoodleNet.\r\n *\r\n * @module     core/moodlenet/send_resource\r\n * @copyright  2023 Huong Nguyen <huongnv13@gmail.com>\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n * @since      4.2\r\n */\r\n\r\nimport Config from 'core/config';\r\nimport {addNotification, exception as displayException} from 'core/notification';\r\nimport {getString} from 'core/str';\r\nimport Prefetch from \"core/prefetch\";\r\nimport * as Templates from 'core/templates';\r\nimport {publish} from 'core/pubsub';\r\nimport * as MoodleNetService from 'core/moodlenet/service';\r\nimport SendActivityModal from 'core/moodlenet/send_activity_modal';\r\nimport * as MoodleNetAuthorize from 'core/moodlenet/authorize';\r\nimport MoodleNetEvents from 'core/moodlenet/events';\r\n\r\nconst TYPE_ACTIVITY = \"activity\";\r\nconst TYPE_COURSE = \"course\";\r\nconst TYPE_PARTIAL_COURSE = \"partial\";\r\n\r\nlet listenersRegistered = false;\r\nlet currentModal;\r\nlet siteSupportUrl;\r\nlet issuerId;\r\nlet courseId;\r\nlet resourceId;\r\nlet shareFormat;\r\nlet type;\r\nlet selectedCmIds;\r\n\r\n/**\r\n * Handle send to MoodleNet.\r\n *\r\n * @param {int} issuerId The OAuth 2 issuer ID.\r\n * @param {int} resourceId The resource ID, it can be a course or an activity.\r\n * @param {int} shareFormat The share format.\r\n */\r\nexport const sendToMoodleNet = (issuerId, resourceId, shareFormat) => {\r\n    const $modal = currentModal.getModal();\r\n    const modal = $modal[0];\r\n    modal.querySelector('.modal-header').classList.remove('no-border');\r\n    modal.querySelector('.modal-header').classList.add('no-header-text');\r\n\r\n    currentModal.setBody(Templates.render('core/moodlenet/send_activity_modal_packaging', {}));\r\n    currentModal.hideFooter();\r\n\r\n    let infoPromise;\r\n    if (type === TYPE_ACTIVITY) {\r\n        infoPromise = MoodleNetService.sendActivity(issuerId, resourceId, shareFormat);\r\n    } else if (type === TYPE_COURSE) {\r\n        infoPromise = MoodleNetService.sendCourse(issuerId, resourceId, shareFormat);\r\n    } else if (type === TYPE_PARTIAL_COURSE) {\r\n        if (selectedCmIds.length > 1) {\r\n            infoPromise = MoodleNetService.sendPartialCourse(issuerId, resourceId, selectedCmIds, shareFormat);\r\n        } else {\r\n            infoPromise = MoodleNetService.sendActivity(issuerId, selectedCmIds[0], shareFormat);\r\n        }\r\n    }\r\n    infoPromise.then(async(data) => {\r\n        const status = data.status;\r\n        const resourceUrl = data.resourceurl;\r\n        return responseFromMoodleNet(status, resourceUrl);\r\n    }).catch(displayException);\r\n};\r\n\r\n/**\r\n * Handle response from MoodleNet.\r\n *\r\n * @param {boolean} status Response status. True if successful.\r\n * @param {String} resourceUrl Resource URL.\r\n */\r\nconst responseFromMoodleNet = (status, resourceUrl = '') => {\r\n    const $modal = currentModal.getModal();\r\n    const modal = $modal[0];\r\n    modal.querySelector('.modal-header').classList.add('no-border');\r\n    currentModal.setBody(Templates.render('core/moodlenet/send_activity_modal_done', {\r\n        success: status,\r\n        sitesupporturl: siteSupportUrl,\r\n    }));\r\n\r\n    if (status) {\r\n        currentModal.setFooter(Templates.render('core/moodlenet/send_activity_modal_footer_view', {\r\n            resourceurl: resourceUrl,\r\n        }));\r\n        currentModal.showFooter();\r\n    }\r\n};\r\n\r\n/**\r\n * Render the modal to send resource to MoodleNet.\r\n *\r\n * @param {object} data The data of the resource to be shared.\r\n * @param {array} selectedActivities Selected activities.\r\n */\r\nconst renderModal = async(data, selectedActivities) => {\r\n    if (data.status) {\r\n        siteSupportUrl = data.supportpageurl;\r\n        issuerId = data.issuerid;\r\n        let modalConfig = {\r\n            templateContext: {\r\n                'activitytype': data.type,\r\n                'activityname': data.name,\r\n                'server': data.server,\r\n            }\r\n        };\r\n        if (selectedActivities.length > 0) {\r\n            selectedCmIds = selectedActivities;\r\n        }\r\n        if (selectedActivities.length > 1) {\r\n            modalConfig.templateContext.fullsharing = false;\r\n            modalConfig.templateContext.selectedactivitiesnotice = await getString('moodlenet:sharenoticepartialactivitynumber',\r\n                'moodle', selectedActivities.length);\r\n            modalConfig.templateContext.sharenotice = await getString('moodlenet:sharenoticepartial', 'moodle');\r\n        } else {\r\n            modalConfig.templateContext.fullsharing = true;\r\n            if (type === TYPE_ACTIVITY || (type === TYPE_PARTIAL_COURSE && selectedActivities.length == 1)) {\r\n                modalConfig.templateContext.sharenotice = await getString('moodlenet:sharenoticeactivity', 'moodle');\r\n            } else {\r\n                modalConfig.templateContext.sharenotice = await getString('moodlenet:sharenoticecourse', 'moodle');\r\n            }\r\n        }\r\n\r\n        return SendActivityModal.create(modalConfig);\r\n    } else {\r\n        return addNotification({\r\n            message: data.warnings[0].message,\r\n            type: 'error'\r\n        });\r\n    }\r\n};\r\n\r\n/**\r\n * Handle modal.\r\n * @param {string} shareActionType Share action type.\r\n * @param {array} selectedActivities Selected activities.\r\n */\r\nexport const handleModal = (shareActionType, selectedActivities = []) => {\r\n    const resourceId = Config.contextInstanceId;\r\n    type = shareActionType;\r\n\r\n    Promise.resolve(type)\r\n        .then((type) => {\r\n            if (type === TYPE_ACTIVITY) {\r\n                return MoodleNetService.getActivityInformation(resourceId);\r\n            } else if (type === TYPE_COURSE) {\r\n                return MoodleNetService.getCourseInformation(resourceId);\r\n            } else if (type === TYPE_PARTIAL_COURSE) {\r\n                if (selectedActivities.length > 1) {\r\n                    // Selected more than one activity.\r\n                    return MoodleNetService.getCourseInformation(resourceId);\r\n                } else {\r\n                    // Select only one activity. Switch to activity mode.\r\n                    return MoodleNetService.getActivityInformation(selectedActivities[0]);\r\n                }\r\n            }\r\n            throw new Error(`Unknown type ${type}`);\r\n        })\r\n        .then((data) => {\r\n            return renderModal(data, selectedActivities);\r\n        })\r\n        .then((modal) => {\r\n            currentModal = modal;\r\n            return currentModal;\r\n        })\r\n        .catch(displayException);\r\n};\r\n\r\n/**\r\n * Register events.\r\n */\r\nconst registerEventListeners = () => {\r\n    document.addEventListener('click', (e) => {\r\n        const shareAction = e.target.closest('[data-action=\"sendtomoodlenet\"]');\r\n        const sendAction = e.target.closest('.moodlenet-action-buttons [data-action=\"share\"]');\r\n        if (shareAction) {\r\n            e.preventDefault();\r\n            type = shareAction.getAttribute('data-type');\r\n            handleModal(shareAction.getAttribute('data-type'));\r\n        }\r\n\r\n        if (sendAction) {\r\n            e.preventDefault();\r\n            publish(MoodleNetEvents.MOODLENET_SHARE_STARTED, {});\r\n            courseId = Config.courseId;\r\n            resourceId = Config.contextInstanceId;\r\n            shareFormat = 0;\r\n            MoodleNetAuthorize.handleAuthorization(issuerId, courseId, resourceId, shareFormat);\r\n        }\r\n    });\r\n};\r\n\r\n\r\n/**\r\n * Initialize.\r\n */\r\nexport const init = () => {\r\n    if (!listenersRegistered) {\r\n        Prefetch.prefetchTemplates([\r\n            'core/moodlenet/send_activity_modal_base',\r\n            'core/moodlenet/send_activity_modal_packaging',\r\n            'core/moodlenet/send_activity_modal_done',\r\n            'core/moodlenet/send_activity_modal_footer_view',\r\n            'core/moodlenet/send_activity_modal_footer_share',\r\n        ]);\r\n        registerEventListeners();\r\n        listenersRegistered = true;\r\n    }\r\n};\r\n"],"names":["currentModal","siteSupportUrl","issuerId","courseId","resourceId","shareFormat","type","selectedCmIds","listenersRegistered","modal","getModal","infoPromise","querySelector","classList","remove","add","setBody","Templates","render","hideFooter","MoodleNetService","sendActivity","sendCourse","length","sendPartialCourse","then","async","status","data","resourceUrl","resourceurl","responseFromMoodleNet","catch","displayException","$modal","success","sitesupporturl","setFooter","showFooter","renderModal","selectedActivities","supportpageurl","issuerid","modalConfig","templateContext","name","server","fullsharing","selectedactivitiesnotice","sharenotice","SendActivityModal","create","message","warnings","handleModal","shareActionType","Config","contextInstanceId","Promise","resolve","getActivityInformation","getCourseInformation","Error","prefetchTemplates","document","addEventListener","e","shareAction","target","closest","sendAction","preventDefault","getAttribute","MoodleNetEvents","MOODLENET_SHARE_STARTED","MoodleNetAuthorize","handleAuthorization"],"mappings":"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"}