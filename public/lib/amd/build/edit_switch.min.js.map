{"version":3,"file":"edit_switch.min.js","sources":["../src/edit_switch.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * Controls the edit switch.\r\n *\r\n * @module     core/edit_switch\r\n * @copyright  2021 Bas Brands <bas@moodle.com>\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\n\r\nimport {call as fetchMany} from 'core/ajax';\r\nimport {dispatchEvent} from 'core/event_dispatcher';\r\nimport {exception as displayException} from 'core/notification';\r\n\r\n/**\r\n * Change the Edit mode.\r\n *\r\n * @param {number} context The contextid that editing is being set for\r\n * @param {bool} setmode Whether editing is set or not\r\n * @return {Promise} Resolved with an array file the stored file url.\r\n */\r\nconst setEditMode = (context, setmode) => fetchMany([{\r\n    methodname: 'core_change_editmode',\r\n    args: {\r\n        context,\r\n        setmode,\r\n    },\r\n}])[0];\r\n\r\n/**\r\n * Toggle the edit switch\r\n *\r\n * @method\r\n * @protected\r\n * @param {HTMLElement} editSwitch\r\n */\r\nconst toggleEditSwitch = editSwitch => {\r\n    if (editSwitch.checked) {\r\n        editSwitch.setAttribute('aria-checked', true);\r\n    } else {\r\n        editSwitch.setAttribute('aria-checked', false);\r\n    }\r\n\r\n    const event = notifyEditModeSet(editSwitch, editSwitch.checked);\r\n    if (!event.defaultPrevented) {\r\n        editSwitch.setAttribute('disabled', true);\r\n        window.location = editSwitch.dataset.pageurl;\r\n    }\r\n};\r\n\r\n/**\r\n * Names of events for core/edit_switch.\r\n *\r\n * @static\r\n * @property {String} editModeSet See {@link event:core/edit_switch/editModeSet}\r\n */\r\nexport const eventTypes = {\r\n    /**\r\n     * An event triggered when the edit mode toggled.\r\n     *\r\n     * @event core/edit_switch/editModeSet\r\n     * @type {CustomEvent}\r\n     * @property {HTMLElement} target The switch used to toggle the edit mode\r\n     * @property {object} detail\r\n     * @property {bool} detail.editMode\r\n     */\r\n    editModeSet: 'core/edit_switch/editModeSet',\r\n};\r\n\r\n/**\r\n * Dispatch the editModeSet event after changing the edit mode.\r\n *\r\n * This event is cancelable.\r\n *\r\n * The default action is to reload the page after toggling the edit mode.\r\n *\r\n * @method\r\n * @protected\r\n * @param {HTMLElement} container\r\n * @param {bool} editMode\r\n * @returns {CustomEvent}\r\n */\r\nconst notifyEditModeSet = (container, editMode) => dispatchEvent(\r\n    eventTypes.editModeSet,\r\n    {editMode},\r\n    container,\r\n    {cancelable: true}\r\n);\r\n\r\n/**\r\n * Add the eventlistener for the editswitch.\r\n *\r\n * @param {string} editingSwitchId The id of the editing switch to listen for\r\n */\r\nexport const init = editingSwitchId => {\r\n    const editSwitch = document.getElementById(editingSwitchId);\r\n    editSwitch.addEventListener('change', () => {\r\n        setEditMode(editSwitch.dataset.context, editSwitch.checked)\r\n        .then(result => {\r\n            if (result.success) {\r\n                toggleEditSwitch(editSwitch);\r\n            } else {\r\n                editSwitch.checked = false;\r\n            }\r\n            return;\r\n        })\r\n        .catch(displayException);\r\n    });\r\n};\r\n"],"names":["eventTypes","editModeSet","notifyEditModeSet","container","editMode","cancelable","editingSwitchId","editSwitch","document","getElementById","addEventListener","context","setmode","dataset","checked","methodname","args","then","result","success","setAttribute","defaultPrevented","window","location","pageurl","toggleEditSwitch","catch","displayException"],"mappings":";;;;;;;;MAqEaA,WAAa,CAUtBC,YAAa,qEAgBXC,kBAAoB,CAACC,UAAWC,YAAa,mCAC/CJ,WAAWC,YACX,CAACG,SAAAA,UACDD,UACA,CAACE,YAAY,kBAQGC,wBACVC,WAAaC,SAASC,eAAeH,iBAC3CC,WAAWG,iBAAiB,UAAU,KA3EtB,IAACC,QAASC,SAATD,QA4EDJ,WAAWM,QAAQF,QA5ETC,QA4EkBL,WAAWO,SA5EjB,cAAU,CAAC,CACjDC,WAAY,uBACZC,KAAM,CACFL,QAAAA,QACAC,QAAAA,YAEJ,IAuEKK,MAAKC,SACEA,OAAOC,QA/DEZ,CAAAA,aACjBA,WAAWO,QACXP,WAAWa,aAAa,gBAAgB,GAExCb,WAAWa,aAAa,gBAAgB,GAG9BlB,kBAAkBK,WAAYA,WAAWO,SAC5CO,mBACPd,WAAWa,aAAa,YAAY,GACpCE,OAAOC,SAAWhB,WAAWM,QAAQW,UAsD7BC,CAAiBlB,YAEjBA,WAAWO,SAAU,KAI5BY,MAAMC"}