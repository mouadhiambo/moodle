{"version":3,"file":"checkbox-toggleall.min.js","sources":["../src/checkbox-toggleall.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * A module to help with toggle select/deselect all.\r\n *\r\n * @module     core/checkbox-toggleall\r\n * @copyright  2019 Andrew Nicols <andrew@nicols.co.uk>\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\ndefine(['jquery', 'core/pubsub'], function($, PubSub) {\r\n\r\n    /**\r\n     * Whether event listeners have already been registered.\r\n     *\r\n     * @private\r\n     * @type {boolean}\r\n     */\r\n    var registered = false;\r\n\r\n    /**\r\n     * List of custom events that this module publishes.\r\n     *\r\n     * @private\r\n     * @type {{checkboxToggled: string}}\r\n     */\r\n    var events = {\r\n        checkboxToggled: 'core/checkbox-toggleall:checkboxToggled',\r\n    };\r\n\r\n    /**\r\n     * Fetches elements that are member of a given toggle group.\r\n     *\r\n     * @private\r\n     * @param {jQuery} root The root jQuery element.\r\n     * @param {string} toggleGroup The toggle group name that we're searching form.\r\n     * @param {boolean} exactMatch Whether we want an exact match we just want to match toggle groups that start with the given\r\n     *                             toggle group name.\r\n     * @returns {jQuery} The elements matching the given toggle group.\r\n     */\r\n    var getToggleGroupElements = function(root, toggleGroup, exactMatch) {\r\n        if (exactMatch) {\r\n            return root.find('[data-action=\"toggle\"][data-togglegroup=\"' + toggleGroup + '\"]');\r\n        } else {\r\n            return root.find('[data-action=\"toggle\"][data-togglegroup^=\"' + toggleGroup + '\"]');\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Fetches the target checkboxes for a given toggle group.\r\n     *\r\n     * @private\r\n     * @param {jQuery} root The root jQuery element.\r\n     * @param {string} toggleGroup The toggle group name.\r\n     * @returns {jQuery} The target checkboxes belonging to the toggle group.\r\n     */\r\n    var getAllTargetCheckboxes = function(root, toggleGroup) {\r\n        const targets = getToggleGroupElements(root, toggleGroup, false).filter('[data-toggle=\"target\"]');\r\n\r\n        // TODO: Remove this backward compatibility code in Moodle 6.0.\r\n        const oldTargets = getToggleGroupElements(root, toggleGroup, false).filter('[data-toggle=\"slave\"]');\r\n        if (Array.isArray(oldTargets) && oldTargets.length > 0) {\r\n            window.console.warn('The use of data-toggle=\"slave\" is deprecated. Please use data-toggle=\"target\" instead.');\r\n            targets.concat(oldTargets);\r\n        }\r\n        // End of backward compatibility code.\r\n\r\n        return targets;\r\n    };\r\n\r\n    /**\r\n     * Fetches the toggler elements (checkboxes or buttons) that control the target checkboxes in a given toggle group.\r\n     *\r\n     * @private\r\n     * @param {jQuery} root The root jQuery element.\r\n     * @param {string} toggleGroup The toggle group name.\r\n     * @param {boolean} exactMatch\r\n     * @returns {jQuery} The control elements belonging to the toggle group.\r\n     */\r\n    var getControlCheckboxes = function(root, toggleGroup, exactMatch) {\r\n        const togglers = getToggleGroupElements(root, toggleGroup, exactMatch).filter('[data-toggle=\"toggler\"]');\r\n\r\n        // TODO: Remove this backward compatibility code in Moodle 6.0.\r\n        const oldTogglers = getToggleGroupElements(root, toggleGroup, exactMatch).filter('[data-toggle=\"master\"]');\r\n        if (Array.isArray(oldTogglers) && oldTogglers.length > 0) {\r\n            window.console.warn('The use of data-toggle=\"master\" is deprecated. Please use data-toggle=\"toggler\" instead.');\r\n            togglers.concat(oldTogglers);\r\n        }\r\n        // End of backward compatibility code.\r\n\r\n        return togglers;\r\n    };\r\n\r\n    /**\r\n     * Fetches the action elements that perform actions on the selected checkboxes in a given toggle group.\r\n     *\r\n     * @private\r\n     * @param {jQuery} root The root jQuery element.\r\n     * @param {string} toggleGroup The toggle group name.\r\n     * @returns {jQuery} The action elements belonging to the toggle group.\r\n     */\r\n    var getActionElements = function(root, toggleGroup) {\r\n        return getToggleGroupElements(root, toggleGroup, true).filter('[data-toggle=\"action\"]');\r\n    };\r\n\r\n    /**\r\n     * Toggles the target checkboxes in a given toggle group when a toggler element in that toggle group is toggled.\r\n     *\r\n     * @private\r\n     * @param {Object} e The event object.\r\n     */\r\n    var toggleTargetsFromTogglers = function(e) {\r\n        var root = e.data.root;\r\n        var target = $(e.target);\r\n\r\n        var toggleGroupName = target.data('togglegroup');\r\n        var targetState;\r\n        if (target.is(':checkbox')) {\r\n            targetState = target.is(':checked');\r\n        } else {\r\n            targetState = target.data('checkall') === 1;\r\n        }\r\n\r\n        toggleTargetsToState(root, toggleGroupName, targetState);\r\n    };\r\n\r\n    /**\r\n     * Toggles the target checkboxes from the togglers.\r\n     *\r\n     * @param {HTMLElement} root\r\n     * @param {String} toggleGroupName\r\n     * @deprecated since Moodle 5.0.\r\n     */\r\n    var updateSlavesFromMasterState = function(root, toggleGroupName) {\r\n        window.console.warn(\r\n            'The use of updateSlavesFromMasterState is deprecated. Please use updateTargetsFromTogglerState instead.'\r\n        );\r\n        updateTargetsFromTogglerState(root, toggleGroupName);\r\n    };\r\n\r\n    /**\r\n     * Toggles the target checkboxes from the togglers.\r\n     *\r\n     * @param {HTMLElement} root\r\n     * @param {String} toggleGroupName\r\n     */\r\n    var updateTargetsFromTogglerState = function(root, toggleGroupName) {\r\n        // Normalise to jQuery Object.\r\n        root = $(root);\r\n\r\n        var target = getControlCheckboxes(root, toggleGroupName, false);\r\n        var targetState;\r\n        if (target.is(':checkbox')) {\r\n            targetState = target.is(':checked');\r\n        } else {\r\n            targetState = target.data('checkall') === 1;\r\n        }\r\n\r\n        toggleTargetsToState(root, toggleGroupName, targetState);\r\n    };\r\n\r\n    /**\r\n     * Toggles the toggler checkboxes and action elements in a given toggle group.\r\n     *\r\n     * @param {jQuery} root The root jQuery element.\r\n     * @param {String} toggleGroupName The name of the toggle group\r\n     */\r\n    var toggleTogglersAndActionElements = function(root, toggleGroupName) {\r\n        var toggleGroupTargets = getAllTargetCheckboxes(root, toggleGroupName);\r\n        if (toggleGroupTargets.length > 0) {\r\n            var toggleGroupCheckedTargets = toggleGroupTargets.filter(':checked');\r\n            var targetState = toggleGroupTargets.length === toggleGroupCheckedTargets.length;\r\n\r\n            // Make sure to toggle the exact toggler checkbox in the given toggle group.\r\n            setTogglerStates(root, toggleGroupName, targetState, true);\r\n            // Enable the action elements if there's at least one checkbox checked in the given toggle group.\r\n            // Disable otherwise.\r\n            setActionElementStates(root, toggleGroupName, !toggleGroupCheckedTargets.length);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Returns an array containing every toggle group level of a given toggle group.\r\n     *\r\n     * @param {String} toggleGroupName The name of the toggle group\r\n     * @return {Array} toggleGroupLevels Array that contains every toggle group level of a given toggle group\r\n     */\r\n    var getToggleGroupLevels = function(toggleGroupName) {\r\n        var toggleGroups = toggleGroupName.split(' ');\r\n        var toggleGroupLevels = [];\r\n        var toggleGroupLevel = '';\r\n\r\n        toggleGroups.forEach(function(toggleGroupName) {\r\n            toggleGroupLevel += ' ' + toggleGroupName;\r\n            toggleGroupLevels.push(toggleGroupLevel.trim());\r\n        });\r\n\r\n        return toggleGroupLevels;\r\n    };\r\n\r\n    /**\r\n     * Toggles the target checkboxes to a specific state.\r\n     *\r\n     * @param {HTMLElement} root\r\n     * @param {String} toggleGroupName\r\n     * @param {Bool} targetState\r\n     */\r\n    var toggleTargetsToState = function(root, toggleGroupName, targetState) {\r\n        var targets = getAllTargetCheckboxes(root, toggleGroupName);\r\n        // Set the target checkboxes from the togglers and manually trigger the native 'change' event.\r\n        targets.prop('checked', targetState).trigger('change');\r\n        // Get all checked targets after the change of state.\r\n        var checkedTargets = targets.filter(':checked');\r\n\r\n        // Toggle the toggler checkbox in the given toggle group.\r\n        setTogglerStates(root, toggleGroupName, targetState, false);\r\n        // Enable the action elements if there's at least one checkbox checked in the given toggle group. Disable otherwise.\r\n        setActionElementStates(root, toggleGroupName, !checkedTargets.length);\r\n\r\n        // Get all toggle group levels and toggle accordingly all parent toggler checkboxes and action elements from each\r\n        // level. Exclude the given toggle group (toggleGroupName) as the toggler checkboxes and action elements from this\r\n        // level have been already toggled.\r\n        var toggleGroupLevels = getToggleGroupLevels(toggleGroupName)\r\n            .filter(toggleGroupLevel => toggleGroupLevel !== toggleGroupName);\r\n\r\n        toggleGroupLevels.forEach(function(toggleGroupLevel) {\r\n            // Toggle the toggler checkboxes action elements in the given toggle group level.\r\n            toggleTogglersAndActionElements(root, toggleGroupLevel);\r\n        });\r\n\r\n        PubSub.publish(events.checkboxToggled, {\r\n            root: root,\r\n            toggleGroupName: toggleGroupName,\r\n            targets: targets,\r\n            checkedTargets: checkedTargets,\r\n            anyChecked: targetState,\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Set the state for an entire group of checkboxes.\r\n     *\r\n     * @param {HTMLElement} root\r\n     * @param {String} toggleGroupName\r\n     * @param {Bool} targetState\r\n     */\r\n    var setGroupState = function(root, toggleGroupName, targetState) {\r\n        // Normalise to jQuery Object.\r\n        root = $(root);\r\n\r\n        // Set the toggler and targets.\r\n        setTogglerStates(root, toggleGroupName, targetState, true);\r\n        toggleTargetsToState(root, toggleGroupName, targetState);\r\n    };\r\n\r\n    /**\r\n     * Toggles the toggler checkboxes in a given toggle group when all or none of the target checkboxes in the same toggle group\r\n     * have been selected.\r\n     *\r\n     * @private\r\n     * @param {Object} e The event object.\r\n     */\r\n    var toggleTogglersFromTargets = function(e) {\r\n        var root = e.data.root;\r\n        var target = $(e.target);\r\n        var toggleGroupName = target.data('togglegroup');\r\n        var targets = getAllTargetCheckboxes(root, toggleGroupName);\r\n        var checkedTargets = targets.filter(':checked');\r\n\r\n        // Get all toggle group levels for the given toggle group and toggle accordingly all toggler checkboxes\r\n        // and action elements from each level.\r\n        var toggleGroupLevels = getToggleGroupLevels(toggleGroupName);\r\n        toggleGroupLevels.forEach(function(toggleGroupLevel) {\r\n            // Toggle the toggler checkboxes action elements in the given toggle group level.\r\n            toggleTogglersAndActionElements(root, toggleGroupLevel);\r\n        });\r\n\r\n        PubSub.publish(events.checkboxToggled, {\r\n            root: root,\r\n            toggleGroupName: toggleGroupName,\r\n            targets: targets,\r\n            checkedTargets: checkedTargets,\r\n            anyChecked: !!checkedTargets.length,\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Enables or disables the action elements.\r\n     *\r\n     * @private\r\n     * @param {jQuery} root The root jQuery element.\r\n     * @param {string} toggleGroupName The toggle group name of the action element(s).\r\n     * @param {boolean} disableActionElements Whether to disable or to enable the action elements.\r\n     */\r\n    var setActionElementStates = function(root, toggleGroupName, disableActionElements) {\r\n        getActionElements(root, toggleGroupName).prop('disabled', disableActionElements);\r\n    };\r\n\r\n    /**\r\n     * Selects or deselects the toggler elements.\r\n     *\r\n     * @private\r\n     * @param {jQuery} root The root jQuery element.\r\n     * @param {string} toggleGroupName The toggle group name of the toggler element(s).\r\n     * @param {boolean} targetState Whether to select (true) or deselect (false).\r\n     * @param {boolean} exactMatch Whether to do an exact match for the toggle group name or not.\r\n     */\r\n    var setTogglerStates = function(root, toggleGroupName, targetState, exactMatch) {\r\n        // Set the toggler checkboxes value and ARIA labels..\r\n        var togglers = getControlCheckboxes(root, toggleGroupName, exactMatch);\r\n        togglers.prop('checked', targetState);\r\n        togglers.each(function(i, togglerElement) {\r\n            togglerElement = $(togglerElement);\r\n\r\n            var targetString;\r\n            if (targetState) {\r\n                targetString = togglerElement.data('toggle-deselectall');\r\n            } else {\r\n                targetString = togglerElement.data('toggle-selectall');\r\n            }\r\n\r\n            if (togglerElement.is(':checkbox')) {\r\n                var togglerLabel = root.find('[for=\"' + togglerElement.attr('id') + '\"]');\r\n                if (togglerLabel.length) {\r\n                    if (togglerLabel.html() !== targetString) {\r\n                        togglerLabel.html(targetString);\r\n                    }\r\n                }\r\n            } else {\r\n                togglerElement.text(targetString);\r\n                // Set the checkall data attribute.\r\n                togglerElement.data('checkall', targetState ? 0 : 1);\r\n            }\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Registers the event listeners.\r\n     *\r\n     * @private\r\n     */\r\n    var registerListeners = function() {\r\n        if (!registered) {\r\n            registered = true;\r\n\r\n            var root = $(document.body);\r\n            root.on('click', '[data-action=\"toggle\"][data-toggle=\"toggler\"]', {root: root}, toggleTargetsFromTogglers);\r\n            root.on('click', '[data-action=\"toggle\"][data-toggle=\"target\"]', {root: root}, toggleTogglersFromTargets);\r\n\r\n            // TODO: Remove this backward compatibility code in Moodle 6.0.\r\n            const oldTogglers = document.querySelectorAll('[data-action=\"toggle\"][data-toggle=\"master\"]');\r\n            if (oldTogglers.length > 0) {\r\n                window.console.warn('The use of data-toggle=\"master\" is deprecated. Please use data-toggle=\"toggler\" instead.');\r\n                root.on('click', '[data-action=\"toggle\"][data-toggle=\"master\"]', {root: root}, toggleTargetsFromTogglers);\r\n            }\r\n            const oldTargets = document.querySelectorAll('[data-action=\"toggle\"][data-toggle=\"slave\"]');\r\n            if (oldTargets.length > 0) {\r\n                window.console.warn('The use of data-toggle=\"slave\" is deprecated. Please use data-toggle=\"target\" instead.');\r\n                root.on('click', '[data-action=\"toggle\"][data-toggle=\"slave\"]', {root: root}, toggleTogglersFromTargets);\r\n            }\r\n            // End of backward compatibility code.\r\n        }\r\n    };\r\n\r\n    return {\r\n        init: function() {\r\n            registerListeners();\r\n        },\r\n        events: events,\r\n        setGroupState: setGroupState,\r\n        updateSlavesFromMasterState: updateSlavesFromMasterState, // TODO: Remove this deprecated method export in Moodle 6.0.\r\n        updateTargetsFromTogglerState: updateTargetsFromTogglerState,\r\n    };\r\n});\r\n"],"names":["define","$","PubSub","registered","events","checkboxToggled","getToggleGroupElements","root","toggleGroup","exactMatch","find","getAllTargetCheckboxes","targets","filter","oldTargets","Array","isArray","length","window","console","warn","concat","getControlCheckboxes","togglers","oldTogglers","toggleTargetsFromTogglers","e","targetState","data","target","toggleGroupName","is","toggleTargetsToState","updateTargetsFromTogglerState","toggleTogglersAndActionElements","toggleGroupTargets","toggleGroupCheckedTargets","setTogglerStates","setActionElementStates","getToggleGroupLevels","toggleGroups","split","toggleGroupLevels","toggleGroupLevel","forEach","push","trim","prop","trigger","checkedTargets","publish","anyChecked","toggleTogglersFromTargets","disableActionElements","getActionElements","each","i","togglerElement","targetString","togglerLabel","attr","html","text","init","document","body","on","querySelectorAll","registerListeners","setGroupState","updateSlavesFromMasterState"],"mappings":"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"}