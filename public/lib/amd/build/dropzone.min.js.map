{"version":3,"file":"dropzone.min.js","sources":["../src/dropzone.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * JavaScript to handle dropzone.\r\n *\r\n * @module     core/dropzone\r\n * @copyright  2024 Huong Nguyen <huongnv13@gmail.com>\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n * @since      4.4\r\n */\r\n\r\nimport {getString} from 'core/str';\r\nimport Log from 'core/log';\r\nimport {prefetchString} from 'core/prefetch';\r\nimport Templates from 'core/templates';\r\n\r\n/**\r\n * A dropzone.\r\n *\r\n * @class core/dropzone\r\n */\r\nconst DropZone = class {\r\n\r\n    /**\r\n     * The element to render the dropzone.\r\n     * @type {Element}\r\n     */\r\n    dropZoneElement;\r\n\r\n    /**\r\n     * The file types that are allowed to be uploaded.\r\n     * @type {String}\r\n     */\r\n    fileTypes;\r\n\r\n    /**\r\n     * The function to call when a file is dropped.\r\n     * @type {CallableFunction}\r\n     */\r\n    callback;\r\n\r\n    /**\r\n     * The label to display in the dropzone.\r\n     * @type {string}\r\n     */\r\n    dropZoneLabel = '';\r\n\r\n    /**\r\n     * Constructor.\r\n     *\r\n     * @param {Element} dropZoneElement The element to render the dropzone.\r\n     * @param {String} fileTypes The file types that are allowed to be uploaded. Example: image/*\r\n     * @param {CallableFunction} callback The function to call when a file is dropped.\r\n     */\r\n    constructor(dropZoneElement, fileTypes, callback) {\r\n        prefetchString('core', 'addfilesdrop');\r\n        this.dropZoneElement = dropZoneElement;\r\n        this.fileTypes = fileTypes;\r\n        this.callback = callback;\r\n    }\r\n\r\n    /**\r\n     * Initialise the dropzone.\r\n     *\r\n     * @returns {DropZone}\r\n     */\r\n    init() {\r\n        this.dropZoneElement.addEventListener('dragover', (e) => {\r\n            const dropZone = this.getDropZoneFromEvent(e);\r\n            if (!dropZone) {\r\n                return;\r\n            }\r\n            e.preventDefault();\r\n            dropZone.classList.add('dragover');\r\n        });\r\n        this.dropZoneElement.addEventListener('dragleave', (e) => {\r\n            const dropZone = this.getDropZoneFromEvent(e);\r\n            if (!dropZone) {\r\n                return;\r\n            }\r\n            e.preventDefault();\r\n            dropZone.classList.remove('dragover');\r\n        });\r\n        this.dropZoneElement.addEventListener('drop', (e) => {\r\n            const dropZone = this.getDropZoneFromEvent(e);\r\n            if (!dropZone) {\r\n                return;\r\n            }\r\n            e.preventDefault();\r\n            dropZone.classList.remove('dragover');\r\n            this.callback(e.dataTransfer.files);\r\n        });\r\n        this.dropZoneElement.addEventListener('click', (e) => {\r\n            const targetDropZoneElement = e.target.closest('.dropzone-visually-hidden-focusable') ||\r\n                this.getDropZoneContainerFromEvent(e);\r\n            if (!targetDropZoneElement) {\r\n                return;\r\n            }\r\n            this.getFileElementFromEvent(e).click();\r\n        });\r\n        this.dropZoneElement.addEventListener('change', (e) => {\r\n            const fileInput = this.getFileElementFromEvent(e);\r\n            if (fileInput) {\r\n                e.preventDefault();\r\n                this.callback(fileInput.files);\r\n            }\r\n        });\r\n        this.renderDropZone(this.dropZoneElement, this.fileTypes);\r\n        Log.info('Dropzone has been initialized!');\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Get the dropzone.\r\n     *\r\n     * @param {Event} e The event.\r\n     * @returns {HTMLElement|bool}\r\n     */\r\n    getDropZoneFromEvent(e) {\r\n        return e.target.closest('.dropzone');\r\n    }\r\n\r\n    /**\r\n     * Get the dropzone container.\r\n     *\r\n     * @param {Event} e The event.\r\n     * @returns {HTMLElement|bool}\r\n     */\r\n    getDropZoneContainerFromEvent(e) {\r\n        return e.target.closest('.dropzone-container');\r\n    }\r\n\r\n    /**\r\n     * Get the file element.\r\n     *\r\n     * @param {Event} e The event.\r\n     * @returns {HTMLElement|bool}\r\n     */\r\n    getFileElementFromEvent(e) {\r\n        return e.target.closest('.dropzone-container').querySelector('.drop-zone-fileinput');\r\n    }\r\n\r\n    /**\r\n     * Set the label to display in the dropzone.\r\n     *\r\n     * @param {String} label The label to display in the dropzone.\r\n     */\r\n    setLabel(label) {\r\n        this.dropZoneLabel = label;\r\n    }\r\n\r\n    /**\r\n     * Get the label to display in the dropzone.\r\n     *\r\n     * @return {String} The label to display in the dropzone.\r\n     */\r\n    getLabel() {\r\n        return this.dropZoneLabel;\r\n    }\r\n\r\n    /**\r\n     * Render the dropzone.\r\n     *\r\n     * @param {Element} dropZoneElement The element to render the dropzone.\r\n     * @param {String} fileTypes The file types that are allowed to be uploaded.\r\n     * @returns {Promise}\r\n     */\r\n    async renderDropZone(dropZoneElement, fileTypes) {\r\n        if (!this.getLabel()) {\r\n            // Use the default one.\r\n            this.setLabel(await getString('addfilesdrop', 'core'));\r\n        }\r\n        const dropZoneLabel = this.getLabel();\r\n        dropZoneElement.innerHTML = await Templates.render('core/dropzone', {\r\n            label: dropZoneLabel,\r\n            filetypes: fileTypes,\r\n        });\r\n    }\r\n};\r\n\r\nexport default DropZone;\r\n"],"names":["constructor","dropZoneElement","fileTypes","callback","init","addEventListener","e","dropZone","this","getDropZoneFromEvent","preventDefault","classList","add","remove","dataTransfer","files","target","closest","getDropZoneContainerFromEvent","getFileElementFromEvent","click","fileInput","renderDropZone","info","querySelector","setLabel","label","dropZoneLabel","getLabel","innerHTML","Templates","render","filetypes"],"mappings":"gjBAkCiB,MAiCbA,YAAYC,gBAAiBC,UAAWC,+KATxB,iCAUG,OAAQ,qBAClBF,gBAAkBA,qBAClBC,UAAYA,eACZC,SAAWA,SAQpBC,mBACSH,gBAAgBI,iBAAiB,YAAaC,UACzCC,SAAWC,KAAKC,qBAAqBH,GACtCC,WAGLD,EAAEI,iBACFH,SAASI,UAAUC,IAAI,qBAEtBX,gBAAgBI,iBAAiB,aAAcC,UAC1CC,SAAWC,KAAKC,qBAAqBH,GACtCC,WAGLD,EAAEI,iBACFH,SAASI,UAAUE,OAAO,qBAEzBZ,gBAAgBI,iBAAiB,QAASC,UACrCC,SAAWC,KAAKC,qBAAqBH,GACtCC,WAGLD,EAAEI,iBACFH,SAASI,UAAUE,OAAO,iBACrBV,SAASG,EAAEQ,aAAaC,gBAE5Bd,gBAAgBI,iBAAiB,SAAUC,KACdA,EAAEU,OAAOC,QAAQ,wCAC3CT,KAAKU,8BAA8BZ,UAIlCa,wBAAwBb,GAAGc,gBAE/BnB,gBAAgBI,iBAAiB,UAAWC,UACvCe,UAAYb,KAAKW,wBAAwBb,GAC3Ce,YACAf,EAAEI,sBACGP,SAASkB,UAAUN,gBAG3BO,eAAed,KAAKP,gBAAiBO,KAAKN,wBAC3CqB,KAAK,kCACFf,KASXC,qBAAqBH,UACVA,EAAEU,OAAOC,QAAQ,aAS5BC,8BAA8BZ,UACnBA,EAAEU,OAAOC,QAAQ,uBAS5BE,wBAAwBb,UACbA,EAAEU,OAAOC,QAAQ,uBAAuBO,cAAc,wBAQjEC,SAASC,YACAC,cAAgBD,MAQzBE,kBACWpB,KAAKmB,mCAUK1B,gBAAiBC,WAC7BM,KAAKoB,iBAEDH,eAAe,kBAAU,eAAgB,eAE5CE,cAAgBnB,KAAKoB,WAC3B3B,gBAAgB4B,gBAAkBC,mBAAUC,OAAO,gBAAiB,CAChEL,MAAOC,cACPK,UAAW9B"}