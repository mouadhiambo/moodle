{"version":3,"file":"process_monitor.min.js","sources":["../src/process_monitor.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * Process monitor includer.\r\n *\r\n * @module     core/process_monitor\r\n * @copyright  2022 Ferran Recio <ferran@moodle.com>\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\n\r\nimport log from 'core/log';\r\nimport {manager} from 'core/local/process_monitor/manager';\r\nimport {LoadingProcess} from 'core/local/process_monitor/loadingprocess';\r\nimport {ProcessQueue} from 'core/local/process_monitor/processqueue';\r\nimport Templates from 'core/templates';\r\n\r\nlet initialized = false;\r\n\r\n/**\r\n * Get the parent container.\r\n * @private\r\n * @return {HTMLelement} the process monitor container.\r\n */\r\nconst getParentContainer = () => {\r\n    // The footer pop over depends on the theme.\r\n    return document.querySelector(`#page`) ?? document.body;\r\n};\r\n\r\nexport const processMonitor = {\r\n    /**\r\n     * Adds a new process to the monitor.\r\n     * @param {Object} definition the process definition\r\n     * @param {String} definition.name the process name\r\n     * @param {Number} definition.percentage the current percentage (0 - 100)\r\n     * @param {String} definition.error the error message if any\r\n     * @param {String} definition.url possible link url if any\r\n     * @returns {LoadingProcess} the loading process\r\n     */\r\n    addLoadingProcess: function(definition) {\r\n        this.initProcessMonitor();\r\n        const process = new LoadingProcess(manager, definition);\r\n        return process;\r\n    },\r\n\r\n    /**\r\n     * Remove all processes form the current monitor.\r\n     */\r\n    removeAllProcesses: function() {\r\n        manager.getInitialStatePromise().then(() => {\r\n            manager.dispatch('removeAllProcesses');\r\n            return;\r\n        }).catch(() => {\r\n            log.error(`Cannot update process monitor.`);\r\n        });\r\n    },\r\n\r\n    /**\r\n     * Initialize the process monitor.\r\n     */\r\n    initProcessMonitor: async function() {\r\n        if (initialized) {\r\n            return;\r\n        }\r\n        initialized = true;\r\n        const container = getParentContainer();\r\n        if (document.getElementById(`#processMonitor`)) {\r\n            return;\r\n        }\r\n        try {\r\n            const {html, js} = await Templates.renderForPromise('core/local/process_monitor/monitor', {});\r\n            Templates.appendNodeContents(container, html, js);\r\n        } catch (error) {\r\n            log.error(`Cannot load the process monitor`);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Return the process monitor initial state promise.\r\n     * @returns {Promise} Promise of the initial state fully loaded\r\n     */\r\n    getInitialStatePromise: function() {\r\n        return manager.getInitialStatePromise();\r\n    },\r\n\r\n    /**\r\n     * Load the load queue monitor.\r\n     *\r\n     * @return {Promise<ProcessQueue>} when the file uploader is ready to be used.\r\n     */\r\n    createProcessQueue: async function() {\r\n        processMonitor.initProcessMonitor();\r\n        const processQueue = new ProcessQueue(manager);\r\n        await processMonitor.getInitialStatePromise();\r\n        return processQueue;\r\n    }\r\n};\r\n"],"names":["initialized","processMonitor","addLoadingProcess","definition","initProcessMonitor","LoadingProcess","manager","removeAllProcesses","getInitialStatePromise","then","dispatch","catch","error","async","container","document","querySelector","body","getElementById","html","js","Templates","renderForPromise","appendNodeContents","createProcessQueue","processQueue","ProcessQueue"],"mappings":";;;;;;;gLA6BIA,aAAc,QAYLC,eAAiB,CAU1BC,kBAAmB,SAASC,iBACnBC,4BACW,IAAIC,+BAAeC,iBAASH,aAOhDI,mBAAoB,4BACRC,yBAAyBC,MAAK,sBAC1BC,SAAS,yBAElBC,OAAM,kBACDC,4CAOZR,mBAAoBS,oBACZb,mBAGJA,aAAc,QACRc,wCAvCHC,SAASC,8EAA0BD,SAASE,KAF5B,8BA0CfF,SAASG,4CAIHC,KAACA,KAADC,GAAOA,UAAYC,mBAAUC,iBAAiB,qCAAsC,uBAChFC,mBAAmBT,UAAWK,KAAMC,IAChD,MAAOR,oBACDA,2CAQZJ,uBAAwB,kBACbF,iBAAQE,0BAQnBgB,mBAAoBX,iBAChBZ,eAAeG,2BACTqB,aAAe,IAAIC,2BAAapB,+BAChCL,eAAeO,yBACdiB"}