{"version":3,"file":"copy_to_clipboard.min.js","sources":["../src/copy_to_clipboard.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * A JavaScript module that enhances a button and text container to support copy-to-clipboard functionality.\r\n *\r\n * This module needs to be loaded by pages/templates/modules that require this functionality.\r\n *\r\n * To enable copy-to-clipboard functionality, we need a trigger element (usually a button) and a copy target element\r\n * (e.g. a div, span, text input, or text area).\r\n *\r\n * In the trigger element, we need to declare the <code>data-action=\"copytoclipboard\"</code> attribute and set the\r\n * <code>data-clipboard-target</code> attribute which is the CSS selector that points to the target element that contains the text\r\n * to be copied.\r\n *\r\n * When the text is successfully copied to the clipboard, a toast message that indicates that the copy operation was a success\r\n * will be shown. This success message can be customised by setting the <code>data-clipboard-success-message</code> attribute in the\r\n * trigger element.\r\n *\r\n * @module     core/copy_to_clipboard\r\n * @copyright  2021 Jun Pataleta\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n *\r\n * @example <caption>Markup for the trigger and target elements</caption>\r\n * <input type=\"text\" id=\"textinputtocopy\" class=\"form-control\" value=\"Copy me!\" readonly />\r\n * <button id=\"copybutton\" data-action=\"copytoclipboard\" data-clipboard-target=\"#textinputtocopy\"\r\n *         data-clipboard-success-message=\"Success!\" class=\"btn btn-secondary\">\r\n *     Copy to clipboard\r\n * </button>\r\n */\r\nimport {getString} from 'core/str';\r\nimport {add as addToast} from 'core/toast';\r\nimport {prefetchStrings} from 'core/prefetch';\r\n\r\n/**\r\n * Add event listeners to trigger elements through event delegation.\r\n *\r\n * @private\r\n */\r\nconst addEventListeners = () => {\r\n    document.addEventListener('click', e => {\r\n        const copyButton = e.target.closest('[data-action=\"copytoclipboard\"]');\r\n        if (!copyButton) {\r\n            return;\r\n        }\r\n\r\n        if (!copyButton.dataset.clipboardTarget) {\r\n            return;\r\n        }\r\n\r\n        const copyTarget = document.querySelector(copyButton.dataset.clipboardTarget);\r\n        if (!copyTarget) {\r\n            return;\r\n        }\r\n\r\n        // This is a copy target and there is content.\r\n        // Prevent the default action.\r\n        e.preventDefault();\r\n\r\n        // We have a copy target - great. Let's copy its content.\r\n        const textToCopy = getTextFromContainer(copyTarget);\r\n        if (!textToCopy) {\r\n            displayFailureToast();\r\n            return;\r\n        }\r\n\r\n        if (navigator.clipboard) {\r\n            navigator.clipboard.writeText(textToCopy)\r\n                .then(() => displaySuccessToast(copyButton)).catch();\r\n\r\n            return;\r\n        }\r\n\r\n        // The clipboard API is not available.\r\n        // This may happen when the page is not served over SSL.\r\n        // Try to fall back to document.execCommand() approach of copying the text.\r\n        // WARNING: This is deprecated functionality that may get dropped at anytime by browsers.\r\n\r\n        if (copyTarget instanceof HTMLInputElement || copyTarget instanceof HTMLTextAreaElement) {\r\n            // Focus and select the text in the target element.\r\n            // If the execCommand fails, at least the user can readily copy the text.\r\n            copyTarget.focus();\r\n\r\n            if (copyNodeContentToClipboard(copyButton, copyTarget)) {\r\n                // If the copy was successful then focus back on the copy button.\r\n                copyButton.focus();\r\n            }\r\n        } else {\r\n            // This copyTarget is not an input, or text area so cannot be used with the execCommand('copy') command.\r\n            // To work around this we create a new textarea and copy that.\r\n            // This textarea must be part of the DOM and must be visible.\r\n            // We (ab)use the visually-hidden tag to ensure that it is considered visible to the browser, whilst being\r\n            // hidden from view by the user.\r\n            const copyRegion = document.createElement('textarea');\r\n            copyRegion.value = textToCopy;\r\n            copyRegion.classList.add('visually-hidden');\r\n            document.body.appendChild(copyRegion);\r\n\r\n            copyNodeContentToClipboard(copyButton, copyRegion);\r\n\r\n            // After copying, remove the temporary element and move focus back to the triggering button.\r\n            copyRegion.remove();\r\n            copyButton.focus();\r\n        }\r\n    });\r\n};\r\n\r\n/**\r\n * Copy the content of the selected element to the clipboard, and display a notifiction if successful.\r\n *\r\n * @param {HTMLElement} copyButton\r\n * @param {HTMLElement} copyTarget\r\n * @returns {boolean}\r\n * @private\r\n */\r\nconst copyNodeContentToClipboard = (copyButton, copyTarget) => {\r\n    copyTarget.select();\r\n\r\n    // Try to copy the text from the target element.\r\n    if (document.execCommand('copy')) {\r\n        displaySuccessToast(copyButton);\r\n        return true;\r\n    }\r\n\r\n    displayFailureToast();\r\n    return false;\r\n};\r\n\r\n/**\r\n * Displays a toast containing the success message.\r\n *\r\n * @param {HTMLElement} copyButton The element that copies the text from the container.\r\n * @returns {Promise<void>}\r\n * @private\r\n */\r\nconst displaySuccessToast = copyButton => getSuccessText(copyButton)\r\n    .then(successMessage => addToast(successMessage, {}));\r\n\r\n/**\r\n * Displays a toast containing the failure message.\r\n *\r\n * @returns {Promise<void>}\r\n * @private\r\n */\r\nconst displayFailureToast = () => getFailureText()\r\n    .then(message => addToast(message, {type: 'warning'}));\r\n\r\n/**\r\n * Fetches the failure message to show to the user.\r\n *\r\n * @returns {Promise}\r\n * @private\r\n */\r\nconst getFailureText = () => getString('unabletocopytoclipboard', 'core');\r\n\r\n/**\r\n * Fetches the success message to show to the user.\r\n *\r\n * @param {HTMLElement} copyButton The element that copies the text from the container. This may contain the custom success message\r\n * via its data-clipboard-success-message attribute.\r\n * @returns {Promise|*}\r\n * @private\r\n */\r\nconst getSuccessText = copyButton => {\r\n    if (copyButton.dataset.clipboardSuccessMessage) {\r\n        return Promise.resolve(copyButton.dataset.clipboardSuccessMessage);\r\n    }\r\n\r\n    return getString('textcopiedtoclipboard', 'core');\r\n};\r\n\r\n/**\r\n * Fetches the text to be copied from the container.\r\n *\r\n * @param {HTMLElement} container The element containing the text to be copied.\r\n * @returns {null|string}\r\n * @private\r\n */\r\nconst getTextFromContainer = container => {\r\n    if (container.value) {\r\n        // For containers which are form elements (e.g. text area, text input), get the element's value.\r\n        return container.value;\r\n    } else if (container.innerText) {\r\n        // For other elements, try to use the innerText attribute.\r\n        return container.innerText;\r\n    }\r\n\r\n    return null;\r\n};\r\n\r\nlet loaded = false;\r\nif (!loaded) {\r\n    prefetchStrings('core', [\r\n        'textcopiedtoclipboard',\r\n        'unabletocopytoclipboard',\r\n    ]);\r\n\r\n    // Add event listeners.\r\n    addEventListeners();\r\n    loaded = true;\r\n}\r\n"],"names":["copyNodeContentToClipboard","copyButton","copyTarget","select","document","execCommand","displaySuccessToast","displayFailureToast","getSuccessText","then","successMessage","getFailureText","message","type","dataset","clipboardSuccessMessage","Promise","resolve","getTextFromContainer","container","value","innerText","loaded","addEventListener","e","target","closest","clipboardTarget","querySelector","preventDefault","textToCopy","navigator","clipboard","writeText","catch","HTMLInputElement","HTMLTextAreaElement","focus","copyRegion","createElement","classList","add","body","appendChild","remove"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;MA+HMA,2BAA6B,CAACC,WAAYC,cAC5CA,WAAWC,SAGPC,SAASC,YAAY,SACrBC,oBAAoBL,aACb,IAGXM,uBACO,IAULD,oBAAsBL,YAAcO,eAAeP,YACpDQ,MAAKC,iBAAkB,cAASA,eAAgB,MAQ/CH,oBAAsB,IAAMI,iBAC7BF,MAAKG,UAAW,cAASA,QAAS,CAACC,KAAM,cAQxCF,eAAiB,KAAM,kBAAU,0BAA2B,QAU5DH,eAAiBP,YACfA,WAAWa,QAAQC,wBACZC,QAAQC,QAAQhB,WAAWa,QAAQC,0BAGvC,kBAAU,wBAAyB,QAUxCG,qBAAuBC,WACrBA,UAAUC,MAEHD,UAAUC,MACVD,UAAUE,UAEVF,UAAUE,UAGd,SAGPC,QAAS,EACRA,uCACe,OAAQ,CACpB,wBACA,4BA1JJlB,SAASmB,iBAAiB,SAASC,UACzBvB,WAAauB,EAAEC,OAAOC,QAAQ,uCAC/BzB,sBAIAA,WAAWa,QAAQa,6BAIlBzB,WAAaE,SAASwB,cAAc3B,WAAWa,QAAQa,qBACxDzB,kBAMLsB,EAAEK,uBAGIC,WAAaZ,qBAAqBhB,eACnC4B,cAKDC,UAAUC,UACVD,UAAUC,UAAUC,UAAUH,YACzBrB,MAAK,IAAMH,oBAAoBL,cAAaiC,gBAUjDhC,sBAAsBiC,kBAAoBjC,sBAAsBkC,oBAGhElC,WAAWmC,QAEPrC,2BAA2BC,WAAYC,aAEvCD,WAAWoC,YAEZ,OAMGC,WAAalC,SAASmC,cAAc,YAC1CD,WAAWlB,MAAQU,WACnBQ,WAAWE,UAAUC,IAAI,mBACzBrC,SAASsC,KAAKC,YAAYL,YAE1BtC,2BAA2BC,WAAYqC,YAGvCA,WAAWM,SACX3C,WAAWoC,aAxCX9B,yBAyIRe,QAAS"}