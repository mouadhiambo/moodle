{"version":3,"file":"custom_interaction_events.min.js","sources":["../src/custom_interaction_events.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * This module provides a wrapper to encapsulate a lot of the common combinations of\r\n * user interaction we use in Moodle.\r\n *\r\n * @module     core/custom_interaction_events\r\n * @copyright  2016 Ryan Wyllie <ryan@moodle.com>\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n * @since      3.2\r\n */\r\ndefine(['jquery', 'core/key_codes'], function($, keyCodes) {\r\n    // The list of events provided by this module. Namespaced to avoid clashes.\r\n    var events = {\r\n        activate: 'cie:activate',\r\n        keyboardActivate: 'cie:keyboardactivate',\r\n        escape: 'cie:escape',\r\n        down: 'cie:down',\r\n        up: 'cie:up',\r\n        home: 'cie:home',\r\n        end: 'cie:end',\r\n        next: 'cie:next',\r\n        previous: 'cie:previous',\r\n        asterix: 'cie:asterix',\r\n        scrollLock: 'cie:scrollLock',\r\n        scrollTop: 'cie:scrollTop',\r\n        scrollBottom: 'cie:scrollBottom',\r\n        ctrlPageUp: 'cie:ctrlPageUp',\r\n        ctrlPageDown: 'cie:ctrlPageDown',\r\n        enter: 'cie:enter',\r\n        accessibleChange: 'cie:accessibleChange',\r\n    };\r\n    // Static cache of jQuery events that have been handled. This should\r\n    // only be populated by JavaScript generated events (which will keep it\r\n    // fairly small).\r\n    var triggeredEvents = {};\r\n\r\n    /**\r\n     * Check if the caller has asked for the given event type to be\r\n     * registered.\r\n     *\r\n     * @method shouldAddEvent\r\n     * @private\r\n     * @param {string} eventType name of the event (see events above)\r\n     * @param {array} include the list of events to be added\r\n     * @return {bool} true if the event should be added, false otherwise.\r\n     */\r\n    var shouldAddEvent = function(eventType, include) {\r\n        include = include || [];\r\n\r\n        if (include.length && include.indexOf(eventType) !== -1) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    };\r\n\r\n    /**\r\n     * Check if any of the modifier keys have been pressed on the event.\r\n     *\r\n     * @method isModifierPressed\r\n     * @private\r\n     * @param {event} e jQuery event\r\n     * @return {bool} true if shift, meta (command on Mac), alt or ctrl are pressed\r\n     */\r\n    var isModifierPressed = function(e) {\r\n        return (e.shiftKey || e.metaKey || e.altKey || e.ctrlKey);\r\n    };\r\n\r\n    /**\r\n     * Trigger the custom event for the given jQuery event.\r\n     *\r\n     * This function will only fire the custom event if one hasn't already been\r\n     * fired for the jQuery event.\r\n     *\r\n     * This is to prevent multiple custom event handlers triggering multiple\r\n     * custom events for a single jQuery event as it bubbles up the stack.\r\n     *\r\n     * @param  {string} eventName The name of the custom event\r\n     * @param  {event} e          The jQuery event\r\n     * @return {void}\r\n     */\r\n    var triggerEvent = function(eventName, e) {\r\n        var eventTypeKey = \"\";\r\n\r\n        if (!e.hasOwnProperty('originalEvent')) {\r\n            // This is a jQuery event generated from JavaScript not a browser event so\r\n            // we need to build the cache key for the event.\r\n            eventTypeKey = \"\" + eventName + e.type + e.timeStamp;\r\n\r\n            if (!triggeredEvents.hasOwnProperty(eventTypeKey)) {\r\n                // If we haven't seen this jQuery event before then fire a custom\r\n                // event for it and remember the event for later.\r\n                triggeredEvents[eventTypeKey] = true;\r\n                $(e.target).trigger(eventName, [{originalEvent: e}]);\r\n            }\r\n            return;\r\n        }\r\n\r\n        eventTypeKey = \"triggeredCustom_\" + eventName;\r\n        if (!e.originalEvent.hasOwnProperty(eventTypeKey)) {\r\n            // If this is a jQuery event generated by the browser then set a\r\n            // property on the original event to track that we've seen it before.\r\n            // The property is set on the original event because it's the only part\r\n            // of the jQuery event that is maintained through multiple event handlers.\r\n            e.originalEvent[eventTypeKey] = true;\r\n            $(e.target).trigger(eventName, [{originalEvent: e}]);\r\n            return;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Register a keyboard event that ignores modifier keys.\r\n     *\r\n     * @method addKeyboardEvent\r\n     * @private\r\n     * @param {object} element A jQuery object of the element to bind events to\r\n     * @param {string} event The custom interaction event name\r\n     * @param {int} keyCode The key code.\r\n     */\r\n    var addKeyboardEvent = function(element, event, keyCode) {\r\n        element.off('keydown.' + event).on('keydown.' + event, function(e) {\r\n            if (!isModifierPressed(e)) {\r\n                if (e.keyCode == keyCode) {\r\n                    triggerEvent(event, e);\r\n                }\r\n            }\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Trigger the activate event on the given element if it is clicked or the enter\r\n     * or space key are pressed without a modifier key.\r\n     *\r\n     * @method addActivateListener\r\n     * @private\r\n     * @param {object} element jQuery object to add event listeners to\r\n     */\r\n    var addActivateListener = function(element) {\r\n        element.off('click.cie.activate').on('click.cie.activate', function(e) {\r\n            triggerEvent(events.activate, e);\r\n        });\r\n        element.off('keydown.cie.activate').on('keydown.cie.activate', function(e) {\r\n            if (!isModifierPressed(e)) {\r\n                if (e.keyCode == keyCodes.enter || e.keyCode == keyCodes.space) {\r\n                    triggerEvent(events.activate, e);\r\n                }\r\n            }\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Trigger the keyboard activate event on the given element if the enter\r\n     * or space key are pressed without a modifier key.\r\n     *\r\n     * @method addKeyboardActivateListener\r\n     * @private\r\n     * @param {object} element jQuery object to add event listeners to\r\n     */\r\n    var addKeyboardActivateListener = function(element) {\r\n        element.off('keydown.cie.keyboardactivate').on('keydown.cie.keyboardactivate', function(e) {\r\n            if (!isModifierPressed(e)) {\r\n                if (e.keyCode == keyCodes.enter || e.keyCode == keyCodes.space) {\r\n                    triggerEvent(events.keyboardActivate, e);\r\n                }\r\n            }\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Trigger the escape event on the given element if the escape key is pressed\r\n     * without a modifier key.\r\n     *\r\n     * @method addEscapeListener\r\n     * @private\r\n     * @param {object} element jQuery object to add event listeners to\r\n     */\r\n    var addEscapeListener = function(element) {\r\n        addKeyboardEvent(element, events.escape, keyCodes.escape);\r\n    };\r\n\r\n    /**\r\n     * Trigger the down event on the given element if the down arrow key is pressed\r\n     * without a modifier key.\r\n     *\r\n     * @method addDownListener\r\n     * @private\r\n     * @param {object} element jQuery object to add event listeners to\r\n     */\r\n    var addDownListener = function(element) {\r\n        addKeyboardEvent(element, events.down, keyCodes.arrowDown);\r\n    };\r\n\r\n    /**\r\n     * Trigger the up event on the given element if the up arrow key is pressed\r\n     * without a modifier key.\r\n     *\r\n     * @method addUpListener\r\n     * @private\r\n     * @param {object} element jQuery object to add event listeners to\r\n     */\r\n    var addUpListener = function(element) {\r\n        addKeyboardEvent(element, events.up, keyCodes.arrowUp);\r\n    };\r\n\r\n    /**\r\n     * Trigger the home event on the given element if the home key is pressed\r\n     * without a modifier key.\r\n     *\r\n     * @method addHomeListener\r\n     * @private\r\n     * @param {object} element jQuery object to add event listeners to\r\n     */\r\n    var addHomeListener = function(element) {\r\n        addKeyboardEvent(element, events.home, keyCodes.home);\r\n    };\r\n\r\n    /**\r\n     * Trigger the end event on the given element if the end key is pressed\r\n     * without a modifier key.\r\n     *\r\n     * @method addEndListener\r\n     * @private\r\n     * @param {object} element jQuery object to add event listeners to\r\n     */\r\n    var addEndListener = function(element) {\r\n        addKeyboardEvent(element, events.end, keyCodes.end);\r\n    };\r\n\r\n    /**\r\n     * Trigger the next event on the given element if the right arrow key is pressed\r\n     * without a modifier key in LTR mode or left arrow key in RTL mode.\r\n     *\r\n     * @method addNextListener\r\n     * @private\r\n     * @param {object} element jQuery object to add event listeners to\r\n     */\r\n    var addNextListener = function(element) {\r\n        // Left and right are flipped in RTL mode.\r\n        var keyCode = $('html').attr('dir') == \"rtl\" ? keyCodes.arrowLeft : keyCodes.arrowRight;\r\n\r\n        addKeyboardEvent(element, events.next, keyCode);\r\n    };\r\n\r\n    /**\r\n     * Trigger the previous event on the given element if the left arrow key is pressed\r\n     * without a modifier key in LTR mode or right arrow key in RTL mode.\r\n     *\r\n     * @method addPreviousListener\r\n     * @private\r\n     * @param {object} element jQuery object to add event listeners to\r\n     */\r\n    var addPreviousListener = function(element) {\r\n        // Left and right are flipped in RTL mode.\r\n        var keyCode = $('html').attr('dir') == \"rtl\" ? keyCodes.arrowRight : keyCodes.arrowLeft;\r\n\r\n        addKeyboardEvent(element, events.previous, keyCode);\r\n    };\r\n\r\n    /**\r\n     * Trigger the asterix event on the given element if the asterix key is pressed\r\n     * without a modifier key.\r\n     *\r\n     * @method addAsterixListener\r\n     * @private\r\n     * @param {object} element jQuery object to add event listeners to\r\n     */\r\n    var addAsterixListener = function(element) {\r\n        addKeyboardEvent(element, events.asterix, keyCodes.asterix);\r\n    };\r\n\r\n\r\n    /**\r\n     * Trigger the scrollTop event on the given element if the user scrolls to\r\n     * the top of the given element.\r\n     *\r\n     * @method addScrollTopListener\r\n     * @private\r\n     * @param {object} element jQuery object to add event listeners to\r\n     */\r\n    var addScrollTopListener = function(element) {\r\n        element.off('scroll.cie.scrollTop').on('scroll.cie.scrollTop', function(e) {\r\n            var scrollTop = element.scrollTop();\r\n            if (scrollTop === 0) {\r\n                triggerEvent(events.scrollTop, e);\r\n            }\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Trigger the scrollBottom event on the given element if the user scrolls to\r\n     * the bottom of the given element.\r\n     *\r\n     * @method addScrollBottomListener\r\n     * @private\r\n     * @param {object} element jQuery object to add event listeners to\r\n     */\r\n    var addScrollBottomListener = function(element) {\r\n        element.off('scroll.cie.scrollBottom').on('scroll.cie.scrollBottom', function(e) {\r\n            var scrollTop = element.scrollTop();\r\n            var innerHeight = element.innerHeight();\r\n            var scrollHeight = element[0].scrollHeight;\r\n\r\n            if (scrollTop + innerHeight >= scrollHeight) {\r\n                triggerEvent(events.scrollBottom, e);\r\n            }\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Trigger the scrollLock event on the given element if the user scrolls to\r\n     * the bottom or top of the given element.\r\n     *\r\n     * @method addScrollLockListener\r\n     * @private\r\n     * @param {jQuery} element jQuery object to add event listeners to\r\n     */\r\n    var addScrollLockListener = function(element) {\r\n        // Lock mousewheel scrolling within the element to stop the annoying window scroll.\r\n        element.off('DOMMouseScroll.cie.DOMMouseScrollLock mousewheel.cie.mousewheelLock')\r\n            .on('DOMMouseScroll.cie.DOMMouseScrollLock mousewheel.cie.mousewheelLock', function(e) {\r\n                var scrollTop = element.scrollTop();\r\n                var scrollHeight = element[0].scrollHeight;\r\n                var height = element.height();\r\n                var delta = (e.type == 'DOMMouseScroll' ?\r\n                    e.originalEvent.detail * -40 :\r\n                    e.originalEvent.wheelDelta);\r\n                var up = delta > 0;\r\n\r\n                if (!up && -delta > scrollHeight - height - scrollTop) {\r\n                    // Scrolling down past the bottom.\r\n                    element.scrollTop(scrollHeight);\r\n                    e.stopPropagation();\r\n                    e.preventDefault();\r\n                    e.returnValue = false;\r\n                    // Fire the scroll lock event.\r\n                    triggerEvent(events.scrollLock, e);\r\n\r\n                    return false;\r\n                } else if (up && delta > scrollTop) {\r\n                    // Scrolling up past the top.\r\n                    element.scrollTop(0);\r\n                    e.stopPropagation();\r\n                    e.preventDefault();\r\n                    e.returnValue = false;\r\n                    // Fire the scroll lock event.\r\n                    triggerEvent(events.scrollLock, e);\r\n\r\n                    return false;\r\n                }\r\n\r\n                return true;\r\n            });\r\n    };\r\n\r\n    /**\r\n     * Trigger the ctrlPageUp event on the given element if the user presses the\r\n     * control and page up key.\r\n     *\r\n     * @method addCtrlPageUpListener\r\n     * @private\r\n     * @param {object} element jQuery object to add event listeners to\r\n     */\r\n    var addCtrlPageUpListener = function(element) {\r\n        element.off('keydown.cie.ctrlpageup').on('keydown.cie.ctrlpageup', function(e) {\r\n            if (e.ctrlKey) {\r\n                if (e.keyCode == keyCodes.pageUp) {\r\n                    triggerEvent(events.ctrlPageUp, e);\r\n                }\r\n            }\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Trigger the ctrlPageDown event on the given element if the user presses the\r\n     * control and page down key.\r\n     *\r\n     * @method addCtrlPageDownListener\r\n     * @private\r\n     * @param {object} element jQuery object to add event listeners to\r\n     */\r\n    var addCtrlPageDownListener = function(element) {\r\n        element.off('keydown.cie.ctrlpagedown').on('keydown.cie.ctrlpagedown', function(e) {\r\n            if (e.ctrlKey) {\r\n                if (e.keyCode == keyCodes.pageDown) {\r\n                    triggerEvent(events.ctrlPageDown, e);\r\n                }\r\n            }\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Trigger the enter event on the given element if the enter key is pressed\r\n     * without a modifier key.\r\n     *\r\n     * @method addEnterListener\r\n     * @private\r\n     * @param {object} element jQuery object to add event listeners to\r\n     */\r\n    var addEnterListener = function(element) {\r\n        addKeyboardEvent(element, events.enter, keyCodes.enter);\r\n    };\r\n\r\n    /**\r\n     * Trigger the AccessibleChange event on the given element if the value of the element is changed.\r\n     *\r\n     * @method addAccessibleChangeListener\r\n     * @private\r\n     * @param {object} element jQuery object to add event listeners to\r\n     */\r\n    var addAccessibleChangeListener = function(element) {\r\n        var onMac = navigator.userAgent.indexOf('Macintosh') !== -1;\r\n        var touchEnabled = ('ontouchstart' in window) || (('msMaxTouchPoints' in navigator) && (navigator.msMaxTouchPoints > 0));\r\n        if (onMac || touchEnabled) {\r\n            // On Mac devices, and touch-enabled devices, the change event seems to be handled correctly and\r\n            // consistently at this time.\r\n            element.on('change', function(e) {\r\n                triggerEvent(events.accessibleChange, e);\r\n            });\r\n        } else {\r\n            // Some browsers have non-normalised behaviour for handling the selection of values in a <select> element.\r\n            // When using Chrome on Linux (and possibly others), a 'change' event is fired when pressing the Escape key.\r\n            // When using Firefox on Linux (and possibly others), a 'change' event is fired when navigating through the\r\n            // list with a keyboard.\r\n            //\r\n            // To normalise these behaviours:\r\n            // - the initial value is stored in a data attribute when focusing the element\r\n            // - the current value is checked against the stored initial value when and the accessibleChange event fired when:\r\n            // --- blurring the element\r\n            // --- the 'Enter' key is pressed\r\n            // --- the element is clicked\r\n            // --- the 'change' event is fired, except where it is from a keyboard interaction\r\n            //\r\n            // To facilitate the change event keyboard interaction check, the 'keyDown' handler sets a flag to ignore\r\n            // the change event handler which is unset on the 'keyUp' event.\r\n            //\r\n            // Unfortunately we cannot control this entirely as some browsers (Chrome) trigger a change event when\r\n            // pressign the Escape key, and this is considered to be the correct behaviour.\r\n            // Chrome https://bugs.chromium.org/p/chromium/issues/detail?id=839717\r\n            //\r\n            // Our longer-term solution to this should be to switch away from using <select> boxes as a single-select,\r\n            // and make use of a dropdown of action links like the Bootstrap Dropdown menu.\r\n            var setInitialValue = function(target) {\r\n                target.dataset.initValue = target.value;\r\n            };\r\n            var resetToInitialValue = function(target) {\r\n                if ('initValue' in target.dataset) {\r\n                    target.value = target.dataset.initValue;\r\n                }\r\n            };\r\n            var checkAndTriggerAccessibleChange = function(e) {\r\n                if (!('initValue' in e.target.dataset)) {\r\n                    // Some browsers trigger click before focus, therefore it is possible that initValue is undefined.\r\n                    // In this case it's likely that it's being focused for the first time and we should therefore not submit.\r\n                    return;\r\n                }\r\n\r\n                if (e.target.value !== e.target.dataset.initValue) {\r\n                    // Update the initValue when the event is triggered.\r\n                    // This means that if the click handler fires before the focus handler on a subsequent interaction\r\n                    // with the element, the currently dispalyed value will be the best guess current value.\r\n                    e.target.dataset.initValue = e.target.value;\r\n                    triggerEvent(events.accessibleChange, e);\r\n                }\r\n            };\r\n            var nativeElement = element.get()[0];\r\n            // The `focus` and `blur` events do not support bubbling. Use Event Capture instead.\r\n            nativeElement.addEventListener('focus', function(e) {\r\n                setInitialValue(e.target);\r\n            }, true);\r\n            nativeElement.addEventListener('blur', function(e) {\r\n                checkAndTriggerAccessibleChange(e);\r\n            }, true);\r\n            element.on('keydown', function(e) {\r\n                if ((e.which === keyCodes.enter)) {\r\n                    checkAndTriggerAccessibleChange(e);\r\n                } else if (e.which === keyCodes.escape) {\r\n                    resetToInitialValue(e.target);\r\n                    e.target.dataset.ignoreChange = true;\r\n                } else {\r\n                    // Firefox triggers a change event when using the keyboard to scroll through the selection.\r\n                    // Set a data- attribute that the change listener can use to ignore the change event where it was\r\n                    // generated from a keyboard change such as typing to complete a value, or using arrow keys.\r\n                    e.target.dataset.ignoreChange = true;\r\n\r\n                }\r\n            });\r\n            element.on('change', function(e) {\r\n                if (e.target.dataset.ignoreChange) {\r\n                    // This change event was triggered from a keyboard change which is not yet complete.\r\n                    // Do not trigger the accessibleChange event until the selection is completed using the [return]\r\n                    // key.\r\n                    return;\r\n                }\r\n\r\n                checkAndTriggerAccessibleChange(e);\r\n            });\r\n            element.on('keyup', function(e) {\r\n                // The key has been lifted. Stop ignoring the change event.\r\n                delete e.target.dataset.ignoreChange;\r\n            });\r\n            element.on('click', function(e) {\r\n                checkAndTriggerAccessibleChange(e);\r\n            });\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Get the list of events and their handlers.\r\n     *\r\n     * @method getHandlers\r\n     * @private\r\n     * @return {object} object key of event names and value of handler functions\r\n     */\r\n    var getHandlers = function() {\r\n        var handlers = {};\r\n\r\n        handlers[events.activate] = addActivateListener;\r\n        handlers[events.keyboardActivate] = addKeyboardActivateListener;\r\n        handlers[events.escape] = addEscapeListener;\r\n        handlers[events.down] = addDownListener;\r\n        handlers[events.up] = addUpListener;\r\n        handlers[events.home] = addHomeListener;\r\n        handlers[events.end] = addEndListener;\r\n        handlers[events.next] = addNextListener;\r\n        handlers[events.previous] = addPreviousListener;\r\n        handlers[events.asterix] = addAsterixListener;\r\n        handlers[events.scrollLock] = addScrollLockListener;\r\n        handlers[events.scrollTop] = addScrollTopListener;\r\n        handlers[events.scrollBottom] = addScrollBottomListener;\r\n        handlers[events.ctrlPageUp] = addCtrlPageUpListener;\r\n        handlers[events.ctrlPageDown] = addCtrlPageDownListener;\r\n        handlers[events.enter] = addEnterListener;\r\n        handlers[events.accessibleChange] = addAccessibleChangeListener;\r\n\r\n        return handlers;\r\n    };\r\n\r\n    /**\r\n     * Add all of the listeners on the given element for the requested events.\r\n     *\r\n     * @method define\r\n     * @public\r\n     * @param {object} element the DOM element to register event listeners on\r\n     * @param {array} include the array of events to be triggered\r\n     */\r\n    var define = function(element, include) {\r\n        element = $(element);\r\n        include = include || [];\r\n\r\n        if (!element.length || !include.length) {\r\n            return;\r\n        }\r\n\r\n        $.each(getHandlers(), function(eventType, handler) {\r\n            if (shouldAddEvent(eventType, include)) {\r\n                handler(element);\r\n            }\r\n        });\r\n    };\r\n\r\n    return {\r\n        define: define,\r\n        events: events,\r\n    };\r\n});\r\n"],"names":["define","$","keyCodes","events","activate","keyboardActivate","escape","down","up","home","end","next","previous","asterix","scrollLock","scrollTop","scrollBottom","ctrlPageUp","ctrlPageDown","enter","accessibleChange","triggeredEvents","isModifierPressed","e","shiftKey","metaKey","altKey","ctrlKey","triggerEvent","eventName","eventTypeKey","hasOwnProperty","originalEvent","target","trigger","type","timeStamp","addKeyboardEvent","element","event","keyCode","off","on","addActivateListener","space","addKeyboardActivateListener","addEscapeListener","addDownListener","arrowDown","addUpListener","arrowUp","addHomeListener","addEndListener","addNextListener","attr","arrowLeft","arrowRight","addPreviousListener","addAsterixListener","addScrollTopListener","addScrollBottomListener","innerHeight","scrollHeight","addScrollLockListener","height","delta","detail","wheelDelta","stopPropagation","preventDefault","returnValue","addCtrlPageUpListener","pageUp","addCtrlPageDownListener","pageDown","addEnterListener","addAccessibleChangeListener","onMac","navigator","userAgent","indexOf","touchEnabled","window","msMaxTouchPoints","checkAndTriggerAccessibleChange","dataset","value","initValue","nativeElement","get","addEventListener","which","ignoreChange","include","handlers","length","each","eventType","handler","shouldAddEvent"],"mappings":"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"}