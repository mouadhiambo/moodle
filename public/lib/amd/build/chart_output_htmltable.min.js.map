{"version":3,"file":"chart_output_htmltable.min.js","sources":["../src/chart_output_htmltable.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * Chart output for HTML table.\r\n *\r\n * @copyright  2016 Frédéric Massart - FMCorz.net\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n * @module     core/chart_output_htmltable\r\n */\r\ndefine([\r\n    'jquery',\r\n    'core/chart_output_base',\r\n], function($, Base) {\r\n\r\n    /**\r\n     * Render a chart as an HTML table.\r\n     *\r\n     * @class\r\n     * @extends {module:core/chart_output_base}\r\n     */\r\n    function Output() {\r\n        Base.prototype.constructor.apply(this, arguments);\r\n        this._build();\r\n    }\r\n    Output.prototype = Object.create(Base.prototype);\r\n\r\n    /**\r\n     * Attach the table to the document.\r\n     *\r\n     * @protected\r\n     */\r\n    Output.prototype._build = function() {\r\n        this._node.empty();\r\n        this._node.append(this._makeTable());\r\n    };\r\n\r\n    /**\r\n     * Builds the table node.\r\n     *\r\n     * @protected\r\n     * @return {Jquery}\r\n     */\r\n    Output.prototype._makeTable = function() {\r\n        var tbl = $('<table>'),\r\n            c = this._chart,\r\n            node,\r\n            value,\r\n            labels = c.getLabels(),\r\n            hasLabel = labels.length > 0,\r\n            series = c.getSeries(),\r\n            seriesLabels,\r\n            rowCount = series[0].getCount();\r\n\r\n        // Identify the table.\r\n        tbl.addClass('chart-output-htmltable generaltable table');\r\n\r\n        // Set the caption.\r\n        if (c.getTitle() !== null) {\r\n            tbl.append($('<caption>').text(c.getTitle()));\r\n        }\r\n\r\n        // Write the column headers.\r\n        node = $('<tr>');\r\n        if (hasLabel) {\r\n            node.append($('<td>'));\r\n        }\r\n        series.forEach(function(serie) {\r\n            node.append(\r\n                $('<th>')\r\n                .text(serie.getLabel())\r\n                .attr('scope', 'col')\r\n            );\r\n        });\r\n        tbl.append(node);\r\n\r\n        // Write rows.\r\n        for (var rowId = 0; rowId < rowCount; rowId++) {\r\n            node = $('<tr>');\r\n            if (labels.length > 0) {\r\n                node.append(\r\n                    $('<th>')\r\n                    .text(labels[rowId])\r\n                    .attr('scope', 'row')\r\n                );\r\n            }\r\n            for (var serieId = 0; serieId < series.length; serieId++) {\r\n                value = series[serieId].getValues()[rowId];\r\n                seriesLabels = series[serieId].getLabels();\r\n                if (seriesLabels !== null) {\r\n                    value = series[serieId].getLabels()[rowId];\r\n                }\r\n                node.append($('<td>').text(value));\r\n            }\r\n            tbl.append(node);\r\n        }\r\n\r\n        return tbl;\r\n    };\r\n\r\n    /** @override */\r\n    Output.prototype.update = function() {\r\n        this._build();\r\n    };\r\n\r\n    return Output;\r\n\r\n});\r\n"],"names":["define","$","Base","Output","prototype","constructor","apply","this","arguments","_build","Object","create","_node","empty","append","_makeTable","node","value","tbl","c","_chart","labels","getLabels","hasLabel","length","series","getSeries","rowCount","getCount","addClass","getTitle","text","forEach","serie","getLabel","attr","rowId","serieId","getValues","update"],"mappings":";;;;;;;AAsBAA,qCAAO,CACH,SACA,2BACD,SAASC,EAAGC,eAQFC,SACLD,KAAKE,UAAUC,YAAYC,MAAMC,KAAMC,gBAClCC,gBAETN,OAAOC,UAAYM,OAAOC,OAAOT,KAAKE,WAOtCD,OAAOC,UAAUK,OAAS,gBACjBG,MAAMC,aACND,MAAME,OAAOP,KAAKQ,eAS3BZ,OAAOC,UAAUW,WAAa,eAGtBC,KACAC,MAHAC,IAAMjB,EAAE,WACRkB,EAAIZ,KAAKa,OAGTC,OAASF,EAAEG,YACXC,SAAWF,OAAOG,OAAS,EAC3BC,OAASN,EAAEO,YAEXC,SAAWF,OAAO,GAAGG,WAGzBV,IAAIW,SAAS,6CAGQ,OAAjBV,EAAEW,YACFZ,IAAIJ,OAAOb,EAAE,aAAa8B,KAAKZ,EAAEW,aAIrCd,KAAOf,EAAE,QACLsB,UACAP,KAAKF,OAAOb,EAAE,SAElBwB,OAAOO,SAAQ,SAASC,OACpBjB,KAAKF,OACDb,EAAE,QACD8B,KAAKE,MAAMC,YACXC,KAAK,QAAS,WAGvBjB,IAAIJ,OAAOE,UAGN,IAAIoB,MAAQ,EAAGA,MAAQT,SAAUS,QAAS,CAC3CpB,KAAOf,EAAE,QACLoB,OAAOG,OAAS,GAChBR,KAAKF,OACDb,EAAE,QACD8B,KAAKV,OAAOe,QACZD,KAAK,QAAS,YAGlB,IAAIE,QAAU,EAAGA,QAAUZ,OAAOD,OAAQa,UAC3CpB,MAAQQ,OAAOY,SAASC,YAAYF,OAEf,OADNX,OAAOY,SAASf,cAE3BL,MAAQQ,OAAOY,SAASf,YAAYc,QAExCpB,KAAKF,OAAOb,EAAE,QAAQ8B,KAAKd,QAE/BC,IAAIJ,OAAOE,aAGRE,KAIXf,OAAOC,UAAUmC,OAAS,gBACjB9B,UAGFN"}