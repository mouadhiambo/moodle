{"version":3,"file":"video-lazy.min.js","sources":["../src/video-lazy.js"],"sourcesContent":["/**\r\n * @license\r\n * Video.js 8.21.1 <http://videojs.com/>\r\n * Copyright Brightcove, Inc. <https://www.brightcove.com/>\r\n * Available under Apache License Version 2.0\r\n * <https://github.com/videojs/video.js/blob/main/LICENSE>\r\n *\r\n * Includes vtt.js <https://github.com/mozilla/vtt.js>\r\n * Available under Apache License Version 2.0\r\n * <https://github.com/mozilla/vtt.js/blob/main/LICENSE>\r\n */\r\n\r\n(function (global, factory) {\r\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\r\n  typeof define === 'function' && define.amd ? define(factory) :\r\n  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, global.videojs = factory());\r\n})(this, (function () { 'use strict';\r\n\r\n  var version$5 = \"8.21.1\";\r\n\r\n  /**\r\n   * An Object that contains lifecycle hooks as keys which point to an array\r\n   * of functions that are run when a lifecycle is triggered\r\n   *\r\n   * @private\r\n   */\r\n  const hooks_ = {};\r\n\r\n  /**\r\n   * Get a list of hooks for a specific lifecycle\r\n   *\r\n   * @param  {string} type\r\n   *         the lifecycle to get hooks from\r\n   *\r\n   * @param  {Function|Function[]} [fn]\r\n   *         Optionally add a hook (or hooks) to the lifecycle that your are getting.\r\n   *\r\n   * @return {Array}\r\n   *         an array of hooks, or an empty array if there are none.\r\n   */\r\n  const hooks = function (type, fn) {\r\n    hooks_[type] = hooks_[type] || [];\r\n    if (fn) {\r\n      hooks_[type] = hooks_[type].concat(fn);\r\n    }\r\n    return hooks_[type];\r\n  };\r\n\r\n  /**\r\n   * Add a function hook to a specific videojs lifecycle.\r\n   *\r\n   * @param {string} type\r\n   *        the lifecycle to hook the function to.\r\n   *\r\n   * @param {Function|Function[]}\r\n   *        The function or array of functions to attach.\r\n   */\r\n  const hook = function (type, fn) {\r\n    hooks(type, fn);\r\n  };\r\n\r\n  /**\r\n   * Remove a hook from a specific videojs lifecycle.\r\n   *\r\n   * @param  {string} type\r\n   *         the lifecycle that the function hooked to\r\n   *\r\n   * @param  {Function} fn\r\n   *         The hooked function to remove\r\n   *\r\n   * @return {boolean}\r\n   *         The function that was removed or undef\r\n   */\r\n  const removeHook = function (type, fn) {\r\n    const index = hooks(type).indexOf(fn);\r\n    if (index <= -1) {\r\n      return false;\r\n    }\r\n    hooks_[type] = hooks_[type].slice();\r\n    hooks_[type].splice(index, 1);\r\n    return true;\r\n  };\r\n\r\n  /**\r\n   * Add a function hook that will only run once to a specific videojs lifecycle.\r\n   *\r\n   * @param {string} type\r\n   *        the lifecycle to hook the function to.\r\n   *\r\n   * @param {Function|Function[]}\r\n   *        The function or array of functions to attach.\r\n   */\r\n  const hookOnce = function (type, fn) {\r\n    hooks(type, [].concat(fn).map(original => {\r\n      const wrapper = (...args) => {\r\n        removeHook(type, wrapper);\r\n        return original(...args);\r\n      };\r\n      return wrapper;\r\n    }));\r\n  };\r\n\r\n  /**\r\n   * @file fullscreen-api.js\r\n   * @module fullscreen-api\r\n   */\r\n\r\n  /**\r\n   * Store the browser-specific methods for the fullscreen API.\r\n   *\r\n   * @type {Object}\r\n   * @see [Specification]{@link https://fullscreen.spec.whatwg.org}\r\n   * @see [Map Approach From Screenfull.js]{@link https://github.com/sindresorhus/screenfull.js}\r\n   */\r\n  const FullscreenApi = {\r\n    prefixed: true\r\n  };\r\n\r\n  // browser API methods\r\n  const apiMap = [['requestFullscreen', 'exitFullscreen', 'fullscreenElement', 'fullscreenEnabled', 'fullscreenchange', 'fullscreenerror', 'fullscreen'],\r\n  // WebKit\r\n  ['webkitRequestFullscreen', 'webkitExitFullscreen', 'webkitFullscreenElement', 'webkitFullscreenEnabled', 'webkitfullscreenchange', 'webkitfullscreenerror', '-webkit-full-screen']];\r\n  const specApi = apiMap[0];\r\n  let browserApi;\r\n\r\n  // determine the supported set of functions\r\n  for (let i = 0; i < apiMap.length; i++) {\r\n    // check for exitFullscreen function\r\n    if (apiMap[i][1] in document) {\r\n      browserApi = apiMap[i];\r\n      break;\r\n    }\r\n  }\r\n\r\n  // map the browser API names to the spec API names\r\n  if (browserApi) {\r\n    for (let i = 0; i < browserApi.length; i++) {\r\n      FullscreenApi[specApi[i]] = browserApi[i];\r\n    }\r\n    FullscreenApi.prefixed = browserApi[0] !== specApi[0];\r\n  }\r\n\r\n  /**\r\n   * @file create-logger.js\r\n   * @module create-logger\r\n   */\r\n\r\n  // This is the private tracking variable for the logging history.\r\n  let history = [];\r\n\r\n  /**\r\n   * Log messages to the console and history based on the type of message\r\n   *\r\n   * @private\r\n   * @param  {string} name\r\n   *         The name of the console method to use.\r\n   *\r\n   * @param  {Object} log\r\n   *         The arguments to be passed to the matching console method.\r\n   *\r\n   * @param {string} [styles]\r\n   *        styles for name\r\n   */\r\n  const LogByTypeFactory = (name, log, styles) => (type, level, args) => {\r\n    const lvl = log.levels[level];\r\n    const lvlRegExp = new RegExp(`^(${lvl})$`);\r\n    let resultName = name;\r\n    if (type !== 'log') {\r\n      // Add the type to the front of the message when it's not \"log\".\r\n      args.unshift(type.toUpperCase() + ':');\r\n    }\r\n    if (styles) {\r\n      resultName = `%c${name}`;\r\n      args.unshift(styles);\r\n    }\r\n\r\n    // Add console prefix after adding to history.\r\n    args.unshift(resultName + ':');\r\n\r\n    // Add a clone of the args at this point to history.\r\n    if (history) {\r\n      history.push([].concat(args));\r\n\r\n      // only store 1000 history entries\r\n      const splice = history.length - 1000;\r\n      history.splice(0, splice > 0 ? splice : 0);\r\n    }\r\n\r\n    // If there's no console then don't try to output messages, but they will\r\n    // still be stored in history.\r\n    if (!window.console) {\r\n      return;\r\n    }\r\n\r\n    // Was setting these once outside of this function, but containing them\r\n    // in the function makes it easier to test cases where console doesn't exist\r\n    // when the module is executed.\r\n    let fn = window.console[type];\r\n    if (!fn && type === 'debug') {\r\n      // Certain browsers don't have support for console.debug. For those, we\r\n      // should default to the closest comparable log.\r\n      fn = window.console.info || window.console.log;\r\n    }\r\n\r\n    // Bail out if there's no console or if this type is not allowed by the\r\n    // current logging level.\r\n    if (!fn || !lvl || !lvlRegExp.test(type)) {\r\n      return;\r\n    }\r\n    fn[Array.isArray(args) ? 'apply' : 'call'](window.console, args);\r\n  };\r\n  function createLogger$1(name, delimiter = ':', styles = '') {\r\n    // This is the private tracking variable for logging level.\r\n    let level = 'info';\r\n\r\n    // the curried logByType bound to the specific log and history\r\n    let logByType;\r\n\r\n    /**\r\n     * Logs plain debug messages. Similar to `console.log`.\r\n     *\r\n     * Due to [limitations](https://github.com/jsdoc3/jsdoc/issues/955#issuecomment-313829149)\r\n     * of our JSDoc template, we cannot properly document this as both a function\r\n     * and a namespace, so its function signature is documented here.\r\n     *\r\n     * #### Arguments\r\n     * ##### *args\r\n     * *[]\r\n     *\r\n     * Any combination of values that could be passed to `console.log()`.\r\n     *\r\n     * #### Return Value\r\n     *\r\n     * `undefined`\r\n     *\r\n     * @namespace\r\n     * @param    {...*} args\r\n     *           One or more messages or objects that should be logged.\r\n     */\r\n    function log(...args) {\r\n      logByType('log', level, args);\r\n    }\r\n\r\n    // This is the logByType helper that the logging methods below use\r\n    logByType = LogByTypeFactory(name, log, styles);\r\n\r\n    /**\r\n     * Create a new subLogger which chains the old name to the new name.\r\n     *\r\n     * For example, doing `mylogger = videojs.log.createLogger('player')` and then using that logger will log the following:\r\n     * ```js\r\n     *  mylogger('foo');\r\n     *  // > VIDEOJS: player: foo\r\n     * ```\r\n     *\r\n     * @param {string} subName\r\n     *        The name to add call the new logger\r\n     * @param {string} [subDelimiter]\r\n     *        Optional delimiter\r\n     * @param {string} [subStyles]\r\n     *        Optional styles\r\n     * @return {Object}\r\n     */\r\n    log.createLogger = (subName, subDelimiter, subStyles) => {\r\n      const resultDelimiter = subDelimiter !== undefined ? subDelimiter : delimiter;\r\n      const resultStyles = subStyles !== undefined ? subStyles : styles;\r\n      const resultName = `${name} ${resultDelimiter} ${subName}`;\r\n      return createLogger$1(resultName, resultDelimiter, resultStyles);\r\n    };\r\n\r\n    /**\r\n     * Create a new logger.\r\n     *\r\n     * @param {string} newName\r\n     *        The name for the new logger\r\n     * @param {string} [newDelimiter]\r\n     *        Optional delimiter\r\n     * @param {string} [newStyles]\r\n     *        Optional styles\r\n     * @return {Object}\r\n     */\r\n    log.createNewLogger = (newName, newDelimiter, newStyles) => {\r\n      return createLogger$1(newName, newDelimiter, newStyles);\r\n    };\r\n\r\n    /**\r\n     * Enumeration of available logging levels, where the keys are the level names\r\n     * and the values are `|`-separated strings containing logging methods allowed\r\n     * in that logging level. These strings are used to create a regular expression\r\n     * matching the function name being called.\r\n     *\r\n     * Levels provided by Video.js are:\r\n     *\r\n     * - `off`: Matches no calls. Any value that can be cast to `false` will have\r\n     *   this effect. The most restrictive.\r\n     * - `all`: Matches only Video.js-provided functions (`debug`, `log`,\r\n     *   `log.warn`, and `log.error`).\r\n     * - `debug`: Matches `log.debug`, `log`, `log.warn`, and `log.error` calls.\r\n     * - `info` (default): Matches `log`, `log.warn`, and `log.error` calls.\r\n     * - `warn`: Matches `log.warn` and `log.error` calls.\r\n     * - `error`: Matches only `log.error` calls.\r\n     *\r\n     * @type {Object}\r\n     */\r\n    log.levels = {\r\n      all: 'debug|log|warn|error',\r\n      off: '',\r\n      debug: 'debug|log|warn|error',\r\n      info: 'log|warn|error',\r\n      warn: 'warn|error',\r\n      error: 'error',\r\n      DEFAULT: level\r\n    };\r\n\r\n    /**\r\n     * Get or set the current logging level.\r\n     *\r\n     * If a string matching a key from {@link module:log.levels} is provided, acts\r\n     * as a setter.\r\n     *\r\n     * @param  {'all'|'debug'|'info'|'warn'|'error'|'off'} [lvl]\r\n     *         Pass a valid level to set a new logging level.\r\n     *\r\n     * @return {string}\r\n     *         The current logging level.\r\n     */\r\n    log.level = lvl => {\r\n      if (typeof lvl === 'string') {\r\n        if (!log.levels.hasOwnProperty(lvl)) {\r\n          throw new Error(`\"${lvl}\" in not a valid log level`);\r\n        }\r\n        level = lvl;\r\n      }\r\n      return level;\r\n    };\r\n\r\n    /**\r\n     * Returns an array containing everything that has been logged to the history.\r\n     *\r\n     * This array is a shallow clone of the internal history record. However, its\r\n     * contents are _not_ cloned; so, mutating objects inside this array will\r\n     * mutate them in history.\r\n     *\r\n     * @return {Array}\r\n     */\r\n    log.history = () => history ? [].concat(history) : [];\r\n\r\n    /**\r\n     * Allows you to filter the history by the given logger name\r\n     *\r\n     * @param {string} fname\r\n     *        The name to filter by\r\n     *\r\n     * @return {Array}\r\n     *         The filtered list to return\r\n     */\r\n    log.history.filter = fname => {\r\n      return (history || []).filter(historyItem => {\r\n        // if the first item in each historyItem includes `fname`, then it's a match\r\n        return new RegExp(`.*${fname}.*`).test(historyItem[0]);\r\n      });\r\n    };\r\n\r\n    /**\r\n     * Clears the internal history tracking, but does not prevent further history\r\n     * tracking.\r\n     */\r\n    log.history.clear = () => {\r\n      if (history) {\r\n        history.length = 0;\r\n      }\r\n    };\r\n\r\n    /**\r\n     * Disable history tracking if it is currently enabled.\r\n     */\r\n    log.history.disable = () => {\r\n      if (history !== null) {\r\n        history.length = 0;\r\n        history = null;\r\n      }\r\n    };\r\n\r\n    /**\r\n     * Enable history tracking if it is currently disabled.\r\n     */\r\n    log.history.enable = () => {\r\n      if (history === null) {\r\n        history = [];\r\n      }\r\n    };\r\n\r\n    /**\r\n     * Logs error messages. Similar to `console.error`.\r\n     *\r\n     * @param {...*} args\r\n     *        One or more messages or objects that should be logged as an error\r\n     */\r\n    log.error = (...args) => logByType('error', level, args);\r\n\r\n    /**\r\n     * Logs warning messages. Similar to `console.warn`.\r\n     *\r\n     * @param {...*} args\r\n     *        One or more messages or objects that should be logged as a warning.\r\n     */\r\n    log.warn = (...args) => logByType('warn', level, args);\r\n\r\n    /**\r\n     * Logs debug messages. Similar to `console.debug`, but may also act as a comparable\r\n     * log if `console.debug` is not available\r\n     *\r\n     * @param {...*} args\r\n     *        One or more messages or objects that should be logged as debug.\r\n     */\r\n    log.debug = (...args) => logByType('debug', level, args);\r\n    return log;\r\n  }\r\n\r\n  /**\r\n   * @file log.js\r\n   * @module log\r\n   */\r\n  const log$1 = createLogger$1('VIDEOJS');\r\n  const createLogger = log$1.createLogger;\r\n\r\n  /**\r\n   * @file obj.js\r\n   * @module obj\r\n   */\r\n\r\n  /**\r\n   * @callback obj:EachCallback\r\n   *\r\n   * @param {*} value\r\n   *        The current key for the object that is being iterated over.\r\n   *\r\n   * @param {string} key\r\n   *        The current key-value for object that is being iterated over\r\n   */\r\n\r\n  /**\r\n   * @callback obj:ReduceCallback\r\n   *\r\n   * @param {*} accum\r\n   *        The value that is accumulating over the reduce loop.\r\n   *\r\n   * @param {*} value\r\n   *        The current key for the object that is being iterated over.\r\n   *\r\n   * @param {string} key\r\n   *        The current key-value for object that is being iterated over\r\n   *\r\n   * @return {*}\r\n   *         The new accumulated value.\r\n   */\r\n  const toString$1 = Object.prototype.toString;\r\n\r\n  /**\r\n   * Get the keys of an Object\r\n   *\r\n   * @param {Object}\r\n   *        The Object to get the keys from\r\n   *\r\n   * @return {string[]}\r\n   *         An array of the keys from the object. Returns an empty array if the\r\n   *         object passed in was invalid or had no keys.\r\n   *\r\n   * @private\r\n   */\r\n  const keys = function (object) {\r\n    return isObject$1(object) ? Object.keys(object) : [];\r\n  };\r\n\r\n  /**\r\n   * Array-like iteration for objects.\r\n   *\r\n   * @param {Object} object\r\n   *        The object to iterate over\r\n   *\r\n   * @param {obj:EachCallback} fn\r\n   *        The callback function which is called for each key in the object.\r\n   */\r\n  function each(object, fn) {\r\n    keys(object).forEach(key => fn(object[key], key));\r\n  }\r\n\r\n  /**\r\n   * Array-like reduce for objects.\r\n   *\r\n   * @param {Object} object\r\n   *        The Object that you want to reduce.\r\n   *\r\n   * @param {Function} fn\r\n   *         A callback function which is called for each key in the object. It\r\n   *         receives the accumulated value and the per-iteration value and key\r\n   *         as arguments.\r\n   *\r\n   * @param {*} [initial = 0]\r\n   *        Starting value\r\n   *\r\n   * @return {*}\r\n   *         The final accumulated value.\r\n   */\r\n  function reduce(object, fn, initial = 0) {\r\n    return keys(object).reduce((accum, key) => fn(accum, object[key], key), initial);\r\n  }\r\n\r\n  /**\r\n   * Returns whether a value is an object of any kind - including DOM nodes,\r\n   * arrays, regular expressions, etc. Not functions, though.\r\n   *\r\n   * This avoids the gotcha where using `typeof` on a `null` value\r\n   * results in `'object'`.\r\n   *\r\n   * @param  {Object} value\r\n   * @return {boolean}\r\n   */\r\n  function isObject$1(value) {\r\n    return !!value && typeof value === 'object';\r\n  }\r\n\r\n  /**\r\n   * Returns whether an object appears to be a \"plain\" object - that is, a\r\n   * direct instance of `Object`.\r\n   *\r\n   * @param  {Object} value\r\n   * @return {boolean}\r\n   */\r\n  function isPlain(value) {\r\n    return isObject$1(value) && toString$1.call(value) === '[object Object]' && value.constructor === Object;\r\n  }\r\n\r\n  /**\r\n   * Merge two objects recursively.\r\n   *\r\n   * Performs a deep merge like\r\n   * {@link https://lodash.com/docs/4.17.10#merge|lodash.merge}, but only merges\r\n   * plain objects (not arrays, elements, or anything else).\r\n   *\r\n   * Non-plain object values will be copied directly from the right-most\r\n   * argument.\r\n   *\r\n   * @param   {Object[]} sources\r\n   *          One or more objects to merge into a new object.\r\n   *\r\n   * @return {Object}\r\n   *          A new object that is the merged result of all sources.\r\n   */\r\n  function merge$2(...sources) {\r\n    const result = {};\r\n    sources.forEach(source => {\r\n      if (!source) {\r\n        return;\r\n      }\r\n      each(source, (value, key) => {\r\n        if (!isPlain(value)) {\r\n          result[key] = value;\r\n          return;\r\n        }\r\n        if (!isPlain(result[key])) {\r\n          result[key] = {};\r\n        }\r\n        result[key] = merge$2(result[key], value);\r\n      });\r\n    });\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Returns an array of values for a given object\r\n   *\r\n   * @param  {Object} source - target object\r\n   * @return {Array<unknown>} - object values\r\n   */\r\n  function values$1(source = {}) {\r\n    const result = [];\r\n    for (const key in source) {\r\n      if (source.hasOwnProperty(key)) {\r\n        const value = source[key];\r\n        result.push(value);\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Object.defineProperty but \"lazy\", which means that the value is only set after\r\n   * it is retrieved the first time, rather than being set right away.\r\n   *\r\n   * @param {Object} obj the object to set the property on\r\n   * @param {string} key the key for the property to set\r\n   * @param {Function} getValue the function used to get the value when it is needed.\r\n   * @param {boolean} setter whether a setter should be allowed or not\r\n   */\r\n  function defineLazyProperty(obj, key, getValue, setter = true) {\r\n    const set = value => Object.defineProperty(obj, key, {\r\n      value,\r\n      enumerable: true,\r\n      writable: true\r\n    });\r\n    const options = {\r\n      configurable: true,\r\n      enumerable: true,\r\n      get() {\r\n        const value = getValue();\r\n        set(value);\r\n        return value;\r\n      }\r\n    };\r\n    if (setter) {\r\n      options.set = set;\r\n    }\r\n    return Object.defineProperty(obj, key, options);\r\n  }\r\n\r\n  var Obj = /*#__PURE__*/Object.freeze({\r\n    __proto__: null,\r\n    each: each,\r\n    reduce: reduce,\r\n    isObject: isObject$1,\r\n    isPlain: isPlain,\r\n    merge: merge$2,\r\n    values: values$1,\r\n    defineLazyProperty: defineLazyProperty\r\n  });\r\n\r\n  /**\r\n   * @file browser.js\r\n   * @module browser\r\n   */\r\n\r\n  /**\r\n   * Whether or not this device is an iPod.\r\n   *\r\n   * @static\r\n   * @type {Boolean}\r\n   */\r\n  let IS_IPOD = false;\r\n\r\n  /**\r\n   * The detected iOS version - or `null`.\r\n   *\r\n   * @static\r\n   * @type {string|null}\r\n   */\r\n  let IOS_VERSION = null;\r\n\r\n  /**\r\n   * Whether or not this is an Android device.\r\n   *\r\n   * @static\r\n   * @type {Boolean}\r\n   */\r\n  let IS_ANDROID = false;\r\n\r\n  /**\r\n   * The detected Android version - or `null` if not Android or indeterminable.\r\n   *\r\n   * @static\r\n   * @type {number|string|null}\r\n   */\r\n  let ANDROID_VERSION;\r\n\r\n  /**\r\n   * Whether or not this is Mozilla Firefox.\r\n   *\r\n   * @static\r\n   * @type {Boolean}\r\n   */\r\n  let IS_FIREFOX = false;\r\n\r\n  /**\r\n   * Whether or not this is Microsoft Edge.\r\n   *\r\n   * @static\r\n   * @type {Boolean}\r\n   */\r\n  let IS_EDGE = false;\r\n\r\n  /**\r\n   * Whether or not this is any Chromium Browser\r\n   *\r\n   * @static\r\n   * @type {Boolean}\r\n   */\r\n  let IS_CHROMIUM = false;\r\n\r\n  /**\r\n   * Whether or not this is any Chromium browser that is not Edge.\r\n   *\r\n   * This will also be `true` for Chrome on iOS, which will have different support\r\n   * as it is actually Safari under the hood.\r\n   *\r\n   * Deprecated, as the behaviour to not match Edge was to prevent Legacy Edge's UA matching.\r\n   * IS_CHROMIUM should be used instead.\r\n   * \"Chromium but not Edge\" could be explicitly tested with IS_CHROMIUM && !IS_EDGE\r\n   *\r\n   * @static\r\n   * @deprecated\r\n   * @type {Boolean}\r\n   */\r\n  let IS_CHROME = false;\r\n\r\n  /**\r\n   * The detected Chromium version - or `null`.\r\n   *\r\n   * @static\r\n   * @type {number|null}\r\n   */\r\n  let CHROMIUM_VERSION = null;\r\n\r\n  /**\r\n   * The detected Google Chrome version - or `null`.\r\n   * This has always been the _Chromium_ version, i.e. would return on Chromium Edge.\r\n   * Deprecated, use CHROMIUM_VERSION instead.\r\n   *\r\n   * @static\r\n   * @deprecated\r\n   * @type {number|null}\r\n   */\r\n  let CHROME_VERSION = null;\r\n\r\n  /**\r\n   * Whether or not this is a Chromecast receiver application.\r\n   *\r\n   * @static\r\n   * @type {Boolean}\r\n   */\r\n  const IS_CHROMECAST_RECEIVER = Boolean(window.cast && window.cast.framework && window.cast.framework.CastReceiverContext);\r\n\r\n  /**\r\n   * The detected Internet Explorer version - or `null`.\r\n   *\r\n   * @static\r\n   * @deprecated\r\n   * @type {number|null}\r\n   */\r\n  let IE_VERSION = null;\r\n\r\n  /**\r\n   * Whether or not this is desktop Safari.\r\n   *\r\n   * @static\r\n   * @type {Boolean}\r\n   */\r\n  let IS_SAFARI = false;\r\n\r\n  /**\r\n   * Whether or not this is a Windows machine.\r\n   *\r\n   * @static\r\n   * @type {Boolean}\r\n   */\r\n  let IS_WINDOWS = false;\r\n\r\n  /**\r\n   * Whether or not this device is an iPad.\r\n   *\r\n   * @static\r\n   * @type {Boolean}\r\n   */\r\n  let IS_IPAD = false;\r\n\r\n  /**\r\n   * Whether or not this device is an iPhone.\r\n   *\r\n   * @static\r\n   * @type {Boolean}\r\n   */\r\n  // The Facebook app's UIWebView identifies as both an iPhone and iPad, so\r\n  // to identify iPhones, we need to exclude iPads.\r\n  // http://artsy.github.io/blog/2012/10/18/the-perils-of-ios-user-agent-sniffing/\r\n  let IS_IPHONE = false;\r\n\r\n  /**\r\n   * Whether or not this is a Tizen device.\r\n   *\r\n   * @static\r\n   * @type {Boolean}\r\n   */\r\n  let IS_TIZEN = false;\r\n\r\n  /**\r\n   * Whether or not this is a WebOS device.\r\n   *\r\n   * @static\r\n   * @type {Boolean}\r\n   */\r\n  let IS_WEBOS = false;\r\n\r\n  /**\r\n   * Whether or not this is a Smart TV (Tizen or WebOS) device.\r\n   *\r\n   * @static\r\n   * @type {Boolean}\r\n   */\r\n  let IS_SMART_TV = false;\r\n\r\n  /**\r\n   * Whether or not this device is touch-enabled.\r\n   *\r\n   * @static\r\n   * @const\r\n   * @type {Boolean}\r\n   */\r\n  const TOUCH_ENABLED = Boolean(isReal() && ('ontouchstart' in window || window.navigator.maxTouchPoints || window.DocumentTouch && window.document instanceof window.DocumentTouch));\r\n  const UAD = window.navigator && window.navigator.userAgentData;\r\n  if (UAD && UAD.platform && UAD.brands) {\r\n    // If userAgentData is present, use it instead of userAgent to avoid warnings\r\n    // Currently only implemented on Chromium\r\n    // userAgentData does not expose Android version, so ANDROID_VERSION remains `null`\r\n\r\n    IS_ANDROID = UAD.platform === 'Android';\r\n    IS_EDGE = Boolean(UAD.brands.find(b => b.brand === 'Microsoft Edge'));\r\n    IS_CHROMIUM = Boolean(UAD.brands.find(b => b.brand === 'Chromium'));\r\n    IS_CHROME = !IS_EDGE && IS_CHROMIUM;\r\n    CHROMIUM_VERSION = CHROME_VERSION = (UAD.brands.find(b => b.brand === 'Chromium') || {}).version || null;\r\n    IS_WINDOWS = UAD.platform === 'Windows';\r\n  }\r\n\r\n  // If the browser is not Chromium, either userAgentData is not present which could be an old Chromium browser,\r\n  //  or it's a browser that has added userAgentData since that we don't have tests for yet. In either case,\r\n  // the checks need to be made agiainst the regular userAgent string.\r\n  if (!IS_CHROMIUM) {\r\n    const USER_AGENT = window.navigator && window.navigator.userAgent || '';\r\n    IS_IPOD = /iPod/i.test(USER_AGENT);\r\n    IOS_VERSION = function () {\r\n      const match = USER_AGENT.match(/OS (\\d+)_/i);\r\n      if (match && match[1]) {\r\n        return match[1];\r\n      }\r\n      return null;\r\n    }();\r\n    IS_ANDROID = /Android/i.test(USER_AGENT);\r\n    ANDROID_VERSION = function () {\r\n      // This matches Android Major.Minor.Patch versions\r\n      // ANDROID_VERSION is Major.Minor as a Number, if Minor isn't available, then only Major is returned\r\n      const match = USER_AGENT.match(/Android (\\d+)(?:\\.(\\d+))?(?:\\.(\\d+))*/i);\r\n      if (!match) {\r\n        return null;\r\n      }\r\n      const major = match[1] && parseFloat(match[1]);\r\n      const minor = match[2] && parseFloat(match[2]);\r\n      if (major && minor) {\r\n        return parseFloat(match[1] + '.' + match[2]);\r\n      } else if (major) {\r\n        return major;\r\n      }\r\n      return null;\r\n    }();\r\n    IS_FIREFOX = /Firefox/i.test(USER_AGENT);\r\n    IS_EDGE = /Edg/i.test(USER_AGENT);\r\n    IS_CHROMIUM = /Chrome/i.test(USER_AGENT) || /CriOS/i.test(USER_AGENT);\r\n    IS_CHROME = !IS_EDGE && IS_CHROMIUM;\r\n    CHROMIUM_VERSION = CHROME_VERSION = function () {\r\n      const match = USER_AGENT.match(/(Chrome|CriOS)\\/(\\d+)/);\r\n      if (match && match[2]) {\r\n        return parseFloat(match[2]);\r\n      }\r\n      return null;\r\n    }();\r\n    IE_VERSION = function () {\r\n      const result = /MSIE\\s(\\d+)\\.\\d/.exec(USER_AGENT);\r\n      let version = result && parseFloat(result[1]);\r\n      if (!version && /Trident\\/7.0/i.test(USER_AGENT) && /rv:11.0/.test(USER_AGENT)) {\r\n        // IE 11 has a different user agent string than other IE versions\r\n        version = 11.0;\r\n      }\r\n      return version;\r\n    }();\r\n    IS_TIZEN = /Tizen/i.test(USER_AGENT);\r\n    IS_WEBOS = /Web0S/i.test(USER_AGENT);\r\n    IS_SMART_TV = IS_TIZEN || IS_WEBOS;\r\n    IS_SAFARI = /Safari/i.test(USER_AGENT) && !IS_CHROME && !IS_ANDROID && !IS_EDGE && !IS_SMART_TV;\r\n    IS_WINDOWS = /Windows/i.test(USER_AGENT);\r\n    IS_IPAD = /iPad/i.test(USER_AGENT) || IS_SAFARI && TOUCH_ENABLED && !/iPhone/i.test(USER_AGENT);\r\n    IS_IPHONE = /iPhone/i.test(USER_AGENT) && !IS_IPAD;\r\n  }\r\n\r\n  /**\r\n   * Whether or not this is an iOS device.\r\n   *\r\n   * @static\r\n   * @const\r\n   * @type {Boolean}\r\n   */\r\n  const IS_IOS = IS_IPHONE || IS_IPAD || IS_IPOD;\r\n\r\n  /**\r\n   * Whether or not this is any flavor of Safari - including iOS.\r\n   *\r\n   * @static\r\n   * @const\r\n   * @type {Boolean}\r\n   */\r\n  const IS_ANY_SAFARI = (IS_SAFARI || IS_IOS) && !IS_CHROME;\r\n\r\n  var browser = /*#__PURE__*/Object.freeze({\r\n    __proto__: null,\r\n    get IS_IPOD () { return IS_IPOD; },\r\n    get IOS_VERSION () { return IOS_VERSION; },\r\n    get IS_ANDROID () { return IS_ANDROID; },\r\n    get ANDROID_VERSION () { return ANDROID_VERSION; },\r\n    get IS_FIREFOX () { return IS_FIREFOX; },\r\n    get IS_EDGE () { return IS_EDGE; },\r\n    get IS_CHROMIUM () { return IS_CHROMIUM; },\r\n    get IS_CHROME () { return IS_CHROME; },\r\n    get CHROMIUM_VERSION () { return CHROMIUM_VERSION; },\r\n    get CHROME_VERSION () { return CHROME_VERSION; },\r\n    IS_CHROMECAST_RECEIVER: IS_CHROMECAST_RECEIVER,\r\n    get IE_VERSION () { return IE_VERSION; },\r\n    get IS_SAFARI () { return IS_SAFARI; },\r\n    get IS_WINDOWS () { return IS_WINDOWS; },\r\n    get IS_IPAD () { return IS_IPAD; },\r\n    get IS_IPHONE () { return IS_IPHONE; },\r\n    get IS_TIZEN () { return IS_TIZEN; },\r\n    get IS_WEBOS () { return IS_WEBOS; },\r\n    get IS_SMART_TV () { return IS_SMART_TV; },\r\n    TOUCH_ENABLED: TOUCH_ENABLED,\r\n    IS_IOS: IS_IOS,\r\n    IS_ANY_SAFARI: IS_ANY_SAFARI\r\n  });\r\n\r\n  /**\r\n   * @file dom.js\r\n   * @module dom\r\n   */\r\n\r\n  /**\r\n   * Detect if a value is a string with any non-whitespace characters.\r\n   *\r\n   * @private\r\n   * @param  {string} str\r\n   *         The string to check\r\n   *\r\n   * @return {boolean}\r\n   *         Will be `true` if the string is non-blank, `false` otherwise.\r\n   *\r\n   */\r\n  function isNonBlankString(str) {\r\n    // we use str.trim as it will trim any whitespace characters\r\n    // from the front or back of non-whitespace characters. aka\r\n    // Any string that contains non-whitespace characters will\r\n    // still contain them after `trim` but whitespace only strings\r\n    // will have a length of 0, failing this check.\r\n    return typeof str === 'string' && Boolean(str.trim());\r\n  }\r\n\r\n  /**\r\n   * Throws an error if the passed string has whitespace. This is used by\r\n   * class methods to be relatively consistent with the classList API.\r\n   *\r\n   * @private\r\n   * @param  {string} str\r\n   *         The string to check for whitespace.\r\n   *\r\n   * @throws {Error}\r\n   *         Throws an error if there is whitespace in the string.\r\n   */\r\n  function throwIfWhitespace(str) {\r\n    // str.indexOf instead of regex because str.indexOf is faster performance wise.\r\n    if (str.indexOf(' ') >= 0) {\r\n      throw new Error('class has illegal whitespace characters');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Whether the current DOM interface appears to be real (i.e. not simulated).\r\n   *\r\n   * @return {boolean}\r\n   *         Will be `true` if the DOM appears to be real, `false` otherwise.\r\n   */\r\n  function isReal() {\r\n    // Both document and window will never be undefined thanks to `global`.\r\n    return document === window.document;\r\n  }\r\n\r\n  /**\r\n   * Determines, via duck typing, whether or not a value is a DOM element.\r\n   *\r\n   * @param  {*} value\r\n   *         The value to check.\r\n   *\r\n   * @return {boolean}\r\n   *         Will be `true` if the value is a DOM element, `false` otherwise.\r\n   */\r\n  function isEl(value) {\r\n    return isObject$1(value) && value.nodeType === 1;\r\n  }\r\n\r\n  /**\r\n   * Determines if the current DOM is embedded in an iframe.\r\n   *\r\n   * @return {boolean}\r\n   *         Will be `true` if the DOM is embedded in an iframe, `false`\r\n   *         otherwise.\r\n   */\r\n  function isInFrame() {\r\n    // We need a try/catch here because Safari will throw errors when attempting\r\n    // to get either `parent` or `self`\r\n    try {\r\n      return window.parent !== window.self;\r\n    } catch (x) {\r\n      return true;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Creates functions to query the DOM using a given method.\r\n   *\r\n   * @private\r\n   * @param   {string} method\r\n   *          The method to create the query with.\r\n   *\r\n   * @return  {Function}\r\n   *          The query method\r\n   */\r\n  function createQuerier(method) {\r\n    return function (selector, context) {\r\n      if (!isNonBlankString(selector)) {\r\n        return document[method](null);\r\n      }\r\n      if (isNonBlankString(context)) {\r\n        context = document.querySelector(context);\r\n      }\r\n      const ctx = isEl(context) ? context : document;\r\n      return ctx[method] && ctx[method](selector);\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Creates an element and applies properties, attributes, and inserts content.\r\n   *\r\n   * @param  {string} [tagName='div']\r\n   *         Name of tag to be created.\r\n   *\r\n   * @param  {Object} [properties={}]\r\n   *         Element properties to be applied.\r\n   *\r\n   * @param  {Object} [attributes={}]\r\n   *         Element attributes to be applied.\r\n   *\r\n   * @param {ContentDescriptor} [content]\r\n   *        A content descriptor object.\r\n   *\r\n   * @return {Element}\r\n   *         The element that was created.\r\n   */\r\n  function createEl(tagName = 'div', properties = {}, attributes = {}, content) {\r\n    const el = document.createElement(tagName);\r\n    Object.getOwnPropertyNames(properties).forEach(function (propName) {\r\n      const val = properties[propName];\r\n\r\n      // Handle textContent since it's not supported everywhere and we have a\r\n      // method for it.\r\n      if (propName === 'textContent') {\r\n        textContent(el, val);\r\n      } else if (el[propName] !== val || propName === 'tabIndex') {\r\n        el[propName] = val;\r\n      }\r\n    });\r\n    Object.getOwnPropertyNames(attributes).forEach(function (attrName) {\r\n      el.setAttribute(attrName, attributes[attrName]);\r\n    });\r\n    if (content) {\r\n      appendContent(el, content);\r\n    }\r\n    return el;\r\n  }\r\n\r\n  /**\r\n   * Injects text into an element, replacing any existing contents entirely.\r\n   *\r\n   * @param  {HTMLElement} el\r\n   *         The element to add text content into\r\n   *\r\n   * @param  {string} text\r\n   *         The text content to add.\r\n   *\r\n   * @return {Element}\r\n   *         The element with added text content.\r\n   */\r\n  function textContent(el, text) {\r\n    if (typeof el.textContent === 'undefined') {\r\n      el.innerText = text;\r\n    } else {\r\n      el.textContent = text;\r\n    }\r\n    return el;\r\n  }\r\n\r\n  /**\r\n   * Insert an element as the first child node of another\r\n   *\r\n   * @param {Element} child\r\n   *        Element to insert\r\n   *\r\n   * @param {Element} parent\r\n   *        Element to insert child into\r\n   */\r\n  function prependTo(child, parent) {\r\n    if (parent.firstChild) {\r\n      parent.insertBefore(child, parent.firstChild);\r\n    } else {\r\n      parent.appendChild(child);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Check if an element has a class name.\r\n   *\r\n   * @param  {Element} element\r\n   *         Element to check\r\n   *\r\n   * @param  {string} classToCheck\r\n   *         Class name to check for\r\n   *\r\n   * @return {boolean}\r\n   *         Will be `true` if the element has a class, `false` otherwise.\r\n   *\r\n   * @throws {Error}\r\n   *         Throws an error if `classToCheck` has white space.\r\n   */\r\n  function hasClass(element, classToCheck) {\r\n    throwIfWhitespace(classToCheck);\r\n    return element.classList.contains(classToCheck);\r\n  }\r\n\r\n  /**\r\n   * Add a class name to an element.\r\n   *\r\n   * @param  {Element} element\r\n   *         Element to add class name to.\r\n   *\r\n   * @param  {...string} classesToAdd\r\n   *         One or more class name to add.\r\n   *\r\n   * @return {Element}\r\n   *         The DOM element with the added class name.\r\n   */\r\n  function addClass(element, ...classesToAdd) {\r\n    element.classList.add(...classesToAdd.reduce((prev, current) => prev.concat(current.split(/\\s+/)), []));\r\n    return element;\r\n  }\r\n\r\n  /**\r\n   * Remove a class name from an element.\r\n   *\r\n   * @param  {Element} element\r\n   *         Element to remove a class name from.\r\n   *\r\n   * @param  {...string} classesToRemove\r\n   *         One or more class name to remove.\r\n   *\r\n   * @return {Element}\r\n   *         The DOM element with class name removed.\r\n   */\r\n  function removeClass(element, ...classesToRemove) {\r\n    // Protect in case the player gets disposed\r\n    if (!element) {\r\n      log$1.warn(\"removeClass was called with an element that doesn't exist\");\r\n      return null;\r\n    }\r\n    element.classList.remove(...classesToRemove.reduce((prev, current) => prev.concat(current.split(/\\s+/)), []));\r\n    return element;\r\n  }\r\n\r\n  /**\r\n   * The callback definition for toggleClass.\r\n   *\r\n   * @callback PredicateCallback\r\n   * @param    {Element} element\r\n   *           The DOM element of the Component.\r\n   *\r\n   * @param    {string} classToToggle\r\n   *           The `className` that wants to be toggled\r\n   *\r\n   * @return   {boolean|undefined}\r\n   *           If `true` is returned, the `classToToggle` will be added to the\r\n   *           `element`, but not removed. If `false`, the `classToToggle` will be removed from\r\n   *           the `element`, but not added. If `undefined`, the callback will be ignored.\r\n   *\r\n   */\r\n\r\n  /**\r\n   * Adds or removes a class name to/from an element depending on an optional\r\n   * condition or the presence/absence of the class name.\r\n   *\r\n   * @param  {Element} element\r\n   *         The element to toggle a class name on.\r\n   *\r\n   * @param  {string} classToToggle\r\n   *         The class that should be toggled.\r\n   *\r\n   * @param  {boolean|PredicateCallback} [predicate]\r\n   *         See the return value for {@link module:dom~PredicateCallback}\r\n   *\r\n   * @return {Element}\r\n   *         The element with a class that has been toggled.\r\n   */\r\n  function toggleClass(element, classToToggle, predicate) {\r\n    if (typeof predicate === 'function') {\r\n      predicate = predicate(element, classToToggle);\r\n    }\r\n    if (typeof predicate !== 'boolean') {\r\n      predicate = undefined;\r\n    }\r\n    classToToggle.split(/\\s+/).forEach(className => element.classList.toggle(className, predicate));\r\n    return element;\r\n  }\r\n\r\n  /**\r\n   * Apply attributes to an HTML element.\r\n   *\r\n   * @param {Element} el\r\n   *        Element to add attributes to.\r\n   *\r\n   * @param {Object} [attributes]\r\n   *        Attributes to be applied.\r\n   */\r\n  function setAttributes(el, attributes) {\r\n    Object.getOwnPropertyNames(attributes).forEach(function (attrName) {\r\n      const attrValue = attributes[attrName];\r\n      if (attrValue === null || typeof attrValue === 'undefined' || attrValue === false) {\r\n        el.removeAttribute(attrName);\r\n      } else {\r\n        el.setAttribute(attrName, attrValue === true ? '' : attrValue);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Get an element's attribute values, as defined on the HTML tag.\r\n   *\r\n   * Attributes are not the same as properties. They're defined on the tag\r\n   * or with setAttribute.\r\n   *\r\n   * @param  {Element} tag\r\n   *         Element from which to get tag attributes.\r\n   *\r\n   * @return {Object}\r\n   *         All attributes of the element. Boolean attributes will be `true` or\r\n   *         `false`, others will be strings.\r\n   */\r\n  function getAttributes(tag) {\r\n    const obj = {};\r\n\r\n    // known boolean attributes\r\n    // we can check for matching boolean properties, but not all browsers\r\n    // and not all tags know about these attributes, so, we still want to check them manually\r\n    const knownBooleans = ['autoplay', 'controls', 'playsinline', 'loop', 'muted', 'default', 'defaultMuted'];\r\n    if (tag && tag.attributes && tag.attributes.length > 0) {\r\n      const attrs = tag.attributes;\r\n      for (let i = attrs.length - 1; i >= 0; i--) {\r\n        const attrName = attrs[i].name;\r\n        /** @type {boolean|string} */\r\n        let attrVal = attrs[i].value;\r\n\r\n        // check for known booleans\r\n        // the matching element property will return a value for typeof\r\n        if (knownBooleans.includes(attrName)) {\r\n          // the value of an included boolean attribute is typically an empty\r\n          // string ('') which would equal false if we just check for a false value.\r\n          // we also don't want support bad code like autoplay='false'\r\n          attrVal = attrVal !== null ? true : false;\r\n        }\r\n        obj[attrName] = attrVal;\r\n      }\r\n    }\r\n    return obj;\r\n  }\r\n\r\n  /**\r\n   * Get the value of an element's attribute.\r\n   *\r\n   * @param {Element} el\r\n   *        A DOM element.\r\n   *\r\n   * @param {string} attribute\r\n   *        Attribute to get the value of.\r\n   *\r\n   * @return {string}\r\n   *         The value of the attribute.\r\n   */\r\n  function getAttribute(el, attribute) {\r\n    return el.getAttribute(attribute);\r\n  }\r\n\r\n  /**\r\n   * Set the value of an element's attribute.\r\n   *\r\n   * @param {Element} el\r\n   *        A DOM element.\r\n   *\r\n   * @param {string} attribute\r\n   *        Attribute to set.\r\n   *\r\n   * @param {string} value\r\n   *        Value to set the attribute to.\r\n   */\r\n  function setAttribute(el, attribute, value) {\r\n    el.setAttribute(attribute, value);\r\n  }\r\n\r\n  /**\r\n   * Remove an element's attribute.\r\n   *\r\n   * @param {Element} el\r\n   *        A DOM element.\r\n   *\r\n   * @param {string} attribute\r\n   *        Attribute to remove.\r\n   */\r\n  function removeAttribute(el, attribute) {\r\n    el.removeAttribute(attribute);\r\n  }\r\n\r\n  /**\r\n   * Attempt to block the ability to select text.\r\n   */\r\n  function blockTextSelection() {\r\n    document.body.focus();\r\n    document.onselectstart = function () {\r\n      return false;\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Turn off text selection blocking.\r\n   */\r\n  function unblockTextSelection() {\r\n    document.onselectstart = function () {\r\n      return true;\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Identical to the native `getBoundingClientRect` function, but ensures that\r\n   * the method is supported at all (it is in all browsers we claim to support)\r\n   * and that the element is in the DOM before continuing.\r\n   *\r\n   * This wrapper function also shims properties which are not provided by some\r\n   * older browsers (namely, IE8).\r\n   *\r\n   * Additionally, some browsers do not support adding properties to a\r\n   * `ClientRect`/`DOMRect` object; so, we shallow-copy it with the standard\r\n   * properties (except `x` and `y` which are not widely supported). This helps\r\n   * avoid implementations where keys are non-enumerable.\r\n   *\r\n   * @param  {Element} el\r\n   *         Element whose `ClientRect` we want to calculate.\r\n   *\r\n   * @return {Object|undefined}\r\n   *         Always returns a plain object - or `undefined` if it cannot.\r\n   */\r\n  function getBoundingClientRect(el) {\r\n    if (el && el.getBoundingClientRect && el.parentNode) {\r\n      const rect = el.getBoundingClientRect();\r\n      const result = {};\r\n      ['bottom', 'height', 'left', 'right', 'top', 'width'].forEach(k => {\r\n        if (rect[k] !== undefined) {\r\n          result[k] = rect[k];\r\n        }\r\n      });\r\n      if (!result.height) {\r\n        result.height = parseFloat(computedStyle(el, 'height'));\r\n      }\r\n      if (!result.width) {\r\n        result.width = parseFloat(computedStyle(el, 'width'));\r\n      }\r\n      return result;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Represents the position of a DOM element on the page.\r\n   *\r\n   * @typedef  {Object} module:dom~Position\r\n   *\r\n   * @property {number} left\r\n   *           Pixels to the left.\r\n   *\r\n   * @property {number} top\r\n   *           Pixels from the top.\r\n   */\r\n\r\n  /**\r\n   * Get the position of an element in the DOM.\r\n   *\r\n   * Uses `getBoundingClientRect` technique from John Resig.\r\n   *\r\n   * @see http://ejohn.org/blog/getboundingclientrect-is-awesome/\r\n   *\r\n   * @param  {Element} el\r\n   *         Element from which to get offset.\r\n   *\r\n   * @return {module:dom~Position}\r\n   *         The position of the element that was passed in.\r\n   */\r\n  function findPosition(el) {\r\n    if (!el || el && !el.offsetParent) {\r\n      return {\r\n        left: 0,\r\n        top: 0,\r\n        width: 0,\r\n        height: 0\r\n      };\r\n    }\r\n    const width = el.offsetWidth;\r\n    const height = el.offsetHeight;\r\n    let left = 0;\r\n    let top = 0;\r\n    while (el.offsetParent && el !== document[FullscreenApi.fullscreenElement]) {\r\n      left += el.offsetLeft;\r\n      top += el.offsetTop;\r\n      el = el.offsetParent;\r\n    }\r\n    return {\r\n      left,\r\n      top,\r\n      width,\r\n      height\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Represents x and y coordinates for a DOM element or mouse pointer.\r\n   *\r\n   * @typedef  {Object} module:dom~Coordinates\r\n   *\r\n   * @property {number} x\r\n   *           x coordinate in pixels\r\n   *\r\n   * @property {number} y\r\n   *           y coordinate in pixels\r\n   */\r\n\r\n  /**\r\n   * Get the pointer position within an element.\r\n   *\r\n   * The base on the coordinates are the bottom left of the element.\r\n   *\r\n   * @param  {Element} el\r\n   *         Element on which to get the pointer position on.\r\n   *\r\n   * @param  {Event} event\r\n   *         Event object.\r\n   *\r\n   * @return {module:dom~Coordinates}\r\n   *         A coordinates object corresponding to the mouse position.\r\n   *\r\n   */\r\n  function getPointerPosition(el, event) {\r\n    const translated = {\r\n      x: 0,\r\n      y: 0\r\n    };\r\n    if (IS_IOS) {\r\n      let item = el;\r\n      while (item && item.nodeName.toLowerCase() !== 'html') {\r\n        const transform = computedStyle(item, 'transform');\r\n        if (/^matrix/.test(transform)) {\r\n          const values = transform.slice(7, -1).split(/,\\s/).map(Number);\r\n          translated.x += values[4];\r\n          translated.y += values[5];\r\n        } else if (/^matrix3d/.test(transform)) {\r\n          const values = transform.slice(9, -1).split(/,\\s/).map(Number);\r\n          translated.x += values[12];\r\n          translated.y += values[13];\r\n        }\r\n        if (item.assignedSlot && item.assignedSlot.parentElement && window.WebKitCSSMatrix) {\r\n          const transformValue = window.getComputedStyle(item.assignedSlot.parentElement).transform;\r\n          const matrix = new window.WebKitCSSMatrix(transformValue);\r\n          translated.x += matrix.m41;\r\n          translated.y += matrix.m42;\r\n        }\r\n        item = item.parentNode || item.host;\r\n      }\r\n    }\r\n    const position = {};\r\n    const boxTarget = findPosition(event.target);\r\n    const box = findPosition(el);\r\n    const boxW = box.width;\r\n    const boxH = box.height;\r\n    let offsetY = event.offsetY - (box.top - boxTarget.top);\r\n    let offsetX = event.offsetX - (box.left - boxTarget.left);\r\n    if (event.changedTouches) {\r\n      offsetX = event.changedTouches[0].pageX - box.left;\r\n      offsetY = event.changedTouches[0].pageY + box.top;\r\n      if (IS_IOS) {\r\n        offsetX -= translated.x;\r\n        offsetY -= translated.y;\r\n      }\r\n    }\r\n    position.y = 1 - Math.max(0, Math.min(1, offsetY / boxH));\r\n    position.x = Math.max(0, Math.min(1, offsetX / boxW));\r\n    return position;\r\n  }\r\n\r\n  /**\r\n   * Determines, via duck typing, whether or not a value is a text node.\r\n   *\r\n   * @param  {*} value\r\n   *         Check if this value is a text node.\r\n   *\r\n   * @return {boolean}\r\n   *         Will be `true` if the value is a text node, `false` otherwise.\r\n   */\r\n  function isTextNode$1(value) {\r\n    return isObject$1(value) && value.nodeType === 3;\r\n  }\r\n\r\n  /**\r\n   * Empties the contents of an element.\r\n   *\r\n   * @param  {Element} el\r\n   *         The element to empty children from\r\n   *\r\n   * @return {Element}\r\n   *         The element with no children\r\n   */\r\n  function emptyEl(el) {\r\n    while (el.firstChild) {\r\n      el.removeChild(el.firstChild);\r\n    }\r\n    return el;\r\n  }\r\n\r\n  /**\r\n   * This is a mixed value that describes content to be injected into the DOM\r\n   * via some method. It can be of the following types:\r\n   *\r\n   * Type       | Description\r\n   * -----------|-------------\r\n   * `string`   | The value will be normalized into a text node.\r\n   * `Element`  | The value will be accepted as-is.\r\n   * `Text`     | A TextNode. The value will be accepted as-is.\r\n   * `Array`    | A one-dimensional array of strings, elements, text nodes, or functions. These functions should return a string, element, or text node (any other return value, like an array, will be ignored).\r\n   * `Function` | A function, which is expected to return a string, element, text node, or array - any of the other possible values described above. This means that a content descriptor could be a function that returns an array of functions, but those second-level functions must return strings, elements, or text nodes.\r\n   *\r\n   * @typedef {string|Element|Text|Array|Function} ContentDescriptor\r\n   */\r\n\r\n  /**\r\n   * Normalizes content for eventual insertion into the DOM.\r\n   *\r\n   * This allows a wide range of content definition methods, but helps protect\r\n   * from falling into the trap of simply writing to `innerHTML`, which could\r\n   * be an XSS concern.\r\n   *\r\n   * The content for an element can be passed in multiple types and\r\n   * combinations, whose behavior is as follows:\r\n   *\r\n   * @param {ContentDescriptor} content\r\n   *        A content descriptor value.\r\n   *\r\n   * @return {Array}\r\n   *         All of the content that was passed in, normalized to an array of\r\n   *         elements or text nodes.\r\n   */\r\n  function normalizeContent(content) {\r\n    // First, invoke content if it is a function. If it produces an array,\r\n    // that needs to happen before normalization.\r\n    if (typeof content === 'function') {\r\n      content = content();\r\n    }\r\n\r\n    // Next up, normalize to an array, so one or many items can be normalized,\r\n    // filtered, and returned.\r\n    return (Array.isArray(content) ? content : [content]).map(value => {\r\n      // First, invoke value if it is a function to produce a new value,\r\n      // which will be subsequently normalized to a Node of some kind.\r\n      if (typeof value === 'function') {\r\n        value = value();\r\n      }\r\n      if (isEl(value) || isTextNode$1(value)) {\r\n        return value;\r\n      }\r\n      if (typeof value === 'string' && /\\S/.test(value)) {\r\n        return document.createTextNode(value);\r\n      }\r\n    }).filter(value => value);\r\n  }\r\n\r\n  /**\r\n   * Normalizes and appends content to an element.\r\n   *\r\n   * @param  {Element} el\r\n   *         Element to append normalized content to.\r\n   *\r\n   * @param {ContentDescriptor} content\r\n   *        A content descriptor value.\r\n   *\r\n   * @return {Element}\r\n   *         The element with appended normalized content.\r\n   */\r\n  function appendContent(el, content) {\r\n    normalizeContent(content).forEach(node => el.appendChild(node));\r\n    return el;\r\n  }\r\n\r\n  /**\r\n   * Normalizes and inserts content into an element; this is identical to\r\n   * `appendContent()`, except it empties the element first.\r\n   *\r\n   * @param {Element} el\r\n   *        Element to insert normalized content into.\r\n   *\r\n   * @param {ContentDescriptor} content\r\n   *        A content descriptor value.\r\n   *\r\n   * @return {Element}\r\n   *         The element with inserted normalized content.\r\n   */\r\n  function insertContent(el, content) {\r\n    return appendContent(emptyEl(el), content);\r\n  }\r\n\r\n  /**\r\n   * Check if an event was a single left click.\r\n   *\r\n   * @param  {MouseEvent} event\r\n   *         Event object.\r\n   *\r\n   * @return {boolean}\r\n   *         Will be `true` if a single left click, `false` otherwise.\r\n   */\r\n  function isSingleLeftClick(event) {\r\n    // Note: if you create something draggable, be sure to\r\n    // call it on both `mousedown` and `mousemove` event,\r\n    // otherwise `mousedown` should be enough for a button\r\n\r\n    if (event.button === undefined && event.buttons === undefined) {\r\n      // Why do we need `buttons` ?\r\n      // Because, middle mouse sometimes have this:\r\n      // e.button === 0 and e.buttons === 4\r\n      // Furthermore, we want to prevent combination click, something like\r\n      // HOLD middlemouse then left click, that would be\r\n      // e.button === 0, e.buttons === 5\r\n      // just `button` is not gonna work\r\n\r\n      // Alright, then what this block does ?\r\n      // this is for chrome `simulate mobile devices`\r\n      // I want to support this as well\r\n\r\n      return true;\r\n    }\r\n    if (event.button === 0 && event.buttons === undefined) {\r\n      // Touch screen, sometimes on some specific device, `buttons`\r\n      // doesn't have anything (safari on ios, blackberry...)\r\n\r\n      return true;\r\n    }\r\n\r\n    // `mouseup` event on a single left click has\r\n    // `button` and `buttons` equal to 0\r\n    if (event.type === 'mouseup' && event.button === 0 && event.buttons === 0) {\r\n      return true;\r\n    }\r\n\r\n    // MacOS Sonoma trackpad when \"tap to click enabled\"\r\n    if (event.type === 'mousedown' && event.button === 0 && event.buttons === 0) {\r\n      return true;\r\n    }\r\n    if (event.button !== 0 || event.buttons !== 1) {\r\n      // This is the reason we have those if else block above\r\n      // if any special case we can catch and let it slide\r\n      // we do it above, when get to here, this definitely\r\n      // is-not-left-click\r\n\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Finds a single DOM element matching `selector` within the optional\r\n   * `context` of another DOM element (defaulting to `document`).\r\n   *\r\n   * @param  {string} selector\r\n   *         A valid CSS selector, which will be passed to `querySelector`.\r\n   *\r\n   * @param  {Element|String} [context=document]\r\n   *         A DOM element within which to query. Can also be a selector\r\n   *         string in which case the first matching element will be used\r\n   *         as context. If missing (or no element matches selector), falls\r\n   *         back to `document`.\r\n   *\r\n   * @return {Element|null}\r\n   *         The element that was found or null.\r\n   */\r\n  const $ = createQuerier('querySelector');\r\n\r\n  /**\r\n   * Finds a all DOM elements matching `selector` within the optional\r\n   * `context` of another DOM element (defaulting to `document`).\r\n   *\r\n   * @param  {string} selector\r\n   *         A valid CSS selector, which will be passed to `querySelectorAll`.\r\n   *\r\n   * @param  {Element|String} [context=document]\r\n   *         A DOM element within which to query. Can also be a selector\r\n   *         string in which case the first matching element will be used\r\n   *         as context. If missing (or no element matches selector), falls\r\n   *         back to `document`.\r\n   *\r\n   * @return {NodeList}\r\n   *         A element list of elements that were found. Will be empty if none\r\n   *         were found.\r\n   *\r\n   */\r\n  const $$ = createQuerier('querySelectorAll');\r\n\r\n  /**\r\n   * A safe getComputedStyle.\r\n   *\r\n   * This is needed because in Firefox, if the player is loaded in an iframe with\r\n   * `display:none`, then `getComputedStyle` returns `null`, so, we do a\r\n   * null-check to make sure that the player doesn't break in these cases.\r\n   *\r\n   * @param    {Element} el\r\n   *           The element you want the computed style of\r\n   *\r\n   * @param    {string} prop\r\n   *           The property name you want\r\n   *\r\n   * @see      https://bugzilla.mozilla.org/show_bug.cgi?id=548397\r\n   */\r\n  function computedStyle(el, prop) {\r\n    if (!el || !prop) {\r\n      return '';\r\n    }\r\n    if (typeof window.getComputedStyle === 'function') {\r\n      let computedStyleValue;\r\n      try {\r\n        computedStyleValue = window.getComputedStyle(el);\r\n      } catch (e) {\r\n        return '';\r\n      }\r\n      return computedStyleValue ? computedStyleValue.getPropertyValue(prop) || computedStyleValue[prop] : '';\r\n    }\r\n    return '';\r\n  }\r\n\r\n  /**\r\n   * Copy document style sheets to another window.\r\n   *\r\n   * @param    {Window} win\r\n   *           The window element you want to copy the document style sheets to.\r\n   *\r\n   */\r\n  function copyStyleSheetsToWindow(win) {\r\n    [...document.styleSheets].forEach(styleSheet => {\r\n      try {\r\n        const cssRules = [...styleSheet.cssRules].map(rule => rule.cssText).join('');\r\n        const style = document.createElement('style');\r\n        style.textContent = cssRules;\r\n        win.document.head.appendChild(style);\r\n      } catch (e) {\r\n        const link = document.createElement('link');\r\n        link.rel = 'stylesheet';\r\n        link.type = styleSheet.type;\r\n        // For older Safari this has to be the string; on other browsers setting the MediaList works\r\n        link.media = styleSheet.media.mediaText;\r\n        link.href = styleSheet.href;\r\n        win.document.head.appendChild(link);\r\n      }\r\n    });\r\n  }\r\n\r\n  var Dom = /*#__PURE__*/Object.freeze({\r\n    __proto__: null,\r\n    isReal: isReal,\r\n    isEl: isEl,\r\n    isInFrame: isInFrame,\r\n    createEl: createEl,\r\n    textContent: textContent,\r\n    prependTo: prependTo,\r\n    hasClass: hasClass,\r\n    addClass: addClass,\r\n    removeClass: removeClass,\r\n    toggleClass: toggleClass,\r\n    setAttributes: setAttributes,\r\n    getAttributes: getAttributes,\r\n    getAttribute: getAttribute,\r\n    setAttribute: setAttribute,\r\n    removeAttribute: removeAttribute,\r\n    blockTextSelection: blockTextSelection,\r\n    unblockTextSelection: unblockTextSelection,\r\n    getBoundingClientRect: getBoundingClientRect,\r\n    findPosition: findPosition,\r\n    getPointerPosition: getPointerPosition,\r\n    isTextNode: isTextNode$1,\r\n    emptyEl: emptyEl,\r\n    normalizeContent: normalizeContent,\r\n    appendContent: appendContent,\r\n    insertContent: insertContent,\r\n    isSingleLeftClick: isSingleLeftClick,\r\n    $: $,\r\n    $$: $$,\r\n    computedStyle: computedStyle,\r\n    copyStyleSheetsToWindow: copyStyleSheetsToWindow\r\n  });\r\n\r\n  /**\r\n   * @file setup.js - Functions for setting up a player without\r\n   * user interaction based on the data-setup `attribute` of the video tag.\r\n   *\r\n   * @module setup\r\n   */\r\n  let _windowLoaded = false;\r\n  let videojs$1;\r\n\r\n  /**\r\n   * Set up any tags that have a data-setup `attribute` when the player is started.\r\n   */\r\n  const autoSetup = function () {\r\n    if (videojs$1.options.autoSetup === false) {\r\n      return;\r\n    }\r\n    const vids = Array.prototype.slice.call(document.getElementsByTagName('video'));\r\n    const audios = Array.prototype.slice.call(document.getElementsByTagName('audio'));\r\n    const divs = Array.prototype.slice.call(document.getElementsByTagName('video-js'));\r\n    const mediaEls = vids.concat(audios, divs);\r\n\r\n    // Check if any media elements exist\r\n    if (mediaEls && mediaEls.length > 0) {\r\n      for (let i = 0, e = mediaEls.length; i < e; i++) {\r\n        const mediaEl = mediaEls[i];\r\n\r\n        // Check if element exists, has getAttribute func.\r\n        if (mediaEl && mediaEl.getAttribute) {\r\n          // Make sure this player hasn't already been set up.\r\n          if (mediaEl.player === undefined) {\r\n            const options = mediaEl.getAttribute('data-setup');\r\n\r\n            // Check if data-setup attr exists.\r\n            // We only auto-setup if they've added the data-setup attr.\r\n            if (options !== null) {\r\n              // Create new video.js instance.\r\n              videojs$1(mediaEl);\r\n            }\r\n          }\r\n\r\n          // If getAttribute isn't defined, we need to wait for the DOM.\r\n        } else {\r\n          autoSetupTimeout(1);\r\n          break;\r\n        }\r\n      }\r\n\r\n      // No videos were found, so keep looping unless page is finished loading.\r\n    } else if (!_windowLoaded) {\r\n      autoSetupTimeout(1);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Wait until the page is loaded before running autoSetup. This will be called in\r\n   * autoSetup if `hasLoaded` returns false.\r\n   *\r\n   * @param {number} wait\r\n   *        How long to wait in ms\r\n   *\r\n   * @param {module:videojs} [vjs]\r\n   *        The videojs library function\r\n   */\r\n  function autoSetupTimeout(wait, vjs) {\r\n    // Protect against breakage in non-browser environments\r\n    if (!isReal()) {\r\n      return;\r\n    }\r\n    if (vjs) {\r\n      videojs$1 = vjs;\r\n    }\r\n    window.setTimeout(autoSetup, wait);\r\n  }\r\n\r\n  /**\r\n   * Used to set the internal tracking of window loaded state to true.\r\n   *\r\n   * @private\r\n   */\r\n  function setWindowLoaded() {\r\n    _windowLoaded = true;\r\n    window.removeEventListener('load', setWindowLoaded);\r\n  }\r\n  if (isReal()) {\r\n    if (document.readyState === 'complete') {\r\n      setWindowLoaded();\r\n    } else {\r\n      /**\r\n       * Listen for the load event on window, and set _windowLoaded to true.\r\n       *\r\n       * We use a standard event listener here to avoid incrementing the GUID\r\n       * before any players are created.\r\n       *\r\n       * @listens load\r\n       */\r\n      window.addEventListener('load', setWindowLoaded);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @file stylesheet.js\r\n   * @module stylesheet\r\n   */\r\n\r\n  /**\r\n   * Create a DOM style element given a className for it.\r\n   *\r\n   * @param {string} className\r\n   *        The className to add to the created style element.\r\n   *\r\n   * @return {Element}\r\n   *         The element that was created.\r\n   */\r\n  const createStyleElement = function (className) {\r\n    const style = document.createElement('style');\r\n    style.className = className;\r\n    return style;\r\n  };\r\n\r\n  /**\r\n   * Add text to a DOM element.\r\n   *\r\n   * @param {Element} el\r\n   *        The Element to add text content to.\r\n   *\r\n   * @param {string} content\r\n   *        The text to add to the element.\r\n   */\r\n  const setTextContent = function (el, content) {\r\n    if (el.styleSheet) {\r\n      el.styleSheet.cssText = content;\r\n    } else {\r\n      el.textContent = content;\r\n    }\r\n  };\r\n\r\n  /**\r\n   * @file dom-data.js\r\n   * @module dom-data\r\n   */\r\n\r\n  /**\r\n   * Element Data Store.\r\n   *\r\n   * Allows for binding data to an element without putting it directly on the\r\n   * element. Ex. Event listeners are stored here.\r\n   * (also from jsninja.com, slightly modified and updated for closure compiler)\r\n   *\r\n   * @type {Object}\r\n   * @private\r\n   */\r\n  var DomData = new WeakMap();\r\n\r\n  /**\r\n   * @file guid.js\r\n   * @module guid\r\n   */\r\n\r\n  // Default value for GUIDs. This allows us to reset the GUID counter in tests.\r\n  //\r\n  // The initial GUID is 3 because some users have come to rely on the first\r\n  // default player ID ending up as `vjs_video_3`.\r\n  //\r\n  // See: https://github.com/videojs/video.js/pull/6216\r\n  const _initialGuid = 3;\r\n\r\n  /**\r\n   * Unique ID for an element or function\r\n   *\r\n   * @type {Number}\r\n   */\r\n  let _guid = _initialGuid;\r\n\r\n  /**\r\n   * Get a unique auto-incrementing ID by number that has not been returned before.\r\n   *\r\n   * @return {number}\r\n   *         A new unique ID.\r\n   */\r\n  function newGUID() {\r\n    return _guid++;\r\n  }\r\n\r\n  /**\r\n   * @file events.js. An Event System (John Resig - Secrets of a JS Ninja http://jsninja.com/)\r\n   * (Original book version wasn't completely usable, so fixed some things and made Closure Compiler compatible)\r\n   * This should work very similarly to jQuery's events, however it's based off the book version which isn't as\r\n   * robust as jquery's, so there's probably some differences.\r\n   *\r\n   * @file events.js\r\n   * @module events\r\n   */\r\n\r\n  /**\r\n   * Clean up the listener cache and dispatchers\r\n   *\r\n   * @param {Element|Object} elem\r\n   *        Element to clean up\r\n   *\r\n   * @param {string} type\r\n   *        Type of event to clean up\r\n   */\r\n  function _cleanUpEvents(elem, type) {\r\n    if (!DomData.has(elem)) {\r\n      return;\r\n    }\r\n    const data = DomData.get(elem);\r\n\r\n    // Remove the events of a particular type if there are none left\r\n    if (data.handlers[type].length === 0) {\r\n      delete data.handlers[type];\r\n      // data.handlers[type] = null;\r\n      // Setting to null was causing an error with data.handlers\r\n\r\n      // Remove the meta-handler from the element\r\n      if (elem.removeEventListener) {\r\n        elem.removeEventListener(type, data.dispatcher, false);\r\n      } else if (elem.detachEvent) {\r\n        elem.detachEvent('on' + type, data.dispatcher);\r\n      }\r\n    }\r\n\r\n    // Remove the events object if there are no types left\r\n    if (Object.getOwnPropertyNames(data.handlers).length <= 0) {\r\n      delete data.handlers;\r\n      delete data.dispatcher;\r\n      delete data.disabled;\r\n    }\r\n\r\n    // Finally remove the element data if there is no data left\r\n    if (Object.getOwnPropertyNames(data).length === 0) {\r\n      DomData.delete(elem);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Loops through an array of event types and calls the requested method for each type.\r\n   *\r\n   * @param {Function} fn\r\n   *        The event method we want to use.\r\n   *\r\n   * @param {Element|Object} elem\r\n   *        Element or object to bind listeners to\r\n   *\r\n   * @param {string[]} types\r\n   *        Type of event to bind to.\r\n   *\r\n   * @param {Function} callback\r\n   *        Event listener.\r\n   */\r\n  function _handleMultipleEvents(fn, elem, types, callback) {\r\n    types.forEach(function (type) {\r\n      // Call the event method for each one of the types\r\n      fn(elem, type, callback);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fix a native event to have standard property values\r\n   *\r\n   * @param {Object} event\r\n   *        Event object to fix.\r\n   *\r\n   * @return {Object}\r\n   *         Fixed event object.\r\n   */\r\n  function fixEvent(event) {\r\n    if (event.fixed_) {\r\n      return event;\r\n    }\r\n    function returnTrue() {\r\n      return true;\r\n    }\r\n    function returnFalse() {\r\n      return false;\r\n    }\r\n\r\n    // Test if fixing up is needed\r\n    // Used to check if !event.stopPropagation instead of isPropagationStopped\r\n    // But native events return true for stopPropagation, but don't have\r\n    // other expected methods like isPropagationStopped. Seems to be a problem\r\n    // with the Javascript Ninja code. So we're just overriding all events now.\r\n    if (!event || !event.isPropagationStopped || !event.isImmediatePropagationStopped) {\r\n      const old = event || window.event;\r\n      event = {};\r\n      // Clone the old object so that we can modify the values event = {};\r\n      // IE8 Doesn't like when you mess with native event properties\r\n      // Firefox returns false for event.hasOwnProperty('type') and other props\r\n      //  which makes copying more difficult.\r\n\r\n      // TODO: Probably best to create an allowlist of event props\r\n      const deprecatedProps = ['layerX', 'layerY', 'keyLocation', 'path', 'webkitMovementX', 'webkitMovementY', 'mozPressure', 'mozInputSource'];\r\n      for (const key in old) {\r\n        // Safari 6.0.3 warns you if you try to copy deprecated layerX/Y\r\n        // Chrome warns you if you try to copy deprecated keyboardEvent.keyLocation\r\n        // and webkitMovementX/Y\r\n        // Lighthouse complains if Event.path is copied\r\n        if (!deprecatedProps.includes(key)) {\r\n          // Chrome 32+ warns if you try to copy deprecated returnValue, but\r\n          // we still want to if preventDefault isn't supported (IE8).\r\n          if (!(key === 'returnValue' && old.preventDefault)) {\r\n            event[key] = old[key];\r\n          }\r\n        }\r\n      }\r\n\r\n      // The event occurred on this element\r\n      if (!event.target) {\r\n        event.target = event.srcElement || document;\r\n      }\r\n\r\n      // Handle which other element the event is related to\r\n      if (!event.relatedTarget) {\r\n        event.relatedTarget = event.fromElement === event.target ? event.toElement : event.fromElement;\r\n      }\r\n\r\n      // Stop the default browser action\r\n      event.preventDefault = function () {\r\n        if (old.preventDefault) {\r\n          old.preventDefault();\r\n        }\r\n        event.returnValue = false;\r\n        old.returnValue = false;\r\n        event.defaultPrevented = true;\r\n      };\r\n      event.defaultPrevented = false;\r\n\r\n      // Stop the event from bubbling\r\n      event.stopPropagation = function () {\r\n        if (old.stopPropagation) {\r\n          old.stopPropagation();\r\n        }\r\n        event.cancelBubble = true;\r\n        old.cancelBubble = true;\r\n        event.isPropagationStopped = returnTrue;\r\n      };\r\n      event.isPropagationStopped = returnFalse;\r\n\r\n      // Stop the event from bubbling and executing other handlers\r\n      event.stopImmediatePropagation = function () {\r\n        if (old.stopImmediatePropagation) {\r\n          old.stopImmediatePropagation();\r\n        }\r\n        event.isImmediatePropagationStopped = returnTrue;\r\n        event.stopPropagation();\r\n      };\r\n      event.isImmediatePropagationStopped = returnFalse;\r\n\r\n      // Handle mouse position\r\n      if (event.clientX !== null && event.clientX !== undefined) {\r\n        const doc = document.documentElement;\r\n        const body = document.body;\r\n        event.pageX = event.clientX + (doc && doc.scrollLeft || body && body.scrollLeft || 0) - (doc && doc.clientLeft || body && body.clientLeft || 0);\r\n        event.pageY = event.clientY + (doc && doc.scrollTop || body && body.scrollTop || 0) - (doc && doc.clientTop || body && body.clientTop || 0);\r\n      }\r\n\r\n      // Handle key presses\r\n      event.which = event.charCode || event.keyCode;\r\n\r\n      // Fix button for mouse clicks:\r\n      // 0 == left; 1 == middle; 2 == right\r\n      if (event.button !== null && event.button !== undefined) {\r\n        // The following is disabled because it does not pass videojs-standard\r\n        // and... yikes.\r\n        /* eslint-disable */\r\n        event.button = event.button & 1 ? 0 : event.button & 4 ? 1 : event.button & 2 ? 2 : 0;\r\n        /* eslint-enable */\r\n      }\r\n    }\r\n    event.fixed_ = true;\r\n    // Returns fixed-up instance\r\n    return event;\r\n  }\r\n\r\n  /**\r\n   * Whether passive event listeners are supported\r\n   */\r\n  let _supportsPassive;\r\n  const supportsPassive = function () {\r\n    if (typeof _supportsPassive !== 'boolean') {\r\n      _supportsPassive = false;\r\n      try {\r\n        const opts = Object.defineProperty({}, 'passive', {\r\n          get() {\r\n            _supportsPassive = true;\r\n          }\r\n        });\r\n        window.addEventListener('test', null, opts);\r\n        window.removeEventListener('test', null, opts);\r\n      } catch (e) {\r\n        // disregard\r\n      }\r\n    }\r\n    return _supportsPassive;\r\n  };\r\n\r\n  /**\r\n   * Touch events Chrome expects to be passive\r\n   */\r\n  const passiveEvents = ['touchstart', 'touchmove'];\r\n\r\n  /**\r\n   * Add an event listener to element\r\n   * It stores the handler function in a separate cache object\r\n   * and adds a generic handler to the element's event,\r\n   * along with a unique id (guid) to the element.\r\n   *\r\n   * @param {Element|Object} elem\r\n   *        Element or object to bind listeners to\r\n   *\r\n   * @param {string|string[]} type\r\n   *        Type of event to bind to.\r\n   *\r\n   * @param {Function} fn\r\n   *        Event listener.\r\n   */\r\n  function on(elem, type, fn) {\r\n    if (Array.isArray(type)) {\r\n      return _handleMultipleEvents(on, elem, type, fn);\r\n    }\r\n    if (!DomData.has(elem)) {\r\n      DomData.set(elem, {});\r\n    }\r\n    const data = DomData.get(elem);\r\n\r\n    // We need a place to store all our handler data\r\n    if (!data.handlers) {\r\n      data.handlers = {};\r\n    }\r\n    if (!data.handlers[type]) {\r\n      data.handlers[type] = [];\r\n    }\r\n    if (!fn.guid) {\r\n      fn.guid = newGUID();\r\n    }\r\n    data.handlers[type].push(fn);\r\n    if (!data.dispatcher) {\r\n      data.disabled = false;\r\n      data.dispatcher = function (event, hash) {\r\n        if (data.disabled) {\r\n          return;\r\n        }\r\n        event = fixEvent(event);\r\n        const handlers = data.handlers[event.type];\r\n        if (handlers) {\r\n          // Copy handlers so if handlers are added/removed during the process it doesn't throw everything off.\r\n          const handlersCopy = handlers.slice(0);\r\n          for (let m = 0, n = handlersCopy.length; m < n; m++) {\r\n            if (event.isImmediatePropagationStopped()) {\r\n              break;\r\n            } else {\r\n              try {\r\n                handlersCopy[m].call(elem, event, hash);\r\n              } catch (e) {\r\n                log$1.error(e);\r\n              }\r\n            }\r\n          }\r\n        }\r\n      };\r\n    }\r\n    if (data.handlers[type].length === 1) {\r\n      if (elem.addEventListener) {\r\n        let options = false;\r\n        if (supportsPassive() && passiveEvents.indexOf(type) > -1) {\r\n          options = {\r\n            passive: true\r\n          };\r\n        }\r\n        elem.addEventListener(type, data.dispatcher, options);\r\n      } else if (elem.attachEvent) {\r\n        elem.attachEvent('on' + type, data.dispatcher);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Removes event listeners from an element\r\n   *\r\n   * @param {Element|Object} elem\r\n   *        Object to remove listeners from.\r\n   *\r\n   * @param {string|string[]} [type]\r\n   *        Type of listener to remove. Don't include to remove all events from element.\r\n   *\r\n   * @param {Function} [fn]\r\n   *        Specific listener to remove. Don't include to remove listeners for an event\r\n   *        type.\r\n   */\r\n  function off(elem, type, fn) {\r\n    // Don't want to add a cache object through getElData if not needed\r\n    if (!DomData.has(elem)) {\r\n      return;\r\n    }\r\n    const data = DomData.get(elem);\r\n\r\n    // If no events exist, nothing to unbind\r\n    if (!data.handlers) {\r\n      return;\r\n    }\r\n    if (Array.isArray(type)) {\r\n      return _handleMultipleEvents(off, elem, type, fn);\r\n    }\r\n\r\n    // Utility function\r\n    const removeType = function (el, t) {\r\n      data.handlers[t] = [];\r\n      _cleanUpEvents(el, t);\r\n    };\r\n\r\n    // Are we removing all bound events?\r\n    if (type === undefined) {\r\n      for (const t in data.handlers) {\r\n        if (Object.prototype.hasOwnProperty.call(data.handlers || {}, t)) {\r\n          removeType(elem, t);\r\n        }\r\n      }\r\n      return;\r\n    }\r\n    const handlers = data.handlers[type];\r\n\r\n    // If no handlers exist, nothing to unbind\r\n    if (!handlers) {\r\n      return;\r\n    }\r\n\r\n    // If no listener was provided, remove all listeners for type\r\n    if (!fn) {\r\n      removeType(elem, type);\r\n      return;\r\n    }\r\n\r\n    // We're only removing a single handler\r\n    if (fn.guid) {\r\n      for (let n = 0; n < handlers.length; n++) {\r\n        if (handlers[n].guid === fn.guid) {\r\n          handlers.splice(n--, 1);\r\n        }\r\n      }\r\n    }\r\n    _cleanUpEvents(elem, type);\r\n  }\r\n\r\n  /**\r\n   * Trigger an event for an element\r\n   *\r\n   * @param {Element|Object} elem\r\n   *        Element to trigger an event on\r\n   *\r\n   * @param {EventTarget~Event|string} event\r\n   *        A string (the type) or an event object with a type attribute\r\n   *\r\n   * @param {Object} [hash]\r\n   *        data hash to pass along with the event\r\n   *\r\n   * @return {boolean|undefined}\r\n   *         Returns the opposite of `defaultPrevented` if default was\r\n   *         prevented. Otherwise, returns `undefined`\r\n   */\r\n  function trigger(elem, event, hash) {\r\n    // Fetches element data and a reference to the parent (for bubbling).\r\n    // Don't want to add a data object to cache for every parent,\r\n    // so checking hasElData first.\r\n    const elemData = DomData.has(elem) ? DomData.get(elem) : {};\r\n    const parent = elem.parentNode || elem.ownerDocument;\r\n    // type = event.type || event,\r\n    // handler;\r\n\r\n    // If an event name was passed as a string, creates an event out of it\r\n    if (typeof event === 'string') {\r\n      event = {\r\n        type: event,\r\n        target: elem\r\n      };\r\n    } else if (!event.target) {\r\n      event.target = elem;\r\n    }\r\n\r\n    // Normalizes the event properties.\r\n    event = fixEvent(event);\r\n\r\n    // If the passed element has a dispatcher, executes the established handlers.\r\n    if (elemData.dispatcher) {\r\n      elemData.dispatcher.call(elem, event, hash);\r\n    }\r\n\r\n    // Unless explicitly stopped or the event does not bubble (e.g. media events)\r\n    // recursively calls this function to bubble the event up the DOM.\r\n    if (parent && !event.isPropagationStopped() && event.bubbles === true) {\r\n      trigger.call(null, parent, event, hash);\r\n\r\n      // If at the top of the DOM, triggers the default action unless disabled.\r\n    } else if (!parent && !event.defaultPrevented && event.target && event.target[event.type]) {\r\n      if (!DomData.has(event.target)) {\r\n        DomData.set(event.target, {});\r\n      }\r\n      const targetData = DomData.get(event.target);\r\n\r\n      // Checks if the target has a default action for this event.\r\n      if (event.target[event.type]) {\r\n        // Temporarily disables event dispatching on the target as we have already executed the handler.\r\n        targetData.disabled = true;\r\n        // Executes the default action.\r\n        if (typeof event.target[event.type] === 'function') {\r\n          event.target[event.type]();\r\n        }\r\n        // Re-enables event dispatching.\r\n        targetData.disabled = false;\r\n      }\r\n    }\r\n\r\n    // Inform the triggerer if the default was prevented by returning false\r\n    return !event.defaultPrevented;\r\n  }\r\n\r\n  /**\r\n   * Trigger a listener only once for an event.\r\n   *\r\n   * @param {Element|Object} elem\r\n   *        Element or object to bind to.\r\n   *\r\n   * @param {string|string[]} type\r\n   *        Name/type of event\r\n   *\r\n   * @param {Event~EventListener} fn\r\n   *        Event listener function\r\n   */\r\n  function one(elem, type, fn) {\r\n    if (Array.isArray(type)) {\r\n      return _handleMultipleEvents(one, elem, type, fn);\r\n    }\r\n    const func = function () {\r\n      off(elem, type, func);\r\n      fn.apply(this, arguments);\r\n    };\r\n\r\n    // copy the guid to the new function so it can removed using the original function's ID\r\n    func.guid = fn.guid = fn.guid || newGUID();\r\n    on(elem, type, func);\r\n  }\r\n\r\n  /**\r\n   * Trigger a listener only once and then turn if off for all\r\n   * configured events\r\n   *\r\n   * @param {Element|Object} elem\r\n   *        Element or object to bind to.\r\n   *\r\n   * @param {string|string[]} type\r\n   *        Name/type of event\r\n   *\r\n   * @param {Event~EventListener} fn\r\n   *        Event listener function\r\n   */\r\n  function any(elem, type, fn) {\r\n    const func = function () {\r\n      off(elem, type, func);\r\n      fn.apply(this, arguments);\r\n    };\r\n\r\n    // copy the guid to the new function so it can removed using the original function's ID\r\n    func.guid = fn.guid = fn.guid || newGUID();\r\n\r\n    // multiple ons, but one off for everything\r\n    on(elem, type, func);\r\n  }\r\n\r\n  var Events = /*#__PURE__*/Object.freeze({\r\n    __proto__: null,\r\n    fixEvent: fixEvent,\r\n    on: on,\r\n    off: off,\r\n    trigger: trigger,\r\n    one: one,\r\n    any: any\r\n  });\r\n\r\n  /**\r\n   * @file fn.js\r\n   * @module fn\r\n   */\r\n  const UPDATE_REFRESH_INTERVAL = 30;\r\n\r\n  /**\r\n   * A private, internal-only function for changing the context of a function.\r\n   *\r\n   * It also stores a unique id on the function so it can be easily removed from\r\n   * events.\r\n   *\r\n   * @private\r\n   * @function\r\n   * @param    {*} context\r\n   *           The object to bind as scope.\r\n   *\r\n   * @param    {Function} fn\r\n   *           The function to be bound to a scope.\r\n   *\r\n   * @param    {number} [uid]\r\n   *           An optional unique ID for the function to be set\r\n   *\r\n   * @return   {Function}\r\n   *           The new function that will be bound into the context given\r\n   */\r\n  const bind_ = function (context, fn, uid) {\r\n    // Make sure the function has a unique ID\r\n    if (!fn.guid) {\r\n      fn.guid = newGUID();\r\n    }\r\n\r\n    // Create the new function that changes the context\r\n    const bound = fn.bind(context);\r\n\r\n    // Allow for the ability to individualize this function\r\n    // Needed in the case where multiple objects might share the same prototype\r\n    // IF both items add an event listener with the same function, then you try to remove just one\r\n    // it will remove both because they both have the same guid.\r\n    // when using this, you need to use the bind method when you remove the listener as well.\r\n    // currently used in text tracks\r\n    bound.guid = uid ? uid + '_' + fn.guid : fn.guid;\r\n    return bound;\r\n  };\r\n\r\n  /**\r\n   * Wraps the given function, `fn`, with a new function that only invokes `fn`\r\n   * at most once per every `wait` milliseconds.\r\n   *\r\n   * @function\r\n   * @param    {Function} fn\r\n   *           The function to be throttled.\r\n   *\r\n   * @param    {number}   wait\r\n   *           The number of milliseconds by which to throttle.\r\n   *\r\n   * @return   {Function}\r\n   */\r\n  const throttle = function (fn, wait) {\r\n    let last = window.performance.now();\r\n    const throttled = function (...args) {\r\n      const now = window.performance.now();\r\n      if (now - last >= wait) {\r\n        fn(...args);\r\n        last = now;\r\n      }\r\n    };\r\n    return throttled;\r\n  };\r\n\r\n  /**\r\n   * Creates a debounced function that delays invoking `func` until after `wait`\r\n   * milliseconds have elapsed since the last time the debounced function was\r\n   * invoked.\r\n   *\r\n   * Inspired by lodash and underscore implementations.\r\n   *\r\n   * @function\r\n   * @param    {Function} func\r\n   *           The function to wrap with debounce behavior.\r\n   *\r\n   * @param    {number} wait\r\n   *           The number of milliseconds to wait after the last invocation.\r\n   *\r\n   * @param    {boolean} [immediate]\r\n   *           Whether or not to invoke the function immediately upon creation.\r\n   *\r\n   * @param    {Object} [context=window]\r\n   *           The \"context\" in which the debounced function should debounce. For\r\n   *           example, if this function should be tied to a Video.js player,\r\n   *           the player can be passed here. Alternatively, defaults to the\r\n   *           global `window` object.\r\n   *\r\n   * @return   {Function}\r\n   *           A debounced function.\r\n   */\r\n  const debounce$1 = function (func, wait, immediate, context = window) {\r\n    let timeout;\r\n    const cancel = () => {\r\n      context.clearTimeout(timeout);\r\n      timeout = null;\r\n    };\r\n\r\n    /* eslint-disable consistent-this */\r\n    const debounced = function () {\r\n      const self = this;\r\n      const args = arguments;\r\n      let later = function () {\r\n        timeout = null;\r\n        later = null;\r\n        if (!immediate) {\r\n          func.apply(self, args);\r\n        }\r\n      };\r\n      if (!timeout && immediate) {\r\n        func.apply(self, args);\r\n      }\r\n      context.clearTimeout(timeout);\r\n      timeout = context.setTimeout(later, wait);\r\n    };\r\n    /* eslint-enable consistent-this */\r\n\r\n    debounced.cancel = cancel;\r\n    return debounced;\r\n  };\r\n\r\n  var Fn = /*#__PURE__*/Object.freeze({\r\n    __proto__: null,\r\n    UPDATE_REFRESH_INTERVAL: UPDATE_REFRESH_INTERVAL,\r\n    bind_: bind_,\r\n    throttle: throttle,\r\n    debounce: debounce$1\r\n  });\r\n\r\n  /**\r\n   * @file src/js/event-target.js\r\n   */\r\n  let EVENT_MAP;\r\n\r\n  /**\r\n   * `EventTarget` is a class that can have the same API as the DOM `EventTarget`. It\r\n   * adds shorthand functions that wrap around lengthy functions. For example:\r\n   * the `on` function is a wrapper around `addEventListener`.\r\n   *\r\n   * @see [EventTarget Spec]{@link https://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-EventTarget}\r\n   * @class EventTarget\r\n   */\r\n  class EventTarget$2 {\r\n    /**\r\n     * Adds an `event listener` to an instance of an `EventTarget`. An `event listener` is a\r\n     * function that will get called when an event with a certain name gets triggered.\r\n     *\r\n     * @param {string|string[]} type\r\n     *        An event name or an array of event names.\r\n     *\r\n     * @param {Function} fn\r\n     *        The function to call with `EventTarget`s\r\n     */\r\n    on(type, fn) {\r\n      // Remove the addEventListener alias before calling Events.on\r\n      // so we don't get into an infinite type loop\r\n      const ael = this.addEventListener;\r\n      this.addEventListener = () => {};\r\n      on(this, type, fn);\r\n      this.addEventListener = ael;\r\n    }\r\n    /**\r\n     * Removes an `event listener` for a specific event from an instance of `EventTarget`.\r\n     * This makes it so that the `event listener` will no longer get called when the\r\n     * named event happens.\r\n     *\r\n     * @param {string|string[]} type\r\n     *        An event name or an array of event names.\r\n     *\r\n     * @param {Function} fn\r\n     *        The function to remove.\r\n     */\r\n    off(type, fn) {\r\n      off(this, type, fn);\r\n    }\r\n    /**\r\n     * This function will add an `event listener` that gets triggered only once. After the\r\n     * first trigger it will get removed. This is like adding an `event listener`\r\n     * with {@link EventTarget#on} that calls {@link EventTarget#off} on itself.\r\n     *\r\n     * @param {string|string[]} type\r\n     *        An event name or an array of event names.\r\n     *\r\n     * @param {Function} fn\r\n     *        The function to be called once for each event name.\r\n     */\r\n    one(type, fn) {\r\n      // Remove the addEventListener aliasing Events.on\r\n      // so we don't get into an infinite type loop\r\n      const ael = this.addEventListener;\r\n      this.addEventListener = () => {};\r\n      one(this, type, fn);\r\n      this.addEventListener = ael;\r\n    }\r\n    /**\r\n     * This function will add an `event listener` that gets triggered only once and is\r\n     * removed from all events. This is like adding an array of `event listener`s\r\n     * with {@link EventTarget#on} that calls {@link EventTarget#off} on all events the\r\n     * first time it is triggered.\r\n     *\r\n     * @param {string|string[]} type\r\n     *        An event name or an array of event names.\r\n     *\r\n     * @param {Function} fn\r\n     *        The function to be called once for each event name.\r\n     */\r\n    any(type, fn) {\r\n      // Remove the addEventListener aliasing Events.on\r\n      // so we don't get into an infinite type loop\r\n      const ael = this.addEventListener;\r\n      this.addEventListener = () => {};\r\n      any(this, type, fn);\r\n      this.addEventListener = ael;\r\n    }\r\n    /**\r\n     * This function causes an event to happen. This will then cause any `event listeners`\r\n     * that are waiting for that event, to get called. If there are no `event listeners`\r\n     * for an event then nothing will happen.\r\n     *\r\n     * If the name of the `Event` that is being triggered is in `EventTarget.allowedEvents_`.\r\n     * Trigger will also call the `on` + `uppercaseEventName` function.\r\n     *\r\n     * Example:\r\n     * 'click' is in `EventTarget.allowedEvents_`, so, trigger will attempt to call\r\n     * `onClick` if it exists.\r\n     *\r\n     * @param {string|EventTarget~Event|Object} event\r\n     *        The name of the event, an `Event`, or an object with a key of type set to\r\n     *        an event name.\r\n     */\r\n    trigger(event) {\r\n      const type = event.type || event;\r\n\r\n      // deprecation\r\n      // In a future version we should default target to `this`\r\n      // similar to how we default the target to `elem` in\r\n      // `Events.trigger`. Right now the default `target` will be\r\n      // `document` due to the `Event.fixEvent` call.\r\n      if (typeof event === 'string') {\r\n        event = {\r\n          type\r\n        };\r\n      }\r\n      event = fixEvent(event);\r\n      if (this.allowedEvents_[type] && this['on' + type]) {\r\n        this['on' + type](event);\r\n      }\r\n      trigger(this, event);\r\n    }\r\n    queueTrigger(event) {\r\n      // only set up EVENT_MAP if it'll be used\r\n      if (!EVENT_MAP) {\r\n        EVENT_MAP = new Map();\r\n      }\r\n      const type = event.type || event;\r\n      let map = EVENT_MAP.get(this);\r\n      if (!map) {\r\n        map = new Map();\r\n        EVENT_MAP.set(this, map);\r\n      }\r\n      const oldTimeout = map.get(type);\r\n      map.delete(type);\r\n      window.clearTimeout(oldTimeout);\r\n      const timeout = window.setTimeout(() => {\r\n        map.delete(type);\r\n        // if we cleared out all timeouts for the current target, delete its map\r\n        if (map.size === 0) {\r\n          map = null;\r\n          EVENT_MAP.delete(this);\r\n        }\r\n        this.trigger(event);\r\n      }, 0);\r\n      map.set(type, timeout);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * A Custom DOM event.\r\n   *\r\n   * @typedef {CustomEvent} Event\r\n   * @see [Properties]{@link https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent}\r\n   */\r\n\r\n  /**\r\n   * All event listeners should follow the following format.\r\n   *\r\n   * @callback EventListener\r\n   * @this {EventTarget}\r\n   *\r\n   * @param {Event} event\r\n   *        the event that triggered this function\r\n   *\r\n   * @param {Object} [hash]\r\n   *        hash of data sent during the event\r\n   */\r\n\r\n  /**\r\n   * An object containing event names as keys and booleans as values.\r\n   *\r\n   * > NOTE: If an event name is set to a true value here {@link EventTarget#trigger}\r\n   *         will have extra functionality. See that function for more information.\r\n   *\r\n   * @property EventTarget.prototype.allowedEvents_\r\n   * @protected\r\n   */\r\n  EventTarget$2.prototype.allowedEvents_ = {};\r\n\r\n  /**\r\n   * An alias of {@link EventTarget#on}. Allows `EventTarget` to mimic\r\n   * the standard DOM API.\r\n   *\r\n   * @function\r\n   * @see {@link EventTarget#on}\r\n   */\r\n  EventTarget$2.prototype.addEventListener = EventTarget$2.prototype.on;\r\n\r\n  /**\r\n   * An alias of {@link EventTarget#off}. Allows `EventTarget` to mimic\r\n   * the standard DOM API.\r\n   *\r\n   * @function\r\n   * @see {@link EventTarget#off}\r\n   */\r\n  EventTarget$2.prototype.removeEventListener = EventTarget$2.prototype.off;\r\n\r\n  /**\r\n   * An alias of {@link EventTarget#trigger}. Allows `EventTarget` to mimic\r\n   * the standard DOM API.\r\n   *\r\n   * @function\r\n   * @see {@link EventTarget#trigger}\r\n   */\r\n  EventTarget$2.prototype.dispatchEvent = EventTarget$2.prototype.trigger;\r\n\r\n  /**\r\n   * @file mixins/evented.js\r\n   * @module evented\r\n   */\r\n  const objName = obj => {\r\n    if (typeof obj.name === 'function') {\r\n      return obj.name();\r\n    }\r\n    if (typeof obj.name === 'string') {\r\n      return obj.name;\r\n    }\r\n    if (obj.name_) {\r\n      return obj.name_;\r\n    }\r\n    if (obj.constructor && obj.constructor.name) {\r\n      return obj.constructor.name;\r\n    }\r\n    return typeof obj;\r\n  };\r\n\r\n  /**\r\n   * Returns whether or not an object has had the evented mixin applied.\r\n   *\r\n   * @param  {Object} object\r\n   *         An object to test.\r\n   *\r\n   * @return {boolean}\r\n   *         Whether or not the object appears to be evented.\r\n   */\r\n  const isEvented = object => object instanceof EventTarget$2 || !!object.eventBusEl_ && ['on', 'one', 'off', 'trigger'].every(k => typeof object[k] === 'function');\r\n\r\n  /**\r\n   * Adds a callback to run after the evented mixin applied.\r\n   *\r\n   * @param  {Object} target\r\n   *         An object to Add\r\n   * @param  {Function} callback\r\n   *         The callback to run.\r\n   */\r\n  const addEventedCallback = (target, callback) => {\r\n    if (isEvented(target)) {\r\n      callback();\r\n    } else {\r\n      if (!target.eventedCallbacks) {\r\n        target.eventedCallbacks = [];\r\n      }\r\n      target.eventedCallbacks.push(callback);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Whether a value is a valid event type - non-empty string or array.\r\n   *\r\n   * @private\r\n   * @param  {string|Array} type\r\n   *         The type value to test.\r\n   *\r\n   * @return {boolean}\r\n   *         Whether or not the type is a valid event type.\r\n   */\r\n  const isValidEventType = type =>\r\n  // The regex here verifies that the `type` contains at least one non-\r\n  // whitespace character.\r\n  typeof type === 'string' && /\\S/.test(type) || Array.isArray(type) && !!type.length;\r\n\r\n  /**\r\n   * Validates a value to determine if it is a valid event target. Throws if not.\r\n   *\r\n   * @private\r\n   * @throws {Error}\r\n   *         If the target does not appear to be a valid event target.\r\n   *\r\n   * @param  {Object} target\r\n   *         The object to test.\r\n   *\r\n   * @param  {Object} obj\r\n   *         The evented object we are validating for\r\n   *\r\n   * @param  {string} fnName\r\n   *         The name of the evented mixin function that called this.\r\n   */\r\n  const validateTarget = (target, obj, fnName) => {\r\n    if (!target || !target.nodeName && !isEvented(target)) {\r\n      throw new Error(`Invalid target for ${objName(obj)}#${fnName}; must be a DOM node or evented object.`);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Validates a value to determine if it is a valid event target. Throws if not.\r\n   *\r\n   * @private\r\n   * @throws {Error}\r\n   *         If the type does not appear to be a valid event type.\r\n   *\r\n   * @param  {string|Array} type\r\n   *         The type to test.\r\n   *\r\n   * @param  {Object} obj\r\n  *         The evented object we are validating for\r\n   *\r\n   * @param  {string} fnName\r\n   *         The name of the evented mixin function that called this.\r\n   */\r\n  const validateEventType = (type, obj, fnName) => {\r\n    if (!isValidEventType(type)) {\r\n      throw new Error(`Invalid event type for ${objName(obj)}#${fnName}; must be a non-empty string or array.`);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Validates a value to determine if it is a valid listener. Throws if not.\r\n   *\r\n   * @private\r\n   * @throws {Error}\r\n   *         If the listener is not a function.\r\n   *\r\n   * @param  {Function} listener\r\n   *         The listener to test.\r\n   *\r\n   * @param  {Object} obj\r\n   *         The evented object we are validating for\r\n   *\r\n   * @param  {string} fnName\r\n   *         The name of the evented mixin function that called this.\r\n   */\r\n  const validateListener = (listener, obj, fnName) => {\r\n    if (typeof listener !== 'function') {\r\n      throw new Error(`Invalid listener for ${objName(obj)}#${fnName}; must be a function.`);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Takes an array of arguments given to `on()` or `one()`, validates them, and\r\n   * normalizes them into an object.\r\n   *\r\n   * @private\r\n   * @param  {Object} self\r\n   *         The evented object on which `on()` or `one()` was called. This\r\n   *         object will be bound as the `this` value for the listener.\r\n   *\r\n   * @param  {Array} args\r\n   *         An array of arguments passed to `on()` or `one()`.\r\n   *\r\n   * @param  {string} fnName\r\n   *         The name of the evented mixin function that called this.\r\n   *\r\n   * @return {Object}\r\n   *         An object containing useful values for `on()` or `one()` calls.\r\n   */\r\n  const normalizeListenArgs = (self, args, fnName) => {\r\n    // If the number of arguments is less than 3, the target is always the\r\n    // evented object itself.\r\n    const isTargetingSelf = args.length < 3 || args[0] === self || args[0] === self.eventBusEl_;\r\n    let target;\r\n    let type;\r\n    let listener;\r\n    if (isTargetingSelf) {\r\n      target = self.eventBusEl_;\r\n\r\n      // Deal with cases where we got 3 arguments, but we are still listening to\r\n      // the evented object itself.\r\n      if (args.length >= 3) {\r\n        args.shift();\r\n      }\r\n      [type, listener] = args;\r\n    } else {\r\n      // This was `[target, type, listener] = args;` but this block needs more than\r\n      // one statement to produce minified output compatible with Chrome 53.\r\n      // See https://github.com/videojs/video.js/pull/8810\r\n      target = args[0];\r\n      type = args[1];\r\n      listener = args[2];\r\n    }\r\n    validateTarget(target, self, fnName);\r\n    validateEventType(type, self, fnName);\r\n    validateListener(listener, self, fnName);\r\n    listener = bind_(self, listener);\r\n    return {\r\n      isTargetingSelf,\r\n      target,\r\n      type,\r\n      listener\r\n    };\r\n  };\r\n\r\n  /**\r\n   * Adds the listener to the event type(s) on the target, normalizing for\r\n   * the type of target.\r\n   *\r\n   * @private\r\n   * @param  {Element|Object} target\r\n   *         A DOM node or evented object.\r\n   *\r\n   * @param  {string} method\r\n   *         The event binding method to use (\"on\" or \"one\").\r\n   *\r\n   * @param  {string|Array} type\r\n   *         One or more event type(s).\r\n   *\r\n   * @param  {Function} listener\r\n   *         A listener function.\r\n   */\r\n  const listen = (target, method, type, listener) => {\r\n    validateTarget(target, target, method);\r\n    if (target.nodeName) {\r\n      Events[method](target, type, listener);\r\n    } else {\r\n      target[method](type, listener);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Contains methods that provide event capabilities to an object which is passed\r\n   * to {@link module:evented|evented}.\r\n   *\r\n   * @mixin EventedMixin\r\n   */\r\n  const EventedMixin = {\r\n    /**\r\n     * Add a listener to an event (or events) on this object or another evented\r\n     * object.\r\n     *\r\n     * @param  {string|Array|Element|Object} targetOrType\r\n     *         If this is a string or array, it represents the event type(s)\r\n     *         that will trigger the listener.\r\n     *\r\n     *         Another evented object can be passed here instead, which will\r\n     *         cause the listener to listen for events on _that_ object.\r\n     *\r\n     *         In either case, the listener's `this` value will be bound to\r\n     *         this object.\r\n     *\r\n     * @param  {string|Array|Function} typeOrListener\r\n     *         If the first argument was a string or array, this should be the\r\n     *         listener function. Otherwise, this is a string or array of event\r\n     *         type(s).\r\n     *\r\n     * @param  {Function} [listener]\r\n     *         If the first argument was another evented object, this will be\r\n     *         the listener function.\r\n     */\r\n    on(...args) {\r\n      const {\r\n        isTargetingSelf,\r\n        target,\r\n        type,\r\n        listener\r\n      } = normalizeListenArgs(this, args, 'on');\r\n      listen(target, 'on', type, listener);\r\n\r\n      // If this object is listening to another evented object.\r\n      if (!isTargetingSelf) {\r\n        // If this object is disposed, remove the listener.\r\n        const removeListenerOnDispose = () => this.off(target, type, listener);\r\n\r\n        // Use the same function ID as the listener so we can remove it later it\r\n        // using the ID of the original listener.\r\n        removeListenerOnDispose.guid = listener.guid;\r\n\r\n        // Add a listener to the target's dispose event as well. This ensures\r\n        // that if the target is disposed BEFORE this object, we remove the\r\n        // removal listener that was just added. Otherwise, we create a memory leak.\r\n        const removeRemoverOnTargetDispose = () => this.off('dispose', removeListenerOnDispose);\r\n\r\n        // Use the same function ID as the listener so we can remove it later\r\n        // it using the ID of the original listener.\r\n        removeRemoverOnTargetDispose.guid = listener.guid;\r\n        listen(this, 'on', 'dispose', removeListenerOnDispose);\r\n        listen(target, 'on', 'dispose', removeRemoverOnTargetDispose);\r\n      }\r\n    },\r\n    /**\r\n     * Add a listener to an event (or events) on this object or another evented\r\n     * object. The listener will be called once per event and then removed.\r\n     *\r\n     * @param  {string|Array|Element|Object} targetOrType\r\n     *         If this is a string or array, it represents the event type(s)\r\n     *         that will trigger the listener.\r\n     *\r\n     *         Another evented object can be passed here instead, which will\r\n     *         cause the listener to listen for events on _that_ object.\r\n     *\r\n     *         In either case, the listener's `this` value will be bound to\r\n     *         this object.\r\n     *\r\n     * @param  {string|Array|Function} typeOrListener\r\n     *         If the first argument was a string or array, this should be the\r\n     *         listener function. Otherwise, this is a string or array of event\r\n     *         type(s).\r\n     *\r\n     * @param  {Function} [listener]\r\n     *         If the first argument was another evented object, this will be\r\n     *         the listener function.\r\n     */\r\n    one(...args) {\r\n      const {\r\n        isTargetingSelf,\r\n        target,\r\n        type,\r\n        listener\r\n      } = normalizeListenArgs(this, args, 'one');\r\n\r\n      // Targeting this evented object.\r\n      if (isTargetingSelf) {\r\n        listen(target, 'one', type, listener);\r\n\r\n        // Targeting another evented object.\r\n      } else {\r\n        // TODO: This wrapper is incorrect! It should only\r\n        //       remove the wrapper for the event type that called it.\r\n        //       Instead all listeners are removed on the first trigger!\r\n        //       see https://github.com/videojs/video.js/issues/5962\r\n        const wrapper = (...largs) => {\r\n          this.off(target, type, wrapper);\r\n          listener.apply(null, largs);\r\n        };\r\n\r\n        // Use the same function ID as the listener so we can remove it later\r\n        // it using the ID of the original listener.\r\n        wrapper.guid = listener.guid;\r\n        listen(target, 'one', type, wrapper);\r\n      }\r\n    },\r\n    /**\r\n     * Add a listener to an event (or events) on this object or another evented\r\n     * object. The listener will only be called once for the first event that is triggered\r\n     * then removed.\r\n     *\r\n     * @param  {string|Array|Element|Object} targetOrType\r\n     *         If this is a string or array, it represents the event type(s)\r\n     *         that will trigger the listener.\r\n     *\r\n     *         Another evented object can be passed here instead, which will\r\n     *         cause the listener to listen for events on _that_ object.\r\n     *\r\n     *         In either case, the listener's `this` value will be bound to\r\n     *         this object.\r\n     *\r\n     * @param  {string|Array|Function} typeOrListener\r\n     *         If the first argument was a string or array, this should be the\r\n     *         listener function. Otherwise, this is a string or array of event\r\n     *         type(s).\r\n     *\r\n     * @param  {Function} [listener]\r\n     *         If the first argument was another evented object, this will be\r\n     *         the listener function.\r\n     */\r\n    any(...args) {\r\n      const {\r\n        isTargetingSelf,\r\n        target,\r\n        type,\r\n        listener\r\n      } = normalizeListenArgs(this, args, 'any');\r\n\r\n      // Targeting this evented object.\r\n      if (isTargetingSelf) {\r\n        listen(target, 'any', type, listener);\r\n\r\n        // Targeting another evented object.\r\n      } else {\r\n        const wrapper = (...largs) => {\r\n          this.off(target, type, wrapper);\r\n          listener.apply(null, largs);\r\n        };\r\n\r\n        // Use the same function ID as the listener so we can remove it later\r\n        // it using the ID of the original listener.\r\n        wrapper.guid = listener.guid;\r\n        listen(target, 'any', type, wrapper);\r\n      }\r\n    },\r\n    /**\r\n     * Removes listener(s) from event(s) on an evented object.\r\n     *\r\n     * @param  {string|Array|Element|Object} [targetOrType]\r\n     *         If this is a string or array, it represents the event type(s).\r\n     *\r\n     *         Another evented object can be passed here instead, in which case\r\n     *         ALL 3 arguments are _required_.\r\n     *\r\n     * @param  {string|Array|Function} [typeOrListener]\r\n     *         If the first argument was a string or array, this may be the\r\n     *         listener function. Otherwise, this is a string or array of event\r\n     *         type(s).\r\n     *\r\n     * @param  {Function} [listener]\r\n     *         If the first argument was another evented object, this will be\r\n     *         the listener function; otherwise, _all_ listeners bound to the\r\n     *         event type(s) will be removed.\r\n     */\r\n    off(targetOrType, typeOrListener, listener) {\r\n      // Targeting this evented object.\r\n      if (!targetOrType || isValidEventType(targetOrType)) {\r\n        off(this.eventBusEl_, targetOrType, typeOrListener);\r\n\r\n        // Targeting another evented object.\r\n      } else {\r\n        const target = targetOrType;\r\n        const type = typeOrListener;\r\n\r\n        // Fail fast and in a meaningful way!\r\n        validateTarget(target, this, 'off');\r\n        validateEventType(type, this, 'off');\r\n        validateListener(listener, this, 'off');\r\n\r\n        // Ensure there's at least a guid, even if the function hasn't been used\r\n        listener = bind_(this, listener);\r\n\r\n        // Remove the dispose listener on this evented object, which was given\r\n        // the same guid as the event listener in on().\r\n        this.off('dispose', listener);\r\n        if (target.nodeName) {\r\n          off(target, type, listener);\r\n          off(target, 'dispose', listener);\r\n        } else if (isEvented(target)) {\r\n          target.off(type, listener);\r\n          target.off('dispose', listener);\r\n        }\r\n      }\r\n    },\r\n    /**\r\n     * Fire an event on this evented object, causing its listeners to be called.\r\n     *\r\n     * @param   {string|Object} event\r\n     *          An event type or an object with a type property.\r\n     *\r\n     * @param   {Object} [hash]\r\n     *          An additional object to pass along to listeners.\r\n     *\r\n     * @return {boolean}\r\n     *          Whether or not the default behavior was prevented.\r\n     */\r\n    trigger(event, hash) {\r\n      validateTarget(this.eventBusEl_, this, 'trigger');\r\n      const type = event && typeof event !== 'string' ? event.type : event;\r\n      if (!isValidEventType(type)) {\r\n        throw new Error(`Invalid event type for ${objName(this)}#trigger; ` + 'must be a non-empty string or object with a type key that has a non-empty value.');\r\n      }\r\n      return trigger(this.eventBusEl_, event, hash);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Applies {@link module:evented~EventedMixin|EventedMixin} to a target object.\r\n   *\r\n   * @param  {Object} target\r\n   *         The object to which to add event methods.\r\n   *\r\n   * @param  {Object} [options={}]\r\n   *         Options for customizing the mixin behavior.\r\n   *\r\n   * @param  {string} [options.eventBusKey]\r\n   *         By default, adds a `eventBusEl_` DOM element to the target object,\r\n   *         which is used as an event bus. If the target object already has a\r\n   *         DOM element that should be used, pass its key here.\r\n   *\r\n   * @return {Object}\r\n   *         The target object.\r\n   */\r\n  function evented(target, options = {}) {\r\n    const {\r\n      eventBusKey\r\n    } = options;\r\n\r\n    // Set or create the eventBusEl_.\r\n    if (eventBusKey) {\r\n      if (!target[eventBusKey].nodeName) {\r\n        throw new Error(`The eventBusKey \"${eventBusKey}\" does not refer to an element.`);\r\n      }\r\n      target.eventBusEl_ = target[eventBusKey];\r\n    } else {\r\n      target.eventBusEl_ = createEl('span', {\r\n        className: 'vjs-event-bus'\r\n      });\r\n    }\r\n    Object.assign(target, EventedMixin);\r\n    if (target.eventedCallbacks) {\r\n      target.eventedCallbacks.forEach(callback => {\r\n        callback();\r\n      });\r\n    }\r\n\r\n    // When any evented object is disposed, it removes all its listeners.\r\n    target.on('dispose', () => {\r\n      target.off();\r\n      [target, target.el_, target.eventBusEl_].forEach(function (val) {\r\n        if (val && DomData.has(val)) {\r\n          DomData.delete(val);\r\n        }\r\n      });\r\n      window.setTimeout(() => {\r\n        target.eventBusEl_ = null;\r\n      }, 0);\r\n    });\r\n    return target;\r\n  }\r\n\r\n  /**\r\n   * @file mixins/stateful.js\r\n   * @module stateful\r\n   */\r\n\r\n  /**\r\n   * Contains methods that provide statefulness to an object which is passed\r\n   * to {@link module:stateful}.\r\n   *\r\n   * @mixin StatefulMixin\r\n   */\r\n  const StatefulMixin = {\r\n    /**\r\n     * A hash containing arbitrary keys and values representing the state of\r\n     * the object.\r\n     *\r\n     * @type {Object}\r\n     */\r\n    state: {},\r\n    /**\r\n     * Set the state of an object by mutating its\r\n     * {@link module:stateful~StatefulMixin.state|state} object in place.\r\n     *\r\n     * @fires   module:stateful~StatefulMixin#statechanged\r\n     * @param   {Object|Function} stateUpdates\r\n     *          A new set of properties to shallow-merge into the plugin state.\r\n     *          Can be a plain object or a function returning a plain object.\r\n     *\r\n     * @return {Object|undefined}\r\n     *          An object containing changes that occurred. If no changes\r\n     *          occurred, returns `undefined`.\r\n     */\r\n    setState(stateUpdates) {\r\n      // Support providing the `stateUpdates` state as a function.\r\n      if (typeof stateUpdates === 'function') {\r\n        stateUpdates = stateUpdates();\r\n      }\r\n      let changes;\r\n      each(stateUpdates, (value, key) => {\r\n        // Record the change if the value is different from what's in the\r\n        // current state.\r\n        if (this.state[key] !== value) {\r\n          changes = changes || {};\r\n          changes[key] = {\r\n            from: this.state[key],\r\n            to: value\r\n          };\r\n        }\r\n        this.state[key] = value;\r\n      });\r\n\r\n      // Only trigger \"statechange\" if there were changes AND we have a trigger\r\n      // function. This allows us to not require that the target object be an\r\n      // evented object.\r\n      if (changes && isEvented(this)) {\r\n        /**\r\n         * An event triggered on an object that is both\r\n         * {@link module:stateful|stateful} and {@link module:evented|evented}\r\n         * indicating that its state has changed.\r\n         *\r\n         * @event    module:stateful~StatefulMixin#statechanged\r\n         * @type     {Object}\r\n         * @property {Object} changes\r\n         *           A hash containing the properties that were changed and\r\n         *           the values they were changed `from` and `to`.\r\n         */\r\n        this.trigger({\r\n          changes,\r\n          type: 'statechanged'\r\n        });\r\n      }\r\n      return changes;\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Applies {@link module:stateful~StatefulMixin|StatefulMixin} to a target\r\n   * object.\r\n   *\r\n   * If the target object is {@link module:evented|evented} and has a\r\n   * `handleStateChanged` method, that method will be automatically bound to the\r\n   * `statechanged` event on itself.\r\n   *\r\n   * @param   {Object} target\r\n   *          The object to be made stateful.\r\n   *\r\n   * @param   {Object} [defaultState]\r\n   *          A default set of properties to populate the newly-stateful object's\r\n   *          `state` property.\r\n   *\r\n   * @return {Object}\r\n   *          Returns the `target`.\r\n   */\r\n  function stateful(target, defaultState) {\r\n    Object.assign(target, StatefulMixin);\r\n\r\n    // This happens after the mixing-in because we need to replace the `state`\r\n    // added in that step.\r\n    target.state = Object.assign({}, target.state, defaultState);\r\n\r\n    // Auto-bind the `handleStateChanged` method of the target object if it exists.\r\n    if (typeof target.handleStateChanged === 'function' && isEvented(target)) {\r\n      target.on('statechanged', target.handleStateChanged);\r\n    }\r\n    return target;\r\n  }\r\n\r\n  /**\r\n   * @file str.js\r\n   * @module to-lower-case\r\n   */\r\n\r\n  /**\r\n   * Lowercase the first letter of a string.\r\n   *\r\n   * @param {string} string\r\n   *        String to be lowercased\r\n   *\r\n   * @return {string}\r\n   *         The string with a lowercased first letter\r\n   */\r\n  const toLowerCase = function (string) {\r\n    if (typeof string !== 'string') {\r\n      return string;\r\n    }\r\n    return string.replace(/./, w => w.toLowerCase());\r\n  };\r\n\r\n  /**\r\n   * Uppercase the first letter of a string.\r\n   *\r\n   * @param {string} string\r\n   *        String to be uppercased\r\n   *\r\n   * @return {string}\r\n   *         The string with an uppercased first letter\r\n   */\r\n  const toTitleCase$1 = function (string) {\r\n    if (typeof string !== 'string') {\r\n      return string;\r\n    }\r\n    return string.replace(/./, w => w.toUpperCase());\r\n  };\r\n\r\n  /**\r\n   * Compares the TitleCase versions of the two strings for equality.\r\n   *\r\n   * @param {string} str1\r\n   *        The first string to compare\r\n   *\r\n   * @param {string} str2\r\n   *        The second string to compare\r\n   *\r\n   * @return {boolean}\r\n   *         Whether the TitleCase versions of the strings are equal\r\n   */\r\n  const titleCaseEquals = function (str1, str2) {\r\n    return toTitleCase$1(str1) === toTitleCase$1(str2);\r\n  };\r\n\r\n  var Str = /*#__PURE__*/Object.freeze({\r\n    __proto__: null,\r\n    toLowerCase: toLowerCase,\r\n    toTitleCase: toTitleCase$1,\r\n    titleCaseEquals: titleCaseEquals\r\n  });\r\n\r\n  /**\r\n   * Player Component - Base class for all UI objects\r\n   *\r\n   * @file component.js\r\n   */\r\n\r\n  /** @import Player from './player' */\r\n\r\n  /**\r\n   * A callback to be called if and when the component is ready.\r\n   * `this` will be the Component instance.\r\n   *\r\n   * @callback ReadyCallback\r\n   * @returns  {void}\r\n   */\r\n\r\n  /**\r\n   * Base class for all UI Components.\r\n   * Components are UI objects which represent both a javascript object and an element\r\n   * in the DOM. They can be children of other components, and can have\r\n   * children themselves.\r\n   *\r\n   * Components can also use methods from {@link EventTarget}\r\n   */\r\n  class Component$1 {\r\n    /**\r\n     * Creates an instance of this class.\r\n     *\r\n     * @param {Player} player\r\n     *        The `Player` that this class should be attached to.\r\n     *\r\n     * @param {Object} [options]\r\n     *        The key/value store of component options.\r\n     *\r\n     * @param {Object[]} [options.children]\r\n     *        An array of children objects to initialize this component with. Children objects have\r\n     *        a name property that will be used if more than one component of the same type needs to be\r\n     *        added.\r\n     *\r\n     * @param  {string} [options.className]\r\n     *         A class or space separated list of classes to add the component\r\n     *\r\n     * @param {ReadyCallback} [ready]\r\n     *        Function that gets called when the `Component` is ready.\r\n     */\r\n    constructor(player, options, ready) {\r\n      // The component might be the player itself and we can't pass `this` to super\r\n      if (!player && this.play) {\r\n        this.player_ = player = this; // eslint-disable-line\r\n      } else {\r\n        this.player_ = player;\r\n      }\r\n      this.isDisposed_ = false;\r\n\r\n      // Hold the reference to the parent component via `addChild` method\r\n      this.parentComponent_ = null;\r\n\r\n      // Make a copy of prototype.options_ to protect against overriding defaults\r\n      this.options_ = merge$2({}, this.options_);\r\n\r\n      // Updated options with supplied options\r\n      options = this.options_ = merge$2(this.options_, options);\r\n\r\n      // Get ID from options or options element if one is supplied\r\n      this.id_ = options.id || options.el && options.el.id;\r\n\r\n      // If there was no ID from the options, generate one\r\n      if (!this.id_) {\r\n        // Don't require the player ID function in the case of mock players\r\n        const id = player && player.id && player.id() || 'no_player';\r\n        this.id_ = `${id}_component_${newGUID()}`;\r\n      }\r\n      this.name_ = options.name || null;\r\n\r\n      // Create element if one wasn't provided in options\r\n      if (options.el) {\r\n        this.el_ = options.el;\r\n      } else if (options.createEl !== false) {\r\n        this.el_ = this.createEl();\r\n      }\r\n      if (options.className && this.el_) {\r\n        options.className.split(' ').forEach(c => this.addClass(c));\r\n      }\r\n\r\n      // Remove the placeholder event methods. If the component is evented, the\r\n      // real methods are added next\r\n      ['on', 'off', 'one', 'any', 'trigger'].forEach(fn => {\r\n        this[fn] = undefined;\r\n      });\r\n\r\n      // if evented is anything except false, we want to mixin in evented\r\n      if (options.evented !== false) {\r\n        // Make this an evented object and use `el_`, if available, as its event bus\r\n        evented(this, {\r\n          eventBusKey: this.el_ ? 'el_' : null\r\n        });\r\n        this.handleLanguagechange = this.handleLanguagechange.bind(this);\r\n        this.on(this.player_, 'languagechange', this.handleLanguagechange);\r\n      }\r\n      stateful(this, this.constructor.defaultState);\r\n      this.children_ = [];\r\n      this.childIndex_ = {};\r\n      this.childNameIndex_ = {};\r\n      this.setTimeoutIds_ = new Set();\r\n      this.setIntervalIds_ = new Set();\r\n      this.rafIds_ = new Set();\r\n      this.namedRafs_ = new Map();\r\n      this.clearingTimersOnDispose_ = false;\r\n\r\n      // Add any child components in options\r\n      if (options.initChildren !== false) {\r\n        this.initChildren();\r\n      }\r\n\r\n      // Don't want to trigger ready here or it will go before init is actually\r\n      // finished for all children that run this constructor\r\n      this.ready(ready);\r\n      if (options.reportTouchActivity !== false) {\r\n        this.enableTouchActivity();\r\n      }\r\n    }\r\n\r\n    // `on`, `off`, `one`, `any` and `trigger` are here so tsc includes them in definitions.\r\n    // They are replaced or removed in the constructor\r\n\r\n    /**\r\n     * Adds an `event listener` to an instance of an `EventTarget`. An `event listener` is a\r\n     * function that will get called when an event with a certain name gets triggered.\r\n     *\r\n     * @param {string|string[]} type\r\n     *        An event name or an array of event names.\r\n     *\r\n     * @param {Function} fn\r\n     *        The function to call with `EventTarget`s\r\n     */\r\n\r\n    /**\r\n     * Removes an `event listener` for a specific event from an instance of `EventTarget`.\r\n     * This makes it so that the `event listener` will no longer get called when the\r\n     * named event happens.\r\n     *\r\n     * @param {string|string[]} type\r\n     *        An event name or an array of event names.\r\n     *\r\n     * @param {Function} [fn]\r\n     *        The function to remove. If not specified, all listeners managed by Video.js will be removed.\r\n     */\r\n\r\n    /**\r\n     * This function will add an `event listener` that gets triggered only once. After the\r\n     * first trigger it will get removed. This is like adding an `event listener`\r\n     * with {@link EventTarget#on} that calls {@link EventTarget#off} on itself.\r\n     *\r\n     * @param {string|string[]} type\r\n     *        An event name or an array of event names.\r\n     *\r\n     * @param {Function} fn\r\n     *        The function to be called once for each event name.\r\n     */\r\n\r\n    /**\r\n     * This function will add an `event listener` that gets triggered only once and is\r\n     * removed from all events. This is like adding an array of `event listener`s\r\n     * with {@link EventTarget#on} that calls {@link EventTarget#off} on all events the\r\n     * first time it is triggered.\r\n     *\r\n     * @param {string|string[]} type\r\n     *        An event name or an array of event names.\r\n     *\r\n     * @param {Function} fn\r\n     *        The function to be called once for each event name.\r\n     */\r\n\r\n    /**\r\n     * This function causes an event to happen. This will then cause any `event listeners`\r\n     * that are waiting for that event, to get called. If there are no `event listeners`\r\n     * for an event then nothing will happen.\r\n     *\r\n     * If the name of the `Event` that is being triggered is in `EventTarget.allowedEvents_`.\r\n     * Trigger will also call the `on` + `uppercaseEventName` function.\r\n     *\r\n     * Example:\r\n     * 'click' is in `EventTarget.allowedEvents_`, so, trigger will attempt to call\r\n     * `onClick` if it exists.\r\n     *\r\n     * @param {string|Event|Object} event\r\n     *        The name of the event, an `Event`, or an object with a key of type set to\r\n     *        an event name.\r\n     *\r\n     * @param {Object} [hash]\r\n     *        Optionally extra argument to pass through to an event listener\r\n     */\r\n\r\n    /**\r\n     * Dispose of the `Component` and all child components.\r\n     *\r\n     * @fires Component#dispose\r\n     *\r\n     * @param {Object} options\r\n     * @param {Element} options.originalEl element with which to replace player element\r\n     */\r\n    dispose(options = {}) {\r\n      // Bail out if the component has already been disposed.\r\n      if (this.isDisposed_) {\r\n        return;\r\n      }\r\n      if (this.readyQueue_) {\r\n        this.readyQueue_.length = 0;\r\n      }\r\n\r\n      /**\r\n       * Triggered when a `Component` is disposed.\r\n       *\r\n       * @event Component#dispose\r\n       * @type {Event}\r\n       *\r\n       * @property {boolean} [bubbles=false]\r\n       *           set to false so that the dispose event does not\r\n       *           bubble up\r\n       */\r\n      this.trigger({\r\n        type: 'dispose',\r\n        bubbles: false\r\n      });\r\n      this.isDisposed_ = true;\r\n\r\n      // Dispose all children.\r\n      if (this.children_) {\r\n        for (let i = this.children_.length - 1; i >= 0; i--) {\r\n          if (this.children_[i].dispose) {\r\n            this.children_[i].dispose();\r\n          }\r\n        }\r\n      }\r\n\r\n      // Delete child references\r\n      this.children_ = null;\r\n      this.childIndex_ = null;\r\n      this.childNameIndex_ = null;\r\n      this.parentComponent_ = null;\r\n      if (this.el_) {\r\n        // Remove element from DOM\r\n        if (this.el_.parentNode) {\r\n          if (options.restoreEl) {\r\n            this.el_.parentNode.replaceChild(options.restoreEl, this.el_);\r\n          } else {\r\n            this.el_.parentNode.removeChild(this.el_);\r\n          }\r\n        }\r\n        this.el_ = null;\r\n      }\r\n\r\n      // remove reference to the player after disposing of the element\r\n      this.player_ = null;\r\n    }\r\n\r\n    /**\r\n     * Determine whether or not this component has been disposed.\r\n     *\r\n     * @return {boolean}\r\n     *         If the component has been disposed, will be `true`. Otherwise, `false`.\r\n     */\r\n    isDisposed() {\r\n      return Boolean(this.isDisposed_);\r\n    }\r\n\r\n    /**\r\n     * Return the {@link Player} that the `Component` has attached to.\r\n     *\r\n     * @return {Player}\r\n     *         The player that this `Component` has attached to.\r\n     */\r\n    player() {\r\n      return this.player_;\r\n    }\r\n\r\n    /**\r\n     * Deep merge of options objects with new options.\r\n     * > Note: When both `obj` and `options` contain properties whose values are objects.\r\n     *         The two properties get merged using {@link module:obj.merge}\r\n     *\r\n     * @param {Object} obj\r\n     *        The object that contains new options.\r\n     *\r\n     * @return {Object}\r\n     *         A new object of `this.options_` and `obj` merged together.\r\n     */\r\n    options(obj) {\r\n      if (!obj) {\r\n        return this.options_;\r\n      }\r\n      this.options_ = merge$2(this.options_, obj);\r\n      return this.options_;\r\n    }\r\n\r\n    /**\r\n     * Get the `Component`s DOM element\r\n     *\r\n     * @return {Element}\r\n     *         The DOM element for this `Component`.\r\n     */\r\n    el() {\r\n      return this.el_;\r\n    }\r\n\r\n    /**\r\n     * Create the `Component`s DOM element.\r\n     *\r\n     * @param {string} [tagName]\r\n     *        Element's DOM node type. e.g. 'div'\r\n     *\r\n     * @param {Object} [properties]\r\n     *        An object of properties that should be set.\r\n     *\r\n     * @param {Object} [attributes]\r\n     *        An object of attributes that should be set.\r\n     *\r\n     * @return {Element}\r\n     *         The element that gets created.\r\n     */\r\n    createEl(tagName, properties, attributes) {\r\n      return createEl(tagName, properties, attributes);\r\n    }\r\n\r\n    /**\r\n     * Localize a string given the string in english.\r\n     *\r\n     * If tokens are provided, it'll try and run a simple token replacement on the provided string.\r\n     * The tokens it looks for look like `{1}` with the index being 1-indexed into the tokens array.\r\n     *\r\n     * If a `defaultValue` is provided, it'll use that over `string`,\r\n     * if a value isn't found in provided language files.\r\n     * This is useful if you want to have a descriptive key for token replacement\r\n     * but have a succinct localized string and not require `en.json` to be included.\r\n     *\r\n     * Currently, it is used for the progress bar timing.\r\n     * ```js\r\n     * {\r\n     *   \"progress bar timing: currentTime={1} duration={2}\": \"{1} of {2}\"\r\n     * }\r\n     * ```\r\n     * It is then used like so:\r\n     * ```js\r\n     * this.localize('progress bar timing: currentTime={1} duration{2}',\r\n     *               [this.player_.currentTime(), this.player_.duration()],\r\n     *               '{1} of {2}');\r\n     * ```\r\n     *\r\n     * Which outputs something like: `01:23 of 24:56`.\r\n     *\r\n     *\r\n     * @param {string} string\r\n     *        The string to localize and the key to lookup in the language files.\r\n     * @param {string[]} [tokens]\r\n     *        If the current item has token replacements, provide the tokens here.\r\n     * @param {string} [defaultValue]\r\n     *        Defaults to `string`. Can be a default value to use for token replacement\r\n     *        if the lookup key is needed to be separate.\r\n     *\r\n     * @return {string}\r\n     *         The localized string or if no localization exists the english string.\r\n     */\r\n    localize(string, tokens, defaultValue = string) {\r\n      const code = this.player_.language && this.player_.language();\r\n      const languages = this.player_.languages && this.player_.languages();\r\n      const language = languages && languages[code];\r\n      const primaryCode = code && code.split('-')[0];\r\n      const primaryLang = languages && languages[primaryCode];\r\n      let localizedString = defaultValue;\r\n      if (language && language[string]) {\r\n        localizedString = language[string];\r\n      } else if (primaryLang && primaryLang[string]) {\r\n        localizedString = primaryLang[string];\r\n      }\r\n      if (tokens) {\r\n        localizedString = localizedString.replace(/\\{(\\d+)\\}/g, function (match, index) {\r\n          const value = tokens[index - 1];\r\n          let ret = value;\r\n          if (typeof value === 'undefined') {\r\n            ret = match;\r\n          }\r\n          return ret;\r\n        });\r\n      }\r\n      return localizedString;\r\n    }\r\n\r\n    /**\r\n     * Handles language change for the player in components. Should be overridden by sub-components.\r\n     *\r\n     * @abstract\r\n     */\r\n    handleLanguagechange() {}\r\n\r\n    /**\r\n     * Return the `Component`s DOM element. This is where children get inserted.\r\n     * This will usually be the the same as the element returned in {@link Component#el}.\r\n     *\r\n     * @return {Element}\r\n     *         The content element for this `Component`.\r\n     */\r\n    contentEl() {\r\n      return this.contentEl_ || this.el_;\r\n    }\r\n\r\n    /**\r\n     * Get this `Component`s ID\r\n     *\r\n     * @return {string}\r\n     *         The id of this `Component`\r\n     */\r\n    id() {\r\n      return this.id_;\r\n    }\r\n\r\n    /**\r\n     * Get the `Component`s name. The name gets used to reference the `Component`\r\n     * and is set during registration.\r\n     *\r\n     * @return {string}\r\n     *         The name of this `Component`.\r\n     */\r\n    name() {\r\n      return this.name_;\r\n    }\r\n\r\n    /**\r\n     * Get an array of all child components\r\n     *\r\n     * @return {Array}\r\n     *         The children\r\n     */\r\n    children() {\r\n      return this.children_;\r\n    }\r\n\r\n    /**\r\n     * Returns the child `Component` with the given `id`.\r\n     *\r\n     * @param {string} id\r\n     *        The id of the child `Component` to get.\r\n     *\r\n     * @return {Component|undefined}\r\n     *         The child `Component` with the given `id` or undefined.\r\n     */\r\n    getChildById(id) {\r\n      return this.childIndex_[id];\r\n    }\r\n\r\n    /**\r\n     * Returns the child `Component` with the given `name`.\r\n     *\r\n     * @param {string} name\r\n     *        The name of the child `Component` to get.\r\n     *\r\n     * @return {Component|undefined}\r\n     *         The child `Component` with the given `name` or undefined.\r\n     */\r\n    getChild(name) {\r\n      if (!name) {\r\n        return;\r\n      }\r\n      return this.childNameIndex_[name];\r\n    }\r\n\r\n    /**\r\n     * Returns the descendant `Component` following the givent\r\n     * descendant `names`. For instance ['foo', 'bar', 'baz'] would\r\n     * try to get 'foo' on the current component, 'bar' on the 'foo'\r\n     * component and 'baz' on the 'bar' component and return undefined\r\n     * if any of those don't exist.\r\n     *\r\n     * @param {...string[]|...string} names\r\n     *        The name of the child `Component` to get.\r\n     *\r\n     * @return {Component|undefined}\r\n     *         The descendant `Component` following the given descendant\r\n     *         `names` or undefined.\r\n     */\r\n    getDescendant(...names) {\r\n      // flatten array argument into the main array\r\n      names = names.reduce((acc, n) => acc.concat(n), []);\r\n      let currentChild = this;\r\n      for (let i = 0; i < names.length; i++) {\r\n        currentChild = currentChild.getChild(names[i]);\r\n        if (!currentChild || !currentChild.getChild) {\r\n          return;\r\n        }\r\n      }\r\n      return currentChild;\r\n    }\r\n\r\n    /**\r\n     * Adds an SVG icon element to another element or component.\r\n     *\r\n     * @param {string} iconName\r\n     *        The name of icon. A list of all the icon names can be found at 'sandbox/svg-icons.html'\r\n     *\r\n     * @param {Element} [el=this.el()]\r\n     *        Element to set the title on. Defaults to the current Component's element.\r\n     *\r\n     * @return {Element}\r\n     *        The newly created icon element.\r\n     */\r\n    setIcon(iconName, el = this.el()) {\r\n      // TODO: In v9 of video.js, we will want to remove font icons entirely.\r\n      // This means this check, as well as the others throughout the code, and\r\n      // the unecessary CSS for font icons, will need to be removed.\r\n      // See https://github.com/videojs/video.js/pull/8260 as to which components\r\n      // need updating.\r\n      if (!this.player_.options_.experimentalSvgIcons) {\r\n        return;\r\n      }\r\n      const xmlnsURL = 'http://www.w3.org/2000/svg';\r\n\r\n      // The below creates an element in the format of:\r\n      // <span><svg><use>....</use></svg></span>\r\n      const iconContainer = createEl('span', {\r\n        className: 'vjs-icon-placeholder vjs-svg-icon'\r\n      }, {\r\n        'aria-hidden': 'true'\r\n      });\r\n      const svgEl = document.createElementNS(xmlnsURL, 'svg');\r\n      svgEl.setAttributeNS(null, 'viewBox', '0 0 512 512');\r\n      const useEl = document.createElementNS(xmlnsURL, 'use');\r\n      svgEl.appendChild(useEl);\r\n      useEl.setAttributeNS(null, 'href', `#vjs-icon-${iconName}`);\r\n      iconContainer.appendChild(svgEl);\r\n\r\n      // Replace a pre-existing icon if one exists.\r\n      if (this.iconIsSet_) {\r\n        el.replaceChild(iconContainer, el.querySelector('.vjs-icon-placeholder'));\r\n      } else {\r\n        el.appendChild(iconContainer);\r\n      }\r\n      this.iconIsSet_ = true;\r\n      return iconContainer;\r\n    }\r\n\r\n    /**\r\n     * Add a child `Component` inside the current `Component`.\r\n     *\r\n     * @param {string|Component} child\r\n     *        The name or instance of a child to add.\r\n     *\r\n     * @param {Object} [options={}]\r\n     *        The key/value store of options that will get passed to children of\r\n     *        the child.\r\n     *\r\n     * @param {number} [index=this.children_.length]\r\n     *        The index to attempt to add a child into.\r\n     *\r\n     *\r\n     * @return {Component}\r\n     *         The `Component` that gets added as a child. When using a string the\r\n     *         `Component` will get created by this process.\r\n     */\r\n    addChild(child, options = {}, index = this.children_.length) {\r\n      let component;\r\n      let componentName;\r\n\r\n      // If child is a string, create component with options\r\n      if (typeof child === 'string') {\r\n        componentName = toTitleCase$1(child);\r\n        const componentClassName = options.componentClass || componentName;\r\n\r\n        // Set name through options\r\n        options.name = componentName;\r\n\r\n        // Create a new object & element for this controls set\r\n        // If there's no .player_, this is a player\r\n        const ComponentClass = Component$1.getComponent(componentClassName);\r\n        if (!ComponentClass) {\r\n          throw new Error(`Component ${componentClassName} does not exist`);\r\n        }\r\n\r\n        // data stored directly on the videojs object may be\r\n        // misidentified as a component to retain\r\n        // backwards-compatibility with 4.x. check to make sure the\r\n        // component class can be instantiated.\r\n        if (typeof ComponentClass !== 'function') {\r\n          return null;\r\n        }\r\n        component = new ComponentClass(this.player_ || this, options);\r\n\r\n        // child is a component instance\r\n      } else {\r\n        component = child;\r\n      }\r\n      if (component.parentComponent_) {\r\n        component.parentComponent_.removeChild(component);\r\n      }\r\n      this.children_.splice(index, 0, component);\r\n      component.parentComponent_ = this;\r\n      if (typeof component.id === 'function') {\r\n        this.childIndex_[component.id()] = component;\r\n      }\r\n\r\n      // If a name wasn't used to create the component, check if we can use the\r\n      // name function of the component\r\n      componentName = componentName || component.name && toTitleCase$1(component.name());\r\n      if (componentName) {\r\n        this.childNameIndex_[componentName] = component;\r\n        this.childNameIndex_[toLowerCase(componentName)] = component;\r\n      }\r\n\r\n      // Add the UI object's element to the container div (box)\r\n      // Having an element is not required\r\n      if (typeof component.el === 'function' && component.el()) {\r\n        // If inserting before a component, insert before that component's element\r\n        let refNode = null;\r\n        if (this.children_[index + 1]) {\r\n          // Most children are components, but the video tech is an HTML element\r\n          if (this.children_[index + 1].el_) {\r\n            refNode = this.children_[index + 1].el_;\r\n          } else if (isEl(this.children_[index + 1])) {\r\n            refNode = this.children_[index + 1];\r\n          }\r\n        }\r\n        this.contentEl().insertBefore(component.el(), refNode);\r\n      }\r\n\r\n      // Return so it can stored on parent object if desired.\r\n      return component;\r\n    }\r\n\r\n    /**\r\n     * Remove a child `Component` from this `Component`s list of children. Also removes\r\n     * the child `Component`s element from this `Component`s element.\r\n     *\r\n     * @param {Component} component\r\n     *        The child `Component` to remove.\r\n     */\r\n    removeChild(component) {\r\n      if (typeof component === 'string') {\r\n        component = this.getChild(component);\r\n      }\r\n      if (!component || !this.children_) {\r\n        return;\r\n      }\r\n      let childFound = false;\r\n      for (let i = this.children_.length - 1; i >= 0; i--) {\r\n        if (this.children_[i] === component) {\r\n          childFound = true;\r\n          this.children_.splice(i, 1);\r\n          break;\r\n        }\r\n      }\r\n      if (!childFound) {\r\n        return;\r\n      }\r\n      component.parentComponent_ = null;\r\n      this.childIndex_[component.id()] = null;\r\n      this.childNameIndex_[toTitleCase$1(component.name())] = null;\r\n      this.childNameIndex_[toLowerCase(component.name())] = null;\r\n      const compEl = component.el();\r\n      if (compEl && compEl.parentNode === this.contentEl()) {\r\n        this.contentEl().removeChild(component.el());\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Add and initialize default child `Component`s based upon options.\r\n     */\r\n    initChildren() {\r\n      const children = this.options_.children;\r\n      if (children) {\r\n        // `this` is `parent`\r\n        const parentOptions = this.options_;\r\n        const handleAdd = child => {\r\n          const name = child.name;\r\n          let opts = child.opts;\r\n\r\n          // Allow options for children to be set at the parent options\r\n          // e.g. videojs(id, { controlBar: false });\r\n          // instead of videojs(id, { children: { controlBar: false });\r\n          if (parentOptions[name] !== undefined) {\r\n            opts = parentOptions[name];\r\n          }\r\n\r\n          // Allow for disabling default components\r\n          // e.g. options['children']['posterImage'] = false\r\n          if (opts === false) {\r\n            return;\r\n          }\r\n\r\n          // Allow options to be passed as a simple boolean if no configuration\r\n          // is necessary.\r\n          if (opts === true) {\r\n            opts = {};\r\n          }\r\n\r\n          // We also want to pass the original player options\r\n          // to each component as well so they don't need to\r\n          // reach back into the player for options later.\r\n          opts.playerOptions = this.options_.playerOptions;\r\n\r\n          // Create and add the child component.\r\n          // Add a direct reference to the child by name on the parent instance.\r\n          // If two of the same component are used, different names should be supplied\r\n          // for each\r\n          const newChild = this.addChild(name, opts);\r\n          if (newChild) {\r\n            this[name] = newChild;\r\n          }\r\n        };\r\n\r\n        // Allow for an array of children details to passed in the options\r\n        let workingChildren;\r\n        const Tech = Component$1.getComponent('Tech');\r\n        if (Array.isArray(children)) {\r\n          workingChildren = children;\r\n        } else {\r\n          workingChildren = Object.keys(children);\r\n        }\r\n        workingChildren\r\n        // children that are in this.options_ but also in workingChildren  would\r\n        // give us extra children we do not want. So, we want to filter them out.\r\n        .concat(Object.keys(this.options_).filter(function (child) {\r\n          return !workingChildren.some(function (wchild) {\r\n            if (typeof wchild === 'string') {\r\n              return child === wchild;\r\n            }\r\n            return child === wchild.name;\r\n          });\r\n        })).map(child => {\r\n          let name;\r\n          let opts;\r\n          if (typeof child === 'string') {\r\n            name = child;\r\n            opts = children[name] || this.options_[name] || {};\r\n          } else {\r\n            name = child.name;\r\n            opts = child;\r\n          }\r\n          return {\r\n            name,\r\n            opts\r\n          };\r\n        }).filter(child => {\r\n          // we have to make sure that child.name isn't in the techOrder since\r\n          // techs are registered as Components but can't aren't compatible\r\n          // See https://github.com/videojs/video.js/issues/2772\r\n          const c = Component$1.getComponent(child.opts.componentClass || toTitleCase$1(child.name));\r\n          return c && !Tech.isTech(c);\r\n        }).forEach(handleAdd);\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Builds the default DOM class name. Should be overridden by sub-components.\r\n     *\r\n     * @return {string}\r\n     *         The DOM class name for this object.\r\n     *\r\n     * @abstract\r\n     */\r\n    buildCSSClass() {\r\n      // Child classes can include a function that does:\r\n      // return 'CLASS NAME' + this._super();\r\n      return '';\r\n    }\r\n\r\n    /**\r\n     * Bind a listener to the component's ready state.\r\n     * Different from event listeners in that if the ready event has already happened\r\n     * it will trigger the function immediately.\r\n     *\r\n     * @param {ReadyCallback} fn\r\n     *        Function that gets called when the `Component` is ready.\r\n     */\r\n    ready(fn, sync = false) {\r\n      if (!fn) {\r\n        return;\r\n      }\r\n      if (!this.isReady_) {\r\n        this.readyQueue_ = this.readyQueue_ || [];\r\n        this.readyQueue_.push(fn);\r\n        return;\r\n      }\r\n      if (sync) {\r\n        fn.call(this);\r\n      } else {\r\n        // Call the function asynchronously by default for consistency\r\n        this.setTimeout(fn, 1);\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Trigger all the ready listeners for this `Component`.\r\n     *\r\n     * @fires Component#ready\r\n     */\r\n    triggerReady() {\r\n      this.isReady_ = true;\r\n\r\n      // Ensure ready is triggered asynchronously\r\n      this.setTimeout(function () {\r\n        const readyQueue = this.readyQueue_;\r\n\r\n        // Reset Ready Queue\r\n        this.readyQueue_ = [];\r\n        if (readyQueue && readyQueue.length > 0) {\r\n          readyQueue.forEach(function (fn) {\r\n            fn.call(this);\r\n          }, this);\r\n        }\r\n\r\n        // Allow for using event listeners also\r\n        /**\r\n         * Triggered when a `Component` is ready.\r\n         *\r\n         * @event Component#ready\r\n         * @type {Event}\r\n         */\r\n        this.trigger('ready');\r\n      }, 1);\r\n    }\r\n\r\n    /**\r\n     * Find a single DOM element matching a `selector`. This can be within the `Component`s\r\n     * `contentEl()` or another custom context.\r\n     *\r\n     * @param {string} selector\r\n     *        A valid CSS selector, which will be passed to `querySelector`.\r\n     *\r\n     * @param {Element|string} [context=this.contentEl()]\r\n     *        A DOM element within which to query. Can also be a selector string in\r\n     *        which case the first matching element will get used as context. If\r\n     *        missing `this.contentEl()` gets used. If  `this.contentEl()` returns\r\n     *        nothing it falls back to `document`.\r\n     *\r\n     * @return {Element|null}\r\n     *         the dom element that was found, or null\r\n     *\r\n     * @see [Information on CSS Selectors](https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Getting_Started/Selectors)\r\n     */\r\n    $(selector, context) {\r\n      return $(selector, context || this.contentEl());\r\n    }\r\n\r\n    /**\r\n     * Finds all DOM element matching a `selector`. This can be within the `Component`s\r\n     * `contentEl()` or another custom context.\r\n     *\r\n     * @param {string} selector\r\n     *        A valid CSS selector, which will be passed to `querySelectorAll`.\r\n     *\r\n     * @param {Element|string} [context=this.contentEl()]\r\n     *        A DOM element within which to query. Can also be a selector string in\r\n     *        which case the first matching element will get used as context. If\r\n     *        missing `this.contentEl()` gets used. If  `this.contentEl()` returns\r\n     *        nothing it falls back to `document`.\r\n     *\r\n     * @return {NodeList}\r\n     *         a list of dom elements that were found\r\n     *\r\n     * @see [Information on CSS Selectors](https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Getting_Started/Selectors)\r\n     */\r\n    $$(selector, context) {\r\n      return $$(selector, context || this.contentEl());\r\n    }\r\n\r\n    /**\r\n     * Check if a component's element has a CSS class name.\r\n     *\r\n     * @param {string} classToCheck\r\n     *        CSS class name to check.\r\n     *\r\n     * @return {boolean}\r\n     *         - True if the `Component` has the class.\r\n     *         - False if the `Component` does not have the class`\r\n     */\r\n    hasClass(classToCheck) {\r\n      return hasClass(this.el_, classToCheck);\r\n    }\r\n\r\n    /**\r\n     * Add a CSS class name to the `Component`s element.\r\n     *\r\n     * @param {...string} classesToAdd\r\n     *        One or more CSS class name to add.\r\n     */\r\n    addClass(...classesToAdd) {\r\n      addClass(this.el_, ...classesToAdd);\r\n    }\r\n\r\n    /**\r\n     * Remove a CSS class name from the `Component`s element.\r\n     *\r\n     * @param {...string} classesToRemove\r\n     *        One or more CSS class name to remove.\r\n     */\r\n    removeClass(...classesToRemove) {\r\n      removeClass(this.el_, ...classesToRemove);\r\n    }\r\n\r\n    /**\r\n     * Add or remove a CSS class name from the component's element.\r\n     * - `classToToggle` gets added when {@link Component#hasClass} would return false.\r\n     * - `classToToggle` gets removed when {@link Component#hasClass} would return true.\r\n     *\r\n     * @param  {string} classToToggle\r\n     *         The class to add or remove. Passed to DOMTokenList's toggle()\r\n     *\r\n     * @param  {boolean|Dom.PredicateCallback} [predicate]\r\n     *         A boolean or function that returns a boolean. Passed to DOMTokenList's toggle().\r\n     */\r\n    toggleClass(classToToggle, predicate) {\r\n      toggleClass(this.el_, classToToggle, predicate);\r\n    }\r\n\r\n    /**\r\n     * Show the `Component`s element if it is hidden by removing the\r\n     * 'vjs-hidden' class name from it.\r\n     */\r\n    show() {\r\n      this.removeClass('vjs-hidden');\r\n    }\r\n\r\n    /**\r\n     * Hide the `Component`s element if it is currently showing by adding the\r\n     * 'vjs-hidden` class name to it.\r\n     */\r\n    hide() {\r\n      this.addClass('vjs-hidden');\r\n    }\r\n\r\n    /**\r\n     * Lock a `Component`s element in its visible state by adding the 'vjs-lock-showing'\r\n     * class name to it. Used during fadeIn/fadeOut.\r\n     *\r\n     * @private\r\n     */\r\n    lockShowing() {\r\n      this.addClass('vjs-lock-showing');\r\n    }\r\n\r\n    /**\r\n     * Unlock a `Component`s element from its visible state by removing the 'vjs-lock-showing'\r\n     * class name from it. Used during fadeIn/fadeOut.\r\n     *\r\n     * @private\r\n     */\r\n    unlockShowing() {\r\n      this.removeClass('vjs-lock-showing');\r\n    }\r\n\r\n    /**\r\n     * Get the value of an attribute on the `Component`s element.\r\n     *\r\n     * @param {string} attribute\r\n     *        Name of the attribute to get the value from.\r\n     *\r\n     * @return {string|null}\r\n     *         - The value of the attribute that was asked for.\r\n     *         - Can be an empty string on some browsers if the attribute does not exist\r\n     *           or has no value\r\n     *         - Most browsers will return null if the attribute does not exist or has\r\n     *           no value.\r\n     *\r\n     * @see [DOM API]{@link https://developer.mozilla.org/en-US/docs/Web/API/Element/getAttribute}\r\n     */\r\n    getAttribute(attribute) {\r\n      return getAttribute(this.el_, attribute);\r\n    }\r\n\r\n    /**\r\n     * Set the value of an attribute on the `Component`'s element\r\n     *\r\n     * @param {string} attribute\r\n     *        Name of the attribute to set.\r\n     *\r\n     * @param {string} value\r\n     *        Value to set the attribute to.\r\n     *\r\n     * @see [DOM API]{@link https://developer.mozilla.org/en-US/docs/Web/API/Element/setAttribute}\r\n     */\r\n    setAttribute(attribute, value) {\r\n      setAttribute(this.el_, attribute, value);\r\n    }\r\n\r\n    /**\r\n     * Remove an attribute from the `Component`s element.\r\n     *\r\n     * @param {string} attribute\r\n     *        Name of the attribute to remove.\r\n     *\r\n     * @see [DOM API]{@link https://developer.mozilla.org/en-US/docs/Web/API/Element/removeAttribute}\r\n     */\r\n    removeAttribute(attribute) {\r\n      removeAttribute(this.el_, attribute);\r\n    }\r\n\r\n    /**\r\n     * Get or set the width of the component based upon the CSS styles.\r\n     * See {@link Component#dimension} for more detailed information.\r\n     *\r\n     * @param {number|string} [num]\r\n     *        The width that you want to set postfixed with '%', 'px' or nothing.\r\n     *\r\n     * @param {boolean} [skipListeners]\r\n     *        Skip the componentresize event trigger\r\n     *\r\n     * @return {number|undefined}\r\n     *         The width when getting, zero if there is no width\r\n     */\r\n    width(num, skipListeners) {\r\n      return this.dimension('width', num, skipListeners);\r\n    }\r\n\r\n    /**\r\n     * Get or set the height of the component based upon the CSS styles.\r\n     * See {@link Component#dimension} for more detailed information.\r\n     *\r\n     * @param {number|string} [num]\r\n     *        The height that you want to set postfixed with '%', 'px' or nothing.\r\n     *\r\n     * @param {boolean} [skipListeners]\r\n     *        Skip the componentresize event trigger\r\n     *\r\n     * @return {number|undefined}\r\n     *         The height when getting, zero if there is no height\r\n     */\r\n    height(num, skipListeners) {\r\n      return this.dimension('height', num, skipListeners);\r\n    }\r\n\r\n    /**\r\n     * Set both the width and height of the `Component` element at the same time.\r\n     *\r\n     * @param  {number|string} width\r\n     *         Width to set the `Component`s element to.\r\n     *\r\n     * @param  {number|string} height\r\n     *         Height to set the `Component`s element to.\r\n     */\r\n    dimensions(width, height) {\r\n      // Skip componentresize listeners on width for optimization\r\n      this.width(width, true);\r\n      this.height(height);\r\n    }\r\n\r\n    /**\r\n     * Get or set width or height of the `Component` element. This is the shared code\r\n     * for the {@link Component#width} and {@link Component#height}.\r\n     *\r\n     * Things to know:\r\n     * - If the width or height in an number this will return the number postfixed with 'px'.\r\n     * - If the width/height is a percent this will return the percent postfixed with '%'\r\n     * - Hidden elements have a width of 0 with `window.getComputedStyle`. This function\r\n     *   defaults to the `Component`s `style.width` and falls back to `window.getComputedStyle`.\r\n     *   See [this]{@link http://www.foliotek.com/devblog/getting-the-width-of-a-hidden-element-with-jquery-using-width/}\r\n     *   for more information\r\n     * - If you want the computed style of the component, use {@link Component#currentWidth}\r\n     *   and {@link {Component#currentHeight}\r\n     *\r\n     * @fires Component#componentresize\r\n     *\r\n     * @param {string} widthOrHeight\r\n     8        'width' or 'height'\r\n     *\r\n     * @param  {number|string} [num]\r\n     8         New dimension\r\n     *\r\n     * @param  {boolean} [skipListeners]\r\n     *         Skip componentresize event trigger\r\n     *\r\n     * @return {number|undefined}\r\n     *         The dimension when getting or 0 if unset\r\n     */\r\n    dimension(widthOrHeight, num, skipListeners) {\r\n      if (num !== undefined) {\r\n        // Set to zero if null or literally NaN (NaN !== NaN)\r\n        if (num === null || num !== num) {\r\n          num = 0;\r\n        }\r\n\r\n        // Check if using css width/height (% or px) and adjust\r\n        if (('' + num).indexOf('%') !== -1 || ('' + num).indexOf('px') !== -1) {\r\n          this.el_.style[widthOrHeight] = num;\r\n        } else if (num === 'auto') {\r\n          this.el_.style[widthOrHeight] = '';\r\n        } else {\r\n          this.el_.style[widthOrHeight] = num + 'px';\r\n        }\r\n\r\n        // skipListeners allows us to avoid triggering the resize event when setting both width and height\r\n        if (!skipListeners) {\r\n          /**\r\n           * Triggered when a component is resized.\r\n           *\r\n           * @event Component#componentresize\r\n           * @type {Event}\r\n           */\r\n          this.trigger('componentresize');\r\n        }\r\n        return;\r\n      }\r\n\r\n      // Not setting a value, so getting it\r\n      // Make sure element exists\r\n      if (!this.el_) {\r\n        return 0;\r\n      }\r\n\r\n      // Get dimension value from style\r\n      const val = this.el_.style[widthOrHeight];\r\n      const pxIndex = val.indexOf('px');\r\n      if (pxIndex !== -1) {\r\n        // Return the pixel value with no 'px'\r\n        return parseInt(val.slice(0, pxIndex), 10);\r\n      }\r\n\r\n      // No px so using % or no style was set, so falling back to offsetWidth/height\r\n      // If component has display:none, offset will return 0\r\n      // TODO: handle display:none and no dimension style using px\r\n      return parseInt(this.el_['offset' + toTitleCase$1(widthOrHeight)], 10);\r\n    }\r\n\r\n    /**\r\n     * Get the computed width or the height of the component's element.\r\n     *\r\n     * Uses `window.getComputedStyle`.\r\n     *\r\n     * @param {string} widthOrHeight\r\n     *        A string containing 'width' or 'height'. Whichever one you want to get.\r\n     *\r\n     * @return {number}\r\n     *         The dimension that gets asked for or 0 if nothing was set\r\n     *         for that dimension.\r\n     */\r\n    currentDimension(widthOrHeight) {\r\n      let computedWidthOrHeight = 0;\r\n      if (widthOrHeight !== 'width' && widthOrHeight !== 'height') {\r\n        throw new Error('currentDimension only accepts width or height value');\r\n      }\r\n      computedWidthOrHeight = computedStyle(this.el_, widthOrHeight);\r\n\r\n      // remove 'px' from variable and parse as integer\r\n      computedWidthOrHeight = parseFloat(computedWidthOrHeight);\r\n\r\n      // if the computed value is still 0, it's possible that the browser is lying\r\n      // and we want to check the offset values.\r\n      // This code also runs wherever getComputedStyle doesn't exist.\r\n      if (computedWidthOrHeight === 0 || isNaN(computedWidthOrHeight)) {\r\n        const rule = `offset${toTitleCase$1(widthOrHeight)}`;\r\n        computedWidthOrHeight = this.el_[rule];\r\n      }\r\n      return computedWidthOrHeight;\r\n    }\r\n\r\n    /**\r\n     * An object that contains width and height values of the `Component`s\r\n     * computed style. Uses `window.getComputedStyle`.\r\n     *\r\n     * @typedef {Object} Component~DimensionObject\r\n     *\r\n     * @property {number} width\r\n     *           The width of the `Component`s computed style.\r\n     *\r\n     * @property {number} height\r\n     *           The height of the `Component`s computed style.\r\n     */\r\n\r\n    /**\r\n     * Get an object that contains computed width and height values of the\r\n     * component's element.\r\n     *\r\n     * Uses `window.getComputedStyle`.\r\n     *\r\n     * @return {Component~DimensionObject}\r\n     *         The computed dimensions of the component's element.\r\n     */\r\n    currentDimensions() {\r\n      return {\r\n        width: this.currentDimension('width'),\r\n        height: this.currentDimension('height')\r\n      };\r\n    }\r\n\r\n    /**\r\n     * Get the computed width of the component's element.\r\n     *\r\n     * Uses `window.getComputedStyle`.\r\n     *\r\n     * @return {number}\r\n     *         The computed width of the component's element.\r\n     */\r\n    currentWidth() {\r\n      return this.currentDimension('width');\r\n    }\r\n\r\n    /**\r\n     * Get the computed height of the component's element.\r\n     *\r\n     * Uses `window.getComputedStyle`.\r\n     *\r\n     * @return {number}\r\n     *         The computed height of the component's element.\r\n     */\r\n    currentHeight() {\r\n      return this.currentDimension('height');\r\n    }\r\n\r\n    /**\r\n     * Retrieves the position and size information of the component's element.\r\n     *\r\n     * @return {Object} An object with `boundingClientRect` and `center` properties.\r\n     *         - `boundingClientRect`: An object with properties `x`, `y`, `width`,\r\n     *           `height`, `top`, `right`, `bottom`, and `left`, representing\r\n     *           the bounding rectangle of the element.\r\n     *         - `center`: An object with properties `x` and `y`, representing\r\n     *           the center point of the element. `width` and `height` are set to 0.\r\n     */\r\n    getPositions() {\r\n      const rect = this.el_.getBoundingClientRect();\r\n\r\n      // Creating objects that mirror DOMRectReadOnly for boundingClientRect and center\r\n      const boundingClientRect = {\r\n        x: rect.x,\r\n        y: rect.y,\r\n        width: rect.width,\r\n        height: rect.height,\r\n        top: rect.top,\r\n        right: rect.right,\r\n        bottom: rect.bottom,\r\n        left: rect.left\r\n      };\r\n\r\n      // Calculating the center position\r\n      const center = {\r\n        x: rect.left + rect.width / 2,\r\n        y: rect.top + rect.height / 2,\r\n        width: 0,\r\n        height: 0,\r\n        top: rect.top + rect.height / 2,\r\n        right: rect.left + rect.width / 2,\r\n        bottom: rect.top + rect.height / 2,\r\n        left: rect.left + rect.width / 2\r\n      };\r\n      return {\r\n        boundingClientRect,\r\n        center\r\n      };\r\n    }\r\n\r\n    /**\r\n     * Set the focus to this component\r\n     */\r\n    focus() {\r\n      this.el_.focus();\r\n    }\r\n\r\n    /**\r\n     * Remove the focus from this component\r\n     */\r\n    blur() {\r\n      this.el_.blur();\r\n    }\r\n\r\n    /**\r\n     * When this Component receives a `keydown` event which it does not process,\r\n     *  it passes the event to the Player for handling.\r\n     *\r\n     * @param {KeyboardEvent} event\r\n     *        The `keydown` event that caused this function to be called.\r\n     */\r\n    handleKeyDown(event) {\r\n      if (this.player_) {\r\n        // We only stop propagation here because we want unhandled events to fall\r\n        // back to the browser. Exclude Tab for focus trapping, exclude also when spatialNavigation is enabled.\r\n        if (event.key !== 'Tab' && !(this.player_.options_.playerOptions.spatialNavigation && this.player_.options_.playerOptions.spatialNavigation.enabled)) {\r\n          event.stopPropagation();\r\n        }\r\n        this.player_.handleKeyDown(event);\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Many components used to have a `handleKeyPress` method, which was poorly\r\n     * named because it listened to a `keydown` event. This method name now\r\n     * delegates to `handleKeyDown`. This means anyone calling `handleKeyPress`\r\n     * will not see their method calls stop working.\r\n     *\r\n     * @param {KeyboardEvent} event\r\n     *        The event that caused this function to be called.\r\n     */\r\n    handleKeyPress(event) {\r\n      this.handleKeyDown(event);\r\n    }\r\n\r\n    /**\r\n     * Emit a 'tap' events when touch event support gets detected. This gets used to\r\n     * support toggling the controls through a tap on the video. They get enabled\r\n     * because every sub-component would have extra overhead otherwise.\r\n     *\r\n     * @protected\r\n     * @fires Component#tap\r\n     * @listens Component#touchstart\r\n     * @listens Component#touchmove\r\n     * @listens Component#touchleave\r\n     * @listens Component#touchcancel\r\n     * @listens Component#touchend\r\n      */\r\n    emitTapEvents() {\r\n      // Track the start time so we can determine how long the touch lasted\r\n      let touchStart = 0;\r\n      let firstTouch = null;\r\n\r\n      // Maximum movement allowed during a touch event to still be considered a tap\r\n      // Other popular libs use anywhere from 2 (hammer.js) to 15,\r\n      // so 10 seems like a nice, round number.\r\n      const tapMovementThreshold = 10;\r\n\r\n      // The maximum length a touch can be while still being considered a tap\r\n      const touchTimeThreshold = 200;\r\n      let couldBeTap;\r\n      this.on('touchstart', function (event) {\r\n        // If more than one finger, don't consider treating this as a click\r\n        if (event.touches.length === 1) {\r\n          // Copy pageX/pageY from the object\r\n          firstTouch = {\r\n            pageX: event.touches[0].pageX,\r\n            pageY: event.touches[0].pageY\r\n          };\r\n          // Record start time so we can detect a tap vs. \"touch and hold\"\r\n          touchStart = window.performance.now();\r\n          // Reset couldBeTap tracking\r\n          couldBeTap = true;\r\n        }\r\n      });\r\n      this.on('touchmove', function (event) {\r\n        // If more than one finger, don't consider treating this as a click\r\n        if (event.touches.length > 1) {\r\n          couldBeTap = false;\r\n        } else if (firstTouch) {\r\n          // Some devices will throw touchmoves for all but the slightest of taps.\r\n          // So, if we moved only a small distance, this could still be a tap\r\n          const xdiff = event.touches[0].pageX - firstTouch.pageX;\r\n          const ydiff = event.touches[0].pageY - firstTouch.pageY;\r\n          const touchDistance = Math.sqrt(xdiff * xdiff + ydiff * ydiff);\r\n          if (touchDistance > tapMovementThreshold) {\r\n            couldBeTap = false;\r\n          }\r\n        }\r\n      });\r\n      const noTap = function () {\r\n        couldBeTap = false;\r\n      };\r\n\r\n      // TODO: Listen to the original target. http://youtu.be/DujfpXOKUp8?t=13m8s\r\n      this.on('touchleave', noTap);\r\n      this.on('touchcancel', noTap);\r\n\r\n      // When the touch ends, measure how long it took and trigger the appropriate\r\n      // event\r\n      this.on('touchend', function (event) {\r\n        firstTouch = null;\r\n        // Proceed only if the touchmove/leave/cancel event didn't happen\r\n        if (couldBeTap === true) {\r\n          // Measure how long the touch lasted\r\n          const touchTime = window.performance.now() - touchStart;\r\n\r\n          // Make sure the touch was less than the threshold to be considered a tap\r\n          if (touchTime < touchTimeThreshold) {\r\n            // Don't let browser turn this into a click\r\n            event.preventDefault();\r\n            /**\r\n             * Triggered when a `Component` is tapped.\r\n             *\r\n             * @event Component#tap\r\n             * @type {MouseEvent}\r\n             */\r\n            this.trigger('tap');\r\n            // It may be good to copy the touchend event object and change the\r\n            // type to tap, if the other event properties aren't exact after\r\n            // Events.fixEvent runs (e.g. event.target)\r\n          }\r\n        }\r\n      });\r\n    }\r\n\r\n    /**\r\n     * This function reports user activity whenever touch events happen. This can get\r\n     * turned off by any sub-components that wants touch events to act another way.\r\n     *\r\n     * Report user touch activity when touch events occur. User activity gets used to\r\n     * determine when controls should show/hide. It is simple when it comes to mouse\r\n     * events, because any mouse event should show the controls. So we capture mouse\r\n     * events that bubble up to the player and report activity when that happens.\r\n     * With touch events it isn't as easy as `touchstart` and `touchend` toggle player\r\n     * controls. So touch events can't help us at the player level either.\r\n     *\r\n     * User activity gets checked asynchronously. So what could happen is a tap event\r\n     * on the video turns the controls off. Then the `touchend` event bubbles up to\r\n     * the player. Which, if it reported user activity, would turn the controls right\r\n     * back on. We also don't want to completely block touch events from bubbling up.\r\n     * Furthermore a `touchmove` event and anything other than a tap, should not turn\r\n     * controls back on.\r\n     *\r\n     * @listens Component#touchstart\r\n     * @listens Component#touchmove\r\n     * @listens Component#touchend\r\n     * @listens Component#touchcancel\r\n     */\r\n    enableTouchActivity() {\r\n      // Don't continue if the root player doesn't support reporting user activity\r\n      if (!this.player() || !this.player().reportUserActivity) {\r\n        return;\r\n      }\r\n\r\n      // listener for reporting that the user is active\r\n      const report = bind_(this.player(), this.player().reportUserActivity);\r\n      let touchHolding;\r\n      this.on('touchstart', function () {\r\n        report();\r\n        // For as long as the they are touching the device or have their mouse down,\r\n        // we consider them active even if they're not moving their finger or mouse.\r\n        // So we want to continue to update that they are active\r\n        this.clearInterval(touchHolding);\r\n        // report at the same interval as activityCheck\r\n        touchHolding = this.setInterval(report, 250);\r\n      });\r\n      const touchEnd = function (event) {\r\n        report();\r\n        // stop the interval that maintains activity if the touch is holding\r\n        this.clearInterval(touchHolding);\r\n      };\r\n      this.on('touchmove', report);\r\n      this.on('touchend', touchEnd);\r\n      this.on('touchcancel', touchEnd);\r\n    }\r\n\r\n    /**\r\n     * A callback that has no parameters and is bound into `Component`s context.\r\n     *\r\n     * @callback Component~GenericCallback\r\n     * @this Component\r\n     */\r\n\r\n    /**\r\n     * Creates a function that runs after an `x` millisecond timeout. This function is a\r\n     * wrapper around `window.setTimeout`. There are a few reasons to use this one\r\n     * instead though:\r\n     * 1. It gets cleared via  {@link Component#clearTimeout} when\r\n     *    {@link Component#dispose} gets called.\r\n     * 2. The function callback will gets turned into a {@link Component~GenericCallback}\r\n     *\r\n     * > Note: You can't use `window.clearTimeout` on the id returned by this function. This\r\n     *         will cause its dispose listener not to get cleaned up! Please use\r\n     *         {@link Component#clearTimeout} or {@link Component#dispose} instead.\r\n     *\r\n     * @param {Component~GenericCallback} fn\r\n     *        The function that will be run after `timeout`.\r\n     *\r\n     * @param {number} timeout\r\n     *        Timeout in milliseconds to delay before executing the specified function.\r\n     *\r\n     * @return {number}\r\n     *         Returns a timeout ID that gets used to identify the timeout. It can also\r\n     *         get used in {@link Component#clearTimeout} to clear the timeout that\r\n     *         was set.\r\n     *\r\n     * @listens Component#dispose\r\n     * @see [Similar to]{@link https://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/setTimeout}\r\n     */\r\n    setTimeout(fn, timeout) {\r\n      // declare as variables so they are properly available in timeout function\r\n      // eslint-disable-next-line\r\n      var timeoutId;\r\n      fn = bind_(this, fn);\r\n      this.clearTimersOnDispose_();\r\n      timeoutId = window.setTimeout(() => {\r\n        if (this.setTimeoutIds_.has(timeoutId)) {\r\n          this.setTimeoutIds_.delete(timeoutId);\r\n        }\r\n        fn();\r\n      }, timeout);\r\n      this.setTimeoutIds_.add(timeoutId);\r\n      return timeoutId;\r\n    }\r\n\r\n    /**\r\n     * Clears a timeout that gets created via `window.setTimeout` or\r\n     * {@link Component#setTimeout}. If you set a timeout via {@link Component#setTimeout}\r\n     * use this function instead of `window.clearTimout`. If you don't your dispose\r\n     * listener will not get cleaned up until {@link Component#dispose}!\r\n     *\r\n     * @param {number} timeoutId\r\n     *        The id of the timeout to clear. The return value of\r\n     *        {@link Component#setTimeout} or `window.setTimeout`.\r\n     *\r\n     * @return {number}\r\n     *         Returns the timeout id that was cleared.\r\n     *\r\n     * @see [Similar to]{@link https://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/clearTimeout}\r\n     */\r\n    clearTimeout(timeoutId) {\r\n      if (this.setTimeoutIds_.has(timeoutId)) {\r\n        this.setTimeoutIds_.delete(timeoutId);\r\n        window.clearTimeout(timeoutId);\r\n      }\r\n      return timeoutId;\r\n    }\r\n\r\n    /**\r\n     * Creates a function that gets run every `x` milliseconds. This function is a wrapper\r\n     * around `window.setInterval`. There are a few reasons to use this one instead though.\r\n     * 1. It gets cleared via  {@link Component#clearInterval} when\r\n     *    {@link Component#dispose} gets called.\r\n     * 2. The function callback will be a {@link Component~GenericCallback}\r\n     *\r\n     * @param {Component~GenericCallback} fn\r\n     *        The function to run every `x` seconds.\r\n     *\r\n     * @param {number} interval\r\n     *        Execute the specified function every `x` milliseconds.\r\n     *\r\n     * @return {number}\r\n     *         Returns an id that can be used to identify the interval. It can also be be used in\r\n     *         {@link Component#clearInterval} to clear the interval.\r\n     *\r\n     * @listens Component#dispose\r\n     * @see [Similar to]{@link https://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/setInterval}\r\n     */\r\n    setInterval(fn, interval) {\r\n      fn = bind_(this, fn);\r\n      this.clearTimersOnDispose_();\r\n      const intervalId = window.setInterval(fn, interval);\r\n      this.setIntervalIds_.add(intervalId);\r\n      return intervalId;\r\n    }\r\n\r\n    /**\r\n     * Clears an interval that gets created via `window.setInterval` or\r\n     * {@link Component#setInterval}. If you set an interval via {@link Component#setInterval}\r\n     * use this function instead of `window.clearInterval`. If you don't your dispose\r\n     * listener will not get cleaned up until {@link Component#dispose}!\r\n     *\r\n     * @param {number} intervalId\r\n     *        The id of the interval to clear. The return value of\r\n     *        {@link Component#setInterval} or `window.setInterval`.\r\n     *\r\n     * @return {number}\r\n     *         Returns the interval id that was cleared.\r\n     *\r\n     * @see [Similar to]{@link https://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/clearInterval}\r\n     */\r\n    clearInterval(intervalId) {\r\n      if (this.setIntervalIds_.has(intervalId)) {\r\n        this.setIntervalIds_.delete(intervalId);\r\n        window.clearInterval(intervalId);\r\n      }\r\n      return intervalId;\r\n    }\r\n\r\n    /**\r\n     * Queues up a callback to be passed to requestAnimationFrame (rAF), but\r\n     * with a few extra bonuses:\r\n     *\r\n     * - Supports browsers that do not support rAF by falling back to\r\n     *   {@link Component#setTimeout}.\r\n     *\r\n     * - The callback is turned into a {@link Component~GenericCallback} (i.e.\r\n     *   bound to the component).\r\n     *\r\n     * - Automatic cancellation of the rAF callback is handled if the component\r\n     *   is disposed before it is called.\r\n     *\r\n     * @param  {Component~GenericCallback} fn\r\n     *         A function that will be bound to this component and executed just\r\n     *         before the browser's next repaint.\r\n     *\r\n     * @return {number}\r\n     *         Returns an rAF ID that gets used to identify the timeout. It can\r\n     *         also be used in {@link Component#cancelAnimationFrame} to cancel\r\n     *         the animation frame callback.\r\n     *\r\n     * @listens Component#dispose\r\n     * @see [Similar to]{@link https://developer.mozilla.org/en-US/docs/Web/API/window/requestAnimationFrame}\r\n     */\r\n    requestAnimationFrame(fn) {\r\n      this.clearTimersOnDispose_();\r\n\r\n      // declare as variables so they are properly available in rAF function\r\n      // eslint-disable-next-line\r\n      var id;\r\n      fn = bind_(this, fn);\r\n      id = window.requestAnimationFrame(() => {\r\n        if (this.rafIds_.has(id)) {\r\n          this.rafIds_.delete(id);\r\n        }\r\n        fn();\r\n      });\r\n      this.rafIds_.add(id);\r\n      return id;\r\n    }\r\n\r\n    /**\r\n     * Request an animation frame, but only one named animation\r\n     * frame will be queued. Another will never be added until\r\n     * the previous one finishes.\r\n     *\r\n     * @param {string} name\r\n     *        The name to give this requestAnimationFrame\r\n     *\r\n     * @param  {Component~GenericCallback} fn\r\n     *         A function that will be bound to this component and executed just\r\n     *         before the browser's next repaint.\r\n     */\r\n    requestNamedAnimationFrame(name, fn) {\r\n      if (this.namedRafs_.has(name)) {\r\n        this.cancelNamedAnimationFrame(name);\r\n      }\r\n      this.clearTimersOnDispose_();\r\n      fn = bind_(this, fn);\r\n      const id = this.requestAnimationFrame(() => {\r\n        fn();\r\n        if (this.namedRafs_.has(name)) {\r\n          this.namedRafs_.delete(name);\r\n        }\r\n      });\r\n      this.namedRafs_.set(name, id);\r\n      return name;\r\n    }\r\n\r\n    /**\r\n     * Cancels a current named animation frame if it exists.\r\n     *\r\n     * @param {string} name\r\n     *        The name of the requestAnimationFrame to cancel.\r\n     */\r\n    cancelNamedAnimationFrame(name) {\r\n      if (!this.namedRafs_.has(name)) {\r\n        return;\r\n      }\r\n      this.cancelAnimationFrame(this.namedRafs_.get(name));\r\n      this.namedRafs_.delete(name);\r\n    }\r\n\r\n    /**\r\n     * Cancels a queued callback passed to {@link Component#requestAnimationFrame}\r\n     * (rAF).\r\n     *\r\n     * If you queue an rAF callback via {@link Component#requestAnimationFrame},\r\n     * use this function instead of `window.cancelAnimationFrame`. If you don't,\r\n     * your dispose listener will not get cleaned up until {@link Component#dispose}!\r\n     *\r\n     * @param {number} id\r\n     *        The rAF ID to clear. The return value of {@link Component#requestAnimationFrame}.\r\n     *\r\n     * @return {number}\r\n     *         Returns the rAF ID that was cleared.\r\n     *\r\n     * @see [Similar to]{@link https://developer.mozilla.org/en-US/docs/Web/API/window/cancelAnimationFrame}\r\n     */\r\n    cancelAnimationFrame(id) {\r\n      if (this.rafIds_.has(id)) {\r\n        this.rafIds_.delete(id);\r\n        window.cancelAnimationFrame(id);\r\n      }\r\n      return id;\r\n    }\r\n\r\n    /**\r\n     * A function to setup `requestAnimationFrame`, `setTimeout`,\r\n     * and `setInterval`, clearing on dispose.\r\n     *\r\n     * > Previously each timer added and removed dispose listeners on it's own.\r\n     * For better performance it was decided to batch them all, and use `Set`s\r\n     * to track outstanding timer ids.\r\n     *\r\n     * @private\r\n     */\r\n    clearTimersOnDispose_() {\r\n      if (this.clearingTimersOnDispose_) {\r\n        return;\r\n      }\r\n      this.clearingTimersOnDispose_ = true;\r\n      this.one('dispose', () => {\r\n        [['namedRafs_', 'cancelNamedAnimationFrame'], ['rafIds_', 'cancelAnimationFrame'], ['setTimeoutIds_', 'clearTimeout'], ['setIntervalIds_', 'clearInterval']].forEach(([idName, cancelName]) => {\r\n          // for a `Set` key will actually be the value again\r\n          // so forEach((val, val) =>` but for maps we want to use\r\n          // the key.\r\n          this[idName].forEach((val, key) => this[cancelName](key));\r\n        });\r\n        this.clearingTimersOnDispose_ = false;\r\n      });\r\n    }\r\n\r\n    /**\r\n      * Decide whether an element is actually disabled or not.\r\n      *\r\n      * @function isActuallyDisabled\r\n      * @param element {Node}\r\n      * @return {boolean}\r\n      *\r\n      * @see {@link https://html.spec.whatwg.org/multipage/semantics-other.html#concept-element-disabled}\r\n      */\r\n    getIsDisabled() {\r\n      return Boolean(this.el_.disabled);\r\n    }\r\n\r\n    /**\r\n      * Decide whether the element is expressly inert or not.\r\n      *\r\n      * @see {@link https://html.spec.whatwg.org/multipage/interaction.html#expressly-inert}\r\n      * @function isExpresslyInert\r\n      * @param element {Node}\r\n      * @return {boolean}\r\n      */\r\n    getIsExpresslyInert() {\r\n      return this.el_.inert && !this.el_.ownerDocument.documentElement.inert;\r\n    }\r\n\r\n    /**\r\n     * Determine whether or not this component can be considered as focusable component.\r\n     *\r\n     * @param {HTMLElement} el - The HTML element representing the component.\r\n     * @return {boolean}\r\n     *         If the component can be focused, will be `true`. Otherwise, `false`.\r\n     */\r\n    getIsFocusable(el) {\r\n      const element = el || this.el_;\r\n      return element.tabIndex >= 0 && !(this.getIsDisabled() || this.getIsExpresslyInert());\r\n    }\r\n\r\n    /**\r\n     * Determine whether or not this component is currently visible/enabled/etc...\r\n     *\r\n     * @param {HTMLElement} el - The HTML element representing the component.\r\n     * @return {boolean}\r\n     *         If the component can is currently visible & enabled, will be `true`. Otherwise, `false`.\r\n     */\r\n    getIsAvailableToBeFocused(el) {\r\n      /**\r\n       * Decide the style property of this element is specified whether it's visible or not.\r\n       *\r\n       * @function isVisibleStyleProperty\r\n       * @param element {CSSStyleDeclaration}\r\n       * @return {boolean}\r\n       */\r\n      function isVisibleStyleProperty(element) {\r\n        const elementStyle = window.getComputedStyle(element, null);\r\n        const thisVisibility = elementStyle.getPropertyValue('visibility');\r\n        const thisDisplay = elementStyle.getPropertyValue('display');\r\n        const invisibleStyle = ['hidden', 'collapse'];\r\n        return thisDisplay !== 'none' && !invisibleStyle.includes(thisVisibility);\r\n      }\r\n\r\n      /**\r\n       * Decide whether the element is being rendered or not.\r\n       * 1. If an element has the style as \"visibility: hidden | collapse\" or \"display: none\", it is not being rendered.\r\n       * 2. If an element has the style as \"opacity: 0\", it is not being rendered.(that is, invisible).\r\n       * 3. If width and height of an element are explicitly set to 0, it is not being rendered.\r\n       * 4. If a parent element is hidden, an element itself is not being rendered.\r\n       * (CSS visibility property and display property are inherited.)\r\n       *\r\n       * @see {@link https://html.spec.whatwg.org/multipage/rendering.html#being-rendered}\r\n       * @function isBeingRendered\r\n       * @param element {Node}\r\n       * @return {boolean}\r\n       */\r\n      function isBeingRendered(element) {\r\n        if (!isVisibleStyleProperty(element.parentElement)) {\r\n          return false;\r\n        }\r\n        if (!isVisibleStyleProperty(element) || element.style.opacity === '0' || window.getComputedStyle(element).height === '0px' || window.getComputedStyle(element).width === '0px') {\r\n          return false;\r\n        }\r\n        return true;\r\n      }\r\n\r\n      /**\r\n       * Determine if the element is visible for the user or not.\r\n       * 1. If an element sum of its offsetWidth, offsetHeight, height and width is less than 1 is not visible.\r\n       * 2. If elementCenter.x is less than is not visible.\r\n       * 3. If elementCenter.x is more than the document's width is not visible.\r\n       * 4. If elementCenter.y is less than 0 is not visible.\r\n       * 5. If elementCenter.y is the document's height is not visible.\r\n       *\r\n       * @function isVisible\r\n       * @param element {Node}\r\n       * @return {boolean}\r\n       */\r\n      function isVisible(element) {\r\n        if (element.offsetWidth + element.offsetHeight + element.getBoundingClientRect().height + element.getBoundingClientRect().width === 0) {\r\n          return false;\r\n        }\r\n\r\n        // Define elementCenter object with props of x and y\r\n        // x: Left position relative to the viewport plus element's width (no margin) divided between 2.\r\n        // y: Top position relative to the viewport plus element's height (no margin) divided between 2.\r\n        const elementCenter = {\r\n          x: element.getBoundingClientRect().left + element.offsetWidth / 2,\r\n          y: element.getBoundingClientRect().top + element.offsetHeight / 2\r\n        };\r\n        if (elementCenter.x < 0) {\r\n          return false;\r\n        }\r\n        if (elementCenter.x > (document.documentElement.clientWidth || window.innerWidth)) {\r\n          return false;\r\n        }\r\n        if (elementCenter.y < 0) {\r\n          return false;\r\n        }\r\n        if (elementCenter.y > (document.documentElement.clientHeight || window.innerHeight)) {\r\n          return false;\r\n        }\r\n        let pointContainer = document.elementFromPoint(elementCenter.x, elementCenter.y);\r\n        while (pointContainer) {\r\n          if (pointContainer === element) {\r\n            return true;\r\n          }\r\n          if (pointContainer.parentNode) {\r\n            pointContainer = pointContainer.parentNode;\r\n          } else {\r\n            return false;\r\n          }\r\n        }\r\n      }\r\n\r\n      // If no DOM element was passed as argument use this component's element.\r\n      if (!el) {\r\n        el = this.el();\r\n      }\r\n\r\n      // If element is visible, is being rendered & either does not have a parent element or its tabIndex is not negative.\r\n      if (isVisible(el) && isBeingRendered(el) && (!el.parentElement || el.tabIndex >= 0)) {\r\n        return true;\r\n      }\r\n      return false;\r\n    }\r\n\r\n    /**\r\n     * Register a `Component` with `videojs` given the name and the component.\r\n     *\r\n     * > NOTE: {@link Tech}s should not be registered as a `Component`. {@link Tech}s\r\n     *         should be registered using {@link Tech.registerTech} or\r\n     *         {@link videojs:videojs.registerTech}.\r\n     *\r\n     * > NOTE: This function can also be seen on videojs as\r\n     *         {@link videojs:videojs.registerComponent}.\r\n     *\r\n     * @param {string} name\r\n     *        The name of the `Component` to register.\r\n     *\r\n     * @param {Component} ComponentToRegister\r\n     *        The `Component` class to register.\r\n     *\r\n     * @return {Component}\r\n     *         The `Component` that was registered.\r\n     */\r\n    static registerComponent(name, ComponentToRegister) {\r\n      if (typeof name !== 'string' || !name) {\r\n        throw new Error(`Illegal component name, \"${name}\"; must be a non-empty string.`);\r\n      }\r\n      const Tech = Component$1.getComponent('Tech');\r\n\r\n      // We need to make sure this check is only done if Tech has been registered.\r\n      const isTech = Tech && Tech.isTech(ComponentToRegister);\r\n      const isComp = Component$1 === ComponentToRegister || Component$1.prototype.isPrototypeOf(ComponentToRegister.prototype);\r\n      if (isTech || !isComp) {\r\n        let reason;\r\n        if (isTech) {\r\n          reason = 'techs must be registered using Tech.registerTech()';\r\n        } else {\r\n          reason = 'must be a Component subclass';\r\n        }\r\n        throw new Error(`Illegal component, \"${name}\"; ${reason}.`);\r\n      }\r\n      name = toTitleCase$1(name);\r\n      if (!Component$1.components_) {\r\n        Component$1.components_ = {};\r\n      }\r\n      const Player = Component$1.getComponent('Player');\r\n      if (name === 'Player' && Player && Player.players) {\r\n        const players = Player.players;\r\n        const playerNames = Object.keys(players);\r\n\r\n        // If we have players that were disposed, then their name will still be\r\n        // in Players.players. So, we must loop through and verify that the value\r\n        // for each item is not null. This allows registration of the Player component\r\n        // after all players have been disposed or before any were created.\r\n        if (players && playerNames.length > 0 && playerNames.map(pname => players[pname]).every(Boolean)) {\r\n          throw new Error('Can not register Player component after player has been created.');\r\n        }\r\n      }\r\n      Component$1.components_[name] = ComponentToRegister;\r\n      Component$1.components_[toLowerCase(name)] = ComponentToRegister;\r\n      return ComponentToRegister;\r\n    }\r\n\r\n    /**\r\n     * Get a `Component` based on the name it was registered with.\r\n     *\r\n     * @param {string} name\r\n     *        The Name of the component to get.\r\n     *\r\n     * @return {typeof Component}\r\n     *         The `Component` that got registered under the given name.\r\n     */\r\n    static getComponent(name) {\r\n      if (!name || !Component$1.components_) {\r\n        return;\r\n      }\r\n      return Component$1.components_[name];\r\n    }\r\n  }\r\n  Component$1.registerComponent('Component', Component$1);\r\n\r\n  /**\r\n   * @file time.js\r\n   * @module time\r\n   */\r\n\r\n  /**\r\n   * Returns the time for the specified index at the start or end\r\n   * of a TimeRange object.\r\n   *\r\n   * @typedef    {Function} TimeRangeIndex\r\n   *\r\n   * @param      {number} [index=0]\r\n   *             The range number to return the time for.\r\n   *\r\n   * @return     {number}\r\n   *             The time offset at the specified index.\r\n   *\r\n   * @deprecated The index argument must be provided.\r\n   *             In the future, leaving it out will throw an error.\r\n   */\r\n\r\n  /**\r\n   * An object that contains ranges of time, which mimics {@link TimeRanges}.\r\n   *\r\n   * @typedef  {Object} TimeRange\r\n   *\r\n   * @property {number} length\r\n   *           The number of time ranges represented by this object.\r\n   *\r\n   * @property {module:time~TimeRangeIndex} start\r\n   *           Returns the time offset at which a specified time range begins.\r\n   *\r\n   * @property {module:time~TimeRangeIndex} end\r\n   *           Returns the time offset at which a specified time range ends.\r\n   *\r\n   * @see https://developer.mozilla.org/en-US/docs/Web/API/TimeRanges\r\n   */\r\n\r\n  /**\r\n   * Check if any of the time ranges are over the maximum index.\r\n   *\r\n   * @private\r\n   * @param   {string} fnName\r\n   *          The function name to use for logging\r\n   *\r\n   * @param   {number} index\r\n   *          The index to check\r\n   *\r\n   * @param   {number} maxIndex\r\n   *          The maximum possible index\r\n   *\r\n   * @throws  {Error} if the timeRanges provided are over the maxIndex\r\n   */\r\n  function rangeCheck(fnName, index, maxIndex) {\r\n    if (typeof index !== 'number' || index < 0 || index > maxIndex) {\r\n      throw new Error(`Failed to execute '${fnName}' on 'TimeRanges': The index provided (${index}) is non-numeric or out of bounds (0-${maxIndex}).`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the time for the specified index at the start or end\r\n   * of a TimeRange object.\r\n   *\r\n   * @private\r\n   * @param      {string} fnName\r\n   *             The function name to use for logging\r\n   *\r\n   * @param      {string} valueIndex\r\n   *             The property that should be used to get the time. should be\r\n   *             'start' or 'end'\r\n   *\r\n   * @param      {Array} ranges\r\n   *             An array of time ranges\r\n   *\r\n   * @param      {Array} [rangeIndex=0]\r\n   *             The index to start the search at\r\n   *\r\n   * @return     {number}\r\n   *             The time that offset at the specified index.\r\n   *\r\n   * @deprecated rangeIndex must be set to a value, in the future this will throw an error.\r\n   * @throws     {Error} if rangeIndex is more than the length of ranges\r\n   */\r\n  function getRange(fnName, valueIndex, ranges, rangeIndex) {\r\n    rangeCheck(fnName, rangeIndex, ranges.length - 1);\r\n    return ranges[rangeIndex][valueIndex];\r\n  }\r\n\r\n  /**\r\n   * Create a time range object given ranges of time.\r\n   *\r\n   * @private\r\n   * @param   {Array} [ranges]\r\n   *          An array of time ranges.\r\n   *\r\n   * @return  {TimeRange}\r\n   */\r\n  function createTimeRangesObj(ranges) {\r\n    let timeRangesObj;\r\n    if (ranges === undefined || ranges.length === 0) {\r\n      timeRangesObj = {\r\n        length: 0,\r\n        start() {\r\n          throw new Error('This TimeRanges object is empty');\r\n        },\r\n        end() {\r\n          throw new Error('This TimeRanges object is empty');\r\n        }\r\n      };\r\n    } else {\r\n      timeRangesObj = {\r\n        length: ranges.length,\r\n        start: getRange.bind(null, 'start', 0, ranges),\r\n        end: getRange.bind(null, 'end', 1, ranges)\r\n      };\r\n    }\r\n    if (window.Symbol && window.Symbol.iterator) {\r\n      timeRangesObj[window.Symbol.iterator] = () => (ranges || []).values();\r\n    }\r\n    return timeRangesObj;\r\n  }\r\n\r\n  /**\r\n   * Create a `TimeRange` object which mimics an\r\n   * {@link https://developer.mozilla.org/en-US/docs/Web/API/TimeRanges|HTML5 TimeRanges instance}.\r\n   *\r\n   * @param {number|Array[]} start\r\n   *        The start of a single range (a number) or an array of ranges (an\r\n   *        array of arrays of two numbers each).\r\n   *\r\n   * @param {number} end\r\n   *        The end of a single range. Cannot be used with the array form of\r\n   *        the `start` argument.\r\n   *\r\n   * @return {TimeRange}\r\n   */\r\n  function createTimeRanges$1(start, end) {\r\n    if (Array.isArray(start)) {\r\n      return createTimeRangesObj(start);\r\n    } else if (start === undefined || end === undefined) {\r\n      return createTimeRangesObj();\r\n    }\r\n    return createTimeRangesObj([[start, end]]);\r\n  }\r\n\r\n  /**\r\n   * Format seconds as a time string, H:MM:SS or M:SS. Supplying a guide (in\r\n   * seconds) will force a number of leading zeros to cover the length of the\r\n   * guide.\r\n   *\r\n   * @private\r\n   * @param  {number} seconds\r\n   *         Number of seconds to be turned into a string\r\n   *\r\n   * @param  {number} guide\r\n   *         Number (in seconds) to model the string after\r\n   *\r\n   * @return {string}\r\n   *         Time formatted as H:MM:SS or M:SS\r\n   */\r\n  const defaultImplementation = function (seconds, guide) {\r\n    seconds = seconds < 0 ? 0 : seconds;\r\n    let s = Math.floor(seconds % 60);\r\n    let m = Math.floor(seconds / 60 % 60);\r\n    let h = Math.floor(seconds / 3600);\r\n    const gm = Math.floor(guide / 60 % 60);\r\n    const gh = Math.floor(guide / 3600);\r\n\r\n    // handle invalid times\r\n    if (isNaN(seconds) || seconds === Infinity) {\r\n      // '-' is false for all relational operators (e.g. <, >=) so this setting\r\n      // will add the minimum number of fields specified by the guide\r\n      h = m = s = '-';\r\n    }\r\n\r\n    // Check if we need to show hours\r\n    h = h > 0 || gh > 0 ? h + ':' : '';\r\n\r\n    // If hours are showing, we may need to add a leading zero.\r\n    // Always show at least one digit of minutes.\r\n    m = ((h || gm >= 10) && m < 10 ? '0' + m : m) + ':';\r\n\r\n    // Check if leading zero is need for seconds\r\n    s = s < 10 ? '0' + s : s;\r\n    return h + m + s;\r\n  };\r\n\r\n  // Internal pointer to the current implementation.\r\n  let implementation = defaultImplementation;\r\n\r\n  /**\r\n   * Replaces the default formatTime implementation with a custom implementation.\r\n   *\r\n   * @param {Function} customImplementation\r\n   *        A function which will be used in place of the default formatTime\r\n   *        implementation. Will receive the current time in seconds and the\r\n   *        guide (in seconds) as arguments.\r\n   */\r\n  function setFormatTime(customImplementation) {\r\n    implementation = customImplementation;\r\n  }\r\n\r\n  /**\r\n   * Resets formatTime to the default implementation.\r\n   */\r\n  function resetFormatTime() {\r\n    implementation = defaultImplementation;\r\n  }\r\n\r\n  /**\r\n   * Delegates to either the default time formatting function or a custom\r\n   * function supplied via `setFormatTime`.\r\n   *\r\n   * Formats seconds as a time string (H:MM:SS or M:SS). Supplying a\r\n   * guide (in seconds) will force a number of leading zeros to cover the\r\n   * length of the guide.\r\n   *\r\n   * @example  formatTime(125, 600) === \"02:05\"\r\n   * @param    {number} seconds\r\n   *           Number of seconds to be turned into a string\r\n   *\r\n   * @param    {number} guide\r\n   *           Number (in seconds) to model the string after\r\n   *\r\n   * @return   {string}\r\n   *           Time formatted as H:MM:SS or M:SS\r\n   */\r\n  function formatTime(seconds, guide = seconds) {\r\n    return implementation(seconds, guide);\r\n  }\r\n\r\n  var Time = /*#__PURE__*/Object.freeze({\r\n    __proto__: null,\r\n    createTimeRanges: createTimeRanges$1,\r\n    createTimeRange: createTimeRanges$1,\r\n    setFormatTime: setFormatTime,\r\n    resetFormatTime: resetFormatTime,\r\n    formatTime: formatTime\r\n  });\r\n\r\n  /**\r\n   * @file buffer.js\r\n   * @module buffer\r\n   */\r\n\r\n  /** @import { TimeRange } from './time' */\r\n\r\n  /**\r\n   * Compute the percentage of the media that has been buffered.\r\n   *\r\n   * @param {TimeRange} buffered\r\n   *        The current `TimeRanges` object representing buffered time ranges\r\n   *\r\n   * @param {number} duration\r\n   *        Total duration of the media\r\n   *\r\n   * @return {number}\r\n   *         Percent buffered of the total duration in decimal form.\r\n   */\r\n  function bufferedPercent(buffered, duration) {\r\n    let bufferedDuration = 0;\r\n    let start;\r\n    let end;\r\n    if (!duration) {\r\n      return 0;\r\n    }\r\n    if (!buffered || !buffered.length) {\r\n      buffered = createTimeRanges$1(0, 0);\r\n    }\r\n    for (let i = 0; i < buffered.length; i++) {\r\n      start = buffered.start(i);\r\n      end = buffered.end(i);\r\n\r\n      // buffered end can be bigger than duration by a very small fraction\r\n      if (end > duration) {\r\n        end = duration;\r\n      }\r\n      bufferedDuration += end - start;\r\n    }\r\n    return bufferedDuration / duration;\r\n  }\r\n\r\n  /**\r\n   * @file media-error.js\r\n   */\r\n\r\n  /**\r\n   * A Custom `MediaError` class which mimics the standard HTML5 `MediaError` class.\r\n   *\r\n   * @param {number|string|Object|MediaError} value\r\n   *        This can be of multiple types:\r\n   *        - number: should be a standard error code\r\n   *        - string: an error message (the code will be 0)\r\n   *        - Object: arbitrary properties\r\n   *        - `MediaError` (native): used to populate a video.js `MediaError` object\r\n   *        - `MediaError` (video.js): will return itself if it's already a\r\n   *          video.js `MediaError` object.\r\n   *\r\n   * @see [MediaError Spec]{@link https://dev.w3.org/html5/spec-author-view/video.html#mediaerror}\r\n   * @see [Encrypted MediaError Spec]{@link https://www.w3.org/TR/2013/WD-encrypted-media-20130510/#error-codes}\r\n   *\r\n   * @class MediaError\r\n   */\r\n  function MediaError(value) {\r\n    // Allow redundant calls to this constructor to avoid having `instanceof`\r\n    // checks peppered around the code.\r\n    if (value instanceof MediaError) {\r\n      return value;\r\n    }\r\n    if (typeof value === 'number') {\r\n      this.code = value;\r\n    } else if (typeof value === 'string') {\r\n      // default code is zero, so this is a custom error\r\n      this.message = value;\r\n    } else if (isObject$1(value)) {\r\n      // We assign the `code` property manually because native `MediaError` objects\r\n      // do not expose it as an own/enumerable property of the object.\r\n      if (typeof value.code === 'number') {\r\n        this.code = value.code;\r\n      }\r\n      Object.assign(this, value);\r\n    }\r\n    if (!this.message) {\r\n      this.message = MediaError.defaultMessages[this.code] || '';\r\n    }\r\n  }\r\n\r\n  /**\r\n   * The error code that refers two one of the defined `MediaError` types\r\n   *\r\n   * @type {Number}\r\n   */\r\n  MediaError.prototype.code = 0;\r\n\r\n  /**\r\n   * An optional message that to show with the error. Message is not part of the HTML5\r\n   * video spec but allows for more informative custom errors.\r\n   *\r\n   * @type {String}\r\n   */\r\n  MediaError.prototype.message = '';\r\n\r\n  /**\r\n   * An optional status code that can be set by plugins to allow even more detail about\r\n   * the error. For example a plugin might provide a specific HTTP status code and an\r\n   * error message for that code. Then when the plugin gets that error this class will\r\n   * know how to display an error message for it. This allows a custom message to show\r\n   * up on the `Player` error overlay.\r\n   *\r\n   * @type {Array}\r\n   */\r\n  MediaError.prototype.status = null;\r\n\r\n  /**\r\n   * An object containing an error type, as well as other information regarding the error.\r\n   *\r\n   * @typedef {{errorType: string, [key: string]: any}} ErrorMetadata\r\n   */\r\n\r\n  /**\r\n   * An optional object to give more detail about the error. This can be used to give\r\n   * a higher level of specificity to an error versus the more generic MediaError codes.\r\n   * `metadata` expects an `errorType` string that should align with the values from videojs.Error.\r\n   *\r\n   * @type {ErrorMetadata}\r\n   */\r\n  MediaError.prototype.metadata = null;\r\n\r\n  /**\r\n   * Errors indexed by the W3C standard. The order **CANNOT CHANGE**! See the\r\n   * specification listed under {@link MediaError} for more information.\r\n   *\r\n   * @enum {array}\r\n   * @readonly\r\n   * @property {string} 0 - MEDIA_ERR_CUSTOM\r\n   * @property {string} 1 - MEDIA_ERR_ABORTED\r\n   * @property {string} 2 - MEDIA_ERR_NETWORK\r\n   * @property {string} 3 - MEDIA_ERR_DECODE\r\n   * @property {string} 4 - MEDIA_ERR_SRC_NOT_SUPPORTED\r\n   * @property {string} 5 - MEDIA_ERR_ENCRYPTED\r\n   */\r\n  MediaError.errorTypes = ['MEDIA_ERR_CUSTOM', 'MEDIA_ERR_ABORTED', 'MEDIA_ERR_NETWORK', 'MEDIA_ERR_DECODE', 'MEDIA_ERR_SRC_NOT_SUPPORTED', 'MEDIA_ERR_ENCRYPTED'];\r\n\r\n  /**\r\n   * The default `MediaError` messages based on the {@link MediaError.errorTypes}.\r\n   *\r\n   * @type {Array}\r\n   * @constant\r\n   */\r\n  MediaError.defaultMessages = {\r\n    1: 'You aborted the media playback',\r\n    2: 'A network error caused the media download to fail part-way.',\r\n    3: 'The media playback was aborted due to a corruption problem or because the media used features your browser did not support.',\r\n    4: 'The media could not be loaded, either because the server or network failed or because the format is not supported.',\r\n    5: 'The media is encrypted and we do not have the keys to decrypt it.'\r\n  };\r\n\r\n  /**\r\n   * W3C error code for any custom error.\r\n   *\r\n   * @member MediaError#MEDIA_ERR_CUSTOM\r\n   * @constant {number}\r\n   * @default 0\r\n   */\r\n  MediaError.MEDIA_ERR_CUSTOM = 0;\r\n\r\n  /**\r\n   * W3C error code for any custom error.\r\n   *\r\n   * @member MediaError.MEDIA_ERR_CUSTOM\r\n   * @constant {number}\r\n   * @default 0\r\n   */\r\n  MediaError.prototype.MEDIA_ERR_CUSTOM = 0;\r\n\r\n  /**\r\n   * W3C error code for media error aborted.\r\n   *\r\n   * @member MediaError#MEDIA_ERR_ABORTED\r\n   * @constant {number}\r\n   * @default 1\r\n   */\r\n  MediaError.MEDIA_ERR_ABORTED = 1;\r\n\r\n  /**\r\n   * W3C error code for media error aborted.\r\n   *\r\n   * @member MediaError.MEDIA_ERR_ABORTED\r\n   * @constant {number}\r\n   * @default 1\r\n   */\r\n  MediaError.prototype.MEDIA_ERR_ABORTED = 1;\r\n\r\n  /**\r\n   * W3C error code for any network error.\r\n   *\r\n   * @member MediaError#MEDIA_ERR_NETWORK\r\n   * @constant {number}\r\n   * @default 2\r\n   */\r\n  MediaError.MEDIA_ERR_NETWORK = 2;\r\n\r\n  /**\r\n   * W3C error code for any network error.\r\n   *\r\n   * @member MediaError.MEDIA_ERR_NETWORK\r\n   * @constant {number}\r\n   * @default 2\r\n   */\r\n  MediaError.prototype.MEDIA_ERR_NETWORK = 2;\r\n\r\n  /**\r\n   * W3C error code for any decoding error.\r\n   *\r\n   * @member MediaError#MEDIA_ERR_DECODE\r\n   * @constant {number}\r\n   * @default 3\r\n   */\r\n  MediaError.MEDIA_ERR_DECODE = 3;\r\n\r\n  /**\r\n   * W3C error code for any decoding error.\r\n   *\r\n   * @member MediaError.MEDIA_ERR_DECODE\r\n   * @constant {number}\r\n   * @default 3\r\n   */\r\n  MediaError.prototype.MEDIA_ERR_DECODE = 3;\r\n\r\n  /**\r\n   * W3C error code for any time that a source is not supported.\r\n   *\r\n   * @member MediaError#MEDIA_ERR_SRC_NOT_SUPPORTED\r\n   * @constant {number}\r\n   * @default 4\r\n   */\r\n  MediaError.MEDIA_ERR_SRC_NOT_SUPPORTED = 4;\r\n\r\n  /**\r\n   * W3C error code for any time that a source is not supported.\r\n   *\r\n   * @member MediaError.MEDIA_ERR_SRC_NOT_SUPPORTED\r\n   * @constant {number}\r\n   * @default 4\r\n   */\r\n  MediaError.prototype.MEDIA_ERR_SRC_NOT_SUPPORTED = 4;\r\n\r\n  /**\r\n   * W3C error code for any time that a source is encrypted.\r\n   *\r\n   * @member MediaError#MEDIA_ERR_ENCRYPTED\r\n   * @constant {number}\r\n   * @default 5\r\n   */\r\n  MediaError.MEDIA_ERR_ENCRYPTED = 5;\r\n\r\n  /**\r\n   * W3C error code for any time that a source is encrypted.\r\n   *\r\n   * @member MediaError.MEDIA_ERR_ENCRYPTED\r\n   * @constant {number}\r\n   * @default 5\r\n   */\r\n  MediaError.prototype.MEDIA_ERR_ENCRYPTED = 5;\r\n\r\n  /**\r\n   * Returns whether an object is `Promise`-like (i.e. has a `then` method).\r\n   *\r\n   * @param  {Object}  value\r\n   *         An object that may or may not be `Promise`-like.\r\n   *\r\n   * @return {boolean}\r\n   *         Whether or not the object is `Promise`-like.\r\n   */\r\n  function isPromise(value) {\r\n    return value !== undefined && value !== null && typeof value.then === 'function';\r\n  }\r\n\r\n  /**\r\n   * Silence a Promise-like object.\r\n   *\r\n   * This is useful for avoiding non-harmful, but potentially confusing \"uncaught\r\n   * play promise\" rejection error messages.\r\n   *\r\n   * @param  {Object} value\r\n   *         An object that may or may not be `Promise`-like.\r\n   */\r\n  function silencePromise(value) {\r\n    if (isPromise(value)) {\r\n      value.then(null, e => {});\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @file text-track-list-converter.js Utilities for capturing text track state and\r\n   * re-creating tracks based on a capture.\r\n   *\r\n   * @module text-track-list-converter\r\n   */\r\n\r\n  /** @import Tech from '../tech/tech' */\r\n\r\n  /**\r\n   * Examine a single {@link TextTrack} and return a JSON-compatible javascript object that\r\n   * represents the {@link TextTrack}'s state.\r\n   *\r\n   * @param {TextTrack} track\r\n   *        The text track to query.\r\n   *\r\n   * @return {Object}\r\n   *         A serializable javascript representation of the TextTrack.\r\n   * @private\r\n   */\r\n  const trackToJson_ = function (track) {\r\n    const ret = ['kind', 'label', 'language', 'id', 'inBandMetadataTrackDispatchType', 'mode', 'src'].reduce((acc, prop, i) => {\r\n      if (track[prop]) {\r\n        acc[prop] = track[prop];\r\n      }\r\n      return acc;\r\n    }, {\r\n      cues: track.cues && Array.prototype.map.call(track.cues, function (cue) {\r\n        return {\r\n          startTime: cue.startTime,\r\n          endTime: cue.endTime,\r\n          text: cue.text,\r\n          id: cue.id\r\n        };\r\n      })\r\n    });\r\n    return ret;\r\n  };\r\n\r\n  /**\r\n   * Examine a {@link Tech} and return a JSON-compatible javascript array that represents the\r\n   * state of all {@link TextTrack}s currently configured. The return array is compatible with\r\n   * {@link text-track-list-converter:jsonToTextTracks}.\r\n   *\r\n   * @param {Tech} tech\r\n   *        The tech object to query\r\n   *\r\n   * @return {Array}\r\n   *         A serializable javascript representation of the {@link Tech}s\r\n   *         {@link TextTrackList}.\r\n   */\r\n  const textTracksToJson = function (tech) {\r\n    const trackEls = tech.$$('track');\r\n    const trackObjs = Array.prototype.map.call(trackEls, t => t.track);\r\n    const tracks = Array.prototype.map.call(trackEls, function (trackEl) {\r\n      const json = trackToJson_(trackEl.track);\r\n      if (trackEl.src) {\r\n        json.src = trackEl.src;\r\n      }\r\n      return json;\r\n    });\r\n    return tracks.concat(Array.prototype.filter.call(tech.textTracks(), function (track) {\r\n      return trackObjs.indexOf(track) === -1;\r\n    }).map(trackToJson_));\r\n  };\r\n\r\n  /**\r\n   * Create a set of remote {@link TextTrack}s on a {@link Tech} based on an array of javascript\r\n   * object {@link TextTrack} representations.\r\n   *\r\n   * @param {Array} json\r\n   *        An array of `TextTrack` representation objects, like those that would be\r\n   *        produced by `textTracksToJson`.\r\n   *\r\n   * @param {Tech} tech\r\n   *        The `Tech` to create the `TextTrack`s on.\r\n   */\r\n  const jsonToTextTracks = function (json, tech) {\r\n    json.forEach(function (track) {\r\n      const addedTrack = tech.addRemoteTextTrack(track).track;\r\n      if (!track.src && track.cues) {\r\n        track.cues.forEach(cue => addedTrack.addCue(cue));\r\n      }\r\n    });\r\n    return tech.textTracks();\r\n  };\r\n  var textTrackConverter = {\r\n    textTracksToJson,\r\n    jsonToTextTracks,\r\n    trackToJson_\r\n  };\r\n\r\n  /**\r\n   * @file modal-dialog.js\r\n   */\r\n\r\n  /** @import Player from './player' */\r\n  /** @import { ContentDescriptor } from './utils/dom' */\r\n\r\n  const MODAL_CLASS_NAME = 'vjs-modal-dialog';\r\n\r\n  /**\r\n   * The `ModalDialog` displays over the video and its controls, which blocks\r\n   * interaction with the player until it is closed.\r\n   *\r\n   * Modal dialogs include a \"Close\" button and will close when that button\r\n   * is activated - or when ESC is pressed anywhere.\r\n   *\r\n   * @extends Component\r\n   */\r\n  class ModalDialog extends Component$1 {\r\n    /**\r\n     * Creates an instance of this class.\r\n     *\r\n     * @param {Player} player\r\n     *        The `Player` that this class should be attached to.\r\n     *\r\n     * @param {Object} [options]\r\n     *        The key/value store of player options.\r\n     *\r\n     * @param {ContentDescriptor} [options.content=undefined]\r\n     *        Provide customized content for this modal.\r\n     *\r\n     * @param {string} [options.description]\r\n     *        A text description for the modal, primarily for accessibility.\r\n     *\r\n     * @param {boolean} [options.fillAlways=false]\r\n     *        Normally, modals are automatically filled only the first time\r\n     *        they open. This tells the modal to refresh its content\r\n     *        every time it opens.\r\n     *\r\n     * @param {string} [options.label]\r\n     *        A text label for the modal, primarily for accessibility.\r\n     *\r\n     * @param {boolean} [options.pauseOnOpen=true]\r\n     *        If `true`, playback will will be paused if playing when\r\n     *        the modal opens, and resumed when it closes.\r\n     *\r\n     * @param {boolean} [options.temporary=true]\r\n     *        If `true`, the modal can only be opened once; it will be\r\n     *        disposed as soon as it's closed.\r\n     *\r\n     * @param {boolean} [options.uncloseable=false]\r\n     *        If `true`, the user will not be able to close the modal\r\n     *        through the UI in the normal ways. Programmatic closing is\r\n     *        still possible.\r\n     */\r\n    constructor(player, options) {\r\n      super(player, options);\r\n      this.handleKeyDown_ = e => this.handleKeyDown(e);\r\n      this.close_ = e => this.close(e);\r\n      this.opened_ = this.hasBeenOpened_ = this.hasBeenFilled_ = false;\r\n      this.closeable(!this.options_.uncloseable);\r\n      this.content(this.options_.content);\r\n\r\n      // Make sure the contentEl is defined AFTER any children are initialized\r\n      // because we only want the contents of the modal in the contentEl\r\n      // (not the UI elements like the close button).\r\n      this.contentEl_ = createEl('div', {\r\n        className: `${MODAL_CLASS_NAME}-content`\r\n      }, {\r\n        role: 'document'\r\n      });\r\n      this.descEl_ = createEl('p', {\r\n        className: `${MODAL_CLASS_NAME}-description vjs-control-text`,\r\n        id: this.el().getAttribute('aria-describedby')\r\n      });\r\n      textContent(this.descEl_, this.description());\r\n      this.el_.appendChild(this.descEl_);\r\n      this.el_.appendChild(this.contentEl_);\r\n    }\r\n\r\n    /**\r\n     * Create the `ModalDialog`'s DOM element\r\n     *\r\n     * @return {Element}\r\n     *         The DOM element that gets created.\r\n     */\r\n    createEl() {\r\n      return super.createEl('div', {\r\n        className: this.buildCSSClass(),\r\n        tabIndex: -1\r\n      }, {\r\n        'aria-describedby': `${this.id()}_description`,\r\n        'aria-hidden': 'true',\r\n        'aria-label': this.label(),\r\n        'role': 'dialog',\r\n        'aria-live': 'polite'\r\n      });\r\n    }\r\n    dispose() {\r\n      this.contentEl_ = null;\r\n      this.descEl_ = null;\r\n      this.previouslyActiveEl_ = null;\r\n      super.dispose();\r\n    }\r\n\r\n    /**\r\n     * Builds the default DOM `className`.\r\n     *\r\n     * @return {string}\r\n     *         The DOM `className` for this object.\r\n     */\r\n    buildCSSClass() {\r\n      return `${MODAL_CLASS_NAME} vjs-hidden ${super.buildCSSClass()}`;\r\n    }\r\n\r\n    /**\r\n     * Returns the label string for this modal. Primarily used for accessibility.\r\n     *\r\n     * @return {string}\r\n     *         the localized or raw label of this modal.\r\n     */\r\n    label() {\r\n      return this.localize(this.options_.label || 'Modal Window');\r\n    }\r\n\r\n    /**\r\n     * Returns the description string for this modal. Primarily used for\r\n     * accessibility.\r\n     *\r\n     * @return {string}\r\n     *         The localized or raw description of this modal.\r\n     */\r\n    description() {\r\n      let desc = this.options_.description || this.localize('This is a modal window.');\r\n\r\n      // Append a universal closeability message if the modal is closeable.\r\n      if (this.closeable()) {\r\n        desc += ' ' + this.localize('This modal can be closed by pressing the Escape key or activating the close button.');\r\n      }\r\n      return desc;\r\n    }\r\n\r\n    /**\r\n     * Opens the modal.\r\n     *\r\n     * @fires ModalDialog#beforemodalopen\r\n     * @fires ModalDialog#modalopen\r\n     */\r\n    open() {\r\n      if (this.opened_) {\r\n        if (this.options_.fillAlways) {\r\n          this.fill();\r\n        }\r\n        return;\r\n      }\r\n      const player = this.player();\r\n\r\n      /**\r\n        * Fired just before a `ModalDialog` is opened.\r\n        *\r\n        * @event ModalDialog#beforemodalopen\r\n        * @type {Event}\r\n        */\r\n      this.trigger('beforemodalopen');\r\n      this.opened_ = true;\r\n\r\n      // Fill content if the modal has never opened before and\r\n      // never been filled.\r\n      if (this.options_.fillAlways || !this.hasBeenOpened_ && !this.hasBeenFilled_) {\r\n        this.fill();\r\n      }\r\n\r\n      // If the player was playing, pause it and take note of its previously\r\n      // playing state.\r\n      this.wasPlaying_ = !player.paused();\r\n      if (this.options_.pauseOnOpen && this.wasPlaying_) {\r\n        player.pause();\r\n      }\r\n      this.on('keydown', this.handleKeyDown_);\r\n\r\n      // Hide controls and note if they were enabled.\r\n      this.hadControls_ = player.controls();\r\n      player.controls(false);\r\n      this.show();\r\n      this.conditionalFocus_();\r\n      this.el().setAttribute('aria-hidden', 'false');\r\n\r\n      /**\r\n        * Fired just after a `ModalDialog` is opened.\r\n        *\r\n        * @event ModalDialog#modalopen\r\n        * @type {Event}\r\n        */\r\n      this.trigger('modalopen');\r\n      this.hasBeenOpened_ = true;\r\n    }\r\n\r\n    /**\r\n     * If the `ModalDialog` is currently open or closed.\r\n     *\r\n     * @param  {boolean} [value]\r\n     *         If given, it will open (`true`) or close (`false`) the modal.\r\n     *\r\n     * @return {boolean}\r\n     *         the current open state of the modaldialog\r\n     */\r\n    opened(value) {\r\n      if (typeof value === 'boolean') {\r\n        this[value ? 'open' : 'close']();\r\n      }\r\n      return this.opened_;\r\n    }\r\n\r\n    /**\r\n     * Closes the modal, does nothing if the `ModalDialog` is\r\n     * not open.\r\n     *\r\n     * @fires ModalDialog#beforemodalclose\r\n     * @fires ModalDialog#modalclose\r\n     */\r\n    close() {\r\n      if (!this.opened_) {\r\n        return;\r\n      }\r\n      const player = this.player();\r\n\r\n      /**\r\n        * Fired just before a `ModalDialog` is closed.\r\n        *\r\n        * @event ModalDialog#beforemodalclose\r\n        * @type {Event}\r\n        */\r\n      this.trigger('beforemodalclose');\r\n      this.opened_ = false;\r\n      if (this.wasPlaying_ && this.options_.pauseOnOpen) {\r\n        player.play();\r\n      }\r\n      this.off('keydown', this.handleKeyDown_);\r\n      if (this.hadControls_) {\r\n        player.controls(true);\r\n      }\r\n      this.hide();\r\n      this.el().setAttribute('aria-hidden', 'true');\r\n\r\n      /**\r\n        * Fired just after a `ModalDialog` is closed.\r\n        *\r\n        * @event ModalDialog#modalclose\r\n        * @type {Event}\r\n        *\r\n        * @property {boolean} [bubbles=true]\r\n        */\r\n      this.trigger({\r\n        type: 'modalclose',\r\n        bubbles: true\r\n      });\r\n      this.conditionalBlur_();\r\n      if (this.options_.temporary) {\r\n        this.dispose();\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Check to see if the `ModalDialog` is closeable via the UI.\r\n     *\r\n     * @param  {boolean} [value]\r\n     *         If given as a boolean, it will set the `closeable` option.\r\n     *\r\n     * @return {boolean}\r\n     *         Returns the final value of the closable option.\r\n     */\r\n    closeable(value) {\r\n      if (typeof value === 'boolean') {\r\n        const closeable = this.closeable_ = !!value;\r\n        let close = this.getChild('closeButton');\r\n\r\n        // If this is being made closeable and has no close button, add one.\r\n        if (closeable && !close) {\r\n          // The close button should be a child of the modal - not its\r\n          // content element, so temporarily change the content element.\r\n          const temp = this.contentEl_;\r\n          this.contentEl_ = this.el_;\r\n          close = this.addChild('closeButton', {\r\n            controlText: 'Close Modal Dialog'\r\n          });\r\n          this.contentEl_ = temp;\r\n          this.on(close, 'close', this.close_);\r\n        }\r\n\r\n        // If this is being made uncloseable and has a close button, remove it.\r\n        if (!closeable && close) {\r\n          this.off(close, 'close', this.close_);\r\n          this.removeChild(close);\r\n          close.dispose();\r\n        }\r\n      }\r\n      return this.closeable_;\r\n    }\r\n\r\n    /**\r\n     * Fill the modal's content element with the modal's \"content\" option.\r\n     * The content element will be emptied before this change takes place.\r\n     */\r\n    fill() {\r\n      this.fillWith(this.content());\r\n    }\r\n\r\n    /**\r\n     * Fill the modal's content element with arbitrary content.\r\n     * The content element will be emptied before this change takes place.\r\n     *\r\n     * @fires ModalDialog#beforemodalfill\r\n     * @fires ModalDialog#modalfill\r\n     *\r\n     * @param {ContentDescriptor} [content]\r\n     *        The same rules apply to this as apply to the `content` option.\r\n     */\r\n    fillWith(content) {\r\n      const contentEl = this.contentEl();\r\n      const parentEl = contentEl.parentNode;\r\n      const nextSiblingEl = contentEl.nextSibling;\r\n\r\n      /**\r\n        * Fired just before a `ModalDialog` is filled with content.\r\n        *\r\n        * @event ModalDialog#beforemodalfill\r\n        * @type {Event}\r\n        */\r\n      this.trigger('beforemodalfill');\r\n      this.hasBeenFilled_ = true;\r\n\r\n      // Detach the content element from the DOM before performing\r\n      // manipulation to avoid modifying the live DOM multiple times.\r\n      parentEl.removeChild(contentEl);\r\n      this.empty();\r\n      insertContent(contentEl, content);\r\n      /**\r\n       * Fired just after a `ModalDialog` is filled with content.\r\n       *\r\n       * @event ModalDialog#modalfill\r\n       * @type {Event}\r\n       */\r\n      this.trigger('modalfill');\r\n\r\n      // Re-inject the re-filled content element.\r\n      if (nextSiblingEl) {\r\n        parentEl.insertBefore(contentEl, nextSiblingEl);\r\n      } else {\r\n        parentEl.appendChild(contentEl);\r\n      }\r\n\r\n      // make sure that the close button is last in the dialog DOM\r\n      const closeButton = this.getChild('closeButton');\r\n      if (closeButton) {\r\n        parentEl.appendChild(closeButton.el_);\r\n      }\r\n\r\n      /**\r\n       * Fired after `ModalDialog` is re-filled with content & close button is appended.\r\n       *\r\n       * @event ModalDialog#aftermodalfill\r\n       * @type {Event}\r\n       */\r\n      this.trigger('aftermodalfill');\r\n    }\r\n\r\n    /**\r\n     * Empties the content element. This happens anytime the modal is filled.\r\n     *\r\n     * @fires ModalDialog#beforemodalempty\r\n     * @fires ModalDialog#modalempty\r\n     */\r\n    empty() {\r\n      /**\r\n      * Fired just before a `ModalDialog` is emptied.\r\n      *\r\n      * @event ModalDialog#beforemodalempty\r\n      * @type {Event}\r\n      */\r\n      this.trigger('beforemodalempty');\r\n      emptyEl(this.contentEl());\r\n\r\n      /**\r\n      * Fired just after a `ModalDialog` is emptied.\r\n      *\r\n      * @event ModalDialog#modalempty\r\n      * @type {Event}\r\n      */\r\n      this.trigger('modalempty');\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the modal content, which gets normalized before being\r\n     * rendered into the DOM.\r\n     *\r\n     * This does not update the DOM or fill the modal, but it is called during\r\n     * that process.\r\n     *\r\n     * @param  {ContentDescriptor} [value]\r\n     *         If defined, sets the internal content value to be used on the\r\n     *         next call(s) to `fill`. This value is normalized before being\r\n     *         inserted. To \"clear\" the internal content value, pass `null`.\r\n     *\r\n     * @return {ContentDescriptor}\r\n     *         The current content of the modal dialog\r\n     */\r\n    content(value) {\r\n      if (typeof value !== 'undefined') {\r\n        this.content_ = value;\r\n      }\r\n      return this.content_;\r\n    }\r\n\r\n    /**\r\n     * conditionally focus the modal dialog if focus was previously on the player.\r\n     *\r\n     * @private\r\n     */\r\n    conditionalFocus_() {\r\n      const activeEl = document.activeElement;\r\n      const playerEl = this.player_.el_;\r\n      this.previouslyActiveEl_ = null;\r\n      if (playerEl.contains(activeEl) || playerEl === activeEl) {\r\n        this.previouslyActiveEl_ = activeEl;\r\n        this.focus();\r\n      }\r\n    }\r\n\r\n    /**\r\n     * conditionally blur the element and refocus the last focused element\r\n     *\r\n     * @private\r\n     */\r\n    conditionalBlur_() {\r\n      if (this.previouslyActiveEl_) {\r\n        this.previouslyActiveEl_.focus();\r\n        this.previouslyActiveEl_ = null;\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Keydown handler. Attached when modal is focused.\r\n     *\r\n     * @listens keydown\r\n     */\r\n    handleKeyDown(event) {\r\n      /**\r\n       * Fired a custom keyDown event that bubbles.\r\n       *\r\n       * @event ModalDialog#modalKeydown\r\n       * @type {Event}\r\n       */\r\n      this.trigger({\r\n        type: 'modalKeydown',\r\n        originalEvent: event,\r\n        target: this,\r\n        bubbles: true\r\n      });\r\n      // Do not allow keydowns to reach out of the modal dialog.\r\n      event.stopPropagation();\r\n      if (event.key === 'Escape' && this.closeable()) {\r\n        event.preventDefault();\r\n        this.close();\r\n        return;\r\n      }\r\n\r\n      // exit early if it isn't a tab key\r\n      if (event.key !== 'Tab') {\r\n        return;\r\n      }\r\n      const focusableEls = this.focusableEls_();\r\n      const activeEl = this.el_.querySelector(':focus');\r\n      let focusIndex;\r\n      for (let i = 0; i < focusableEls.length; i++) {\r\n        if (activeEl === focusableEls[i]) {\r\n          focusIndex = i;\r\n          break;\r\n        }\r\n      }\r\n      if (document.activeElement === this.el_) {\r\n        focusIndex = 0;\r\n      }\r\n      if (event.shiftKey && focusIndex === 0) {\r\n        focusableEls[focusableEls.length - 1].focus();\r\n        event.preventDefault();\r\n      } else if (!event.shiftKey && focusIndex === focusableEls.length - 1) {\r\n        focusableEls[0].focus();\r\n        event.preventDefault();\r\n      }\r\n    }\r\n\r\n    /**\r\n     * get all focusable elements\r\n     *\r\n     * @private\r\n     */\r\n    focusableEls_() {\r\n      const allChildren = this.el_.querySelectorAll('*');\r\n      return Array.prototype.filter.call(allChildren, child => {\r\n        return (child instanceof window.HTMLAnchorElement || child instanceof window.HTMLAreaElement) && child.hasAttribute('href') || (child instanceof window.HTMLInputElement || child instanceof window.HTMLSelectElement || child instanceof window.HTMLTextAreaElement || child instanceof window.HTMLButtonElement) && !child.hasAttribute('disabled') || child instanceof window.HTMLIFrameElement || child instanceof window.HTMLObjectElement || child instanceof window.HTMLEmbedElement || child.hasAttribute('tabindex') && child.getAttribute('tabindex') !== -1 || child.hasAttribute('contenteditable');\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Default options for `ModalDialog` default options.\r\n   *\r\n   * @type {Object}\r\n   * @private\r\n   */\r\n  ModalDialog.prototype.options_ = {\r\n    pauseOnOpen: true,\r\n    temporary: true\r\n  };\r\n  Component$1.registerComponent('ModalDialog', ModalDialog);\r\n\r\n  /**\r\n   * @file track-list.js\r\n   */\r\n\r\n  /** @import Track from './track' */\r\n\r\n  /**\r\n   * Common functionaliy between {@link TextTrackList}, {@link AudioTrackList}, and\r\n   * {@link VideoTrackList}\r\n   *\r\n   * @extends EventTarget\r\n   */\r\n  class TrackList extends EventTarget$2 {\r\n    /**\r\n     * Create an instance of this class\r\n     *\r\n     * @param { Track[] } tracks\r\n     *        A list of tracks to initialize the list with.\r\n     *\r\n     * @abstract\r\n     */\r\n    constructor(tracks = []) {\r\n      super();\r\n      this.tracks_ = [];\r\n\r\n      /**\r\n       * @memberof TrackList\r\n       * @member {number} length\r\n       *         The current number of `Track`s in the this Trackist.\r\n       * @instance\r\n       */\r\n      Object.defineProperty(this, 'length', {\r\n        get() {\r\n          return this.tracks_.length;\r\n        }\r\n      });\r\n      for (let i = 0; i < tracks.length; i++) {\r\n        this.addTrack(tracks[i]);\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Add a {@link Track} to the `TrackList`\r\n     *\r\n     * @param {Track} track\r\n     *        The audio, video, or text track to add to the list.\r\n     *\r\n     * @fires TrackList#addtrack\r\n     */\r\n    addTrack(track) {\r\n      const index = this.tracks_.length;\r\n      if (!('' + index in this)) {\r\n        Object.defineProperty(this, index, {\r\n          get() {\r\n            return this.tracks_[index];\r\n          }\r\n        });\r\n      }\r\n\r\n      // Do not add duplicate tracks\r\n      if (this.tracks_.indexOf(track) === -1) {\r\n        this.tracks_.push(track);\r\n        /**\r\n         * Triggered when a track is added to a track list.\r\n         *\r\n         * @event TrackList#addtrack\r\n         * @type {Event}\r\n         * @property {Track} track\r\n         *           A reference to track that was added.\r\n         */\r\n        this.trigger({\r\n          track,\r\n          type: 'addtrack',\r\n          target: this\r\n        });\r\n      }\r\n\r\n      /**\r\n       * Triggered when a track label is changed.\r\n       *\r\n       * @event TrackList#addtrack\r\n       * @type {Event}\r\n       * @property {Track} track\r\n       *           A reference to track that was added.\r\n       */\r\n      track.labelchange_ = () => {\r\n        this.trigger({\r\n          track,\r\n          type: 'labelchange',\r\n          target: this\r\n        });\r\n      };\r\n      if (isEvented(track)) {\r\n        track.addEventListener('labelchange', track.labelchange_);\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Remove a {@link Track} from the `TrackList`\r\n     *\r\n     * @param {Track} rtrack\r\n     *        The audio, video, or text track to remove from the list.\r\n     *\r\n     * @fires TrackList#removetrack\r\n     */\r\n    removeTrack(rtrack) {\r\n      let track;\r\n      for (let i = 0, l = this.length; i < l; i++) {\r\n        if (this[i] === rtrack) {\r\n          track = this[i];\r\n          if (track.off) {\r\n            track.off();\r\n          }\r\n          this.tracks_.splice(i, 1);\r\n          break;\r\n        }\r\n      }\r\n      if (!track) {\r\n        return;\r\n      }\r\n\r\n      /**\r\n       * Triggered when a track is removed from track list.\r\n       *\r\n       * @event TrackList#removetrack\r\n       * @type {Event}\r\n       * @property {Track} track\r\n       *           A reference to track that was removed.\r\n       */\r\n      this.trigger({\r\n        track,\r\n        type: 'removetrack',\r\n        target: this\r\n      });\r\n    }\r\n\r\n    /**\r\n     * Get a Track from the TrackList by a tracks id\r\n     *\r\n     * @param {string} id - the id of the track to get\r\n     * @method getTrackById\r\n     * @return {Track}\r\n     * @private\r\n     */\r\n    getTrackById(id) {\r\n      let result = null;\r\n      for (let i = 0, l = this.length; i < l; i++) {\r\n        const track = this[i];\r\n        if (track.id === id) {\r\n          result = track;\r\n          break;\r\n        }\r\n      }\r\n      return result;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Triggered when a different track is selected/enabled.\r\n   *\r\n   * @event TrackList#change\r\n   * @type {Event}\r\n   */\r\n\r\n  /**\r\n   * Events that can be called with on + eventName. See {@link EventHandler}.\r\n   *\r\n   * @property {Object} TrackList#allowedEvents_\r\n   * @protected\r\n   */\r\n  TrackList.prototype.allowedEvents_ = {\r\n    change: 'change',\r\n    addtrack: 'addtrack',\r\n    removetrack: 'removetrack',\r\n    labelchange: 'labelchange'\r\n  };\r\n\r\n  // emulate attribute EventHandler support to allow for feature detection\r\n  for (const event in TrackList.prototype.allowedEvents_) {\r\n    TrackList.prototype['on' + event] = null;\r\n  }\r\n\r\n  /**\r\n   * @file audio-track-list.js\r\n   */\r\n\r\n  /** @import AudioTrack from './audio-track' */\r\n\r\n  /**\r\n   * Anywhere we call this function we diverge from the spec\r\n   * as we only support one enabled audiotrack at a time\r\n   *\r\n   * @param {AudioTrackList} list\r\n   *        list to work on\r\n   *\r\n   * @param {AudioTrack} track\r\n   *        The track to skip\r\n   *\r\n   * @private\r\n   */\r\n  const disableOthers$1 = function (list, track) {\r\n    for (let i = 0; i < list.length; i++) {\r\n      if (!Object.keys(list[i]).length || track.id === list[i].id) {\r\n        continue;\r\n      }\r\n      // another audio track is enabled, disable it\r\n      list[i].enabled = false;\r\n    }\r\n  };\r\n\r\n  /**\r\n   * The current list of {@link AudioTrack} for a media file.\r\n   *\r\n   * @see [Spec]{@link https://html.spec.whatwg.org/multipage/embedded-content.html#audiotracklist}\r\n   * @extends TrackList\r\n   */\r\n  class AudioTrackList extends TrackList {\r\n    /**\r\n     * Create an instance of this class.\r\n     *\r\n     * @param {AudioTrack[]} [tracks=[]]\r\n     *        A list of `AudioTrack` to instantiate the list with.\r\n     */\r\n    constructor(tracks = []) {\r\n      // make sure only 1 track is enabled\r\n      // sorted from last index to first index\r\n      for (let i = tracks.length - 1; i >= 0; i--) {\r\n        if (tracks[i].enabled) {\r\n          disableOthers$1(tracks, tracks[i]);\r\n          break;\r\n        }\r\n      }\r\n      super(tracks);\r\n      this.changing_ = false;\r\n    }\r\n\r\n    /**\r\n     * Add an {@link AudioTrack} to the `AudioTrackList`.\r\n     *\r\n     * @param {AudioTrack} track\r\n     *        The AudioTrack to add to the list\r\n     *\r\n     * @fires TrackList#addtrack\r\n     */\r\n    addTrack(track) {\r\n      if (track.enabled) {\r\n        disableOthers$1(this, track);\r\n      }\r\n      super.addTrack(track);\r\n      // native tracks don't have this\r\n      if (!track.addEventListener) {\r\n        return;\r\n      }\r\n      track.enabledChange_ = () => {\r\n        // when we are disabling other tracks (since we don't support\r\n        // more than one track at a time) we will set changing_\r\n        // to true so that we don't trigger additional change events\r\n        if (this.changing_) {\r\n          return;\r\n        }\r\n        this.changing_ = true;\r\n        disableOthers$1(this, track);\r\n        this.changing_ = false;\r\n        this.trigger('change');\r\n      };\r\n\r\n      /**\r\n       * @listens AudioTrack#enabledchange\r\n       * @fires TrackList#change\r\n       */\r\n      track.addEventListener('enabledchange', track.enabledChange_);\r\n    }\r\n    removeTrack(rtrack) {\r\n      super.removeTrack(rtrack);\r\n      if (rtrack.removeEventListener && rtrack.enabledChange_) {\r\n        rtrack.removeEventListener('enabledchange', rtrack.enabledChange_);\r\n        rtrack.enabledChange_ = null;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @file video-track-list.js\r\n   */\r\n\r\n  /** @import VideoTrack from './video-track' */\r\n\r\n  /**\r\n   * Un-select all other {@link VideoTrack}s that are selected.\r\n   *\r\n   * @param {VideoTrackList} list\r\n   *        list to work on\r\n   *\r\n   * @param {VideoTrack} track\r\n   *        The track to skip\r\n   *\r\n   * @private\r\n   */\r\n  const disableOthers = function (list, track) {\r\n    for (let i = 0; i < list.length; i++) {\r\n      if (!Object.keys(list[i]).length || track.id === list[i].id) {\r\n        continue;\r\n      }\r\n      // another video track is enabled, disable it\r\n      list[i].selected = false;\r\n    }\r\n  };\r\n\r\n  /**\r\n   * The current list of {@link VideoTrack} for a video.\r\n   *\r\n   * @see [Spec]{@link https://html.spec.whatwg.org/multipage/embedded-content.html#videotracklist}\r\n   * @extends TrackList\r\n   */\r\n  class VideoTrackList extends TrackList {\r\n    /**\r\n     * Create an instance of this class.\r\n     *\r\n     * @param {VideoTrack[]} [tracks=[]]\r\n     *        A list of `VideoTrack` to instantiate the list with.\r\n     */\r\n    constructor(tracks = []) {\r\n      // make sure only 1 track is enabled\r\n      // sorted from last index to first index\r\n      for (let i = tracks.length - 1; i >= 0; i--) {\r\n        if (tracks[i].selected) {\r\n          disableOthers(tracks, tracks[i]);\r\n          break;\r\n        }\r\n      }\r\n      super(tracks);\r\n      this.changing_ = false;\r\n\r\n      /**\r\n       * @member {number} VideoTrackList#selectedIndex\r\n       *         The current index of the selected {@link VideoTrack`}.\r\n       */\r\n      Object.defineProperty(this, 'selectedIndex', {\r\n        get() {\r\n          for (let i = 0; i < this.length; i++) {\r\n            if (this[i].selected) {\r\n              return i;\r\n            }\r\n          }\r\n          return -1;\r\n        },\r\n        set() {}\r\n      });\r\n    }\r\n\r\n    /**\r\n     * Add a {@link VideoTrack} to the `VideoTrackList`.\r\n     *\r\n     * @param {VideoTrack} track\r\n     *        The VideoTrack to add to the list\r\n     *\r\n     * @fires TrackList#addtrack\r\n     */\r\n    addTrack(track) {\r\n      if (track.selected) {\r\n        disableOthers(this, track);\r\n      }\r\n      super.addTrack(track);\r\n      // native tracks don't have this\r\n      if (!track.addEventListener) {\r\n        return;\r\n      }\r\n      track.selectedChange_ = () => {\r\n        if (this.changing_) {\r\n          return;\r\n        }\r\n        this.changing_ = true;\r\n        disableOthers(this, track);\r\n        this.changing_ = false;\r\n        this.trigger('change');\r\n      };\r\n\r\n      /**\r\n       * @listens VideoTrack#selectedchange\r\n       * @fires TrackList#change\r\n       */\r\n      track.addEventListener('selectedchange', track.selectedChange_);\r\n    }\r\n    removeTrack(rtrack) {\r\n      super.removeTrack(rtrack);\r\n      if (rtrack.removeEventListener && rtrack.selectedChange_) {\r\n        rtrack.removeEventListener('selectedchange', rtrack.selectedChange_);\r\n        rtrack.selectedChange_ = null;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @file text-track-list.js\r\n   */\r\n\r\n  /** @import TextTrack from './text-track' */\r\n\r\n  /**\r\n   * The current list of {@link TextTrack} for a media file.\r\n   *\r\n   * @see [Spec]{@link https://html.spec.whatwg.org/multipage/embedded-content.html#texttracklist}\r\n   * @extends TrackList\r\n   */\r\n  class TextTrackList extends TrackList {\r\n    /**\r\n     * Add a {@link TextTrack} to the `TextTrackList`\r\n     *\r\n     * @param {TextTrack} track\r\n     *        The text track to add to the list.\r\n     *\r\n     * @fires TrackList#addtrack\r\n     */\r\n    addTrack(track) {\r\n      super.addTrack(track);\r\n      if (!this.queueChange_) {\r\n        this.queueChange_ = () => this.queueTrigger('change');\r\n      }\r\n      if (!this.triggerSelectedlanguagechange) {\r\n        this.triggerSelectedlanguagechange_ = () => this.trigger('selectedlanguagechange');\r\n      }\r\n\r\n      /**\r\n       * @listens TextTrack#modechange\r\n       * @fires TrackList#change\r\n       */\r\n      track.addEventListener('modechange', this.queueChange_);\r\n      const nonLanguageTextTrackKind = ['metadata', 'chapters'];\r\n      if (nonLanguageTextTrackKind.indexOf(track.kind) === -1) {\r\n        track.addEventListener('modechange', this.triggerSelectedlanguagechange_);\r\n      }\r\n    }\r\n    removeTrack(rtrack) {\r\n      super.removeTrack(rtrack);\r\n\r\n      // manually remove the event handlers we added\r\n      if (rtrack.removeEventListener) {\r\n        if (this.queueChange_) {\r\n          rtrack.removeEventListener('modechange', this.queueChange_);\r\n        }\r\n        if (this.selectedlanguagechange_) {\r\n          rtrack.removeEventListener('modechange', this.triggerSelectedlanguagechange_);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @file html-track-element-list.js\r\n   */\r\n\r\n  /**\r\n   * The current list of {@link HtmlTrackElement}s.\r\n   */\r\n  class HtmlTrackElementList {\r\n    /**\r\n     * Create an instance of this class.\r\n     *\r\n     * @param {HtmlTrackElement[]} [tracks=[]]\r\n     *        A list of `HtmlTrackElement` to instantiate the list with.\r\n     */\r\n    constructor(trackElements = []) {\r\n      this.trackElements_ = [];\r\n\r\n      /**\r\n       * @memberof HtmlTrackElementList\r\n       * @member {number} length\r\n       *         The current number of `Track`s in the this Trackist.\r\n       * @instance\r\n       */\r\n      Object.defineProperty(this, 'length', {\r\n        get() {\r\n          return this.trackElements_.length;\r\n        }\r\n      });\r\n      for (let i = 0, length = trackElements.length; i < length; i++) {\r\n        this.addTrackElement_(trackElements[i]);\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Add an {@link HtmlTrackElement} to the `HtmlTrackElementList`\r\n     *\r\n     * @param {HtmlTrackElement} trackElement\r\n     *        The track element to add to the list.\r\n     *\r\n     * @private\r\n     */\r\n    addTrackElement_(trackElement) {\r\n      const index = this.trackElements_.length;\r\n      if (!('' + index in this)) {\r\n        Object.defineProperty(this, index, {\r\n          get() {\r\n            return this.trackElements_[index];\r\n          }\r\n        });\r\n      }\r\n\r\n      // Do not add duplicate elements\r\n      if (this.trackElements_.indexOf(trackElement) === -1) {\r\n        this.trackElements_.push(trackElement);\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Get an {@link HtmlTrackElement} from the `HtmlTrackElementList` given an\r\n     * {@link TextTrack}.\r\n     *\r\n     * @param {TextTrack} track\r\n     *        The track associated with a track element.\r\n     *\r\n     * @return {HtmlTrackElement|undefined}\r\n     *         The track element that was found or undefined.\r\n     *\r\n     * @private\r\n     */\r\n    getTrackElementByTrack_(track) {\r\n      let trackElement_;\r\n      for (let i = 0, length = this.trackElements_.length; i < length; i++) {\r\n        if (track === this.trackElements_[i].track) {\r\n          trackElement_ = this.trackElements_[i];\r\n          break;\r\n        }\r\n      }\r\n      return trackElement_;\r\n    }\r\n\r\n    /**\r\n     * Remove a {@link HtmlTrackElement} from the `HtmlTrackElementList`\r\n     *\r\n     * @param {HtmlTrackElement} trackElement\r\n     *        The track element to remove from the list.\r\n     *\r\n     * @private\r\n     */\r\n    removeTrackElement_(trackElement) {\r\n      for (let i = 0, length = this.trackElements_.length; i < length; i++) {\r\n        if (trackElement === this.trackElements_[i]) {\r\n          if (this.trackElements_[i].track && typeof this.trackElements_[i].track.off === 'function') {\r\n            this.trackElements_[i].track.off();\r\n          }\r\n          if (typeof this.trackElements_[i].off === 'function') {\r\n            this.trackElements_[i].off();\r\n          }\r\n          this.trackElements_.splice(i, 1);\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @file text-track-cue-list.js\r\n   */\r\n\r\n  /**\r\n   * @typedef {Object} TextTrackCueList~TextTrackCue\r\n   *\r\n   * @property {string} id\r\n   *           The unique id for this text track cue\r\n   *\r\n   * @property {number} startTime\r\n   *           The start time for this text track cue\r\n   *\r\n   * @property {number} endTime\r\n   *           The end time for this text track cue\r\n   *\r\n   * @property {boolean} pauseOnExit\r\n   *           Pause when the end time is reached if true.\r\n   *\r\n   * @see [Spec]{@link https://html.spec.whatwg.org/multipage/embedded-content.html#texttrackcue}\r\n   */\r\n\r\n  /**\r\n   * A List of TextTrackCues.\r\n   *\r\n   * @see [Spec]{@link https://html.spec.whatwg.org/multipage/embedded-content.html#texttrackcuelist}\r\n   */\r\n  class TextTrackCueList {\r\n    /**\r\n     * Create an instance of this class..\r\n     *\r\n     * @param {Array} cues\r\n     *        A list of cues to be initialized with\r\n     */\r\n    constructor(cues) {\r\n      TextTrackCueList.prototype.setCues_.call(this, cues);\r\n\r\n      /**\r\n       * @memberof TextTrackCueList\r\n       * @member {number} length\r\n       *         The current number of `TextTrackCue`s in the TextTrackCueList.\r\n       * @instance\r\n       */\r\n      Object.defineProperty(this, 'length', {\r\n        get() {\r\n          return this.length_;\r\n        }\r\n      });\r\n    }\r\n\r\n    /**\r\n     * A setter for cues in this list. Creates getters\r\n     * an an index for the cues.\r\n     *\r\n     * @param {Array} cues\r\n     *        An array of cues to set\r\n     *\r\n     * @private\r\n     */\r\n    setCues_(cues) {\r\n      const oldLength = this.length || 0;\r\n      let i = 0;\r\n      const l = cues.length;\r\n      this.cues_ = cues;\r\n      this.length_ = cues.length;\r\n      const defineProp = function (index) {\r\n        if (!('' + index in this)) {\r\n          Object.defineProperty(this, '' + index, {\r\n            get() {\r\n              return this.cues_[index];\r\n            }\r\n          });\r\n        }\r\n      };\r\n      if (oldLength < l) {\r\n        i = oldLength;\r\n        for (; i < l; i++) {\r\n          defineProp.call(this, i);\r\n        }\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Get a `TextTrackCue` that is currently in the `TextTrackCueList` by id.\r\n     *\r\n     * @param {string} id\r\n     *        The id of the cue that should be searched for.\r\n     *\r\n     * @return {TextTrackCueList~TextTrackCue|null}\r\n     *         A single cue or null if none was found.\r\n     */\r\n    getCueById(id) {\r\n      let result = null;\r\n      for (let i = 0, l = this.length; i < l; i++) {\r\n        const cue = this[i];\r\n        if (cue.id === id) {\r\n          result = cue;\r\n          break;\r\n        }\r\n      }\r\n      return result;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @file track-kinds.js\r\n   */\r\n\r\n  /**\r\n   * All possible `VideoTrackKind`s\r\n   *\r\n   * @see https://html.spec.whatwg.org/multipage/embedded-content.html#dom-videotrack-kind\r\n   * @typedef VideoTrack~Kind\r\n   * @enum\r\n   */\r\n  const VideoTrackKind = {\r\n    alternative: 'alternative',\r\n    captions: 'captions',\r\n    main: 'main',\r\n    sign: 'sign',\r\n    subtitles: 'subtitles',\r\n    commentary: 'commentary'\r\n  };\r\n\r\n  /**\r\n   * All possible `AudioTrackKind`s\r\n   *\r\n   * @see https://html.spec.whatwg.org/multipage/embedded-content.html#dom-audiotrack-kind\r\n   * @typedef AudioTrack~Kind\r\n   * @enum\r\n   */\r\n  const AudioTrackKind = {\r\n    'alternative': 'alternative',\r\n    'descriptions': 'descriptions',\r\n    'main': 'main',\r\n    'main-desc': 'main-desc',\r\n    'translation': 'translation',\r\n    'commentary': 'commentary'\r\n  };\r\n\r\n  /**\r\n   * All possible `TextTrackKind`s\r\n   *\r\n   * @see https://html.spec.whatwg.org/multipage/embedded-content.html#dom-texttrack-kind\r\n   * @typedef TextTrack~Kind\r\n   * @enum\r\n   */\r\n  const TextTrackKind = {\r\n    subtitles: 'subtitles',\r\n    captions: 'captions',\r\n    descriptions: 'descriptions',\r\n    chapters: 'chapters',\r\n    metadata: 'metadata'\r\n  };\r\n\r\n  /**\r\n   * All possible `TextTrackMode`s\r\n   *\r\n   * @see https://html.spec.whatwg.org/multipage/embedded-content.html#texttrackmode\r\n   * @typedef TextTrack~Mode\r\n   * @enum\r\n   */\r\n  const TextTrackMode = {\r\n    disabled: 'disabled',\r\n    hidden: 'hidden',\r\n    showing: 'showing'\r\n  };\r\n\r\n  /**\r\n   * @file track.js\r\n   */\r\n\r\n  /**\r\n   * A Track class that contains all of the common functionality for {@link AudioTrack},\r\n   * {@link VideoTrack}, and {@link TextTrack}.\r\n   *\r\n   * > Note: This class should not be used directly\r\n   *\r\n   * @see {@link https://html.spec.whatwg.org/multipage/embedded-content.html}\r\n   * @extends EventTarget\r\n   * @abstract\r\n   */\r\n  class Track extends EventTarget$2 {\r\n    /**\r\n     * Create an instance of this class.\r\n     *\r\n     * @param {Object} [options={}]\r\n     *        Object of option names and values\r\n     *\r\n     * @param {string} [options.kind='']\r\n     *        A valid kind for the track type you are creating.\r\n     *\r\n     * @param {string} [options.id='vjs_track_' + Guid.newGUID()]\r\n     *        A unique id for this AudioTrack.\r\n     *\r\n     * @param {string} [options.label='']\r\n     *        The menu label for this track.\r\n     *\r\n     * @param {string} [options.language='']\r\n     *        A valid two character language code.\r\n     *\r\n     * @abstract\r\n     */\r\n    constructor(options = {}) {\r\n      super();\r\n      const trackProps = {\r\n        id: options.id || 'vjs_track_' + newGUID(),\r\n        kind: options.kind || '',\r\n        language: options.language || ''\r\n      };\r\n      let label = options.label || '';\r\n\r\n      /**\r\n       * @memberof Track\r\n       * @member {string} id\r\n       *         The id of this track. Cannot be changed after creation.\r\n       * @instance\r\n       *\r\n       * @readonly\r\n       */\r\n\r\n      /**\r\n       * @memberof Track\r\n       * @member {string} kind\r\n       *         The kind of track that this is. Cannot be changed after creation.\r\n       * @instance\r\n       *\r\n       * @readonly\r\n       */\r\n\r\n      /**\r\n       * @memberof Track\r\n       * @member {string} language\r\n       *         The two letter language code for this track. Cannot be changed after\r\n       *         creation.\r\n       * @instance\r\n       *\r\n       * @readonly\r\n       */\r\n\r\n      for (const key in trackProps) {\r\n        Object.defineProperty(this, key, {\r\n          get() {\r\n            return trackProps[key];\r\n          },\r\n          set() {}\r\n        });\r\n      }\r\n\r\n      /**\r\n       * @memberof Track\r\n       * @member {string} label\r\n       *         The label of this track. Cannot be changed after creation.\r\n       * @instance\r\n       *\r\n       * @fires Track#labelchange\r\n       */\r\n      Object.defineProperty(this, 'label', {\r\n        get() {\r\n          return label;\r\n        },\r\n        set(newLabel) {\r\n          if (newLabel !== label) {\r\n            label = newLabel;\r\n\r\n            /**\r\n             * An event that fires when label changes on this track.\r\n             *\r\n             * > Note: This is not part of the spec!\r\n             *\r\n             * @event Track#labelchange\r\n             * @type {Event}\r\n             */\r\n            this.trigger('labelchange');\r\n          }\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @file url.js\r\n   * @module url\r\n   */\r\n\r\n  /**\r\n   * Resolve and parse the elements of a URL.\r\n   *\r\n   * @function\r\n   * @param    {string} url\r\n   *           The url to parse\r\n   *\r\n   * @return   {URL}\r\n   *           An object of url details\r\n   */\r\n  const parseUrl = function (url) {\r\n    return new URL(url, document.baseURI);\r\n  };\r\n\r\n  /**\r\n   * Get absolute version of relative URL.\r\n   *\r\n   * @function\r\n   * @param    {string} url\r\n   *           URL to make absolute\r\n   *\r\n   * @return   {string}\r\n   *           Absolute URL\r\n   */\r\n  const getAbsoluteURL = function (url) {\r\n    return new URL(url, document.baseURI).href;\r\n  };\r\n\r\n  /**\r\n   * Returns the extension of the passed file name. It will return an empty string\r\n   * if passed an invalid path.\r\n   *\r\n   * @function\r\n   * @param    {string} path\r\n   *           The fileName path like '/path/to/file.mp4'\r\n   *\r\n   * @return  {string}\r\n   *           The extension in lower case or an empty string if no\r\n   *           extension could be found.\r\n   */\r\n  const getFileExtension = function (path) {\r\n    if (typeof path === 'string') {\r\n      const splitPathRe = /^(\\/?)([\\s\\S]*?)((?:\\.{1,2}|[^\\/]+?)(\\.([^\\.\\/\\?]+)))(?:[\\/]*|[\\?].*)$/;\r\n      const pathParts = splitPathRe.exec(path);\r\n      if (pathParts) {\r\n        return pathParts.pop().toLowerCase();\r\n      }\r\n    }\r\n    return '';\r\n  };\r\n\r\n  /**\r\n   * Returns whether the url passed is a cross domain request or not.\r\n   *\r\n   * @function\r\n   * @param    {string} url\r\n   *           The url to check.\r\n   *\r\n   * @param    {URL} [winLoc]\r\n   *           the domain to check the url against, defaults to window.location\r\n   *\r\n   * @return   {boolean}\r\n   *           Whether it is a cross domain request or not.\r\n   */\r\n  const isCrossOrigin = function (url, winLoc = window.location) {\r\n    return parseUrl(url).origin !== winLoc.origin;\r\n  };\r\n\r\n  var Url = /*#__PURE__*/Object.freeze({\r\n    __proto__: null,\r\n    parseUrl: parseUrl,\r\n    getAbsoluteURL: getAbsoluteURL,\r\n    getFileExtension: getFileExtension,\r\n    isCrossOrigin: isCrossOrigin\r\n  });\r\n\r\n  var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};\r\n\r\n  function unwrapExports (x) {\r\n  \treturn x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;\r\n  }\r\n\r\n  function createCommonjsModule(fn, module) {\r\n  \treturn module = { exports: {} }, fn(module, module.exports), module.exports;\r\n  }\r\n\r\n  var win;\r\n  if (typeof window !== \"undefined\") {\r\n    win = window;\r\n  } else if (typeof commonjsGlobal !== \"undefined\") {\r\n    win = commonjsGlobal;\r\n  } else if (typeof self !== \"undefined\") {\r\n    win = self;\r\n  } else {\r\n    win = {};\r\n  }\r\n  var window_1 = win;\r\n\r\n  var _extends_1 = createCommonjsModule(function (module) {\r\n    function _extends() {\r\n      return (module.exports = _extends = Object.assign ? Object.assign.bind() : function (n) {\r\n        for (var e = 1; e < arguments.length; e++) {\r\n          var t = arguments[e];\r\n          for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]);\r\n        }\r\n        return n;\r\n      }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports), _extends.apply(null, arguments);\r\n    }\r\n    module.exports = _extends, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\r\n  });\r\n  var _extends$1 = unwrapExports(_extends_1);\r\n\r\n  var isFunction_1 = isFunction;\r\n  var toString = Object.prototype.toString;\r\n  function isFunction(fn) {\r\n    if (!fn) {\r\n      return false;\r\n    }\r\n    var string = toString.call(fn);\r\n    return string === '[object Function]' || typeof fn === 'function' && string !== '[object RegExp]' || typeof window !== 'undefined' && (\r\n    // IE8 and below\r\n    fn === window.setTimeout || fn === window.alert || fn === window.confirm || fn === window.prompt);\r\n  }\r\n\r\n  function _createForOfIteratorHelperLoose(o, allowArrayLike) {\r\n    var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\r\n    if (it) return (it = it.call(o)).next.bind(it);\r\n    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\r\n      if (it) o = it;\r\n      var i = 0;\r\n      return function () {\r\n        if (i >= o.length) return {\r\n          done: true\r\n        };\r\n        return {\r\n          done: false,\r\n          value: o[i++]\r\n        };\r\n      };\r\n    }\r\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\r\n  }\r\n  function _unsupportedIterableToArray(o, minLen) {\r\n    if (!o) return;\r\n    if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\r\n    var n = Object.prototype.toString.call(o).slice(8, -1);\r\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\r\n    if (n === \"Map\" || n === \"Set\") return Array.from(o);\r\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\r\n  }\r\n  function _arrayLikeToArray(arr, len) {\r\n    if (len == null || len > arr.length) len = arr.length;\r\n    for (var i = 0, arr2 = new Array(len); i < len; i++) {\r\n      arr2[i] = arr[i];\r\n    }\r\n    return arr2;\r\n  }\r\n  var InterceptorsStorage = /*#__PURE__*/function () {\r\n    function InterceptorsStorage() {\r\n      this.typeToInterceptorsMap_ = new Map();\r\n      this.enabled_ = false;\r\n    }\r\n    var _proto = InterceptorsStorage.prototype;\r\n    _proto.getIsEnabled = function getIsEnabled() {\r\n      return this.enabled_;\r\n    };\r\n    _proto.enable = function enable() {\r\n      this.enabled_ = true;\r\n    };\r\n    _proto.disable = function disable() {\r\n      this.enabled_ = false;\r\n    };\r\n    _proto.reset = function reset() {\r\n      this.typeToInterceptorsMap_ = new Map();\r\n      this.enabled_ = false;\r\n    };\r\n    _proto.addInterceptor = function addInterceptor(type, interceptor) {\r\n      if (!this.typeToInterceptorsMap_.has(type)) {\r\n        this.typeToInterceptorsMap_.set(type, new Set());\r\n      }\r\n      var interceptorsSet = this.typeToInterceptorsMap_.get(type);\r\n      if (interceptorsSet.has(interceptor)) {\r\n        // already have this interceptor\r\n        return false;\r\n      }\r\n      interceptorsSet.add(interceptor);\r\n      return true;\r\n    };\r\n    _proto.removeInterceptor = function removeInterceptor(type, interceptor) {\r\n      var interceptorsSet = this.typeToInterceptorsMap_.get(type);\r\n      if (interceptorsSet && interceptorsSet.has(interceptor)) {\r\n        interceptorsSet.delete(interceptor);\r\n        return true;\r\n      }\r\n      return false;\r\n    };\r\n    _proto.clearInterceptorsByType = function clearInterceptorsByType(type) {\r\n      var interceptorsSet = this.typeToInterceptorsMap_.get(type);\r\n      if (!interceptorsSet) {\r\n        return false;\r\n      }\r\n      this.typeToInterceptorsMap_.delete(type);\r\n      this.typeToInterceptorsMap_.set(type, new Set());\r\n      return true;\r\n    };\r\n    _proto.clear = function clear() {\r\n      if (!this.typeToInterceptorsMap_.size) {\r\n        return false;\r\n      }\r\n      this.typeToInterceptorsMap_ = new Map();\r\n      return true;\r\n    };\r\n    _proto.getForType = function getForType(type) {\r\n      return this.typeToInterceptorsMap_.get(type) || new Set();\r\n    };\r\n    _proto.execute = function execute(type, payload) {\r\n      var interceptors = this.getForType(type);\r\n      for (var _iterator = _createForOfIteratorHelperLoose(interceptors), _step; !(_step = _iterator()).done;) {\r\n        var interceptor = _step.value;\r\n        try {\r\n          payload = interceptor(payload);\r\n        } catch (e) {//ignore\r\n        }\r\n      }\r\n      return payload;\r\n    };\r\n    return InterceptorsStorage;\r\n  }();\r\n  var interceptors = InterceptorsStorage;\r\n\r\n  var RetryManager = /*#__PURE__*/function () {\r\n    function RetryManager() {\r\n      this.maxAttempts_ = 1;\r\n      this.delayFactor_ = 0.1;\r\n      this.fuzzFactor_ = 0.1;\r\n      this.initialDelay_ = 1000;\r\n      this.enabled_ = false;\r\n    }\r\n    var _proto = RetryManager.prototype;\r\n    _proto.getIsEnabled = function getIsEnabled() {\r\n      return this.enabled_;\r\n    };\r\n    _proto.enable = function enable() {\r\n      this.enabled_ = true;\r\n    };\r\n    _proto.disable = function disable() {\r\n      this.enabled_ = false;\r\n    };\r\n    _proto.reset = function reset() {\r\n      this.maxAttempts_ = 1;\r\n      this.delayFactor_ = 0.1;\r\n      this.fuzzFactor_ = 0.1;\r\n      this.initialDelay_ = 1000;\r\n      this.enabled_ = false;\r\n    };\r\n    _proto.getMaxAttempts = function getMaxAttempts() {\r\n      return this.maxAttempts_;\r\n    };\r\n    _proto.setMaxAttempts = function setMaxAttempts(maxAttempts) {\r\n      this.maxAttempts_ = maxAttempts;\r\n    };\r\n    _proto.getDelayFactor = function getDelayFactor() {\r\n      return this.delayFactor_;\r\n    };\r\n    _proto.setDelayFactor = function setDelayFactor(delayFactor) {\r\n      this.delayFactor_ = delayFactor;\r\n    };\r\n    _proto.getFuzzFactor = function getFuzzFactor() {\r\n      return this.fuzzFactor_;\r\n    };\r\n    _proto.setFuzzFactor = function setFuzzFactor(fuzzFactor) {\r\n      this.fuzzFactor_ = fuzzFactor;\r\n    };\r\n    _proto.getInitialDelay = function getInitialDelay() {\r\n      return this.initialDelay_;\r\n    };\r\n    _proto.setInitialDelay = function setInitialDelay(initialDelay) {\r\n      this.initialDelay_ = initialDelay;\r\n    };\r\n    _proto.createRetry = function createRetry(_temp) {\r\n      var _ref = _temp === void 0 ? {} : _temp,\r\n        maxAttempts = _ref.maxAttempts,\r\n        delayFactor = _ref.delayFactor,\r\n        fuzzFactor = _ref.fuzzFactor,\r\n        initialDelay = _ref.initialDelay;\r\n      return new Retry({\r\n        maxAttempts: maxAttempts || this.maxAttempts_,\r\n        delayFactor: delayFactor || this.delayFactor_,\r\n        fuzzFactor: fuzzFactor || this.fuzzFactor_,\r\n        initialDelay: initialDelay || this.initialDelay_\r\n      });\r\n    };\r\n    return RetryManager;\r\n  }();\r\n  var Retry = /*#__PURE__*/function () {\r\n    function Retry(options) {\r\n      this.maxAttempts_ = options.maxAttempts;\r\n      this.delayFactor_ = options.delayFactor;\r\n      this.fuzzFactor_ = options.fuzzFactor;\r\n      this.currentDelay_ = options.initialDelay;\r\n      this.currentAttempt_ = 1;\r\n    }\r\n    var _proto2 = Retry.prototype;\r\n    _proto2.moveToNextAttempt = function moveToNextAttempt() {\r\n      this.currentAttempt_++;\r\n      var delayDelta = this.currentDelay_ * this.delayFactor_;\r\n      this.currentDelay_ = this.currentDelay_ + delayDelta;\r\n    };\r\n    _proto2.shouldRetry = function shouldRetry() {\r\n      return this.currentAttempt_ < this.maxAttempts_;\r\n    };\r\n    _proto2.getCurrentDelay = function getCurrentDelay() {\r\n      return this.currentDelay_;\r\n    };\r\n    _proto2.getCurrentMinPossibleDelay = function getCurrentMinPossibleDelay() {\r\n      return (1 - this.fuzzFactor_) * this.currentDelay_;\r\n    };\r\n    _proto2.getCurrentMaxPossibleDelay = function getCurrentMaxPossibleDelay() {\r\n      return (1 + this.fuzzFactor_) * this.currentDelay_;\r\n    }\r\n    /**\r\n     * For example fuzzFactor is 0.1\r\n     * This means ±10% deviation\r\n     * So if we have delay as 1000\r\n     * This function can generate any value from 900 to 1100\r\n     */;\r\n    _proto2.getCurrentFuzzedDelay = function getCurrentFuzzedDelay() {\r\n      var lowValue = this.getCurrentMinPossibleDelay();\r\n      var highValue = this.getCurrentMaxPossibleDelay();\r\n      return lowValue + Math.random() * (highValue - lowValue);\r\n    };\r\n    return Retry;\r\n  }();\r\n  var retry = RetryManager;\r\n\r\n  var httpResponseHandler = function httpResponseHandler(callback, decodeResponseBody) {\r\n    if (decodeResponseBody === void 0) {\r\n      decodeResponseBody = false;\r\n    }\r\n    return function (err, response, responseBody) {\r\n      // if the XHR failed, return that error\r\n      if (err) {\r\n        callback(err);\r\n        return;\r\n      } // if the HTTP status code is 4xx or 5xx, the request also failed\r\n\r\n      if (response.statusCode >= 400 && response.statusCode <= 599) {\r\n        var cause = responseBody;\r\n        if (decodeResponseBody) {\r\n          if (window_1.TextDecoder) {\r\n            var charset = getCharset(response.headers && response.headers['content-type']);\r\n            try {\r\n              cause = new TextDecoder(charset).decode(responseBody);\r\n            } catch (e) {}\r\n          } else {\r\n            cause = String.fromCharCode.apply(null, new Uint8Array(responseBody));\r\n          }\r\n        }\r\n        callback({\r\n          cause: cause\r\n        });\r\n        return;\r\n      } // otherwise, request succeeded\r\n\r\n      callback(null, responseBody);\r\n    };\r\n  };\r\n  function getCharset(contentTypeHeader) {\r\n    if (contentTypeHeader === void 0) {\r\n      contentTypeHeader = '';\r\n    }\r\n    return contentTypeHeader.toLowerCase().split(';').reduce(function (charset, contentType) {\r\n      var _contentType$split = contentType.split('='),\r\n        type = _contentType$split[0],\r\n        value = _contentType$split[1];\r\n      if (type.trim() === 'charset') {\r\n        return value.trim();\r\n      }\r\n      return charset;\r\n    }, 'utf-8');\r\n  }\r\n  var httpHandler = httpResponseHandler;\r\n\r\n  createXHR.httpHandler = httpHandler;\r\n  createXHR.requestInterceptorsStorage = new interceptors();\r\n  createXHR.responseInterceptorsStorage = new interceptors();\r\n  createXHR.retryManager = new retry();\r\n  /**\r\n   * @license\r\n   * slighly modified parse-headers 2.0.2 <https://github.com/kesla/parse-headers/>\r\n   * Copyright (c) 2014 David Björklund\r\n   * Available under the MIT license\r\n   * <https://github.com/kesla/parse-headers/blob/master/LICENCE>\r\n   */\r\n\r\n  var parseHeaders = function parseHeaders(headers) {\r\n    var result = {};\r\n    if (!headers) {\r\n      return result;\r\n    }\r\n    headers.trim().split('\\n').forEach(function (row) {\r\n      var index = row.indexOf(':');\r\n      var key = row.slice(0, index).trim().toLowerCase();\r\n      var value = row.slice(index + 1).trim();\r\n      if (typeof result[key] === 'undefined') {\r\n        result[key] = value;\r\n      } else if (Array.isArray(result[key])) {\r\n        result[key].push(value);\r\n      } else {\r\n        result[key] = [result[key], value];\r\n      }\r\n    });\r\n    return result;\r\n  };\r\n  var lib = createXHR; // Allow use of default import syntax in TypeScript\r\n\r\n  var default_1 = createXHR;\r\n  createXHR.XMLHttpRequest = window_1.XMLHttpRequest || noop$1;\r\n  createXHR.XDomainRequest = \"withCredentials\" in new createXHR.XMLHttpRequest() ? createXHR.XMLHttpRequest : window_1.XDomainRequest;\r\n  forEachArray([\"get\", \"put\", \"post\", \"patch\", \"head\", \"delete\"], function (method) {\r\n    createXHR[method === \"delete\" ? \"del\" : method] = function (uri, options, callback) {\r\n      options = initParams(uri, options, callback);\r\n      options.method = method.toUpperCase();\r\n      return _createXHR(options);\r\n    };\r\n  });\r\n  function forEachArray(array, iterator) {\r\n    for (var i = 0; i < array.length; i++) {\r\n      iterator(array[i]);\r\n    }\r\n  }\r\n  function isEmpty(obj) {\r\n    for (var i in obj) {\r\n      if (obj.hasOwnProperty(i)) return false;\r\n    }\r\n    return true;\r\n  }\r\n  function initParams(uri, options, callback) {\r\n    var params = uri;\r\n    if (isFunction_1(options)) {\r\n      callback = options;\r\n      if (typeof uri === \"string\") {\r\n        params = {\r\n          uri: uri\r\n        };\r\n      }\r\n    } else {\r\n      params = _extends_1({}, options, {\r\n        uri: uri\r\n      });\r\n    }\r\n    params.callback = callback;\r\n    return params;\r\n  }\r\n  function createXHR(uri, options, callback) {\r\n    options = initParams(uri, options, callback);\r\n    return _createXHR(options);\r\n  }\r\n  function _createXHR(options) {\r\n    if (typeof options.callback === \"undefined\") {\r\n      throw new Error(\"callback argument missing\");\r\n    } // call all registered request interceptors for a given request type:\r\n\r\n    if (options.requestType && createXHR.requestInterceptorsStorage.getIsEnabled()) {\r\n      var requestInterceptorPayload = {\r\n        uri: options.uri || options.url,\r\n        headers: options.headers || {},\r\n        body: options.body,\r\n        metadata: options.metadata || {},\r\n        retry: options.retry,\r\n        timeout: options.timeout\r\n      };\r\n      var updatedPayload = createXHR.requestInterceptorsStorage.execute(options.requestType, requestInterceptorPayload);\r\n      options.uri = updatedPayload.uri;\r\n      options.headers = updatedPayload.headers;\r\n      options.body = updatedPayload.body;\r\n      options.metadata = updatedPayload.metadata;\r\n      options.retry = updatedPayload.retry;\r\n      options.timeout = updatedPayload.timeout;\r\n    }\r\n    var called = false;\r\n    var callback = function cbOnce(err, response, body) {\r\n      if (!called) {\r\n        called = true;\r\n        options.callback(err, response, body);\r\n      }\r\n    };\r\n    function readystatechange() {\r\n      // do not call load 2 times when response interceptors are enabled\r\n      // why do we even need this 2nd load?\r\n      if (xhr.readyState === 4 && !createXHR.responseInterceptorsStorage.getIsEnabled()) {\r\n        setTimeout(loadFunc, 0);\r\n      }\r\n    }\r\n    function getBody() {\r\n      // Chrome with requestType=blob throws errors arround when even testing access to responseText\r\n      var body = undefined;\r\n      if (xhr.response) {\r\n        body = xhr.response;\r\n      } else {\r\n        body = xhr.responseText || getXml(xhr);\r\n      }\r\n      if (isJson) {\r\n        try {\r\n          body = JSON.parse(body);\r\n        } catch (e) {}\r\n      }\r\n      return body;\r\n    }\r\n    function errorFunc(evt) {\r\n      clearTimeout(timeoutTimer);\r\n      clearTimeout(options.retryTimeout);\r\n      if (!(evt instanceof Error)) {\r\n        evt = new Error(\"\" + (evt || \"Unknown XMLHttpRequest Error\"));\r\n      }\r\n      evt.statusCode = 0; // we would like to retry on error:\r\n\r\n      if (!aborted && createXHR.retryManager.getIsEnabled() && options.retry && options.retry.shouldRetry()) {\r\n        options.retryTimeout = setTimeout(function () {\r\n          options.retry.moveToNextAttempt(); // we want to re-use the same options and the same xhr object:\r\n\r\n          options.xhr = xhr;\r\n          _createXHR(options);\r\n        }, options.retry.getCurrentFuzzedDelay());\r\n        return;\r\n      } // call all registered response interceptors for a given request type:\r\n\r\n      if (options.requestType && createXHR.responseInterceptorsStorage.getIsEnabled()) {\r\n        var responseInterceptorPayload = {\r\n          headers: failureResponse.headers || {},\r\n          body: failureResponse.body,\r\n          responseUrl: xhr.responseURL,\r\n          responseType: xhr.responseType\r\n        };\r\n        var _updatedPayload = createXHR.responseInterceptorsStorage.execute(options.requestType, responseInterceptorPayload);\r\n        failureResponse.body = _updatedPayload.body;\r\n        failureResponse.headers = _updatedPayload.headers;\r\n      }\r\n      return callback(evt, failureResponse);\r\n    } // will load the data & process the response in a special response object\r\n\r\n    function loadFunc() {\r\n      if (aborted) return;\r\n      var status;\r\n      clearTimeout(timeoutTimer);\r\n      clearTimeout(options.retryTimeout);\r\n      if (options.useXDR && xhr.status === undefined) {\r\n        //IE8 CORS GET successful response doesn't have a status field, but body is fine\r\n        status = 200;\r\n      } else {\r\n        status = xhr.status === 1223 ? 204 : xhr.status;\r\n      }\r\n      var response = failureResponse;\r\n      var err = null;\r\n      if (status !== 0) {\r\n        response = {\r\n          body: getBody(),\r\n          statusCode: status,\r\n          method: method,\r\n          headers: {},\r\n          url: uri,\r\n          rawRequest: xhr\r\n        };\r\n        if (xhr.getAllResponseHeaders) {\r\n          //remember xhr can in fact be XDR for CORS in IE\r\n          response.headers = parseHeaders(xhr.getAllResponseHeaders());\r\n        }\r\n      } else {\r\n        err = new Error(\"Internal XMLHttpRequest Error\");\r\n      } // call all registered response interceptors for a given request type:\r\n\r\n      if (options.requestType && createXHR.responseInterceptorsStorage.getIsEnabled()) {\r\n        var responseInterceptorPayload = {\r\n          headers: response.headers || {},\r\n          body: response.body,\r\n          responseUrl: xhr.responseURL,\r\n          responseType: xhr.responseType\r\n        };\r\n        var _updatedPayload2 = createXHR.responseInterceptorsStorage.execute(options.requestType, responseInterceptorPayload);\r\n        response.body = _updatedPayload2.body;\r\n        response.headers = _updatedPayload2.headers;\r\n      }\r\n      return callback(err, response, response.body);\r\n    }\r\n    var xhr = options.xhr || null;\r\n    if (!xhr) {\r\n      if (options.cors || options.useXDR) {\r\n        xhr = new createXHR.XDomainRequest();\r\n      } else {\r\n        xhr = new createXHR.XMLHttpRequest();\r\n      }\r\n    }\r\n    var key;\r\n    var aborted;\r\n    var uri = xhr.url = options.uri || options.url;\r\n    var method = xhr.method = options.method || \"GET\";\r\n    var body = options.body || options.data;\r\n    var headers = xhr.headers = options.headers || {};\r\n    var sync = !!options.sync;\r\n    var isJson = false;\r\n    var timeoutTimer;\r\n    var failureResponse = {\r\n      body: undefined,\r\n      headers: {},\r\n      statusCode: 0,\r\n      method: method,\r\n      url: uri,\r\n      rawRequest: xhr\r\n    };\r\n    if (\"json\" in options && options.json !== false) {\r\n      isJson = true;\r\n      headers[\"accept\"] || headers[\"Accept\"] || (headers[\"Accept\"] = \"application/json\"); //Don't override existing accept header declared by user\r\n\r\n      if (method !== \"GET\" && method !== \"HEAD\") {\r\n        headers[\"content-type\"] || headers[\"Content-Type\"] || (headers[\"Content-Type\"] = \"application/json\"); //Don't override existing accept header declared by user\r\n\r\n        body = JSON.stringify(options.json === true ? body : options.json);\r\n      }\r\n    }\r\n    xhr.onreadystatechange = readystatechange;\r\n    xhr.onload = loadFunc;\r\n    xhr.onerror = errorFunc; // IE9 must have onprogress be set to a unique function.\r\n\r\n    xhr.onprogress = function () {// IE must die\r\n    };\r\n    xhr.onabort = function () {\r\n      aborted = true;\r\n      clearTimeout(options.retryTimeout);\r\n    };\r\n    xhr.ontimeout = errorFunc;\r\n    xhr.open(method, uri, !sync, options.username, options.password); //has to be after open\r\n\r\n    if (!sync) {\r\n      xhr.withCredentials = !!options.withCredentials;\r\n    } // Cannot set timeout with sync request\r\n    // not setting timeout on the xhr object, because of old webkits etc. not handling that correctly\r\n    // both npm's request and jquery 1.x use this kind of timeout, so this is being consistent\r\n\r\n    if (!sync && options.timeout > 0) {\r\n      timeoutTimer = setTimeout(function () {\r\n        if (aborted) return;\r\n        aborted = true; //IE9 may still call readystatechange\r\n\r\n        xhr.abort(\"timeout\");\r\n        var e = new Error(\"XMLHttpRequest timeout\");\r\n        e.code = \"ETIMEDOUT\";\r\n        errorFunc(e);\r\n      }, options.timeout);\r\n    }\r\n    if (xhr.setRequestHeader) {\r\n      for (key in headers) {\r\n        if (headers.hasOwnProperty(key)) {\r\n          xhr.setRequestHeader(key, headers[key]);\r\n        }\r\n      }\r\n    } else if (options.headers && !isEmpty(options.headers)) {\r\n      throw new Error(\"Headers cannot be set on an XDomainRequest object\");\r\n    }\r\n    if (\"responseType\" in options) {\r\n      xhr.responseType = options.responseType;\r\n    }\r\n    if (\"beforeSend\" in options && typeof options.beforeSend === \"function\") {\r\n      options.beforeSend(xhr);\r\n    } // Microsoft Edge browser sends \"undefined\" when send is called with undefined value.\r\n    // XMLHttpRequest spec says to pass null as body to indicate no body\r\n    // See https://github.com/naugtur/xhr/issues/100.\r\n\r\n    xhr.send(body || null);\r\n    return xhr;\r\n  }\r\n  function getXml(xhr) {\r\n    // xhr.responseXML will throw Exception \"InvalidStateError\" or \"DOMException\"\r\n    // See https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/responseXML.\r\n    try {\r\n      if (xhr.responseType === \"document\") {\r\n        return xhr.responseXML;\r\n      }\r\n      var firefoxBugTakenEffect = xhr.responseXML && xhr.responseXML.documentElement.nodeName === \"parsererror\";\r\n      if (xhr.responseType === \"\" && !firefoxBugTakenEffect) {\r\n        return xhr.responseXML;\r\n      }\r\n    } catch (e) {}\r\n    return null;\r\n  }\r\n  function noop$1() {}\r\n  lib.default = default_1;\r\n\r\n  /**\r\n   * @file text-track.js\r\n   */\r\n\r\n  /** @import Tech from '../tech/tech' */\r\n\r\n  /**\r\n   * Takes a webvtt file contents and parses it into cues\r\n   *\r\n   * @param {string} srcContent\r\n   *        webVTT file contents\r\n   *\r\n   * @param {TextTrack} track\r\n   *        TextTrack to add cues to. Cues come from the srcContent.\r\n   *\r\n   * @private\r\n   */\r\n  const parseCues = function (srcContent, track) {\r\n    const parser = new window.WebVTT.Parser(window, window.vttjs, window.WebVTT.StringDecoder());\r\n    const errors = [];\r\n    parser.oncue = function (cue) {\r\n      track.addCue(cue);\r\n    };\r\n    parser.onparsingerror = function (error) {\r\n      errors.push(error);\r\n    };\r\n    parser.onflush = function () {\r\n      track.trigger({\r\n        type: 'loadeddata',\r\n        target: track\r\n      });\r\n    };\r\n    parser.parse(srcContent);\r\n    if (errors.length > 0) {\r\n      if (window.console && window.console.groupCollapsed) {\r\n        window.console.groupCollapsed(`Text Track parsing errors for ${track.src}`);\r\n      }\r\n      errors.forEach(error => log$1.error(error));\r\n      if (window.console && window.console.groupEnd) {\r\n        window.console.groupEnd();\r\n      }\r\n    }\r\n    parser.flush();\r\n  };\r\n\r\n  /**\r\n   * Load a `TextTrack` from a specified url.\r\n   *\r\n   * @param {string} src\r\n   *        Url to load track from.\r\n   *\r\n   * @param {TextTrack} track\r\n   *        Track to add cues to. Comes from the content at the end of `url`.\r\n   *\r\n   * @private\r\n   */\r\n  const loadTrack = function (src, track) {\r\n    const opts = {\r\n      uri: src\r\n    };\r\n    const crossOrigin = isCrossOrigin(src);\r\n    if (crossOrigin) {\r\n      opts.cors = crossOrigin;\r\n    }\r\n    const withCredentials = track.tech_.crossOrigin() === 'use-credentials';\r\n    if (withCredentials) {\r\n      opts.withCredentials = withCredentials;\r\n    }\r\n    lib(opts, bind_(this, function (err, response, responseBody) {\r\n      if (err) {\r\n        return log$1.error(err, response);\r\n      }\r\n      track.loaded_ = true;\r\n\r\n      // Make sure that vttjs has loaded, otherwise, wait till it finished loading\r\n      // NOTE: this is only used for the alt/video.novtt.js build\r\n      if (typeof window.WebVTT !== 'function') {\r\n        if (track.tech_) {\r\n          // to prevent use before define eslint error, we define loadHandler\r\n          // as a let here\r\n          track.tech_.any(['vttjsloaded', 'vttjserror'], event => {\r\n            if (event.type === 'vttjserror') {\r\n              log$1.error(`vttjs failed to load, stopping trying to process ${track.src}`);\r\n              return;\r\n            }\r\n            return parseCues(responseBody, track);\r\n          });\r\n        }\r\n      } else {\r\n        parseCues(responseBody, track);\r\n      }\r\n    }));\r\n  };\r\n\r\n  /**\r\n   * A representation of a single `TextTrack`.\r\n   *\r\n   * @see [Spec]{@link https://html.spec.whatwg.org/multipage/embedded-content.html#texttrack}\r\n   * @extends Track\r\n   */\r\n  class TextTrack extends Track {\r\n    /**\r\n     * Create an instance of this class.\r\n     *\r\n     * @param {Object} options={}\r\n     *        Object of option names and values\r\n     *\r\n     * @param {Tech} options.tech\r\n     *        A reference to the tech that owns this TextTrack.\r\n     *\r\n     * @param {TextTrack~Kind} [options.kind='subtitles']\r\n     *        A valid text track kind.\r\n     *\r\n     * @param {TextTrack~Mode} [options.mode='disabled']\r\n     *        A valid text track mode.\r\n     *\r\n     * @param {string} [options.id='vjs_track_' + Guid.newGUID()]\r\n     *        A unique id for this TextTrack.\r\n     *\r\n     * @param {string} [options.label='']\r\n     *        The menu label for this track.\r\n     *\r\n     * @param {string} [options.language='']\r\n     *        A valid two character language code.\r\n     *\r\n     * @param {string} [options.srclang='']\r\n     *        A valid two character language code. An alternative, but deprioritized\r\n     *        version of `options.language`\r\n     *\r\n     * @param {string} [options.src]\r\n     *        A url to TextTrack cues.\r\n     *\r\n     * @param {boolean} [options.default]\r\n     *        If this track should default to on or off.\r\n     */\r\n    constructor(options = {}) {\r\n      if (!options.tech) {\r\n        throw new Error('A tech was not provided.');\r\n      }\r\n      const settings = merge$2(options, {\r\n        kind: TextTrackKind[options.kind] || 'subtitles',\r\n        language: options.language || options.srclang || ''\r\n      });\r\n      let mode = TextTrackMode[settings.mode] || 'disabled';\r\n      const default_ = settings.default;\r\n      if (settings.kind === 'metadata' || settings.kind === 'chapters') {\r\n        mode = 'hidden';\r\n      }\r\n      super(settings);\r\n      this.tech_ = settings.tech;\r\n      this.cues_ = [];\r\n      this.activeCues_ = [];\r\n      this.preload_ = this.tech_.preloadTextTracks !== false;\r\n      const cues = new TextTrackCueList(this.cues_);\r\n      const activeCues = new TextTrackCueList(this.activeCues_);\r\n      let changed = false;\r\n      this.timeupdateHandler = bind_(this, function (event = {}) {\r\n        if (this.tech_.isDisposed()) {\r\n          return;\r\n        }\r\n        if (!this.tech_.isReady_) {\r\n          if (event.type !== 'timeupdate') {\r\n            this.rvf_ = this.tech_.requestVideoFrameCallback(this.timeupdateHandler);\r\n          }\r\n          return;\r\n        }\r\n\r\n        // Accessing this.activeCues for the side-effects of updating itself\r\n        // due to its nature as a getter function. Do not remove or cues will\r\n        // stop updating!\r\n        // Use the setter to prevent deletion from uglify (pure_getters rule)\r\n        this.activeCues = this.activeCues;\r\n        if (changed) {\r\n          this.trigger('cuechange');\r\n          changed = false;\r\n        }\r\n        if (event.type !== 'timeupdate') {\r\n          this.rvf_ = this.tech_.requestVideoFrameCallback(this.timeupdateHandler);\r\n        }\r\n      });\r\n      const disposeHandler = () => {\r\n        this.stopTracking();\r\n      };\r\n      this.tech_.one('dispose', disposeHandler);\r\n      if (mode !== 'disabled') {\r\n        this.startTracking();\r\n      }\r\n      Object.defineProperties(this, {\r\n        /**\r\n         * @memberof TextTrack\r\n         * @member {boolean} default\r\n         *         If this track was set to be on or off by default. Cannot be changed after\r\n         *         creation.\r\n         * @instance\r\n         *\r\n         * @readonly\r\n         */\r\n        default: {\r\n          get() {\r\n            return default_;\r\n          },\r\n          set() {}\r\n        },\r\n        /**\r\n         * @memberof TextTrack\r\n         * @member {string} mode\r\n         *         Set the mode of this TextTrack to a valid {@link TextTrack~Mode}. Will\r\n         *         not be set if setting to an invalid mode.\r\n         * @instance\r\n         *\r\n         * @fires TextTrack#modechange\r\n         */\r\n        mode: {\r\n          get() {\r\n            return mode;\r\n          },\r\n          set(newMode) {\r\n            if (!TextTrackMode[newMode]) {\r\n              return;\r\n            }\r\n            if (mode === newMode) {\r\n              return;\r\n            }\r\n            mode = newMode;\r\n            if (!this.preload_ && mode !== 'disabled' && this.cues.length === 0) {\r\n              // On-demand load.\r\n              loadTrack(this.src, this);\r\n            }\r\n            this.stopTracking();\r\n            if (mode !== 'disabled') {\r\n              this.startTracking();\r\n            }\r\n            /**\r\n             * An event that fires when mode changes on this track. This allows\r\n             * the TextTrackList that holds this track to act accordingly.\r\n             *\r\n             * > Note: This is not part of the spec!\r\n             *\r\n             * @event TextTrack#modechange\r\n             * @type {Event}\r\n             */\r\n            this.trigger('modechange');\r\n          }\r\n        },\r\n        /**\r\n         * @memberof TextTrack\r\n         * @member {TextTrackCueList} cues\r\n         *         The text track cue list for this TextTrack.\r\n         * @instance\r\n         */\r\n        cues: {\r\n          get() {\r\n            if (!this.loaded_) {\r\n              return null;\r\n            }\r\n            return cues;\r\n          },\r\n          set() {}\r\n        },\r\n        /**\r\n         * @memberof TextTrack\r\n         * @member {TextTrackCueList} activeCues\r\n         *         The list text track cues that are currently active for this TextTrack.\r\n         * @instance\r\n         */\r\n        activeCues: {\r\n          get() {\r\n            if (!this.loaded_) {\r\n              return null;\r\n            }\r\n\r\n            // nothing to do\r\n            if (this.cues.length === 0) {\r\n              return activeCues;\r\n            }\r\n            const ct = this.tech_.currentTime();\r\n            const active = [];\r\n            for (let i = 0, l = this.cues.length; i < l; i++) {\r\n              const cue = this.cues[i];\r\n              if (cue.startTime <= ct && cue.endTime >= ct) {\r\n                active.push(cue);\r\n              }\r\n            }\r\n            changed = false;\r\n            if (active.length !== this.activeCues_.length) {\r\n              changed = true;\r\n            } else {\r\n              for (let i = 0; i < active.length; i++) {\r\n                if (this.activeCues_.indexOf(active[i]) === -1) {\r\n                  changed = true;\r\n                }\r\n              }\r\n            }\r\n            this.activeCues_ = active;\r\n            activeCues.setCues_(this.activeCues_);\r\n            return activeCues;\r\n          },\r\n          // /!\\ Keep this setter empty (see the timeupdate handler above)\r\n          set() {}\r\n        }\r\n      });\r\n      if (settings.src) {\r\n        this.src = settings.src;\r\n        if (!this.preload_) {\r\n          // Tracks will load on-demand.\r\n          // Act like we're loaded for other purposes.\r\n          this.loaded_ = true;\r\n        }\r\n        if (this.preload_ || settings.kind !== 'subtitles' && settings.kind !== 'captions') {\r\n          loadTrack(this.src, this);\r\n        }\r\n      } else {\r\n        this.loaded_ = true;\r\n      }\r\n    }\r\n    startTracking() {\r\n      // More precise cues based on requestVideoFrameCallback with a requestAnimationFram fallback\r\n      this.rvf_ = this.tech_.requestVideoFrameCallback(this.timeupdateHandler);\r\n      // Also listen to timeupdate in case rVFC/rAF stops (window in background, audio in video el)\r\n      this.tech_.on('timeupdate', this.timeupdateHandler);\r\n    }\r\n    stopTracking() {\r\n      if (this.rvf_) {\r\n        this.tech_.cancelVideoFrameCallback(this.rvf_);\r\n        this.rvf_ = undefined;\r\n      }\r\n      this.tech_.off('timeupdate', this.timeupdateHandler);\r\n    }\r\n\r\n    /**\r\n     * Add a cue to the internal list of cues.\r\n     *\r\n     * @param {TextTrack~Cue} cue\r\n     *        The cue to add to our internal list\r\n     */\r\n    addCue(originalCue) {\r\n      let cue = originalCue;\r\n\r\n      // Testing if the cue is a VTTCue in a way that survives minification\r\n      if (!('getCueAsHTML' in cue)) {\r\n        cue = new window.vttjs.VTTCue(originalCue.startTime, originalCue.endTime, originalCue.text);\r\n        for (const prop in originalCue) {\r\n          if (!(prop in cue)) {\r\n            cue[prop] = originalCue[prop];\r\n          }\r\n        }\r\n\r\n        // make sure that `id` is copied over\r\n        cue.id = originalCue.id;\r\n        cue.originalCue_ = originalCue;\r\n      }\r\n      const tracks = this.tech_.textTracks();\r\n      for (let i = 0; i < tracks.length; i++) {\r\n        if (tracks[i] !== this) {\r\n          tracks[i].removeCue(cue);\r\n        }\r\n      }\r\n      this.cues_.push(cue);\r\n      this.cues.setCues_(this.cues_);\r\n    }\r\n\r\n    /**\r\n     * Remove a cue from our internal list\r\n     *\r\n     * @param {TextTrack~Cue} removeCue\r\n     *        The cue to remove from our internal list\r\n     */\r\n    removeCue(removeCue) {\r\n      let i = this.cues_.length;\r\n      while (i--) {\r\n        const cue = this.cues_[i];\r\n        if (cue === removeCue || cue.originalCue_ && cue.originalCue_ === removeCue) {\r\n          this.cues_.splice(i, 1);\r\n          this.cues.setCues_(this.cues_);\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * cuechange - One or more cues in the track have become active or stopped being active.\r\n   *\r\n   * @protected\r\n   */\r\n  TextTrack.prototype.allowedEvents_ = {\r\n    cuechange: 'cuechange'\r\n  };\r\n\r\n  /**\r\n   * A representation of a single `AudioTrack`. If it is part of an {@link AudioTrackList}\r\n   * only one `AudioTrack` in the list will be enabled at a time.\r\n   *\r\n   * @see [Spec]{@link https://html.spec.whatwg.org/multipage/embedded-content.html#audiotrack}\r\n   * @extends Track\r\n   */\r\n  class AudioTrack extends Track {\r\n    /**\r\n     * Create an instance of this class.\r\n     *\r\n     * @param {Object} [options={}]\r\n     *        Object of option names and values\r\n     *\r\n     * @param {AudioTrack~Kind} [options.kind='']\r\n     *        A valid audio track kind\r\n     *\r\n     * @param {string} [options.id='vjs_track_' + Guid.newGUID()]\r\n     *        A unique id for this AudioTrack.\r\n     *\r\n     * @param {string} [options.label='']\r\n     *        The menu label for this track.\r\n     *\r\n     * @param {string} [options.language='']\r\n     *        A valid two character language code.\r\n     *\r\n     * @param {boolean} [options.enabled]\r\n     *        If this track is the one that is currently playing. If this track is part of\r\n     *        an {@link AudioTrackList}, only one {@link AudioTrack} will be enabled.\r\n     */\r\n    constructor(options = {}) {\r\n      const settings = merge$2(options, {\r\n        kind: AudioTrackKind[options.kind] || ''\r\n      });\r\n      super(settings);\r\n      let enabled = false;\r\n\r\n      /**\r\n       * @memberof AudioTrack\r\n       * @member {boolean} enabled\r\n       *         If this `AudioTrack` is enabled or not. When setting this will\r\n       *         fire {@link AudioTrack#enabledchange} if the state of enabled is changed.\r\n       * @instance\r\n       *\r\n       * @fires VideoTrack#selectedchange\r\n       */\r\n      Object.defineProperty(this, 'enabled', {\r\n        get() {\r\n          return enabled;\r\n        },\r\n        set(newEnabled) {\r\n          // an invalid or unchanged value\r\n          if (typeof newEnabled !== 'boolean' || newEnabled === enabled) {\r\n            return;\r\n          }\r\n          enabled = newEnabled;\r\n\r\n          /**\r\n           * An event that fires when enabled changes on this track. This allows\r\n           * the AudioTrackList that holds this track to act accordingly.\r\n           *\r\n           * > Note: This is not part of the spec! Native tracks will do\r\n           *         this internally without an event.\r\n           *\r\n           * @event AudioTrack#enabledchange\r\n           * @type {Event}\r\n           */\r\n          this.trigger('enabledchange');\r\n        }\r\n      });\r\n\r\n      // if the user sets this track to selected then\r\n      // set selected to that true value otherwise\r\n      // we keep it false\r\n      if (settings.enabled) {\r\n        this.enabled = settings.enabled;\r\n      }\r\n      this.loaded_ = true;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * A representation of a single `VideoTrack`.\r\n   *\r\n   * @see [Spec]{@link https://html.spec.whatwg.org/multipage/embedded-content.html#videotrack}\r\n   * @extends Track\r\n   */\r\n  class VideoTrack extends Track {\r\n    /**\r\n     * Create an instance of this class.\r\n     *\r\n     * @param {Object} [options={}]\r\n     *        Object of option names and values\r\n     *\r\n     * @param {string} [options.kind='']\r\n     *        A valid {@link VideoTrack~Kind}\r\n     *\r\n     * @param {string} [options.id='vjs_track_' + Guid.newGUID()]\r\n     *        A unique id for this AudioTrack.\r\n     *\r\n     * @param {string} [options.label='']\r\n     *        The menu label for this track.\r\n     *\r\n     * @param {string} [options.language='']\r\n     *        A valid two character language code.\r\n     *\r\n     * @param {boolean} [options.selected]\r\n     *        If this track is the one that is currently playing.\r\n     */\r\n    constructor(options = {}) {\r\n      const settings = merge$2(options, {\r\n        kind: VideoTrackKind[options.kind] || ''\r\n      });\r\n      super(settings);\r\n      let selected = false;\r\n\r\n      /**\r\n       * @memberof VideoTrack\r\n       * @member {boolean} selected\r\n       *         If this `VideoTrack` is selected or not. When setting this will\r\n       *         fire {@link VideoTrack#selectedchange} if the state of selected changed.\r\n       * @instance\r\n       *\r\n       * @fires VideoTrack#selectedchange\r\n       */\r\n      Object.defineProperty(this, 'selected', {\r\n        get() {\r\n          return selected;\r\n        },\r\n        set(newSelected) {\r\n          // an invalid or unchanged value\r\n          if (typeof newSelected !== 'boolean' || newSelected === selected) {\r\n            return;\r\n          }\r\n          selected = newSelected;\r\n\r\n          /**\r\n           * An event that fires when selected changes on this track. This allows\r\n           * the VideoTrackList that holds this track to act accordingly.\r\n           *\r\n           * > Note: This is not part of the spec! Native tracks will do\r\n           *         this internally without an event.\r\n           *\r\n           * @event VideoTrack#selectedchange\r\n           * @type {Event}\r\n           */\r\n          this.trigger('selectedchange');\r\n        }\r\n      });\r\n\r\n      // if the user sets this track to selected then\r\n      // set selected to that true value otherwise\r\n      // we keep it false\r\n      if (settings.selected) {\r\n        this.selected = settings.selected;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @file html-track-element.js\r\n   */\r\n\r\n  /** @import Tech from '../tech/tech' */\r\n\r\n  /**\r\n   * A single track represented in the DOM.\r\n   *\r\n   * @see [Spec]{@link https://html.spec.whatwg.org/multipage/embedded-content.html#htmltrackelement}\r\n   * @extends EventTarget\r\n   */\r\n  class HTMLTrackElement extends EventTarget$2 {\r\n    /**\r\n     * Create an instance of this class.\r\n     *\r\n     * @param {Object} options={}\r\n     *        Object of option names and values\r\n     *\r\n     * @param {Tech} options.tech\r\n     *        A reference to the tech that owns this HTMLTrackElement.\r\n     *\r\n     * @param {TextTrack~Kind} [options.kind='subtitles']\r\n     *        A valid text track kind.\r\n     *\r\n     * @param {TextTrack~Mode} [options.mode='disabled']\r\n     *        A valid text track mode.\r\n     *\r\n     * @param {string} [options.id='vjs_track_' + Guid.newGUID()]\r\n     *        A unique id for this TextTrack.\r\n     *\r\n     * @param {string} [options.label='']\r\n     *        The menu label for this track.\r\n     *\r\n     * @param {string} [options.language='']\r\n     *        A valid two character language code.\r\n     *\r\n     * @param {string} [options.srclang='']\r\n     *        A valid two character language code. An alternative, but deprioritized\r\n     *        version of `options.language`\r\n     *\r\n     * @param {string} [options.src]\r\n     *        A url to TextTrack cues.\r\n     *\r\n     * @param {boolean} [options.default]\r\n     *        If this track should default to on or off.\r\n     */\r\n    constructor(options = {}) {\r\n      super();\r\n      let readyState;\r\n      const track = new TextTrack(options);\r\n      this.kind = track.kind;\r\n      this.src = track.src;\r\n      this.srclang = track.language;\r\n      this.label = track.label;\r\n      this.default = track.default;\r\n      Object.defineProperties(this, {\r\n        /**\r\n         * @memberof HTMLTrackElement\r\n         * @member {HTMLTrackElement~ReadyState} readyState\r\n         *         The current ready state of the track element.\r\n         * @instance\r\n         */\r\n        readyState: {\r\n          get() {\r\n            return readyState;\r\n          }\r\n        },\r\n        /**\r\n         * @memberof HTMLTrackElement\r\n         * @member {TextTrack} track\r\n         *         The underlying TextTrack object.\r\n         * @instance\r\n         *\r\n         */\r\n        track: {\r\n          get() {\r\n            return track;\r\n          }\r\n        }\r\n      });\r\n      readyState = HTMLTrackElement.NONE;\r\n\r\n      /**\r\n       * @listens TextTrack#loadeddata\r\n       * @fires HTMLTrackElement#load\r\n       */\r\n      track.addEventListener('loadeddata', () => {\r\n        readyState = HTMLTrackElement.LOADED;\r\n        this.trigger({\r\n          type: 'load',\r\n          target: this\r\n        });\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @protected\r\n   */\r\n  HTMLTrackElement.prototype.allowedEvents_ = {\r\n    load: 'load'\r\n  };\r\n\r\n  /**\r\n   * The text track not loaded state.\r\n   *\r\n   * @type {number}\r\n   * @static\r\n   */\r\n  HTMLTrackElement.NONE = 0;\r\n\r\n  /**\r\n   * The text track loading state.\r\n   *\r\n   * @type {number}\r\n   * @static\r\n   */\r\n  HTMLTrackElement.LOADING = 1;\r\n\r\n  /**\r\n   * The text track loaded state.\r\n   *\r\n   * @type {number}\r\n   * @static\r\n   */\r\n  HTMLTrackElement.LOADED = 2;\r\n\r\n  /**\r\n   * The text track failed to load state.\r\n   *\r\n   * @type {number}\r\n   * @static\r\n   */\r\n  HTMLTrackElement.ERROR = 3;\r\n\r\n  /*\r\n   * This file contains all track properties that are used in\r\n   * player.js, tech.js, html5.js and possibly other techs in the future.\r\n   */\r\n\r\n  const NORMAL = {\r\n    audio: {\r\n      ListClass: AudioTrackList,\r\n      TrackClass: AudioTrack,\r\n      capitalName: 'Audio'\r\n    },\r\n    video: {\r\n      ListClass: VideoTrackList,\r\n      TrackClass: VideoTrack,\r\n      capitalName: 'Video'\r\n    },\r\n    text: {\r\n      ListClass: TextTrackList,\r\n      TrackClass: TextTrack,\r\n      capitalName: 'Text'\r\n    }\r\n  };\r\n  Object.keys(NORMAL).forEach(function (type) {\r\n    NORMAL[type].getterName = `${type}Tracks`;\r\n    NORMAL[type].privateName = `${type}Tracks_`;\r\n  });\r\n  const REMOTE = {\r\n    remoteText: {\r\n      ListClass: TextTrackList,\r\n      TrackClass: TextTrack,\r\n      capitalName: 'RemoteText',\r\n      getterName: 'remoteTextTracks',\r\n      privateName: 'remoteTextTracks_'\r\n    },\r\n    remoteTextEl: {\r\n      ListClass: HtmlTrackElementList,\r\n      TrackClass: HTMLTrackElement,\r\n      capitalName: 'RemoteTextTrackEls',\r\n      getterName: 'remoteTextTrackEls',\r\n      privateName: 'remoteTextTrackEls_'\r\n    }\r\n  };\r\n  const ALL = Object.assign({}, NORMAL, REMOTE);\r\n  REMOTE.names = Object.keys(REMOTE);\r\n  NORMAL.names = Object.keys(NORMAL);\r\n  ALL.names = [].concat(REMOTE.names).concat(NORMAL.names);\r\n\r\n  var minDoc = {};\r\n\r\n  var topLevel = typeof commonjsGlobal !== 'undefined' ? commonjsGlobal : typeof window !== 'undefined' ? window : {};\r\n  var doccy;\r\n  if (typeof document !== 'undefined') {\r\n    doccy = document;\r\n  } else {\r\n    doccy = topLevel['__GLOBAL_DOCUMENT_CACHE@4'];\r\n    if (!doccy) {\r\n      doccy = topLevel['__GLOBAL_DOCUMENT_CACHE@4'] = minDoc;\r\n    }\r\n  }\r\n  var document_1 = doccy;\r\n\r\n  /**\r\n   * Copyright 2013 vtt.js Contributors\r\n   *\r\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n   * you may not use this file except in compliance with the License.\r\n   * You may obtain a copy of the License at\r\n   *\r\n   *   http://www.apache.org/licenses/LICENSE-2.0\r\n   *\r\n   * Unless required by applicable law or agreed to in writing, software\r\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n   * See the License for the specific language governing permissions and\r\n   * limitations under the License.\r\n   */\r\n\r\n  /* -*- Mode: Java; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */\r\n  /* vim: set shiftwidth=2 tabstop=2 autoindent cindent expandtab: */\r\n\r\n  var _objCreate = Object.create || function () {\r\n    function F() {}\r\n    return function (o) {\r\n      if (arguments.length !== 1) {\r\n        throw new Error('Object.create shim only accepts one parameter.');\r\n      }\r\n      F.prototype = o;\r\n      return new F();\r\n    };\r\n  }();\r\n\r\n  // Creates a new ParserError object from an errorData object. The errorData\r\n  // object should have default code and message properties. The default message\r\n  // property can be overriden by passing in a message parameter.\r\n  // See ParsingError.Errors below for acceptable errors.\r\n  function ParsingError(errorData, message) {\r\n    this.name = \"ParsingError\";\r\n    this.code = errorData.code;\r\n    this.message = message || errorData.message;\r\n  }\r\n  ParsingError.prototype = _objCreate(Error.prototype);\r\n  ParsingError.prototype.constructor = ParsingError;\r\n\r\n  // ParsingError metadata for acceptable ParsingErrors.\r\n  ParsingError.Errors = {\r\n    BadSignature: {\r\n      code: 0,\r\n      message: \"Malformed WebVTT signature.\"\r\n    },\r\n    BadTimeStamp: {\r\n      code: 1,\r\n      message: \"Malformed time stamp.\"\r\n    }\r\n  };\r\n\r\n  // Try to parse input as a time stamp.\r\n  function parseTimeStamp(input) {\r\n    function computeSeconds(h, m, s, f) {\r\n      return (h | 0) * 3600 + (m | 0) * 60 + (s | 0) + (f | 0) / 1000;\r\n    }\r\n    var m = input.match(/^(\\d+):(\\d{1,2})(:\\d{1,2})?\\.(\\d{3})/);\r\n    if (!m) {\r\n      return null;\r\n    }\r\n    if (m[3]) {\r\n      // Timestamp takes the form of [hours]:[minutes]:[seconds].[milliseconds]\r\n      return computeSeconds(m[1], m[2], m[3].replace(\":\", \"\"), m[4]);\r\n    } else if (m[1] > 59) {\r\n      // Timestamp takes the form of [hours]:[minutes].[milliseconds]\r\n      // First position is hours as it's over 59.\r\n      return computeSeconds(m[1], m[2], 0, m[4]);\r\n    } else {\r\n      // Timestamp takes the form of [minutes]:[seconds].[milliseconds]\r\n      return computeSeconds(0, m[1], m[2], m[4]);\r\n    }\r\n  }\r\n\r\n  // A settings object holds key/value pairs and will ignore anything but the first\r\n  // assignment to a specific key.\r\n  function Settings() {\r\n    this.values = _objCreate(null);\r\n  }\r\n  Settings.prototype = {\r\n    // Only accept the first assignment to any key.\r\n    set: function (k, v) {\r\n      if (!this.get(k) && v !== \"\") {\r\n        this.values[k] = v;\r\n      }\r\n    },\r\n    // Return the value for a key, or a default value.\r\n    // If 'defaultKey' is passed then 'dflt' is assumed to be an object with\r\n    // a number of possible default values as properties where 'defaultKey' is\r\n    // the key of the property that will be chosen; otherwise it's assumed to be\r\n    // a single value.\r\n    get: function (k, dflt, defaultKey) {\r\n      if (defaultKey) {\r\n        return this.has(k) ? this.values[k] : dflt[defaultKey];\r\n      }\r\n      return this.has(k) ? this.values[k] : dflt;\r\n    },\r\n    // Check whether we have a value for a key.\r\n    has: function (k) {\r\n      return k in this.values;\r\n    },\r\n    // Accept a setting if its one of the given alternatives.\r\n    alt: function (k, v, a) {\r\n      for (var n = 0; n < a.length; ++n) {\r\n        if (v === a[n]) {\r\n          this.set(k, v);\r\n          break;\r\n        }\r\n      }\r\n    },\r\n    // Accept a setting if its a valid (signed) integer.\r\n    integer: function (k, v) {\r\n      if (/^-?\\d+$/.test(v)) {\r\n        // integer\r\n        this.set(k, parseInt(v, 10));\r\n      }\r\n    },\r\n    // Accept a setting if its a valid percentage.\r\n    percent: function (k, v) {\r\n      if (v.match(/^([\\d]{1,3})(\\.[\\d]*)?%$/)) {\r\n        v = parseFloat(v);\r\n        if (v >= 0 && v <= 100) {\r\n          this.set(k, v);\r\n          return true;\r\n        }\r\n      }\r\n      return false;\r\n    }\r\n  };\r\n\r\n  // Helper function to parse input into groups separated by 'groupDelim', and\r\n  // interprete each group as a key/value pair separated by 'keyValueDelim'.\r\n  function parseOptions(input, callback, keyValueDelim, groupDelim) {\r\n    var groups = groupDelim ? input.split(groupDelim) : [input];\r\n    for (var i in groups) {\r\n      if (typeof groups[i] !== \"string\") {\r\n        continue;\r\n      }\r\n      var kv = groups[i].split(keyValueDelim);\r\n      if (kv.length !== 2) {\r\n        continue;\r\n      }\r\n      var k = kv[0].trim();\r\n      var v = kv[1].trim();\r\n      callback(k, v);\r\n    }\r\n  }\r\n  function parseCue(input, cue, regionList) {\r\n    // Remember the original input if we need to throw an error.\r\n    var oInput = input;\r\n    // 4.1 WebVTT timestamp\r\n    function consumeTimeStamp() {\r\n      var ts = parseTimeStamp(input);\r\n      if (ts === null) {\r\n        throw new ParsingError(ParsingError.Errors.BadTimeStamp, \"Malformed timestamp: \" + oInput);\r\n      }\r\n      // Remove time stamp from input.\r\n      input = input.replace(/^[^\\sa-zA-Z-]+/, \"\");\r\n      return ts;\r\n    }\r\n\r\n    // 4.4.2 WebVTT cue settings\r\n    function consumeCueSettings(input, cue) {\r\n      var settings = new Settings();\r\n      parseOptions(input, function (k, v) {\r\n        switch (k) {\r\n          case \"region\":\r\n            // Find the last region we parsed with the same region id.\r\n            for (var i = regionList.length - 1; i >= 0; i--) {\r\n              if (regionList[i].id === v) {\r\n                settings.set(k, regionList[i].region);\r\n                break;\r\n              }\r\n            }\r\n            break;\r\n          case \"vertical\":\r\n            settings.alt(k, v, [\"rl\", \"lr\"]);\r\n            break;\r\n          case \"line\":\r\n            var vals = v.split(\",\"),\r\n              vals0 = vals[0];\r\n            settings.integer(k, vals0);\r\n            settings.percent(k, vals0) ? settings.set(\"snapToLines\", false) : null;\r\n            settings.alt(k, vals0, [\"auto\"]);\r\n            if (vals.length === 2) {\r\n              settings.alt(\"lineAlign\", vals[1], [\"start\", \"center\", \"end\"]);\r\n            }\r\n            break;\r\n          case \"position\":\r\n            vals = v.split(\",\");\r\n            settings.percent(k, vals[0]);\r\n            if (vals.length === 2) {\r\n              settings.alt(\"positionAlign\", vals[1], [\"start\", \"center\", \"end\"]);\r\n            }\r\n            break;\r\n          case \"size\":\r\n            settings.percent(k, v);\r\n            break;\r\n          case \"align\":\r\n            settings.alt(k, v, [\"start\", \"center\", \"end\", \"left\", \"right\"]);\r\n            break;\r\n        }\r\n      }, /:/, /\\s/);\r\n\r\n      // Apply default values for any missing fields.\r\n      cue.region = settings.get(\"region\", null);\r\n      cue.vertical = settings.get(\"vertical\", \"\");\r\n      try {\r\n        cue.line = settings.get(\"line\", \"auto\");\r\n      } catch (e) {}\r\n      cue.lineAlign = settings.get(\"lineAlign\", \"start\");\r\n      cue.snapToLines = settings.get(\"snapToLines\", true);\r\n      cue.size = settings.get(\"size\", 100);\r\n      // Safari still uses the old middle value and won't accept center\r\n      try {\r\n        cue.align = settings.get(\"align\", \"center\");\r\n      } catch (e) {\r\n        cue.align = settings.get(\"align\", \"middle\");\r\n      }\r\n      try {\r\n        cue.position = settings.get(\"position\", \"auto\");\r\n      } catch (e) {\r\n        cue.position = settings.get(\"position\", {\r\n          start: 0,\r\n          left: 0,\r\n          center: 50,\r\n          middle: 50,\r\n          end: 100,\r\n          right: 100\r\n        }, cue.align);\r\n      }\r\n      cue.positionAlign = settings.get(\"positionAlign\", {\r\n        start: \"start\",\r\n        left: \"start\",\r\n        center: \"center\",\r\n        middle: \"center\",\r\n        end: \"end\",\r\n        right: \"end\"\r\n      }, cue.align);\r\n    }\r\n    function skipWhitespace() {\r\n      input = input.replace(/^\\s+/, \"\");\r\n    }\r\n\r\n    // 4.1 WebVTT cue timings.\r\n    skipWhitespace();\r\n    cue.startTime = consumeTimeStamp(); // (1) collect cue start time\r\n    skipWhitespace();\r\n    if (input.substr(0, 3) !== \"-->\") {\r\n      // (3) next characters must match \"-->\"\r\n      throw new ParsingError(ParsingError.Errors.BadTimeStamp, \"Malformed time stamp (time stamps must be separated by '-->'): \" + oInput);\r\n    }\r\n    input = input.substr(3);\r\n    skipWhitespace();\r\n    cue.endTime = consumeTimeStamp(); // (5) collect cue end time\r\n\r\n    // 4.1 WebVTT cue settings list.\r\n    skipWhitespace();\r\n    consumeCueSettings(input, cue);\r\n  }\r\n\r\n  // When evaluating this file as part of a Webpack bundle for server\r\n  // side rendering, `document` is an empty object.\r\n  var TEXTAREA_ELEMENT = document_1.createElement && document_1.createElement(\"textarea\");\r\n  var TAG_NAME = {\r\n    c: \"span\",\r\n    i: \"i\",\r\n    b: \"b\",\r\n    u: \"u\",\r\n    ruby: \"ruby\",\r\n    rt: \"rt\",\r\n    v: \"span\",\r\n    lang: \"span\"\r\n  };\r\n\r\n  // 5.1 default text color\r\n  // 5.2 default text background color is equivalent to text color with bg_ prefix\r\n  var DEFAULT_COLOR_CLASS = {\r\n    white: 'rgba(255,255,255,1)',\r\n    lime: 'rgba(0,255,0,1)',\r\n    cyan: 'rgba(0,255,255,1)',\r\n    red: 'rgba(255,0,0,1)',\r\n    yellow: 'rgba(255,255,0,1)',\r\n    magenta: 'rgba(255,0,255,1)',\r\n    blue: 'rgba(0,0,255,1)',\r\n    black: 'rgba(0,0,0,1)'\r\n  };\r\n  var TAG_ANNOTATION = {\r\n    v: \"title\",\r\n    lang: \"lang\"\r\n  };\r\n  var NEEDS_PARENT = {\r\n    rt: \"ruby\"\r\n  };\r\n\r\n  // Parse content into a document fragment.\r\n  function parseContent(window, input) {\r\n    function nextToken() {\r\n      // Check for end-of-string.\r\n      if (!input) {\r\n        return null;\r\n      }\r\n\r\n      // Consume 'n' characters from the input.\r\n      function consume(result) {\r\n        input = input.substr(result.length);\r\n        return result;\r\n      }\r\n      var m = input.match(/^([^<]*)(<[^>]*>?)?/);\r\n      // If there is some text before the next tag, return it, otherwise return\r\n      // the tag.\r\n      return consume(m[1] ? m[1] : m[2]);\r\n    }\r\n    function unescape(s) {\r\n      TEXTAREA_ELEMENT.innerHTML = s;\r\n      s = TEXTAREA_ELEMENT.textContent;\r\n      TEXTAREA_ELEMENT.textContent = \"\";\r\n      return s;\r\n    }\r\n    function shouldAdd(current, element) {\r\n      return !NEEDS_PARENT[element.localName] || NEEDS_PARENT[element.localName] === current.localName;\r\n    }\r\n\r\n    // Create an element for this tag.\r\n    function createElement(type, annotation) {\r\n      var tagName = TAG_NAME[type];\r\n      if (!tagName) {\r\n        return null;\r\n      }\r\n      var element = window.document.createElement(tagName);\r\n      var name = TAG_ANNOTATION[type];\r\n      if (name && annotation) {\r\n        element[name] = annotation.trim();\r\n      }\r\n      return element;\r\n    }\r\n    var rootDiv = window.document.createElement(\"div\"),\r\n      current = rootDiv,\r\n      t,\r\n      tagStack = [];\r\n    while ((t = nextToken()) !== null) {\r\n      if (t[0] === '<') {\r\n        if (t[1] === \"/\") {\r\n          // If the closing tag matches, move back up to the parent node.\r\n          if (tagStack.length && tagStack[tagStack.length - 1] === t.substr(2).replace(\">\", \"\")) {\r\n            tagStack.pop();\r\n            current = current.parentNode;\r\n          }\r\n          // Otherwise just ignore the end tag.\r\n          continue;\r\n        }\r\n        var ts = parseTimeStamp(t.substr(1, t.length - 2));\r\n        var node;\r\n        if (ts) {\r\n          // Timestamps are lead nodes as well.\r\n          node = window.document.createProcessingInstruction(\"timestamp\", ts);\r\n          current.appendChild(node);\r\n          continue;\r\n        }\r\n        var m = t.match(/^<([^.\\s/0-9>]+)(\\.[^\\s\\\\>]+)?([^>\\\\]+)?(\\\\?)>?$/);\r\n        // If we can't parse the tag, skip to the next tag.\r\n        if (!m) {\r\n          continue;\r\n        }\r\n        // Try to construct an element, and ignore the tag if we couldn't.\r\n        node = createElement(m[1], m[3]);\r\n        if (!node) {\r\n          continue;\r\n        }\r\n        // Determine if the tag should be added based on the context of where it\r\n        // is placed in the cuetext.\r\n        if (!shouldAdd(current, node)) {\r\n          continue;\r\n        }\r\n        // Set the class list (as a list of classes, separated by space).\r\n        if (m[2]) {\r\n          var classes = m[2].split('.');\r\n          classes.forEach(function (cl) {\r\n            var bgColor = /^bg_/.test(cl);\r\n            // slice out `bg_` if it's a background color\r\n            var colorName = bgColor ? cl.slice(3) : cl;\r\n            if (DEFAULT_COLOR_CLASS.hasOwnProperty(colorName)) {\r\n              var propName = bgColor ? 'background-color' : 'color';\r\n              var propValue = DEFAULT_COLOR_CLASS[colorName];\r\n              node.style[propName] = propValue;\r\n            }\r\n          });\r\n          node.className = classes.join(' ');\r\n        }\r\n        // Append the node to the current node, and enter the scope of the new\r\n        // node.\r\n        tagStack.push(m[1]);\r\n        current.appendChild(node);\r\n        current = node;\r\n        continue;\r\n      }\r\n\r\n      // Text nodes are leaf nodes.\r\n      current.appendChild(window.document.createTextNode(unescape(t)));\r\n    }\r\n    return rootDiv;\r\n  }\r\n\r\n  // This is a list of all the Unicode characters that have a strong\r\n  // right-to-left category. What this means is that these characters are\r\n  // written right-to-left for sure. It was generated by pulling all the strong\r\n  // right-to-left characters out of the Unicode data table. That table can\r\n  // found at: http://www.unicode.org/Public/UNIDATA/UnicodeData.txt\r\n  var strongRTLRanges = [[0x5be, 0x5be], [0x5c0, 0x5c0], [0x5c3, 0x5c3], [0x5c6, 0x5c6], [0x5d0, 0x5ea], [0x5f0, 0x5f4], [0x608, 0x608], [0x60b, 0x60b], [0x60d, 0x60d], [0x61b, 0x61b], [0x61e, 0x64a], [0x66d, 0x66f], [0x671, 0x6d5], [0x6e5, 0x6e6], [0x6ee, 0x6ef], [0x6fa, 0x70d], [0x70f, 0x710], [0x712, 0x72f], [0x74d, 0x7a5], [0x7b1, 0x7b1], [0x7c0, 0x7ea], [0x7f4, 0x7f5], [0x7fa, 0x7fa], [0x800, 0x815], [0x81a, 0x81a], [0x824, 0x824], [0x828, 0x828], [0x830, 0x83e], [0x840, 0x858], [0x85e, 0x85e], [0x8a0, 0x8a0], [0x8a2, 0x8ac], [0x200f, 0x200f], [0xfb1d, 0xfb1d], [0xfb1f, 0xfb28], [0xfb2a, 0xfb36], [0xfb38, 0xfb3c], [0xfb3e, 0xfb3e], [0xfb40, 0xfb41], [0xfb43, 0xfb44], [0xfb46, 0xfbc1], [0xfbd3, 0xfd3d], [0xfd50, 0xfd8f], [0xfd92, 0xfdc7], [0xfdf0, 0xfdfc], [0xfe70, 0xfe74], [0xfe76, 0xfefc], [0x10800, 0x10805], [0x10808, 0x10808], [0x1080a, 0x10835], [0x10837, 0x10838], [0x1083c, 0x1083c], [0x1083f, 0x10855], [0x10857, 0x1085f], [0x10900, 0x1091b], [0x10920, 0x10939], [0x1093f, 0x1093f], [0x10980, 0x109b7], [0x109be, 0x109bf], [0x10a00, 0x10a00], [0x10a10, 0x10a13], [0x10a15, 0x10a17], [0x10a19, 0x10a33], [0x10a40, 0x10a47], [0x10a50, 0x10a58], [0x10a60, 0x10a7f], [0x10b00, 0x10b35], [0x10b40, 0x10b55], [0x10b58, 0x10b72], [0x10b78, 0x10b7f], [0x10c00, 0x10c48], [0x1ee00, 0x1ee03], [0x1ee05, 0x1ee1f], [0x1ee21, 0x1ee22], [0x1ee24, 0x1ee24], [0x1ee27, 0x1ee27], [0x1ee29, 0x1ee32], [0x1ee34, 0x1ee37], [0x1ee39, 0x1ee39], [0x1ee3b, 0x1ee3b], [0x1ee42, 0x1ee42], [0x1ee47, 0x1ee47], [0x1ee49, 0x1ee49], [0x1ee4b, 0x1ee4b], [0x1ee4d, 0x1ee4f], [0x1ee51, 0x1ee52], [0x1ee54, 0x1ee54], [0x1ee57, 0x1ee57], [0x1ee59, 0x1ee59], [0x1ee5b, 0x1ee5b], [0x1ee5d, 0x1ee5d], [0x1ee5f, 0x1ee5f], [0x1ee61, 0x1ee62], [0x1ee64, 0x1ee64], [0x1ee67, 0x1ee6a], [0x1ee6c, 0x1ee72], [0x1ee74, 0x1ee77], [0x1ee79, 0x1ee7c], [0x1ee7e, 0x1ee7e], [0x1ee80, 0x1ee89], [0x1ee8b, 0x1ee9b], [0x1eea1, 0x1eea3], [0x1eea5, 0x1eea9], [0x1eeab, 0x1eebb], [0x10fffd, 0x10fffd]];\r\n  function isStrongRTLChar(charCode) {\r\n    for (var i = 0; i < strongRTLRanges.length; i++) {\r\n      var currentRange = strongRTLRanges[i];\r\n      if (charCode >= currentRange[0] && charCode <= currentRange[1]) {\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n  function determineBidi(cueDiv) {\r\n    var nodeStack = [],\r\n      text = \"\",\r\n      charCode;\r\n    if (!cueDiv || !cueDiv.childNodes) {\r\n      return \"ltr\";\r\n    }\r\n    function pushNodes(nodeStack, node) {\r\n      for (var i = node.childNodes.length - 1; i >= 0; i--) {\r\n        nodeStack.push(node.childNodes[i]);\r\n      }\r\n    }\r\n    function nextTextNode(nodeStack) {\r\n      if (!nodeStack || !nodeStack.length) {\r\n        return null;\r\n      }\r\n      var node = nodeStack.pop(),\r\n        text = node.textContent || node.innerText;\r\n      if (text) {\r\n        // TODO: This should match all unicode type B characters (paragraph\r\n        // separator characters). See issue #115.\r\n        var m = text.match(/^.*(\\n|\\r)/);\r\n        if (m) {\r\n          nodeStack.length = 0;\r\n          return m[0];\r\n        }\r\n        return text;\r\n      }\r\n      if (node.tagName === \"ruby\") {\r\n        return nextTextNode(nodeStack);\r\n      }\r\n      if (node.childNodes) {\r\n        pushNodes(nodeStack, node);\r\n        return nextTextNode(nodeStack);\r\n      }\r\n    }\r\n    pushNodes(nodeStack, cueDiv);\r\n    while (text = nextTextNode(nodeStack)) {\r\n      for (var i = 0; i < text.length; i++) {\r\n        charCode = text.charCodeAt(i);\r\n        if (isStrongRTLChar(charCode)) {\r\n          return \"rtl\";\r\n        }\r\n      }\r\n    }\r\n    return \"ltr\";\r\n  }\r\n  function computeLinePos(cue) {\r\n    if (typeof cue.line === \"number\" && (cue.snapToLines || cue.line >= 0 && cue.line <= 100)) {\r\n      return cue.line;\r\n    }\r\n    if (!cue.track || !cue.track.textTrackList || !cue.track.textTrackList.mediaElement) {\r\n      return -1;\r\n    }\r\n    var track = cue.track,\r\n      trackList = track.textTrackList,\r\n      count = 0;\r\n    for (var i = 0; i < trackList.length && trackList[i] !== track; i++) {\r\n      if (trackList[i].mode === \"showing\") {\r\n        count++;\r\n      }\r\n    }\r\n    return ++count * -1;\r\n  }\r\n  function StyleBox() {}\r\n\r\n  // Apply styles to a div. If there is no div passed then it defaults to the\r\n  // div on 'this'.\r\n  StyleBox.prototype.applyStyles = function (styles, div) {\r\n    div = div || this.div;\r\n    for (var prop in styles) {\r\n      if (styles.hasOwnProperty(prop)) {\r\n        div.style[prop] = styles[prop];\r\n      }\r\n    }\r\n  };\r\n  StyleBox.prototype.formatStyle = function (val, unit) {\r\n    return val === 0 ? 0 : val + unit;\r\n  };\r\n\r\n  // Constructs the computed display state of the cue (a div). Places the div\r\n  // into the overlay which should be a block level element (usually a div).\r\n  function CueStyleBox(window, cue, styleOptions) {\r\n    StyleBox.call(this);\r\n    this.cue = cue;\r\n\r\n    // Parse our cue's text into a DOM tree rooted at 'cueDiv'. This div will\r\n    // have inline positioning and will function as the cue background box.\r\n    this.cueDiv = parseContent(window, cue.text);\r\n    var styles = {\r\n      color: \"rgba(255, 255, 255, 1)\",\r\n      backgroundColor: \"rgba(0, 0, 0, 0.8)\",\r\n      position: \"relative\",\r\n      left: 0,\r\n      right: 0,\r\n      top: 0,\r\n      bottom: 0,\r\n      display: \"inline\",\r\n      writingMode: cue.vertical === \"\" ? \"horizontal-tb\" : cue.vertical === \"lr\" ? \"vertical-lr\" : \"vertical-rl\",\r\n      unicodeBidi: \"plaintext\"\r\n    };\r\n    this.applyStyles(styles, this.cueDiv);\r\n\r\n    // Create an absolutely positioned div that will be used to position the cue\r\n    // div. Note, all WebVTT cue-setting alignments are equivalent to the CSS\r\n    // mirrors of them except middle instead of center on Safari.\r\n    this.div = window.document.createElement(\"div\");\r\n    styles = {\r\n      direction: determineBidi(this.cueDiv),\r\n      writingMode: cue.vertical === \"\" ? \"horizontal-tb\" : cue.vertical === \"lr\" ? \"vertical-lr\" : \"vertical-rl\",\r\n      unicodeBidi: \"plaintext\",\r\n      textAlign: cue.align === \"middle\" ? \"center\" : cue.align,\r\n      font: styleOptions.font,\r\n      whiteSpace: \"pre-line\",\r\n      position: \"absolute\"\r\n    };\r\n    this.applyStyles(styles);\r\n    this.div.appendChild(this.cueDiv);\r\n\r\n    // Calculate the distance from the reference edge of the viewport to the text\r\n    // position of the cue box. The reference edge will be resolved later when\r\n    // the box orientation styles are applied.\r\n    var textPos = 0;\r\n    switch (cue.positionAlign) {\r\n      case \"start\":\r\n      case \"line-left\":\r\n        textPos = cue.position;\r\n        break;\r\n      case \"center\":\r\n        textPos = cue.position - cue.size / 2;\r\n        break;\r\n      case \"end\":\r\n      case \"line-right\":\r\n        textPos = cue.position - cue.size;\r\n        break;\r\n    }\r\n\r\n    // Horizontal box orientation; textPos is the distance from the left edge of the\r\n    // area to the left edge of the box and cue.size is the distance extending to\r\n    // the right from there.\r\n    if (cue.vertical === \"\") {\r\n      this.applyStyles({\r\n        left: this.formatStyle(textPos, \"%\"),\r\n        width: this.formatStyle(cue.size, \"%\")\r\n      });\r\n      // Vertical box orientation; textPos is the distance from the top edge of the\r\n      // area to the top edge of the box and cue.size is the height extending\r\n      // downwards from there.\r\n    } else {\r\n      this.applyStyles({\r\n        top: this.formatStyle(textPos, \"%\"),\r\n        height: this.formatStyle(cue.size, \"%\")\r\n      });\r\n    }\r\n    this.move = function (box) {\r\n      this.applyStyles({\r\n        top: this.formatStyle(box.top, \"px\"),\r\n        bottom: this.formatStyle(box.bottom, \"px\"),\r\n        left: this.formatStyle(box.left, \"px\"),\r\n        right: this.formatStyle(box.right, \"px\"),\r\n        height: this.formatStyle(box.height, \"px\"),\r\n        width: this.formatStyle(box.width, \"px\")\r\n      });\r\n    };\r\n  }\r\n  CueStyleBox.prototype = _objCreate(StyleBox.prototype);\r\n  CueStyleBox.prototype.constructor = CueStyleBox;\r\n\r\n  // Represents the co-ordinates of an Element in a way that we can easily\r\n  // compute things with such as if it overlaps or intersects with another Element.\r\n  // Can initialize it with either a StyleBox or another BoxPosition.\r\n  function BoxPosition(obj) {\r\n    // Either a BoxPosition was passed in and we need to copy it, or a StyleBox\r\n    // was passed in and we need to copy the results of 'getBoundingClientRect'\r\n    // as the object returned is readonly. All co-ordinate values are in reference\r\n    // to the viewport origin (top left).\r\n    var lh, height, width, top;\r\n    if (obj.div) {\r\n      height = obj.div.offsetHeight;\r\n      width = obj.div.offsetWidth;\r\n      top = obj.div.offsetTop;\r\n      var rects = (rects = obj.div.childNodes) && (rects = rects[0]) && rects.getClientRects && rects.getClientRects();\r\n      obj = obj.div.getBoundingClientRect();\r\n      // In certain cases the outter div will be slightly larger then the sum of\r\n      // the inner div's lines. This could be due to bold text, etc, on some platforms.\r\n      // In this case we should get the average line height and use that. This will\r\n      // result in the desired behaviour.\r\n      lh = rects ? Math.max(rects[0] && rects[0].height || 0, obj.height / rects.length) : 0;\r\n    }\r\n    this.left = obj.left;\r\n    this.right = obj.right;\r\n    this.top = obj.top || top;\r\n    this.height = obj.height || height;\r\n    this.bottom = obj.bottom || top + (obj.height || height);\r\n    this.width = obj.width || width;\r\n    this.lineHeight = lh !== undefined ? lh : obj.lineHeight;\r\n  }\r\n\r\n  // Move the box along a particular axis. Optionally pass in an amount to move\r\n  // the box. If no amount is passed then the default is the line height of the\r\n  // box.\r\n  BoxPosition.prototype.move = function (axis, toMove) {\r\n    toMove = toMove !== undefined ? toMove : this.lineHeight;\r\n    switch (axis) {\r\n      case \"+x\":\r\n        this.left += toMove;\r\n        this.right += toMove;\r\n        break;\r\n      case \"-x\":\r\n        this.left -= toMove;\r\n        this.right -= toMove;\r\n        break;\r\n      case \"+y\":\r\n        this.top += toMove;\r\n        this.bottom += toMove;\r\n        break;\r\n      case \"-y\":\r\n        this.top -= toMove;\r\n        this.bottom -= toMove;\r\n        break;\r\n    }\r\n  };\r\n\r\n  // Check if this box overlaps another box, b2.\r\n  BoxPosition.prototype.overlaps = function (b2) {\r\n    return this.left < b2.right && this.right > b2.left && this.top < b2.bottom && this.bottom > b2.top;\r\n  };\r\n\r\n  // Check if this box overlaps any other boxes in boxes.\r\n  BoxPosition.prototype.overlapsAny = function (boxes) {\r\n    for (var i = 0; i < boxes.length; i++) {\r\n      if (this.overlaps(boxes[i])) {\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  };\r\n\r\n  // Check if this box is within another box.\r\n  BoxPosition.prototype.within = function (container) {\r\n    return this.top >= container.top && this.bottom <= container.bottom && this.left >= container.left && this.right <= container.right;\r\n  };\r\n\r\n  // Check if this box is entirely within the container or it is overlapping\r\n  // on the edge opposite of the axis direction passed. For example, if \"+x\" is\r\n  // passed and the box is overlapping on the left edge of the container, then\r\n  // return true.\r\n  BoxPosition.prototype.overlapsOppositeAxis = function (container, axis) {\r\n    switch (axis) {\r\n      case \"+x\":\r\n        return this.left < container.left;\r\n      case \"-x\":\r\n        return this.right > container.right;\r\n      case \"+y\":\r\n        return this.top < container.top;\r\n      case \"-y\":\r\n        return this.bottom > container.bottom;\r\n    }\r\n  };\r\n\r\n  // Find the percentage of the area that this box is overlapping with another\r\n  // box.\r\n  BoxPosition.prototype.intersectPercentage = function (b2) {\r\n    var x = Math.max(0, Math.min(this.right, b2.right) - Math.max(this.left, b2.left)),\r\n      y = Math.max(0, Math.min(this.bottom, b2.bottom) - Math.max(this.top, b2.top)),\r\n      intersectArea = x * y;\r\n    return intersectArea / (this.height * this.width);\r\n  };\r\n\r\n  // Convert the positions from this box to CSS compatible positions using\r\n  // the reference container's positions. This has to be done because this\r\n  // box's positions are in reference to the viewport origin, whereas, CSS\r\n  // values are in referecne to their respective edges.\r\n  BoxPosition.prototype.toCSSCompatValues = function (reference) {\r\n    return {\r\n      top: this.top - reference.top,\r\n      bottom: reference.bottom - this.bottom,\r\n      left: this.left - reference.left,\r\n      right: reference.right - this.right,\r\n      height: this.height,\r\n      width: this.width\r\n    };\r\n  };\r\n\r\n  // Get an object that represents the box's position without anything extra.\r\n  // Can pass a StyleBox, HTMLElement, or another BoxPositon.\r\n  BoxPosition.getSimpleBoxPosition = function (obj) {\r\n    var height = obj.div ? obj.div.offsetHeight : obj.tagName ? obj.offsetHeight : 0;\r\n    var width = obj.div ? obj.div.offsetWidth : obj.tagName ? obj.offsetWidth : 0;\r\n    var top = obj.div ? obj.div.offsetTop : obj.tagName ? obj.offsetTop : 0;\r\n    obj = obj.div ? obj.div.getBoundingClientRect() : obj.tagName ? obj.getBoundingClientRect() : obj;\r\n    var ret = {\r\n      left: obj.left,\r\n      right: obj.right,\r\n      top: obj.top || top,\r\n      height: obj.height || height,\r\n      bottom: obj.bottom || top + (obj.height || height),\r\n      width: obj.width || width\r\n    };\r\n    return ret;\r\n  };\r\n\r\n  // Move a StyleBox to its specified, or next best, position. The containerBox\r\n  // is the box that contains the StyleBox, such as a div. boxPositions are\r\n  // a list of other boxes that the styleBox can't overlap with.\r\n  function moveBoxToLinePosition(window, styleBox, containerBox, boxPositions) {\r\n    // Find the best position for a cue box, b, on the video. The axis parameter\r\n    // is a list of axis, the order of which, it will move the box along. For example:\r\n    // Passing [\"+x\", \"-x\"] will move the box first along the x axis in the positive\r\n    // direction. If it doesn't find a good position for it there it will then move\r\n    // it along the x axis in the negative direction.\r\n    function findBestPosition(b, axis) {\r\n      var bestPosition,\r\n        specifiedPosition = new BoxPosition(b),\r\n        percentage = 1; // Highest possible so the first thing we get is better.\r\n\r\n      for (var i = 0; i < axis.length; i++) {\r\n        while (b.overlapsOppositeAxis(containerBox, axis[i]) || b.within(containerBox) && b.overlapsAny(boxPositions)) {\r\n          b.move(axis[i]);\r\n        }\r\n        // We found a spot where we aren't overlapping anything. This is our\r\n        // best position.\r\n        if (b.within(containerBox)) {\r\n          return b;\r\n        }\r\n        var p = b.intersectPercentage(containerBox);\r\n        // If we're outside the container box less then we were on our last try\r\n        // then remember this position as the best position.\r\n        if (percentage > p) {\r\n          bestPosition = new BoxPosition(b);\r\n          percentage = p;\r\n        }\r\n        // Reset the box position to the specified position.\r\n        b = new BoxPosition(specifiedPosition);\r\n      }\r\n      return bestPosition || specifiedPosition;\r\n    }\r\n    var boxPosition = new BoxPosition(styleBox),\r\n      cue = styleBox.cue,\r\n      linePos = computeLinePos(cue),\r\n      axis = [];\r\n\r\n    // If we have a line number to align the cue to.\r\n    if (cue.snapToLines) {\r\n      var size;\r\n      switch (cue.vertical) {\r\n        case \"\":\r\n          axis = [\"+y\", \"-y\"];\r\n          size = \"height\";\r\n          break;\r\n        case \"rl\":\r\n          axis = [\"+x\", \"-x\"];\r\n          size = \"width\";\r\n          break;\r\n        case \"lr\":\r\n          axis = [\"-x\", \"+x\"];\r\n          size = \"width\";\r\n          break;\r\n      }\r\n      var step = boxPosition.lineHeight,\r\n        position = step * Math.round(linePos),\r\n        maxPosition = containerBox[size] + step,\r\n        initialAxis = axis[0];\r\n\r\n      // If the specified intial position is greater then the max position then\r\n      // clamp the box to the amount of steps it would take for the box to\r\n      // reach the max position.\r\n      if (Math.abs(position) > maxPosition) {\r\n        position = position < 0 ? -1 : 1;\r\n        position *= Math.ceil(maxPosition / step) * step;\r\n      }\r\n\r\n      // If computed line position returns negative then line numbers are\r\n      // relative to the bottom of the video instead of the top. Therefore, we\r\n      // need to increase our initial position by the length or width of the\r\n      // video, depending on the writing direction, and reverse our axis directions.\r\n      if (linePos < 0) {\r\n        position += cue.vertical === \"\" ? containerBox.height : containerBox.width;\r\n        axis = axis.reverse();\r\n      }\r\n\r\n      // Move the box to the specified position. This may not be its best\r\n      // position.\r\n      boxPosition.move(initialAxis, position);\r\n    } else {\r\n      // If we have a percentage line value for the cue.\r\n      var calculatedPercentage = boxPosition.lineHeight / containerBox.height * 100;\r\n      switch (cue.lineAlign) {\r\n        case \"center\":\r\n          linePos -= calculatedPercentage / 2;\r\n          break;\r\n        case \"end\":\r\n          linePos -= calculatedPercentage;\r\n          break;\r\n      }\r\n\r\n      // Apply initial line position to the cue box.\r\n      switch (cue.vertical) {\r\n        case \"\":\r\n          styleBox.applyStyles({\r\n            top: styleBox.formatStyle(linePos, \"%\")\r\n          });\r\n          break;\r\n        case \"rl\":\r\n          styleBox.applyStyles({\r\n            left: styleBox.formatStyle(linePos, \"%\")\r\n          });\r\n          break;\r\n        case \"lr\":\r\n          styleBox.applyStyles({\r\n            right: styleBox.formatStyle(linePos, \"%\")\r\n          });\r\n          break;\r\n      }\r\n      axis = [\"+y\", \"-x\", \"+x\", \"-y\"];\r\n\r\n      // Get the box position again after we've applied the specified positioning\r\n      // to it.\r\n      boxPosition = new BoxPosition(styleBox);\r\n    }\r\n    var bestPosition = findBestPosition(boxPosition, axis);\r\n    styleBox.move(bestPosition.toCSSCompatValues(containerBox));\r\n  }\r\n  function WebVTT$1() {\r\n    // Nothing\r\n  }\r\n\r\n  // Helper to allow strings to be decoded instead of the default binary utf8 data.\r\n  WebVTT$1.StringDecoder = function () {\r\n    return {\r\n      decode: function (data) {\r\n        if (!data) {\r\n          return \"\";\r\n        }\r\n        if (typeof data !== \"string\") {\r\n          throw new Error(\"Error - expected string data.\");\r\n        }\r\n        return decodeURIComponent(encodeURIComponent(data));\r\n      }\r\n    };\r\n  };\r\n  WebVTT$1.convertCueToDOMTree = function (window, cuetext) {\r\n    if (!window || !cuetext) {\r\n      return null;\r\n    }\r\n    return parseContent(window, cuetext);\r\n  };\r\n  var FONT_SIZE_PERCENT = 0.05;\r\n  var FONT_STYLE = \"sans-serif\";\r\n  var CUE_BACKGROUND_PADDING = \"1.5%\";\r\n\r\n  // Runs the processing model over the cues and regions passed to it.\r\n  // @param overlay A block level element (usually a div) that the computed cues\r\n  //                and regions will be placed into.\r\n  WebVTT$1.processCues = function (window, cues, overlay) {\r\n    if (!window || !cues || !overlay) {\r\n      return null;\r\n    }\r\n\r\n    // Remove all previous children.\r\n    while (overlay.firstChild) {\r\n      overlay.removeChild(overlay.firstChild);\r\n    }\r\n    var paddedOverlay = window.document.createElement(\"div\");\r\n    paddedOverlay.style.position = \"absolute\";\r\n    paddedOverlay.style.left = \"0\";\r\n    paddedOverlay.style.right = \"0\";\r\n    paddedOverlay.style.top = \"0\";\r\n    paddedOverlay.style.bottom = \"0\";\r\n    paddedOverlay.style.margin = CUE_BACKGROUND_PADDING;\r\n    overlay.appendChild(paddedOverlay);\r\n\r\n    // Determine if we need to compute the display states of the cues. This could\r\n    // be the case if a cue's state has been changed since the last computation or\r\n    // if it has not been computed yet.\r\n    function shouldCompute(cues) {\r\n      for (var i = 0; i < cues.length; i++) {\r\n        if (cues[i].hasBeenReset || !cues[i].displayState) {\r\n          return true;\r\n        }\r\n      }\r\n      return false;\r\n    }\r\n\r\n    // We don't need to recompute the cues' display states. Just reuse them.\r\n    if (!shouldCompute(cues)) {\r\n      for (var i = 0; i < cues.length; i++) {\r\n        paddedOverlay.appendChild(cues[i].displayState);\r\n      }\r\n      return;\r\n    }\r\n    var boxPositions = [],\r\n      containerBox = BoxPosition.getSimpleBoxPosition(paddedOverlay),\r\n      fontSize = Math.round(containerBox.height * FONT_SIZE_PERCENT * 100) / 100;\r\n    var styleOptions = {\r\n      font: fontSize + \"px \" + FONT_STYLE\r\n    };\r\n    (function () {\r\n      var styleBox, cue;\r\n      for (var i = 0; i < cues.length; i++) {\r\n        cue = cues[i];\r\n\r\n        // Compute the intial position and styles of the cue div.\r\n        styleBox = new CueStyleBox(window, cue, styleOptions);\r\n        paddedOverlay.appendChild(styleBox.div);\r\n\r\n        // Move the cue div to it's correct line position.\r\n        moveBoxToLinePosition(window, styleBox, containerBox, boxPositions);\r\n\r\n        // Remember the computed div so that we don't have to recompute it later\r\n        // if we don't have too.\r\n        cue.displayState = styleBox.div;\r\n        boxPositions.push(BoxPosition.getSimpleBoxPosition(styleBox));\r\n      }\r\n    })();\r\n  };\r\n  WebVTT$1.Parser = function (window, vttjs, decoder) {\r\n    if (!decoder) {\r\n      decoder = vttjs;\r\n      vttjs = {};\r\n    }\r\n    if (!vttjs) {\r\n      vttjs = {};\r\n    }\r\n    this.window = window;\r\n    this.vttjs = vttjs;\r\n    this.state = \"INITIAL\";\r\n    this.buffer = \"\";\r\n    this.decoder = decoder || new TextDecoder(\"utf8\");\r\n    this.regionList = [];\r\n  };\r\n  WebVTT$1.Parser.prototype = {\r\n    // If the error is a ParsingError then report it to the consumer if\r\n    // possible. If it's not a ParsingError then throw it like normal.\r\n    reportOrThrowError: function (e) {\r\n      if (e instanceof ParsingError) {\r\n        this.onparsingerror && this.onparsingerror(e);\r\n      } else {\r\n        throw e;\r\n      }\r\n    },\r\n    parse: function (data) {\r\n      var self = this;\r\n\r\n      // If there is no data then we won't decode it, but will just try to parse\r\n      // whatever is in buffer already. This may occur in circumstances, for\r\n      // example when flush() is called.\r\n      if (data) {\r\n        // Try to decode the data that we received.\r\n        self.buffer += self.decoder.decode(data, {\r\n          stream: true\r\n        });\r\n      }\r\n      function collectNextLine() {\r\n        var buffer = self.buffer;\r\n        var pos = 0;\r\n        while (pos < buffer.length && buffer[pos] !== '\\r' && buffer[pos] !== '\\n') {\r\n          ++pos;\r\n        }\r\n        var line = buffer.substr(0, pos);\r\n        // Advance the buffer early in case we fail below.\r\n        if (buffer[pos] === '\\r') {\r\n          ++pos;\r\n        }\r\n        if (buffer[pos] === '\\n') {\r\n          ++pos;\r\n        }\r\n        self.buffer = buffer.substr(pos);\r\n        return line;\r\n      }\r\n\r\n      // 3.4 WebVTT region and WebVTT region settings syntax\r\n      function parseRegion(input) {\r\n        var settings = new Settings();\r\n        parseOptions(input, function (k, v) {\r\n          switch (k) {\r\n            case \"id\":\r\n              settings.set(k, v);\r\n              break;\r\n            case \"width\":\r\n              settings.percent(k, v);\r\n              break;\r\n            case \"lines\":\r\n              settings.integer(k, v);\r\n              break;\r\n            case \"regionanchor\":\r\n            case \"viewportanchor\":\r\n              var xy = v.split(',');\r\n              if (xy.length !== 2) {\r\n                break;\r\n              }\r\n              // We have to make sure both x and y parse, so use a temporary\r\n              // settings object here.\r\n              var anchor = new Settings();\r\n              anchor.percent(\"x\", xy[0]);\r\n              anchor.percent(\"y\", xy[1]);\r\n              if (!anchor.has(\"x\") || !anchor.has(\"y\")) {\r\n                break;\r\n              }\r\n              settings.set(k + \"X\", anchor.get(\"x\"));\r\n              settings.set(k + \"Y\", anchor.get(\"y\"));\r\n              break;\r\n            case \"scroll\":\r\n              settings.alt(k, v, [\"up\"]);\r\n              break;\r\n          }\r\n        }, /=/, /\\s/);\r\n\r\n        // Create the region, using default values for any values that were not\r\n        // specified.\r\n        if (settings.has(\"id\")) {\r\n          var region = new (self.vttjs.VTTRegion || self.window.VTTRegion)();\r\n          region.width = settings.get(\"width\", 100);\r\n          region.lines = settings.get(\"lines\", 3);\r\n          region.regionAnchorX = settings.get(\"regionanchorX\", 0);\r\n          region.regionAnchorY = settings.get(\"regionanchorY\", 100);\r\n          region.viewportAnchorX = settings.get(\"viewportanchorX\", 0);\r\n          region.viewportAnchorY = settings.get(\"viewportanchorY\", 100);\r\n          region.scroll = settings.get(\"scroll\", \"\");\r\n          // Register the region.\r\n          self.onregion && self.onregion(region);\r\n          // Remember the VTTRegion for later in case we parse any VTTCues that\r\n          // reference it.\r\n          self.regionList.push({\r\n            id: settings.get(\"id\"),\r\n            region: region\r\n          });\r\n        }\r\n      }\r\n\r\n      // draft-pantos-http-live-streaming-20\r\n      // https://tools.ietf.org/html/draft-pantos-http-live-streaming-20#section-3.5\r\n      // 3.5 WebVTT\r\n      function parseTimestampMap(input) {\r\n        var settings = new Settings();\r\n        parseOptions(input, function (k, v) {\r\n          switch (k) {\r\n            case \"MPEGT\":\r\n              settings.integer(k + 'S', v);\r\n              break;\r\n            case \"LOCA\":\r\n              settings.set(k + 'L', parseTimeStamp(v));\r\n              break;\r\n          }\r\n        }, /[^\\d]:/, /,/);\r\n        self.ontimestampmap && self.ontimestampmap({\r\n          \"MPEGTS\": settings.get(\"MPEGTS\"),\r\n          \"LOCAL\": settings.get(\"LOCAL\")\r\n        });\r\n      }\r\n\r\n      // 3.2 WebVTT metadata header syntax\r\n      function parseHeader(input) {\r\n        if (input.match(/X-TIMESTAMP-MAP/)) {\r\n          // This line contains HLS X-TIMESTAMP-MAP metadata\r\n          parseOptions(input, function (k, v) {\r\n            switch (k) {\r\n              case \"X-TIMESTAMP-MAP\":\r\n                parseTimestampMap(v);\r\n                break;\r\n            }\r\n          }, /=/);\r\n        } else {\r\n          parseOptions(input, function (k, v) {\r\n            switch (k) {\r\n              case \"Region\":\r\n                // 3.3 WebVTT region metadata header syntax\r\n                parseRegion(v);\r\n                break;\r\n            }\r\n          }, /:/);\r\n        }\r\n      }\r\n\r\n      // 5.1 WebVTT file parsing.\r\n      try {\r\n        var line;\r\n        if (self.state === \"INITIAL\") {\r\n          // We can't start parsing until we have the first line.\r\n          if (!/\\r\\n|\\n/.test(self.buffer)) {\r\n            return this;\r\n          }\r\n          line = collectNextLine();\r\n          var m = line.match(/^WEBVTT([ \\t].*)?$/);\r\n          if (!m || !m[0]) {\r\n            throw new ParsingError(ParsingError.Errors.BadSignature);\r\n          }\r\n          self.state = \"HEADER\";\r\n        }\r\n        var alreadyCollectedLine = false;\r\n        while (self.buffer) {\r\n          // We can't parse a line until we have the full line.\r\n          if (!/\\r\\n|\\n/.test(self.buffer)) {\r\n            return this;\r\n          }\r\n          if (!alreadyCollectedLine) {\r\n            line = collectNextLine();\r\n          } else {\r\n            alreadyCollectedLine = false;\r\n          }\r\n          switch (self.state) {\r\n            case \"HEADER\":\r\n              // 13-18 - Allow a header (metadata) under the WEBVTT line.\r\n              if (/:/.test(line)) {\r\n                parseHeader(line);\r\n              } else if (!line) {\r\n                // An empty line terminates the header and starts the body (cues).\r\n                self.state = \"ID\";\r\n              }\r\n              continue;\r\n            case \"NOTE\":\r\n              // Ignore NOTE blocks.\r\n              if (!line) {\r\n                self.state = \"ID\";\r\n              }\r\n              continue;\r\n            case \"ID\":\r\n              // Check for the start of NOTE blocks.\r\n              if (/^NOTE($|[ \\t])/.test(line)) {\r\n                self.state = \"NOTE\";\r\n                break;\r\n              }\r\n              // 19-29 - Allow any number of line terminators, then initialize new cue values.\r\n              if (!line) {\r\n                continue;\r\n              }\r\n              self.cue = new (self.vttjs.VTTCue || self.window.VTTCue)(0, 0, \"\");\r\n              // Safari still uses the old middle value and won't accept center\r\n              try {\r\n                self.cue.align = \"center\";\r\n              } catch (e) {\r\n                self.cue.align = \"middle\";\r\n              }\r\n              self.state = \"CUE\";\r\n              // 30-39 - Check if self line contains an optional identifier or timing data.\r\n              if (line.indexOf(\"-->\") === -1) {\r\n                self.cue.id = line;\r\n                continue;\r\n              }\r\n            // Process line as start of a cue.\r\n            /*falls through*/\r\n            case \"CUE\":\r\n              // 40 - Collect cue timings and settings.\r\n              try {\r\n                parseCue(line, self.cue, self.regionList);\r\n              } catch (e) {\r\n                self.reportOrThrowError(e);\r\n                // In case of an error ignore rest of the cue.\r\n                self.cue = null;\r\n                self.state = \"BADCUE\";\r\n                continue;\r\n              }\r\n              self.state = \"CUETEXT\";\r\n              continue;\r\n            case \"CUETEXT\":\r\n              var hasSubstring = line.indexOf(\"-->\") !== -1;\r\n              // 34 - If we have an empty line then report the cue.\r\n              // 35 - If we have the special substring '-->' then report the cue,\r\n              // but do not collect the line as we need to process the current\r\n              // one as a new cue.\r\n              if (!line || hasSubstring && (alreadyCollectedLine = true)) {\r\n                // We are done parsing self cue.\r\n                self.oncue && self.oncue(self.cue);\r\n                self.cue = null;\r\n                self.state = \"ID\";\r\n                continue;\r\n              }\r\n              if (self.cue.text) {\r\n                self.cue.text += \"\\n\";\r\n              }\r\n              self.cue.text += line.replace(/\\u2028/g, '\\n').replace(/u2029/g, '\\n');\r\n              continue;\r\n            case \"BADCUE\":\r\n              // BADCUE\r\n              // 54-62 - Collect and discard the remaining cue.\r\n              if (!line) {\r\n                self.state = \"ID\";\r\n              }\r\n              continue;\r\n          }\r\n        }\r\n      } catch (e) {\r\n        self.reportOrThrowError(e);\r\n\r\n        // If we are currently parsing a cue, report what we have.\r\n        if (self.state === \"CUETEXT\" && self.cue && self.oncue) {\r\n          self.oncue(self.cue);\r\n        }\r\n        self.cue = null;\r\n        // Enter BADWEBVTT state if header was not parsed correctly otherwise\r\n        // another exception occurred so enter BADCUE state.\r\n        self.state = self.state === \"INITIAL\" ? \"BADWEBVTT\" : \"BADCUE\";\r\n      }\r\n      return this;\r\n    },\r\n    flush: function () {\r\n      var self = this;\r\n      try {\r\n        // Finish decoding the stream.\r\n        self.buffer += self.decoder.decode();\r\n        // Synthesize the end of the current cue or region.\r\n        if (self.cue || self.state === \"HEADER\") {\r\n          self.buffer += \"\\n\\n\";\r\n          self.parse();\r\n        }\r\n        // If we've flushed, parsed, and we're still on the INITIAL state then\r\n        // that means we don't have enough of the stream to parse the first\r\n        // line.\r\n        if (self.state === \"INITIAL\") {\r\n          throw new ParsingError(ParsingError.Errors.BadSignature);\r\n        }\r\n      } catch (e) {\r\n        self.reportOrThrowError(e);\r\n      }\r\n      self.onflush && self.onflush();\r\n      return this;\r\n    }\r\n  };\r\n  var vtt = WebVTT$1;\r\n\r\n  /**\r\n   * Copyright 2013 vtt.js Contributors\r\n   *\r\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n   * you may not use this file except in compliance with the License.\r\n   * You may obtain a copy of the License at\r\n   *\r\n   *   http://www.apache.org/licenses/LICENSE-2.0\r\n   *\r\n   * Unless required by applicable law or agreed to in writing, software\r\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n   * See the License for the specific language governing permissions and\r\n   * limitations under the License.\r\n   */\r\n\r\n  var autoKeyword = \"auto\";\r\n  var directionSetting = {\r\n    \"\": 1,\r\n    \"lr\": 1,\r\n    \"rl\": 1\r\n  };\r\n  var alignSetting = {\r\n    \"start\": 1,\r\n    \"center\": 1,\r\n    \"end\": 1,\r\n    \"left\": 1,\r\n    \"right\": 1,\r\n    \"auto\": 1,\r\n    \"line-left\": 1,\r\n    \"line-right\": 1\r\n  };\r\n  function findDirectionSetting(value) {\r\n    if (typeof value !== \"string\") {\r\n      return false;\r\n    }\r\n    var dir = directionSetting[value.toLowerCase()];\r\n    return dir ? value.toLowerCase() : false;\r\n  }\r\n  function findAlignSetting(value) {\r\n    if (typeof value !== \"string\") {\r\n      return false;\r\n    }\r\n    var align = alignSetting[value.toLowerCase()];\r\n    return align ? value.toLowerCase() : false;\r\n  }\r\n  function VTTCue(startTime, endTime, text) {\r\n    /**\r\n     * Shim implementation specific properties. These properties are not in\r\n     * the spec.\r\n     */\r\n\r\n    // Lets us know when the VTTCue's data has changed in such a way that we need\r\n    // to recompute its display state. This lets us compute its display state\r\n    // lazily.\r\n    this.hasBeenReset = false;\r\n\r\n    /**\r\n     * VTTCue and TextTrackCue properties\r\n     * http://dev.w3.org/html5/webvtt/#vttcue-interface\r\n     */\r\n\r\n    var _id = \"\";\r\n    var _pauseOnExit = false;\r\n    var _startTime = startTime;\r\n    var _endTime = endTime;\r\n    var _text = text;\r\n    var _region = null;\r\n    var _vertical = \"\";\r\n    var _snapToLines = true;\r\n    var _line = \"auto\";\r\n    var _lineAlign = \"start\";\r\n    var _position = \"auto\";\r\n    var _positionAlign = \"auto\";\r\n    var _size = 100;\r\n    var _align = \"center\";\r\n    Object.defineProperties(this, {\r\n      \"id\": {\r\n        enumerable: true,\r\n        get: function () {\r\n          return _id;\r\n        },\r\n        set: function (value) {\r\n          _id = \"\" + value;\r\n        }\r\n      },\r\n      \"pauseOnExit\": {\r\n        enumerable: true,\r\n        get: function () {\r\n          return _pauseOnExit;\r\n        },\r\n        set: function (value) {\r\n          _pauseOnExit = !!value;\r\n        }\r\n      },\r\n      \"startTime\": {\r\n        enumerable: true,\r\n        get: function () {\r\n          return _startTime;\r\n        },\r\n        set: function (value) {\r\n          if (typeof value !== \"number\") {\r\n            throw new TypeError(\"Start time must be set to a number.\");\r\n          }\r\n          _startTime = value;\r\n          this.hasBeenReset = true;\r\n        }\r\n      },\r\n      \"endTime\": {\r\n        enumerable: true,\r\n        get: function () {\r\n          return _endTime;\r\n        },\r\n        set: function (value) {\r\n          if (typeof value !== \"number\") {\r\n            throw new TypeError(\"End time must be set to a number.\");\r\n          }\r\n          _endTime = value;\r\n          this.hasBeenReset = true;\r\n        }\r\n      },\r\n      \"text\": {\r\n        enumerable: true,\r\n        get: function () {\r\n          return _text;\r\n        },\r\n        set: function (value) {\r\n          _text = \"\" + value;\r\n          this.hasBeenReset = true;\r\n        }\r\n      },\r\n      \"region\": {\r\n        enumerable: true,\r\n        get: function () {\r\n          return _region;\r\n        },\r\n        set: function (value) {\r\n          _region = value;\r\n          this.hasBeenReset = true;\r\n        }\r\n      },\r\n      \"vertical\": {\r\n        enumerable: true,\r\n        get: function () {\r\n          return _vertical;\r\n        },\r\n        set: function (value) {\r\n          var setting = findDirectionSetting(value);\r\n          // Have to check for false because the setting an be an empty string.\r\n          if (setting === false) {\r\n            throw new SyntaxError(\"Vertical: an invalid or illegal direction string was specified.\");\r\n          }\r\n          _vertical = setting;\r\n          this.hasBeenReset = true;\r\n        }\r\n      },\r\n      \"snapToLines\": {\r\n        enumerable: true,\r\n        get: function () {\r\n          return _snapToLines;\r\n        },\r\n        set: function (value) {\r\n          _snapToLines = !!value;\r\n          this.hasBeenReset = true;\r\n        }\r\n      },\r\n      \"line\": {\r\n        enumerable: true,\r\n        get: function () {\r\n          return _line;\r\n        },\r\n        set: function (value) {\r\n          if (typeof value !== \"number\" && value !== autoKeyword) {\r\n            throw new SyntaxError(\"Line: an invalid number or illegal string was specified.\");\r\n          }\r\n          _line = value;\r\n          this.hasBeenReset = true;\r\n        }\r\n      },\r\n      \"lineAlign\": {\r\n        enumerable: true,\r\n        get: function () {\r\n          return _lineAlign;\r\n        },\r\n        set: function (value) {\r\n          var setting = findAlignSetting(value);\r\n          if (!setting) {\r\n            console.warn(\"lineAlign: an invalid or illegal string was specified.\");\r\n          } else {\r\n            _lineAlign = setting;\r\n            this.hasBeenReset = true;\r\n          }\r\n        }\r\n      },\r\n      \"position\": {\r\n        enumerable: true,\r\n        get: function () {\r\n          return _position;\r\n        },\r\n        set: function (value) {\r\n          if (value < 0 || value > 100) {\r\n            throw new Error(\"Position must be between 0 and 100.\");\r\n          }\r\n          _position = value;\r\n          this.hasBeenReset = true;\r\n        }\r\n      },\r\n      \"positionAlign\": {\r\n        enumerable: true,\r\n        get: function () {\r\n          return _positionAlign;\r\n        },\r\n        set: function (value) {\r\n          var setting = findAlignSetting(value);\r\n          if (!setting) {\r\n            console.warn(\"positionAlign: an invalid or illegal string was specified.\");\r\n          } else {\r\n            _positionAlign = setting;\r\n            this.hasBeenReset = true;\r\n          }\r\n        }\r\n      },\r\n      \"size\": {\r\n        enumerable: true,\r\n        get: function () {\r\n          return _size;\r\n        },\r\n        set: function (value) {\r\n          if (value < 0 || value > 100) {\r\n            throw new Error(\"Size must be between 0 and 100.\");\r\n          }\r\n          _size = value;\r\n          this.hasBeenReset = true;\r\n        }\r\n      },\r\n      \"align\": {\r\n        enumerable: true,\r\n        get: function () {\r\n          return _align;\r\n        },\r\n        set: function (value) {\r\n          var setting = findAlignSetting(value);\r\n          if (!setting) {\r\n            throw new SyntaxError(\"align: an invalid or illegal alignment string was specified.\");\r\n          }\r\n          _align = setting;\r\n          this.hasBeenReset = true;\r\n        }\r\n      }\r\n    });\r\n\r\n    /**\r\n     * Other <track> spec defined properties\r\n     */\r\n\r\n    // http://www.whatwg.org/specs/web-apps/current-work/multipage/the-video-element.html#text-track-cue-display-state\r\n    this.displayState = undefined;\r\n  }\r\n\r\n  /**\r\n   * VTTCue methods\r\n   */\r\n\r\n  VTTCue.prototype.getCueAsHTML = function () {\r\n    // Assume WebVTT.convertCueToDOMTree is on the global.\r\n    return WebVTT.convertCueToDOMTree(window, this.text);\r\n  };\r\n  var vttcue = VTTCue;\r\n\r\n  /**\r\n   * Copyright 2013 vtt.js Contributors\r\n   *\r\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n   * you may not use this file except in compliance with the License.\r\n   * You may obtain a copy of the License at\r\n   *\r\n   *   http://www.apache.org/licenses/LICENSE-2.0\r\n   *\r\n   * Unless required by applicable law or agreed to in writing, software\r\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n   * See the License for the specific language governing permissions and\r\n   * limitations under the License.\r\n   */\r\n\r\n  var scrollSetting = {\r\n    \"\": true,\r\n    \"up\": true\r\n  };\r\n  function findScrollSetting(value) {\r\n    if (typeof value !== \"string\") {\r\n      return false;\r\n    }\r\n    var scroll = scrollSetting[value.toLowerCase()];\r\n    return scroll ? value.toLowerCase() : false;\r\n  }\r\n  function isValidPercentValue(value) {\r\n    return typeof value === \"number\" && value >= 0 && value <= 100;\r\n  }\r\n\r\n  // VTTRegion shim http://dev.w3.org/html5/webvtt/#vttregion-interface\r\n  function VTTRegion() {\r\n    var _width = 100;\r\n    var _lines = 3;\r\n    var _regionAnchorX = 0;\r\n    var _regionAnchorY = 100;\r\n    var _viewportAnchorX = 0;\r\n    var _viewportAnchorY = 100;\r\n    var _scroll = \"\";\r\n    Object.defineProperties(this, {\r\n      \"width\": {\r\n        enumerable: true,\r\n        get: function () {\r\n          return _width;\r\n        },\r\n        set: function (value) {\r\n          if (!isValidPercentValue(value)) {\r\n            throw new Error(\"Width must be between 0 and 100.\");\r\n          }\r\n          _width = value;\r\n        }\r\n      },\r\n      \"lines\": {\r\n        enumerable: true,\r\n        get: function () {\r\n          return _lines;\r\n        },\r\n        set: function (value) {\r\n          if (typeof value !== \"number\") {\r\n            throw new TypeError(\"Lines must be set to a number.\");\r\n          }\r\n          _lines = value;\r\n        }\r\n      },\r\n      \"regionAnchorY\": {\r\n        enumerable: true,\r\n        get: function () {\r\n          return _regionAnchorY;\r\n        },\r\n        set: function (value) {\r\n          if (!isValidPercentValue(value)) {\r\n            throw new Error(\"RegionAnchorX must be between 0 and 100.\");\r\n          }\r\n          _regionAnchorY = value;\r\n        }\r\n      },\r\n      \"regionAnchorX\": {\r\n        enumerable: true,\r\n        get: function () {\r\n          return _regionAnchorX;\r\n        },\r\n        set: function (value) {\r\n          if (!isValidPercentValue(value)) {\r\n            throw new Error(\"RegionAnchorY must be between 0 and 100.\");\r\n          }\r\n          _regionAnchorX = value;\r\n        }\r\n      },\r\n      \"viewportAnchorY\": {\r\n        enumerable: true,\r\n        get: function () {\r\n          return _viewportAnchorY;\r\n        },\r\n        set: function (value) {\r\n          if (!isValidPercentValue(value)) {\r\n            throw new Error(\"ViewportAnchorY must be between 0 and 100.\");\r\n          }\r\n          _viewportAnchorY = value;\r\n        }\r\n      },\r\n      \"viewportAnchorX\": {\r\n        enumerable: true,\r\n        get: function () {\r\n          return _viewportAnchorX;\r\n        },\r\n        set: function (value) {\r\n          if (!isValidPercentValue(value)) {\r\n            throw new Error(\"ViewportAnchorX must be between 0 and 100.\");\r\n          }\r\n          _viewportAnchorX = value;\r\n        }\r\n      },\r\n      \"scroll\": {\r\n        enumerable: true,\r\n        get: function () {\r\n          return _scroll;\r\n        },\r\n        set: function (value) {\r\n          var setting = findScrollSetting(value);\r\n          // Have to check for false as an empty string is a legal value.\r\n          if (setting === false) {\r\n            console.warn(\"Scroll: an invalid or illegal string was specified.\");\r\n          } else {\r\n            _scroll = setting;\r\n          }\r\n        }\r\n      }\r\n    });\r\n  }\r\n  var vttregion = VTTRegion;\r\n\r\n  var browserIndex = createCommonjsModule(function (module) {\r\n    /**\r\n     * Copyright 2013 vtt.js Contributors\r\n     *\r\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n     * you may not use this file except in compliance with the License.\r\n     * You may obtain a copy of the License at\r\n     *\r\n     *   http://www.apache.org/licenses/LICENSE-2.0\r\n     *\r\n     * Unless required by applicable law or agreed to in writing, software\r\n     * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n     * See the License for the specific language governing permissions and\r\n     * limitations under the License.\r\n     */\r\n\r\n    // Default exports for Node. Export the extended versions of VTTCue and\r\n    // VTTRegion in Node since we likely want the capability to convert back and\r\n    // forth between JSON. If we don't then it's not that big of a deal since we're\r\n    // off browser.\r\n\r\n    var vttjs = module.exports = {\r\n      WebVTT: vtt,\r\n      VTTCue: vttcue,\r\n      VTTRegion: vttregion\r\n    };\r\n    window_1.vttjs = vttjs;\r\n    window_1.WebVTT = vttjs.WebVTT;\r\n    var cueShim = vttjs.VTTCue;\r\n    var regionShim = vttjs.VTTRegion;\r\n    var nativeVTTCue = window_1.VTTCue;\r\n    var nativeVTTRegion = window_1.VTTRegion;\r\n    vttjs.shim = function () {\r\n      window_1.VTTCue = cueShim;\r\n      window_1.VTTRegion = regionShim;\r\n    };\r\n    vttjs.restore = function () {\r\n      window_1.VTTCue = nativeVTTCue;\r\n      window_1.VTTRegion = nativeVTTRegion;\r\n    };\r\n    if (!window_1.VTTCue) {\r\n      vttjs.shim();\r\n    }\r\n  });\r\n  browserIndex.WebVTT;\r\n  browserIndex.VTTCue;\r\n  browserIndex.VTTRegion;\r\n\r\n  /**\r\n   * @file tech.js\r\n   */\r\n\r\n  /** @import { TimeRange } from '../utils/time' */\r\n\r\n  /**\r\n   * An Object containing a structure like: `{src: 'url', type: 'mimetype'}` or string\r\n   * that just contains the src url alone.\r\n   * * `var SourceObject = {src: 'http://ex.com/video.mp4', type: 'video/mp4'};`\r\n     * `var SourceString = 'http://example.com/some-video.mp4';`\r\n   *\r\n   * @typedef {Object|string} SourceObject\r\n   *\r\n   * @property {string} src\r\n   *           The url to the source\r\n   *\r\n   * @property {string} type\r\n   *           The mime type of the source\r\n   */\r\n\r\n  /**\r\n   * A function used by {@link Tech} to create a new {@link TextTrack}.\r\n   *\r\n   * @private\r\n   *\r\n   * @param {Tech} self\r\n   *        An instance of the Tech class.\r\n   *\r\n   * @param {string} kind\r\n   *        `TextTrack` kind (subtitles, captions, descriptions, chapters, or metadata)\r\n   *\r\n   * @param {string} [label]\r\n   *        Label to identify the text track\r\n   *\r\n   * @param {string} [language]\r\n   *        Two letter language abbreviation\r\n   *\r\n   * @param {Object} [options={}]\r\n   *        An object with additional text track options\r\n   *\r\n   * @return {TextTrack}\r\n   *          The text track that was created.\r\n   */\r\n  function createTrackHelper(self, kind, label, language, options = {}) {\r\n    const tracks = self.textTracks();\r\n    options.kind = kind;\r\n    if (label) {\r\n      options.label = label;\r\n    }\r\n    if (language) {\r\n      options.language = language;\r\n    }\r\n    options.tech = self;\r\n    const track = new ALL.text.TrackClass(options);\r\n    tracks.addTrack(track);\r\n    return track;\r\n  }\r\n\r\n  /**\r\n   * This is the base class for media playback technology controllers, such as\r\n   * {@link HTML5}\r\n   *\r\n   * @extends Component\r\n   */\r\n  class Tech extends Component$1 {\r\n    /**\r\n    * Create an instance of this Tech.\r\n    *\r\n    * @param {Object} [options]\r\n    *        The key/value store of player options.\r\n    *\r\n    * @param {Function} [ready]\r\n    *        Callback function to call when the `HTML5` Tech is ready.\r\n    */\r\n    constructor(options = {}, ready = function () {}) {\r\n      // we don't want the tech to report user activity automatically.\r\n      // This is done manually in addControlsListeners\r\n      options.reportTouchActivity = false;\r\n      super(null, options, ready);\r\n      this.onDurationChange_ = e => this.onDurationChange(e);\r\n      this.trackProgress_ = e => this.trackProgress(e);\r\n      this.trackCurrentTime_ = e => this.trackCurrentTime(e);\r\n      this.stopTrackingCurrentTime_ = e => this.stopTrackingCurrentTime(e);\r\n      this.disposeSourceHandler_ = e => this.disposeSourceHandler(e);\r\n      this.queuedHanders_ = new Set();\r\n\r\n      // keep track of whether the current source has played at all to\r\n      // implement a very limited played()\r\n      this.hasStarted_ = false;\r\n      this.on('playing', function () {\r\n        this.hasStarted_ = true;\r\n      });\r\n      this.on('loadstart', function () {\r\n        this.hasStarted_ = false;\r\n      });\r\n      ALL.names.forEach(name => {\r\n        const props = ALL[name];\r\n        if (options && options[props.getterName]) {\r\n          this[props.privateName] = options[props.getterName];\r\n        }\r\n      });\r\n\r\n      // Manually track progress in cases where the browser/tech doesn't report it.\r\n      if (!this.featuresProgressEvents) {\r\n        this.manualProgressOn();\r\n      }\r\n\r\n      // Manually track timeupdates in cases where the browser/tech doesn't report it.\r\n      if (!this.featuresTimeupdateEvents) {\r\n        this.manualTimeUpdatesOn();\r\n      }\r\n      ['Text', 'Audio', 'Video'].forEach(track => {\r\n        if (options[`native${track}Tracks`] === false) {\r\n          this[`featuresNative${track}Tracks`] = false;\r\n        }\r\n      });\r\n      if (options.nativeCaptions === false || options.nativeTextTracks === false) {\r\n        this.featuresNativeTextTracks = false;\r\n      } else if (options.nativeCaptions === true || options.nativeTextTracks === true) {\r\n        this.featuresNativeTextTracks = true;\r\n      }\r\n      if (!this.featuresNativeTextTracks) {\r\n        this.emulateTextTracks();\r\n      }\r\n      this.preloadTextTracks = options.preloadTextTracks !== false;\r\n      this.autoRemoteTextTracks_ = new ALL.text.ListClass();\r\n      this.initTrackListeners();\r\n\r\n      // Turn on component tap events only if not using native controls\r\n      if (!options.nativeControlsForTouch) {\r\n        this.emitTapEvents();\r\n      }\r\n      if (this.constructor) {\r\n        this.name_ = this.constructor.name || 'Unknown Tech';\r\n      }\r\n    }\r\n\r\n    /**\r\n     * A special function to trigger source set in a way that will allow player\r\n     * to re-trigger if the player or tech are not ready yet.\r\n     *\r\n     * @fires Tech#sourceset\r\n     * @param {string} src The source string at the time of the source changing.\r\n     */\r\n    triggerSourceset(src) {\r\n      if (!this.isReady_) {\r\n        // on initial ready we have to trigger source set\r\n        // 1ms after ready so that player can watch for it.\r\n        this.one('ready', () => this.setTimeout(() => this.triggerSourceset(src), 1));\r\n      }\r\n\r\n      /**\r\n       * Fired when the source is set on the tech causing the media element\r\n       * to reload.\r\n       *\r\n       * @see {@link Player#event:sourceset}\r\n       * @event Tech#sourceset\r\n       * @type {Event}\r\n       */\r\n      this.trigger({\r\n        src,\r\n        type: 'sourceset'\r\n      });\r\n    }\r\n\r\n    /* Fallbacks for unsupported event types\r\n    ================================================================================ */\r\n\r\n    /**\r\n     * Polyfill the `progress` event for browsers that don't support it natively.\r\n     *\r\n     * @see {@link Tech#trackProgress}\r\n     */\r\n    manualProgressOn() {\r\n      this.on('durationchange', this.onDurationChange_);\r\n      this.manualProgress = true;\r\n\r\n      // Trigger progress watching when a source begins loading\r\n      this.one('ready', this.trackProgress_);\r\n    }\r\n\r\n    /**\r\n     * Turn off the polyfill for `progress` events that was created in\r\n     * {@link Tech#manualProgressOn}\r\n     */\r\n    manualProgressOff() {\r\n      this.manualProgress = false;\r\n      this.stopTrackingProgress();\r\n      this.off('durationchange', this.onDurationChange_);\r\n    }\r\n\r\n    /**\r\n     * This is used to trigger a `progress` event when the buffered percent changes. It\r\n     * sets an interval function that will be called every 500 milliseconds to check if the\r\n     * buffer end percent has changed.\r\n     *\r\n     * > This function is called by {@link Tech#manualProgressOn}\r\n     *\r\n     * @param {Event} event\r\n     *        The `ready` event that caused this to run.\r\n     *\r\n     * @listens Tech#ready\r\n     * @fires Tech#progress\r\n     */\r\n    trackProgress(event) {\r\n      this.stopTrackingProgress();\r\n      this.progressInterval = this.setInterval(bind_(this, function () {\r\n        // Don't trigger unless buffered amount is greater than last time\r\n\r\n        const numBufferedPercent = this.bufferedPercent();\r\n        if (this.bufferedPercent_ !== numBufferedPercent) {\r\n          /**\r\n           * See {@link Player#progress}\r\n           *\r\n           * @event Tech#progress\r\n           * @type {Event}\r\n           */\r\n          this.trigger('progress');\r\n        }\r\n        this.bufferedPercent_ = numBufferedPercent;\r\n        if (numBufferedPercent === 1) {\r\n          this.stopTrackingProgress();\r\n        }\r\n      }), 500);\r\n    }\r\n\r\n    /**\r\n     * Update our internal duration on a `durationchange` event by calling\r\n     * {@link Tech#duration}.\r\n     *\r\n     * @param {Event} event\r\n     *        The `durationchange` event that caused this to run.\r\n     *\r\n     * @listens Tech#durationchange\r\n     */\r\n    onDurationChange(event) {\r\n      this.duration_ = this.duration();\r\n    }\r\n\r\n    /**\r\n     * Get and create a `TimeRange` object for buffering.\r\n     *\r\n     * @return {TimeRange}\r\n     *         The time range object that was created.\r\n     */\r\n    buffered() {\r\n      return createTimeRanges$1(0, 0);\r\n    }\r\n\r\n    /**\r\n     * Get the percentage of the current video that is currently buffered.\r\n     *\r\n     * @return {number}\r\n     *         A number from 0 to 1 that represents the decimal percentage of the\r\n     *         video that is buffered.\r\n     *\r\n     */\r\n    bufferedPercent() {\r\n      return bufferedPercent(this.buffered(), this.duration_);\r\n    }\r\n\r\n    /**\r\n     * Turn off the polyfill for `progress` events that was created in\r\n     * {@link Tech#manualProgressOn}\r\n     * Stop manually tracking progress events by clearing the interval that was set in\r\n     * {@link Tech#trackProgress}.\r\n     */\r\n    stopTrackingProgress() {\r\n      this.clearInterval(this.progressInterval);\r\n    }\r\n\r\n    /**\r\n     * Polyfill the `timeupdate` event for browsers that don't support it.\r\n     *\r\n     * @see {@link Tech#trackCurrentTime}\r\n     */\r\n    manualTimeUpdatesOn() {\r\n      this.manualTimeUpdates = true;\r\n      this.on('play', this.trackCurrentTime_);\r\n      this.on('pause', this.stopTrackingCurrentTime_);\r\n    }\r\n\r\n    /**\r\n     * Turn off the polyfill for `timeupdate` events that was created in\r\n     * {@link Tech#manualTimeUpdatesOn}\r\n     */\r\n    manualTimeUpdatesOff() {\r\n      this.manualTimeUpdates = false;\r\n      this.stopTrackingCurrentTime();\r\n      this.off('play', this.trackCurrentTime_);\r\n      this.off('pause', this.stopTrackingCurrentTime_);\r\n    }\r\n\r\n    /**\r\n     * Sets up an interval function to track current time and trigger `timeupdate` every\r\n     * 250 milliseconds.\r\n     *\r\n     * @listens Tech#play\r\n     * @triggers Tech#timeupdate\r\n     */\r\n    trackCurrentTime() {\r\n      if (this.currentTimeInterval) {\r\n        this.stopTrackingCurrentTime();\r\n      }\r\n      this.currentTimeInterval = this.setInterval(function () {\r\n        /**\r\n         * Triggered at an interval of 250ms to indicated that time is passing in the video.\r\n         *\r\n         * @event Tech#timeupdate\r\n         * @type {Event}\r\n         */\r\n        this.trigger({\r\n          type: 'timeupdate',\r\n          target: this,\r\n          manuallyTriggered: true\r\n        });\r\n\r\n        // 42 = 24 fps // 250 is what Webkit uses // FF uses 15\r\n      }, 250);\r\n    }\r\n\r\n    /**\r\n     * Stop the interval function created in {@link Tech#trackCurrentTime} so that the\r\n     * `timeupdate` event is no longer triggered.\r\n     *\r\n     * @listens {Tech#pause}\r\n     */\r\n    stopTrackingCurrentTime() {\r\n      this.clearInterval(this.currentTimeInterval);\r\n\r\n      // #1002 - if the video ends right before the next timeupdate would happen,\r\n      // the progress bar won't make it all the way to the end\r\n      this.trigger({\r\n        type: 'timeupdate',\r\n        target: this,\r\n        manuallyTriggered: true\r\n      });\r\n    }\r\n\r\n    /**\r\n     * Turn off all event polyfills, clear the `Tech`s {@link AudioTrackList},\r\n     * {@link VideoTrackList}, and {@link TextTrackList}, and dispose of this Tech.\r\n     *\r\n     * @fires Component#dispose\r\n     */\r\n    dispose() {\r\n      // clear out all tracks because we can't reuse them between techs\r\n      this.clearTracks(NORMAL.names);\r\n\r\n      // Turn off any manual progress or timeupdate tracking\r\n      if (this.manualProgress) {\r\n        this.manualProgressOff();\r\n      }\r\n      if (this.manualTimeUpdates) {\r\n        this.manualTimeUpdatesOff();\r\n      }\r\n      super.dispose();\r\n    }\r\n\r\n    /**\r\n     * Clear out a single `TrackList` or an array of `TrackLists` given their names.\r\n     *\r\n     * > Note: Techs without source handlers should call this between sources for `video`\r\n     *         & `audio` tracks. You don't want to use them between tracks!\r\n     *\r\n     * @param {string[]|string} types\r\n     *        TrackList names to clear, valid names are `video`, `audio`, and\r\n     *        `text`.\r\n     */\r\n    clearTracks(types) {\r\n      types = [].concat(types);\r\n      // clear out all tracks because we can't reuse them between techs\r\n      types.forEach(type => {\r\n        const list = this[`${type}Tracks`]() || [];\r\n        let i = list.length;\r\n        while (i--) {\r\n          const track = list[i];\r\n          if (type === 'text') {\r\n            this.removeRemoteTextTrack(track);\r\n          }\r\n          list.removeTrack(track);\r\n        }\r\n      });\r\n    }\r\n\r\n    /**\r\n     * Remove any TextTracks added via addRemoteTextTrack that are\r\n     * flagged for automatic garbage collection\r\n     */\r\n    cleanupAutoTextTracks() {\r\n      const list = this.autoRemoteTextTracks_ || [];\r\n      let i = list.length;\r\n      while (i--) {\r\n        const track = list[i];\r\n        this.removeRemoteTextTrack(track);\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Reset the tech, which will removes all sources and reset the internal readyState.\r\n     *\r\n     * @abstract\r\n     */\r\n    reset() {}\r\n\r\n    /**\r\n     * Get the value of `crossOrigin` from the tech.\r\n     *\r\n     * @abstract\r\n     *\r\n     * @see {Html5#crossOrigin}\r\n     */\r\n    crossOrigin() {}\r\n\r\n    /**\r\n     * Set the value of `crossOrigin` on the tech.\r\n     *\r\n     * @abstract\r\n     *\r\n     * @param {string} crossOrigin the crossOrigin value\r\n     * @see {Html5#setCrossOrigin}\r\n     */\r\n    setCrossOrigin() {}\r\n\r\n    /**\r\n     * Get or set an error on the Tech.\r\n     *\r\n     * @param {MediaError} [err]\r\n     *        Error to set on the Tech\r\n     *\r\n     * @return {MediaError|null}\r\n     *         The current error object on the tech, or null if there isn't one.\r\n     */\r\n    error(err) {\r\n      if (err !== undefined) {\r\n        this.error_ = new MediaError(err);\r\n        this.trigger('error');\r\n      }\r\n      return this.error_;\r\n    }\r\n\r\n    /**\r\n     * Returns the `TimeRange`s that have been played through for the current source.\r\n     *\r\n     * > NOTE: This implementation is incomplete. It does not track the played `TimeRange`.\r\n     *         It only checks whether the source has played at all or not.\r\n     *\r\n     * @return {TimeRange}\r\n     *         - A single time range if this video has played\r\n     *         - An empty set of ranges if not.\r\n     */\r\n    played() {\r\n      if (this.hasStarted_) {\r\n        return createTimeRanges$1(0, 0);\r\n      }\r\n      return createTimeRanges$1();\r\n    }\r\n\r\n    /**\r\n     * Start playback\r\n     *\r\n     * @abstract\r\n     *\r\n     * @see {Html5#play}\r\n     */\r\n    play() {}\r\n\r\n    /**\r\n     * Set whether we are scrubbing or not\r\n     *\r\n     * @abstract\r\n     * @param {boolean} _isScrubbing\r\n     *                  - true for we are currently scrubbing\r\n     *                  - false for we are no longer scrubbing\r\n     *\r\n     * @see {Html5#setScrubbing}\r\n     */\r\n    setScrubbing(_isScrubbing) {}\r\n\r\n    /**\r\n     * Get whether we are scrubbing or not\r\n     *\r\n     * @abstract\r\n     *\r\n     * @see {Html5#scrubbing}\r\n     */\r\n    scrubbing() {}\r\n\r\n    /**\r\n     * Causes a manual time update to occur if {@link Tech#manualTimeUpdatesOn} was\r\n     * previously called.\r\n     *\r\n     * @param {number} _seconds\r\n     *        Set the current time of the media to this.\r\n     * @fires Tech#timeupdate\r\n     */\r\n    setCurrentTime(_seconds) {\r\n      // improve the accuracy of manual timeupdates\r\n      if (this.manualTimeUpdates) {\r\n        /**\r\n         * A manual `timeupdate` event.\r\n         *\r\n         * @event Tech#timeupdate\r\n         * @type {Event}\r\n         */\r\n        this.trigger({\r\n          type: 'timeupdate',\r\n          target: this,\r\n          manuallyTriggered: true\r\n        });\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Turn on listeners for {@link VideoTrackList}, {@link {AudioTrackList}, and\r\n     * {@link TextTrackList} events.\r\n     *\r\n     * This adds {@link EventTarget~EventListeners} for `addtrack`, and  `removetrack`.\r\n     *\r\n     * @fires Tech#audiotrackchange\r\n     * @fires Tech#videotrackchange\r\n     * @fires Tech#texttrackchange\r\n     */\r\n    initTrackListeners() {\r\n      /**\r\n        * Triggered when tracks are added or removed on the Tech {@link AudioTrackList}\r\n        *\r\n        * @event Tech#audiotrackchange\r\n        * @type {Event}\r\n        */\r\n\r\n      /**\r\n        * Triggered when tracks are added or removed on the Tech {@link VideoTrackList}\r\n        *\r\n        * @event Tech#videotrackchange\r\n        * @type {Event}\r\n        */\r\n\r\n      /**\r\n        * Triggered when tracks are added or removed on the Tech {@link TextTrackList}\r\n        *\r\n        * @event Tech#texttrackchange\r\n        * @type {Event}\r\n        */\r\n      NORMAL.names.forEach(name => {\r\n        const props = NORMAL[name];\r\n        const trackListChanges = () => {\r\n          this.trigger(`${name}trackchange`);\r\n        };\r\n        const tracks = this[props.getterName]();\r\n        tracks.addEventListener('removetrack', trackListChanges);\r\n        tracks.addEventListener('addtrack', trackListChanges);\r\n        this.on('dispose', () => {\r\n          tracks.removeEventListener('removetrack', trackListChanges);\r\n          tracks.removeEventListener('addtrack', trackListChanges);\r\n        });\r\n      });\r\n    }\r\n\r\n    /**\r\n     * Emulate TextTracks using vtt.js if necessary\r\n     *\r\n     * @fires Tech#vttjsloaded\r\n     * @fires Tech#vttjserror\r\n     */\r\n    addWebVttScript_() {\r\n      if (window.WebVTT) {\r\n        return;\r\n      }\r\n\r\n      // Initially, Tech.el_ is a child of a dummy-div wait until the Component system\r\n      // signals that the Tech is ready at which point Tech.el_ is part of the DOM\r\n      // before inserting the WebVTT script\r\n      if (document.body.contains(this.el())) {\r\n        // load via require if available and vtt.js script location was not passed in\r\n        // as an option. novtt builds will turn the above require call into an empty object\r\n        // which will cause this if check to always fail.\r\n        if (!this.options_['vtt.js'] && isPlain(browserIndex) && Object.keys(browserIndex).length > 0) {\r\n          this.trigger('vttjsloaded');\r\n          return;\r\n        }\r\n\r\n        // load vtt.js via the script location option or the cdn of no location was\r\n        // passed in\r\n        const script = document.createElement('script');\r\n        script.src = this.options_['vtt.js'] || 'https://vjs.zencdn.net/vttjs/0.14.1/vtt.min.js';\r\n        script.onload = () => {\r\n          /**\r\n           * Fired when vtt.js is loaded.\r\n           *\r\n           * @event Tech#vttjsloaded\r\n           * @type {Event}\r\n           */\r\n          this.trigger('vttjsloaded');\r\n        };\r\n        script.onerror = () => {\r\n          /**\r\n           * Fired when vtt.js was not loaded due to an error\r\n           *\r\n           * @event Tech#vttjsloaded\r\n           * @type {Event}\r\n           */\r\n          this.trigger('vttjserror');\r\n        };\r\n        this.on('dispose', () => {\r\n          script.onload = null;\r\n          script.onerror = null;\r\n        });\r\n        // but have not loaded yet and we set it to true before the inject so that\r\n        // we don't overwrite the injected window.WebVTT if it loads right away\r\n        window.WebVTT = true;\r\n        this.el().parentNode.appendChild(script);\r\n      } else {\r\n        this.ready(this.addWebVttScript_);\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Emulate texttracks\r\n     *\r\n     */\r\n    emulateTextTracks() {\r\n      const tracks = this.textTracks();\r\n      const remoteTracks = this.remoteTextTracks();\r\n      const handleAddTrack = e => tracks.addTrack(e.track);\r\n      const handleRemoveTrack = e => tracks.removeTrack(e.track);\r\n      remoteTracks.on('addtrack', handleAddTrack);\r\n      remoteTracks.on('removetrack', handleRemoveTrack);\r\n      this.addWebVttScript_();\r\n      const updateDisplay = () => this.trigger('texttrackchange');\r\n      const textTracksChanges = () => {\r\n        updateDisplay();\r\n        for (let i = 0; i < tracks.length; i++) {\r\n          const track = tracks[i];\r\n          track.removeEventListener('cuechange', updateDisplay);\r\n          if (track.mode === 'showing') {\r\n            track.addEventListener('cuechange', updateDisplay);\r\n          }\r\n        }\r\n      };\r\n      textTracksChanges();\r\n      tracks.addEventListener('change', textTracksChanges);\r\n      tracks.addEventListener('addtrack', textTracksChanges);\r\n      tracks.addEventListener('removetrack', textTracksChanges);\r\n      this.on('dispose', function () {\r\n        remoteTracks.off('addtrack', handleAddTrack);\r\n        remoteTracks.off('removetrack', handleRemoveTrack);\r\n        tracks.removeEventListener('change', textTracksChanges);\r\n        tracks.removeEventListener('addtrack', textTracksChanges);\r\n        tracks.removeEventListener('removetrack', textTracksChanges);\r\n        for (let i = 0; i < tracks.length; i++) {\r\n          const track = tracks[i];\r\n          track.removeEventListener('cuechange', updateDisplay);\r\n        }\r\n      });\r\n    }\r\n\r\n    /**\r\n     * Create and returns a remote {@link TextTrack} object.\r\n     *\r\n     * @param {string} kind\r\n     *        `TextTrack` kind (subtitles, captions, descriptions, chapters, or metadata)\r\n     *\r\n     * @param {string} [label]\r\n     *        Label to identify the text track\r\n     *\r\n     * @param {string} [language]\r\n     *        Two letter language abbreviation\r\n     *\r\n     * @return {TextTrack}\r\n     *         The TextTrack that gets created.\r\n     */\r\n    addTextTrack(kind, label, language) {\r\n      if (!kind) {\r\n        throw new Error('TextTrack kind is required but was not provided');\r\n      }\r\n      return createTrackHelper(this, kind, label, language);\r\n    }\r\n\r\n    /**\r\n     * Create an emulated TextTrack for use by addRemoteTextTrack\r\n     *\r\n     * This is intended to be overridden by classes that inherit from\r\n     * Tech in order to create native or custom TextTracks.\r\n     *\r\n     * @param {Object} options\r\n     *        The object should contain the options to initialize the TextTrack with.\r\n     *\r\n     * @param {string} [options.kind]\r\n     *        `TextTrack` kind (subtitles, captions, descriptions, chapters, or metadata).\r\n     *\r\n     * @param {string} [options.label].\r\n     *        Label to identify the text track\r\n     *\r\n     * @param {string} [options.language]\r\n     *        Two letter language abbreviation.\r\n     *\r\n     * @return {HTMLTrackElement}\r\n     *         The track element that gets created.\r\n     */\r\n    createRemoteTextTrack(options) {\r\n      const track = merge$2(options, {\r\n        tech: this\r\n      });\r\n      return new REMOTE.remoteTextEl.TrackClass(track);\r\n    }\r\n\r\n    /**\r\n     * Creates a remote text track object and returns an html track element.\r\n     *\r\n     * > Note: This can be an emulated {@link HTMLTrackElement} or a native one.\r\n     *\r\n     * @param {Object} options\r\n     *        See {@link Tech#createRemoteTextTrack} for more detailed properties.\r\n     *\r\n     * @param {boolean} [manualCleanup=false]\r\n     *        - When false: the TextTrack will be automatically removed from the video\r\n     *          element whenever the source changes\r\n     *        - When True: The TextTrack will have to be cleaned up manually\r\n     *\r\n     * @return {HTMLTrackElement}\r\n     *         An Html Track Element.\r\n     *\r\n     */\r\n    addRemoteTextTrack(options = {}, manualCleanup) {\r\n      const htmlTrackElement = this.createRemoteTextTrack(options);\r\n      if (typeof manualCleanup !== 'boolean') {\r\n        manualCleanup = false;\r\n      }\r\n\r\n      // store HTMLTrackElement and TextTrack to remote list\r\n      this.remoteTextTrackEls().addTrackElement_(htmlTrackElement);\r\n      this.remoteTextTracks().addTrack(htmlTrackElement.track);\r\n      if (manualCleanup === false) {\r\n        // create the TextTrackList if it doesn't exist\r\n        this.ready(() => this.autoRemoteTextTracks_.addTrack(htmlTrackElement.track));\r\n      }\r\n      return htmlTrackElement;\r\n    }\r\n\r\n    /**\r\n     * Remove a remote text track from the remote `TextTrackList`.\r\n     *\r\n     * @param {TextTrack} track\r\n     *        `TextTrack` to remove from the `TextTrackList`\r\n     */\r\n    removeRemoteTextTrack(track) {\r\n      const trackElement = this.remoteTextTrackEls().getTrackElementByTrack_(track);\r\n\r\n      // remove HTMLTrackElement and TextTrack from remote list\r\n      this.remoteTextTrackEls().removeTrackElement_(trackElement);\r\n      this.remoteTextTracks().removeTrack(track);\r\n      this.autoRemoteTextTracks_.removeTrack(track);\r\n    }\r\n\r\n    /**\r\n     * Gets available media playback quality metrics as specified by the W3C's Media\r\n     * Playback Quality API.\r\n     *\r\n     * @see [Spec]{@link https://wicg.github.io/media-playback-quality}\r\n     *\r\n     * @return {Object}\r\n     *         An object with supported media playback quality metrics\r\n     *\r\n     * @abstract\r\n     */\r\n    getVideoPlaybackQuality() {\r\n      return {};\r\n    }\r\n\r\n    /**\r\n     * Attempt to create a floating video window always on top of other windows\r\n     * so that users may continue consuming media while they interact with other\r\n     * content sites, or applications on their device.\r\n     *\r\n     * @see [Spec]{@link https://wicg.github.io/picture-in-picture}\r\n     *\r\n     * @return {Promise|undefined}\r\n     *         A promise with a Picture-in-Picture window if the browser supports\r\n     *         Promises (or one was passed in as an option). It returns undefined\r\n     *         otherwise.\r\n     *\r\n     * @abstract\r\n     */\r\n    requestPictureInPicture() {\r\n      return Promise.reject();\r\n    }\r\n\r\n    /**\r\n     * A method to check for the value of the 'disablePictureInPicture' <video> property.\r\n     * Defaults to true, as it should be considered disabled if the tech does not support pip\r\n     *\r\n     * @abstract\r\n     */\r\n    disablePictureInPicture() {\r\n      return true;\r\n    }\r\n\r\n    /**\r\n     * A method to set or unset the 'disablePictureInPicture' <video> property.\r\n     *\r\n     * @abstract\r\n     */\r\n    setDisablePictureInPicture() {}\r\n\r\n    /**\r\n     * A fallback implementation of requestVideoFrameCallback using requestAnimationFrame\r\n     *\r\n     * @param {function} cb\r\n     * @return {number} request id\r\n     */\r\n    requestVideoFrameCallback(cb) {\r\n      const id = newGUID();\r\n      if (!this.isReady_ || this.paused()) {\r\n        this.queuedHanders_.add(id);\r\n        this.one('playing', () => {\r\n          if (this.queuedHanders_.has(id)) {\r\n            this.queuedHanders_.delete(id);\r\n            cb();\r\n          }\r\n        });\r\n      } else {\r\n        this.requestNamedAnimationFrame(id, cb);\r\n      }\r\n      return id;\r\n    }\r\n\r\n    /**\r\n     * A fallback implementation of cancelVideoFrameCallback\r\n     *\r\n     * @param {number} id id of callback to be cancelled\r\n     */\r\n    cancelVideoFrameCallback(id) {\r\n      if (this.queuedHanders_.has(id)) {\r\n        this.queuedHanders_.delete(id);\r\n      } else {\r\n        this.cancelNamedAnimationFrame(id);\r\n      }\r\n    }\r\n\r\n    /**\r\n     * A method to set a poster from a `Tech`.\r\n     *\r\n     * @abstract\r\n     */\r\n    setPoster() {}\r\n\r\n    /**\r\n     * A method to check for the presence of the 'playsinline' <video> attribute.\r\n     *\r\n     * @abstract\r\n     */\r\n    playsinline() {}\r\n\r\n    /**\r\n     * A method to set or unset the 'playsinline' <video> attribute.\r\n     *\r\n     * @abstract\r\n     */\r\n    setPlaysinline() {}\r\n\r\n    /**\r\n     * Attempt to force override of native audio tracks.\r\n     *\r\n     * @param {boolean} override - If set to true native audio will be overridden,\r\n     * otherwise native audio will potentially be used.\r\n     *\r\n     * @abstract\r\n     */\r\n    overrideNativeAudioTracks(override) {}\r\n\r\n    /**\r\n     * Attempt to force override of native video tracks.\r\n     *\r\n     * @param {boolean} override - If set to true native video will be overridden,\r\n     * otherwise native video will potentially be used.\r\n     *\r\n     * @abstract\r\n     */\r\n    overrideNativeVideoTracks(override) {}\r\n\r\n    /**\r\n     * Check if the tech can support the given mime-type.\r\n     *\r\n     * The base tech does not support any type, but source handlers might\r\n     * overwrite this.\r\n     *\r\n     * @param  {string} _type\r\n     *         The mimetype to check for support\r\n     *\r\n     * @return {string}\r\n     *         'probably', 'maybe', or empty string\r\n     *\r\n     * @see [Spec]{@link https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/canPlayType}\r\n     *\r\n     * @abstract\r\n     */\r\n    canPlayType(_type) {\r\n      return '';\r\n    }\r\n\r\n    /**\r\n     * Check if the type is supported by this tech.\r\n     *\r\n     * The base tech does not support any type, but source handlers might\r\n     * overwrite this.\r\n     *\r\n     * @param {string} _type\r\n     *        The media type to check\r\n     * @return {string} Returns the native video element's response\r\n     */\r\n    static canPlayType(_type) {\r\n      return '';\r\n    }\r\n\r\n    /**\r\n     * Check if the tech can support the given source\r\n     *\r\n     * @param {Object} srcObj\r\n     *        The source object\r\n     * @param {Object} options\r\n     *        The options passed to the tech\r\n     * @return {string} 'probably', 'maybe', or '' (empty string)\r\n     */\r\n    static canPlaySource(srcObj, options) {\r\n      return Tech.canPlayType(srcObj.type);\r\n    }\r\n\r\n    /*\r\n     * Return whether the argument is a Tech or not.\r\n     * Can be passed either a Class like `Html5` or a instance like `player.tech_`\r\n     *\r\n     * @param {Object} component\r\n     *        The item to check\r\n     *\r\n     * @return {boolean}\r\n     *         Whether it is a tech or not\r\n     *         - True if it is a tech\r\n     *         - False if it is not\r\n     */\r\n    static isTech(component) {\r\n      return component.prototype instanceof Tech || component instanceof Tech || component === Tech;\r\n    }\r\n\r\n    /**\r\n     * Registers a `Tech` into a shared list for videojs.\r\n     *\r\n     * @param {string} name\r\n     *        Name of the `Tech` to register.\r\n     *\r\n     * @param {Object} tech\r\n     *        The `Tech` class to register.\r\n     */\r\n    static registerTech(name, tech) {\r\n      if (!Tech.techs_) {\r\n        Tech.techs_ = {};\r\n      }\r\n      if (!Tech.isTech(tech)) {\r\n        throw new Error(`Tech ${name} must be a Tech`);\r\n      }\r\n      if (!Tech.canPlayType) {\r\n        throw new Error('Techs must have a static canPlayType method on them');\r\n      }\r\n      if (!Tech.canPlaySource) {\r\n        throw new Error('Techs must have a static canPlaySource method on them');\r\n      }\r\n      name = toTitleCase$1(name);\r\n      Tech.techs_[name] = tech;\r\n      Tech.techs_[toLowerCase(name)] = tech;\r\n      if (name !== 'Tech') {\r\n        // camel case the techName for use in techOrder\r\n        Tech.defaultTechOrder_.push(name);\r\n      }\r\n      return tech;\r\n    }\r\n\r\n    /**\r\n     * Get a `Tech` from the shared list by name.\r\n     *\r\n     * @param {string} name\r\n     *        `camelCase` or `TitleCase` name of the Tech to get\r\n     *\r\n     * @return {Tech|undefined}\r\n     *         The `Tech` or undefined if there was no tech with the name requested.\r\n     */\r\n    static getTech(name) {\r\n      if (!name) {\r\n        return;\r\n      }\r\n      if (Tech.techs_ && Tech.techs_[name]) {\r\n        return Tech.techs_[name];\r\n      }\r\n      name = toTitleCase$1(name);\r\n      if (window && window.videojs && window.videojs[name]) {\r\n        log$1.warn(`The ${name} tech was added to the videojs object when it should be registered using videojs.registerTech(name, tech)`);\r\n        return window.videojs[name];\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the {@link VideoTrackList}\r\n   *\r\n   * @returns {VideoTrackList}\r\n   * @method Tech.prototype.videoTracks\r\n   */\r\n\r\n  /**\r\n   * Get the {@link AudioTrackList}\r\n   *\r\n   * @returns {AudioTrackList}\r\n   * @method Tech.prototype.audioTracks\r\n   */\r\n\r\n  /**\r\n   * Get the {@link TextTrackList}\r\n   *\r\n   * @returns {TextTrackList}\r\n   * @method Tech.prototype.textTracks\r\n   */\r\n\r\n  /**\r\n   * Get the remote element {@link TextTrackList}\r\n   *\r\n   * @returns {TextTrackList}\r\n   * @method Tech.prototype.remoteTextTracks\r\n   */\r\n\r\n  /**\r\n   * Get the remote element {@link HtmlTrackElementList}\r\n   *\r\n   * @returns {HtmlTrackElementList}\r\n   * @method Tech.prototype.remoteTextTrackEls\r\n   */\r\n\r\n  ALL.names.forEach(function (name) {\r\n    const props = ALL[name];\r\n    Tech.prototype[props.getterName] = function () {\r\n      this[props.privateName] = this[props.privateName] || new props.ListClass();\r\n      return this[props.privateName];\r\n    };\r\n  });\r\n\r\n  /**\r\n   * List of associated text tracks\r\n   *\r\n   * @type {TextTrackList}\r\n   * @private\r\n   * @property Tech#textTracks_\r\n   */\r\n\r\n  /**\r\n   * List of associated audio tracks.\r\n   *\r\n   * @type {AudioTrackList}\r\n   * @private\r\n   * @property Tech#audioTracks_\r\n   */\r\n\r\n  /**\r\n   * List of associated video tracks.\r\n   *\r\n   * @type {VideoTrackList}\r\n   * @private\r\n   * @property Tech#videoTracks_\r\n   */\r\n\r\n  /**\r\n   * Boolean indicating whether the `Tech` supports volume control.\r\n   *\r\n   * @type {boolean}\r\n   * @default\r\n   */\r\n  Tech.prototype.featuresVolumeControl = true;\r\n\r\n  /**\r\n   * Boolean indicating whether the `Tech` supports muting volume.\r\n   *\r\n   * @type {boolean}\r\n   * @default\r\n   */\r\n  Tech.prototype.featuresMuteControl = true;\r\n\r\n  /**\r\n   * Boolean indicating whether the `Tech` supports fullscreen resize control.\r\n   * Resizing plugins using request fullscreen reloads the plugin\r\n   *\r\n   * @type {boolean}\r\n   * @default\r\n   */\r\n  Tech.prototype.featuresFullscreenResize = false;\r\n\r\n  /**\r\n   * Boolean indicating whether the `Tech` supports changing the speed at which the video\r\n   * plays. Examples:\r\n   *   - Set player to play 2x (twice) as fast\r\n   *   - Set player to play 0.5x (half) as fast\r\n   *\r\n   * @type {boolean}\r\n   * @default\r\n   */\r\n  Tech.prototype.featuresPlaybackRate = false;\r\n\r\n  /**\r\n   * Boolean indicating whether the `Tech` supports the `progress` event.\r\n   * This will be used to determine if {@link Tech#manualProgressOn} should be called.\r\n   *\r\n   * @type {boolean}\r\n   * @default\r\n   */\r\n  Tech.prototype.featuresProgressEvents = false;\r\n\r\n  /**\r\n   * Boolean indicating whether the `Tech` supports the `sourceset` event.\r\n   *\r\n   * A tech should set this to `true` and then use {@link Tech#triggerSourceset}\r\n   * to trigger a {@link Tech#event:sourceset} at the earliest time after getting\r\n   * a new source.\r\n   *\r\n   * @type {boolean}\r\n   * @default\r\n   */\r\n  Tech.prototype.featuresSourceset = false;\r\n\r\n  /**\r\n   * Boolean indicating whether the `Tech` supports the `timeupdate` event.\r\n   * This will be used to determine if {@link Tech#manualTimeUpdates} should be called.\r\n   *\r\n   * @type {boolean}\r\n   * @default\r\n   */\r\n  Tech.prototype.featuresTimeupdateEvents = false;\r\n\r\n  /**\r\n   * Boolean indicating whether the `Tech` supports the native `TextTrack`s.\r\n   * This will help us integrate with native `TextTrack`s if the browser supports them.\r\n   *\r\n   * @type {boolean}\r\n   * @default\r\n   */\r\n  Tech.prototype.featuresNativeTextTracks = false;\r\n\r\n  /**\r\n   * Boolean indicating whether the `Tech` supports `requestVideoFrameCallback`.\r\n   *\r\n   * @type {boolean}\r\n   * @default\r\n   */\r\n  Tech.prototype.featuresVideoFrameCallback = false;\r\n\r\n  /**\r\n   * A functional mixin for techs that want to use the Source Handler pattern.\r\n   * Source handlers are scripts for handling specific formats.\r\n   * The source handler pattern is used for adaptive formats (HLS, DASH) that\r\n   * manually load video data and feed it into a Source Buffer (Media Source Extensions)\r\n   * Example: `Tech.withSourceHandlers.call(MyTech);`\r\n   *\r\n   * @param {Tech} _Tech\r\n   *        The tech to add source handler functions to.\r\n   *\r\n   * @mixes Tech~SourceHandlerAdditions\r\n   */\r\n  Tech.withSourceHandlers = function (_Tech) {\r\n    /**\r\n     * Register a source handler\r\n     *\r\n     * @param {Function} handler\r\n     *        The source handler class\r\n     *\r\n     * @param {number} [index]\r\n     *        Register it at the following index\r\n     */\r\n    _Tech.registerSourceHandler = function (handler, index) {\r\n      let handlers = _Tech.sourceHandlers;\r\n      if (!handlers) {\r\n        handlers = _Tech.sourceHandlers = [];\r\n      }\r\n      if (index === undefined) {\r\n        // add to the end of the list\r\n        index = handlers.length;\r\n      }\r\n      handlers.splice(index, 0, handler);\r\n    };\r\n\r\n    /**\r\n     * Check if the tech can support the given type. Also checks the\r\n     * Techs sourceHandlers.\r\n     *\r\n     * @param {string} type\r\n     *         The mimetype to check.\r\n     *\r\n     * @return {string}\r\n     *         'probably', 'maybe', or '' (empty string)\r\n     */\r\n    _Tech.canPlayType = function (type) {\r\n      const handlers = _Tech.sourceHandlers || [];\r\n      let can;\r\n      for (let i = 0; i < handlers.length; i++) {\r\n        can = handlers[i].canPlayType(type);\r\n        if (can) {\r\n          return can;\r\n        }\r\n      }\r\n      return '';\r\n    };\r\n\r\n    /**\r\n     * Returns the first source handler that supports the source.\r\n     *\r\n     * TODO: Answer question: should 'probably' be prioritized over 'maybe'\r\n     *\r\n     * @param {SourceObject} source\r\n     *        The source object\r\n     *\r\n     * @param {Object} options\r\n     *        The options passed to the tech\r\n     *\r\n     * @return {SourceHandler|null}\r\n     *          The first source handler that supports the source or null if\r\n     *          no SourceHandler supports the source\r\n     */\r\n    _Tech.selectSourceHandler = function (source, options) {\r\n      const handlers = _Tech.sourceHandlers || [];\r\n      let can;\r\n      for (let i = 0; i < handlers.length; i++) {\r\n        can = handlers[i].canHandleSource(source, options);\r\n        if (can) {\r\n          return handlers[i];\r\n        }\r\n      }\r\n      return null;\r\n    };\r\n\r\n    /**\r\n     * Check if the tech can support the given source.\r\n     *\r\n     * @param {SourceObject} srcObj\r\n     *        The source object\r\n     *\r\n     * @param {Object} options\r\n     *        The options passed to the tech\r\n     *\r\n     * @return {string}\r\n     *         'probably', 'maybe', or '' (empty string)\r\n     */\r\n    _Tech.canPlaySource = function (srcObj, options) {\r\n      const sh = _Tech.selectSourceHandler(srcObj, options);\r\n      if (sh) {\r\n        return sh.canHandleSource(srcObj, options);\r\n      }\r\n      return '';\r\n    };\r\n\r\n    /**\r\n     * When using a source handler, prefer its implementation of\r\n     * any function normally provided by the tech.\r\n     */\r\n    const deferrable = ['seekable', 'seeking', 'duration'];\r\n\r\n    /**\r\n     * A wrapper around {@link Tech#seekable} that will call a `SourceHandler`s seekable\r\n     * function if it exists, with a fallback to the Techs seekable function.\r\n     *\r\n     * @method _Tech.seekable\r\n     */\r\n\r\n    /**\r\n     * A wrapper around {@link Tech#duration} that will call a `SourceHandler`s duration\r\n     * function if it exists, otherwise it will fallback to the techs duration function.\r\n     *\r\n     * @method _Tech.duration\r\n     */\r\n\r\n    deferrable.forEach(function (fnName) {\r\n      const originalFn = this[fnName];\r\n      if (typeof originalFn !== 'function') {\r\n        return;\r\n      }\r\n      this[fnName] = function () {\r\n        if (this.sourceHandler_ && this.sourceHandler_[fnName]) {\r\n          return this.sourceHandler_[fnName].apply(this.sourceHandler_, arguments);\r\n        }\r\n        return originalFn.apply(this, arguments);\r\n      };\r\n    }, _Tech.prototype);\r\n\r\n    /**\r\n     * Create a function for setting the source using a source object\r\n     * and source handlers.\r\n     * Should never be called unless a source handler was found.\r\n     *\r\n     * @param {SourceObject} source\r\n     *        A source object with src and type keys\r\n     */\r\n    _Tech.prototype.setSource = function (source) {\r\n      let sh = _Tech.selectSourceHandler(source, this.options_);\r\n      if (!sh) {\r\n        // Fall back to a native source handler when unsupported sources are\r\n        // deliberately set\r\n        if (_Tech.nativeSourceHandler) {\r\n          sh = _Tech.nativeSourceHandler;\r\n        } else {\r\n          log$1.error('No source handler found for the current source.');\r\n        }\r\n      }\r\n\r\n      // Dispose any existing source handler\r\n      this.disposeSourceHandler();\r\n      this.off('dispose', this.disposeSourceHandler_);\r\n      if (sh !== _Tech.nativeSourceHandler) {\r\n        this.currentSource_ = source;\r\n      }\r\n      this.sourceHandler_ = sh.handleSource(source, this, this.options_);\r\n      this.one('dispose', this.disposeSourceHandler_);\r\n    };\r\n\r\n    /**\r\n     * Clean up any existing SourceHandlers and listeners when the Tech is disposed.\r\n     *\r\n     * @listens Tech#dispose\r\n     */\r\n    _Tech.prototype.disposeSourceHandler = function () {\r\n      // if we have a source and get another one\r\n      // then we are loading something new\r\n      // than clear all of our current tracks\r\n      if (this.currentSource_) {\r\n        this.clearTracks(['audio', 'video']);\r\n        this.currentSource_ = null;\r\n      }\r\n\r\n      // always clean up auto-text tracks\r\n      this.cleanupAutoTextTracks();\r\n      if (this.sourceHandler_) {\r\n        if (this.sourceHandler_.dispose) {\r\n          this.sourceHandler_.dispose();\r\n        }\r\n        this.sourceHandler_ = null;\r\n      }\r\n    };\r\n  };\r\n\r\n  // The base Tech class needs to be registered as a Component. It is the only\r\n  // Tech that can be registered as a Component.\r\n  Component$1.registerComponent('Tech', Tech);\r\n  Tech.registerTech('Tech', Tech);\r\n\r\n  /**\r\n   * A list of techs that should be added to techOrder on Players\r\n   *\r\n   * @private\r\n   */\r\n  Tech.defaultTechOrder_ = [];\r\n\r\n  /**\r\n   * @file middleware.js\r\n   * @module middleware\r\n   */\r\n\r\n  /** @import Player from '../player' */\r\n  /** @import Tech from '../tech/tech' */\r\n\r\n  const middlewares = {};\r\n  const middlewareInstances = {};\r\n  const TERMINATOR = {};\r\n\r\n  /**\r\n   * A middleware object is a plain JavaScript object that has methods that\r\n   * match the {@link Tech} methods found in the lists of allowed\r\n   * {@link module:middleware.allowedGetters|getters},\r\n   * {@link module:middleware.allowedSetters|setters}, and\r\n   * {@link module:middleware.allowedMediators|mediators}.\r\n   *\r\n   * @typedef {Object} MiddlewareObject\r\n   */\r\n\r\n  /**\r\n   * A middleware factory function that should return a\r\n   * {@link module:middleware~MiddlewareObject|MiddlewareObject}.\r\n   *\r\n   * This factory will be called for each player when needed, with the player\r\n   * passed in as an argument.\r\n   *\r\n   * @callback MiddlewareFactory\r\n   * @param {Player} player\r\n   *        A Video.js player.\r\n   */\r\n\r\n  /**\r\n   * Define a middleware that the player should use by way of a factory function\r\n   * that returns a middleware object.\r\n   *\r\n   * @param  {string} type\r\n   *         The MIME type to match or `\"*\"` for all MIME types.\r\n   *\r\n   * @param  {MiddlewareFactory} middleware\r\n   *         A middleware factory function that will be executed for\r\n   *         matching types.\r\n   */\r\n  function use(type, middleware) {\r\n    middlewares[type] = middlewares[type] || [];\r\n    middlewares[type].push(middleware);\r\n  }\r\n\r\n  /**\r\n   * Asynchronously sets a source using middleware by recursing through any\r\n   * matching middlewares and calling `setSource` on each, passing along the\r\n   * previous returned value each time.\r\n   *\r\n   * @param  {Player} player\r\n   *         A {@link Player} instance.\r\n   *\r\n   * @param  {Tech~SourceObject} src\r\n   *         A source object.\r\n   *\r\n   * @param  {Function}\r\n   *         The next middleware to run.\r\n   */\r\n  function setSource(player, src, next) {\r\n    player.setTimeout(() => setSourceHelper(src, middlewares[src.type], next, player), 1);\r\n  }\r\n\r\n  /**\r\n   * When the tech is set, passes the tech to each middleware's `setTech` method.\r\n   *\r\n   * @param {Object[]} middleware\r\n   *        An array of middleware instances.\r\n   *\r\n   * @param {Tech} tech\r\n   *        A Video.js tech.\r\n   */\r\n  function setTech(middleware, tech) {\r\n    middleware.forEach(mw => mw.setTech && mw.setTech(tech));\r\n  }\r\n\r\n  /**\r\n   * Calls a getter on the tech first, through each middleware\r\n   * from right to left to the player.\r\n   *\r\n   * @param  {Object[]} middleware\r\n   *         An array of middleware instances.\r\n   *\r\n   * @param  {Tech} tech\r\n   *         The current tech.\r\n   *\r\n   * @param  {string} method\r\n   *         A method name.\r\n   *\r\n   * @return {*}\r\n   *         The final value from the tech after middleware has intercepted it.\r\n   */\r\n  function get(middleware, tech, method) {\r\n    return middleware.reduceRight(middlewareIterator(method), tech[method]());\r\n  }\r\n\r\n  /**\r\n   * Takes the argument given to the player and calls the setter method on each\r\n   * middleware from left to right to the tech.\r\n   *\r\n   * @param  {Object[]} middleware\r\n   *         An array of middleware instances.\r\n   *\r\n   * @param  {Tech} tech\r\n   *         The current tech.\r\n   *\r\n   * @param  {string} method\r\n   *         A method name.\r\n   *\r\n   * @param  {*} arg\r\n   *         The value to set on the tech.\r\n   *\r\n   * @return {*}\r\n   *         The return value of the `method` of the `tech`.\r\n   */\r\n  function set(middleware, tech, method, arg) {\r\n    return tech[method](middleware.reduce(middlewareIterator(method), arg));\r\n  }\r\n\r\n  /**\r\n   * Takes the argument given to the player and calls the `call` version of the\r\n   * method on each middleware from left to right.\r\n   *\r\n   * Then, call the passed in method on the tech and return the result unchanged\r\n   * back to the player, through middleware, this time from right to left.\r\n   *\r\n   * @param  {Object[]} middleware\r\n   *         An array of middleware instances.\r\n   *\r\n   * @param  {Tech} tech\r\n   *         The current tech.\r\n   *\r\n   * @param  {string} method\r\n   *         A method name.\r\n   *\r\n   * @param  {*} arg\r\n   *         The value to set on the tech.\r\n   *\r\n   * @return {*}\r\n   *         The return value of the `method` of the `tech`, regardless of the\r\n   *         return values of middlewares.\r\n   */\r\n  function mediate(middleware, tech, method, arg = null) {\r\n    const callMethod = 'call' + toTitleCase$1(method);\r\n    const middlewareValue = middleware.reduce(middlewareIterator(callMethod), arg);\r\n    const terminated = middlewareValue === TERMINATOR;\r\n    // deprecated. The `null` return value should instead return TERMINATOR to\r\n    // prevent confusion if a techs method actually returns null.\r\n    const returnValue = terminated ? null : tech[method](middlewareValue);\r\n    executeRight(middleware, method, returnValue, terminated);\r\n    return returnValue;\r\n  }\r\n\r\n  /**\r\n   * Enumeration of allowed getters where the keys are method names.\r\n   *\r\n   * @type {Object}\r\n   */\r\n  const allowedGetters = {\r\n    buffered: 1,\r\n    currentTime: 1,\r\n    duration: 1,\r\n    muted: 1,\r\n    played: 1,\r\n    paused: 1,\r\n    seekable: 1,\r\n    volume: 1,\r\n    ended: 1\r\n  };\r\n\r\n  /**\r\n   * Enumeration of allowed setters where the keys are method names.\r\n   *\r\n   * @type {Object}\r\n   */\r\n  const allowedSetters = {\r\n    setCurrentTime: 1,\r\n    setMuted: 1,\r\n    setVolume: 1\r\n  };\r\n\r\n  /**\r\n   * Enumeration of allowed mediators where the keys are method names.\r\n   *\r\n   * @type {Object}\r\n   */\r\n  const allowedMediators = {\r\n    play: 1,\r\n    pause: 1\r\n  };\r\n  function middlewareIterator(method) {\r\n    return (value, mw) => {\r\n      // if the previous middleware terminated, pass along the termination\r\n      if (value === TERMINATOR) {\r\n        return TERMINATOR;\r\n      }\r\n      if (mw[method]) {\r\n        return mw[method](value);\r\n      }\r\n      return value;\r\n    };\r\n  }\r\n  function executeRight(mws, method, value, terminated) {\r\n    for (let i = mws.length - 1; i >= 0; i--) {\r\n      const mw = mws[i];\r\n      if (mw[method]) {\r\n        mw[method](terminated, value);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clear the middleware cache for a player.\r\n   *\r\n   * @param  {Player} player\r\n   *         A {@link Player} instance.\r\n   */\r\n  function clearCacheForPlayer(player) {\r\n    if (middlewareInstances.hasOwnProperty(player.id())) {\r\n      delete middlewareInstances[player.id()];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * {\r\n   *  [playerId]: [[mwFactory, mwInstance], ...]\r\n   * }\r\n   *\r\n   * @private\r\n   */\r\n  function getOrCreateFactory(player, mwFactory) {\r\n    const mws = middlewareInstances[player.id()];\r\n    let mw = null;\r\n    if (mws === undefined || mws === null) {\r\n      mw = mwFactory(player);\r\n      middlewareInstances[player.id()] = [[mwFactory, mw]];\r\n      return mw;\r\n    }\r\n    for (let i = 0; i < mws.length; i++) {\r\n      const [mwf, mwi] = mws[i];\r\n      if (mwf !== mwFactory) {\r\n        continue;\r\n      }\r\n      mw = mwi;\r\n    }\r\n    if (mw === null) {\r\n      mw = mwFactory(player);\r\n      mws.push([mwFactory, mw]);\r\n    }\r\n    return mw;\r\n  }\r\n  function setSourceHelper(src = {}, middleware = [], next, player, acc = [], lastRun = false) {\r\n    const [mwFactory, ...mwrest] = middleware;\r\n\r\n    // if mwFactory is a string, then we're at a fork in the road\r\n    if (typeof mwFactory === 'string') {\r\n      setSourceHelper(src, middlewares[mwFactory], next, player, acc, lastRun);\r\n\r\n      // if we have an mwFactory, call it with the player to get the mw,\r\n      // then call the mw's setSource method\r\n    } else if (mwFactory) {\r\n      const mw = getOrCreateFactory(player, mwFactory);\r\n\r\n      // if setSource isn't present, implicitly select this middleware\r\n      if (!mw.setSource) {\r\n        acc.push(mw);\r\n        return setSourceHelper(src, mwrest, next, player, acc, lastRun);\r\n      }\r\n      mw.setSource(Object.assign({}, src), function (err, _src) {\r\n        // something happened, try the next middleware on the current level\r\n        // make sure to use the old src\r\n        if (err) {\r\n          return setSourceHelper(src, mwrest, next, player, acc, lastRun);\r\n        }\r\n\r\n        // we've succeeded, now we need to go deeper\r\n        acc.push(mw);\r\n\r\n        // if it's the same type, continue down the current chain\r\n        // otherwise, we want to go down the new chain\r\n        setSourceHelper(_src, src.type === _src.type ? mwrest : middlewares[_src.type], next, player, acc, lastRun);\r\n      });\r\n    } else if (mwrest.length) {\r\n      setSourceHelper(src, mwrest, next, player, acc, lastRun);\r\n    } else if (lastRun) {\r\n      next(src, acc);\r\n    } else {\r\n      setSourceHelper(src, middlewares['*'], next, player, acc, true);\r\n    }\r\n  }\r\n\r\n  /** @import Player from '../player' */\r\n\r\n  /**\r\n   * Mimetypes\r\n   *\r\n   * @see https://www.iana.org/assignments/media-types/media-types.xhtml\r\n   * @typedef Mimetypes~Kind\r\n   * @enum\r\n   */\r\n  const MimetypesKind = {\r\n    opus: 'video/ogg',\r\n    ogv: 'video/ogg',\r\n    mp4: 'video/mp4',\r\n    mov: 'video/mp4',\r\n    m4v: 'video/mp4',\r\n    mkv: 'video/x-matroska',\r\n    m4a: 'audio/mp4',\r\n    mp3: 'audio/mpeg',\r\n    aac: 'audio/aac',\r\n    caf: 'audio/x-caf',\r\n    flac: 'audio/flac',\r\n    oga: 'audio/ogg',\r\n    wav: 'audio/wav',\r\n    m3u8: 'application/x-mpegURL',\r\n    mpd: 'application/dash+xml',\r\n    jpg: 'image/jpeg',\r\n    jpeg: 'image/jpeg',\r\n    gif: 'image/gif',\r\n    png: 'image/png',\r\n    svg: 'image/svg+xml',\r\n    webp: 'image/webp'\r\n  };\r\n\r\n  /**\r\n   * Get the mimetype of a given src url if possible\r\n   *\r\n   * @param {string} src\r\n   *        The url to the src\r\n   *\r\n   * @return {string}\r\n   *         return the mimetype if it was known or empty string otherwise\r\n   */\r\n  const getMimetype = function (src = '') {\r\n    const ext = getFileExtension(src);\r\n    const mimetype = MimetypesKind[ext.toLowerCase()];\r\n    return mimetype || '';\r\n  };\r\n\r\n  /**\r\n   * Find the mime type of a given source string if possible. Uses the player\r\n   * source cache.\r\n   *\r\n   * @param {Player} player\r\n   *        The player object\r\n   *\r\n   * @param {string} src\r\n   *        The source string\r\n   *\r\n   * @return {string}\r\n   *         The type that was found\r\n   */\r\n  const findMimetype = (player, src) => {\r\n    if (!src) {\r\n      return '';\r\n    }\r\n\r\n    // 1. check for the type in the `source` cache\r\n    if (player.cache_.source.src === src && player.cache_.source.type) {\r\n      return player.cache_.source.type;\r\n    }\r\n\r\n    // 2. see if we have this source in our `currentSources` cache\r\n    const matchingSources = player.cache_.sources.filter(s => s.src === src);\r\n    if (matchingSources.length) {\r\n      return matchingSources[0].type;\r\n    }\r\n\r\n    // 3. look for the src url in source elements and use the type there\r\n    const sources = player.$$('source');\r\n    for (let i = 0; i < sources.length; i++) {\r\n      const s = sources[i];\r\n      if (s.type && s.src && s.src === src) {\r\n        return s.type;\r\n      }\r\n    }\r\n\r\n    // 4. finally fallback to our list of mime types based on src url extension\r\n    return getMimetype(src);\r\n  };\r\n\r\n  /**\r\n   * @module filter-source\r\n   */\r\n\r\n  /**\r\n   * Filter out single bad source objects or multiple source objects in an\r\n   * array. Also flattens nested source object arrays into a 1 dimensional\r\n   * array of source objects.\r\n   *\r\n   * @param {Tech~SourceObject|Tech~SourceObject[]} src\r\n   *        The src object to filter\r\n   *\r\n   * @return {Tech~SourceObject[]}\r\n   *         An array of sourceobjects containing only valid sources\r\n   *\r\n   * @private\r\n   */\r\n  const filterSource = function (src) {\r\n    // traverse array\r\n    if (Array.isArray(src)) {\r\n      let newsrc = [];\r\n      src.forEach(function (srcobj) {\r\n        srcobj = filterSource(srcobj);\r\n        if (Array.isArray(srcobj)) {\r\n          newsrc = newsrc.concat(srcobj);\r\n        } else if (isObject$1(srcobj)) {\r\n          newsrc.push(srcobj);\r\n        }\r\n      });\r\n      src = newsrc;\r\n    } else if (typeof src === 'string' && src.trim()) {\r\n      // convert string into object\r\n      src = [fixSource({\r\n        src\r\n      })];\r\n    } else if (isObject$1(src) && typeof src.src === 'string' && src.src && src.src.trim()) {\r\n      // src is already valid\r\n      src = [fixSource(src)];\r\n    } else {\r\n      // invalid source, turn it into an empty array\r\n      src = [];\r\n    }\r\n    return src;\r\n  };\r\n\r\n  /**\r\n   * Checks src mimetype, adding it when possible\r\n   *\r\n   * @param {Tech~SourceObject} src\r\n   *        The src object to check\r\n   * @return {Tech~SourceObject}\r\n   *        src Object with known type\r\n   */\r\n  function fixSource(src) {\r\n    if (!src.type) {\r\n      const mimetype = getMimetype(src.src);\r\n      if (mimetype) {\r\n        src.type = mimetype;\r\n      }\r\n    }\r\n    return src;\r\n  }\r\n\r\n  var icons = \"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\">\\n  <defs>\\n    <symbol viewBox=\\\"0 0 48 48\\\" id=\\\"vjs-icon-play\\\">\\n      <path d=\\\"M16 10v28l22-14z\\\"></path>\\n    </symbol>\\n    <symbol viewBox=\\\"0 0 48 48\\\" id=\\\"vjs-icon-pause\\\">\\n      <path d=\\\"M12 38h8V10h-8v28zm16-28v28h8V10h-8z\\\"></path>\\n    </symbol>\\n    <symbol viewBox=\\\"0 0 48 48\\\" id=\\\"vjs-icon-audio\\\">\\n      <path d=\\\"M24 2C14.06 2 6 10.06 6 20v14c0 3.31 2.69 6 6 6h6V24h-8v-4c0-7.73 6.27-14 14-14s14 6.27 14 14v4h-8v16h6c3.31 0 6-2.69 6-6V20c0-9.94-8.06-18-18-18z\\\"></path>\\n    </symbol>\\n    <symbol viewBox=\\\"0 0 48 48\\\" id=\\\"vjs-icon-captions\\\">\\n      <path d=\\\"M38 8H10c-2.21 0-4 1.79-4 4v24c0 2.21 1.79 4 4 4h28c2.21 0 4-1.79 4-4V12c0-2.21-1.79-4-4-4zM22 22h-3v-1h-4v6h4v-1h3v2a2 2 0 0 1-2 2h-6a2 2 0 0 1-2-2v-8a2 2 0 0 1 2-2h6a2 2 0 0 1 2 2v2zm14 0h-3v-1h-4v6h4v-1h3v2a2 2 0 0 1-2 2h-6a2 2 0 0 1-2-2v-8a2 2 0 0 1 2-2h6a2 2 0 0 1 2 2v2z\\\"></path>\\n    </symbol>\\n    <symbol viewBox=\\\"0 0 48 48\\\" id=\\\"vjs-icon-subtitles\\\">\\n      <path d=\\\"M40 8H8c-2.21 0-4 1.79-4 4v24c0 2.21 1.79 4 4 4h32c2.21 0 4-1.79 4-4V12c0-2.21-1.79-4-4-4zM8 24h8v4H8v-4zm20 12H8v-4h20v4zm12 0h-8v-4h8v4zm0-8H20v-4h20v4z\\\"></path>\\n    </symbol>\\n    <symbol viewBox=\\\"0 0 48 48\\\" id=\\\"vjs-icon-fullscreen-enter\\\">\\n      <path d=\\\"M14 28h-4v10h10v-4h-6v-6zm-4-8h4v-6h6v-4H10v10zm24 14h-6v4h10V28h-4v6zm-6-24v4h6v6h4V10H28z\\\"></path>\\n    </symbol>\\n    <symbol viewBox=\\\"0 0 48 48\\\" id=\\\"vjs-icon-fullscreen-exit\\\">\\n      <path d=\\\"M10 32h6v6h4V28H10v4zm6-16h-6v4h10V10h-4v6zm12 22h4v-6h6v-4H28v10zm4-22v-6h-4v10h10v-4h-6z\\\"></path>\\n    </symbol>\\n    <symbol viewBox=\\\"0 0 48 48\\\" id=\\\"vjs-icon-play-circle\\\">\\n      <path d=\\\"M20 33l12-9-12-9v18zm4-29C12.95 4 4 12.95 4 24s8.95 20 20 20 20-8.95 20-20S35.05 4 24 4zm0 36c-8.82 0-16-7.18-16-16S15.18 8 24 8s16 7.18 16 16-7.18 16-16 16z\\\"></path>\\n    </symbol>\\n    <symbol viewBox=\\\"0 0 48 48\\\" id=\\\"vjs-icon-volume-mute\\\">\\n      <path d=\\\"M33 24c0-3.53-2.04-6.58-5-8.05v4.42l4.91 4.91c.06-.42.09-.85.09-1.28zm5 0c0 1.88-.41 3.65-1.08 5.28l3.03 3.03C41.25 29.82 42 27 42 24c0-8.56-5.99-15.72-14-17.54v4.13c5.78 1.72 10 7.07 10 13.41zM8.55 6L6 8.55 15.45 18H6v12h8l10 10V26.55l8.51 8.51c-1.34 1.03-2.85 1.86-4.51 2.36v4.13a17.94 17.94 0 0 0 7.37-3.62L39.45 42 42 39.45l-18-18L8.55 6zM24 8l-4.18 4.18L24 16.36V8z\\\"></path>\\n    </symbol>\\n    <symbol viewBox=\\\"0 0 48 48\\\" id=\\\"vjs-icon-volume-low\\\">\\n      <path d=\\\"M14 18v12h8l10 10V8L22 18h-8z\\\"></path>\\n    </symbol>\\n    <symbol viewBox=\\\"0 0 48 48\\\" id=\\\"vjs-icon-volume-medium\\\">\\n      <path d=\\\"M37 24c0-3.53-2.04-6.58-5-8.05v16.11c2.96-1.48 5-4.53 5-8.06zm-27-6v12h8l10 10V8L18 18h-8z\\\"></path>\\n    </symbol>\\n    <symbol viewBox=\\\"0 0 48 48\\\" id=\\\"vjs-icon-volume-high\\\">\\n      <path d=\\\"M6 18v12h8l10 10V8L14 18H6zm27 6c0-3.53-2.04-6.58-5-8.05v16.11c2.96-1.48 5-4.53 5-8.06zM28 6.46v4.13c5.78 1.72 10 7.07 10 13.41s-4.22 11.69-10 13.41v4.13c8.01-1.82 14-8.97 14-17.54S36.01 8.28 28 6.46z\\\"></path>\\n    </symbol>\\n    <symbol viewBox=\\\"0 0 48 48\\\" id=\\\"vjs-icon-spinner\\\">\\n      <path d=\\\"M18.8 21l9.53-16.51C26.94 4.18 25.49 4 24 4c-4.8 0-9.19 1.69-12.64 4.51l7.33 12.69.11-.2zm24.28-3c-1.84-5.85-6.3-10.52-11.99-12.68L23.77 18h19.31zm.52 2H28.62l.58 1 9.53 16.5C41.99 33.94 44 29.21 44 24c0-1.37-.14-2.71-.4-4zm-26.53 4l-7.8-13.5C6.01 14.06 4 18.79 4 24c0 1.37.14 2.71.4 4h14.98l-2.31-4zM4.92 30c1.84 5.85 6.3 10.52 11.99 12.68L24.23 30H4.92zm22.54 0l-7.8 13.51c1.4.31 2.85.49 4.34.49 4.8 0 9.19-1.69 12.64-4.51L29.31 26.8 27.46 30z\\\"></path>\\n    </symbol>\\n    <symbol viewBox=\\\"0 0 24 24\\\" id=\\\"vjs-icon-hd\\\">\\n      <path d=\\\"M19 3H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-8 12H9.5v-2h-2v2H6V9h1.5v2.5h2V9H11v6zm2-6h4c.55 0 1 .45 1 1v4c0 .55-.45 1-1 1h-4V9zm1.5 4.5h2v-3h-2v3z\\\"></path>\\n    </symbol>\\n    <symbol viewBox=\\\"0 0 48 48\\\" id=\\\"vjs-icon-chapters\\\">\\n      <path d=\\\"M6 26h4v-4H6v4zm0 8h4v-4H6v4zm0-16h4v-4H6v4zm8 8h28v-4H14v4zm0 8h28v-4H14v4zm0-20v4h28v-4H14z\\\"></path>\\n    </symbol>\\n    <symbol viewBox=\\\"0 0 40 40\\\" id=\\\"vjs-icon-downloading\\\">\\n      <path d=\\\"M18.208 36.875q-3.208-.292-5.979-1.729-2.771-1.438-4.812-3.729-2.042-2.292-3.188-5.229-1.146-2.938-1.146-6.23 0-6.583 4.334-11.416 4.333-4.834 10.833-5.5v3.166q-5.167.75-8.583 4.646Q6.25 14.75 6.25 19.958q0 5.209 3.396 9.104 3.396 3.896 8.562 4.646zM20 28.417L11.542 20l2.083-2.083 4.917 4.916v-11.25h2.916v11.25l4.875-4.916L28.417 20zm1.792 8.458v-3.167q1.833-.25 3.541-.958 1.709-.708 3.167-1.875l2.333 2.292q-1.958 1.583-4.25 2.541-2.291.959-4.791 1.167zm6.791-27.792q-1.541-1.125-3.25-1.854-1.708-.729-3.541-1.021V3.042q2.5.25 4.77 1.208 2.271.958 4.271 2.5zm4.584 21.584l-2.25-2.25q1.166-1.5 1.854-3.209.687-1.708.937-3.541h3.209q-.292 2.5-1.229 4.791-.938 2.292-2.521 4.209zm.541-12.417q-.291-1.833-.958-3.562-.667-1.73-1.833-3.188l2.375-2.208q1.541 1.916 2.458 4.208.917 2.292 1.167 4.75z\\\"></path>\\n    </symbol>\\n    <symbol viewBox=\\\"0 0 48 48\\\" id=\\\"vjs-icon-file-download\\\">\\n      <path d=\\\"M10.8 40.55q-1.35 0-2.375-1T7.4 37.15v-7.7h3.4v7.7h26.35v-7.7h3.4v7.7q0 1.4-1 2.4t-2.4 1zM24 32.1L13.9 22.05l2.45-2.45 5.95 5.95V7.15h3.4v18.4l5.95-5.95 2.45 2.45z\\\"></path>\\n    </symbol>\\n    <symbol viewBox=\\\"0 0 48 48\\\" id=\\\"vjs-icon-file-download-done\\\">\\n      <path d=\\\"M9.8 40.5v-3.45h28.4v3.45zm9.2-9.05L7.4 19.85l2.45-2.35L19 26.65l19.2-19.2 2.4 2.4z\\\"></path>\\n    </symbol>\\n    <symbol viewBox=\\\"0 0 48 48\\\" id=\\\"vjs-icon-file-download-off\\\">\\n      <path d=\\\"M4.9 4.75L43.25 43.1 41 45.3l-4.75-4.75q-.05.05-.075.025-.025-.025-.075-.025H10.8q-1.35 0-2.375-1T7.4 37.15v-7.7h3.4v7.7h22.05l-7-7-1.85 1.8L13.9 21.9l1.85-1.85L2.7 7zm26.75 14.7l2.45 2.45-3.75 3.8-2.45-2.5zM25.7 7.15V21.1l-3.4-3.45V7.15z\\\"></path>\\n    </symbol>\\n    <symbol viewBox=\\\"0 0 48 48\\\" id=\\\"vjs-icon-share\\\">\\n      <path d=\\\"M36 32.17c-1.52 0-2.89.59-3.93 1.54L17.82 25.4c.11-.45.18-.92.18-1.4s-.07-.95-.18-1.4l14.1-8.23c1.07 1 2.5 1.62 4.08 1.62 3.31 0 6-2.69 6-6s-2.69-6-6-6-6 2.69-6 6c0 .48.07.95.18 1.4l-14.1 8.23c-1.07-1-2.5-1.62-4.08-1.62-3.31 0-6 2.69-6 6s2.69 6 6 6c1.58 0 3.01-.62 4.08-1.62l14.25 8.31c-.1.42-.16.86-.16 1.31A5.83 5.83 0 1 0 36 32.17z\\\"></path>\\n    </symbol>\\n    <symbol viewBox=\\\"0 0 48 48\\\" id=\\\"vjs-icon-cog\\\">\\n      <path d=\\\"M38.86 25.95c.08-.64.14-1.29.14-1.95s-.06-1.31-.14-1.95l4.23-3.31c.38-.3.49-.84.24-1.28l-4-6.93c-.25-.43-.77-.61-1.22-.43l-4.98 2.01c-1.03-.79-2.16-1.46-3.38-1.97L29 4.84c-.09-.47-.5-.84-1-.84h-8c-.5 0-.91.37-.99.84l-.75 5.3a14.8 14.8 0 0 0-3.38 1.97L9.9 10.1a1 1 0 0 0-1.22.43l-4 6.93c-.25.43-.14.97.24 1.28l4.22 3.31C9.06 22.69 9 23.34 9 24s.06 1.31.14 1.95l-4.22 3.31c-.38.3-.49.84-.24 1.28l4 6.93c.25.43.77.61 1.22.43l4.98-2.01c1.03.79 2.16 1.46 3.38 1.97l.75 5.3c.08.47.49.84.99.84h8c.5 0 .91-.37.99-.84l.75-5.3a14.8 14.8 0 0 0 3.38-1.97l4.98 2.01a1 1 0 0 0 1.22-.43l4-6.93c.25-.43.14-.97-.24-1.28l-4.22-3.31zM24 31c-3.87 0-7-3.13-7-7s3.13-7 7-7 7 3.13 7 7-3.13 7-7 7z\\\"></path>\\n    </symbol>\\n    <symbol viewBox=\\\"0 0 48 48\\\" id=\\\"vjs-icon-square\\\">\\n      <path d=\\\"M36 8H12c-2.21 0-4 1.79-4 4v24c0 2.21 1.79 4 4 4h24c2.21 0 4-1.79 4-4V12c0-2.21-1.79-4-4-4zm0 28H12V12h24v24z\\\"></path>\\n    </symbol>\\n    <symbol viewBox=\\\"0 0 48 48\\\" id=\\\"vjs-icon-circle\\\">\\n      <circle cx=\\\"24\\\" cy=\\\"24\\\" r=\\\"20\\\"></circle>\\n    </symbol>\\n    <symbol viewBox=\\\"0 0 48 48\\\" id=\\\"vjs-icon-circle-outline\\\">\\n      <path d=\\\"M24 4C12.95 4 4 12.95 4 24s8.95 20 20 20 20-8.95 20-20S35.05 4 24 4zm0 36c-8.82 0-16-7.18-16-16S15.18 8 24 8s16 7.18 16 16-7.18 16-16 16z\\\"></path>\\n    </symbol>\\n    <symbol viewBox=\\\"0 0 48 48\\\" id=\\\"vjs-icon-circle-inner-circle\\\">\\n      <path d=\\\"M24 4C12.97 4 4 12.97 4 24s8.97 20 20 20 20-8.97 20-20S35.03 4 24 4zm0 36c-8.82 0-16-7.18-16-16S15.18 8 24 8s16 7.18 16 16-7.18 16-16 16zm6-16c0 3.31-2.69 6-6 6s-6-2.69-6-6 2.69-6 6-6 6 2.69 6 6z\\\"></path>\\n    </symbol>\\n    <symbol viewBox=\\\"0 0 48 48\\\" id=\\\"vjs-icon-cancel\\\">\\n      <path d=\\\"M24 4C12.95 4 4 12.95 4 24s8.95 20 20 20 20-8.95 20-20S35.05 4 24 4zm10 27.17L31.17 34 24 26.83 16.83 34 14 31.17 21.17 24 14 16.83 16.83 14 24 21.17 31.17 14 34 16.83 26.83 24 34 31.17z\\\"></path>\\n    </symbol>\\n    <symbol viewBox=\\\"0 0 48 48\\\" id=\\\"vjs-icon-replay\\\">\\n      <path d=\\\"M24 10V2L14 12l10 10v-8c6.63 0 12 5.37 12 12s-5.37 12-12 12-12-5.37-12-12H8c0 8.84 7.16 16 16 16s16-7.16 16-16-7.16-16-16-16z\\\"></path>\\n    </symbol>\\n    <symbol viewBox=\\\"0 0 48 48\\\" id=\\\"vjs-icon-repeat\\\">\\n      <path d=\\\"M14 14h20v6l8-8-8-8v6H10v12h4v-8zm20 20H14v-6l-8 8 8 8v-6h24V26h-4v8z\\\"></path>\\n    </symbol>\\n    <symbol viewBox=\\\"0 96 48 48\\\" id=\\\"vjs-icon-replay-5\\\">\\n      <path d=\\\"M17.689 98l-8.697 8.696 8.697 8.697 2.486-2.485-4.32-4.319h1.302c4.93 0 9.071 1.722 12.424 5.165 3.352 3.443 5.029 7.638 5.029 12.584h3.55c0-2.958-.553-5.73-1.658-8.313-1.104-2.583-2.622-4.841-4.555-6.774-1.932-1.932-4.19-3.45-6.773-4.555-2.584-1.104-5.355-1.657-8.313-1.657H15.5l4.615-4.615zm-8.08 21.659v13.861h11.357v5.008H9.609V143h12.7c.834 0 1.55-.298 2.146-.894.596-.597.895-1.31.895-2.145v-7.781c0-.835-.299-1.55-.895-2.147a2.929 2.929 0 0 0-2.147-.894h-8.227v-5.096H25.35v-4.384z\\\"></path>\\n    </symbol>\\n    <symbol viewBox=\\\"0 96 48 48\\\" id=\\\"vjs-icon-replay-10\\\">\\n      <path d=\\\"M42.315 125.63c0-4.997-1.694-9.235-5.08-12.713-3.388-3.479-7.571-5.218-12.552-5.218h-1.315l4.363 4.363-2.51 2.51-8.787-8.786L25.221 97l2.45 2.45-4.662 4.663h1.375c2.988 0 5.788.557 8.397 1.673 2.61 1.116 4.892 2.65 6.844 4.602 1.953 1.953 3.487 4.234 4.602 6.844 1.116 2.61 1.674 5.41 1.674 8.398zM8.183 142v-19.657H3.176V117.8h9.643V142zm13.63 0c-1.156 0-2.127-.393-2.912-1.178-.778-.778-1.168-1.746-1.168-2.902v-16.04c0-1.156.393-2.127 1.178-2.912.779-.779 1.746-1.168 2.902-1.168h7.696c1.156 0 2.126.392 2.911 1.177.779.78 1.168 1.747 1.168 2.903v16.04c0 1.156-.392 2.127-1.177 2.912-.779.779-1.746 1.168-2.902 1.168zm.556-4.636h6.583v-15.02H22.37z\\\"></path>\\n    </symbol>\\n    <symbol viewBox=\\\"0 96 48 48\\\" id=\\\"vjs-icon-replay-30\\\">\\n      <path d=\\\"M26.047 97l-8.733 8.732 8.733 8.733 2.496-2.494-4.336-4.338h1.307c4.95 0 9.108 1.73 12.474 5.187 3.367 3.458 5.051 7.668 5.051 12.635h3.565c0-2.97-.556-5.751-1.665-8.346-1.109-2.594-2.633-4.862-4.574-6.802-1.94-1.941-4.208-3.466-6.803-4.575-2.594-1.109-5.375-1.664-8.345-1.664H23.85l4.634-4.634zM2.555 117.531v4.688h10.297v5.25H5.873v4.687h6.979v5.156H2.555V142H13.36c1.061 0 1.95-.395 2.668-1.186.718-.79 1.076-1.772 1.076-2.94v-16.218c0-1.168-.358-2.149-1.076-2.94-.717-.79-1.607-1.185-2.668-1.185zm22.482.14c-1.149 0-2.11.39-2.885 1.165-.78.78-1.172 1.744-1.172 2.893v15.943c0 1.149.388 2.11 1.163 2.885.78.78 1.745 1.172 2.894 1.172h7.649c1.148 0 2.11-.388 2.884-1.163.78-.78 1.17-1.745 1.17-2.894v-15.943c0-1.15-.386-2.111-1.16-2.885-.78-.78-1.746-1.172-2.894-1.172zm.553 4.518h6.545v14.93H25.59z\\\"></path>\\n    </symbol>\\n    <symbol viewBox=\\\"0 96 48 48\\\" id=\\\"vjs-icon-forward-5\\\">\\n      <path d=\\\"M29.508 97l-2.431 2.43 4.625 4.625h-1.364c-2.965 0-5.742.554-8.332 1.66-2.589 1.107-4.851 2.629-6.788 4.566-1.937 1.937-3.458 4.2-4.565 6.788-1.107 2.59-1.66 5.367-1.66 8.331h3.557c0-4.957 1.68-9.16 5.04-12.611 3.36-3.45 7.51-5.177 12.451-5.177h1.304l-4.326 4.33 2.49 2.49 8.715-8.716zm-9.783 21.61v13.89h11.382v5.018H19.725V142h12.727a2.93 2.93 0 0 0 2.15-.896 2.93 2.93 0 0 0 .896-2.15v-7.798c0-.837-.299-1.554-.896-2.152a2.93 2.93 0 0 0-2.15-.896h-8.245V123h11.29v-4.392z\\\"></path>\\n    </symbol>\\n    <symbol viewBox=\\\"0 96 48 48\\\" id=\\\"vjs-icon-forward-10\\\">\\n      <path d=\\\"M23.119 97l-2.386 2.383 4.538 4.538h-1.339c-2.908 0-5.633.543-8.173 1.63-2.54 1.085-4.76 2.577-6.66 4.478-1.9 1.9-3.392 4.12-4.478 6.66-1.085 2.54-1.629 5.264-1.629 8.172h3.49c0-4.863 1.648-8.986 4.944-12.372 3.297-3.385 7.368-5.078 12.216-5.078h1.279l-4.245 4.247 2.443 2.442 8.55-8.55zm-9.52 21.45v4.42h4.871V142h4.513v-23.55zm18.136 0c-1.125 0-2.066.377-2.824 1.135-.764.764-1.148 1.709-1.148 2.834v15.612c0 1.124.38 2.066 1.139 2.824.764.764 1.708 1.145 2.833 1.145h7.489c1.125 0 2.066-.378 2.824-1.136.764-.764 1.145-1.709 1.145-2.833v-15.612c0-1.125-.378-2.067-1.136-2.825-.764-.764-1.708-1.145-2.833-1.145zm.54 4.42h6.408v14.617h-6.407z\\\"></path>\\n    </symbol>\\n    <symbol viewBox=\\\"0 96 48 48\\\" id=\\\"vjs-icon-forward-30\\\">\\n      <path d=\\\"M25.549 97l-2.437 2.434 4.634 4.635H26.38c-2.97 0-5.753.555-8.347 1.664-2.594 1.109-4.861 2.633-6.802 4.574-1.94 1.94-3.465 4.207-4.574 6.802-1.109 2.594-1.664 5.377-1.664 8.347h3.565c0-4.967 1.683-9.178 5.05-12.636 3.366-3.458 7.525-5.187 12.475-5.187h1.307l-4.335 4.338 2.495 2.494 8.732-8.732zm-11.553 20.53v4.689h10.297v5.249h-6.978v4.688h6.978v5.156H13.996V142h10.808c1.06 0 1.948-.395 2.666-1.186.718-.79 1.077-1.771 1.077-2.94v-16.217c0-1.169-.36-2.15-1.077-2.94-.718-.79-1.605-1.186-2.666-1.186zm21.174.168c-1.149 0-2.11.389-2.884 1.163-.78.78-1.172 1.745-1.172 2.894v15.942c0 1.15.388 2.11 1.162 2.885.78.78 1.745 1.17 2.894 1.17h7.649c1.149 0 2.11-.386 2.885-1.16.78-.78 1.17-1.746 1.17-2.895v-15.942c0-1.15-.387-2.11-1.161-2.885-.78-.78-1.745-1.172-2.894-1.172zm.552 4.516h6.542v14.931h-6.542z\\\"></path>\\n    </symbol>\\n    <symbol viewBox=\\\"0 0 512 512\\\" id=\\\"vjs-icon-audio-description\\\">\\n      <g fill-rule=\\\"evenodd\\\"><path d=\\\"M227.29 381.351V162.993c50.38-1.017 89.108-3.028 117.631 17.126 27.374 19.342 48.734 56.965 44.89 105.325-4.067 51.155-41.335 94.139-89.776 98.475-24.085 2.155-71.972 0-71.972 0s-.84-1.352-.773-2.568m48.755-54.804c31.43 1.26 53.208-16.633 56.495-45.386 4.403-38.51-21.188-63.552-58.041-60.796v103.612c-.036 1.466.575 2.22 1.546 2.57\\\"></path><path d=\\\"M383.78 381.328c13.336 3.71 17.387-11.06 23.215-21.408 12.722-22.571 22.294-51.594 22.445-84.774.221-47.594-18.343-82.517-35.6-106.182h-8.51c-.587 3.874 2.226 7.315 3.865 10.276 13.166 23.762 25.367 56.553 25.54 94.194.2 43.176-14.162 79.278-30.955 107.894\\\"></path><path d=\\\"M425.154 381.328c13.336 3.71 17.384-11.061 23.215-21.408 12.721-22.571 22.291-51.594 22.445-84.774.221-47.594-18.343-82.517-35.6-106.182h-8.511c-.586 3.874 2.226 7.315 3.866 10.276 13.166 23.762 25.367 56.553 25.54 94.194.2 43.176-14.162 79.278-30.955 107.894\\\"></path><path d=\\\"M466.26 381.328c13.337 3.71 17.385-11.061 23.216-21.408 12.722-22.571 22.292-51.594 22.445-84.774.221-47.594-18.343-82.517-35.6-106.182h-8.51c-.587 3.874 2.225 7.315 3.865 10.276 13.166 23.762 25.367 56.553 25.54 94.194.2 43.176-14.162 79.278-30.955 107.894M4.477 383.005H72.58l18.573-28.484 64.169-.135s.065 19.413.065 28.62h48.756V160.307h-58.816c-5.653 9.537-140.85 222.697-140.85 222.697zm152.667-145.282v71.158l-40.453-.27 40.453-70.888z\\\"></path></g>\\n    </symbol>\\n    <symbol viewBox=\\\"0 0 48 48\\\" id=\\\"vjs-icon-next-item\\\">\\n      <path d=\\\"M12 36l17-12-17-12v24zm20-24v24h4V12h-4z\\\"></path>\\n    </symbol>\\n    <symbol viewBox=\\\"0 0 48 48\\\" id=\\\"vjs-icon-previous-item\\\">\\n      <path d=\\\"M12 12h4v24h-4zm7 12l17 12V12z\\\"></path>\\n    </symbol>\\n    <symbol viewBox=\\\"0 0 48 48\\\" id=\\\"vjs-icon-shuffle\\\">\\n      <path d=\\\"M21.17 18.34L10.83 8 8 10.83l10.34 10.34 2.83-2.83zM29 8l4.09 4.09L8 37.17 10.83 40l25.09-25.09L40 19V8H29zm.66 18.83l-2.83 2.83 6.26 6.26L29 40h11V29l-4.09 4.09-6.25-6.26z\\\"></path>\\n    </symbol>\\n    <symbol viewBox=\\\"0 0 48 48\\\" id=\\\"vjs-icon-cast\\\">\\n      <path d=\\\"M42 6H6c-2.21 0-4 1.79-4 4v6h4v-6h36v28H28v4h14c2.21 0 4-1.79 4-4V10c0-2.21-1.79-4-4-4zM2 36v6h6c0-3.31-2.69-6-6-6zm0-8v4c5.52 0 10 4.48 10 10h4c0-7.73-6.27-14-14-14zm0-8v4c9.94 0 18 8.06 18 18h4c0-12.15-9.85-22-22-22z\\\"></path>\\n    </symbol>\\n    <symbol viewBox=\\\"0 0 48 48\\\" id=\\\"vjs-icon-picture-in-picture-enter\\\">\\n      <path d=\\\"M38 22H22v11.99h16V22zm8 16V9.96C46 7.76 44.2 6 42 6H6C3.8 6 2 7.76 2 9.96V38c0 2.2 1.8 4 4 4h36c2.2 0 4-1.8 4-4zm-4 .04H6V9.94h36v28.1z\\\"></path>\\n    </symbol>\\n    <symbol viewBox=\\\"0 0 22 18\\\" id=\\\"vjs-icon-picture-in-picture-exit\\\">\\n      <path d=\\\"M18 4H4v10h14V4zm4 12V1.98C22 .88 21.1 0 20 0H2C.9 0 0 .88 0 1.98V16c0 1.1.9 2 2 2h18c1.1 0 2-.9 2-2zm-2 .02H2V1.97h18v14.05z\\\"></path>\\n      <path fill=\\\"none\\\" d=\\\"M-1-3h24v24H-1z\\\"></path>\\n    </symbol>\\n    <symbol viewBox=\\\"0 0 1792 1792\\\" id=\\\"vjs-icon-facebook\\\">\\n      <path d=\\\"M1343 12v264h-157q-86 0-116 36t-30 108v189h293l-39 296h-254v759H734V905H479V609h255V391q0-186 104-288.5T1115 0q147 0 228 12z\\\"></path>\\n    </symbol>\\n    <symbol viewBox=\\\"0 0 1792 1792\\\" id=\\\"vjs-icon-linkedin\\\">\\n      <path d=\\\"M477 625v991H147V625h330zm21-306q1 73-50.5 122T312 490h-2q-82 0-132-49t-50-122q0-74 51.5-122.5T314 148t133 48.5T498 319zm1166 729v568h-329v-530q0-105-40.5-164.5T1168 862q-63 0-105.5 34.5T999 982q-11 30-11 81v553H659q2-399 2-647t-1-296l-1-48h329v144h-2q20-32 41-56t56.5-52 87-43.5T1285 602q171 0 275 113.5t104 332.5z\\\"></path>\\n    </symbol>\\n    <symbol viewBox=\\\"0 0 1200 1227\\\" id=\\\"vjs-icon-twitter\\\">\\n      <path d=\\\"M714.163 519.284L1160.89 0H1055.03L667.137 450.887L357.328 0H0L468.492 681.821L0 1226.37H105.866L515.491 750.218L842.672 1226.37H1200L714.137 519.284H714.163ZM569.165 687.828L521.697 619.934L144.011 79.6944H306.615L611.412 515.685L658.88 583.579L1055.08 1150.3H892.476L569.165 687.854V687.828Z\\\"/>\\n    </symbol>\\n    <symbol viewBox=\\\"0 0 1792 1792\\\" id=\\\"vjs-icon-tumblr\\\">\\n      <path d=\\\"M1328 1329l80 237q-23 35-111 66t-177 32q-104 2-190.5-26T787 1564t-95-106-55.5-120-16.5-118V676H452V461q72-26 129-69.5t91-90 58-102 34-99T779 12q1-5 4.5-8.5T791 0h244v424h333v252h-334v518q0 30 6.5 56t22.5 52.5 49.5 41.5 81.5 14q78-2 134-29z\\\"></path>\\n    </symbol>\\n    <symbol viewBox=\\\"0 0 1792 1792\\\" id=\\\"vjs-icon-pinterest\\\">\\n      <path d=\\\"M1664 896q0 209-103 385.5T1281.5 1561 896 1664q-111 0-218-32 59-93 78-164 9-34 54-211 20 39 73 67.5t114 28.5q121 0 216-68.5t147-188.5 52-270q0-114-59.5-214T1180 449t-255-63q-105 0-196 29t-154.5 77-109 110.5-67 129.5T377 866q0 104 40 183t117 111q30 12 38-20 2-7 8-31t8-30q6-23-11-43-51-61-51-151 0-151 104.5-259.5T904 517q151 0 235.5 82t84.5 213q0 170-68.5 289T980 1220q-61 0-98-43.5T859 1072q8-35 26.5-93.5t30-103T927 800q0-50-27-83t-77-33q-62 0-105 57t-43 142q0 73 25 122l-99 418q-17 70-13 177-206-91-333-281T128 896q0-209 103-385.5T510.5 231 896 128t385.5 103T1561 510.5 1664 896z\\\"></path>\\n    </symbol>\\n  </defs>\\n</svg>\";\r\n\r\n  // /**\r\n\r\n  // Determine the keycode for the 'back' key based on the platform\r\n  const backKeyCode = IS_TIZEN ? 10009 : IS_WEBOS ? 461 : 8;\r\n  const SpatialNavKeyCodes = {\r\n    codes: {\r\n      play: 415,\r\n      pause: 19,\r\n      ff: 417,\r\n      rw: 412,\r\n      back: backKeyCode\r\n    },\r\n    names: {\r\n      415: 'play',\r\n      19: 'pause',\r\n      417: 'ff',\r\n      412: 'rw',\r\n      [backKeyCode]: 'back'\r\n    },\r\n    isEventKey(event, keyName) {\r\n      keyName = keyName.toLowerCase();\r\n      if (this.names[event.keyCode] && this.names[event.keyCode] === keyName) {\r\n        return true;\r\n      }\r\n      return false;\r\n    },\r\n    getEventName(event) {\r\n      if (this.names[event.keyCode]) {\r\n        return this.names[event.keyCode];\r\n      } else if (this.codes[event.code]) {\r\n        const code = this.codes[event.code];\r\n        return this.names[code];\r\n      }\r\n      return null;\r\n    }\r\n  };\r\n\r\n  /**\r\n   * @file spatial-navigation.js\r\n   */\r\n\r\n  /** @import Component from './component' */\r\n  /** @import Player from './player' */\r\n\r\n  // The number of seconds the `step*` functions move the timeline.\r\n  const STEP_SECONDS$1 = 5;\r\n\r\n  /**\r\n   * Spatial Navigation in Video.js enhances user experience and accessibility on smartTV devices,\r\n   * enabling seamless navigation through interactive elements within the player using remote control arrow keys.\r\n   * This functionality allows users to effortlessly navigate through focusable components.\r\n   *\r\n   * @extends EventTarget\r\n   */\r\n  class SpatialNavigation extends EventTarget$2 {\r\n    /**\r\n     * Constructs a SpatialNavigation instance with initial settings.\r\n     * Sets up the player instance, and prepares the spatial navigation system.\r\n     *\r\n     * @class\r\n     * @param {Player} player - The Video.js player instance to which the spatial navigation is attached.\r\n     */\r\n    constructor(player) {\r\n      super();\r\n      this.player_ = player;\r\n      this.focusableComponents = [];\r\n      this.isListening_ = false;\r\n      this.isPaused_ = false;\r\n      this.onKeyDown_ = this.onKeyDown_.bind(this);\r\n      this.lastFocusedComponent_ = null;\r\n    }\r\n\r\n    /**\r\n     * Starts the spatial navigation by adding a keydown event listener to the video container.\r\n     * This method ensures that the event listener is added only once.\r\n     */\r\n    start() {\r\n      // If the listener is already active, exit early.\r\n      if (this.isListening_) {\r\n        return;\r\n      }\r\n\r\n      // Add the event listener since the listener is not yet active.\r\n      this.player_.on('keydown', this.onKeyDown_);\r\n      this.player_.on('modalKeydown', this.onKeyDown_);\r\n      // Listen for source change events\r\n      this.player_.on('loadedmetadata', () => {\r\n        this.focus(this.updateFocusableComponents()[0]);\r\n      });\r\n      this.player_.on('modalclose', () => {\r\n        this.refocusComponent();\r\n      });\r\n      this.player_.on('focusin', this.handlePlayerFocus_.bind(this));\r\n      this.player_.on('focusout', this.handlePlayerBlur_.bind(this));\r\n      this.isListening_ = true;\r\n      if (this.player_.errorDisplay) {\r\n        this.player_.errorDisplay.on('aftermodalfill', () => {\r\n          this.updateFocusableComponents();\r\n          if (this.focusableComponents.length) {\r\n            // The modal has focusable components:\r\n\r\n            if (this.focusableComponents.length > 1) {\r\n              // The modal has close button + some additional buttons.\r\n              // Focusing first additional button:\r\n\r\n              this.focusableComponents[1].focus();\r\n            } else {\r\n              // The modal has only close button,\r\n              // Focusing it:\r\n\r\n              this.focusableComponents[0].focus();\r\n            }\r\n          }\r\n        });\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Stops the spatial navigation by removing the keydown event listener from the video container.\r\n     * Also sets the `isListening_` flag to false.\r\n     */\r\n    stop() {\r\n      this.player_.off('keydown', this.onKeyDown_);\r\n      this.isListening_ = false;\r\n    }\r\n\r\n    /**\r\n     * Responds to keydown events for spatial navigation and media control.\r\n     *\r\n     * Determines if spatial navigation or media control is active and handles key inputs accordingly.\r\n     *\r\n     * @param {KeyboardEvent} event - The keydown event to be handled.\r\n     */\r\n    onKeyDown_(event) {\r\n      // Determine if the event is a custom modalKeydown event\r\n      const actualEvent = event.originalEvent ? event.originalEvent : event;\r\n      if (['ArrowLeft', 'ArrowRight', 'ArrowUp', 'ArrowDown'].includes(actualEvent.key)) {\r\n        // Handle directional navigation\r\n        if (this.isPaused_) {\r\n          return;\r\n        }\r\n        actualEvent.preventDefault();\r\n\r\n        // \"ArrowLeft\" => \"left\" etc\r\n        const direction = actualEvent.key.substring(5).toLowerCase();\r\n        this.move(direction);\r\n      } else if (SpatialNavKeyCodes.isEventKey(actualEvent, 'play') || SpatialNavKeyCodes.isEventKey(actualEvent, 'pause') || SpatialNavKeyCodes.isEventKey(actualEvent, 'ff') || SpatialNavKeyCodes.isEventKey(actualEvent, 'rw')) {\r\n        // Handle media actions\r\n        actualEvent.preventDefault();\r\n        const action = SpatialNavKeyCodes.getEventName(actualEvent);\r\n        this.performMediaAction_(action);\r\n      } else if (SpatialNavKeyCodes.isEventKey(actualEvent, 'Back') && event.target && typeof event.target.closeable === 'function' && event.target.closeable()) {\r\n        actualEvent.preventDefault();\r\n        event.target.close();\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Performs media control actions based on the given key input.\r\n     *\r\n     * Controls the playback and seeking functionalities of the media player.\r\n     *\r\n     * @param {string} key - The key representing the media action to be performed.\r\n     *   Accepted keys: 'play', 'pause', 'ff' (fast-forward), 'rw' (rewind).\r\n     */\r\n    performMediaAction_(key) {\r\n      if (this.player_) {\r\n        switch (key) {\r\n          case 'play':\r\n            if (this.player_.paused()) {\r\n              this.player_.play();\r\n            }\r\n            break;\r\n          case 'pause':\r\n            if (!this.player_.paused()) {\r\n              this.player_.pause();\r\n            }\r\n            break;\r\n          case 'ff':\r\n            this.userSeek_(this.player_.currentTime() + STEP_SECONDS$1);\r\n            break;\r\n          case 'rw':\r\n            this.userSeek_(this.player_.currentTime() - STEP_SECONDS$1);\r\n            break;\r\n        }\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Prevent liveThreshold from causing seeks to seem like they\r\n     * are not happening from a user perspective.\r\n     *\r\n     * @param {number} ct\r\n     *        current time to seek to\r\n     */\r\n    userSeek_(ct) {\r\n      if (this.player_.liveTracker && this.player_.liveTracker.isLive()) {\r\n        this.player_.liveTracker.nextSeekedFromUser();\r\n      }\r\n      this.player_.currentTime(ct);\r\n    }\r\n\r\n    /**\r\n     * Pauses the spatial navigation functionality.\r\n     * This method sets a flag that can be used to temporarily disable the navigation logic.\r\n     */\r\n    pause() {\r\n      this.isPaused_ = true;\r\n    }\r\n\r\n    /**\r\n     * Resumes the spatial navigation functionality if it has been paused.\r\n     * This method resets the pause flag, re-enabling the navigation logic.\r\n     */\r\n    resume() {\r\n      this.isPaused_ = false;\r\n    }\r\n\r\n    /**\r\n     * Handles Player Blur.\r\n     *\r\n     * @param {string|Event|Object} event\r\n     *        The name of the event, an `Event`, or an object with a key of type set to\r\n     *        an event name.\r\n     *\r\n     * Calls for handling of the Player Blur if:\r\n     * *The next focused element is not a child of current focused element &\r\n     * The next focused element is not a child of the Player.\r\n     * *There is no next focused element\r\n     */\r\n    handlePlayerBlur_(event) {\r\n      const nextFocusedElement = event.relatedTarget;\r\n      let isChildrenOfPlayer = null;\r\n      const currentComponent = this.getCurrentComponent(event.target);\r\n      if (nextFocusedElement) {\r\n        isChildrenOfPlayer = Boolean(nextFocusedElement.closest('.video-js'));\r\n\r\n        // If nextFocusedElement is the 'TextTrackSettings' component\r\n        if (nextFocusedElement.classList.contains('vjs-text-track-settings') && !this.isPaused_) {\r\n          this.searchForTrackSelect_();\r\n        }\r\n      }\r\n      if (!event.currentTarget.contains(event.relatedTarget) && !isChildrenOfPlayer || !nextFocusedElement) {\r\n        if (currentComponent && currentComponent.name() === 'CloseButton') {\r\n          this.refocusComponent();\r\n        } else {\r\n          this.pause();\r\n          if (currentComponent && currentComponent.el()) {\r\n            // Store last focused component\r\n            this.lastFocusedComponent_ = currentComponent;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Handles the Player focus event.\r\n     *\r\n     * Calls for handling of the Player Focus if current element is focusable.\r\n     */\r\n    handlePlayerFocus_() {\r\n      if (this.getCurrentComponent() && this.getCurrentComponent().getIsFocusable()) {\r\n        this.resume();\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Gets a set of focusable components.\r\n     *\r\n     * @return {Array}\r\n     *         Returns an array of focusable components.\r\n     */\r\n    updateFocusableComponents() {\r\n      const player = this.player_;\r\n      const focusableComponents = [];\r\n\r\n      /**\r\n       * Searches for children candidates.\r\n       *\r\n       * Pushes Components to array of 'focusableComponents'.\r\n       * Calls itself if there is children elements inside iterated component.\r\n       *\r\n       * @param {Array} componentsArray - The array of components to search for focusable children.\r\n       */\r\n      function searchForChildrenCandidates(componentsArray) {\r\n        for (const i of componentsArray) {\r\n          if (i.hasOwnProperty('el_') && i.getIsFocusable() && i.getIsAvailableToBeFocused(i.el())) {\r\n            focusableComponents.push(i);\r\n          }\r\n          if (i.hasOwnProperty('children_') && i.children_.length > 0) {\r\n            searchForChildrenCandidates(i.children_);\r\n          }\r\n        }\r\n      }\r\n\r\n      // Iterate inside all children components of the player.\r\n      player.children_.forEach(value => {\r\n        if (value.hasOwnProperty('el_')) {\r\n          // If component has required functions 'getIsFocusable' & 'getIsAvailableToBeFocused', is focusable & available to be focused.\r\n          if (value.getIsFocusable && value.getIsAvailableToBeFocused && value.getIsFocusable() && value.getIsAvailableToBeFocused(value.el())) {\r\n            focusableComponents.push(value);\r\n            return;\r\n            // If component has posible children components as candidates.\r\n          } else if (value.hasOwnProperty('children_') && value.children_.length > 0) {\r\n            searchForChildrenCandidates(value.children_);\r\n            // If component has posible item components as candidates.\r\n          } else if (value.hasOwnProperty('items') && value.items.length > 0) {\r\n            searchForChildrenCandidates(value.items);\r\n            // If there is a suitable child element within the component's DOM element.\r\n          } else if (this.findSuitableDOMChild(value)) {\r\n            focusableComponents.push(value);\r\n          }\r\n        }\r\n\r\n        // TODO - Refactor the following logic after refactor of videojs-errors elements to be components is done.\r\n        if (value.name_ === 'ErrorDisplay' && value.opened_) {\r\n          const buttonContainer = value.el_.querySelector('.vjs-errors-ok-button-container');\r\n          if (buttonContainer) {\r\n            const modalButtons = buttonContainer.querySelectorAll('button');\r\n            modalButtons.forEach((element, index) => {\r\n              // Add elements as objects to be handled by the spatial navigation\r\n              focusableComponents.push({\r\n                name: () => {\r\n                  return 'ModalButton' + (index + 1);\r\n                },\r\n                el: () => element,\r\n                getPositions: () => {\r\n                  const rect = element.getBoundingClientRect();\r\n\r\n                  // Creating objects that mirror DOMRectReadOnly for boundingClientRect and center\r\n                  const boundingClientRect = {\r\n                    x: rect.x,\r\n                    y: rect.y,\r\n                    width: rect.width,\r\n                    height: rect.height,\r\n                    top: rect.top,\r\n                    right: rect.right,\r\n                    bottom: rect.bottom,\r\n                    left: rect.left\r\n                  };\r\n\r\n                  // Calculating the center position\r\n                  const center = {\r\n                    x: rect.left + rect.width / 2,\r\n                    y: rect.top + rect.height / 2,\r\n                    width: 0,\r\n                    height: 0,\r\n                    top: rect.top + rect.height / 2,\r\n                    right: rect.left + rect.width / 2,\r\n                    bottom: rect.top + rect.height / 2,\r\n                    left: rect.left + rect.width / 2\r\n                  };\r\n                  return {\r\n                    boundingClientRect,\r\n                    center\r\n                  };\r\n                },\r\n                // Asume that the following are always focusable\r\n                getIsAvailableToBeFocused: () => true,\r\n                getIsFocusable: el => true,\r\n                focus: () => element.focus()\r\n              });\r\n            });\r\n          }\r\n        }\r\n      });\r\n      this.focusableComponents = focusableComponents;\r\n      return this.focusableComponents;\r\n    }\r\n\r\n    /**\r\n     * Finds a suitable child element within the provided component's DOM element.\r\n     *\r\n     * @param {Object} component - The component containing the DOM element to search within.\r\n     * @return {HTMLElement|null} Returns the suitable child element if found, or null if not found.\r\n     */\r\n    findSuitableDOMChild(component) {\r\n      /**\r\n       * Recursively searches for a suitable child node that can be focused within a given component.\r\n       * It first checks if the provided node itself can be focused according to the component's\r\n       * `getIsFocusable` and `getIsAvailableToBeFocused` methods. If not, it recursively searches\r\n       * through the node's children to find a suitable child node that meets the focusability criteria.\r\n       *\r\n       * @param {HTMLElement} node - The DOM node to start the search from.\r\n       * @return {HTMLElement|null} The first child node that is focusable and available to be focused,\r\n       * or `null` if no suitable child is found.\r\n       */\r\n      function searchForSuitableChild(node) {\r\n        if (component.getIsFocusable(node) && component.getIsAvailableToBeFocused(node)) {\r\n          return node;\r\n        }\r\n        for (let i = 0; i < node.children.length; i++) {\r\n          const child = node.children[i];\r\n          const suitableChild = searchForSuitableChild(child);\r\n          if (suitableChild) {\r\n            return suitableChild;\r\n          }\r\n        }\r\n        return null;\r\n      }\r\n      if (component.el()) {\r\n        return searchForSuitableChild(component.el());\r\n      }\r\n      return null;\r\n    }\r\n\r\n    /**\r\n     * Gets the currently focused component from the list of focusable components.\r\n     * If a target element is provided, it uses that element to find the corresponding\r\n     * component. If no target is provided, it defaults to using the document's currently\r\n     * active element.\r\n     *\r\n     * @param {HTMLElement} [target] - The DOM element to check against the focusable components.\r\n     *                                 If not provided, `document.activeElement` is used.\r\n     * @return {Component|null} - Returns the focused component if found among the focusable components,\r\n     *                            otherwise returns null if no matching component is found.\r\n     */\r\n    getCurrentComponent(target) {\r\n      this.updateFocusableComponents();\r\n      // eslint-disable-next-line\r\n      const curComp = target || document.activeElement;\r\n      if (this.focusableComponents.length) {\r\n        for (const i of this.focusableComponents) {\r\n          // If component Node is equal to the current active element.\r\n          if (i.el() === curComp) {\r\n            return i;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Adds a component to the array of focusable components.\r\n     *\r\n     * @param {Component} component\r\n     *        The `Component` to be added.\r\n     */\r\n    add(component) {\r\n      const focusableComponents = [...this.focusableComponents];\r\n      if (component.hasOwnProperty('el_') && component.getIsFocusable() && component.getIsAvailableToBeFocused(component.el())) {\r\n        focusableComponents.push(component);\r\n      }\r\n      this.focusableComponents = focusableComponents;\r\n      // Trigger the notification manually\r\n      this.trigger({\r\n        type: 'focusableComponentsChanged',\r\n        focusableComponents: this.focusableComponents\r\n      });\r\n    }\r\n\r\n    /**\r\n     * Removes component from the array of focusable components.\r\n     *\r\n     * @param {Component} component - The component to be removed from the focusable components array.\r\n     */\r\n    remove(component) {\r\n      for (let i = 0; i < this.focusableComponents.length; i++) {\r\n        if (this.focusableComponents[i].name() === component.name()) {\r\n          this.focusableComponents.splice(i, 1);\r\n          // Trigger the notification manually\r\n          this.trigger({\r\n            type: 'focusableComponentsChanged',\r\n            focusableComponents: this.focusableComponents\r\n          });\r\n          return;\r\n        }\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Clears array of focusable components.\r\n     */\r\n    clear() {\r\n      // Check if the array is already empty to avoid unnecessary event triggering\r\n      if (this.focusableComponents.length > 0) {\r\n        // Clear the array\r\n        this.focusableComponents = [];\r\n\r\n        // Trigger the notification manually\r\n        this.trigger({\r\n          type: 'focusableComponentsChanged',\r\n          focusableComponents: this.focusableComponents\r\n        });\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Navigates to the next focusable component based on the specified direction.\r\n     *\r\n     * @param {string} direction 'up', 'down', 'left', 'right'\r\n     */\r\n    move(direction) {\r\n      const currentFocusedComponent = this.getCurrentComponent();\r\n      if (!currentFocusedComponent) {\r\n        return;\r\n      }\r\n      const currentPositions = currentFocusedComponent.getPositions();\r\n      const candidates = this.focusableComponents.filter(component => component !== currentFocusedComponent && this.isInDirection_(currentPositions.boundingClientRect, component.getPositions().boundingClientRect, direction));\r\n      const bestCandidate = this.findBestCandidate_(currentPositions.center, candidates, direction);\r\n      if (bestCandidate) {\r\n        this.focus(bestCandidate);\r\n      } else {\r\n        this.trigger({\r\n          type: 'endOfFocusableComponents',\r\n          direction,\r\n          focusedComponent: currentFocusedComponent\r\n        });\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Finds the best candidate on the current center position,\r\n     * the list of candidates, and the specified navigation direction.\r\n     *\r\n     * @param {Object} currentCenter The center position of the current focused component element.\r\n     * @param {Array} candidates An array of candidate components to receive focus.\r\n     * @param {string} direction The direction of navigation ('up', 'down', 'left', 'right').\r\n     * @return {Object|null} The component that is the best candidate for receiving focus.\r\n     */\r\n    findBestCandidate_(currentCenter, candidates, direction) {\r\n      let minDistance = Infinity;\r\n      let bestCandidate = null;\r\n      for (const candidate of candidates) {\r\n        const candidateCenter = candidate.getPositions().center;\r\n        const distance = this.calculateDistance_(currentCenter, candidateCenter, direction);\r\n        if (distance < minDistance) {\r\n          minDistance = distance;\r\n          bestCandidate = candidate;\r\n        }\r\n      }\r\n      return bestCandidate;\r\n    }\r\n\r\n    /**\r\n     * Determines if a target rectangle is in the specified navigation direction\r\n     * relative to a source rectangle.\r\n     *\r\n     * @param {Object} srcRect The bounding rectangle of the source element.\r\n     * @param {Object} targetRect The bounding rectangle of the target element.\r\n     * @param {string} direction The navigation direction ('up', 'down', 'left', 'right').\r\n     * @return {boolean} True if the target is in the specified direction relative to the source.\r\n     */\r\n    isInDirection_(srcRect, targetRect, direction) {\r\n      switch (direction) {\r\n        case 'right':\r\n          return targetRect.left >= srcRect.right;\r\n        case 'left':\r\n          return targetRect.right <= srcRect.left;\r\n        case 'down':\r\n          return targetRect.top >= srcRect.bottom;\r\n        case 'up':\r\n          return targetRect.bottom <= srcRect.top;\r\n        default:\r\n          return false;\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Focus the last focused component saved before blur on player.\r\n     */\r\n    refocusComponent() {\r\n      if (this.lastFocusedComponent_) {\r\n        // If user is not active, set it to active.\r\n        if (!this.player_.userActive()) {\r\n          this.player_.userActive(true);\r\n        }\r\n        this.updateFocusableComponents();\r\n\r\n        // Search inside array of 'focusableComponents' for a match of name of\r\n        // the last focused component.\r\n        for (let i = 0; i < this.focusableComponents.length; i++) {\r\n          if (this.focusableComponents[i].name() === this.lastFocusedComponent_.name()) {\r\n            this.focus(this.focusableComponents[i]);\r\n            return;\r\n          }\r\n        }\r\n      } else {\r\n        this.focus(this.updateFocusableComponents()[0]);\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Focuses on a given component.\r\n     * If the component is available to be focused, it focuses on the component.\r\n     * If not, it attempts to find a suitable DOM child within the component and focuses on it.\r\n     *\r\n     * @param {Component} component - The component to be focused.\r\n     */\r\n    focus(component) {\r\n      if (typeof component !== 'object') {\r\n        return;\r\n      }\r\n      if (component.getIsAvailableToBeFocused(component.el())) {\r\n        component.focus();\r\n      } else if (this.findSuitableDOMChild(component)) {\r\n        this.findSuitableDOMChild(component).focus();\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Calculates the distance between two points, adjusting the calculation based on\r\n     * the specified navigation direction.\r\n     *\r\n     * @param {Object} center1 The center point of the first element.\r\n     * @param {Object} center2 The center point of the second element.\r\n     * @param {string} direction The direction of navigation ('up', 'down', 'left', 'right').\r\n     * @return {number} The calculated distance between the two centers.\r\n     */\r\n    calculateDistance_(center1, center2, direction) {\r\n      const dx = Math.abs(center1.x - center2.x);\r\n      const dy = Math.abs(center1.y - center2.y);\r\n      let distance;\r\n      switch (direction) {\r\n        case 'right':\r\n        case 'left':\r\n          // Higher weight for vertical distance in horizontal navigation.\r\n          distance = dx + dy * 100;\r\n          break;\r\n        case 'up':\r\n          // Strongly prioritize vertical proximity for UP navigation.\r\n          // Adjust the weight to ensure that elements directly above are favored.\r\n          distance = dy * 2 + dx * 0.5;\r\n          break;\r\n        case 'down':\r\n          // More balanced weight for vertical and horizontal distances.\r\n          // Adjust the weights here to find the best balance.\r\n          distance = dy * 5 + dx;\r\n          break;\r\n        default:\r\n          distance = dx + dy;\r\n      }\r\n      return distance;\r\n    }\r\n\r\n    /**\r\n     * This gets called by 'handlePlayerBlur_' if 'spatialNavigation' is enabled.\r\n     * Searches for the first 'TextTrackSelect' inside of modal to focus.\r\n     *\r\n     * @private\r\n     */\r\n    searchForTrackSelect_() {\r\n      const spatialNavigation = this;\r\n      for (const component of spatialNavigation.updateFocusableComponents()) {\r\n        if (component.constructor.name === 'TextTrackSelect') {\r\n          spatialNavigation.focus(component);\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @file loader.js\r\n   */\r\n\r\n  /** @import Player from '../player' */\r\n\r\n  /**\r\n   * The `MediaLoader` is the `Component` that decides which playback technology to load\r\n   * when a player is initialized.\r\n   *\r\n   * @extends Component\r\n   */\r\n  class MediaLoader extends Component$1 {\r\n    /**\r\n     * Create an instance of this class.\r\n     *\r\n     * @param {Player} player\r\n     *        The `Player` that this class should attach to.\r\n     *\r\n     * @param {Object} [options]\r\n     *        The key/value store of player options.\r\n     *\r\n     * @param {Function} [ready]\r\n     *        The function that is run when this component is ready.\r\n     */\r\n    constructor(player, options, ready) {\r\n      // MediaLoader has no element\r\n      const options_ = merge$2({\r\n        createEl: false\r\n      }, options);\r\n      super(player, options_, ready);\r\n\r\n      // If there are no sources when the player is initialized,\r\n      // load the first supported playback technology.\r\n\r\n      if (!options.playerOptions.sources || options.playerOptions.sources.length === 0) {\r\n        for (let i = 0, j = options.playerOptions.techOrder; i < j.length; i++) {\r\n          const techName = toTitleCase$1(j[i]);\r\n          let tech = Tech.getTech(techName);\r\n\r\n          // Support old behavior of techs being registered as components.\r\n          // Remove once that deprecated behavior is removed.\r\n          if (!techName) {\r\n            tech = Component$1.getComponent(techName);\r\n          }\r\n\r\n          // Check if the browser supports this technology\r\n          if (tech && tech.isSupported()) {\r\n            player.loadTech_(techName);\r\n            break;\r\n          }\r\n        }\r\n      } else {\r\n        // Loop through playback technologies (e.g. HTML5) and check for support.\r\n        // Then load the best source.\r\n        // A few assumptions here:\r\n        //   All playback technologies respect preload false.\r\n        player.src(options.playerOptions.sources);\r\n      }\r\n    }\r\n  }\r\n  Component$1.registerComponent('MediaLoader', MediaLoader);\r\n\r\n  /**\r\n   * @file clickable-component.js\r\n   */\r\n\r\n  /** @import Player from './player' */\r\n\r\n  /**\r\n   * Component which is clickable or keyboard actionable, but is not a\r\n   * native HTML button.\r\n   *\r\n   * @extends Component\r\n   */\r\n  class ClickableComponent extends Component$1 {\r\n    /**\r\n     * Creates an instance of this class.\r\n     *\r\n     * @param  {Player} player\r\n     *         The `Player` that this class should be attached to.\r\n     *\r\n     * @param  {Object} [options]\r\n     *         The key/value store of component options.\r\n     *\r\n     * @param  {function} [options.clickHandler]\r\n     *         The function to call when the button is clicked / activated\r\n     *\r\n     * @param  {string} [options.controlText]\r\n     *         The text to set on the button\r\n     *\r\n     * @param  {string} [options.className]\r\n     *         A class or space separated list of classes to add the component\r\n     *\r\n     */\r\n    constructor(player, options) {\r\n      super(player, options);\r\n      if (this.options_.controlText) {\r\n        this.controlText(this.options_.controlText);\r\n      }\r\n      this.handleMouseOver_ = e => this.handleMouseOver(e);\r\n      this.handleMouseOut_ = e => this.handleMouseOut(e);\r\n      this.handleClick_ = e => this.handleClick(e);\r\n      this.handleKeyDown_ = e => this.handleKeyDown(e);\r\n      this.emitTapEvents();\r\n      this.enable();\r\n    }\r\n\r\n    /**\r\n     * Create the `ClickableComponent`s DOM element.\r\n     *\r\n     * @param {string} [tag=div]\r\n     *        The element's node type.\r\n     *\r\n     * @param {Object} [props={}]\r\n     *        An object of properties that should be set on the element.\r\n     *\r\n     * @param {Object} [attributes={}]\r\n     *        An object of attributes that should be set on the element.\r\n     *\r\n     * @return {Element}\r\n     *         The element that gets created.\r\n     */\r\n    createEl(tag = 'div', props = {}, attributes = {}) {\r\n      props = Object.assign({\r\n        className: this.buildCSSClass(),\r\n        tabIndex: 0\r\n      }, props);\r\n      if (tag === 'button') {\r\n        log$1.error(`Creating a ClickableComponent with an HTML element of ${tag} is not supported; use a Button instead.`);\r\n      }\r\n\r\n      // Add ARIA attributes for clickable element which is not a native HTML button\r\n      attributes = Object.assign({\r\n        role: 'button'\r\n      }, attributes);\r\n      this.tabIndex_ = props.tabIndex;\r\n      const el = createEl(tag, props, attributes);\r\n      if (!this.player_.options_.experimentalSvgIcons) {\r\n        el.appendChild(createEl('span', {\r\n          className: 'vjs-icon-placeholder'\r\n        }, {\r\n          'aria-hidden': true\r\n        }));\r\n      }\r\n      this.createControlTextEl(el);\r\n      return el;\r\n    }\r\n    dispose() {\r\n      // remove controlTextEl_ on dispose\r\n      this.controlTextEl_ = null;\r\n      super.dispose();\r\n    }\r\n\r\n    /**\r\n     * Create a control text element on this `ClickableComponent`\r\n     *\r\n     * @param {Element} [el]\r\n     *        Parent element for the control text.\r\n     *\r\n     * @return {Element}\r\n     *         The control text element that gets created.\r\n     */\r\n    createControlTextEl(el) {\r\n      this.controlTextEl_ = createEl('span', {\r\n        className: 'vjs-control-text'\r\n      }, {\r\n        // let the screen reader user know that the text of the element may change\r\n        'aria-live': 'polite'\r\n      });\r\n      if (el) {\r\n        el.appendChild(this.controlTextEl_);\r\n      }\r\n      this.controlText(this.controlText_, el);\r\n      return this.controlTextEl_;\r\n    }\r\n\r\n    /**\r\n     * Get or set the localize text to use for the controls on the `ClickableComponent`.\r\n     *\r\n     * @param {string} [text]\r\n     *        Control text for element.\r\n     *\r\n     * @param {Element} [el=this.el()]\r\n     *        Element to set the title on.\r\n     *\r\n     * @return {string}\r\n     *         - The control text when getting\r\n     */\r\n    controlText(text, el = this.el()) {\r\n      if (text === undefined) {\r\n        return this.controlText_ || 'Need Text';\r\n      }\r\n      const localizedText = this.localize(text);\r\n\r\n      /** @protected */\r\n      this.controlText_ = text;\r\n      textContent(this.controlTextEl_, localizedText);\r\n      if (!this.nonIconControl && !this.player_.options_.noUITitleAttributes) {\r\n        // Set title attribute if only an icon is shown\r\n        el.setAttribute('title', localizedText);\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Builds the default DOM `className`.\r\n     *\r\n     * @return {string}\r\n     *         The DOM `className` for this object.\r\n     */\r\n    buildCSSClass() {\r\n      return `vjs-control vjs-button ${super.buildCSSClass()}`;\r\n    }\r\n\r\n    /**\r\n     * Enable this `ClickableComponent`\r\n     */\r\n    enable() {\r\n      if (!this.enabled_) {\r\n        this.enabled_ = true;\r\n        this.removeClass('vjs-disabled');\r\n        this.el_.setAttribute('aria-disabled', 'false');\r\n        if (typeof this.tabIndex_ !== 'undefined') {\r\n          this.el_.setAttribute('tabIndex', this.tabIndex_);\r\n        }\r\n        this.on(['tap', 'click'], this.handleClick_);\r\n        this.on('keydown', this.handleKeyDown_);\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Disable this `ClickableComponent`\r\n     */\r\n    disable() {\r\n      this.enabled_ = false;\r\n      this.addClass('vjs-disabled');\r\n      this.el_.setAttribute('aria-disabled', 'true');\r\n      if (typeof this.tabIndex_ !== 'undefined') {\r\n        this.el_.removeAttribute('tabIndex');\r\n      }\r\n      this.off('mouseover', this.handleMouseOver_);\r\n      this.off('mouseout', this.handleMouseOut_);\r\n      this.off(['tap', 'click'], this.handleClick_);\r\n      this.off('keydown', this.handleKeyDown_);\r\n    }\r\n\r\n    /**\r\n     * Handles language change in ClickableComponent for the player in components\r\n     *\r\n     *\r\n     */\r\n    handleLanguagechange() {\r\n      this.controlText(this.controlText_);\r\n    }\r\n\r\n    /**\r\n     * Event handler that is called when a `ClickableComponent` receives a\r\n     * `click` or `tap` event.\r\n     *\r\n     * @param {Event} event\r\n     *        The `tap` or `click` event that caused this function to be called.\r\n     *\r\n     * @listens tap\r\n     * @listens click\r\n     * @abstract\r\n     */\r\n    handleClick(event) {\r\n      if (this.options_.clickHandler) {\r\n        this.options_.clickHandler.call(this, arguments);\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Event handler that is called when a `ClickableComponent` receives a\r\n     * `keydown` event.\r\n     *\r\n     * By default, if the key is Space or Enter, it will trigger a `click` event.\r\n     *\r\n     * @param {KeyboardEvent} event\r\n     *        The `keydown` event that caused this function to be called.\r\n     *\r\n     * @listens keydown\r\n     */\r\n    handleKeyDown(event) {\r\n      // Support Space or Enter key operation to fire a click event. Also,\r\n      // prevent the event from propagating through the DOM and triggering\r\n      // Player hotkeys.\r\n      if (event.key === ' ' || event.key === 'Enter') {\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n        this.trigger('click');\r\n      } else {\r\n        // Pass keypress handling up for unsupported keys\r\n        super.handleKeyDown(event);\r\n      }\r\n    }\r\n  }\r\n  Component$1.registerComponent('ClickableComponent', ClickableComponent);\r\n\r\n  /**\r\n   * @file poster-image.js\r\n   */\r\n\r\n  /** @import Player from './player' */\r\n\r\n  /**\r\n   * A `ClickableComponent` that handles showing the poster image for the player.\r\n   *\r\n   * @extends ClickableComponent\r\n   */\r\n  class PosterImage extends ClickableComponent {\r\n    /**\r\n     * Create an instance of this class.\r\n     *\r\n     * @param {Player} player\r\n     *        The `Player` that this class should attach to.\r\n     *\r\n     * @param {Object} [options]\r\n     *        The key/value store of player options.\r\n     */\r\n    constructor(player, options) {\r\n      super(player, options);\r\n      this.update();\r\n      this.update_ = e => this.update(e);\r\n      player.on('posterchange', this.update_);\r\n    }\r\n\r\n    /**\r\n     * Clean up and dispose of the `PosterImage`.\r\n     */\r\n    dispose() {\r\n      this.player().off('posterchange', this.update_);\r\n      super.dispose();\r\n    }\r\n\r\n    /**\r\n     * Create the `PosterImage`s DOM element.\r\n     *\r\n     * @return {Element}\r\n     *         The element that gets created.\r\n     */\r\n    createEl() {\r\n      // The el is an empty div to keep position in the DOM\r\n      // A picture and img el will be inserted when a source is set\r\n      return createEl('div', {\r\n        className: 'vjs-poster'\r\n      });\r\n    }\r\n\r\n    /**\r\n     * Get or set the `PosterImage`'s crossOrigin option.\r\n     *\r\n     * @param {string|null} [value]\r\n     *        The value to set the crossOrigin to. If an argument is\r\n     *        given, must be one of `'anonymous'` or `'use-credentials'`, or 'null'.\r\n     *\r\n     * @return {string|null}\r\n     *         - The current crossOrigin value of the `Player` when getting.\r\n     *         - undefined when setting\r\n     */\r\n    crossOrigin(value) {\r\n      // `null` can be set to unset a value\r\n      if (typeof value === 'undefined') {\r\n        if (this.$('img')) {\r\n          // If the poster's element exists, give its value\r\n          return this.$('img').crossOrigin;\r\n        } else if (this.player_.tech_ && this.player_.tech_.isReady_) {\r\n          // If not but the tech is ready, query the tech\r\n          return this.player_.crossOrigin();\r\n        }\r\n        // Otherwise check options as the  poster is usually set before the state of crossorigin\r\n        // can be retrieved by the getter\r\n        return this.player_.options_.crossOrigin || this.player_.options_.crossorigin || null;\r\n      }\r\n      if (value !== null && value !== 'anonymous' && value !== 'use-credentials') {\r\n        this.player_.log.warn(`crossOrigin must be null,  \"anonymous\" or \"use-credentials\", given \"${value}\"`);\r\n        return;\r\n      }\r\n      if (this.$('img')) {\r\n        this.$('img').crossOrigin = value;\r\n      }\r\n      return;\r\n    }\r\n\r\n    /**\r\n     * An {@link EventTarget~EventListener} for {@link Player#posterchange} events.\r\n     *\r\n     * @listens Player#posterchange\r\n     *\r\n     * @param {Event} [event]\r\n     *        The `Player#posterchange` event that triggered this function.\r\n     */\r\n    update(event) {\r\n      const url = this.player().poster();\r\n      this.setSrc(url);\r\n\r\n      // If there's no poster source we should display:none on this component\r\n      // so it's not still clickable or right-clickable\r\n      if (url) {\r\n        this.show();\r\n      } else {\r\n        this.hide();\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Set the source of the `PosterImage` depending on the display method. (Re)creates\r\n     * the inner picture and img elementss when needed.\r\n     *\r\n     * @param {string} [url]\r\n     *        The URL to the source for the `PosterImage`. If not specified or falsy,\r\n     *        any source and ant inner picture/img are removed.\r\n     */\r\n    setSrc(url) {\r\n      if (!url) {\r\n        this.el_.textContent = '';\r\n        return;\r\n      }\r\n      if (!this.$('img')) {\r\n        this.el_.appendChild(createEl('picture', {\r\n          className: 'vjs-poster',\r\n          // Don't want poster to be tabbable.\r\n          tabIndex: -1\r\n        }, {}, createEl('img', {\r\n          loading: 'lazy',\r\n          crossOrigin: this.crossOrigin()\r\n        }, {\r\n          alt: ''\r\n        })));\r\n      }\r\n      this.$('img').src = url;\r\n    }\r\n\r\n    /**\r\n     * An {@link EventTarget~EventListener} for clicks on the `PosterImage`. See\r\n     * {@link ClickableComponent#handleClick} for instances where this will be triggered.\r\n     *\r\n     * @listens tap\r\n     * @listens click\r\n     * @listens keydown\r\n     *\r\n     * @param {Event} event\r\n     +        The `click`, `tap` or `keydown` event that caused this function to be called.\r\n     */\r\n    handleClick(event) {\r\n      // We don't want a click to trigger playback when controls are disabled\r\n      if (!this.player_.controls()) {\r\n        return;\r\n      }\r\n      if (this.player_.tech(true)) {\r\n        this.player_.tech(true).focus();\r\n      }\r\n      if (this.player_.paused()) {\r\n        silencePromise(this.player_.play());\r\n      } else {\r\n        this.player_.pause();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get or set the `PosterImage`'s crossorigin option. For the HTML5 player, this\r\n   * sets the `crossOrigin` property on the `<img>` tag to control the CORS\r\n   * behavior.\r\n   *\r\n   * @param {string|null} [value]\r\n   *        The value to set the `PosterImages`'s crossorigin to. If an argument is\r\n   *        given, must be one of `anonymous` or `use-credentials`.\r\n   *\r\n   * @return {string|null|undefined}\r\n   *         - The current crossorigin value of the `Player` when getting.\r\n   *         - undefined when setting\r\n   */\r\n  PosterImage.prototype.crossorigin = PosterImage.prototype.crossOrigin;\r\n  Component$1.registerComponent('PosterImage', PosterImage);\r\n\r\n  /**\r\n   * @file text-track-display.js\r\n   */\r\n\r\n  /** @import Player from '../player' */\r\n\r\n  const darkGray = '#222';\r\n  const lightGray = '#ccc';\r\n  const fontMap = {\r\n    monospace: 'monospace',\r\n    sansSerif: 'sans-serif',\r\n    serif: 'serif',\r\n    monospaceSansSerif: '\"Andale Mono\", \"Lucida Console\", monospace',\r\n    monospaceSerif: '\"Courier New\", monospace',\r\n    proportionalSansSerif: 'sans-serif',\r\n    proportionalSerif: 'serif',\r\n    casual: '\"Comic Sans MS\", Impact, fantasy',\r\n    script: '\"Monotype Corsiva\", cursive',\r\n    smallcaps: '\"Andale Mono\", \"Lucida Console\", monospace, sans-serif'\r\n  };\r\n\r\n  /**\r\n   * Construct an rgba color from a given hex color code.\r\n   *\r\n   * @param {number} color\r\n   *        Hex number for color, like #f0e or #f604e2.\r\n   *\r\n   * @param {number} opacity\r\n   *        Value for opacity, 0.0 - 1.0.\r\n   *\r\n   * @return {string}\r\n   *         The rgba color that was created, like 'rgba(255, 0, 0, 0.3)'.\r\n   */\r\n  function constructColor(color, opacity) {\r\n    let hex;\r\n    if (color.length === 4) {\r\n      // color looks like \"#f0e\"\r\n      hex = color[1] + color[1] + color[2] + color[2] + color[3] + color[3];\r\n    } else if (color.length === 7) {\r\n      // color looks like \"#f604e2\"\r\n      hex = color.slice(1);\r\n    } else {\r\n      throw new Error('Invalid color code provided, ' + color + '; must be formatted as e.g. #f0e or #f604e2.');\r\n    }\r\n    return 'rgba(' + parseInt(hex.slice(0, 2), 16) + ',' + parseInt(hex.slice(2, 4), 16) + ',' + parseInt(hex.slice(4, 6), 16) + ',' + opacity + ')';\r\n  }\r\n\r\n  /**\r\n   * Try to update the style of a DOM element. Some style changes will throw an error,\r\n   * particularly in IE8. Those should be noops.\r\n   *\r\n   * @param {Element} el\r\n   *        The DOM element to be styled.\r\n   *\r\n   * @param {string} style\r\n   *        The CSS property on the element that should be styled.\r\n   *\r\n   * @param {string} rule\r\n   *        The style rule that should be applied to the property.\r\n   *\r\n   * @private\r\n   */\r\n  function tryUpdateStyle(el, style, rule) {\r\n    try {\r\n      el.style[style] = rule;\r\n    } catch (e) {\r\n      // Satisfies linter.\r\n      return;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Converts the CSS top/right/bottom/left property numeric value to string in pixels.\r\n   *\r\n   * @param {number} position\r\n   *        The CSS top/right/bottom/left property value.\r\n   *\r\n   * @return {string}\r\n   *          The CSS property value that was created, like '10px'.\r\n   *\r\n   * @private\r\n   */\r\n  function getCSSPositionValue(position) {\r\n    return position ? `${position}px` : '';\r\n  }\r\n\r\n  /**\r\n   * The component for displaying text track cues.\r\n   *\r\n   * @extends Component\r\n   */\r\n  class TextTrackDisplay extends Component$1 {\r\n    /**\r\n     * Creates an instance of this class.\r\n     *\r\n     * @param {Player} player\r\n     *        The `Player` that this class should be attached to.\r\n     *\r\n     * @param {Object} [options]\r\n     *        The key/value store of player options.\r\n     *\r\n     * @param {Function} [ready]\r\n     *        The function to call when `TextTrackDisplay` is ready.\r\n     */\r\n    constructor(player, options, ready) {\r\n      super(player, options, ready);\r\n      const updateDisplayTextHandler = e => this.updateDisplay(e);\r\n      const updateDisplayHandler = e => {\r\n        this.updateDisplayOverlay();\r\n        this.updateDisplay(e);\r\n      };\r\n      player.on('loadstart', e => this.toggleDisplay(e));\r\n      player.on('texttrackchange', updateDisplayTextHandler);\r\n      player.on('loadedmetadata', e => {\r\n        this.updateDisplayOverlay();\r\n        this.preselectTrack(e);\r\n      });\r\n\r\n      // This used to be called during player init, but was causing an error\r\n      // if a track should show by default and the display hadn't loaded yet.\r\n      // Should probably be moved to an external track loader when we support\r\n      // tracks that don't need a display.\r\n      player.ready(bind_(this, function () {\r\n        if (player.tech_ && player.tech_.featuresNativeTextTracks) {\r\n          this.hide();\r\n          return;\r\n        }\r\n        player.on('fullscreenchange', updateDisplayHandler);\r\n        player.on('playerresize', updateDisplayHandler);\r\n        const screenOrientation = window.screen.orientation || window;\r\n        const changeOrientationEvent = window.screen.orientation ? 'change' : 'orientationchange';\r\n        screenOrientation.addEventListener(changeOrientationEvent, updateDisplayHandler);\r\n        player.on('dispose', () => screenOrientation.removeEventListener(changeOrientationEvent, updateDisplayHandler));\r\n        const tracks = this.options_.playerOptions.tracks || [];\r\n        for (let i = 0; i < tracks.length; i++) {\r\n          this.player_.addRemoteTextTrack(tracks[i], true);\r\n        }\r\n        this.preselectTrack();\r\n      }));\r\n    }\r\n\r\n    /**\r\n    * Preselect a track following this precedence:\r\n    * - matches the previously selected {@link TextTrack}'s language and kind\r\n    * - matches the previously selected {@link TextTrack}'s language only\r\n    * - is the first default captions track\r\n    * - is the first default descriptions track\r\n    *\r\n    * @listens Player#loadstart\r\n    */\r\n    preselectTrack() {\r\n      const modes = {\r\n        captions: 1,\r\n        subtitles: 1\r\n      };\r\n      const trackList = this.player_.textTracks();\r\n      const userPref = this.player_.cache_.selectedLanguage;\r\n      let firstDesc;\r\n      let firstCaptions;\r\n      let preferredTrack;\r\n      for (let i = 0; i < trackList.length; i++) {\r\n        const track = trackList[i];\r\n        if (userPref && userPref.enabled && userPref.language && userPref.language === track.language && track.kind in modes) {\r\n          // Always choose the track that matches both language and kind\r\n          if (track.kind === userPref.kind) {\r\n            preferredTrack = track;\r\n            // or choose the first track that matches language\r\n          } else if (!preferredTrack) {\r\n            preferredTrack = track;\r\n          }\r\n\r\n          // clear everything if offTextTrackMenuItem was clicked\r\n        } else if (userPref && !userPref.enabled) {\r\n          preferredTrack = null;\r\n          firstDesc = null;\r\n          firstCaptions = null;\r\n        } else if (track.default) {\r\n          if (track.kind === 'descriptions' && !firstDesc) {\r\n            firstDesc = track;\r\n          } else if (track.kind in modes && !firstCaptions) {\r\n            firstCaptions = track;\r\n          }\r\n        }\r\n      }\r\n\r\n      // The preferredTrack matches the user preference and takes\r\n      // precedence over all the other tracks.\r\n      // So, display the preferredTrack before the first default track\r\n      // and the subtitles/captions track before the descriptions track\r\n      if (preferredTrack) {\r\n        preferredTrack.mode = 'showing';\r\n      } else if (firstCaptions) {\r\n        firstCaptions.mode = 'showing';\r\n      } else if (firstDesc) {\r\n        firstDesc.mode = 'showing';\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Turn display of {@link TextTrack}'s from the current state into the other state.\r\n     * There are only two states:\r\n     * - 'shown'\r\n     * - 'hidden'\r\n     *\r\n     * @listens Player#loadstart\r\n     */\r\n    toggleDisplay() {\r\n      if (this.player_.tech_ && this.player_.tech_.featuresNativeTextTracks) {\r\n        this.hide();\r\n      } else {\r\n        this.show();\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Create the {@link Component}'s DOM element.\r\n     *\r\n     * @return {Element}\r\n     *         The element that was created.\r\n     */\r\n    createEl() {\r\n      return super.createEl('div', {\r\n        className: 'vjs-text-track-display'\r\n      }, {\r\n        'translate': 'yes',\r\n        'aria-live': 'off',\r\n        'aria-atomic': 'true'\r\n      });\r\n    }\r\n\r\n    /**\r\n     * Clear all displayed {@link TextTrack}s.\r\n     */\r\n    clearDisplay() {\r\n      if (typeof window.WebVTT === 'function') {\r\n        window.WebVTT.processCues(window, [], this.el_);\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Update the displayed TextTrack when a either a {@link Player#texttrackchange} or\r\n     * a {@link Player#fullscreenchange} is fired.\r\n     *\r\n     * @listens Player#texttrackchange\r\n     * @listens Player#fullscreenchange\r\n     */\r\n    updateDisplay() {\r\n      const tracks = this.player_.textTracks();\r\n      const allowMultipleShowingTracks = this.options_.allowMultipleShowingTracks;\r\n      this.clearDisplay();\r\n      if (allowMultipleShowingTracks) {\r\n        const showingTracks = [];\r\n        for (let i = 0; i < tracks.length; ++i) {\r\n          const track = tracks[i];\r\n          if (track.mode !== 'showing') {\r\n            continue;\r\n          }\r\n          showingTracks.push(track);\r\n        }\r\n        this.updateForTrack(showingTracks);\r\n        return;\r\n      }\r\n\r\n      //  Track display prioritization model: if multiple tracks are 'showing',\r\n      //  display the first 'subtitles' or 'captions' track which is 'showing',\r\n      //  otherwise display the first 'descriptions' track which is 'showing'\r\n\r\n      let descriptionsTrack = null;\r\n      let captionsSubtitlesTrack = null;\r\n      let i = tracks.length;\r\n      while (i--) {\r\n        const track = tracks[i];\r\n        if (track.mode === 'showing') {\r\n          if (track.kind === 'descriptions') {\r\n            descriptionsTrack = track;\r\n          } else {\r\n            captionsSubtitlesTrack = track;\r\n          }\r\n        }\r\n      }\r\n      if (captionsSubtitlesTrack) {\r\n        if (this.getAttribute('aria-live') !== 'off') {\r\n          this.setAttribute('aria-live', 'off');\r\n        }\r\n        this.updateForTrack(captionsSubtitlesTrack);\r\n      } else if (descriptionsTrack) {\r\n        if (this.getAttribute('aria-live') !== 'assertive') {\r\n          this.setAttribute('aria-live', 'assertive');\r\n        }\r\n        this.updateForTrack(descriptionsTrack);\r\n      }\r\n      if (!window.CSS.supports('inset', '10px')) {\r\n        const textTrackDisplay = this.el_;\r\n        const vjsTextTrackCues = textTrackDisplay.querySelectorAll('.vjs-text-track-cue');\r\n        const controlBarHeight = this.player_.controlBar.el_.getBoundingClientRect().height;\r\n        const playerHeight = this.player_.el_.getBoundingClientRect().height;\r\n\r\n        // Clear inline style before getting actual height of textTrackDisplay\r\n        textTrackDisplay.style = '';\r\n\r\n        // textrack style updates, this styles are required to be inline\r\n        tryUpdateStyle(textTrackDisplay, 'position', 'relative');\r\n        tryUpdateStyle(textTrackDisplay, 'height', playerHeight - controlBarHeight + 'px');\r\n        tryUpdateStyle(textTrackDisplay, 'top', 'unset');\r\n        if (IS_SMART_TV) {\r\n          tryUpdateStyle(textTrackDisplay, 'bottom', playerHeight + 'px');\r\n        } else {\r\n          tryUpdateStyle(textTrackDisplay, 'bottom', '0px');\r\n        }\r\n\r\n        // vjsTextTrackCue style updates\r\n        if (vjsTextTrackCues.length > 0) {\r\n          vjsTextTrackCues.forEach(vjsTextTrackCue => {\r\n            // verify if inset styles are inline\r\n            if (vjsTextTrackCue.style.inset) {\r\n              const insetStyles = vjsTextTrackCue.style.inset.split(' ');\r\n\r\n              // expected value is always 3\r\n              if (insetStyles.length === 3) {\r\n                Object.assign(vjsTextTrackCue.style, {\r\n                  top: insetStyles[0],\r\n                  right: insetStyles[1],\r\n                  bottom: insetStyles[2],\r\n                  left: 'unset'\r\n                });\r\n              }\r\n            }\r\n          });\r\n        }\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Updates the displayed TextTrack to be sure it overlays the video when a either\r\n     * a {@link Player#texttrackchange} or a {@link Player#fullscreenchange} is fired.\r\n     */\r\n    updateDisplayOverlay() {\r\n      // inset-inline and inset-block are not supprted on old chrome, but these are\r\n      // only likely to be used on TV devices\r\n      if (!this.player_.videoHeight() || !window.CSS.supports('inset-inline: 10px')) {\r\n        return;\r\n      }\r\n      const playerWidth = this.player_.currentWidth();\r\n      const playerHeight = this.player_.currentHeight();\r\n      const playerAspectRatio = playerWidth / playerHeight;\r\n      const videoAspectRatio = this.player_.videoWidth() / this.player_.videoHeight();\r\n      let insetInlineMatch = 0;\r\n      let insetBlockMatch = 0;\r\n      if (Math.abs(playerAspectRatio - videoAspectRatio) > 0.1) {\r\n        if (playerAspectRatio > videoAspectRatio) {\r\n          insetInlineMatch = Math.round((playerWidth - playerHeight * videoAspectRatio) / 2);\r\n        } else {\r\n          insetBlockMatch = Math.round((playerHeight - playerWidth / videoAspectRatio) / 2);\r\n        }\r\n      }\r\n      tryUpdateStyle(this.el_, 'insetInline', getCSSPositionValue(insetInlineMatch));\r\n      tryUpdateStyle(this.el_, 'insetBlock', getCSSPositionValue(insetBlockMatch));\r\n    }\r\n\r\n    /**\r\n     * Style {@Link TextTrack} activeCues according to {@Link TextTrackSettings}.\r\n     *\r\n     * @param {TextTrack} track\r\n     *        Text track object containing active cues to style.\r\n     */\r\n    updateDisplayState(track) {\r\n      const overrides = this.player_.textTrackSettings.getValues();\r\n      const cues = track.activeCues;\r\n      let i = cues.length;\r\n      while (i--) {\r\n        const cue = cues[i];\r\n        if (!cue) {\r\n          continue;\r\n        }\r\n        const cueDiv = cue.displayState;\r\n        if (overrides.color) {\r\n          cueDiv.firstChild.style.color = overrides.color;\r\n        }\r\n        if (overrides.textOpacity) {\r\n          tryUpdateStyle(cueDiv.firstChild, 'color', constructColor(overrides.color || '#fff', overrides.textOpacity));\r\n        }\r\n        if (overrides.backgroundColor) {\r\n          cueDiv.firstChild.style.backgroundColor = overrides.backgroundColor;\r\n        }\r\n        if (overrides.backgroundOpacity) {\r\n          tryUpdateStyle(cueDiv.firstChild, 'backgroundColor', constructColor(overrides.backgroundColor || '#000', overrides.backgroundOpacity));\r\n        }\r\n        if (overrides.windowColor) {\r\n          if (overrides.windowOpacity) {\r\n            tryUpdateStyle(cueDiv, 'backgroundColor', constructColor(overrides.windowColor, overrides.windowOpacity));\r\n          } else {\r\n            cueDiv.style.backgroundColor = overrides.windowColor;\r\n          }\r\n        }\r\n        if (overrides.edgeStyle) {\r\n          if (overrides.edgeStyle === 'dropshadow') {\r\n            cueDiv.firstChild.style.textShadow = `2px 2px 3px ${darkGray}, 2px 2px 4px ${darkGray}, 2px 2px 5px ${darkGray}`;\r\n          } else if (overrides.edgeStyle === 'raised') {\r\n            cueDiv.firstChild.style.textShadow = `1px 1px ${darkGray}, 2px 2px ${darkGray}, 3px 3px ${darkGray}`;\r\n          } else if (overrides.edgeStyle === 'depressed') {\r\n            cueDiv.firstChild.style.textShadow = `1px 1px ${lightGray}, 0 1px ${lightGray}, -1px -1px ${darkGray}, 0 -1px ${darkGray}`;\r\n          } else if (overrides.edgeStyle === 'uniform') {\r\n            cueDiv.firstChild.style.textShadow = `0 0 4px ${darkGray}, 0 0 4px ${darkGray}, 0 0 4px ${darkGray}, 0 0 4px ${darkGray}`;\r\n          }\r\n        }\r\n        if (overrides.fontPercent && overrides.fontPercent !== 1) {\r\n          const fontSize = window.parseFloat(cueDiv.style.fontSize);\r\n          cueDiv.style.fontSize = fontSize * overrides.fontPercent + 'px';\r\n          cueDiv.style.height = 'auto';\r\n          cueDiv.style.top = 'auto';\r\n        }\r\n        if (overrides.fontFamily && overrides.fontFamily !== 'default') {\r\n          if (overrides.fontFamily === 'small-caps') {\r\n            cueDiv.firstChild.style.fontVariant = 'small-caps';\r\n          } else {\r\n            cueDiv.firstChild.style.fontFamily = fontMap[overrides.fontFamily];\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Add an {@link TextTrack} to to the {@link Tech}s {@link TextTrackList}.\r\n     *\r\n     * @param {TextTrack|TextTrack[]} tracks\r\n     *        Text track object or text track array to be added to the list.\r\n     */\r\n    updateForTrack(tracks) {\r\n      if (!Array.isArray(tracks)) {\r\n        tracks = [tracks];\r\n      }\r\n      if (typeof window.WebVTT !== 'function' || tracks.every(track => {\r\n        return !track.activeCues;\r\n      })) {\r\n        return;\r\n      }\r\n      const cues = [];\r\n\r\n      // push all active track cues\r\n      for (let i = 0; i < tracks.length; ++i) {\r\n        const track = tracks[i];\r\n        for (let j = 0; j < track.activeCues.length; ++j) {\r\n          cues.push(track.activeCues[j]);\r\n        }\r\n      }\r\n\r\n      // removes all cues before it processes new ones\r\n      window.WebVTT.processCues(window, cues, this.el_);\r\n\r\n      // add unique class to each language text track & add settings styling if necessary\r\n      for (let i = 0; i < tracks.length; ++i) {\r\n        const track = tracks[i];\r\n        for (let j = 0; j < track.activeCues.length; ++j) {\r\n          const cueEl = track.activeCues[j].displayState;\r\n          addClass(cueEl, 'vjs-text-track-cue', 'vjs-text-track-cue-' + (track.language ? track.language : i));\r\n          if (track.language) {\r\n            setAttribute(cueEl, 'lang', track.language);\r\n          }\r\n        }\r\n        if (this.player_.textTrackSettings) {\r\n          this.updateDisplayState(track);\r\n        }\r\n      }\r\n    }\r\n  }\r\n  Component$1.registerComponent('TextTrackDisplay', TextTrackDisplay);\r\n\r\n  /**\r\n   * @file loading-spinner.js\r\n   */\r\n\r\n  /**\r\n   * A loading spinner for use during waiting/loading events.\r\n   *\r\n   * @extends Component\r\n   */\r\n  class LoadingSpinner extends Component$1 {\r\n    /**\r\n     * Create the `LoadingSpinner`s DOM element.\r\n     *\r\n     * @return {Element}\r\n     *         The dom element that gets created.\r\n     */\r\n    createEl() {\r\n      const isAudio = this.player_.isAudio();\r\n      const playerType = this.localize(isAudio ? 'Audio Player' : 'Video Player');\r\n      const controlText = createEl('span', {\r\n        className: 'vjs-control-text',\r\n        textContent: this.localize('{1} is loading.', [playerType])\r\n      });\r\n      const el = super.createEl('div', {\r\n        className: 'vjs-loading-spinner',\r\n        dir: 'ltr'\r\n      });\r\n      el.appendChild(controlText);\r\n      return el;\r\n    }\r\n\r\n    /**\r\n     * Update control text on languagechange\r\n     */\r\n    handleLanguagechange() {\r\n      this.$('.vjs-control-text').textContent = this.localize('{1} is loading.', [this.player_.isAudio() ? 'Audio Player' : 'Video Player']);\r\n    }\r\n  }\r\n  Component$1.registerComponent('LoadingSpinner', LoadingSpinner);\r\n\r\n  /**\r\n   * @file button.js\r\n   */\r\n\r\n  /**\r\n   * Base class for all buttons.\r\n   *\r\n   * @extends ClickableComponent\r\n   */\r\n  class Button extends ClickableComponent {\r\n    /**\r\n     * Create the `Button`s DOM element.\r\n     *\r\n     * @param {string} [tag=\"button\"]\r\n     *        The element's node type. This argument is IGNORED: no matter what\r\n     *        is passed, it will always create a `button` element.\r\n     *\r\n     * @param {Object} [props={}]\r\n     *        An object of properties that should be set on the element.\r\n     *\r\n     * @param {Object} [attributes={}]\r\n     *        An object of attributes that should be set on the element.\r\n     *\r\n     * @return {Element}\r\n     *         The element that gets created.\r\n     */\r\n    createEl(tag, props = {}, attributes = {}) {\r\n      tag = 'button';\r\n      props = Object.assign({\r\n        className: this.buildCSSClass()\r\n      }, props);\r\n\r\n      // Add attributes for button element\r\n      attributes = Object.assign({\r\n        // Necessary since the default button type is \"submit\"\r\n        type: 'button'\r\n      }, attributes);\r\n      const el = createEl(tag, props, attributes);\r\n      if (!this.player_.options_.experimentalSvgIcons) {\r\n        el.appendChild(createEl('span', {\r\n          className: 'vjs-icon-placeholder'\r\n        }, {\r\n          'aria-hidden': true\r\n        }));\r\n      }\r\n      this.createControlTextEl(el);\r\n      return el;\r\n    }\r\n\r\n    /**\r\n     * Add a child `Component` inside of this `Button`.\r\n     *\r\n     * @param {string|Component} child\r\n     *        The name or instance of a child to add.\r\n     *\r\n     * @param {Object} [options={}]\r\n     *        The key/value store of options that will get passed to children of\r\n     *        the child.\r\n     *\r\n     * @return {Component}\r\n     *         The `Component` that gets added as a child. When using a string the\r\n     *         `Component` will get created by this process.\r\n     *\r\n     * @deprecated since version 5\r\n     */\r\n    addChild(child, options = {}) {\r\n      const className = this.constructor.name;\r\n      log$1.warn(`Adding an actionable (user controllable) child to a Button (${className}) is not supported; use a ClickableComponent instead.`);\r\n\r\n      // Avoid the error message generated by ClickableComponent's addChild method\r\n      return Component$1.prototype.addChild.call(this, child, options);\r\n    }\r\n\r\n    /**\r\n     * Enable the `Button` element so that it can be activated or clicked. Use this with\r\n     * {@link Button#disable}.\r\n     */\r\n    enable() {\r\n      super.enable();\r\n      this.el_.removeAttribute('disabled');\r\n    }\r\n\r\n    /**\r\n     * Disable the `Button` element so that it cannot be activated or clicked. Use this with\r\n     * {@link Button#enable}.\r\n     */\r\n    disable() {\r\n      super.disable();\r\n      this.el_.setAttribute('disabled', 'disabled');\r\n    }\r\n\r\n    /**\r\n     * This gets called when a `Button` has focus and `keydown` is triggered via a key\r\n     * press.\r\n     *\r\n     * @param {KeyboardEvent} event\r\n     *        The event that caused this function to get called.\r\n     *\r\n     * @listens keydown\r\n     */\r\n    handleKeyDown(event) {\r\n      // Ignore Space or Enter key operation, which is handled by the browser for\r\n      // a button - though not for its super class, ClickableComponent. Also,\r\n      // prevent the event from propagating through the DOM and triggering Player\r\n      // hotkeys. We do not preventDefault here because we _want_ the browser to\r\n      // handle it.\r\n      if (event.key === ' ' || event.key === 'Enter') {\r\n        event.stopPropagation();\r\n        return;\r\n      }\r\n\r\n      // Pass keypress handling up for unsupported keys\r\n      super.handleKeyDown(event);\r\n    }\r\n  }\r\n  Component$1.registerComponent('Button', Button);\r\n\r\n  /**\r\n   * @file big-play-button.js\r\n   */\r\n\r\n  /**\r\n   * The initial play button that shows before the video has played. The hiding of the\r\n   * `BigPlayButton` get done via CSS and `Player` states.\r\n   *\r\n   * @extends Button\r\n   */\r\n  class BigPlayButton extends Button {\r\n    constructor(player, options) {\r\n      super(player, options);\r\n      this.mouseused_ = false;\r\n      this.setIcon('play');\r\n      this.on('mousedown', e => this.handleMouseDown(e));\r\n    }\r\n\r\n    /**\r\n     * Builds the default DOM `className`.\r\n     *\r\n     * @return {string}\r\n     *         The DOM `className` for this object. Always returns 'vjs-big-play-button'.\r\n     */\r\n    buildCSSClass() {\r\n      return 'vjs-big-play-button';\r\n    }\r\n\r\n    /**\r\n     * This gets called when a `BigPlayButton` \"clicked\". See {@link ClickableComponent}\r\n     * for more detailed information on what a click can be.\r\n     *\r\n     * @param {KeyboardEvent|MouseEvent|TouchEvent} event\r\n     *        The `keydown`, `tap`, or `click` event that caused this function to be\r\n     *        called.\r\n     *\r\n     * @listens tap\r\n     * @listens click\r\n     */\r\n    handleClick(event) {\r\n      const playPromise = this.player_.play();\r\n\r\n      // exit early if clicked via the mouse\r\n      if (this.mouseused_ && 'clientX' in event && 'clientY' in event) {\r\n        silencePromise(playPromise);\r\n        if (this.player_.tech(true)) {\r\n          this.player_.tech(true).focus();\r\n        }\r\n        return;\r\n      }\r\n      const cb = this.player_.getChild('controlBar');\r\n      const playToggle = cb && cb.getChild('playToggle');\r\n      if (!playToggle) {\r\n        this.player_.tech(true).focus();\r\n        return;\r\n      }\r\n      const playFocus = () => playToggle.focus();\r\n      if (isPromise(playPromise)) {\r\n        playPromise.then(playFocus, () => {});\r\n      } else {\r\n        this.setTimeout(playFocus, 1);\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Event handler that is called when a `BigPlayButton` receives a\r\n     * `keydown` event.\r\n     *\r\n     * @param {KeyboardEvent} event\r\n     *        The `keydown` event that caused this function to be called.\r\n     *\r\n     * @listens keydown\r\n     */\r\n    handleKeyDown(event) {\r\n      this.mouseused_ = false;\r\n      super.handleKeyDown(event);\r\n    }\r\n\r\n    /**\r\n     * Handle `mousedown` events on the `BigPlayButton`.\r\n     *\r\n     * @param {MouseEvent} event\r\n     *        `mousedown` or `touchstart` event that triggered this function\r\n     *\r\n     * @listens mousedown\r\n     */\r\n    handleMouseDown(event) {\r\n      this.mouseused_ = true;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * The text that should display over the `BigPlayButton`s controls. Added to for localization.\r\n   *\r\n   * @type {string}\r\n   * @protected\r\n   */\r\n  BigPlayButton.prototype.controlText_ = 'Play Video';\r\n  Component$1.registerComponent('BigPlayButton', BigPlayButton);\r\n\r\n  /**\r\n   * @file close-button.js\r\n   */\r\n\r\n  /** @import Player from './player' */\r\n\r\n  /**\r\n   * The `CloseButton` is a `{@link Button}` that fires a `close` event when\r\n   * it gets clicked.\r\n   *\r\n   * @extends Button\r\n   */\r\n  class CloseButton extends Button {\r\n    /**\r\n    * Creates an instance of the this class.\r\n    *\r\n    * @param  {Player} player\r\n    *         The `Player` that this class should be attached to.\r\n    *\r\n    * @param  {Object} [options]\r\n    *         The key/value store of player options.\r\n    */\r\n    constructor(player, options) {\r\n      super(player, options);\r\n      this.setIcon('cancel');\r\n      this.controlText(options && options.controlText || this.localize('Close'));\r\n    }\r\n\r\n    /**\r\n    * Builds the default DOM `className`.\r\n    *\r\n    * @return {string}\r\n    *         The DOM `className` for this object.\r\n    */\r\n    buildCSSClass() {\r\n      return `vjs-close-button ${super.buildCSSClass()}`;\r\n    }\r\n\r\n    /**\r\n     * This gets called when a `CloseButton` gets clicked. See\r\n     * {@link ClickableComponent#handleClick} for more information on when\r\n     * this will be triggered\r\n     *\r\n     * @param {Event} event\r\n     *        The `keydown`, `tap`, or `click` event that caused this function to be\r\n     *        called.\r\n     *\r\n     * @listens tap\r\n     * @listens click\r\n     * @fires CloseButton#close\r\n     */\r\n    handleClick(event) {\r\n      /**\r\n       * Triggered when the a `CloseButton` is clicked.\r\n       *\r\n       * @event CloseButton#close\r\n       * @type {Event}\r\n       *\r\n       * @property {boolean} [bubbles=false]\r\n       *           set to false so that the close event does not\r\n       *           bubble up to parents if there is no listener\r\n       */\r\n      this.trigger({\r\n        type: 'close',\r\n        bubbles: false\r\n      });\r\n    }\r\n    /**\r\n     * Event handler that is called when a `CloseButton` receives a\r\n     * `keydown` event.\r\n     *\r\n     * By default, if the key is Esc, it will trigger a `click` event.\r\n     *\r\n     * @param {KeyboardEvent} event\r\n     *        The `keydown` event that caused this function to be called.\r\n     *\r\n     * @listens keydown\r\n     */\r\n    handleKeyDown(event) {\r\n      // Esc button will trigger `click` event\r\n      if (event.key === 'Escape') {\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n        this.trigger('click');\r\n      } else {\r\n        // Pass keypress handling up for unsupported keys\r\n        super.handleKeyDown(event);\r\n      }\r\n    }\r\n  }\r\n  Component$1.registerComponent('CloseButton', CloseButton);\r\n\r\n  /**\r\n   * @file play-toggle.js\r\n   */\r\n\r\n  /** @import Player from './player' */\r\n\r\n  /**\r\n   * Button to toggle between play and pause.\r\n   *\r\n   * @extends Button\r\n   */\r\n  class PlayToggle extends Button {\r\n    /**\r\n     * Creates an instance of this class.\r\n     *\r\n     * @param {Player} player\r\n     *        The `Player` that this class should be attached to.\r\n     *\r\n     * @param {Object} [options={}]\r\n     *        The key/value store of player options.\r\n     */\r\n    constructor(player, options = {}) {\r\n      super(player, options);\r\n\r\n      // show or hide replay icon\r\n      options.replay = options.replay === undefined || options.replay;\r\n      this.setIcon('play');\r\n      this.on(player, 'play', e => this.handlePlay(e));\r\n      this.on(player, 'pause', e => this.handlePause(e));\r\n      if (options.replay) {\r\n        this.on(player, 'ended', e => this.handleEnded(e));\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Builds the default DOM `className`.\r\n     *\r\n     * @return {string}\r\n     *         The DOM `className` for this object.\r\n     */\r\n    buildCSSClass() {\r\n      return `vjs-play-control ${super.buildCSSClass()}`;\r\n    }\r\n\r\n    /**\r\n     * This gets called when an `PlayToggle` is \"clicked\". See\r\n     * {@link ClickableComponent} for more detailed information on what a click can be.\r\n     *\r\n     * @param {Event} [event]\r\n     *        The `keydown`, `tap`, or `click` event that caused this function to be\r\n     *        called.\r\n     *\r\n     * @listens tap\r\n     * @listens click\r\n     */\r\n    handleClick(event) {\r\n      if (this.player_.paused()) {\r\n        silencePromise(this.player_.play());\r\n      } else {\r\n        this.player_.pause();\r\n      }\r\n    }\r\n\r\n    /**\r\n     * This gets called once after the video has ended and the user seeks so that\r\n     * we can change the replay button back to a play button.\r\n     *\r\n     * @param {Event} [event]\r\n     *        The event that caused this function to run.\r\n     *\r\n     * @listens Player#seeked\r\n     */\r\n    handleSeeked(event) {\r\n      this.removeClass('vjs-ended');\r\n      if (this.player_.paused()) {\r\n        this.handlePause(event);\r\n      } else {\r\n        this.handlePlay(event);\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Add the vjs-playing class to the element so it can change appearance.\r\n     *\r\n     * @param {Event} [event]\r\n     *        The event that caused this function to run.\r\n     *\r\n     * @listens Player#play\r\n     */\r\n    handlePlay(event) {\r\n      this.removeClass('vjs-ended', 'vjs-paused');\r\n      this.addClass('vjs-playing');\r\n      // change the button text to \"Pause\"\r\n      this.setIcon('pause');\r\n      this.controlText('Pause');\r\n    }\r\n\r\n    /**\r\n     * Add the vjs-paused class to the element so it can change appearance.\r\n     *\r\n     * @param {Event} [event]\r\n     *        The event that caused this function to run.\r\n     *\r\n     * @listens Player#pause\r\n     */\r\n    handlePause(event) {\r\n      this.removeClass('vjs-playing');\r\n      this.addClass('vjs-paused');\r\n      // change the button text to \"Play\"\r\n      this.setIcon('play');\r\n      this.controlText('Play');\r\n    }\r\n\r\n    /**\r\n     * Add the vjs-ended class to the element so it can change appearance\r\n     *\r\n     * @param {Event} [event]\r\n     *        The event that caused this function to run.\r\n     *\r\n     * @listens Player#ended\r\n     */\r\n    handleEnded(event) {\r\n      this.removeClass('vjs-playing');\r\n      this.addClass('vjs-ended');\r\n      // change the button text to \"Replay\"\r\n      this.setIcon('replay');\r\n      this.controlText('Replay');\r\n\r\n      // on the next seek remove the replay button\r\n      this.one(this.player_, 'seeked', e => this.handleSeeked(e));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * The text that should display over the `PlayToggle`s controls. Added for localization.\r\n   *\r\n   * @type {string}\r\n   * @protected\r\n   */\r\n  PlayToggle.prototype.controlText_ = 'Play';\r\n  Component$1.registerComponent('PlayToggle', PlayToggle);\r\n\r\n  /**\r\n   * @file time-display.js\r\n   */\r\n\r\n  /** @import Player from '../../player' */\r\n\r\n  /**\r\n   * Displays time information about the video\r\n   *\r\n   * @extends Component\r\n   */\r\n  class TimeDisplay extends Component$1 {\r\n    /**\r\n     * Creates an instance of this class.\r\n     *\r\n     * @param {Player} player\r\n     *        The `Player` that this class should be attached to.\r\n     *\r\n     * @param {Object} [options]\r\n     *        The key/value store of player options.\r\n     */\r\n    constructor(player, options) {\r\n      super(player, options);\r\n      this.on(player, ['timeupdate', 'ended', 'seeking'], e => this.update(e));\r\n      this.updateTextNode_();\r\n    }\r\n\r\n    /**\r\n     * Create the `Component`'s DOM element\r\n     *\r\n     * @return {Element}\r\n     *         The element that was created.\r\n     */\r\n    createEl() {\r\n      const className = this.buildCSSClass();\r\n      const el = super.createEl('div', {\r\n        className: `${className} vjs-time-control vjs-control`\r\n      });\r\n      const span = createEl('span', {\r\n        className: 'vjs-control-text',\r\n        textContent: `${this.localize(this.labelText_)}\\u00a0`\r\n      }, {\r\n        role: 'presentation'\r\n      });\r\n      el.appendChild(span);\r\n      this.contentEl_ = createEl('span', {\r\n        className: `${className}-display`\r\n      }, {\r\n        // span elements have no implicit role, but some screen readers (notably VoiceOver)\r\n        // treat them as a break between items in the DOM when using arrow keys\r\n        // (or left-to-right swipes on iOS) to read contents of a page. Using\r\n        // role='presentation' causes VoiceOver to NOT treat this span as a break.\r\n        role: 'presentation'\r\n      });\r\n      el.appendChild(this.contentEl_);\r\n      return el;\r\n    }\r\n    dispose() {\r\n      this.contentEl_ = null;\r\n      this.textNode_ = null;\r\n      super.dispose();\r\n    }\r\n\r\n    /**\r\n     * Updates the displayed time according to the `updateContent` function which is defined in the child class.\r\n     *\r\n     * @param {Event} [event]\r\n     *          The `timeupdate`, `ended` or `seeking` (if enableSmoothSeeking is true) event that caused this function to be called.\r\n     */\r\n    update(event) {\r\n      if (!this.player_.options_.enableSmoothSeeking && event.type === 'seeking') {\r\n        return;\r\n      }\r\n      this.updateContent(event);\r\n    }\r\n\r\n    /**\r\n     * Updates the time display text node with a new time\r\n     *\r\n     * @param {number} [time=0] the time to update to\r\n     *\r\n     * @private\r\n     */\r\n    updateTextNode_(time = 0) {\r\n      time = formatTime(time);\r\n      if (this.formattedTime_ === time) {\r\n        return;\r\n      }\r\n      this.formattedTime_ = time;\r\n      this.requestNamedAnimationFrame('TimeDisplay#updateTextNode_', () => {\r\n        if (!this.contentEl_) {\r\n          return;\r\n        }\r\n        let oldNode = this.textNode_;\r\n        if (oldNode && this.contentEl_.firstChild !== oldNode) {\r\n          oldNode = null;\r\n          log$1.warn('TimeDisplay#updateTextnode_: Prevented replacement of text node element since it was no longer a child of this node. Appending a new node instead.');\r\n        }\r\n        this.textNode_ = document.createTextNode(this.formattedTime_);\r\n        if (!this.textNode_) {\r\n          return;\r\n        }\r\n        if (oldNode) {\r\n          this.contentEl_.replaceChild(this.textNode_, oldNode);\r\n        } else {\r\n          this.contentEl_.appendChild(this.textNode_);\r\n        }\r\n      });\r\n    }\r\n\r\n    /**\r\n     * To be filled out in the child class, should update the displayed time\r\n     * in accordance with the fact that the current time has changed.\r\n     *\r\n     * @param {Event} [event]\r\n     *        The `timeupdate`  event that caused this to run.\r\n     *\r\n     * @listens Player#timeupdate\r\n     */\r\n    updateContent(event) {}\r\n  }\r\n\r\n  /**\r\n   * The text that is added to the `TimeDisplay` for screen reader users.\r\n   *\r\n   * @type {string}\r\n   * @private\r\n   */\r\n  TimeDisplay.prototype.labelText_ = 'Time';\r\n\r\n  /**\r\n   * The text that should display over the `TimeDisplay`s controls. Added to for localization.\r\n   *\r\n   * @type {string}\r\n   * @protected\r\n   *\r\n   * @deprecated in v7; controlText_ is not used in non-active display Components\r\n   */\r\n  TimeDisplay.prototype.controlText_ = 'Time';\r\n  Component$1.registerComponent('TimeDisplay', TimeDisplay);\r\n\r\n  /**\r\n   * @file current-time-display.js\r\n   */\r\n\r\n  /**\r\n   * Displays the current time\r\n   *\r\n   * @extends Component\r\n   */\r\n  class CurrentTimeDisplay extends TimeDisplay {\r\n    /**\r\n     * Builds the default DOM `className`.\r\n     *\r\n     * @return {string}\r\n     *         The DOM `className` for this object.\r\n     */\r\n    buildCSSClass() {\r\n      return 'vjs-current-time';\r\n    }\r\n\r\n    /**\r\n     * Update current time display\r\n     *\r\n     * @param {Event} [event]\r\n     *        The `timeupdate` event that caused this function to run.\r\n     *\r\n     * @listens Player#timeupdate\r\n     */\r\n    updateContent(event) {\r\n      // Allows for smooth scrubbing, when player can't keep up.\r\n      let time;\r\n      if (this.player_.ended()) {\r\n        time = this.player_.duration();\r\n      } else {\r\n        time = this.player_.scrubbing() ? this.player_.getCache().currentTime : this.player_.currentTime();\r\n      }\r\n      this.updateTextNode_(time);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * The text that is added to the `CurrentTimeDisplay` for screen reader users.\r\n   *\r\n   * @type {string}\r\n   * @private\r\n   */\r\n  CurrentTimeDisplay.prototype.labelText_ = 'Current Time';\r\n\r\n  /**\r\n   * The text that should display over the `CurrentTimeDisplay`s controls. Added to for localization.\r\n   *\r\n   * @type {string}\r\n   * @protected\r\n   *\r\n   * @deprecated in v7; controlText_ is not used in non-active display Components\r\n   */\r\n  CurrentTimeDisplay.prototype.controlText_ = 'Current Time';\r\n  Component$1.registerComponent('CurrentTimeDisplay', CurrentTimeDisplay);\r\n\r\n  /**\r\n   * @file duration-display.js\r\n   */\r\n\r\n  /** @import Player from '../../player' */\r\n\r\n  /**\r\n   * Displays the duration\r\n   *\r\n   * @extends Component\r\n   */\r\n  class DurationDisplay extends TimeDisplay {\r\n    /**\r\n     * Creates an instance of this class.\r\n     *\r\n     * @param {Player} player\r\n     *        The `Player` that this class should be attached to.\r\n     *\r\n     * @param {Object} [options]\r\n     *        The key/value store of player options.\r\n     */\r\n    constructor(player, options) {\r\n      super(player, options);\r\n      const updateContent = e => this.updateContent(e);\r\n\r\n      // we do not want to/need to throttle duration changes,\r\n      // as they should always display the changed duration as\r\n      // it has changed\r\n      this.on(player, 'durationchange', updateContent);\r\n\r\n      // Listen to loadstart because the player duration is reset when a new media element is loaded,\r\n      // but the durationchange on the user agent will not fire.\r\n      // @see [Spec]{@link https://www.w3.org/TR/2011/WD-html5-20110113/video.html#media-element-load-algorithm}\r\n      this.on(player, 'loadstart', updateContent);\r\n\r\n      // Also listen for timeupdate (in the parent) and loadedmetadata because removing those\r\n      // listeners could have broken dependent applications/libraries. These\r\n      // can likely be removed for 7.0.\r\n      this.on(player, 'loadedmetadata', updateContent);\r\n    }\r\n\r\n    /**\r\n     * Builds the default DOM `className`.\r\n     *\r\n     * @return {string}\r\n     *         The DOM `className` for this object.\r\n     */\r\n    buildCSSClass() {\r\n      return 'vjs-duration';\r\n    }\r\n\r\n    /**\r\n     * Update duration time display.\r\n     *\r\n     * @param {Event} [event]\r\n     *        The `durationchange`, `timeupdate`, or `loadedmetadata` event that caused\r\n     *        this function to be called.\r\n     *\r\n     * @listens Player#durationchange\r\n     * @listens Player#timeupdate\r\n     * @listens Player#loadedmetadata\r\n     */\r\n    updateContent(event) {\r\n      const duration = this.player_.duration();\r\n      this.updateTextNode_(duration);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * The text that is added to the `DurationDisplay` for screen reader users.\r\n   *\r\n   * @type {string}\r\n   * @private\r\n   */\r\n  DurationDisplay.prototype.labelText_ = 'Duration';\r\n\r\n  /**\r\n   * The text that should display over the `DurationDisplay`s controls. Added to for localization.\r\n   *\r\n   * @type {string}\r\n   * @protected\r\n   *\r\n   * @deprecated in v7; controlText_ is not used in non-active display Components\r\n   */\r\n  DurationDisplay.prototype.controlText_ = 'Duration';\r\n  Component$1.registerComponent('DurationDisplay', DurationDisplay);\r\n\r\n  /**\r\n   * @file time-divider.js\r\n   */\r\n\r\n  /**\r\n   * The separator between the current time and duration.\r\n   * Can be hidden if it's not needed in the design.\r\n   *\r\n   * @extends Component\r\n   */\r\n  class TimeDivider extends Component$1 {\r\n    /**\r\n     * Create the component's DOM element\r\n     *\r\n     * @return {Element}\r\n     *         The element that was created.\r\n     */\r\n    createEl() {\r\n      const el = super.createEl('div', {\r\n        className: 'vjs-time-control vjs-time-divider'\r\n      }, {\r\n        // this element and its contents can be hidden from assistive techs since\r\n        // it is made extraneous by the announcement of the control text\r\n        // for the current time and duration displays\r\n        'aria-hidden': true\r\n      });\r\n      const div = super.createEl('div');\r\n      const span = super.createEl('span', {\r\n        textContent: '/'\r\n      });\r\n      div.appendChild(span);\r\n      el.appendChild(div);\r\n      return el;\r\n    }\r\n  }\r\n  Component$1.registerComponent('TimeDivider', TimeDivider);\r\n\r\n  /**\r\n   * @file remaining-time-display.js\r\n   */\r\n\r\n  /** @import Player from '../../player' */\r\n\r\n  /**\r\n   * Displays the time left in the video\r\n   *\r\n   * @extends Component\r\n   */\r\n  class RemainingTimeDisplay extends TimeDisplay {\r\n    /**\r\n     * Creates an instance of this class.\r\n     *\r\n     * @param {Player} player\r\n     *        The `Player` that this class should be attached to.\r\n     *\r\n     * @param {Object} [options]\r\n     *        The key/value store of player options.\r\n     */\r\n    constructor(player, options) {\r\n      super(player, options);\r\n      this.on(player, 'durationchange', e => this.updateContent(e));\r\n    }\r\n\r\n    /**\r\n     * Builds the default DOM `className`.\r\n     *\r\n     * @return {string}\r\n     *         The DOM `className` for this object.\r\n     */\r\n    buildCSSClass() {\r\n      return 'vjs-remaining-time';\r\n    }\r\n\r\n    /**\r\n     * Create the `Component`'s DOM element with the \"minus\" character prepend to the time\r\n     *\r\n     * @return {Element}\r\n     *         The element that was created.\r\n     */\r\n    createEl() {\r\n      const el = super.createEl();\r\n      if (this.options_.displayNegative !== false) {\r\n        el.insertBefore(createEl('span', {}, {\r\n          'aria-hidden': true\r\n        }, '-'), this.contentEl_);\r\n      }\r\n      return el;\r\n    }\r\n\r\n    /**\r\n     * Update remaining time display.\r\n     *\r\n     * @param {Event} [event]\r\n     *        The `timeupdate` or `durationchange` event that caused this to run.\r\n     *\r\n     * @listens Player#timeupdate\r\n     * @listens Player#durationchange\r\n     */\r\n    updateContent(event) {\r\n      if (typeof this.player_.duration() !== 'number') {\r\n        return;\r\n      }\r\n      let time;\r\n\r\n      // @deprecated We should only use remainingTimeDisplay\r\n      // as of video.js 7\r\n      if (this.player_.ended()) {\r\n        time = 0;\r\n      } else if (this.player_.remainingTimeDisplay) {\r\n        time = this.player_.remainingTimeDisplay();\r\n      } else {\r\n        time = this.player_.remainingTime();\r\n      }\r\n      this.updateTextNode_(time);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * The text that is added to the `RemainingTimeDisplay` for screen reader users.\r\n   *\r\n   * @type {string}\r\n   * @private\r\n   */\r\n  RemainingTimeDisplay.prototype.labelText_ = 'Remaining Time';\r\n\r\n  /**\r\n   * The text that should display over the `RemainingTimeDisplay`s controls. Added to for localization.\r\n   *\r\n   * @type {string}\r\n   * @protected\r\n   *\r\n   * @deprecated in v7; controlText_ is not used in non-active display Components\r\n   */\r\n  RemainingTimeDisplay.prototype.controlText_ = 'Remaining Time';\r\n  Component$1.registerComponent('RemainingTimeDisplay', RemainingTimeDisplay);\r\n\r\n  /**\r\n   * @file live-display.js\r\n   */\r\n\r\n  /** @import Player from './player' */\r\n\r\n  // TODO - Future make it click to snap to live\r\n\r\n  /**\r\n   * Displays the live indicator when duration is Infinity.\r\n   *\r\n   * @extends Component\r\n   */\r\n  class LiveDisplay extends Component$1 {\r\n    /**\r\n     * Creates an instance of this class.\r\n     *\r\n     * @param {Player} player\r\n     *        The `Player` that this class should be attached to.\r\n     *\r\n     * @param {Object} [options]\r\n     *        The key/value store of player options.\r\n     */\r\n    constructor(player, options) {\r\n      super(player, options);\r\n      this.updateShowing();\r\n      this.on(this.player(), 'durationchange', e => this.updateShowing(e));\r\n    }\r\n\r\n    /**\r\n     * Create the `Component`'s DOM element\r\n     *\r\n     * @return {Element}\r\n     *         The element that was created.\r\n     */\r\n    createEl() {\r\n      const el = super.createEl('div', {\r\n        className: 'vjs-live-control vjs-control'\r\n      });\r\n      this.contentEl_ = createEl('div', {\r\n        className: 'vjs-live-display'\r\n      }, {\r\n        'aria-live': 'off'\r\n      });\r\n      this.contentEl_.appendChild(createEl('span', {\r\n        className: 'vjs-control-text',\r\n        textContent: `${this.localize('Stream Type')}\\u00a0`\r\n      }));\r\n      this.contentEl_.appendChild(document.createTextNode(this.localize('LIVE')));\r\n      el.appendChild(this.contentEl_);\r\n      return el;\r\n    }\r\n    dispose() {\r\n      this.contentEl_ = null;\r\n      super.dispose();\r\n    }\r\n\r\n    /**\r\n     * Check the duration to see if the LiveDisplay should be showing or not. Then show/hide\r\n     * it accordingly\r\n     *\r\n     * @param {Event} [event]\r\n     *        The {@link Player#durationchange} event that caused this function to run.\r\n     *\r\n     * @listens Player#durationchange\r\n     */\r\n    updateShowing(event) {\r\n      if (this.player().duration() === Infinity) {\r\n        this.show();\r\n      } else {\r\n        this.hide();\r\n      }\r\n    }\r\n  }\r\n  Component$1.registerComponent('LiveDisplay', LiveDisplay);\r\n\r\n  /**\r\n   * @file seek-to-live.js\r\n   */\r\n\r\n  /** @import Player from './player' */\r\n\r\n  /**\r\n   * Displays the live indicator when duration is Infinity.\r\n   *\r\n   * @extends Component\r\n   */\r\n  class SeekToLive extends Button {\r\n    /**\r\n     * Creates an instance of this class.\r\n     *\r\n     * @param {Player} player\r\n     *        The `Player` that this class should be attached to.\r\n     *\r\n     * @param {Object} [options]\r\n     *        The key/value store of player options.\r\n     */\r\n    constructor(player, options) {\r\n      super(player, options);\r\n      this.updateLiveEdgeStatus();\r\n      if (this.player_.liveTracker) {\r\n        this.updateLiveEdgeStatusHandler_ = e => this.updateLiveEdgeStatus(e);\r\n        this.on(this.player_.liveTracker, 'liveedgechange', this.updateLiveEdgeStatusHandler_);\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Create the `Component`'s DOM element\r\n     *\r\n     * @return {Element}\r\n     *         The element that was created.\r\n     */\r\n    createEl() {\r\n      const el = super.createEl('button', {\r\n        className: 'vjs-seek-to-live-control vjs-control'\r\n      });\r\n      this.setIcon('circle', el);\r\n      this.textEl_ = createEl('span', {\r\n        className: 'vjs-seek-to-live-text',\r\n        textContent: this.localize('LIVE')\r\n      }, {\r\n        'aria-hidden': 'true'\r\n      });\r\n      el.appendChild(this.textEl_);\r\n      return el;\r\n    }\r\n\r\n    /**\r\n     * Update the state of this button if we are at the live edge\r\n     * or not\r\n     */\r\n    updateLiveEdgeStatus() {\r\n      // default to live edge\r\n      if (!this.player_.liveTracker || this.player_.liveTracker.atLiveEdge()) {\r\n        this.setAttribute('aria-disabled', true);\r\n        this.addClass('vjs-at-live-edge');\r\n        this.controlText('Seek to live, currently playing live');\r\n      } else {\r\n        this.setAttribute('aria-disabled', false);\r\n        this.removeClass('vjs-at-live-edge');\r\n        this.controlText('Seek to live, currently behind live');\r\n      }\r\n    }\r\n\r\n    /**\r\n     * On click bring us as near to the live point as possible.\r\n     * This requires that we wait for the next `live-seekable-change`\r\n     * event which will happen every segment length seconds.\r\n     */\r\n    handleClick() {\r\n      this.player_.liveTracker.seekToLiveEdge();\r\n    }\r\n\r\n    /**\r\n     * Dispose of the element and stop tracking\r\n     */\r\n    dispose() {\r\n      if (this.player_.liveTracker) {\r\n        this.off(this.player_.liveTracker, 'liveedgechange', this.updateLiveEdgeStatusHandler_);\r\n      }\r\n      this.textEl_ = null;\r\n      super.dispose();\r\n    }\r\n  }\r\n  /**\r\n   * The text that should display over the `SeekToLive`s control. Added for localization.\r\n   *\r\n   * @type {string}\r\n   * @protected\r\n   */\r\n  SeekToLive.prototype.controlText_ = 'Seek to live, currently playing live';\r\n  Component$1.registerComponent('SeekToLive', SeekToLive);\r\n\r\n  /**\r\n   * @file num.js\r\n   * @module num\r\n   */\r\n\r\n  /**\r\n   * Keep a number between a min and a max value\r\n   *\r\n   * @param {number} number\r\n   *        The number to clamp\r\n   *\r\n   * @param {number} min\r\n   *        The minimum value\r\n   * @param {number} max\r\n   *        The maximum value\r\n   *\r\n   * @return {number}\r\n   *         the clamped number\r\n   */\r\n  function clamp(number, min, max) {\r\n    number = Number(number);\r\n    return Math.min(max, Math.max(min, isNaN(number) ? min : number));\r\n  }\r\n\r\n  var Num = /*#__PURE__*/Object.freeze({\r\n    __proto__: null,\r\n    clamp: clamp\r\n  });\r\n\r\n  /**\r\n   * @file slider.js\r\n   */\r\n\r\n  /** @import Player from '../player' */\r\n\r\n  /**\r\n   * The base functionality for a slider. Can be vertical or horizontal.\r\n   * For instance the volume bar or the seek bar on a video is a slider.\r\n   *\r\n   * @extends Component\r\n   */\r\n  class Slider extends Component$1 {\r\n    /**\r\n    * Create an instance of this class\r\n    *\r\n    * @param {Player} player\r\n    *        The `Player` that this class should be attached to.\r\n    *\r\n    * @param {Object} [options]\r\n    *        The key/value store of player options.\r\n    */\r\n    constructor(player, options) {\r\n      super(player, options);\r\n      this.handleMouseDown_ = e => this.handleMouseDown(e);\r\n      this.handleMouseUp_ = e => this.handleMouseUp(e);\r\n      this.handleKeyDown_ = e => this.handleKeyDown(e);\r\n      this.handleClick_ = e => this.handleClick(e);\r\n      this.handleMouseMove_ = e => this.handleMouseMove(e);\r\n      this.update_ = e => this.update(e);\r\n\r\n      // Set property names to bar to match with the child Slider class is looking for\r\n      this.bar = this.getChild(this.options_.barName);\r\n\r\n      // Set a horizontal or vertical class on the slider depending on the slider type\r\n      this.vertical(!!this.options_.vertical);\r\n      this.enable();\r\n    }\r\n\r\n    /**\r\n     * Are controls are currently enabled for this slider or not.\r\n     *\r\n     * @return {boolean}\r\n     *         true if controls are enabled, false otherwise\r\n     */\r\n    enabled() {\r\n      return this.enabled_;\r\n    }\r\n\r\n    /**\r\n     * Enable controls for this slider if they are disabled\r\n     */\r\n    enable() {\r\n      if (this.enabled()) {\r\n        return;\r\n      }\r\n      this.on('mousedown', this.handleMouseDown_);\r\n      this.on('touchstart', this.handleMouseDown_);\r\n      this.on('keydown', this.handleKeyDown_);\r\n      this.on('click', this.handleClick_);\r\n\r\n      // TODO: deprecated, controlsvisible does not seem to be fired\r\n      this.on(this.player_, 'controlsvisible', this.update);\r\n      if (this.playerEvent) {\r\n        this.on(this.player_, this.playerEvent, this.update);\r\n      }\r\n      this.removeClass('disabled');\r\n      this.setAttribute('tabindex', 0);\r\n      this.enabled_ = true;\r\n    }\r\n\r\n    /**\r\n     * Disable controls for this slider if they are enabled\r\n     */\r\n    disable() {\r\n      if (!this.enabled()) {\r\n        return;\r\n      }\r\n      const doc = this.bar.el_.ownerDocument;\r\n      this.off('mousedown', this.handleMouseDown_);\r\n      this.off('touchstart', this.handleMouseDown_);\r\n      this.off('keydown', this.handleKeyDown_);\r\n      this.off('click', this.handleClick_);\r\n      this.off(this.player_, 'controlsvisible', this.update_);\r\n      this.off(doc, 'mousemove', this.handleMouseMove_);\r\n      this.off(doc, 'mouseup', this.handleMouseUp_);\r\n      this.off(doc, 'touchmove', this.handleMouseMove_);\r\n      this.off(doc, 'touchend', this.handleMouseUp_);\r\n      this.removeAttribute('tabindex');\r\n      this.addClass('disabled');\r\n      if (this.playerEvent) {\r\n        this.off(this.player_, this.playerEvent, this.update);\r\n      }\r\n      this.enabled_ = false;\r\n    }\r\n\r\n    /**\r\n     * Create the `Slider`s DOM element.\r\n     *\r\n     * @param {string} type\r\n     *        Type of element to create.\r\n     *\r\n     * @param {Object} [props={}]\r\n     *        List of properties in Object form.\r\n     *\r\n     * @param {Object} [attributes={}]\r\n     *        list of attributes in Object form.\r\n     *\r\n     * @return {Element}\r\n     *         The element that gets created.\r\n     */\r\n    createEl(type, props = {}, attributes = {}) {\r\n      // Add the slider element class to all sub classes\r\n      props.className = props.className + ' vjs-slider';\r\n      props = Object.assign({\r\n        tabIndex: 0\r\n      }, props);\r\n      attributes = Object.assign({\r\n        'role': 'slider',\r\n        'aria-valuenow': 0,\r\n        'aria-valuemin': 0,\r\n        'aria-valuemax': 100\r\n      }, attributes);\r\n      return super.createEl(type, props, attributes);\r\n    }\r\n\r\n    /**\r\n     * Handle `mousedown` or `touchstart` events on the `Slider`.\r\n     *\r\n     * @param {MouseEvent} event\r\n     *        `mousedown` or `touchstart` event that triggered this function\r\n     *\r\n     * @listens mousedown\r\n     * @listens touchstart\r\n     * @fires Slider#slideractive\r\n     */\r\n    handleMouseDown(event) {\r\n      const doc = this.bar.el_.ownerDocument;\r\n      if (event.type === 'mousedown') {\r\n        event.preventDefault();\r\n      }\r\n      // Do not call preventDefault() on touchstart in Chrome\r\n      // to avoid console warnings. Use a 'touch-action: none' style\r\n      // instead to prevent unintended scrolling.\r\n      // https://developers.google.com/web/updates/2017/01/scrolling-intervention\r\n      if (event.type === 'touchstart' && !IS_CHROME) {\r\n        event.preventDefault();\r\n      }\r\n      blockTextSelection();\r\n      this.addClass('vjs-sliding');\r\n      /**\r\n       * Triggered when the slider is in an active state\r\n       *\r\n       * @event Slider#slideractive\r\n       * @type {MouseEvent}\r\n       */\r\n      this.trigger('slideractive');\r\n      this.on(doc, 'mousemove', this.handleMouseMove_);\r\n      this.on(doc, 'mouseup', this.handleMouseUp_);\r\n      this.on(doc, 'touchmove', this.handleMouseMove_);\r\n      this.on(doc, 'touchend', this.handleMouseUp_);\r\n      this.handleMouseMove(event, true);\r\n    }\r\n\r\n    /**\r\n     * Handle the `mousemove`, `touchmove`, and `mousedown` events on this `Slider`.\r\n     * The `mousemove` and `touchmove` events will only only trigger this function during\r\n     * `mousedown` and `touchstart`. This is due to {@link Slider#handleMouseDown} and\r\n     * {@link Slider#handleMouseUp}.\r\n     *\r\n     * @param {MouseEvent} event\r\n     *        `mousedown`, `mousemove`, `touchstart`, or `touchmove` event that triggered\r\n     *        this function\r\n     * @param {boolean} mouseDown this is a flag that should be set to true if `handleMouseMove` is called directly. It allows us to skip things that should not happen if coming from mouse down but should happen on regular mouse move handler. Defaults to false.\r\n     *\r\n     * @listens mousemove\r\n     * @listens touchmove\r\n     */\r\n    handleMouseMove(event) {}\r\n\r\n    /**\r\n     * Handle `mouseup` or `touchend` events on the `Slider`.\r\n     *\r\n     * @param {MouseEvent} event\r\n     *        `mouseup` or `touchend` event that triggered this function.\r\n     *\r\n     * @listens touchend\r\n     * @listens mouseup\r\n     * @fires Slider#sliderinactive\r\n     */\r\n    handleMouseUp(event) {\r\n      const doc = this.bar.el_.ownerDocument;\r\n      unblockTextSelection();\r\n      this.removeClass('vjs-sliding');\r\n      /**\r\n       * Triggered when the slider is no longer in an active state.\r\n       *\r\n       * @event Slider#sliderinactive\r\n       * @type {Event}\r\n       */\r\n      this.trigger('sliderinactive');\r\n      this.off(doc, 'mousemove', this.handleMouseMove_);\r\n      this.off(doc, 'mouseup', this.handleMouseUp_);\r\n      this.off(doc, 'touchmove', this.handleMouseMove_);\r\n      this.off(doc, 'touchend', this.handleMouseUp_);\r\n      this.update();\r\n    }\r\n\r\n    /**\r\n     * Update the progress bar of the `Slider`.\r\n     *\r\n     * @return {number}\r\n     *          The percentage of progress the progress bar represents as a\r\n     *          number from 0 to 1.\r\n     */\r\n    update() {\r\n      // In VolumeBar init we have a setTimeout for update that pops and update\r\n      // to the end of the execution stack. The player is destroyed before then\r\n      // update will cause an error\r\n      // If there's no bar...\r\n      if (!this.el_ || !this.bar) {\r\n        return;\r\n      }\r\n\r\n      // clamp progress between 0 and 1\r\n      // and only round to four decimal places, as we round to two below\r\n      const progress = this.getProgress();\r\n      if (progress === this.progress_) {\r\n        return progress;\r\n      }\r\n      this.progress_ = progress;\r\n      this.requestNamedAnimationFrame('Slider#update', () => {\r\n        // Set the new bar width or height\r\n        const sizeKey = this.vertical() ? 'height' : 'width';\r\n\r\n        // Convert to a percentage for css value\r\n        this.bar.el().style[sizeKey] = (progress * 100).toFixed(2) + '%';\r\n      });\r\n      return progress;\r\n    }\r\n\r\n    /**\r\n     * Get the percentage of the bar that should be filled\r\n     * but clamped and rounded.\r\n     *\r\n     * @return {number}\r\n     *         percentage filled that the slider is\r\n     */\r\n    getProgress() {\r\n      return Number(clamp(this.getPercent(), 0, 1).toFixed(4));\r\n    }\r\n\r\n    /**\r\n     * Calculate distance for slider\r\n     *\r\n     * @param {Event} event\r\n     *        The event that caused this function to run.\r\n     *\r\n     * @return {number}\r\n     *         The current position of the Slider.\r\n     *         - position.x for vertical `Slider`s\r\n     *         - position.y for horizontal `Slider`s\r\n     */\r\n    calculateDistance(event) {\r\n      const position = getPointerPosition(this.el_, event);\r\n      if (this.vertical()) {\r\n        return position.y;\r\n      }\r\n      return position.x;\r\n    }\r\n\r\n    /**\r\n     * Handle a `keydown` event on the `Slider`. Watches for left, right, up, and down\r\n     * arrow keys. This function will only be called when the slider has focus. See\r\n     * {@link Slider#handleFocus} and {@link Slider#handleBlur}.\r\n     *\r\n     * @param {KeyboardEvent} event\r\n     *        the `keydown` event that caused this function to run.\r\n     *\r\n     * @listens keydown\r\n     */\r\n    handleKeyDown(event) {\r\n      const spatialNavOptions = this.options_.playerOptions.spatialNavigation;\r\n      const spatialNavEnabled = spatialNavOptions && spatialNavOptions.enabled;\r\n      const horizontalSeek = spatialNavOptions && spatialNavOptions.horizontalSeek;\r\n      if (spatialNavEnabled) {\r\n        if (horizontalSeek && event.key === 'ArrowLeft' || !horizontalSeek && event.key === 'ArrowDown') {\r\n          event.preventDefault();\r\n          event.stopPropagation();\r\n          this.stepBack();\r\n        } else if (horizontalSeek && event.key === 'ArrowRight' || !horizontalSeek && event.key === 'ArrowUp') {\r\n          event.preventDefault();\r\n          event.stopPropagation();\r\n          this.stepForward();\r\n        } else {\r\n          super.handleKeyDown(event);\r\n        }\r\n\r\n        // Left and Down Arrows\r\n      } else if (event.key === 'ArrowLeft' || event.key === 'ArrowDown') {\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n        this.stepBack();\r\n\r\n        // Up and Right Arrows\r\n      } else if (event.key === 'ArrowUp' || event.key === 'ArrowRight') {\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n        this.stepForward();\r\n      } else {\r\n        // Pass keydown handling up for unsupported keys\r\n        super.handleKeyDown(event);\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Listener for click events on slider, used to prevent clicks\r\n     *   from bubbling up to parent elements like button menus.\r\n     *\r\n     * @param {Object} event\r\n     *        Event that caused this object to run\r\n     */\r\n    handleClick(event) {\r\n      event.stopPropagation();\r\n      event.preventDefault();\r\n    }\r\n\r\n    /**\r\n     * Get/set if slider is horizontal for vertical\r\n     *\r\n     * @param {boolean} [bool]\r\n     *        - true if slider is vertical,\r\n     *        - false is horizontal\r\n     *\r\n     * @return {boolean}\r\n     *         - true if slider is vertical, and getting\r\n     *         - false if the slider is horizontal, and getting\r\n     */\r\n    vertical(bool) {\r\n      if (bool === undefined) {\r\n        return this.vertical_ || false;\r\n      }\r\n      this.vertical_ = !!bool;\r\n      if (this.vertical_) {\r\n        this.addClass('vjs-slider-vertical');\r\n      } else {\r\n        this.addClass('vjs-slider-horizontal');\r\n      }\r\n    }\r\n  }\r\n  Component$1.registerComponent('Slider', Slider);\r\n\r\n  /**\r\n   * @file load-progress-bar.js\r\n   */\r\n\r\n  /** @import Player from '../../player' */\r\n\r\n  // get the percent width of a time compared to the total end\r\n  const percentify = (time, end) => clamp(time / end * 100, 0, 100).toFixed(2) + '%';\r\n\r\n  /**\r\n   * Shows loading progress\r\n   *\r\n   * @extends Component\r\n   */\r\n  class LoadProgressBar extends Component$1 {\r\n    /**\r\n     * Creates an instance of this class.\r\n     *\r\n     * @param {Player} player\r\n     *        The `Player` that this class should be attached to.\r\n     *\r\n     * @param {Object} [options]\r\n     *        The key/value store of player options.\r\n     */\r\n    constructor(player, options) {\r\n      super(player, options);\r\n      this.partEls_ = [];\r\n      this.on(player, 'progress', e => this.update(e));\r\n    }\r\n\r\n    /**\r\n     * Create the `Component`'s DOM element\r\n     *\r\n     * @return {Element}\r\n     *         The element that was created.\r\n     */\r\n    createEl() {\r\n      const el = super.createEl('div', {\r\n        className: 'vjs-load-progress'\r\n      });\r\n      const wrapper = createEl('span', {\r\n        className: 'vjs-control-text'\r\n      });\r\n      const loadedText = createEl('span', {\r\n        textContent: this.localize('Loaded')\r\n      });\r\n      const separator = document.createTextNode(': ');\r\n      this.percentageEl_ = createEl('span', {\r\n        className: 'vjs-control-text-loaded-percentage',\r\n        textContent: '0%'\r\n      });\r\n      el.appendChild(wrapper);\r\n      wrapper.appendChild(loadedText);\r\n      wrapper.appendChild(separator);\r\n      wrapper.appendChild(this.percentageEl_);\r\n      return el;\r\n    }\r\n    dispose() {\r\n      this.partEls_ = null;\r\n      this.percentageEl_ = null;\r\n      super.dispose();\r\n    }\r\n\r\n    /**\r\n     * Update progress bar\r\n     *\r\n     * @param {Event} [event]\r\n     *        The `progress` event that caused this function to run.\r\n     *\r\n     * @listens Player#progress\r\n     */\r\n    update(event) {\r\n      this.requestNamedAnimationFrame('LoadProgressBar#update', () => {\r\n        const liveTracker = this.player_.liveTracker;\r\n        const buffered = this.player_.buffered();\r\n        const duration = liveTracker && liveTracker.isLive() ? liveTracker.seekableEnd() : this.player_.duration();\r\n        const bufferedEnd = this.player_.bufferedEnd();\r\n        const children = this.partEls_;\r\n        const percent = percentify(bufferedEnd, duration);\r\n        if (this.percent_ !== percent) {\r\n          // update the width of the progress bar\r\n          this.el_.style.width = percent;\r\n          // update the control-text\r\n          textContent(this.percentageEl_, percent);\r\n          this.percent_ = percent;\r\n        }\r\n\r\n        // add child elements to represent the individual buffered time ranges\r\n        for (let i = 0; i < buffered.length; i++) {\r\n          const start = buffered.start(i);\r\n          const end = buffered.end(i);\r\n          let part = children[i];\r\n          if (!part) {\r\n            part = this.el_.appendChild(createEl());\r\n            children[i] = part;\r\n          }\r\n\r\n          //  only update if changed\r\n          if (part.dataset.start === start && part.dataset.end === end) {\r\n            continue;\r\n          }\r\n          part.dataset.start = start;\r\n          part.dataset.end = end;\r\n\r\n          // set the percent based on the width of the progress bar (bufferedEnd)\r\n          part.style.left = percentify(start, bufferedEnd);\r\n          part.style.width = percentify(end - start, bufferedEnd);\r\n        }\r\n\r\n        // remove unused buffered range elements\r\n        for (let i = children.length; i > buffered.length; i--) {\r\n          this.el_.removeChild(children[i - 1]);\r\n        }\r\n        children.length = buffered.length;\r\n      });\r\n    }\r\n  }\r\n  Component$1.registerComponent('LoadProgressBar', LoadProgressBar);\r\n\r\n  /**\r\n   * @file time-tooltip.js\r\n   */\r\n\r\n  /** @import Player from '../../player' */\r\n\r\n  /**\r\n   * Time tooltips display a time above the progress bar.\r\n   *\r\n   * @extends Component\r\n   */\r\n  class TimeTooltip extends Component$1 {\r\n    /**\r\n     * Creates an instance of this class.\r\n     *\r\n     * @param {Player} player\r\n     *        The {@link Player} that this class should be attached to.\r\n     *\r\n     * @param {Object} [options]\r\n     *        The key/value store of player options.\r\n     */\r\n    constructor(player, options) {\r\n      super(player, options);\r\n      this.update = throttle(bind_(this, this.update), UPDATE_REFRESH_INTERVAL);\r\n    }\r\n\r\n    /**\r\n     * Create the time tooltip DOM element\r\n     *\r\n     * @return {Element}\r\n     *         The element that was created.\r\n     */\r\n    createEl() {\r\n      return super.createEl('div', {\r\n        className: 'vjs-time-tooltip'\r\n      }, {\r\n        'aria-hidden': 'true'\r\n      });\r\n    }\r\n\r\n    /**\r\n     * Updates the position of the time tooltip relative to the `SeekBar`.\r\n     *\r\n     * @param {Object} seekBarRect\r\n     *        The `ClientRect` for the {@link SeekBar} element.\r\n     *\r\n     * @param {number} seekBarPoint\r\n     *        A number from 0 to 1, representing a horizontal reference point\r\n     *        from the left edge of the {@link SeekBar}\r\n     */\r\n    update(seekBarRect, seekBarPoint, content) {\r\n      const tooltipRect = findPosition(this.el_);\r\n      const playerRect = getBoundingClientRect(this.player_.el());\r\n      const seekBarPointPx = seekBarRect.width * seekBarPoint;\r\n\r\n      // do nothing if either rect isn't available\r\n      // for example, if the player isn't in the DOM for testing\r\n      if (!playerRect || !tooltipRect) {\r\n        return;\r\n      }\r\n\r\n      // This is the space left of the `seekBarPoint` available within the bounds\r\n      // of the player. We calculate any gap between the left edge of the player\r\n      // and the left edge of the `SeekBar` and add the number of pixels in the\r\n      // `SeekBar` before hitting the `seekBarPoint`\r\n      let spaceLeftOfPoint = seekBarRect.left - playerRect.left + seekBarPointPx;\r\n\r\n      // This is the space right of the `seekBarPoint` available within the bounds\r\n      // of the player. We calculate the number of pixels from the `seekBarPoint`\r\n      // to the right edge of the `SeekBar` and add to that any gap between the\r\n      // right edge of the `SeekBar` and the player.\r\n      let spaceRightOfPoint = seekBarRect.width - seekBarPointPx + (playerRect.right - seekBarRect.right);\r\n\r\n      // spaceRightOfPoint is always NaN for mouse time display\r\n      // because the seekbarRect does not have a right property. This causes\r\n      // the mouse tool tip to be truncated when it's close to the right edge of the player.\r\n      // In such cases, we ignore the `playerRect.right - seekBarRect.right` value when calculating.\r\n      // For the sake of consistency, we ignore seekBarRect.left - playerRect.left for the left edge.\r\n      if (!spaceRightOfPoint) {\r\n        spaceRightOfPoint = seekBarRect.width - seekBarPointPx;\r\n        spaceLeftOfPoint = seekBarPointPx;\r\n      }\r\n      // This is the number of pixels by which the tooltip will need to be pulled\r\n      // further to the right to center it over the `seekBarPoint`.\r\n      let pullTooltipBy = tooltipRect.width / 2;\r\n\r\n      // Adjust the `pullTooltipBy` distance to the left or right depending on\r\n      // the results of the space calculations above.\r\n      if (spaceLeftOfPoint < pullTooltipBy) {\r\n        pullTooltipBy += pullTooltipBy - spaceLeftOfPoint;\r\n      } else if (spaceRightOfPoint < pullTooltipBy) {\r\n        pullTooltipBy = spaceRightOfPoint;\r\n      }\r\n\r\n      // Due to the imprecision of decimal/ratio based calculations and varying\r\n      // rounding behaviors, there are cases where the spacing adjustment is off\r\n      // by a pixel or two. This adds insurance to these calculations.\r\n      if (pullTooltipBy < 0) {\r\n        pullTooltipBy = 0;\r\n      } else if (pullTooltipBy > tooltipRect.width) {\r\n        pullTooltipBy = tooltipRect.width;\r\n      }\r\n\r\n      // prevent small width fluctuations within 0.4px from\r\n      // changing the value below.\r\n      // This really helps for live to prevent the play\r\n      // progress time tooltip from jittering\r\n      pullTooltipBy = Math.round(pullTooltipBy);\r\n      this.el_.style.right = `-${pullTooltipBy}px`;\r\n      this.write(content);\r\n    }\r\n\r\n    /**\r\n     * Write the time to the tooltip DOM element.\r\n     *\r\n     * @param {string} content\r\n     *        The formatted time for the tooltip.\r\n     */\r\n    write(content) {\r\n      textContent(this.el_, content);\r\n    }\r\n\r\n    /**\r\n     * Updates the position of the time tooltip relative to the `SeekBar`.\r\n     *\r\n     * @param {Object} seekBarRect\r\n     *        The `ClientRect` for the {@link SeekBar} element.\r\n     *\r\n     * @param {number} seekBarPoint\r\n     *        A number from 0 to 1, representing a horizontal reference point\r\n     *        from the left edge of the {@link SeekBar}\r\n     *\r\n     * @param {number} time\r\n     *        The time to update the tooltip to, not used during live playback\r\n     *\r\n     * @param {Function} cb\r\n     *        A function that will be called during the request animation frame\r\n     *        for tooltips that need to do additional animations from the default\r\n     */\r\n    updateTime(seekBarRect, seekBarPoint, time, cb) {\r\n      this.requestNamedAnimationFrame('TimeTooltip#updateTime', () => {\r\n        let content;\r\n        const duration = this.player_.duration();\r\n        if (this.player_.liveTracker && this.player_.liveTracker.isLive()) {\r\n          const liveWindow = this.player_.liveTracker.liveWindow();\r\n          const secondsBehind = liveWindow - seekBarPoint * liveWindow;\r\n          content = (secondsBehind < 1 ? '' : '-') + formatTime(secondsBehind, liveWindow);\r\n        } else {\r\n          content = formatTime(time, duration);\r\n        }\r\n        this.update(seekBarRect, seekBarPoint, content);\r\n        if (cb) {\r\n          cb();\r\n        }\r\n      });\r\n    }\r\n  }\r\n  Component$1.registerComponent('TimeTooltip', TimeTooltip);\r\n\r\n  /**\r\n   * @file play-progress-bar.js\r\n   */\r\n\r\n  /**\r\n   * Used by {@link SeekBar} to display media playback progress as part of the\r\n   * {@link ProgressControl}.\r\n   *\r\n   * @extends Component\r\n   */\r\n  class PlayProgressBar extends Component$1 {\r\n    /**\r\n     * Creates an instance of this class.\r\n     *\r\n     * @param {Player} player\r\n     *        The {@link Player} that this class should be attached to.\r\n     *\r\n     * @param {Object} [options]\r\n     *        The key/value store of player options.\r\n     */\r\n    constructor(player, options) {\r\n      super(player, options);\r\n      this.setIcon('circle');\r\n      this.update = throttle(bind_(this, this.update), UPDATE_REFRESH_INTERVAL);\r\n    }\r\n\r\n    /**\r\n     * Create the the DOM element for this class.\r\n     *\r\n     * @return {Element}\r\n     *         The element that was created.\r\n     */\r\n    createEl() {\r\n      return super.createEl('div', {\r\n        className: 'vjs-play-progress vjs-slider-bar'\r\n      }, {\r\n        'aria-hidden': 'true'\r\n      });\r\n    }\r\n\r\n    /**\r\n     * Enqueues updates to its own DOM as well as the DOM of its\r\n     * {@link TimeTooltip} child.\r\n     *\r\n     * @param {Object} seekBarRect\r\n     *        The `ClientRect` for the {@link SeekBar} element.\r\n     *\r\n     * @param {number} seekBarPoint\r\n     *        A number from 0 to 1, representing a horizontal reference point\r\n     *        from the left edge of the {@link SeekBar}\r\n     */\r\n    update(seekBarRect, seekBarPoint) {\r\n      const timeTooltip = this.getChild('timeTooltip');\r\n      if (!timeTooltip) {\r\n        return;\r\n      }\r\n      const time = this.player_.scrubbing() ? this.player_.getCache().currentTime : this.player_.currentTime();\r\n      timeTooltip.updateTime(seekBarRect, seekBarPoint, time);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Default options for {@link PlayProgressBar}.\r\n   *\r\n   * @type {Object}\r\n   * @private\r\n   */\r\n  PlayProgressBar.prototype.options_ = {\r\n    children: []\r\n  };\r\n\r\n  // Time tooltips should not be added to a player on mobile devices\r\n  if (!IS_IOS && !IS_ANDROID) {\r\n    PlayProgressBar.prototype.options_.children.push('timeTooltip');\r\n  }\r\n  Component$1.registerComponent('PlayProgressBar', PlayProgressBar);\r\n\r\n  /**\r\n   * @file mouse-time-display.js\r\n   */\r\n\r\n  /**\r\n   * The {@link MouseTimeDisplay} component tracks mouse movement over the\r\n   * {@link ProgressControl}. It displays an indicator and a {@link TimeTooltip}\r\n   * indicating the time which is represented by a given point in the\r\n   * {@link ProgressControl}.\r\n   *\r\n   * @extends Component\r\n   */\r\n  class MouseTimeDisplay extends Component$1 {\r\n    /**\r\n     * Creates an instance of this class.\r\n     *\r\n     * @param {Player} player\r\n     *        The {@link Player} that this class should be attached to.\r\n     *\r\n     * @param {Object} [options]\r\n     *        The key/value store of player options.\r\n     */\r\n    constructor(player, options) {\r\n      super(player, options);\r\n      this.update = throttle(bind_(this, this.update), UPDATE_REFRESH_INTERVAL);\r\n    }\r\n\r\n    /**\r\n     * Create the DOM element for this class.\r\n     *\r\n     * @return {Element}\r\n     *         The element that was created.\r\n     */\r\n    createEl() {\r\n      return super.createEl('div', {\r\n        className: 'vjs-mouse-display'\r\n      });\r\n    }\r\n\r\n    /**\r\n     * Enqueues updates to its own DOM as well as the DOM of its\r\n     * {@link TimeTooltip} child.\r\n     *\r\n     * @param {Object} seekBarRect\r\n     *        The `ClientRect` for the {@link SeekBar} element.\r\n     *\r\n     * @param {number} seekBarPoint\r\n     *        A number from 0 to 1, representing a horizontal reference point\r\n     *        from the left edge of the {@link SeekBar}\r\n     */\r\n    update(seekBarRect, seekBarPoint) {\r\n      const time = seekBarPoint * this.player_.duration();\r\n      this.getChild('timeTooltip').updateTime(seekBarRect, seekBarPoint, time, () => {\r\n        this.el_.style.left = `${seekBarRect.width * seekBarPoint}px`;\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Default options for `MouseTimeDisplay`\r\n   *\r\n   * @type {Object}\r\n   * @private\r\n   */\r\n  MouseTimeDisplay.prototype.options_ = {\r\n    children: ['timeTooltip']\r\n  };\r\n  Component$1.registerComponent('MouseTimeDisplay', MouseTimeDisplay);\r\n\r\n  /**\r\n   * @file seek-bar.js\r\n   */\r\n\r\n  // The number of seconds the `step*` functions move the timeline.\r\n  const STEP_SECONDS = 5;\r\n\r\n  // The multiplier of STEP_SECONDS that PgUp/PgDown move the timeline.\r\n  const PAGE_KEY_MULTIPLIER = 12;\r\n\r\n  /**\r\n   * Seek bar and container for the progress bars. Uses {@link PlayProgressBar}\r\n   * as its `bar`.\r\n   *\r\n   * @extends Slider\r\n   */\r\n  class SeekBar extends Slider {\r\n    /**\r\n     * Creates an instance of this class.\r\n     *\r\n     * @param {Player} player\r\n     *        The `Player` that this class should be attached to.\r\n     *\r\n     * @param {Object} [options]\r\n     *        The key/value store of player options.\r\n     */\r\n    constructor(player, options) {\r\n      options = merge$2(SeekBar.prototype.options_, options);\r\n\r\n      // Avoid mutating the prototype's `children` array by creating a copy\r\n      options.children = [...options.children];\r\n      const shouldDisableSeekWhileScrubbingOnMobile = player.options_.disableSeekWhileScrubbingOnMobile && (IS_IOS || IS_ANDROID);\r\n\r\n      // Add the TimeTooltip as a child if we are on desktop, or on mobile with `disableSeekWhileScrubbingOnMobile: true`\r\n      if (!IS_IOS && !IS_ANDROID || shouldDisableSeekWhileScrubbingOnMobile) {\r\n        options.children.splice(1, 0, 'mouseTimeDisplay');\r\n      }\r\n      super(player, options);\r\n      this.shouldDisableSeekWhileScrubbingOnMobile_ = shouldDisableSeekWhileScrubbingOnMobile;\r\n      this.pendingSeekTime_ = null;\r\n      this.setEventHandlers_();\r\n    }\r\n\r\n    /**\r\n     * Sets the event handlers\r\n     *\r\n     * @private\r\n     */\r\n    setEventHandlers_() {\r\n      this.update_ = bind_(this, this.update);\r\n      this.update = throttle(this.update_, UPDATE_REFRESH_INTERVAL);\r\n      this.on(this.player_, ['durationchange', 'timeupdate'], this.update);\r\n      this.on(this.player_, ['ended'], this.update_);\r\n      if (this.player_.liveTracker) {\r\n        this.on(this.player_.liveTracker, 'liveedgechange', this.update);\r\n      }\r\n\r\n      // when playing, let's ensure we smoothly update the play progress bar\r\n      // via an interval\r\n      this.updateInterval = null;\r\n      this.enableIntervalHandler_ = e => this.enableInterval_(e);\r\n      this.disableIntervalHandler_ = e => this.disableInterval_(e);\r\n      this.on(this.player_, ['playing'], this.enableIntervalHandler_);\r\n      this.on(this.player_, ['ended', 'pause', 'waiting'], this.disableIntervalHandler_);\r\n\r\n      // we don't need to update the play progress if the document is hidden,\r\n      // also, this causes the CPU to spike and eventually crash the page on IE11.\r\n      if ('hidden' in document && 'visibilityState' in document) {\r\n        this.on(document, 'visibilitychange', this.toggleVisibility_);\r\n      }\r\n    }\r\n    toggleVisibility_(e) {\r\n      if (document.visibilityState === 'hidden') {\r\n        this.cancelNamedAnimationFrame('SeekBar#update');\r\n        this.cancelNamedAnimationFrame('Slider#update');\r\n        this.disableInterval_(e);\r\n      } else {\r\n        if (!this.player_.ended() && !this.player_.paused()) {\r\n          this.enableInterval_();\r\n        }\r\n\r\n        // we just switched back to the page and someone may be looking, so, update ASAP\r\n        this.update();\r\n      }\r\n    }\r\n    enableInterval_() {\r\n      if (this.updateInterval) {\r\n        return;\r\n      }\r\n      this.updateInterval = this.setInterval(this.update, UPDATE_REFRESH_INTERVAL);\r\n    }\r\n    disableInterval_(e) {\r\n      if (this.player_.liveTracker && this.player_.liveTracker.isLive() && e && e.type !== 'ended') {\r\n        return;\r\n      }\r\n      if (!this.updateInterval) {\r\n        return;\r\n      }\r\n      this.clearInterval(this.updateInterval);\r\n      this.updateInterval = null;\r\n    }\r\n\r\n    /**\r\n     * Create the `Component`'s DOM element\r\n     *\r\n     * @return {Element}\r\n     *         The element that was created.\r\n     */\r\n    createEl() {\r\n      return super.createEl('div', {\r\n        className: 'vjs-progress-holder'\r\n      }, {\r\n        'aria-label': this.localize('Progress Bar')\r\n      });\r\n    }\r\n\r\n    /**\r\n     * This function updates the play progress bar and accessibility\r\n     * attributes to whatever is passed in.\r\n     *\r\n     * @param {Event} [event]\r\n     *        The `timeupdate` or `ended` event that caused this to run.\r\n     *\r\n     * @listens Player#timeupdate\r\n     *\r\n     * @return {number}\r\n     *          The current percent at a number from 0-1\r\n     */\r\n    update(event) {\r\n      // ignore updates while the tab is hidden\r\n      if (document.visibilityState === 'hidden') {\r\n        return;\r\n      }\r\n      const percent = super.update();\r\n      this.requestNamedAnimationFrame('SeekBar#update', () => {\r\n        const currentTime = this.player_.ended() ? this.player_.duration() : this.getCurrentTime_();\r\n        const liveTracker = this.player_.liveTracker;\r\n        let duration = this.player_.duration();\r\n        if (liveTracker && liveTracker.isLive()) {\r\n          duration = this.player_.liveTracker.liveCurrentTime();\r\n        }\r\n        if (this.percent_ !== percent) {\r\n          // machine readable value of progress bar (percentage complete)\r\n          this.el_.setAttribute('aria-valuenow', (percent * 100).toFixed(2));\r\n          this.percent_ = percent;\r\n        }\r\n        if (this.currentTime_ !== currentTime || this.duration_ !== duration) {\r\n          // human readable value of progress bar (time complete)\r\n          this.el_.setAttribute('aria-valuetext', this.localize('progress bar timing: currentTime={1} duration={2}', [formatTime(currentTime, duration), formatTime(duration, duration)], '{1} of {2}'));\r\n          this.currentTime_ = currentTime;\r\n          this.duration_ = duration;\r\n        }\r\n\r\n        // update the progress bar time tooltip with the current time\r\n        if (this.bar) {\r\n          this.bar.update(getBoundingClientRect(this.el()), this.getProgress());\r\n        }\r\n      });\r\n      return percent;\r\n    }\r\n\r\n    /**\r\n     * Prevent liveThreshold from causing seeks to seem like they\r\n     * are not happening from a user perspective.\r\n     *\r\n     * @param {number} ct\r\n     *        current time to seek to\r\n     */\r\n    userSeek_(ct) {\r\n      if (this.player_.liveTracker && this.player_.liveTracker.isLive()) {\r\n        this.player_.liveTracker.nextSeekedFromUser();\r\n      }\r\n      this.player_.currentTime(ct);\r\n    }\r\n\r\n    /**\r\n     * Get the value of current time but allows for smooth scrubbing,\r\n     * when player can't keep up.\r\n     *\r\n     * @return {number}\r\n     *         The current time value to display\r\n     *\r\n     * @private\r\n     */\r\n    getCurrentTime_() {\r\n      return this.player_.scrubbing() ? this.player_.getCache().currentTime : this.player_.currentTime();\r\n    }\r\n\r\n    /**\r\n     * Get the percentage of media played so far.\r\n     *\r\n     * @return {number}\r\n     *         The percentage of media played so far (0 to 1).\r\n     */\r\n    getPercent() {\r\n      // If we have a pending seek time, we are scrubbing on mobile and should set the slider percent\r\n      // to reflect the current scrub location.\r\n      if (this.pendingSeekTime_) {\r\n        return this.pendingSeekTime_ / this.player_.duration();\r\n      }\r\n      const currentTime = this.getCurrentTime_();\r\n      let percent;\r\n      const liveTracker = this.player_.liveTracker;\r\n      if (liveTracker && liveTracker.isLive()) {\r\n        percent = (currentTime - liveTracker.seekableStart()) / liveTracker.liveWindow();\r\n\r\n        // prevent the percent from changing at the live edge\r\n        if (liveTracker.atLiveEdge()) {\r\n          percent = 1;\r\n        }\r\n      } else {\r\n        percent = currentTime / this.player_.duration();\r\n      }\r\n      return percent;\r\n    }\r\n\r\n    /**\r\n     * Handle mouse down on seek bar\r\n     *\r\n     * @param {MouseEvent} event\r\n     *        The `mousedown` event that caused this to run.\r\n     *\r\n     * @listens mousedown\r\n     */\r\n    handleMouseDown(event) {\r\n      if (!isSingleLeftClick(event)) {\r\n        return;\r\n      }\r\n\r\n      // Stop event propagation to prevent double fire in progress-control.js\r\n      event.stopPropagation();\r\n      this.videoWasPlaying = !this.player_.paused();\r\n\r\n      // Don't pause if we are on mobile and `disableSeekWhileScrubbingOnMobile: true`.\r\n      // In that case, playback should continue while the player scrubs to a new location.\r\n      if (!this.shouldDisableSeekWhileScrubbingOnMobile_) {\r\n        this.player_.pause();\r\n      }\r\n      super.handleMouseDown(event);\r\n    }\r\n\r\n    /**\r\n     * Handle mouse move on seek bar\r\n     *\r\n     * @param {MouseEvent} event\r\n     *        The `mousemove` event that caused this to run.\r\n     * @param {boolean} mouseDown this is a flag that should be set to true if `handleMouseMove` is called directly. It allows us to skip things that should not happen if coming from mouse down but should happen on regular mouse move handler. Defaults to false\r\n     *\r\n     * @listens mousemove\r\n     */\r\n    handleMouseMove(event, mouseDown = false) {\r\n      if (!isSingleLeftClick(event) || isNaN(this.player_.duration())) {\r\n        return;\r\n      }\r\n      if (!mouseDown && !this.player_.scrubbing()) {\r\n        this.player_.scrubbing(true);\r\n      }\r\n      let newTime;\r\n      const distance = this.calculateDistance(event);\r\n      const liveTracker = this.player_.liveTracker;\r\n      if (!liveTracker || !liveTracker.isLive()) {\r\n        newTime = distance * this.player_.duration();\r\n\r\n        // Don't let video end while scrubbing.\r\n        if (newTime === this.player_.duration()) {\r\n          newTime = newTime - 0.1;\r\n        }\r\n      } else {\r\n        if (distance >= 0.99) {\r\n          liveTracker.seekToLiveEdge();\r\n          return;\r\n        }\r\n        const seekableStart = liveTracker.seekableStart();\r\n        const seekableEnd = liveTracker.liveCurrentTime();\r\n        newTime = seekableStart + distance * liveTracker.liveWindow();\r\n\r\n        // Don't let video end while scrubbing.\r\n        if (newTime >= seekableEnd) {\r\n          newTime = seekableEnd;\r\n        }\r\n\r\n        // Compensate for precision differences so that currentTime is not less\r\n        // than seekable start\r\n        if (newTime <= seekableStart) {\r\n          newTime = seekableStart + 0.1;\r\n        }\r\n\r\n        // On android seekableEnd can be Infinity sometimes,\r\n        // this will cause newTime to be Infinity, which is\r\n        // not a valid currentTime.\r\n        if (newTime === Infinity) {\r\n          return;\r\n        }\r\n      }\r\n\r\n      // if on mobile and `disableSeekWhileScrubbingOnMobile: true`, keep track of the desired seek point but we won't initiate the seek until 'touchend'\r\n      if (this.shouldDisableSeekWhileScrubbingOnMobile_) {\r\n        this.pendingSeekTime_ = newTime;\r\n      } else {\r\n        this.userSeek_(newTime);\r\n      }\r\n      if (this.player_.options_.enableSmoothSeeking) {\r\n        this.update();\r\n      }\r\n    }\r\n    enable() {\r\n      super.enable();\r\n      const mouseTimeDisplay = this.getChild('mouseTimeDisplay');\r\n      if (!mouseTimeDisplay) {\r\n        return;\r\n      }\r\n      mouseTimeDisplay.show();\r\n    }\r\n    disable() {\r\n      super.disable();\r\n      const mouseTimeDisplay = this.getChild('mouseTimeDisplay');\r\n      if (!mouseTimeDisplay) {\r\n        return;\r\n      }\r\n      mouseTimeDisplay.hide();\r\n    }\r\n\r\n    /**\r\n     * Handle mouse up on seek bar\r\n     *\r\n     * @param {MouseEvent} event\r\n     *        The `mouseup` event that caused this to run.\r\n     *\r\n     * @listens mouseup\r\n     */\r\n    handleMouseUp(event) {\r\n      super.handleMouseUp(event);\r\n\r\n      // Stop event propagation to prevent double fire in progress-control.js\r\n      if (event) {\r\n        event.stopPropagation();\r\n      }\r\n      this.player_.scrubbing(false);\r\n\r\n      // If we have a pending seek time, then we have finished scrubbing on mobile and should initiate a seek.\r\n      if (this.pendingSeekTime_) {\r\n        this.userSeek_(this.pendingSeekTime_);\r\n        this.pendingSeekTime_ = null;\r\n      }\r\n\r\n      /**\r\n       * Trigger timeupdate because we're done seeking and the time has changed.\r\n       * This is particularly useful for if the player is paused to time the time displays.\r\n       *\r\n       * @event Tech#timeupdate\r\n       * @type {Event}\r\n       */\r\n      this.player_.trigger({\r\n        type: 'timeupdate',\r\n        target: this,\r\n        manuallyTriggered: true\r\n      });\r\n      if (this.videoWasPlaying) {\r\n        silencePromise(this.player_.play());\r\n      } else {\r\n        // We're done seeking and the time has changed.\r\n        // If the player is paused, make sure we display the correct time on the seek bar.\r\n        this.update_();\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Move more quickly fast forward for keyboard-only users\r\n     */\r\n    stepForward() {\r\n      this.userSeek_(this.player_.currentTime() + STEP_SECONDS);\r\n    }\r\n\r\n    /**\r\n     * Move more quickly rewind for keyboard-only users\r\n     */\r\n    stepBack() {\r\n      this.userSeek_(this.player_.currentTime() - STEP_SECONDS);\r\n    }\r\n\r\n    /**\r\n     * Toggles the playback state of the player\r\n     * This gets called when enter or space is used on the seekbar\r\n     *\r\n     * @param {KeyboardEvent} event\r\n     *        The `keydown` event that caused this function to be called\r\n     *\r\n     */\r\n    handleAction(event) {\r\n      if (this.player_.paused()) {\r\n        this.player_.play();\r\n      } else {\r\n        this.player_.pause();\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Called when this SeekBar has focus and a key gets pressed down.\r\n     * Supports the following keys:\r\n     *\r\n     *   Space or Enter key fire a click event\r\n     *   Home key moves to start of the timeline\r\n     *   End key moves to end of the timeline\r\n     *   Digit \"0\" through \"9\" keys move to 0%, 10% ... 80%, 90% of the timeline\r\n     *   PageDown key moves back a larger step than ArrowDown\r\n     *   PageUp key moves forward a large step\r\n     *\r\n     * @param {KeyboardEvent} event\r\n     *        The `keydown` event that caused this function to be called.\r\n     *\r\n     * @listens keydown\r\n     */\r\n    handleKeyDown(event) {\r\n      const liveTracker = this.player_.liveTracker;\r\n      if (event.key === ' ' || event.key === 'Enter') {\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n        this.handleAction(event);\r\n      } else if (event.key === 'Home') {\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n        this.userSeek_(0);\r\n      } else if (event.key === 'End') {\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n        if (liveTracker && liveTracker.isLive()) {\r\n          this.userSeek_(liveTracker.liveCurrentTime());\r\n        } else {\r\n          this.userSeek_(this.player_.duration());\r\n        }\r\n      } else if (/^[0-9]$/.test(event.key)) {\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n        const gotoFraction = parseInt(event.key, 10) * 0.1;\r\n        if (liveTracker && liveTracker.isLive()) {\r\n          this.userSeek_(liveTracker.seekableStart() + liveTracker.liveWindow() * gotoFraction);\r\n        } else {\r\n          this.userSeek_(this.player_.duration() * gotoFraction);\r\n        }\r\n      } else if (event.key === 'PageDown') {\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n        this.userSeek_(this.player_.currentTime() - STEP_SECONDS * PAGE_KEY_MULTIPLIER);\r\n      } else if (event.key === 'PageUp') {\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n        this.userSeek_(this.player_.currentTime() + STEP_SECONDS * PAGE_KEY_MULTIPLIER);\r\n      } else {\r\n        // Pass keydown handling up for unsupported keys\r\n        super.handleKeyDown(event);\r\n      }\r\n    }\r\n    dispose() {\r\n      this.disableInterval_();\r\n      this.off(this.player_, ['durationchange', 'timeupdate'], this.update);\r\n      this.off(this.player_, ['ended'], this.update_);\r\n      if (this.player_.liveTracker) {\r\n        this.off(this.player_.liveTracker, 'liveedgechange', this.update);\r\n      }\r\n      this.off(this.player_, ['playing'], this.enableIntervalHandler_);\r\n      this.off(this.player_, ['ended', 'pause', 'waiting'], this.disableIntervalHandler_);\r\n\r\n      // we don't need to update the play progress if the document is hidden,\r\n      // also, this causes the CPU to spike and eventually crash the page on IE11.\r\n      if ('hidden' in document && 'visibilityState' in document) {\r\n        this.off(document, 'visibilitychange', this.toggleVisibility_);\r\n      }\r\n      super.dispose();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Default options for the `SeekBar`\r\n   *\r\n   * @type {Object}\r\n   * @private\r\n   */\r\n  SeekBar.prototype.options_ = {\r\n    children: ['loadProgressBar', 'playProgressBar'],\r\n    barName: 'playProgressBar'\r\n  };\r\n  Component$1.registerComponent('SeekBar', SeekBar);\r\n\r\n  /**\r\n   * @file progress-control.js\r\n   */\r\n\r\n  /**\r\n   * The Progress Control component contains the seek bar, load progress,\r\n   * and play progress.\r\n   *\r\n   * @extends Component\r\n   */\r\n  class ProgressControl extends Component$1 {\r\n    /**\r\n     * Creates an instance of this class.\r\n     *\r\n     * @param {Player} player\r\n     *        The `Player` that this class should be attached to.\r\n     *\r\n     * @param {Object} [options]\r\n     *        The key/value store of player options.\r\n     */\r\n    constructor(player, options) {\r\n      super(player, options);\r\n      this.handleMouseMove = throttle(bind_(this, this.handleMouseMove), UPDATE_REFRESH_INTERVAL);\r\n      this.throttledHandleMouseSeek = throttle(bind_(this, this.handleMouseSeek), UPDATE_REFRESH_INTERVAL);\r\n      this.handleMouseUpHandler_ = e => this.handleMouseUp(e);\r\n      this.handleMouseDownHandler_ = e => this.handleMouseDown(e);\r\n      this.enable();\r\n    }\r\n\r\n    /**\r\n     * Create the `Component`'s DOM element\r\n     *\r\n     * @return {Element}\r\n     *         The element that was created.\r\n     */\r\n    createEl() {\r\n      return super.createEl('div', {\r\n        className: 'vjs-progress-control vjs-control'\r\n      });\r\n    }\r\n\r\n    /**\r\n     * When the mouse moves over the `ProgressControl`, the pointer position\r\n     * gets passed down to the `MouseTimeDisplay` component.\r\n     *\r\n     * @param {Event} event\r\n     *        The `mousemove` event that caused this function to run.\r\n     *\r\n     * @listen mousemove\r\n     */\r\n    handleMouseMove(event) {\r\n      const seekBar = this.getChild('seekBar');\r\n      if (!seekBar) {\r\n        return;\r\n      }\r\n      const playProgressBar = seekBar.getChild('playProgressBar');\r\n      const mouseTimeDisplay = seekBar.getChild('mouseTimeDisplay');\r\n      if (!playProgressBar && !mouseTimeDisplay) {\r\n        return;\r\n      }\r\n      const seekBarEl = seekBar.el();\r\n      const seekBarRect = findPosition(seekBarEl);\r\n      let seekBarPoint = getPointerPosition(seekBarEl, event).x;\r\n\r\n      // The default skin has a gap on either side of the `SeekBar`. This means\r\n      // that it's possible to trigger this behavior outside the boundaries of\r\n      // the `SeekBar`. This ensures we stay within it at all times.\r\n      seekBarPoint = clamp(seekBarPoint, 0, 1);\r\n      if (mouseTimeDisplay) {\r\n        mouseTimeDisplay.update(seekBarRect, seekBarPoint);\r\n      }\r\n      if (playProgressBar) {\r\n        playProgressBar.update(seekBarRect, seekBar.getProgress());\r\n      }\r\n    }\r\n\r\n    /**\r\n     * A throttled version of the {@link ProgressControl#handleMouseSeek} listener.\r\n     *\r\n     * @method ProgressControl#throttledHandleMouseSeek\r\n     * @param {Event} event\r\n     *        The `mousemove` event that caused this function to run.\r\n     *\r\n     * @listen mousemove\r\n     * @listen touchmove\r\n     */\r\n\r\n    /**\r\n     * Handle `mousemove` or `touchmove` events on the `ProgressControl`.\r\n     *\r\n     * @param {Event} event\r\n     *        `mousedown` or `touchstart` event that triggered this function\r\n     *\r\n     * @listens mousemove\r\n     * @listens touchmove\r\n     */\r\n    handleMouseSeek(event) {\r\n      const seekBar = this.getChild('seekBar');\r\n      if (seekBar) {\r\n        seekBar.handleMouseMove(event);\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Are controls are currently enabled for this progress control.\r\n     *\r\n     * @return {boolean}\r\n     *         true if controls are enabled, false otherwise\r\n     */\r\n    enabled() {\r\n      return this.enabled_;\r\n    }\r\n\r\n    /**\r\n     * Disable all controls on the progress control and its children\r\n     */\r\n    disable() {\r\n      this.children().forEach(child => child.disable && child.disable());\r\n      if (!this.enabled()) {\r\n        return;\r\n      }\r\n      this.off(['mousedown', 'touchstart'], this.handleMouseDownHandler_);\r\n      this.off(this.el_, ['mousemove', 'touchmove'], this.handleMouseMove);\r\n      this.removeListenersAddedOnMousedownAndTouchstart();\r\n      this.addClass('disabled');\r\n      this.enabled_ = false;\r\n\r\n      // Restore normal playback state if controls are disabled while scrubbing\r\n      if (this.player_.scrubbing()) {\r\n        const seekBar = this.getChild('seekBar');\r\n        this.player_.scrubbing(false);\r\n        if (seekBar.videoWasPlaying) {\r\n          silencePromise(this.player_.play());\r\n        }\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Enable all controls on the progress control and its children\r\n     */\r\n    enable() {\r\n      this.children().forEach(child => child.enable && child.enable());\r\n      if (this.enabled()) {\r\n        return;\r\n      }\r\n      this.on(['mousedown', 'touchstart'], this.handleMouseDownHandler_);\r\n      this.on(this.el_, ['mousemove', 'touchmove'], this.handleMouseMove);\r\n      this.removeClass('disabled');\r\n      this.enabled_ = true;\r\n    }\r\n\r\n    /**\r\n     * Cleanup listeners after the user finishes interacting with the progress controls\r\n     */\r\n    removeListenersAddedOnMousedownAndTouchstart() {\r\n      const doc = this.el_.ownerDocument;\r\n      this.off(doc, 'mousemove', this.throttledHandleMouseSeek);\r\n      this.off(doc, 'touchmove', this.throttledHandleMouseSeek);\r\n      this.off(doc, 'mouseup', this.handleMouseUpHandler_);\r\n      this.off(doc, 'touchend', this.handleMouseUpHandler_);\r\n    }\r\n\r\n    /**\r\n     * Handle `mousedown` or `touchstart` events on the `ProgressControl`.\r\n     *\r\n     * @param {Event} event\r\n     *        `mousedown` or `touchstart` event that triggered this function\r\n     *\r\n     * @listens mousedown\r\n     * @listens touchstart\r\n     */\r\n    handleMouseDown(event) {\r\n      const doc = this.el_.ownerDocument;\r\n      const seekBar = this.getChild('seekBar');\r\n      if (seekBar) {\r\n        seekBar.handleMouseDown(event);\r\n      }\r\n      this.on(doc, 'mousemove', this.throttledHandleMouseSeek);\r\n      this.on(doc, 'touchmove', this.throttledHandleMouseSeek);\r\n      this.on(doc, 'mouseup', this.handleMouseUpHandler_);\r\n      this.on(doc, 'touchend', this.handleMouseUpHandler_);\r\n    }\r\n\r\n    /**\r\n     * Handle `mouseup` or `touchend` events on the `ProgressControl`.\r\n     *\r\n     * @param {Event} event\r\n     *        `mouseup` or `touchend` event that triggered this function.\r\n     *\r\n     * @listens touchend\r\n     * @listens mouseup\r\n     */\r\n    handleMouseUp(event) {\r\n      const seekBar = this.getChild('seekBar');\r\n      if (seekBar) {\r\n        seekBar.handleMouseUp(event);\r\n      }\r\n      this.removeListenersAddedOnMousedownAndTouchstart();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Default options for `ProgressControl`\r\n   *\r\n   * @type {Object}\r\n   * @private\r\n   */\r\n  ProgressControl.prototype.options_ = {\r\n    children: ['seekBar']\r\n  };\r\n  Component$1.registerComponent('ProgressControl', ProgressControl);\r\n\r\n  /**\r\n   * @file picture-in-picture-toggle.js\r\n   */\r\n\r\n  /** @import Player from './player' */\r\n\r\n  /**\r\n   * Toggle Picture-in-Picture mode\r\n   *\r\n   * @extends Button\r\n   */\r\n  class PictureInPictureToggle extends Button {\r\n    /**\r\n     * Creates an instance of this class.\r\n     *\r\n     * @param {Player} player\r\n     *        The `Player` that this class should be attached to.\r\n     *\r\n     * @param {Object} [options]\r\n     *        The key/value store of player options.\r\n     *\r\n     * @listens Player#enterpictureinpicture\r\n     * @listens Player#leavepictureinpicture\r\n     */\r\n    constructor(player, options) {\r\n      super(player, options);\r\n      this.setIcon('picture-in-picture-enter');\r\n      this.on(player, ['enterpictureinpicture', 'leavepictureinpicture'], e => this.handlePictureInPictureChange(e));\r\n      this.on(player, ['disablepictureinpicturechanged', 'loadedmetadata'], e => this.handlePictureInPictureEnabledChange(e));\r\n      this.on(player, ['loadedmetadata', 'audioonlymodechange', 'audiopostermodechange'], () => this.handlePictureInPictureAudioModeChange());\r\n\r\n      // TODO: Deactivate button on player emptied event.\r\n      this.disable();\r\n    }\r\n\r\n    /**\r\n     * Builds the default DOM `className`.\r\n     *\r\n     * @return {string}\r\n     *         The DOM `className` for this object.\r\n     */\r\n    buildCSSClass() {\r\n      return `vjs-picture-in-picture-control vjs-hidden ${super.buildCSSClass()}`;\r\n    }\r\n\r\n    /**\r\n     * Displays or hides the button depending on the audio mode detection.\r\n     * Exits picture-in-picture if it is enabled when switching to audio mode.\r\n     */\r\n    handlePictureInPictureAudioModeChange() {\r\n      // This audio detection will not detect HLS or DASH audio-only streams because there was no reliable way to detect them at the time\r\n      const isSourceAudio = this.player_.currentType().substring(0, 5) === 'audio';\r\n      const isAudioMode = isSourceAudio || this.player_.audioPosterMode() || this.player_.audioOnlyMode();\r\n      if (!isAudioMode) {\r\n        this.show();\r\n        return;\r\n      }\r\n      if (this.player_.isInPictureInPicture()) {\r\n        this.player_.exitPictureInPicture();\r\n      }\r\n      this.hide();\r\n    }\r\n\r\n    /**\r\n     * Enables or disables button based on availability of a Picture-In-Picture mode.\r\n     *\r\n     * Enabled if\r\n     * - `player.options().enableDocumentPictureInPicture` is true and\r\n     *   window.documentPictureInPicture is available; or\r\n     * - `player.disablePictureInPicture()` is false and\r\n     *   element.requestPictureInPicture is available\r\n     */\r\n    handlePictureInPictureEnabledChange() {\r\n      if (document.pictureInPictureEnabled && this.player_.disablePictureInPicture() === false || this.player_.options_.enableDocumentPictureInPicture && 'documentPictureInPicture' in window) {\r\n        this.enable();\r\n      } else {\r\n        this.disable();\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Handles enterpictureinpicture and leavepictureinpicture on the player and change control text accordingly.\r\n     *\r\n     * @param {Event} [event]\r\n     *        The {@link Player#enterpictureinpicture} or {@link Player#leavepictureinpicture} event that caused this function to be\r\n     *        called.\r\n     *\r\n     * @listens Player#enterpictureinpicture\r\n     * @listens Player#leavepictureinpicture\r\n     */\r\n    handlePictureInPictureChange(event) {\r\n      if (this.player_.isInPictureInPicture()) {\r\n        this.setIcon('picture-in-picture-exit');\r\n        this.controlText('Exit Picture-in-Picture');\r\n      } else {\r\n        this.setIcon('picture-in-picture-enter');\r\n        this.controlText('Picture-in-Picture');\r\n      }\r\n      this.handlePictureInPictureEnabledChange();\r\n    }\r\n\r\n    /**\r\n     * This gets called when an `PictureInPictureToggle` is \"clicked\". See\r\n     * {@link ClickableComponent} for more detailed information on what a click can be.\r\n     *\r\n     * @param {Event} [event]\r\n     *        The `keydown`, `tap`, or `click` event that caused this function to be\r\n     *        called.\r\n     *\r\n     * @listens tap\r\n     * @listens click\r\n     */\r\n    handleClick(event) {\r\n      if (!this.player_.isInPictureInPicture()) {\r\n        this.player_.requestPictureInPicture();\r\n      } else {\r\n        this.player_.exitPictureInPicture();\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Show the `Component`s element if it is hidden by removing the\r\n     * 'vjs-hidden' class name from it only in browsers that support the Picture-in-Picture API.\r\n     */\r\n    show() {\r\n      // Does not allow to display the pictureInPictureToggle in browsers that do not support the Picture-in-Picture API, e.g. Firefox.\r\n      if (typeof document.exitPictureInPicture !== 'function') {\r\n        return;\r\n      }\r\n      super.show();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * The text that should display over the `PictureInPictureToggle`s controls. Added for localization.\r\n   *\r\n   * @type {string}\r\n   * @protected\r\n   */\r\n  PictureInPictureToggle.prototype.controlText_ = 'Picture-in-Picture';\r\n  Component$1.registerComponent('PictureInPictureToggle', PictureInPictureToggle);\r\n\r\n  /**\r\n   * @file fullscreen-toggle.js\r\n   */\r\n\r\n  /** @import Player from './player' */\r\n\r\n  /**\r\n   * Toggle fullscreen video\r\n   *\r\n   * @extends Button\r\n   */\r\n  class FullscreenToggle extends Button {\r\n    /**\r\n     * Creates an instance of this class.\r\n     *\r\n     * @param {Player} player\r\n     *        The `Player` that this class should be attached to.\r\n     *\r\n     * @param {Object} [options]\r\n     *        The key/value store of player options.\r\n     */\r\n    constructor(player, options) {\r\n      super(player, options);\r\n      this.setIcon('fullscreen-enter');\r\n      this.on(player, 'fullscreenchange', e => this.handleFullscreenChange(e));\r\n      if (document[player.fsApi_.fullscreenEnabled] === false) {\r\n        this.disable();\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Builds the default DOM `className`.\r\n     *\r\n     * @return {string}\r\n     *         The DOM `className` for this object.\r\n     */\r\n    buildCSSClass() {\r\n      return `vjs-fullscreen-control ${super.buildCSSClass()}`;\r\n    }\r\n\r\n    /**\r\n     * Handles fullscreenchange on the player and change control text accordingly.\r\n     *\r\n     * @param {Event} [event]\r\n     *        The {@link Player#fullscreenchange} event that caused this function to be\r\n     *        called.\r\n     *\r\n     * @listens Player#fullscreenchange\r\n     */\r\n    handleFullscreenChange(event) {\r\n      if (this.player_.isFullscreen()) {\r\n        this.controlText('Exit Fullscreen');\r\n        this.setIcon('fullscreen-exit');\r\n      } else {\r\n        this.controlText('Fullscreen');\r\n        this.setIcon('fullscreen-enter');\r\n      }\r\n    }\r\n\r\n    /**\r\n     * This gets called when an `FullscreenToggle` is \"clicked\". See\r\n     * {@link ClickableComponent} for more detailed information on what a click can be.\r\n     *\r\n     * @param {Event} [event]\r\n     *        The `keydown`, `tap`, or `click` event that caused this function to be\r\n     *        called.\r\n     *\r\n     * @listens tap\r\n     * @listens click\r\n     */\r\n    handleClick(event) {\r\n      if (!this.player_.isFullscreen()) {\r\n        this.player_.requestFullscreen();\r\n      } else {\r\n        this.player_.exitFullscreen();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * The text that should display over the `FullscreenToggle`s controls. Added for localization.\r\n   *\r\n   * @type {string}\r\n   * @protected\r\n   */\r\n  FullscreenToggle.prototype.controlText_ = 'Fullscreen';\r\n  Component$1.registerComponent('FullscreenToggle', FullscreenToggle);\r\n\r\n  /** @import Component from '../../component' */\r\n  /** @import Player from '../../player' */\r\n\r\n  /**\r\n   * Check if volume control is supported and if it isn't hide the\r\n   * `Component` that was passed  using the `vjs-hidden` class.\r\n   *\r\n   * @param {Component} self\r\n   *        The component that should be hidden if volume is unsupported\r\n   *\r\n   * @param {Player} player\r\n   *        A reference to the player\r\n   *\r\n   * @private\r\n   */\r\n  const checkVolumeSupport = function (self, player) {\r\n    // hide volume controls when they're not supported by the current tech\r\n    if (player.tech_ && !player.tech_.featuresVolumeControl) {\r\n      self.addClass('vjs-hidden');\r\n    }\r\n    self.on(player, 'loadstart', function () {\r\n      if (!player.tech_.featuresVolumeControl) {\r\n        self.addClass('vjs-hidden');\r\n      } else {\r\n        self.removeClass('vjs-hidden');\r\n      }\r\n    });\r\n  };\r\n\r\n  /**\r\n   * @file volume-level.js\r\n   */\r\n\r\n  /**\r\n   * Shows volume level\r\n   *\r\n   * @extends Component\r\n   */\r\n  class VolumeLevel extends Component$1 {\r\n    /**\r\n     * Create the `Component`'s DOM element\r\n     *\r\n     * @return {Element}\r\n     *         The element that was created.\r\n     */\r\n    createEl() {\r\n      const el = super.createEl('div', {\r\n        className: 'vjs-volume-level'\r\n      });\r\n      this.setIcon('circle', el);\r\n      el.appendChild(super.createEl('span', {\r\n        className: 'vjs-control-text'\r\n      }));\r\n      return el;\r\n    }\r\n  }\r\n  Component$1.registerComponent('VolumeLevel', VolumeLevel);\r\n\r\n  /**\r\n   * @file volume-level-tooltip.js\r\n   */\r\n\r\n  /** @import Player from '../../player' */\r\n\r\n  /**\r\n   * Volume level tooltips display a volume above or side by side the volume bar.\r\n   *\r\n   * @extends Component\r\n   */\r\n  class VolumeLevelTooltip extends Component$1 {\r\n    /**\r\n     * Creates an instance of this class.\r\n     *\r\n     * @param {Player} player\r\n     *        The {@link Player} that this class should be attached to.\r\n     *\r\n     * @param {Object} [options]\r\n     *        The key/value store of player options.\r\n     */\r\n    constructor(player, options) {\r\n      super(player, options);\r\n      this.update = throttle(bind_(this, this.update), UPDATE_REFRESH_INTERVAL);\r\n    }\r\n\r\n    /**\r\n     * Create the volume tooltip DOM element\r\n     *\r\n     * @return {Element}\r\n     *         The element that was created.\r\n     */\r\n    createEl() {\r\n      return super.createEl('div', {\r\n        className: 'vjs-volume-tooltip'\r\n      }, {\r\n        'aria-hidden': 'true'\r\n      });\r\n    }\r\n\r\n    /**\r\n     * Updates the position of the tooltip relative to the `VolumeBar` and\r\n     * its content text.\r\n     *\r\n     * @param {Object} rangeBarRect\r\n     *        The `ClientRect` for the {@link VolumeBar} element.\r\n     *\r\n     * @param {number} rangeBarPoint\r\n     *        A number from 0 to 1, representing a horizontal/vertical reference point\r\n     *        from the left edge of the {@link VolumeBar}\r\n     *\r\n     * @param {boolean} vertical\r\n     *        Referees to the Volume control position\r\n     *        in the control bar{@link VolumeControl}\r\n     *\r\n     */\r\n    update(rangeBarRect, rangeBarPoint, vertical, content) {\r\n      if (!vertical) {\r\n        const tooltipRect = getBoundingClientRect(this.el_);\r\n        const playerRect = getBoundingClientRect(this.player_.el());\r\n        const volumeBarPointPx = rangeBarRect.width * rangeBarPoint;\r\n        if (!playerRect || !tooltipRect) {\r\n          return;\r\n        }\r\n        const spaceLeftOfPoint = rangeBarRect.left - playerRect.left + volumeBarPointPx;\r\n        const spaceRightOfPoint = rangeBarRect.width - volumeBarPointPx + (playerRect.right - rangeBarRect.right);\r\n        let pullTooltipBy = tooltipRect.width / 2;\r\n        if (spaceLeftOfPoint < pullTooltipBy) {\r\n          pullTooltipBy += pullTooltipBy - spaceLeftOfPoint;\r\n        } else if (spaceRightOfPoint < pullTooltipBy) {\r\n          pullTooltipBy = spaceRightOfPoint;\r\n        }\r\n        if (pullTooltipBy < 0) {\r\n          pullTooltipBy = 0;\r\n        } else if (pullTooltipBy > tooltipRect.width) {\r\n          pullTooltipBy = tooltipRect.width;\r\n        }\r\n        this.el_.style.right = `-${pullTooltipBy}px`;\r\n      }\r\n      this.write(`${content}%`);\r\n    }\r\n\r\n    /**\r\n     * Write the volume to the tooltip DOM element.\r\n     *\r\n     * @param {string} content\r\n     *        The formatted volume for the tooltip.\r\n     */\r\n    write(content) {\r\n      textContent(this.el_, content);\r\n    }\r\n\r\n    /**\r\n     * Updates the position of the volume tooltip relative to the `VolumeBar`.\r\n     *\r\n     * @param {Object} rangeBarRect\r\n     *        The `ClientRect` for the {@link VolumeBar} element.\r\n     *\r\n     * @param {number} rangeBarPoint\r\n     *        A number from 0 to 1, representing a horizontal/vertical reference point\r\n     *        from the left edge of the {@link VolumeBar}\r\n     *\r\n     * @param {boolean} vertical\r\n     *        Referees to the Volume control position\r\n     *        in the control bar{@link VolumeControl}\r\n     *\r\n     * @param {number} volume\r\n     *        The volume level to update the tooltip to\r\n     *\r\n     * @param {Function} cb\r\n     *        A function that will be called during the request animation frame\r\n     *        for tooltips that need to do additional animations from the default\r\n     */\r\n    updateVolume(rangeBarRect, rangeBarPoint, vertical, volume, cb) {\r\n      this.requestNamedAnimationFrame('VolumeLevelTooltip#updateVolume', () => {\r\n        this.update(rangeBarRect, rangeBarPoint, vertical, volume.toFixed(0));\r\n        if (cb) {\r\n          cb();\r\n        }\r\n      });\r\n    }\r\n  }\r\n  Component$1.registerComponent('VolumeLevelTooltip', VolumeLevelTooltip);\r\n\r\n  /**\r\n   * @file mouse-volume-level-display.js\r\n   */\r\n\r\n  /**\r\n   * The {@link MouseVolumeLevelDisplay} component tracks mouse movement over the\r\n   * {@link VolumeControl}. It displays an indicator and a {@link VolumeLevelTooltip}\r\n   * indicating the volume level which is represented by a given point in the\r\n   * {@link VolumeBar}.\r\n   *\r\n   * @extends Component\r\n   */\r\n  class MouseVolumeLevelDisplay extends Component$1 {\r\n    /**\r\n     * Creates an instance of this class.\r\n     *\r\n     * @param {Player} player\r\n     *        The {@link Player} that this class should be attached to.\r\n     *\r\n     * @param {Object} [options]\r\n     *        The key/value store of player options.\r\n     */\r\n    constructor(player, options) {\r\n      super(player, options);\r\n      this.update = throttle(bind_(this, this.update), UPDATE_REFRESH_INTERVAL);\r\n    }\r\n\r\n    /**\r\n     * Create the DOM element for this class.\r\n     *\r\n     * @return {Element}\r\n     *         The element that was created.\r\n     */\r\n    createEl() {\r\n      return super.createEl('div', {\r\n        className: 'vjs-mouse-display'\r\n      });\r\n    }\r\n\r\n    /**\r\n     * Enquires updates to its own DOM as well as the DOM of its\r\n     * {@link VolumeLevelTooltip} child.\r\n     *\r\n     * @param {Object} rangeBarRect\r\n     *        The `ClientRect` for the {@link VolumeBar} element.\r\n     *\r\n     * @param {number} rangeBarPoint\r\n     *        A number from 0 to 1, representing a horizontal/vertical reference point\r\n     *        from the left edge of the {@link VolumeBar}\r\n     *\r\n     * @param {boolean} vertical\r\n     *        Referees to the Volume control position\r\n     *        in the control bar{@link VolumeControl}\r\n     *\r\n     */\r\n    update(rangeBarRect, rangeBarPoint, vertical) {\r\n      const volume = 100 * rangeBarPoint;\r\n      this.getChild('volumeLevelTooltip').updateVolume(rangeBarRect, rangeBarPoint, vertical, volume, () => {\r\n        if (vertical) {\r\n          this.el_.style.bottom = `${rangeBarRect.height * rangeBarPoint}px`;\r\n        } else {\r\n          this.el_.style.left = `${rangeBarRect.width * rangeBarPoint}px`;\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Default options for `MouseVolumeLevelDisplay`\r\n   *\r\n   * @type {Object}\r\n   * @private\r\n   */\r\n  MouseVolumeLevelDisplay.prototype.options_ = {\r\n    children: ['volumeLevelTooltip']\r\n  };\r\n  Component$1.registerComponent('MouseVolumeLevelDisplay', MouseVolumeLevelDisplay);\r\n\r\n  /**\r\n   * @file volume-bar.js\r\n   */\r\n\r\n  /**\r\n   * The bar that contains the volume level and can be clicked on to adjust the level\r\n   *\r\n   * @extends Slider\r\n   */\r\n  class VolumeBar extends Slider {\r\n    /**\r\n     * Creates an instance of this class.\r\n     *\r\n     * @param {Player} player\r\n     *        The `Player` that this class should be attached to.\r\n     *\r\n     * @param {Object} [options]\r\n     *        The key/value store of player options.\r\n     */\r\n    constructor(player, options) {\r\n      super(player, options);\r\n      this.on('slideractive', e => this.updateLastVolume_(e));\r\n      this.on(player, 'volumechange', e => this.updateARIAAttributes(e));\r\n      player.ready(() => this.updateARIAAttributes());\r\n    }\r\n\r\n    /**\r\n     * Create the `Component`'s DOM element\r\n     *\r\n     * @return {Element}\r\n     *         The element that was created.\r\n     */\r\n    createEl() {\r\n      return super.createEl('div', {\r\n        className: 'vjs-volume-bar vjs-slider-bar'\r\n      }, {\r\n        'aria-label': this.localize('Volume Level'),\r\n        'aria-live': 'polite'\r\n      });\r\n    }\r\n\r\n    /**\r\n     * Handle mouse down on volume bar\r\n     *\r\n     * @param {Event} event\r\n     *        The `mousedown` event that caused this to run.\r\n     *\r\n     * @listens mousedown\r\n     */\r\n    handleMouseDown(event) {\r\n      if (!isSingleLeftClick(event)) {\r\n        return;\r\n      }\r\n      super.handleMouseDown(event);\r\n    }\r\n\r\n    /**\r\n     * Handle movement events on the {@link VolumeMenuButton}.\r\n     *\r\n     * @param {Event} event\r\n     *        The event that caused this function to run.\r\n     *\r\n     * @listens mousemove\r\n     */\r\n    handleMouseMove(event) {\r\n      const mouseVolumeLevelDisplay = this.getChild('mouseVolumeLevelDisplay');\r\n      if (mouseVolumeLevelDisplay) {\r\n        const volumeBarEl = this.el();\r\n        const volumeBarRect = getBoundingClientRect(volumeBarEl);\r\n        const vertical = this.vertical();\r\n        let volumeBarPoint = getPointerPosition(volumeBarEl, event);\r\n        volumeBarPoint = vertical ? volumeBarPoint.y : volumeBarPoint.x;\r\n        // The default skin has a gap on either side of the `VolumeBar`. This means\r\n        // that it's possible to trigger this behavior outside the boundaries of\r\n        // the `VolumeBar`. This ensures we stay within it at all times.\r\n        volumeBarPoint = clamp(volumeBarPoint, 0, 1);\r\n        mouseVolumeLevelDisplay.update(volumeBarRect, volumeBarPoint, vertical);\r\n      }\r\n      if (!isSingleLeftClick(event)) {\r\n        return;\r\n      }\r\n      this.checkMuted();\r\n      this.player_.volume(this.calculateDistance(event));\r\n    }\r\n\r\n    /**\r\n     * If the player is muted unmute it.\r\n     */\r\n    checkMuted() {\r\n      if (this.player_.muted()) {\r\n        this.player_.muted(false);\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Get percent of volume level\r\n     *\r\n     * @return {number}\r\n     *         Volume level percent as a decimal number.\r\n     */\r\n    getPercent() {\r\n      if (this.player_.muted()) {\r\n        return 0;\r\n      }\r\n      return this.player_.volume();\r\n    }\r\n\r\n    /**\r\n     * Increase volume level for keyboard users\r\n     */\r\n    stepForward() {\r\n      this.checkMuted();\r\n      this.player_.volume(this.player_.volume() + 0.1);\r\n    }\r\n\r\n    /**\r\n     * Decrease volume level for keyboard users\r\n     */\r\n    stepBack() {\r\n      this.checkMuted();\r\n      this.player_.volume(this.player_.volume() - 0.1);\r\n    }\r\n\r\n    /**\r\n     * Update ARIA accessibility attributes\r\n     *\r\n     * @param {Event} [event]\r\n     *        The `volumechange` event that caused this function to run.\r\n     *\r\n     * @listens Player#volumechange\r\n     */\r\n    updateARIAAttributes(event) {\r\n      const ariaValue = this.player_.muted() ? 0 : this.volumeAsPercentage_();\r\n      this.el_.setAttribute('aria-valuenow', ariaValue);\r\n      this.el_.setAttribute('aria-valuetext', ariaValue + '%');\r\n    }\r\n\r\n    /**\r\n     * Returns the current value of the player volume as a percentage\r\n     *\r\n     * @private\r\n     */\r\n    volumeAsPercentage_() {\r\n      return Math.round(this.player_.volume() * 100);\r\n    }\r\n\r\n    /**\r\n     * When user starts dragging the VolumeBar, store the volume and listen for\r\n     * the end of the drag. When the drag ends, if the volume was set to zero,\r\n     * set lastVolume to the stored volume.\r\n     *\r\n     * @listens slideractive\r\n     * @private\r\n     */\r\n    updateLastVolume_() {\r\n      const volumeBeforeDrag = this.player_.volume();\r\n      this.one('sliderinactive', () => {\r\n        if (this.player_.volume() === 0) {\r\n          this.player_.lastVolume_(volumeBeforeDrag);\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Default options for the `VolumeBar`\r\n   *\r\n   * @type {Object}\r\n   * @private\r\n   */\r\n  VolumeBar.prototype.options_ = {\r\n    children: ['volumeLevel'],\r\n    barName: 'volumeLevel'\r\n  };\r\n\r\n  // MouseVolumeLevelDisplay tooltip should not be added to a player on mobile devices\r\n  if (!IS_IOS && !IS_ANDROID) {\r\n    VolumeBar.prototype.options_.children.splice(0, 0, 'mouseVolumeLevelDisplay');\r\n  }\r\n\r\n  /**\r\n   * Call the update event for this Slider when this event happens on the player.\r\n   *\r\n   * @type {string}\r\n   */\r\n  VolumeBar.prototype.playerEvent = 'volumechange';\r\n  Component$1.registerComponent('VolumeBar', VolumeBar);\r\n\r\n  /**\r\n   * @file volume-control.js\r\n   */\r\n\r\n  /**\r\n   * The component for controlling the volume level\r\n   *\r\n   * @extends Component\r\n   */\r\n  class VolumeControl extends Component$1 {\r\n    /**\r\n     * Creates an instance of this class.\r\n     *\r\n     * @param {Player} player\r\n     *        The `Player` that this class should be attached to.\r\n     *\r\n     * @param {Object} [options={}]\r\n     *        The key/value store of player options.\r\n     */\r\n    constructor(player, options = {}) {\r\n      options.vertical = options.vertical || false;\r\n\r\n      // Pass the vertical option down to the VolumeBar if\r\n      // the VolumeBar is turned on.\r\n      if (typeof options.volumeBar === 'undefined' || isPlain(options.volumeBar)) {\r\n        options.volumeBar = options.volumeBar || {};\r\n        options.volumeBar.vertical = options.vertical;\r\n      }\r\n      super(player, options);\r\n\r\n      // hide this control if volume support is missing\r\n      checkVolumeSupport(this, player);\r\n      this.throttledHandleMouseMove = throttle(bind_(this, this.handleMouseMove), UPDATE_REFRESH_INTERVAL);\r\n      this.handleMouseUpHandler_ = e => this.handleMouseUp(e);\r\n      this.on('mousedown', e => this.handleMouseDown(e));\r\n      this.on('touchstart', e => this.handleMouseDown(e));\r\n      this.on('mousemove', e => this.handleMouseMove(e));\r\n\r\n      // while the slider is active (the mouse has been pressed down and\r\n      // is dragging) or in focus we do not want to hide the VolumeBar\r\n      this.on(this.volumeBar, ['focus', 'slideractive'], () => {\r\n        this.volumeBar.addClass('vjs-slider-active');\r\n        this.addClass('vjs-slider-active');\r\n        this.trigger('slideractive');\r\n      });\r\n      this.on(this.volumeBar, ['blur', 'sliderinactive'], () => {\r\n        this.volumeBar.removeClass('vjs-slider-active');\r\n        this.removeClass('vjs-slider-active');\r\n        this.trigger('sliderinactive');\r\n      });\r\n    }\r\n\r\n    /**\r\n     * Create the `Component`'s DOM element\r\n     *\r\n     * @return {Element}\r\n     *         The element that was created.\r\n     */\r\n    createEl() {\r\n      let orientationClass = 'vjs-volume-horizontal';\r\n      if (this.options_.vertical) {\r\n        orientationClass = 'vjs-volume-vertical';\r\n      }\r\n      return super.createEl('div', {\r\n        className: `vjs-volume-control vjs-control ${orientationClass}`\r\n      });\r\n    }\r\n\r\n    /**\r\n     * Handle `mousedown` or `touchstart` events on the `VolumeControl`.\r\n     *\r\n     * @param {Event} event\r\n     *        `mousedown` or `touchstart` event that triggered this function\r\n     *\r\n     * @listens mousedown\r\n     * @listens touchstart\r\n     */\r\n    handleMouseDown(event) {\r\n      const doc = this.el_.ownerDocument;\r\n      this.on(doc, 'mousemove', this.throttledHandleMouseMove);\r\n      this.on(doc, 'touchmove', this.throttledHandleMouseMove);\r\n      this.on(doc, 'mouseup', this.handleMouseUpHandler_);\r\n      this.on(doc, 'touchend', this.handleMouseUpHandler_);\r\n    }\r\n\r\n    /**\r\n     * Handle `mouseup` or `touchend` events on the `VolumeControl`.\r\n     *\r\n     * @param {Event} event\r\n     *        `mouseup` or `touchend` event that triggered this function.\r\n     *\r\n     * @listens touchend\r\n     * @listens mouseup\r\n     */\r\n    handleMouseUp(event) {\r\n      const doc = this.el_.ownerDocument;\r\n      this.off(doc, 'mousemove', this.throttledHandleMouseMove);\r\n      this.off(doc, 'touchmove', this.throttledHandleMouseMove);\r\n      this.off(doc, 'mouseup', this.handleMouseUpHandler_);\r\n      this.off(doc, 'touchend', this.handleMouseUpHandler_);\r\n    }\r\n\r\n    /**\r\n     * Handle `mousedown` or `touchstart` events on the `VolumeControl`.\r\n     *\r\n     * @param {Event} event\r\n     *        `mousedown` or `touchstart` event that triggered this function\r\n     *\r\n     * @listens mousedown\r\n     * @listens touchstart\r\n     */\r\n    handleMouseMove(event) {\r\n      this.volumeBar.handleMouseMove(event);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Default options for the `VolumeControl`\r\n   *\r\n   * @type {Object}\r\n   * @private\r\n   */\r\n  VolumeControl.prototype.options_ = {\r\n    children: ['volumeBar']\r\n  };\r\n  Component$1.registerComponent('VolumeControl', VolumeControl);\r\n\r\n  /** @import Component from '../../component' */\r\n  /** @import Player from '../../player' */\r\n\r\n  /**\r\n   * Check if muting volume is supported and if it isn't hide the mute toggle\r\n   * button.\r\n   *\r\n   * @param {Component} self\r\n   *        A reference to the mute toggle button\r\n   *\r\n   * @param {Player} player\r\n   *        A reference to the player\r\n   *\r\n   * @private\r\n   */\r\n  const checkMuteSupport = function (self, player) {\r\n    // hide mute toggle button if it's not supported by the current tech\r\n    if (player.tech_ && !player.tech_.featuresMuteControl) {\r\n      self.addClass('vjs-hidden');\r\n    }\r\n    self.on(player, 'loadstart', function () {\r\n      if (!player.tech_.featuresMuteControl) {\r\n        self.addClass('vjs-hidden');\r\n      } else {\r\n        self.removeClass('vjs-hidden');\r\n      }\r\n    });\r\n  };\r\n\r\n  /**\r\n   * @file mute-toggle.js\r\n   */\r\n\r\n  /** @import Player from './player' */\r\n\r\n  /**\r\n   * A button component for muting the audio.\r\n   *\r\n   * @extends Button\r\n   */\r\n  class MuteToggle extends Button {\r\n    /**\r\n     * Creates an instance of this class.\r\n     *\r\n     * @param {Player} player\r\n     *        The `Player` that this class should be attached to.\r\n     *\r\n     * @param {Object} [options]\r\n     *        The key/value store of player options.\r\n     */\r\n    constructor(player, options) {\r\n      super(player, options);\r\n\r\n      // hide this control if volume support is missing\r\n      checkMuteSupport(this, player);\r\n      this.on(player, ['loadstart', 'volumechange'], e => this.update(e));\r\n    }\r\n\r\n    /**\r\n     * Builds the default DOM `className`.\r\n     *\r\n     * @return {string}\r\n     *         The DOM `className` for this object.\r\n     */\r\n    buildCSSClass() {\r\n      return `vjs-mute-control ${super.buildCSSClass()}`;\r\n    }\r\n\r\n    /**\r\n     * This gets called when an `MuteToggle` is \"clicked\". See\r\n     * {@link ClickableComponent} for more detailed information on what a click can be.\r\n     *\r\n     * @param {Event} [event]\r\n     *        The `keydown`, `tap`, or `click` event that caused this function to be\r\n     *        called.\r\n     *\r\n     * @listens tap\r\n     * @listens click\r\n     */\r\n    handleClick(event) {\r\n      const vol = this.player_.volume();\r\n      const lastVolume = this.player_.lastVolume_();\r\n      if (vol === 0) {\r\n        const volumeToSet = lastVolume < 0.1 ? 0.1 : lastVolume;\r\n        this.player_.volume(volumeToSet);\r\n        this.player_.muted(false);\r\n      } else {\r\n        this.player_.muted(this.player_.muted() ? false : true);\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Update the `MuteToggle` button based on the state of `volume` and `muted`\r\n     * on the player.\r\n     *\r\n     * @param {Event} [event]\r\n     *        The {@link Player#loadstart} event if this function was called\r\n     *        through an event.\r\n     *\r\n     * @listens Player#loadstart\r\n     * @listens Player#volumechange\r\n     */\r\n    update(event) {\r\n      this.updateIcon_();\r\n      this.updateControlText_();\r\n    }\r\n\r\n    /**\r\n     * Update the appearance of the `MuteToggle` icon.\r\n     *\r\n     * Possible states (given `level` variable below):\r\n     * - 0: crossed out\r\n     * - 1: zero bars of volume\r\n     * - 2: one bar of volume\r\n     * - 3: two bars of volume\r\n     *\r\n     * @private\r\n     */\r\n    updateIcon_() {\r\n      const vol = this.player_.volume();\r\n      let level = 3;\r\n      this.setIcon('volume-high');\r\n\r\n      // in iOS when a player is loaded with muted attribute\r\n      // and volume is changed with a native mute button\r\n      // we want to make sure muted state is updated\r\n      if (IS_IOS && this.player_.tech_ && this.player_.tech_.el_) {\r\n        this.player_.muted(this.player_.tech_.el_.muted);\r\n      }\r\n      if (vol === 0 || this.player_.muted()) {\r\n        this.setIcon('volume-mute');\r\n        level = 0;\r\n      } else if (vol < 0.33) {\r\n        this.setIcon('volume-low');\r\n        level = 1;\r\n      } else if (vol < 0.67) {\r\n        this.setIcon('volume-medium');\r\n        level = 2;\r\n      }\r\n      removeClass(this.el_, [0, 1, 2, 3].reduce((str, i) => str + `${i ? ' ' : ''}vjs-vol-${i}`, ''));\r\n      addClass(this.el_, `vjs-vol-${level}`);\r\n    }\r\n\r\n    /**\r\n     * If `muted` has changed on the player, update the control text\r\n     * (`title` attribute on `vjs-mute-control` element and content of\r\n     * `vjs-control-text` element).\r\n     *\r\n     * @private\r\n     */\r\n    updateControlText_() {\r\n      const soundOff = this.player_.muted() || this.player_.volume() === 0;\r\n      const text = soundOff ? 'Unmute' : 'Mute';\r\n      if (this.controlText() !== text) {\r\n        this.controlText(text);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * The text that should display over the `MuteToggle`s controls. Added for localization.\r\n   *\r\n   * @type {string}\r\n   * @protected\r\n   */\r\n  MuteToggle.prototype.controlText_ = 'Mute';\r\n  Component$1.registerComponent('MuteToggle', MuteToggle);\r\n\r\n  /**\r\n   * @file volume-control.js\r\n   */\r\n\r\n  /**\r\n   * A Component to contain the MuteToggle and VolumeControl so that\r\n   * they can work together.\r\n   *\r\n   * @extends Component\r\n   */\r\n  class VolumePanel extends Component$1 {\r\n    /**\r\n     * Creates an instance of this class.\r\n     *\r\n     * @param {Player} player\r\n     *        The `Player` that this class should be attached to.\r\n     *\r\n     * @param {Object} [options={}]\r\n     *        The key/value store of player options.\r\n     */\r\n    constructor(player, options = {}) {\r\n      if (typeof options.inline !== 'undefined') {\r\n        options.inline = options.inline;\r\n      } else {\r\n        options.inline = true;\r\n      }\r\n\r\n      // pass the inline option down to the VolumeControl as vertical if\r\n      // the VolumeControl is on.\r\n      if (typeof options.volumeControl === 'undefined' || isPlain(options.volumeControl)) {\r\n        options.volumeControl = options.volumeControl || {};\r\n        options.volumeControl.vertical = !options.inline;\r\n      }\r\n      super(player, options);\r\n\r\n      // this handler is used by mouse handler methods below\r\n      this.handleKeyPressHandler_ = e => this.handleKeyPress(e);\r\n      this.on(player, ['loadstart'], e => this.volumePanelState_(e));\r\n      this.on(this.muteToggle, 'keyup', e => this.handleKeyPress(e));\r\n      this.on(this.volumeControl, 'keyup', e => this.handleVolumeControlKeyUp(e));\r\n      this.on('keydown', e => this.handleKeyPress(e));\r\n      this.on('mouseover', e => this.handleMouseOver(e));\r\n      this.on('mouseout', e => this.handleMouseOut(e));\r\n\r\n      // while the slider is active (the mouse has been pressed down and\r\n      // is dragging) we do not want to hide the VolumeBar\r\n      this.on(this.volumeControl, ['slideractive'], this.sliderActive_);\r\n      this.on(this.volumeControl, ['sliderinactive'], this.sliderInactive_);\r\n    }\r\n\r\n    /**\r\n     * Add vjs-slider-active class to the VolumePanel\r\n     *\r\n     * @listens VolumeControl#slideractive\r\n     * @private\r\n     */\r\n    sliderActive_() {\r\n      this.addClass('vjs-slider-active');\r\n    }\r\n\r\n    /**\r\n     * Removes vjs-slider-active class to the VolumePanel\r\n     *\r\n     * @listens VolumeControl#sliderinactive\r\n     * @private\r\n     */\r\n    sliderInactive_() {\r\n      this.removeClass('vjs-slider-active');\r\n    }\r\n\r\n    /**\r\n     * Adds vjs-hidden or vjs-mute-toggle-only to the VolumePanel\r\n     * depending on MuteToggle and VolumeControl state\r\n     *\r\n     * @listens Player#loadstart\r\n     * @private\r\n     */\r\n    volumePanelState_() {\r\n      // hide volume panel if neither volume control or mute toggle\r\n      // are displayed\r\n      if (this.volumeControl.hasClass('vjs-hidden') && this.muteToggle.hasClass('vjs-hidden')) {\r\n        this.addClass('vjs-hidden');\r\n      }\r\n\r\n      // if only mute toggle is visible we don't want\r\n      // volume panel expanding when hovered or active\r\n      if (this.volumeControl.hasClass('vjs-hidden') && !this.muteToggle.hasClass('vjs-hidden')) {\r\n        this.addClass('vjs-mute-toggle-only');\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Create the `Component`'s DOM element\r\n     *\r\n     * @return {Element}\r\n     *         The element that was created.\r\n     */\r\n    createEl() {\r\n      let orientationClass = 'vjs-volume-panel-horizontal';\r\n      if (!this.options_.inline) {\r\n        orientationClass = 'vjs-volume-panel-vertical';\r\n      }\r\n      return super.createEl('div', {\r\n        className: `vjs-volume-panel vjs-control ${orientationClass}`\r\n      });\r\n    }\r\n\r\n    /**\r\n     * Dispose of the `volume-panel` and all child components.\r\n     */\r\n    dispose() {\r\n      this.handleMouseOut();\r\n      super.dispose();\r\n    }\r\n\r\n    /**\r\n     * Handles `keyup` events on the `VolumeControl`, looking for ESC, which closes\r\n     * the volume panel and sets focus on `MuteToggle`.\r\n     *\r\n     * @param {Event} event\r\n     *        The `keyup` event that caused this function to be called.\r\n     *\r\n     * @listens keyup\r\n     */\r\n    handleVolumeControlKeyUp(event) {\r\n      if (event.key === 'Escape') {\r\n        this.muteToggle.focus();\r\n      }\r\n    }\r\n\r\n    /**\r\n     * This gets called when a `VolumePanel` gains hover via a `mouseover` event.\r\n     * Turns on listening for `mouseover` event. When they happen it\r\n     * calls `this.handleMouseOver`.\r\n     *\r\n     * @param {Event} event\r\n     *        The `mouseover` event that caused this function to be called.\r\n     *\r\n     * @listens mouseover\r\n     */\r\n    handleMouseOver(event) {\r\n      this.addClass('vjs-hover');\r\n      on(document, 'keyup', this.handleKeyPressHandler_);\r\n    }\r\n\r\n    /**\r\n     * This gets called when a `VolumePanel` gains hover via a `mouseout` event.\r\n     * Turns on listening for `mouseout` event. When they happen it\r\n     * calls `this.handleMouseOut`.\r\n     *\r\n     * @param {Event} event\r\n     *        The `mouseout` event that caused this function to be called.\r\n     *\r\n     * @listens mouseout\r\n     */\r\n    handleMouseOut(event) {\r\n      this.removeClass('vjs-hover');\r\n      off(document, 'keyup', this.handleKeyPressHandler_);\r\n    }\r\n\r\n    /**\r\n     * Handles `keyup` event on the document or `keydown` event on the `VolumePanel`,\r\n     * looking for ESC, which hides the `VolumeControl`.\r\n     *\r\n     * @param {Event} event\r\n     *        The keypress that triggered this event.\r\n     *\r\n     * @listens keydown | keyup\r\n     */\r\n    handleKeyPress(event) {\r\n      if (event.key === 'Escape') {\r\n        this.handleMouseOut();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Default options for the `VolumeControl`\r\n   *\r\n   * @type {Object}\r\n   * @private\r\n   */\r\n  VolumePanel.prototype.options_ = {\r\n    children: ['muteToggle', 'volumeControl']\r\n  };\r\n  Component$1.registerComponent('VolumePanel', VolumePanel);\r\n\r\n  /**\r\n   * Button to skip forward a configurable amount of time\r\n   * through a video. Renders in the control bar.\r\n   *\r\n   * e.g. options: {controlBar: {skipButtons: forward: 5}}\r\n   *\r\n   * @extends Button\r\n   */\r\n  class SkipForward extends Button {\r\n    constructor(player, options) {\r\n      super(player, options);\r\n      this.validOptions = [5, 10, 30];\r\n      this.skipTime = this.getSkipForwardTime();\r\n      if (this.skipTime && this.validOptions.includes(this.skipTime)) {\r\n        this.setIcon(`forward-${this.skipTime}`);\r\n        this.controlText(this.localize('Skip forward {1} seconds', [this.skipTime.toLocaleString(player.language())]));\r\n        this.show();\r\n      } else {\r\n        this.hide();\r\n      }\r\n    }\r\n    getSkipForwardTime() {\r\n      const playerOptions = this.options_.playerOptions;\r\n      return playerOptions.controlBar && playerOptions.controlBar.skipButtons && playerOptions.controlBar.skipButtons.forward;\r\n    }\r\n    buildCSSClass() {\r\n      return `vjs-skip-forward-${this.getSkipForwardTime()} ${super.buildCSSClass()}`;\r\n    }\r\n\r\n    /**\r\n     * On click, skips forward in the duration/seekable range by a configurable amount of seconds.\r\n     * If the time left in the duration/seekable range is less than the configured 'skip forward' time,\r\n     * skips to end of duration/seekable range.\r\n     *\r\n     * Handle a click on a `SkipForward` button\r\n     *\r\n     * @param {EventTarget~Event} event\r\n     *        The `click` event that caused this function\r\n     *        to be called\r\n     */\r\n    handleClick(event) {\r\n      if (isNaN(this.player_.duration())) {\r\n        return;\r\n      }\r\n      const currentVideoTime = this.player_.currentTime();\r\n      const liveTracker = this.player_.liveTracker;\r\n      const duration = liveTracker && liveTracker.isLive() ? liveTracker.seekableEnd() : this.player_.duration();\r\n      let newTime;\r\n      if (currentVideoTime + this.skipTime <= duration) {\r\n        newTime = currentVideoTime + this.skipTime;\r\n      } else {\r\n        newTime = duration;\r\n      }\r\n      this.player_.currentTime(newTime);\r\n    }\r\n\r\n    /**\r\n     * Update control text on languagechange\r\n     */\r\n    handleLanguagechange() {\r\n      this.controlText(this.localize('Skip forward {1} seconds', [this.skipTime]));\r\n    }\r\n  }\r\n  SkipForward.prototype.controlText_ = 'Skip Forward';\r\n  Component$1.registerComponent('SkipForward', SkipForward);\r\n\r\n  /**\r\n   * Button to skip backward a configurable amount of time\r\n   * through a video. Renders in the control bar.\r\n   *\r\n   *  * e.g. options: {controlBar: {skipButtons: backward: 5}}\r\n   *\r\n   * @extends Button\r\n   */\r\n  class SkipBackward extends Button {\r\n    constructor(player, options) {\r\n      super(player, options);\r\n      this.validOptions = [5, 10, 30];\r\n      this.skipTime = this.getSkipBackwardTime();\r\n      if (this.skipTime && this.validOptions.includes(this.skipTime)) {\r\n        this.setIcon(`replay-${this.skipTime}`);\r\n        this.controlText(this.localize('Skip backward {1} seconds', [this.skipTime.toLocaleString(player.language())]));\r\n        this.show();\r\n      } else {\r\n        this.hide();\r\n      }\r\n    }\r\n    getSkipBackwardTime() {\r\n      const playerOptions = this.options_.playerOptions;\r\n      return playerOptions.controlBar && playerOptions.controlBar.skipButtons && playerOptions.controlBar.skipButtons.backward;\r\n    }\r\n    buildCSSClass() {\r\n      return `vjs-skip-backward-${this.getSkipBackwardTime()} ${super.buildCSSClass()}`;\r\n    }\r\n\r\n    /**\r\n     * On click, skips backward in the video by a configurable amount of seconds.\r\n     * If the current time in the video is less than the configured 'skip backward' time,\r\n     * skips to beginning of video or seekable range.\r\n     *\r\n     * Handle a click on a `SkipBackward` button\r\n     *\r\n     * @param {EventTarget~Event} event\r\n     *        The `click` event that caused this function\r\n     *        to be called\r\n     */\r\n    handleClick(event) {\r\n      const currentVideoTime = this.player_.currentTime();\r\n      const liveTracker = this.player_.liveTracker;\r\n      const seekableStart = liveTracker && liveTracker.isLive() && liveTracker.seekableStart();\r\n      let newTime;\r\n      if (seekableStart && currentVideoTime - this.skipTime <= seekableStart) {\r\n        newTime = seekableStart;\r\n      } else if (currentVideoTime >= this.skipTime) {\r\n        newTime = currentVideoTime - this.skipTime;\r\n      } else {\r\n        newTime = 0;\r\n      }\r\n      this.player_.currentTime(newTime);\r\n    }\r\n\r\n    /**\r\n     * Update control text on languagechange\r\n     */\r\n    handleLanguagechange() {\r\n      this.controlText(this.localize('Skip backward {1} seconds', [this.skipTime]));\r\n    }\r\n  }\r\n  SkipBackward.prototype.controlText_ = 'Skip Backward';\r\n  Component$1.registerComponent('SkipBackward', SkipBackward);\r\n\r\n  /**\r\n   * @file menu.js\r\n   */\r\n\r\n  /** @import Player from '../player' */\r\n\r\n  /**\r\n   * The Menu component is used to build popup menus, including subtitle and\r\n   * captions selection menus.\r\n   *\r\n   * @extends Component\r\n   */\r\n  class Menu extends Component$1 {\r\n    /**\r\n     * Create an instance of this class.\r\n     *\r\n     * @param {Player} player\r\n     *        the player that this component should attach to\r\n     *\r\n     * @param {Object} [options]\r\n     *        Object of option names and values\r\n     *\r\n     */\r\n    constructor(player, options) {\r\n      super(player, options);\r\n      if (options) {\r\n        this.menuButton_ = options.menuButton;\r\n      }\r\n      this.focusedChild_ = -1;\r\n      this.on('keydown', e => this.handleKeyDown(e));\r\n\r\n      // All the menu item instances share the same blur handler provided by the menu container.\r\n      this.boundHandleBlur_ = e => this.handleBlur(e);\r\n      this.boundHandleTapClick_ = e => this.handleTapClick(e);\r\n    }\r\n\r\n    /**\r\n     * Add event listeners to the {@link MenuItem}.\r\n     *\r\n     * @param {Object} component\r\n     *        The instance of the `MenuItem` to add listeners to.\r\n     *\r\n     */\r\n    addEventListenerForItem(component) {\r\n      if (!(component instanceof Component$1)) {\r\n        return;\r\n      }\r\n      this.on(component, 'blur', this.boundHandleBlur_);\r\n      this.on(component, ['tap', 'click'], this.boundHandleTapClick_);\r\n    }\r\n\r\n    /**\r\n     * Remove event listeners from the {@link MenuItem}.\r\n     *\r\n     * @param {Object} component\r\n     *        The instance of the `MenuItem` to remove listeners.\r\n     *\r\n     */\r\n    removeEventListenerForItem(component) {\r\n      if (!(component instanceof Component$1)) {\r\n        return;\r\n      }\r\n      this.off(component, 'blur', this.boundHandleBlur_);\r\n      this.off(component, ['tap', 'click'], this.boundHandleTapClick_);\r\n    }\r\n\r\n    /**\r\n     * This method will be called indirectly when the component has been added\r\n     * before the component adds to the new menu instance by `addItem`.\r\n     * In this case, the original menu instance will remove the component\r\n     * by calling `removeChild`.\r\n     *\r\n     * @param {Object} component\r\n     *        The instance of the `MenuItem`\r\n     */\r\n    removeChild(component) {\r\n      if (typeof component === 'string') {\r\n        component = this.getChild(component);\r\n      }\r\n      this.removeEventListenerForItem(component);\r\n      super.removeChild(component);\r\n    }\r\n\r\n    /**\r\n     * Add a {@link MenuItem} to the menu.\r\n     *\r\n     * @param {Object|string} component\r\n     *        The name or instance of the `MenuItem` to add.\r\n     *\r\n     */\r\n    addItem(component) {\r\n      const childComponent = this.addChild(component);\r\n      if (childComponent) {\r\n        this.addEventListenerForItem(childComponent);\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Create the `Menu`s DOM element.\r\n     *\r\n     * @return {Element}\r\n     *         the element that was created\r\n     */\r\n    createEl() {\r\n      const contentElType = this.options_.contentElType || 'ul';\r\n      this.contentEl_ = createEl(contentElType, {\r\n        className: 'vjs-menu-content'\r\n      });\r\n      this.contentEl_.setAttribute('role', 'menu');\r\n      const el = super.createEl('div', {\r\n        append: this.contentEl_,\r\n        className: 'vjs-menu'\r\n      });\r\n      el.appendChild(this.contentEl_);\r\n\r\n      // Prevent clicks from bubbling up. Needed for Menu Buttons,\r\n      // where a click on the parent is significant\r\n      on(el, 'click', function (event) {\r\n        event.preventDefault();\r\n        event.stopImmediatePropagation();\r\n      });\r\n      return el;\r\n    }\r\n    dispose() {\r\n      this.contentEl_ = null;\r\n      this.boundHandleBlur_ = null;\r\n      this.boundHandleTapClick_ = null;\r\n      super.dispose();\r\n    }\r\n\r\n    /**\r\n     * Called when a `MenuItem` loses focus.\r\n     *\r\n     * @param {Event} event\r\n     *        The `blur` event that caused this function to be called.\r\n     *\r\n     * @listens blur\r\n     */\r\n    handleBlur(event) {\r\n      const relatedTarget = event.relatedTarget || document.activeElement;\r\n\r\n      // Close menu popup when a user clicks outside the menu\r\n      if (!this.children().some(element => {\r\n        return element.el() === relatedTarget;\r\n      })) {\r\n        const btn = this.menuButton_;\r\n        if (btn && btn.buttonPressed_ && relatedTarget !== btn.el().firstChild) {\r\n          btn.unpressButton();\r\n        }\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Called when a `MenuItem` gets clicked or tapped.\r\n     *\r\n     * @param {Event} event\r\n     *        The `click` or `tap` event that caused this function to be called.\r\n     *\r\n     * @listens click,tap\r\n     */\r\n    handleTapClick(event) {\r\n      // Unpress the associated MenuButton, and move focus back to it\r\n      if (this.menuButton_) {\r\n        this.menuButton_.unpressButton();\r\n        const childComponents = this.children();\r\n        if (!Array.isArray(childComponents)) {\r\n          return;\r\n        }\r\n        const foundComponent = childComponents.filter(component => component.el() === event.target)[0];\r\n        if (!foundComponent) {\r\n          return;\r\n        }\r\n\r\n        // don't focus menu button if item is a caption settings item\r\n        // because focus will move elsewhere\r\n        if (foundComponent.name() !== 'CaptionSettingsMenuItem') {\r\n          this.menuButton_.focus();\r\n        }\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Handle a `keydown` event on this menu. This listener is added in the constructor.\r\n     *\r\n     * @param {KeyboardEvent} event\r\n     *        A `keydown` event that happened on the menu.\r\n     *\r\n     * @listens keydown\r\n     */\r\n    handleKeyDown(event) {\r\n      // Left and Down Arrows\r\n      if (event.key === 'ArrowLeft' || event.key === 'ArrowDown') {\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n        this.stepForward();\r\n\r\n        // Up and Right Arrows\r\n      } else if (event.key === 'ArrowRight' || event.key === 'ArrowUp') {\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n        this.stepBack();\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Move to next (lower) menu item for keyboard users.\r\n     */\r\n    stepForward() {\r\n      let stepChild = 0;\r\n      if (this.focusedChild_ !== undefined) {\r\n        stepChild = this.focusedChild_ + 1;\r\n      }\r\n      this.focus(stepChild);\r\n    }\r\n\r\n    /**\r\n     * Move to previous (higher) menu item for keyboard users.\r\n     */\r\n    stepBack() {\r\n      let stepChild = 0;\r\n      if (this.focusedChild_ !== undefined) {\r\n        stepChild = this.focusedChild_ - 1;\r\n      }\r\n      this.focus(stepChild);\r\n    }\r\n\r\n    /**\r\n     * Set focus on a {@link MenuItem} in the `Menu`.\r\n     *\r\n     * @param {Object|string} [item=0]\r\n     *        Index of child item set focus on.\r\n     */\r\n    focus(item = 0) {\r\n      const children = this.children().slice();\r\n      const haveTitle = children.length && children[0].hasClass('vjs-menu-title');\r\n      if (haveTitle) {\r\n        children.shift();\r\n      }\r\n      if (children.length > 0) {\r\n        if (item < 0) {\r\n          item = 0;\r\n        } else if (item >= children.length) {\r\n          item = children.length - 1;\r\n        }\r\n        this.focusedChild_ = item;\r\n        children[item].el_.focus();\r\n      }\r\n    }\r\n  }\r\n  Component$1.registerComponent('Menu', Menu);\r\n\r\n  /**\r\n   * @file menu-button.js\r\n   */\r\n\r\n  /** @import Player from '../player' */\r\n\r\n  /**\r\n   * A `MenuButton` class for any popup {@link Menu}.\r\n   *\r\n   * @extends Component\r\n   */\r\n  class MenuButton extends Component$1 {\r\n    /**\r\n     * Creates an instance of this class.\r\n     *\r\n     * @param {Player} player\r\n     *        The `Player` that this class should be attached to.\r\n     *\r\n     * @param {Object} [options={}]\r\n     *        The key/value store of player options.\r\n     */\r\n    constructor(player, options = {}) {\r\n      super(player, options);\r\n      this.menuButton_ = new Button(player, options);\r\n      this.menuButton_.controlText(this.controlText_);\r\n      this.menuButton_.el_.setAttribute('aria-haspopup', 'true');\r\n\r\n      // Add buildCSSClass values to the button, not the wrapper\r\n      const buttonClass = Button.prototype.buildCSSClass();\r\n      this.menuButton_.el_.className = this.buildCSSClass() + ' ' + buttonClass;\r\n      this.menuButton_.removeClass('vjs-control');\r\n      this.addChild(this.menuButton_);\r\n      this.update();\r\n      this.enabled_ = true;\r\n      const handleClick = e => this.handleClick(e);\r\n      this.handleMenuKeyUp_ = e => this.handleMenuKeyUp(e);\r\n      this.on(this.menuButton_, 'tap', handleClick);\r\n      this.on(this.menuButton_, 'click', handleClick);\r\n      this.on(this.menuButton_, 'keydown', e => this.handleKeyDown(e));\r\n      this.on(this.menuButton_, 'mouseenter', () => {\r\n        this.addClass('vjs-hover');\r\n        this.menu.show();\r\n        on(document, 'keyup', this.handleMenuKeyUp_);\r\n      });\r\n      this.on('mouseleave', e => this.handleMouseLeave(e));\r\n      this.on('keydown', e => this.handleSubmenuKeyDown(e));\r\n    }\r\n\r\n    /**\r\n     * Update the menu based on the current state of its items.\r\n     */\r\n    update() {\r\n      const menu = this.createMenu();\r\n      if (this.menu) {\r\n        this.menu.dispose();\r\n        this.removeChild(this.menu);\r\n      }\r\n      this.menu = menu;\r\n      this.addChild(menu);\r\n\r\n      /**\r\n       * Track the state of the menu button\r\n       *\r\n       * @type {Boolean}\r\n       * @private\r\n       */\r\n      this.buttonPressed_ = false;\r\n      this.menuButton_.el_.setAttribute('aria-expanded', 'false');\r\n      if (this.items && this.items.length <= this.hideThreshold_) {\r\n        this.hide();\r\n        this.menu.contentEl_.removeAttribute('role');\r\n      } else {\r\n        this.show();\r\n        this.menu.contentEl_.setAttribute('role', 'menu');\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Create the menu and add all items to it.\r\n     *\r\n     * @return {Menu}\r\n     *         The constructed menu\r\n     */\r\n    createMenu() {\r\n      const menu = new Menu(this.player_, {\r\n        menuButton: this\r\n      });\r\n\r\n      /**\r\n       * Hide the menu if the number of items is less than or equal to this threshold. This defaults\r\n       * to 0 and whenever we add items which can be hidden to the menu we'll increment it. We list\r\n       * it here because every time we run `createMenu` we need to reset the value.\r\n       *\r\n       * @protected\r\n       * @type {Number}\r\n       */\r\n      this.hideThreshold_ = 0;\r\n\r\n      // Add a title list item to the top\r\n      if (this.options_.title) {\r\n        const titleEl = createEl('li', {\r\n          className: 'vjs-menu-title',\r\n          textContent: toTitleCase$1(this.options_.title),\r\n          tabIndex: -1\r\n        });\r\n        const titleComponent = new Component$1(this.player_, {\r\n          el: titleEl\r\n        });\r\n        menu.addItem(titleComponent);\r\n      }\r\n      this.items = this.createItems();\r\n      if (this.items) {\r\n        // Add menu items to the menu\r\n        for (let i = 0; i < this.items.length; i++) {\r\n          menu.addItem(this.items[i]);\r\n        }\r\n      }\r\n      return menu;\r\n    }\r\n\r\n    /**\r\n     * Create the list of menu items. Specific to each subclass.\r\n     *\r\n     * @abstract\r\n     */\r\n    createItems() {}\r\n\r\n    /**\r\n     * Create the `MenuButtons`s DOM element.\r\n     *\r\n     * @return {Element}\r\n     *         The element that gets created.\r\n     */\r\n    createEl() {\r\n      return super.createEl('div', {\r\n        className: this.buildWrapperCSSClass()\r\n      }, {});\r\n    }\r\n\r\n    /**\r\n     * Overwrites the `setIcon` method from `Component`.\r\n     * In this case, we want the icon to be appended to the menuButton.\r\n     *\r\n     * @param {string} name\r\n     *         The icon name to be added.\r\n     */\r\n    setIcon(name) {\r\n      super.setIcon(name, this.menuButton_.el_);\r\n    }\r\n\r\n    /**\r\n     * Allow sub components to stack CSS class names for the wrapper element\r\n     *\r\n     * @return {string}\r\n     *         The constructed wrapper DOM `className`\r\n     */\r\n    buildWrapperCSSClass() {\r\n      let menuButtonClass = 'vjs-menu-button';\r\n\r\n      // If the inline option is passed, we want to use different styles altogether.\r\n      if (this.options_.inline === true) {\r\n        menuButtonClass += '-inline';\r\n      } else {\r\n        menuButtonClass += '-popup';\r\n      }\r\n\r\n      // TODO: Fix the CSS so that this isn't necessary\r\n      const buttonClass = Button.prototype.buildCSSClass();\r\n      return `vjs-menu-button ${menuButtonClass} ${buttonClass} ${super.buildCSSClass()}`;\r\n    }\r\n\r\n    /**\r\n     * Builds the default DOM `className`.\r\n     *\r\n     * @return {string}\r\n     *         The DOM `className` for this object.\r\n     */\r\n    buildCSSClass() {\r\n      let menuButtonClass = 'vjs-menu-button';\r\n\r\n      // If the inline option is passed, we want to use different styles altogether.\r\n      if (this.options_.inline === true) {\r\n        menuButtonClass += '-inline';\r\n      } else {\r\n        menuButtonClass += '-popup';\r\n      }\r\n      return `vjs-menu-button ${menuButtonClass} ${super.buildCSSClass()}`;\r\n    }\r\n\r\n    /**\r\n     * Get or set the localized control text that will be used for accessibility.\r\n     *\r\n     * > NOTE: This will come from the internal `menuButton_` element.\r\n     *\r\n     * @param {string} [text]\r\n     *        Control text for element.\r\n     *\r\n     * @param {Element} [el=this.menuButton_.el()]\r\n     *        Element to set the title on.\r\n     *\r\n     * @return {string}\r\n     *         - The control text when getting\r\n     */\r\n    controlText(text, el = this.menuButton_.el()) {\r\n      return this.menuButton_.controlText(text, el);\r\n    }\r\n\r\n    /**\r\n     * Dispose of the `menu-button` and all child components.\r\n     */\r\n    dispose() {\r\n      this.handleMouseLeave();\r\n      super.dispose();\r\n    }\r\n\r\n    /**\r\n     * Handle a click on a `MenuButton`.\r\n     * See {@link ClickableComponent#handleClick} for instances where this is called.\r\n     *\r\n     * @param {Event} event\r\n     *        The `keydown`, `tap`, or `click` event that caused this function to be\r\n     *        called.\r\n     *\r\n     * @listens tap\r\n     * @listens click\r\n     */\r\n    handleClick(event) {\r\n      if (this.buttonPressed_) {\r\n        this.unpressButton();\r\n      } else {\r\n        this.pressButton();\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Handle `mouseleave` for `MenuButton`.\r\n     *\r\n     * @param {Event} event\r\n     *        The `mouseleave` event that caused this function to be called.\r\n     *\r\n     * @listens mouseleave\r\n     */\r\n    handleMouseLeave(event) {\r\n      this.removeClass('vjs-hover');\r\n      off(document, 'keyup', this.handleMenuKeyUp_);\r\n    }\r\n\r\n    /**\r\n     * Set the focus to the actual button, not to this element\r\n     */\r\n    focus() {\r\n      this.menuButton_.focus();\r\n    }\r\n\r\n    /**\r\n     * Remove the focus from the actual button, not this element\r\n     */\r\n    blur() {\r\n      this.menuButton_.blur();\r\n    }\r\n\r\n    /**\r\n     * Handle tab, escape, down arrow, and up arrow keys for `MenuButton`. See\r\n     * {@link ClickableComponent#handleKeyDown} for instances where this is called.\r\n     *\r\n     * @param {Event} event\r\n     *        The `keydown` event that caused this function to be called.\r\n     *\r\n     * @listens keydown\r\n     */\r\n    handleKeyDown(event) {\r\n      // Escape or Tab unpress the 'button'\r\n      if (event.key === 'Escape' || event.key === 'Tab') {\r\n        if (this.buttonPressed_) {\r\n          this.unpressButton();\r\n        }\r\n\r\n        // Don't preventDefault for Tab key - we still want to lose focus\r\n        if (!event.key === 'Tab') {\r\n          event.preventDefault();\r\n          // Set focus back to the menu button's button\r\n          this.menuButton_.focus();\r\n        }\r\n        // Up Arrow or Down Arrow also 'press' the button to open the menu\r\n      } else if (event.key === 'Up' || event.key === 'Down' && !(this.player_.options_.playerOptions.spatialNavigation && this.player_.options_.playerOptions.spatialNavigation.enabled)) {\r\n        if (!this.buttonPressed_) {\r\n          event.preventDefault();\r\n          this.pressButton();\r\n        }\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Handle a `keyup` event on a `MenuButton`. The listener for this is added in\r\n     * the constructor.\r\n     *\r\n     * @param {Event} event\r\n     *        Key press event\r\n     *\r\n     * @listens keyup\r\n     */\r\n    handleMenuKeyUp(event) {\r\n      // Escape hides popup menu\r\n      if (event.key === 'Escape' || event.key === 'Tab') {\r\n        this.removeClass('vjs-hover');\r\n      }\r\n    }\r\n\r\n    /**\r\n     * This method name now delegates to `handleSubmenuKeyDown`. This means\r\n     * anyone calling `handleSubmenuKeyPress` will not see their method calls\r\n     * stop working.\r\n     *\r\n     * @param {Event} event\r\n     *        The event that caused this function to be called.\r\n     */\r\n    handleSubmenuKeyPress(event) {\r\n      this.handleSubmenuKeyDown(event);\r\n    }\r\n\r\n    /**\r\n     * Handle a `keydown` event on a sub-menu. The listener for this is added in\r\n     * the constructor.\r\n     *\r\n     * @param {Event} event\r\n     *        Key press event\r\n     *\r\n     * @listens keydown\r\n     */\r\n    handleSubmenuKeyDown(event) {\r\n      // Escape or Tab unpress the 'button'\r\n      if (event.key === 'Escape' || event.key === 'Tab') {\r\n        if (this.buttonPressed_) {\r\n          this.unpressButton();\r\n        }\r\n        // Don't preventDefault for Tab key - we still want to lose focus\r\n        if (!event.key === 'Tab') {\r\n          event.preventDefault();\r\n          // Set focus back to the menu button's button\r\n          this.menuButton_.focus();\r\n        }\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Put the current `MenuButton` into a pressed state.\r\n     */\r\n    pressButton() {\r\n      if (this.enabled_) {\r\n        this.buttonPressed_ = true;\r\n        this.menu.show();\r\n        this.menu.lockShowing();\r\n        this.menuButton_.el_.setAttribute('aria-expanded', 'true');\r\n\r\n        // set the focus into the submenu, except on iOS where it is resulting in\r\n        // undesired scrolling behavior when the player is in an iframe\r\n        if (IS_IOS && isInFrame()) {\r\n          // Return early so that the menu isn't focused\r\n          return;\r\n        }\r\n        this.menu.focus();\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Take the current `MenuButton` out of a pressed state.\r\n     */\r\n    unpressButton() {\r\n      if (this.enabled_) {\r\n        this.buttonPressed_ = false;\r\n        this.menu.unlockShowing();\r\n        this.menu.hide();\r\n        this.menuButton_.el_.setAttribute('aria-expanded', 'false');\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Disable the `MenuButton`. Don't allow it to be clicked.\r\n     */\r\n    disable() {\r\n      this.unpressButton();\r\n      this.enabled_ = false;\r\n      this.addClass('vjs-disabled');\r\n      this.menuButton_.disable();\r\n    }\r\n\r\n    /**\r\n     * Enable the `MenuButton`. Allow it to be clicked.\r\n     */\r\n    enable() {\r\n      this.enabled_ = true;\r\n      this.removeClass('vjs-disabled');\r\n      this.menuButton_.enable();\r\n    }\r\n  }\r\n  Component$1.registerComponent('MenuButton', MenuButton);\r\n\r\n  /**\r\n   * @file track-button.js\r\n   */\r\n\r\n  /** @import Player from './player' */\r\n\r\n  /**\r\n   * The base class for buttons that toggle specific  track types (e.g. subtitles).\r\n   *\r\n   * @extends MenuButton\r\n   */\r\n  class TrackButton extends MenuButton {\r\n    /**\r\n     * Creates an instance of this class.\r\n     *\r\n     * @param {Player} player\r\n     *        The `Player` that this class should be attached to.\r\n     *\r\n     * @param {Object} [options]\r\n     *        The key/value store of player options.\r\n     */\r\n    constructor(player, options) {\r\n      const tracks = options.tracks;\r\n      super(player, options);\r\n      if (this.items.length <= 1) {\r\n        this.hide();\r\n      }\r\n      if (!tracks) {\r\n        return;\r\n      }\r\n      const updateHandler = bind_(this, this.update);\r\n      tracks.addEventListener('removetrack', updateHandler);\r\n      tracks.addEventListener('addtrack', updateHandler);\r\n      tracks.addEventListener('labelchange', updateHandler);\r\n      this.player_.on('ready', updateHandler);\r\n      this.player_.on('dispose', function () {\r\n        tracks.removeEventListener('removetrack', updateHandler);\r\n        tracks.removeEventListener('addtrack', updateHandler);\r\n        tracks.removeEventListener('labelchange', updateHandler);\r\n      });\r\n    }\r\n  }\r\n  Component$1.registerComponent('TrackButton', TrackButton);\r\n\r\n  /**\r\n   * @file menu-item.js\r\n   */\r\n\r\n  /** @import Player from '../player' */\r\n\r\n  /**\r\n   * The component for a menu item. `<li>`\r\n   *\r\n   * @extends ClickableComponent\r\n   */\r\n  class MenuItem extends ClickableComponent {\r\n    /**\r\n     * Creates an instance of the this class.\r\n     *\r\n     * @param {Player} player\r\n     *        The `Player` that this class should be attached to.\r\n     *\r\n     * @param {Object} [options={}]\r\n     *        The key/value store of player options.\r\n     *\r\n     */\r\n    constructor(player, options) {\r\n      super(player, options);\r\n      this.selectable = options.selectable;\r\n      this.isSelected_ = options.selected || false;\r\n      this.multiSelectable = options.multiSelectable;\r\n      this.selected(this.isSelected_);\r\n      if (this.selectable) {\r\n        if (this.multiSelectable) {\r\n          this.el_.setAttribute('role', 'menuitemcheckbox');\r\n        } else {\r\n          this.el_.setAttribute('role', 'menuitemradio');\r\n        }\r\n      } else {\r\n        this.el_.setAttribute('role', 'menuitem');\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Create the `MenuItem's DOM element\r\n     *\r\n     * @param {string} [type=li]\r\n     *        Element's node type, not actually used, always set to `li`.\r\n     *\r\n     * @param {Object} [props={}]\r\n     *        An object of properties that should be set on the element\r\n     *\r\n     * @param {Object} [attrs={}]\r\n     *        An object of attributes that should be set on the element\r\n     *\r\n     * @return {Element}\r\n     *         The element that gets created.\r\n     */\r\n    createEl(type, props, attrs) {\r\n      // The control is textual, not just an icon\r\n      this.nonIconControl = true;\r\n      const el = super.createEl('li', Object.assign({\r\n        className: 'vjs-menu-item',\r\n        tabIndex: -1\r\n      }, props), attrs);\r\n\r\n      // swap icon with menu item text.\r\n      const menuItemEl = createEl('span', {\r\n        className: 'vjs-menu-item-text',\r\n        textContent: this.localize(this.options_.label)\r\n      });\r\n\r\n      // If using SVG icons, the element with vjs-icon-placeholder will be added separately.\r\n      if (this.player_.options_.experimentalSvgIcons) {\r\n        el.appendChild(menuItemEl);\r\n      } else {\r\n        el.replaceChild(menuItemEl, el.querySelector('.vjs-icon-placeholder'));\r\n      }\r\n      return el;\r\n    }\r\n\r\n    /**\r\n     * Ignore keys which are used by the menu, but pass any other ones up. See\r\n     * {@link ClickableComponent#handleKeyDown} for instances where this is called.\r\n     *\r\n     * @param {KeyboardEvent} event\r\n     *        The `keydown` event that caused this function to be called.\r\n     *\r\n     * @listens keydown\r\n     */\r\n    handleKeyDown(event) {\r\n      if (!['Tab', 'Escape', 'ArrowUp', 'ArrowLeft', 'ArrowRight', 'ArrowDown'].includes(event.key)) {\r\n        // Pass keydown handling up for unused keys\r\n        super.handleKeyDown(event);\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Any click on a `MenuItem` puts it into the selected state.\r\n     * See {@link ClickableComponent#handleClick} for instances where this is called.\r\n     *\r\n     * @param {Event} event\r\n     *        The `keydown`, `tap`, or `click` event that caused this function to be\r\n     *        called.\r\n     *\r\n     * @listens tap\r\n     * @listens click\r\n     */\r\n    handleClick(event) {\r\n      this.selected(true);\r\n    }\r\n\r\n    /**\r\n     * Set the state for this menu item as selected or not.\r\n     *\r\n     * @param {boolean} selected\r\n     *        if the menu item is selected or not\r\n     */\r\n    selected(selected) {\r\n      if (this.selectable) {\r\n        if (selected) {\r\n          this.addClass('vjs-selected');\r\n          this.el_.setAttribute('aria-checked', 'true');\r\n          // aria-checked isn't fully supported by browsers/screen readers,\r\n          // so indicate selected state to screen reader in the control text.\r\n          this.controlText(', selected');\r\n          this.isSelected_ = true;\r\n        } else {\r\n          this.removeClass('vjs-selected');\r\n          this.el_.setAttribute('aria-checked', 'false');\r\n          // Indicate un-selected state to screen reader\r\n          this.controlText('');\r\n          this.isSelected_ = false;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  Component$1.registerComponent('MenuItem', MenuItem);\r\n\r\n  /**\r\n   * @file text-track-menu-item.js\r\n   */\r\n\r\n  /** @import Player from '../../player' */\r\n\r\n  /**\r\n   * The specific menu item type for selecting a language within a text track kind\r\n   *\r\n   * @extends MenuItem\r\n   */\r\n  class TextTrackMenuItem extends MenuItem {\r\n    /**\r\n     * Creates an instance of this class.\r\n     *\r\n     * @param {Player} player\r\n     *        The `Player` that this class should be attached to.\r\n     *\r\n     * @param {Object} [options]\r\n     *        The key/value store of player options.\r\n     */\r\n    constructor(player, options) {\r\n      const track = options.track;\r\n      const tracks = player.textTracks();\r\n\r\n      // Modify options for parent MenuItem class's init.\r\n      options.label = track.label || track.language || 'Unknown';\r\n      options.selected = track.mode === 'showing';\r\n      super(player, options);\r\n      this.track = track;\r\n      // Determine the relevant kind(s) of tracks for this component and filter\r\n      // out empty kinds.\r\n      this.kinds = (options.kinds || [options.kind || this.track.kind]).filter(Boolean);\r\n      const changeHandler = (...args) => {\r\n        this.handleTracksChange.apply(this, args);\r\n      };\r\n      const selectedLanguageChangeHandler = (...args) => {\r\n        this.handleSelectedLanguageChange.apply(this, args);\r\n      };\r\n      player.on(['loadstart', 'texttrackchange'], changeHandler);\r\n      tracks.addEventListener('change', changeHandler);\r\n      tracks.addEventListener('selectedlanguagechange', selectedLanguageChangeHandler);\r\n      this.on('dispose', function () {\r\n        player.off(['loadstart', 'texttrackchange'], changeHandler);\r\n        tracks.removeEventListener('change', changeHandler);\r\n        tracks.removeEventListener('selectedlanguagechange', selectedLanguageChangeHandler);\r\n      });\r\n\r\n      // iOS7 doesn't dispatch change events to TextTrackLists when an\r\n      // associated track's mode changes. Without something like\r\n      // Object.observe() (also not present on iOS7), it's not\r\n      // possible to detect changes to the mode attribute and polyfill\r\n      // the change event. As a poor substitute, we manually dispatch\r\n      // change events whenever the controls modify the mode.\r\n      if (tracks.onchange === undefined) {\r\n        let event;\r\n        this.on(['tap', 'click'], function () {\r\n          if (typeof window.Event !== 'object') {\r\n            // Android 2.3 throws an Illegal Constructor error for window.Event\r\n            try {\r\n              event = new window.Event('change');\r\n            } catch (err) {\r\n              // continue regardless of error\r\n            }\r\n          }\r\n          if (!event) {\r\n            event = document.createEvent('Event');\r\n            event.initEvent('change', true, true);\r\n          }\r\n          tracks.dispatchEvent(event);\r\n        });\r\n      }\r\n\r\n      // set the default state based on current tracks\r\n      this.handleTracksChange();\r\n    }\r\n\r\n    /**\r\n     * This gets called when an `TextTrackMenuItem` is \"clicked\". See\r\n     * {@link ClickableComponent} for more detailed information on what a click can be.\r\n     *\r\n     * @param {Event} event\r\n     *        The `keydown`, `tap`, or `click` event that caused this function to be\r\n     *        called.\r\n     *\r\n     * @listens tap\r\n     * @listens click\r\n     */\r\n    handleClick(event) {\r\n      const referenceTrack = this.track;\r\n      const tracks = this.player_.textTracks();\r\n      super.handleClick(event);\r\n      if (!tracks) {\r\n        return;\r\n      }\r\n      for (let i = 0; i < tracks.length; i++) {\r\n        const track = tracks[i];\r\n\r\n        // If the track from the text tracks list is not of the right kind,\r\n        // skip it. We do not want to affect tracks of incompatible kind(s).\r\n        if (this.kinds.indexOf(track.kind) === -1) {\r\n          continue;\r\n        }\r\n\r\n        // If this text track is the component's track and it is not showing,\r\n        // set it to showing.\r\n        if (track === referenceTrack) {\r\n          if (track.mode !== 'showing') {\r\n            track.mode = 'showing';\r\n          }\r\n\r\n          // If this text track is not the component's track and it is not\r\n          // disabled, set it to disabled.\r\n        } else if (track.mode !== 'disabled') {\r\n          track.mode = 'disabled';\r\n        }\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Handle text track list change\r\n     *\r\n     * @param {Event} event\r\n     *        The `change` event that caused this function to be called.\r\n     *\r\n     * @listens TextTrackList#change\r\n     */\r\n    handleTracksChange(event) {\r\n      const shouldBeSelected = this.track.mode === 'showing';\r\n\r\n      // Prevent redundant selected() calls because they may cause\r\n      // screen readers to read the appended control text unnecessarily\r\n      if (shouldBeSelected !== this.isSelected_) {\r\n        this.selected(shouldBeSelected);\r\n      }\r\n    }\r\n    handleSelectedLanguageChange(event) {\r\n      if (this.track.mode === 'showing') {\r\n        const selectedLanguage = this.player_.cache_.selectedLanguage;\r\n\r\n        // Don't replace the kind of track across the same language\r\n        if (selectedLanguage && selectedLanguage.enabled && selectedLanguage.language === this.track.language && selectedLanguage.kind !== this.track.kind) {\r\n          return;\r\n        }\r\n        this.player_.cache_.selectedLanguage = {\r\n          enabled: true,\r\n          language: this.track.language,\r\n          kind: this.track.kind\r\n        };\r\n      }\r\n    }\r\n    dispose() {\r\n      // remove reference to track object on dispose\r\n      this.track = null;\r\n      super.dispose();\r\n    }\r\n  }\r\n  Component$1.registerComponent('TextTrackMenuItem', TextTrackMenuItem);\r\n\r\n  /**\r\n   * @file off-text-track-menu-item.js\r\n   */\r\n\r\n  /** @import Player from '../../player' */\r\n\r\n  /**\r\n   * A special menu item for turning off a specific type of text track\r\n   *\r\n   * @extends TextTrackMenuItem\r\n   */\r\n  class OffTextTrackMenuItem extends TextTrackMenuItem {\r\n    /**\r\n     * Creates an instance of this class.\r\n     *\r\n     * @param {Player} player\r\n     *        The `Player` that this class should be attached to.\r\n     *\r\n     * @param {Object} [options]\r\n     *        The key/value store of player options.\r\n     */\r\n    constructor(player, options) {\r\n      // Create pseudo track info\r\n      // Requires options['kind']\r\n      options.track = {\r\n        player,\r\n        // it is no longer necessary to store `kind` or `kinds` on the track itself\r\n        // since they are now stored in the `kinds` property of all instances of\r\n        // TextTrackMenuItem, but this will remain for backwards compatibility\r\n        kind: options.kind,\r\n        kinds: options.kinds,\r\n        default: false,\r\n        mode: 'disabled'\r\n      };\r\n      if (!options.kinds) {\r\n        options.kinds = [options.kind];\r\n      }\r\n      if (options.label) {\r\n        options.track.label = options.label;\r\n      } else {\r\n        options.track.label = options.kinds.join(' and ') + ' off';\r\n      }\r\n\r\n      // MenuItem is selectable\r\n      options.selectable = true;\r\n      // MenuItem is NOT multiSelectable (i.e. only one can be marked \"selected\" at a time)\r\n      options.multiSelectable = false;\r\n      super(player, options);\r\n    }\r\n\r\n    /**\r\n     * Handle text track change\r\n     *\r\n     * @param {Event} event\r\n     *        The event that caused this function to run\r\n     */\r\n    handleTracksChange(event) {\r\n      const tracks = this.player().textTracks();\r\n      let shouldBeSelected = true;\r\n      for (let i = 0, l = tracks.length; i < l; i++) {\r\n        const track = tracks[i];\r\n        if (this.options_.kinds.indexOf(track.kind) > -1 && track.mode === 'showing') {\r\n          shouldBeSelected = false;\r\n          break;\r\n        }\r\n      }\r\n\r\n      // Prevent redundant selected() calls because they may cause\r\n      // screen readers to read the appended control text unnecessarily\r\n      if (shouldBeSelected !== this.isSelected_) {\r\n        this.selected(shouldBeSelected);\r\n      }\r\n    }\r\n    handleSelectedLanguageChange(event) {\r\n      const tracks = this.player().textTracks();\r\n      let allHidden = true;\r\n      for (let i = 0, l = tracks.length; i < l; i++) {\r\n        const track = tracks[i];\r\n        if (['captions', 'descriptions', 'subtitles'].indexOf(track.kind) > -1 && track.mode === 'showing') {\r\n          allHidden = false;\r\n          break;\r\n        }\r\n      }\r\n      if (allHidden) {\r\n        this.player_.cache_.selectedLanguage = {\r\n          enabled: false\r\n        };\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Update control text and label on languagechange\r\n     */\r\n    handleLanguagechange() {\r\n      this.$('.vjs-menu-item-text').textContent = this.player_.localize(this.options_.label);\r\n      super.handleLanguagechange();\r\n    }\r\n  }\r\n  Component$1.registerComponent('OffTextTrackMenuItem', OffTextTrackMenuItem);\r\n\r\n  /**\r\n   * @file text-track-button.js\r\n   */\r\n\r\n  /** @import Player from '../../player' */\r\n\r\n  /**\r\n   * The base class for buttons that toggle specific text track types (e.g. subtitles)\r\n   *\r\n   * @extends MenuButton\r\n   */\r\n  class TextTrackButton extends TrackButton {\r\n    /**\r\n     * Creates an instance of this class.\r\n     *\r\n     * @param {Player} player\r\n     *        The `Player` that this class should be attached to.\r\n     *\r\n     * @param {Object} [options={}]\r\n     *        The key/value store of player options.\r\n     */\r\n    constructor(player, options = {}) {\r\n      options.tracks = player.textTracks();\r\n      super(player, options);\r\n    }\r\n\r\n    /**\r\n     * Create a menu item for each text track\r\n     *\r\n     * @param {TextTrackMenuItem[]} [items=[]]\r\n     *        Existing array of items to use during creation\r\n     *\r\n     * @return {TextTrackMenuItem[]}\r\n     *         Array of menu items that were created\r\n     */\r\n    createItems(items = [], TrackMenuItem = TextTrackMenuItem) {\r\n      // Label is an override for the [track] off label\r\n      // USed to localise captions/subtitles\r\n      let label;\r\n      if (this.label_) {\r\n        label = `${this.label_} off`;\r\n      }\r\n      // Add an OFF menu item to turn all tracks off\r\n      items.push(new OffTextTrackMenuItem(this.player_, {\r\n        kinds: this.kinds_,\r\n        kind: this.kind_,\r\n        label\r\n      }));\r\n      this.hideThreshold_ += 1;\r\n      const tracks = this.player_.textTracks();\r\n      if (!Array.isArray(this.kinds_)) {\r\n        this.kinds_ = [this.kind_];\r\n      }\r\n      for (let i = 0; i < tracks.length; i++) {\r\n        const track = tracks[i];\r\n\r\n        // only add tracks that are of an appropriate kind and have a label\r\n        if (this.kinds_.indexOf(track.kind) > -1) {\r\n          const item = new TrackMenuItem(this.player_, {\r\n            track,\r\n            kinds: this.kinds_,\r\n            kind: this.kind_,\r\n            // MenuItem is selectable\r\n            selectable: true,\r\n            // MenuItem is NOT multiSelectable (i.e. only one can be marked \"selected\" at a time)\r\n            multiSelectable: false\r\n          });\r\n          item.addClass(`vjs-${track.kind}-menu-item`);\r\n          items.push(item);\r\n        }\r\n      }\r\n      return items;\r\n    }\r\n  }\r\n  Component$1.registerComponent('TextTrackButton', TextTrackButton);\r\n\r\n  /**\r\n   * @file chapters-track-menu-item.js\r\n   */\r\n\r\n  /** @import Player from '../../player' */\r\n\r\n  /**\r\n   * The chapter track menu item\r\n   *\r\n   * @extends MenuItem\r\n   */\r\n  class ChaptersTrackMenuItem extends MenuItem {\r\n    /**\r\n     * Creates an instance of this class.\r\n     *\r\n     * @param {Player} player\r\n     *        The `Player` that this class should be attached to.\r\n     *\r\n     * @param {Object} [options]\r\n     *        The key/value store of player options.\r\n     */\r\n    constructor(player, options) {\r\n      const track = options.track;\r\n      const cue = options.cue;\r\n      const currentTime = player.currentTime();\r\n\r\n      // Modify options for parent MenuItem class's init.\r\n      options.selectable = true;\r\n      options.multiSelectable = false;\r\n      options.label = cue.text;\r\n      options.selected = cue.startTime <= currentTime && currentTime < cue.endTime;\r\n      super(player, options);\r\n      this.track = track;\r\n      this.cue = cue;\r\n    }\r\n\r\n    /**\r\n     * This gets called when an `ChaptersTrackMenuItem` is \"clicked\". See\r\n     * {@link ClickableComponent} for more detailed information on what a click can be.\r\n     *\r\n     * @param {Event} [event]\r\n     *        The `keydown`, `tap`, or `click` event that caused this function to be\r\n     *        called.\r\n     *\r\n     * @listens tap\r\n     * @listens click\r\n     */\r\n    handleClick(event) {\r\n      super.handleClick();\r\n      this.player_.currentTime(this.cue.startTime);\r\n    }\r\n  }\r\n  Component$1.registerComponent('ChaptersTrackMenuItem', ChaptersTrackMenuItem);\r\n\r\n  /**\r\n   * @file chapters-button.js\r\n   */\r\n\r\n  /** @import Player from '../../player' */\r\n  /** @import Menu from '../../menu/menu' */\r\n  /** @import TextTrack from '../../tracks/text-track' */\r\n  /** @import TextTrackMenuItem from '../text-track-controls/text-track-menu-item' */\r\n\r\n  /**\r\n   * The button component for toggling and selecting chapters\r\n   * Chapters act much differently than other text tracks\r\n   * Cues are navigation vs. other tracks of alternative languages\r\n   *\r\n   * @extends TextTrackButton\r\n   */\r\n  class ChaptersButton extends TextTrackButton {\r\n    /**\r\n     * Creates an instance of this class.\r\n     *\r\n     * @param {Player} player\r\n     *        The `Player` that this class should be attached to.\r\n     *\r\n     * @param {Object} [options]\r\n     *        The key/value store of player options.\r\n     *\r\n     * @param {Function} [ready]\r\n     *        The function to call when this function is ready.\r\n     */\r\n    constructor(player, options, ready) {\r\n      super(player, options, ready);\r\n      this.setIcon('chapters');\r\n      this.selectCurrentItem_ = () => {\r\n        this.items.forEach(item => {\r\n          item.selected(this.track_.activeCues[0] === item.cue);\r\n        });\r\n      };\r\n    }\r\n\r\n    /**\r\n     * Builds the default DOM `className`.\r\n     *\r\n     * @return {string}\r\n     *         The DOM `className` for this object.\r\n     */\r\n    buildCSSClass() {\r\n      return `vjs-chapters-button ${super.buildCSSClass()}`;\r\n    }\r\n    buildWrapperCSSClass() {\r\n      return `vjs-chapters-button ${super.buildWrapperCSSClass()}`;\r\n    }\r\n\r\n    /**\r\n     * Update the menu based on the current state of its items.\r\n     *\r\n     * @param {Event} [event]\r\n     *        An event that triggered this function to run.\r\n     *\r\n     * @listens TextTrackList#addtrack\r\n     * @listens TextTrackList#removetrack\r\n     * @listens TextTrackList#change\r\n     */\r\n    update(event) {\r\n      if (event && event.track && event.track.kind !== 'chapters') {\r\n        return;\r\n      }\r\n      const track = this.findChaptersTrack();\r\n      if (track !== this.track_) {\r\n        this.setTrack(track);\r\n        super.update();\r\n      } else if (!this.items || track && track.cues && track.cues.length !== this.items.length) {\r\n        // Update the menu initially or if the number of cues has changed since set\r\n        super.update();\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Set the currently selected track for the chapters button.\r\n     *\r\n     * @param {TextTrack} track\r\n     *        The new track to select. Nothing will change if this is the currently selected\r\n     *        track.\r\n     */\r\n    setTrack(track) {\r\n      if (this.track_ === track) {\r\n        return;\r\n      }\r\n      if (!this.updateHandler_) {\r\n        this.updateHandler_ = this.update.bind(this);\r\n      }\r\n\r\n      // here this.track_ refers to the old track instance\r\n      if (this.track_) {\r\n        const remoteTextTrackEl = this.player_.remoteTextTrackEls().getTrackElementByTrack_(this.track_);\r\n        if (remoteTextTrackEl) {\r\n          remoteTextTrackEl.removeEventListener('load', this.updateHandler_);\r\n        }\r\n        this.track_.removeEventListener('cuechange', this.selectCurrentItem_);\r\n        this.track_ = null;\r\n      }\r\n      this.track_ = track;\r\n\r\n      // here this.track_ refers to the new track instance\r\n      if (this.track_) {\r\n        this.track_.mode = 'hidden';\r\n        const remoteTextTrackEl = this.player_.remoteTextTrackEls().getTrackElementByTrack_(this.track_);\r\n        if (remoteTextTrackEl) {\r\n          remoteTextTrackEl.addEventListener('load', this.updateHandler_);\r\n        }\r\n        this.track_.addEventListener('cuechange', this.selectCurrentItem_);\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Find the track object that is currently in use by this ChaptersButton\r\n     *\r\n     * @return {TextTrack|undefined}\r\n     *         The current track or undefined if none was found.\r\n     */\r\n    findChaptersTrack() {\r\n      const tracks = this.player_.textTracks() || [];\r\n      for (let i = tracks.length - 1; i >= 0; i--) {\r\n        // We will always choose the last track as our chaptersTrack\r\n        const track = tracks[i];\r\n        if (track.kind === this.kind_) {\r\n          return track;\r\n        }\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Get the caption for the ChaptersButton based on the track label. This will also\r\n     * use the current tracks localized kind as a fallback if a label does not exist.\r\n     *\r\n     * @return {string}\r\n     *         The tracks current label or the localized track kind.\r\n     */\r\n    getMenuCaption() {\r\n      if (this.track_ && this.track_.label) {\r\n        return this.track_.label;\r\n      }\r\n      return this.localize(toTitleCase$1(this.kind_));\r\n    }\r\n\r\n    /**\r\n     * Create menu from chapter track\r\n     *\r\n     * @return {Menu}\r\n     *         New menu for the chapter buttons\r\n     */\r\n    createMenu() {\r\n      this.options_.title = this.getMenuCaption();\r\n      return super.createMenu();\r\n    }\r\n\r\n    /**\r\n     * Create a menu item for each text track\r\n     *\r\n     * @return  {TextTrackMenuItem[]}\r\n     *         Array of menu items\r\n     */\r\n    createItems() {\r\n      const items = [];\r\n      if (!this.track_) {\r\n        return items;\r\n      }\r\n      const cues = this.track_.cues;\r\n      if (!cues) {\r\n        return items;\r\n      }\r\n      for (let i = 0, l = cues.length; i < l; i++) {\r\n        const cue = cues[i];\r\n        const mi = new ChaptersTrackMenuItem(this.player_, {\r\n          track: this.track_,\r\n          cue\r\n        });\r\n        items.push(mi);\r\n      }\r\n      return items;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * `kind` of TextTrack to look for to associate it with this menu.\r\n   *\r\n   * @type {string}\r\n   * @private\r\n   */\r\n  ChaptersButton.prototype.kind_ = 'chapters';\r\n\r\n  /**\r\n   * The text that should display over the `ChaptersButton`s controls. Added for localization.\r\n   *\r\n   * @type {string}\r\n   * @protected\r\n   */\r\n  ChaptersButton.prototype.controlText_ = 'Chapters';\r\n  Component$1.registerComponent('ChaptersButton', ChaptersButton);\r\n\r\n  /**\r\n   * @file descriptions-button.js\r\n   */\r\n\r\n  /** @import Player from '../../player' */\r\n\r\n  /**\r\n   * The button component for toggling and selecting descriptions\r\n   *\r\n   * @extends TextTrackButton\r\n   */\r\n  class DescriptionsButton extends TextTrackButton {\r\n    /**\r\n     * Creates an instance of this class.\r\n     *\r\n     * @param {Player} player\r\n     *        The `Player` that this class should be attached to.\r\n     *\r\n     * @param {Object} [options]\r\n     *        The key/value store of player options.\r\n     *\r\n     * @param {Function} [ready]\r\n     *        The function to call when this component is ready.\r\n     */\r\n    constructor(player, options, ready) {\r\n      super(player, options, ready);\r\n      this.setIcon('audio-description');\r\n      const tracks = player.textTracks();\r\n      const changeHandler = bind_(this, this.handleTracksChange);\r\n      tracks.addEventListener('change', changeHandler);\r\n      this.on('dispose', function () {\r\n        tracks.removeEventListener('change', changeHandler);\r\n      });\r\n    }\r\n\r\n    /**\r\n     * Handle text track change\r\n     *\r\n     * @param {Event} event\r\n     *        The event that caused this function to run\r\n     *\r\n     * @listens TextTrackList#change\r\n     */\r\n    handleTracksChange(event) {\r\n      const tracks = this.player().textTracks();\r\n      let disabled = false;\r\n\r\n      // Check whether a track of a different kind is showing\r\n      for (let i = 0, l = tracks.length; i < l; i++) {\r\n        const track = tracks[i];\r\n        if (track.kind !== this.kind_ && track.mode === 'showing') {\r\n          disabled = true;\r\n          break;\r\n        }\r\n      }\r\n\r\n      // If another track is showing, disable this menu button\r\n      if (disabled) {\r\n        this.disable();\r\n      } else {\r\n        this.enable();\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Builds the default DOM `className`.\r\n     *\r\n     * @return {string}\r\n     *         The DOM `className` for this object.\r\n     */\r\n    buildCSSClass() {\r\n      return `vjs-descriptions-button ${super.buildCSSClass()}`;\r\n    }\r\n    buildWrapperCSSClass() {\r\n      return `vjs-descriptions-button ${super.buildWrapperCSSClass()}`;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * `kind` of TextTrack to look for to associate it with this menu.\r\n   *\r\n   * @type {string}\r\n   * @private\r\n   */\r\n  DescriptionsButton.prototype.kind_ = 'descriptions';\r\n\r\n  /**\r\n   * The text that should display over the `DescriptionsButton`s controls. Added for localization.\r\n   *\r\n   * @type {string}\r\n   * @protected\r\n   */\r\n  DescriptionsButton.prototype.controlText_ = 'Descriptions';\r\n  Component$1.registerComponent('DescriptionsButton', DescriptionsButton);\r\n\r\n  /**\r\n   * @file subtitles-button.js\r\n   */\r\n\r\n  /** @import Player from '../../player' */\r\n\r\n  /**\r\n   * The button component for toggling and selecting subtitles\r\n   *\r\n   * @extends TextTrackButton\r\n   */\r\n  class SubtitlesButton extends TextTrackButton {\r\n    /**\r\n     * Creates an instance of this class.\r\n     *\r\n     * @param {Player} player\r\n     *        The `Player` that this class should be attached to.\r\n     *\r\n     * @param {Object} [options]\r\n     *        The key/value store of player options.\r\n     *\r\n     * @param {Function} [ready]\r\n     *        The function to call when this component is ready.\r\n     */\r\n    constructor(player, options, ready) {\r\n      super(player, options, ready);\r\n      this.setIcon('subtitles');\r\n    }\r\n\r\n    /**\r\n     * Builds the default DOM `className`.\r\n     *\r\n     * @return {string}\r\n     *         The DOM `className` for this object.\r\n     */\r\n    buildCSSClass() {\r\n      return `vjs-subtitles-button ${super.buildCSSClass()}`;\r\n    }\r\n    buildWrapperCSSClass() {\r\n      return `vjs-subtitles-button ${super.buildWrapperCSSClass()}`;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * `kind` of TextTrack to look for to associate it with this menu.\r\n   *\r\n   * @type {string}\r\n   * @private\r\n   */\r\n  SubtitlesButton.prototype.kind_ = 'subtitles';\r\n\r\n  /**\r\n   * The text that should display over the `SubtitlesButton`s controls. Added for localization.\r\n   *\r\n   * @type {string}\r\n   * @protected\r\n   */\r\n  SubtitlesButton.prototype.controlText_ = 'Subtitles';\r\n  Component$1.registerComponent('SubtitlesButton', SubtitlesButton);\r\n\r\n  /**\r\n   * @file caption-settings-menu-item.js\r\n   */\r\n\r\n  /** @import Player from '../../player' */\r\n\r\n  /**\r\n   * The menu item for caption track settings menu\r\n   *\r\n   * @extends TextTrackMenuItem\r\n   */\r\n  class CaptionSettingsMenuItem extends TextTrackMenuItem {\r\n    /**\r\n     * Creates an instance of this class.\r\n     *\r\n     * @param {Player} player\r\n     *        The `Player` that this class should be attached to.\r\n     *\r\n     * @param {Object} [options]\r\n     *        The key/value store of player options.\r\n     */\r\n    constructor(player, options) {\r\n      options.track = {\r\n        player,\r\n        kind: options.kind,\r\n        label: options.kind + ' settings',\r\n        selectable: false,\r\n        default: false,\r\n        mode: 'disabled'\r\n      };\r\n\r\n      // CaptionSettingsMenuItem has no concept of 'selected'\r\n      options.selectable = false;\r\n      options.name = 'CaptionSettingsMenuItem';\r\n      super(player, options);\r\n      this.addClass('vjs-texttrack-settings');\r\n      this.controlText(', opens ' + options.kind + ' settings dialog');\r\n    }\r\n\r\n    /**\r\n     * This gets called when an `CaptionSettingsMenuItem` is \"clicked\". See\r\n     * {@link ClickableComponent} for more detailed information on what a click can be.\r\n     *\r\n     * @param {Event} [event]\r\n     *        The `keydown`, `tap`, or `click` event that caused this function to be\r\n     *        called.\r\n     *\r\n     * @listens tap\r\n     * @listens click\r\n     */\r\n    handleClick(event) {\r\n      this.player().getChild('textTrackSettings').open();\r\n    }\r\n\r\n    /**\r\n     * Update control text and label on languagechange\r\n     */\r\n    handleLanguagechange() {\r\n      this.$('.vjs-menu-item-text').textContent = this.player_.localize(this.options_.kind + ' settings');\r\n      super.handleLanguagechange();\r\n    }\r\n  }\r\n  Component$1.registerComponent('CaptionSettingsMenuItem', CaptionSettingsMenuItem);\r\n\r\n  /**\r\n   * @file captions-button.js\r\n   */\r\n\r\n  /** @import Player from '../../player' */\r\n\r\n  /**\r\n   * The button component for toggling and selecting captions\r\n   *\r\n   * @extends TextTrackButton\r\n   */\r\n  class CaptionsButton extends TextTrackButton {\r\n    /**\r\n     * Creates an instance of this class.\r\n     *\r\n     * @param {Player} player\r\n     *        The `Player` that this class should be attached to.\r\n     *\r\n     * @param {Object} [options]\r\n     *        The key/value store of player options.\r\n     *\r\n     * @param {Function} [ready]\r\n     *        The function to call when this component is ready.\r\n     */\r\n    constructor(player, options, ready) {\r\n      super(player, options, ready);\r\n      this.setIcon('captions');\r\n    }\r\n\r\n    /**\r\n     * Builds the default DOM `className`.\r\n     *\r\n     * @return {string}\r\n     *         The DOM `className` for this object.\r\n     */\r\n    buildCSSClass() {\r\n      return `vjs-captions-button ${super.buildCSSClass()}`;\r\n    }\r\n    buildWrapperCSSClass() {\r\n      return `vjs-captions-button ${super.buildWrapperCSSClass()}`;\r\n    }\r\n\r\n    /**\r\n     * Create caption menu items\r\n     *\r\n     * @return {CaptionSettingsMenuItem[]}\r\n     *         The array of current menu items.\r\n     */\r\n    createItems() {\r\n      const items = [];\r\n      if (!(this.player().tech_ && this.player().tech_.featuresNativeTextTracks) && this.player().getChild('textTrackSettings')) {\r\n        items.push(new CaptionSettingsMenuItem(this.player_, {\r\n          kind: this.kind_\r\n        }));\r\n        this.hideThreshold_ += 1;\r\n      }\r\n      return super.createItems(items);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * `kind` of TextTrack to look for to associate it with this menu.\r\n   *\r\n   * @type {string}\r\n   * @private\r\n   */\r\n  CaptionsButton.prototype.kind_ = 'captions';\r\n\r\n  /**\r\n   * The text that should display over the `CaptionsButton`s controls. Added for localization.\r\n   *\r\n   * @type {string}\r\n   * @protected\r\n   */\r\n  CaptionsButton.prototype.controlText_ = 'Captions';\r\n  Component$1.registerComponent('CaptionsButton', CaptionsButton);\r\n\r\n  /**\r\n   * @file subs-caps-menu-item.js\r\n   */\r\n\r\n  /**\r\n   * SubsCapsMenuItem has an [cc] icon to distinguish captions from subtitles\r\n   * in the SubsCapsMenu.\r\n   *\r\n   * @extends TextTrackMenuItem\r\n   */\r\n  class SubsCapsMenuItem extends TextTrackMenuItem {\r\n    createEl(type, props, attrs) {\r\n      const el = super.createEl(type, props, attrs);\r\n      const parentSpan = el.querySelector('.vjs-menu-item-text');\r\n      if (this.options_.track.kind === 'captions') {\r\n        if (this.player_.options_.experimentalSvgIcons) {\r\n          this.setIcon('captions', el);\r\n        } else {\r\n          parentSpan.appendChild(createEl('span', {\r\n            className: 'vjs-icon-placeholder'\r\n          }, {\r\n            'aria-hidden': true\r\n          }));\r\n        }\r\n        parentSpan.appendChild(createEl('span', {\r\n          className: 'vjs-control-text',\r\n          // space added as the text will visually flow with the\r\n          // label\r\n          textContent: ` ${this.localize('Captions')}`\r\n        }));\r\n      }\r\n      return el;\r\n    }\r\n  }\r\n  Component$1.registerComponent('SubsCapsMenuItem', SubsCapsMenuItem);\r\n\r\n  /**\r\n   * @file sub-caps-button.js\r\n   */\r\n\r\n  /** @import Player from '../../player' */\r\n\r\n  /**\r\n   * The button component for toggling and selecting captions and/or subtitles\r\n   *\r\n   * @extends TextTrackButton\r\n   */\r\n  class SubsCapsButton extends TextTrackButton {\r\n    /**\r\n     * Creates an instance of this class.\r\n     *\r\n     * @param {Player} player\r\n     *        The `Player` that this class should be attached to.\r\n     *\r\n     * @param {Object} [options]\r\n     *        The key/value store of player options.\r\n     *\r\n     * @param {Function} [ready]\r\n     *        The function to call when this component is ready.\r\n     */\r\n    constructor(player, options = {}) {\r\n      super(player, options);\r\n\r\n      // Although North America uses \"captions\" in most cases for\r\n      // \"captions and subtitles\" other locales use \"subtitles\"\r\n      this.label_ = 'subtitles';\r\n      this.setIcon('subtitles');\r\n      if (['en', 'en-us', 'en-ca', 'fr-ca'].indexOf(this.player_.language_) > -1) {\r\n        this.label_ = 'captions';\r\n        this.setIcon('captions');\r\n      }\r\n      this.menuButton_.controlText(toTitleCase$1(this.label_));\r\n    }\r\n\r\n    /**\r\n     * Builds the default DOM `className`.\r\n     *\r\n     * @return {string}\r\n     *         The DOM `className` for this object.\r\n     */\r\n    buildCSSClass() {\r\n      return `vjs-subs-caps-button ${super.buildCSSClass()}`;\r\n    }\r\n    buildWrapperCSSClass() {\r\n      return `vjs-subs-caps-button ${super.buildWrapperCSSClass()}`;\r\n    }\r\n\r\n    /**\r\n     * Create caption/subtitles menu items\r\n     *\r\n     * @return {CaptionSettingsMenuItem[]}\r\n     *         The array of current menu items.\r\n     */\r\n    createItems() {\r\n      let items = [];\r\n      if (!(this.player().tech_ && this.player().tech_.featuresNativeTextTracks) && this.player().getChild('textTrackSettings')) {\r\n        items.push(new CaptionSettingsMenuItem(this.player_, {\r\n          kind: this.label_\r\n        }));\r\n        this.hideThreshold_ += 1;\r\n      }\r\n      items = super.createItems(items, SubsCapsMenuItem);\r\n      return items;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * `kind`s of TextTrack to look for to associate it with this menu.\r\n   *\r\n   * @type {array}\r\n   * @private\r\n   */\r\n  SubsCapsButton.prototype.kinds_ = ['captions', 'subtitles'];\r\n\r\n  /**\r\n   * The text that should display over the `SubsCapsButton`s controls.\r\n   *\r\n   *\r\n   * @type {string}\r\n   * @protected\r\n   */\r\n  SubsCapsButton.prototype.controlText_ = 'Subtitles';\r\n  Component$1.registerComponent('SubsCapsButton', SubsCapsButton);\r\n\r\n  /**\r\n   * @file audio-track-menu-item.js\r\n   */\r\n\r\n  /** @import Player from '../../player' */\r\n\r\n  /**\r\n   * An {@link AudioTrack} {@link MenuItem}\r\n   *\r\n   * @extends MenuItem\r\n   */\r\n  class AudioTrackMenuItem extends MenuItem {\r\n    /**\r\n     * Creates an instance of this class.\r\n     *\r\n     * @param {Player} player\r\n     *        The `Player` that this class should be attached to.\r\n     *\r\n     * @param {Object} [options]\r\n     *        The key/value store of player options.\r\n     */\r\n    constructor(player, options) {\r\n      const track = options.track;\r\n      const tracks = player.audioTracks();\r\n\r\n      // Modify options for parent MenuItem class's init.\r\n      options.label = track.label || track.language || 'Unknown';\r\n      options.selected = track.enabled;\r\n      super(player, options);\r\n      this.track = track;\r\n      this.addClass(`vjs-${track.kind}-menu-item`);\r\n      const changeHandler = (...args) => {\r\n        this.handleTracksChange.apply(this, args);\r\n      };\r\n      tracks.addEventListener('change', changeHandler);\r\n      this.on('dispose', () => {\r\n        tracks.removeEventListener('change', changeHandler);\r\n      });\r\n    }\r\n    createEl(type, props, attrs) {\r\n      const el = super.createEl(type, props, attrs);\r\n      const parentSpan = el.querySelector('.vjs-menu-item-text');\r\n      if (['main-desc', 'descriptions'].indexOf(this.options_.track.kind) >= 0) {\r\n        parentSpan.appendChild(createEl('span', {\r\n          className: 'vjs-icon-placeholder'\r\n        }, {\r\n          'aria-hidden': true\r\n        }));\r\n        parentSpan.appendChild(createEl('span', {\r\n          className: 'vjs-control-text',\r\n          textContent: ' ' + this.localize('Descriptions')\r\n        }));\r\n      }\r\n      return el;\r\n    }\r\n\r\n    /**\r\n     * This gets called when an `AudioTrackMenuItem is \"clicked\". See {@link ClickableComponent}\r\n     * for more detailed information on what a click can be.\r\n     *\r\n     * @param {Event} [event]\r\n     *        The `keydown`, `tap`, or `click` event that caused this function to be\r\n     *        called.\r\n     *\r\n     * @listens tap\r\n     * @listens click\r\n     */\r\n    handleClick(event) {\r\n      super.handleClick(event);\r\n\r\n      // the audio track list will automatically toggle other tracks\r\n      // off for us.\r\n      this.track.enabled = true;\r\n\r\n      // when native audio tracks are used, we want to make sure that other tracks are turned off\r\n      if (this.player_.tech_.featuresNativeAudioTracks) {\r\n        const tracks = this.player_.audioTracks();\r\n        for (let i = 0; i < tracks.length; i++) {\r\n          const track = tracks[i];\r\n\r\n          // skip the current track since we enabled it above\r\n          if (track === this.track) {\r\n            continue;\r\n          }\r\n          track.enabled = track === this.track;\r\n        }\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Handle any {@link AudioTrack} change.\r\n     *\r\n     * @param {Event} [event]\r\n     *        The {@link AudioTrackList#change} event that caused this to run.\r\n     *\r\n     * @listens AudioTrackList#change\r\n     */\r\n    handleTracksChange(event) {\r\n      this.selected(this.track.enabled);\r\n    }\r\n  }\r\n  Component$1.registerComponent('AudioTrackMenuItem', AudioTrackMenuItem);\r\n\r\n  /**\r\n   * @file audio-track-button.js\r\n   */\r\n\r\n  /**\r\n   * The base class for buttons that toggle specific {@link AudioTrack} types.\r\n   *\r\n   * @extends TrackButton\r\n   */\r\n  class AudioTrackButton extends TrackButton {\r\n    /**\r\n     * Creates an instance of this class.\r\n     *\r\n     * @param {Player} player\r\n     *        The `Player` that this class should be attached to.\r\n     *\r\n     * @param {Object} [options={}]\r\n     *        The key/value store of player options.\r\n     */\r\n    constructor(player, options = {}) {\r\n      options.tracks = player.audioTracks();\r\n      super(player, options);\r\n      this.setIcon('audio');\r\n    }\r\n\r\n    /**\r\n     * Builds the default DOM `className`.\r\n     *\r\n     * @return {string}\r\n     *         The DOM `className` for this object.\r\n     */\r\n    buildCSSClass() {\r\n      return `vjs-audio-button ${super.buildCSSClass()}`;\r\n    }\r\n    buildWrapperCSSClass() {\r\n      return `vjs-audio-button ${super.buildWrapperCSSClass()}`;\r\n    }\r\n\r\n    /**\r\n     * Create a menu item for each audio track\r\n     *\r\n     * @param {AudioTrackMenuItem[]} [items=[]]\r\n     *        An array of existing menu items to use.\r\n     *\r\n     * @return {AudioTrackMenuItem[]}\r\n     *         An array of menu items\r\n     */\r\n    createItems(items = []) {\r\n      // if there's only one audio track, there no point in showing it\r\n      this.hideThreshold_ = 1;\r\n      const tracks = this.player_.audioTracks();\r\n      for (let i = 0; i < tracks.length; i++) {\r\n        const track = tracks[i];\r\n        items.push(new AudioTrackMenuItem(this.player_, {\r\n          track,\r\n          // MenuItem is selectable\r\n          selectable: true,\r\n          // MenuItem is NOT multiSelectable (i.e. only one can be marked \"selected\" at a time)\r\n          multiSelectable: false\r\n        }));\r\n      }\r\n      return items;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * The text that should display over the `AudioTrackButton`s controls. Added for localization.\r\n   *\r\n   * @type {string}\r\n   * @protected\r\n   */\r\n  AudioTrackButton.prototype.controlText_ = 'Audio Track';\r\n  Component$1.registerComponent('AudioTrackButton', AudioTrackButton);\r\n\r\n  /**\r\n   * @file playback-rate-menu-item.js\r\n   */\r\n\r\n  /** @import Player from '../../player' */\r\n\r\n  /**\r\n   * The specific menu item type for selecting a playback rate.\r\n   *\r\n   * @extends MenuItem\r\n   */\r\n  class PlaybackRateMenuItem extends MenuItem {\r\n    /**\r\n     * Creates an instance of this class.\r\n     *\r\n     * @param {Player} player\r\n     *        The `Player` that this class should be attached to.\r\n     *\r\n     * @param {Object} [options]\r\n     *        The key/value store of player options.\r\n     */\r\n    constructor(player, options) {\r\n      const label = options.rate;\r\n      const rate = parseFloat(label, 10);\r\n\r\n      // Modify options for parent MenuItem class's init.\r\n      options.label = label;\r\n      options.selected = rate === player.playbackRate();\r\n      options.selectable = true;\r\n      options.multiSelectable = false;\r\n      super(player, options);\r\n      this.label = label;\r\n      this.rate = rate;\r\n      this.on(player, 'ratechange', e => this.update(e));\r\n    }\r\n\r\n    /**\r\n     * This gets called when an `PlaybackRateMenuItem` is \"clicked\". See\r\n     * {@link ClickableComponent} for more detailed information on what a click can be.\r\n     *\r\n     * @param {Event} [event]\r\n     *        The `keydown`, `tap`, or `click` event that caused this function to be\r\n     *        called.\r\n     *\r\n     * @listens tap\r\n     * @listens click\r\n     */\r\n    handleClick(event) {\r\n      super.handleClick();\r\n      this.player().playbackRate(this.rate);\r\n    }\r\n\r\n    /**\r\n     * Update the PlaybackRateMenuItem when the playbackrate changes.\r\n     *\r\n     * @param {Event} [event]\r\n     *        The `ratechange` event that caused this function to run.\r\n     *\r\n     * @listens Player#ratechange\r\n     */\r\n    update(event) {\r\n      this.selected(this.player().playbackRate() === this.rate);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * The text that should display over the `PlaybackRateMenuItem`s controls. Added for localization.\r\n   *\r\n   * @type {string}\r\n   * @private\r\n   */\r\n  PlaybackRateMenuItem.prototype.contentElType = 'button';\r\n  Component$1.registerComponent('PlaybackRateMenuItem', PlaybackRateMenuItem);\r\n\r\n  /**\r\n   * @file playback-rate-menu-button.js\r\n   */\r\n\r\n  /** @import Player from '../../player' */\r\n\r\n  /**\r\n   * The component for controlling the playback rate.\r\n   *\r\n   * @extends MenuButton\r\n   */\r\n  class PlaybackRateMenuButton extends MenuButton {\r\n    /**\r\n     * Creates an instance of this class.\r\n     *\r\n     * @param {Player} player\r\n     *        The `Player` that this class should be attached to.\r\n     *\r\n     * @param {Object} [options]\r\n     *        The key/value store of player options.\r\n     */\r\n    constructor(player, options) {\r\n      super(player, options);\r\n      this.menuButton_.el_.setAttribute('aria-describedby', this.labelElId_);\r\n      this.updateVisibility();\r\n      this.updateLabel();\r\n      this.on(player, 'loadstart', e => this.updateVisibility(e));\r\n      this.on(player, 'ratechange', e => this.updateLabel(e));\r\n      this.on(player, 'playbackrateschange', e => this.handlePlaybackRateschange(e));\r\n    }\r\n\r\n    /**\r\n     * Create the `Component`'s DOM element\r\n     *\r\n     * @return {Element}\r\n     *         The element that was created.\r\n     */\r\n    createEl() {\r\n      const el = super.createEl();\r\n      this.labelElId_ = 'vjs-playback-rate-value-label-' + this.id_;\r\n      this.labelEl_ = createEl('div', {\r\n        className: 'vjs-playback-rate-value',\r\n        id: this.labelElId_,\r\n        textContent: '1x'\r\n      });\r\n      el.appendChild(this.labelEl_);\r\n      return el;\r\n    }\r\n    dispose() {\r\n      this.labelEl_ = null;\r\n      super.dispose();\r\n    }\r\n\r\n    /**\r\n     * Builds the default DOM `className`.\r\n     *\r\n     * @return {string}\r\n     *         The DOM `className` for this object.\r\n     */\r\n    buildCSSClass() {\r\n      return `vjs-playback-rate ${super.buildCSSClass()}`;\r\n    }\r\n    buildWrapperCSSClass() {\r\n      return `vjs-playback-rate ${super.buildWrapperCSSClass()}`;\r\n    }\r\n\r\n    /**\r\n     * Create the list of menu items. Specific to each subclass.\r\n     *\r\n     */\r\n    createItems() {\r\n      const rates = this.playbackRates();\r\n      const items = [];\r\n      for (let i = rates.length - 1; i >= 0; i--) {\r\n        items.push(new PlaybackRateMenuItem(this.player(), {\r\n          rate: rates[i] + 'x'\r\n        }));\r\n      }\r\n      return items;\r\n    }\r\n\r\n    /**\r\n     * On playbackrateschange, update the menu to account for the new items.\r\n     *\r\n     * @listens Player#playbackrateschange\r\n     */\r\n    handlePlaybackRateschange(event) {\r\n      this.update();\r\n    }\r\n\r\n    /**\r\n     * Get possible playback rates\r\n     *\r\n     * @return {Array}\r\n     *         All possible playback rates\r\n     */\r\n    playbackRates() {\r\n      const player = this.player();\r\n      return player.playbackRates && player.playbackRates() || [];\r\n    }\r\n\r\n    /**\r\n     * Get whether playback rates is supported by the tech\r\n     * and an array of playback rates exists\r\n     *\r\n     * @return {boolean}\r\n     *         Whether changing playback rate is supported\r\n     */\r\n    playbackRateSupported() {\r\n      return this.player().tech_ && this.player().tech_.featuresPlaybackRate && this.playbackRates() && this.playbackRates().length > 0;\r\n    }\r\n\r\n    /**\r\n     * Hide playback rate controls when they're no playback rate options to select\r\n     *\r\n     * @param {Event} [event]\r\n     *        The event that caused this function to run.\r\n     *\r\n     * @listens Player#loadstart\r\n     */\r\n    updateVisibility(event) {\r\n      if (this.playbackRateSupported()) {\r\n        this.removeClass('vjs-hidden');\r\n      } else {\r\n        this.addClass('vjs-hidden');\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Update button label when rate changed\r\n     *\r\n     * @param {Event} [event]\r\n     *        The event that caused this function to run.\r\n     *\r\n     * @listens Player#ratechange\r\n     */\r\n    updateLabel(event) {\r\n      if (this.playbackRateSupported()) {\r\n        this.labelEl_.textContent = this.player().playbackRate() + 'x';\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * The text that should display over the `PlaybackRateMenuButton`s controls.\r\n   *\r\n   * Added for localization.\r\n   *\r\n   * @type {string}\r\n   * @protected\r\n   */\r\n  PlaybackRateMenuButton.prototype.controlText_ = 'Playback Rate';\r\n  Component$1.registerComponent('PlaybackRateMenuButton', PlaybackRateMenuButton);\r\n\r\n  /**\r\n   * @file spacer.js\r\n   */\r\n\r\n  /**\r\n   * Just an empty spacer element that can be used as an append point for plugins, etc.\r\n   * Also can be used to create space between elements when necessary.\r\n   *\r\n   * @extends Component\r\n   */\r\n  class Spacer extends Component$1 {\r\n    /**\r\n    * Builds the default DOM `className`.\r\n    *\r\n    * @return {string}\r\n    *         The DOM `className` for this object.\r\n    */\r\n    buildCSSClass() {\r\n      return `vjs-spacer ${super.buildCSSClass()}`;\r\n    }\r\n\r\n    /**\r\n     * Create the `Component`'s DOM element\r\n     *\r\n     * @return {Element}\r\n     *         The element that was created.\r\n     */\r\n    createEl(tag = 'div', props = {}, attributes = {}) {\r\n      if (!props.className) {\r\n        props.className = this.buildCSSClass();\r\n      }\r\n      return super.createEl(tag, props, attributes);\r\n    }\r\n  }\r\n  Component$1.registerComponent('Spacer', Spacer);\r\n\r\n  /**\r\n   * @file custom-control-spacer.js\r\n   */\r\n\r\n  /**\r\n   * Spacer specifically meant to be used as an insertion point for new plugins, etc.\r\n   *\r\n   * @extends Spacer\r\n   */\r\n  class CustomControlSpacer extends Spacer {\r\n    /**\r\n     * Builds the default DOM `className`.\r\n     *\r\n     * @return {string}\r\n     *         The DOM `className` for this object.\r\n     */\r\n    buildCSSClass() {\r\n      return `vjs-custom-control-spacer ${super.buildCSSClass()}`;\r\n    }\r\n\r\n    /**\r\n     * Create the `Component`'s DOM element\r\n     *\r\n     * @return {Element}\r\n     *         The element that was created.\r\n     */\r\n    createEl() {\r\n      return super.createEl('div', {\r\n        className: this.buildCSSClass(),\r\n        // No-flex/table-cell mode requires there be some content\r\n        // in the cell to fill the remaining space of the table.\r\n        textContent: '\\u00a0'\r\n      });\r\n    }\r\n  }\r\n  Component$1.registerComponent('CustomControlSpacer', CustomControlSpacer);\r\n\r\n  /**\r\n   * @file control-bar.js\r\n   */\r\n\r\n  /**\r\n   * Container of main controls.\r\n   *\r\n   * @extends Component\r\n   */\r\n  class ControlBar extends Component$1 {\r\n    /**\r\n     * Create the `Component`'s DOM element\r\n     *\r\n     * @return {Element}\r\n     *         The element that was created.\r\n     */\r\n    createEl() {\r\n      return super.createEl('div', {\r\n        className: 'vjs-control-bar',\r\n        dir: 'ltr'\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Default options for `ControlBar`\r\n   *\r\n   * @type {Object}\r\n   * @private\r\n   */\r\n  ControlBar.prototype.options_ = {\r\n    children: ['playToggle', 'skipBackward', 'skipForward', 'volumePanel', 'currentTimeDisplay', 'timeDivider', 'durationDisplay', 'progressControl', 'liveDisplay', 'seekToLive', 'remainingTimeDisplay', 'customControlSpacer', 'playbackRateMenuButton', 'chaptersButton', 'descriptionsButton', 'subsCapsButton', 'audioTrackButton', 'pictureInPictureToggle', 'fullscreenToggle']\r\n  };\r\n  Component$1.registerComponent('ControlBar', ControlBar);\r\n\r\n  /**\r\n   * @file error-display.js\r\n   */\r\n\r\n  /** @import Player from './player' */\r\n\r\n  /**\r\n   * A display that indicates an error has occurred. This means that the video\r\n   * is unplayable.\r\n   *\r\n   * @extends ModalDialog\r\n   */\r\n  class ErrorDisplay extends ModalDialog {\r\n    /**\r\n     * Creates an instance of this class.\r\n     *\r\n     * @param  {Player} player\r\n     *         The `Player` that this class should be attached to.\r\n     *\r\n     * @param  {Object} [options]\r\n     *         The key/value store of player options.\r\n     */\r\n    constructor(player, options) {\r\n      super(player, options);\r\n      this.on(player, 'error', e => {\r\n        this.open(e);\r\n      });\r\n    }\r\n\r\n    /**\r\n     * Builds the default DOM `className`.\r\n     *\r\n     * @return {string}\r\n     *         The DOM `className` for this object.\r\n     *\r\n     * @deprecated Since version 5.\r\n     */\r\n    buildCSSClass() {\r\n      return `vjs-error-display ${super.buildCSSClass()}`;\r\n    }\r\n\r\n    /**\r\n     * Gets the localized error message based on the `Player`s error.\r\n     *\r\n     * @return {string}\r\n     *         The `Player`s error message localized or an empty string.\r\n     */\r\n    content() {\r\n      const error = this.player().error();\r\n      return error ? this.localize(error.message) : '';\r\n    }\r\n  }\r\n\r\n  /**\r\n   * The default options for an `ErrorDisplay`.\r\n   *\r\n   * @private\r\n   */\r\n  ErrorDisplay.prototype.options_ = Object.assign({}, ModalDialog.prototype.options_, {\r\n    pauseOnOpen: false,\r\n    fillAlways: true,\r\n    temporary: false,\r\n    uncloseable: true\r\n  });\r\n  Component$1.registerComponent('ErrorDisplay', ErrorDisplay);\r\n\r\n  /** @import Player from './player' */\r\n  /** @import { ContentDescriptor } from  '../utils/dom' */\r\n\r\n  /**\r\n   * Creates DOM element of 'select' & its options.\r\n   *\r\n   * @extends Component\r\n   */\r\n  class TextTrackSelect extends Component$1 {\r\n    /**\r\n     * Creates an instance of this class.\r\n     *\r\n     * @param {Player} player\r\n     *        The `Player` that this class should be attached to.\r\n     *\r\n     * @param {Object} [options]\r\n     *        The key/value store of player options.\r\n     *\r\n     * @param {ContentDescriptor} [options.content=undefined]\r\n     *        Provide customized content for this modal.\r\n     *\r\n     * @param {string} [options.legendId]\r\n     *        A text with part of an string to create atribute of aria-labelledby.\r\n     *\r\n     * @param {string} [options.id]\r\n     *        A text with part of an string to create atribute of aria-labelledby.\r\n     *\r\n     * @param {Array} [options.SelectOptions]\r\n     *        Array that contains the value & textContent of for each of the\r\n     *        options elements.\r\n     */\r\n    constructor(player, options = {}) {\r\n      super(player, options);\r\n      this.el_.setAttribute('aria-labelledby', this.selectLabelledbyIds);\r\n    }\r\n\r\n    /**\r\n     * Create the `TextTrackSelect`'s DOM element\r\n     *\r\n     * @return {Element}\r\n     *         The DOM element that gets created.\r\n     */\r\n    createEl() {\r\n      this.selectLabelledbyIds = [this.options_.legendId, this.options_.labelId].join(' ').trim();\r\n\r\n      // Create select & inner options\r\n      const selectoptions = createEl('select', {\r\n        id: this.options_.id\r\n      }, {}, this.options_.SelectOptions.map(optionText => {\r\n        // Constructs an id for the <option>.\r\n        // For the colour settings that have two <selects> with a <label> each, generates an id based off the label value\r\n        // For font size/family and edge style with one <select> and no <label>, generates an id with a guid\r\n        const optionId = (this.options_.labelId ? this.options_.labelId : `vjs-track-option-${newGUID()}`) + '-' + optionText[1].replace(/\\W+/g, '');\r\n        const option = createEl('option', {\r\n          id: optionId,\r\n          value: this.localize(optionText[0]),\r\n          textContent: this.localize(optionText[1])\r\n        });\r\n        option.setAttribute('aria-labelledby', `${this.selectLabelledbyIds} ${optionId}`);\r\n        return option;\r\n      }));\r\n      return selectoptions;\r\n    }\r\n  }\r\n  Component$1.registerComponent('TextTrackSelect', TextTrackSelect);\r\n\r\n  /** @import Player from './player' */\r\n  /** @import { ContentDescriptor } from '../utils/dom' */\r\n\r\n  /**\r\n   * Creates fieldset section of 'TextTrackSettings'.\r\n   * Manganes two versions of fieldsets, one for type of 'colors'\r\n   * & the other for 'font', Component adds diferent DOM elements\r\n   * to that fieldset  depending on the type.\r\n   *\r\n   * @extends Component\r\n   */\r\n  class TextTrackFieldset extends Component$1 {\r\n    /**\r\n     * Creates an instance of this class.\r\n     *\r\n     * @param {Player} player\r\n     *        The `Player` that this class should be attached to.\r\n     *\r\n     * @param {Object} [options]\r\n     *        The key/value store of player options.\r\n     *\r\n     * @param {ContentDescriptor} [options.content=undefined]\r\n     *        Provide customized content for this modal.\r\n     *\r\n     * @param {string} [options.legendId]\r\n     *        A text with part of an string to create atribute of aria-labelledby.\r\n     *        It passes to 'TextTrackSelect'.\r\n     *\r\n     * @param {string} [options.id]\r\n     *        A text with part of an string to create atribute of aria-labelledby.\r\n     *        It passes to 'TextTrackSelect'.\r\n     *\r\n     * @param {string} [options.legendText]\r\n     *        A text to use as the text content of the legend element.\r\n     *\r\n     * @param {Array} [options.selects]\r\n     *        Array that contains the selects that are use to create 'selects'\r\n     *        components.\r\n     *\r\n     * @param {Array} [options.SelectOptions]\r\n     *        Array that contains the value & textContent of for each of the\r\n     *        options elements, it passes to 'TextTrackSelect'.\r\n     *\r\n     * @param {string} [options.type]\r\n     *        Conditions if some DOM elements will be added to the fieldset\r\n     *        component.\r\n     *\r\n     * @param {Object} [options.selectConfigs]\r\n     *        Object with the following properties that are the selects configurations:\r\n     *        backgroundColor, backgroundOpacity, color, edgeStyle, fontFamily,\r\n     *        fontPercent, textOpacity, windowColor, windowOpacity.\r\n     *        These properties are use to configure the 'TextTrackSelect' Component.\r\n     */\r\n    constructor(player, options = {}) {\r\n      super(player, options);\r\n\r\n      // Add Components & DOM Elements\r\n      const legendElement = createEl('legend', {\r\n        textContent: this.localize(this.options_.legendText),\r\n        id: this.options_.legendId\r\n      });\r\n      this.el().appendChild(legendElement);\r\n      const selects = this.options_.selects;\r\n\r\n      // Iterate array of selects to create 'selects' components\r\n      for (const i of selects) {\r\n        const selectConfig = this.options_.selectConfigs[i];\r\n        const selectClassName = selectConfig.className;\r\n        const id = selectConfig.id.replace('%s', this.options_.id_);\r\n        let span = null;\r\n        const guid = `vjs_select_${newGUID()}`;\r\n\r\n        // Conditionally create span to add on the component\r\n        if (this.options_.type === 'colors') {\r\n          span = createEl('span', {\r\n            className: selectClassName\r\n          });\r\n          const label = createEl('label', {\r\n            id,\r\n            className: 'vjs-label',\r\n            textContent: this.localize(selectConfig.label)\r\n          });\r\n          label.setAttribute('for', guid);\r\n          span.appendChild(label);\r\n        }\r\n        const textTrackSelect = new TextTrackSelect(player, {\r\n          SelectOptions: selectConfig.options,\r\n          legendId: this.options_.legendId,\r\n          id: guid,\r\n          labelId: id\r\n        });\r\n        this.addChild(textTrackSelect);\r\n\r\n        // Conditionally append to 'select' component to conditionally created span\r\n        if (this.options_.type === 'colors') {\r\n          span.appendChild(textTrackSelect.el());\r\n          this.el().appendChild(span);\r\n        }\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Create the `TextTrackFieldset`'s DOM element\r\n     *\r\n     * @return {Element}\r\n     *         The DOM element that gets created.\r\n     */\r\n    createEl() {\r\n      const el = createEl('fieldset', {\r\n        // Prefixing classes of elements within a player with \"vjs-\"\r\n        // is a convention used in Video.js.\r\n        className: this.options_.className\r\n      });\r\n      return el;\r\n    }\r\n  }\r\n  Component$1.registerComponent('TextTrackFieldset', TextTrackFieldset);\r\n\r\n  /** @import Player from './player' */\r\n  /** @import { ContentDescriptor } from  '../utils/dom' */\r\n\r\n  /**\r\n   * The component 'TextTrackSettingsColors' displays a set of 'fieldsets'\r\n   * using the component 'TextTrackFieldset'.\r\n   *\r\n   * @extends Component\r\n   */\r\n  class TextTrackSettingsColors extends Component$1 {\r\n    /**\r\n     * Creates an instance of this class.\r\n     *\r\n     * @param {Player} player\r\n     *        The `Player` that this class should be attached to.\r\n     *\r\n     * @param {Object} [options]\r\n     *        The key/value store of player options.\r\n     *\r\n     * @param {ContentDescriptor} [options.content=undefined]\r\n     *        Provide customized content for this modal.\r\n     *\r\n     * @param {Array} [options.fieldSets]\r\n     *        Array that contains the configurations for the selects.\r\n     *\r\n     * @param {Object} [options.selectConfigs]\r\n     *        Object with the following properties that are the select confugations:\r\n     *        backgroundColor, backgroundOpacity, color, edgeStyle, fontFamily,\r\n     *        fontPercent, textOpacity, windowColor, windowOpacity.\r\n     *        it passes to 'TextTrackFieldset'.\r\n     */\r\n    constructor(player, options = {}) {\r\n      super(player, options);\r\n      const id_ = this.options_.textTrackComponentid;\r\n\r\n      // createElFgColor_\r\n      const ElFgColorFieldset = new TextTrackFieldset(player, {\r\n        id_,\r\n        legendId: `captions-text-legend-${id_}`,\r\n        legendText: this.localize('Text'),\r\n        className: 'vjs-fg vjs-track-setting',\r\n        selects: this.options_.fieldSets[0],\r\n        selectConfigs: this.options_.selectConfigs,\r\n        type: 'colors'\r\n      });\r\n      this.addChild(ElFgColorFieldset);\r\n\r\n      // createElBgColor_\r\n      const ElBgColorFieldset = new TextTrackFieldset(player, {\r\n        id_,\r\n        legendId: `captions-background-${id_}`,\r\n        legendText: this.localize('Text Background'),\r\n        className: 'vjs-bg vjs-track-setting',\r\n        selects: this.options_.fieldSets[1],\r\n        selectConfigs: this.options_.selectConfigs,\r\n        type: 'colors'\r\n      });\r\n      this.addChild(ElBgColorFieldset);\r\n\r\n      // createElWinColor_\r\n      const ElWinColorFieldset = new TextTrackFieldset(player, {\r\n        id_,\r\n        legendId: `captions-window-${id_}`,\r\n        legendText: this.localize('Caption Area Background'),\r\n        className: 'vjs-window vjs-track-setting',\r\n        selects: this.options_.fieldSets[2],\r\n        selectConfigs: this.options_.selectConfigs,\r\n        type: 'colors'\r\n      });\r\n      this.addChild(ElWinColorFieldset);\r\n    }\r\n\r\n    /**\r\n     * Create the `TextTrackSettingsColors`'s DOM element\r\n     *\r\n     * @return {Element}\r\n     *         The DOM element that gets created.\r\n     */\r\n    createEl() {\r\n      const el = createEl('div', {\r\n        className: 'vjs-track-settings-colors'\r\n      });\r\n      return el;\r\n    }\r\n  }\r\n  Component$1.registerComponent('TextTrackSettingsColors', TextTrackSettingsColors);\r\n\r\n  /** @import Player from './player' */\r\n  /** @import { ContentDescriptor } from  '../utils/dom' */\r\n\r\n  /**\r\n   * The component 'TextTrackSettingsFont' displays a set of 'fieldsets'\r\n   * using the component 'TextTrackFieldset'.\r\n   *\r\n   * @extends Component\r\n   */\r\n  class TextTrackSettingsFont extends Component$1 {\r\n    /**\r\n     * Creates an instance of this class.\r\n     *\r\n     * @param {Player} player\r\n     *        The `Player` that this class should be attached to.\r\n     *\r\n     * @param {Object} [options]\r\n     *        The key/value store of player options.\r\n     *\r\n     * @param {ContentDescriptor} [options.content=undefined]\r\n     *        Provide customized content for this modal.\r\n     *\r\n     * @param {Array} [options.fieldSets]\r\n     *        Array that contains the configurations for the selects.\r\n     *\r\n     * @param {Object} [options.selectConfigs]\r\n     *        Object with the following properties that are the select confugations:\r\n     *        backgroundColor, backgroundOpacity, color, edgeStyle, fontFamily,\r\n     *        fontPercent, textOpacity, windowColor, windowOpacity.\r\n     *        it passes to 'TextTrackFieldset'.\r\n     */\r\n    constructor(player, options = {}) {\r\n      super(player, options);\r\n      const id_ = this.options_.textTrackComponentid;\r\n      const ElFgColorFieldset = new TextTrackFieldset(player, {\r\n        id_,\r\n        legendId: `captions-font-size-${id_}`,\r\n        legendText: 'Font Size',\r\n        className: 'vjs-font-percent vjs-track-setting',\r\n        selects: this.options_.fieldSets[0],\r\n        selectConfigs: this.options_.selectConfigs,\r\n        type: 'font'\r\n      });\r\n      this.addChild(ElFgColorFieldset);\r\n      const ElBgColorFieldset = new TextTrackFieldset(player, {\r\n        id_,\r\n        legendId: `captions-edge-style-${id_}`,\r\n        legendText: this.localize('Text Edge Style'),\r\n        className: 'vjs-edge-style vjs-track-setting',\r\n        selects: this.options_.fieldSets[1],\r\n        selectConfigs: this.options_.selectConfigs,\r\n        type: 'font'\r\n      });\r\n      this.addChild(ElBgColorFieldset);\r\n      const ElWinColorFieldset = new TextTrackFieldset(player, {\r\n        id_,\r\n        legendId: `captions-font-family-${id_}`,\r\n        legendText: this.localize('Font Family'),\r\n        className: 'vjs-font-family vjs-track-setting',\r\n        selects: this.options_.fieldSets[2],\r\n        selectConfigs: this.options_.selectConfigs,\r\n        type: 'font'\r\n      });\r\n      this.addChild(ElWinColorFieldset);\r\n    }\r\n\r\n    /**\r\n     * Create the `TextTrackSettingsFont`'s DOM element\r\n     *\r\n     * @return {Element}\r\n     *         The DOM element that gets created.\r\n     */\r\n    createEl() {\r\n      const el = createEl('div', {\r\n        className: 'vjs-track-settings-font'\r\n      });\r\n      return el;\r\n    }\r\n  }\r\n  Component$1.registerComponent('TextTrackSettingsFont', TextTrackSettingsFont);\r\n\r\n  /**\r\n   * Buttons of reset & done that modal 'TextTrackSettings'\r\n   * uses as part of its content.\r\n   *\r\n   * 'Reset': Resets all settings on 'TextTrackSettings'.\r\n   * 'Done': Closes 'TextTrackSettings' modal.\r\n   *\r\n   * @extends Component\r\n   */\r\n  class TrackSettingsControls extends Component$1 {\r\n    constructor(player, options = {}) {\r\n      super(player, options);\r\n\r\n      // Create DOM elements\r\n      const defaultsDescription = this.localize('restore all settings to the default values');\r\n      const resetButton = new Button(player, {\r\n        controlText: defaultsDescription,\r\n        className: 'vjs-default-button'\r\n      });\r\n      resetButton.el().classList.remove('vjs-control', 'vjs-button');\r\n      resetButton.el().textContent = this.localize('Reset');\r\n      this.addChild(resetButton);\r\n      const doneButton = new Button(player, {\r\n        controlText: defaultsDescription,\r\n        className: 'vjs-done-button'\r\n      });\r\n\r\n      // Remove unrequired style classes\r\n      doneButton.el().classList.remove('vjs-control', 'vjs-button');\r\n      doneButton.el().textContent = this.localize('Done');\r\n      this.addChild(doneButton);\r\n    }\r\n\r\n    /**\r\n     * Create the `TrackSettingsControls`'s DOM element\r\n     *\r\n     * @return {Element}\r\n     *         The DOM element that gets created.\r\n     */\r\n    createEl() {\r\n      const el = createEl('div', {\r\n        className: 'vjs-track-settings-controls'\r\n      });\r\n      return el;\r\n    }\r\n  }\r\n  Component$1.registerComponent('TrackSettingsControls', TrackSettingsControls);\r\n\r\n  /**\r\n   * @file text-track-settings.js\r\n   */\r\n\r\n  /** @import Player from '../player' */\r\n\r\n  const LOCAL_STORAGE_KEY$1 = 'vjs-text-track-settings';\r\n  const COLOR_BLACK = ['#000', 'Black'];\r\n  const COLOR_BLUE = ['#00F', 'Blue'];\r\n  const COLOR_CYAN = ['#0FF', 'Cyan'];\r\n  const COLOR_GREEN = ['#0F0', 'Green'];\r\n  const COLOR_MAGENTA = ['#F0F', 'Magenta'];\r\n  const COLOR_RED = ['#F00', 'Red'];\r\n  const COLOR_WHITE = ['#FFF', 'White'];\r\n  const COLOR_YELLOW = ['#FF0', 'Yellow'];\r\n  const OPACITY_OPAQUE = ['1', 'Opaque'];\r\n  const OPACITY_SEMI = ['0.5', 'Semi-Transparent'];\r\n  const OPACITY_TRANS = ['0', 'Transparent'];\r\n\r\n  // Configuration for the various <select> elements in the DOM of this component.\r\n  //\r\n  // Possible keys include:\r\n  //\r\n  // `default`:\r\n  //   The default option index. Only needs to be provided if not zero.\r\n  // `parser`:\r\n  //   A function which is used to parse the value from the selected option in\r\n  //   a customized way.\r\n  // `selector`:\r\n  //   The selector used to find the associated <select> element.\r\n  const selectConfigs = {\r\n    backgroundColor: {\r\n      selector: '.vjs-bg-color > select',\r\n      id: 'captions-background-color-%s',\r\n      label: 'Color',\r\n      options: [COLOR_BLACK, COLOR_WHITE, COLOR_RED, COLOR_GREEN, COLOR_BLUE, COLOR_YELLOW, COLOR_MAGENTA, COLOR_CYAN],\r\n      className: 'vjs-bg-color'\r\n    },\r\n    backgroundOpacity: {\r\n      selector: '.vjs-bg-opacity > select',\r\n      id: 'captions-background-opacity-%s',\r\n      label: 'Opacity',\r\n      options: [OPACITY_OPAQUE, OPACITY_SEMI, OPACITY_TRANS],\r\n      className: 'vjs-bg-opacity vjs-opacity'\r\n    },\r\n    color: {\r\n      selector: '.vjs-text-color > select',\r\n      id: 'captions-foreground-color-%s',\r\n      label: 'Color',\r\n      options: [COLOR_WHITE, COLOR_BLACK, COLOR_RED, COLOR_GREEN, COLOR_BLUE, COLOR_YELLOW, COLOR_MAGENTA, COLOR_CYAN],\r\n      className: 'vjs-text-color'\r\n    },\r\n    edgeStyle: {\r\n      selector: '.vjs-edge-style > select',\r\n      id: '',\r\n      label: 'Text Edge Style',\r\n      options: [['none', 'None'], ['raised', 'Raised'], ['depressed', 'Depressed'], ['uniform', 'Uniform'], ['dropshadow', 'Drop shadow']]\r\n    },\r\n    fontFamily: {\r\n      selector: '.vjs-font-family > select',\r\n      id: '',\r\n      label: 'Font Family',\r\n      options: [['proportionalSansSerif', 'Proportional Sans-Serif'], ['monospaceSansSerif', 'Monospace Sans-Serif'], ['proportionalSerif', 'Proportional Serif'], ['monospaceSerif', 'Monospace Serif'], ['casual', 'Casual'], ['script', 'Script'], ['small-caps', 'Small Caps']]\r\n    },\r\n    fontPercent: {\r\n      selector: '.vjs-font-percent > select',\r\n      id: '',\r\n      label: 'Font Size',\r\n      options: [['0.50', '50%'], ['0.75', '75%'], ['1.00', '100%'], ['1.25', '125%'], ['1.50', '150%'], ['1.75', '175%'], ['2.00', '200%'], ['3.00', '300%'], ['4.00', '400%']],\r\n      default: 2,\r\n      parser: v => v === '1.00' ? null : Number(v)\r\n    },\r\n    textOpacity: {\r\n      selector: '.vjs-text-opacity > select',\r\n      id: 'captions-foreground-opacity-%s',\r\n      label: 'Opacity',\r\n      options: [OPACITY_OPAQUE, OPACITY_SEMI],\r\n      className: 'vjs-text-opacity vjs-opacity'\r\n    },\r\n    // Options for this object are defined below.\r\n    windowColor: {\r\n      selector: '.vjs-window-color > select',\r\n      id: 'captions-window-color-%s',\r\n      label: 'Color',\r\n      className: 'vjs-window-color'\r\n    },\r\n    // Options for this object are defined below.\r\n    windowOpacity: {\r\n      selector: '.vjs-window-opacity > select',\r\n      id: 'captions-window-opacity-%s',\r\n      label: 'Opacity',\r\n      options: [OPACITY_TRANS, OPACITY_SEMI, OPACITY_OPAQUE],\r\n      className: 'vjs-window-opacity vjs-opacity'\r\n    }\r\n  };\r\n  selectConfigs.windowColor.options = selectConfigs.backgroundColor.options;\r\n\r\n  /**\r\n   * Get the actual value of an option.\r\n   *\r\n   * @param  {string} value\r\n   *         The value to get\r\n   *\r\n   * @param  {Function} [parser]\r\n   *         Optional function to adjust the value.\r\n   *\r\n   * @return {*}\r\n   *         - Will be `undefined` if no value exists\r\n   *         - Will be `undefined` if the given value is \"none\".\r\n   *         - Will be the actual value otherwise.\r\n   *\r\n   * @private\r\n   */\r\n  function parseOptionValue(value, parser) {\r\n    if (parser) {\r\n      value = parser(value);\r\n    }\r\n    if (value && value !== 'none') {\r\n      return value;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gets the value of the selected <option> element within a <select> element.\r\n   *\r\n   * @param  {Element} el\r\n   *         the element to look in\r\n   *\r\n   * @param  {Function} [parser]\r\n   *         Optional function to adjust the value.\r\n   *\r\n   * @return {*}\r\n   *         - Will be `undefined` if no value exists\r\n   *         - Will be `undefined` if the given value is \"none\".\r\n   *         - Will be the actual value otherwise.\r\n   *\r\n   * @private\r\n   */\r\n  function getSelectedOptionValue(el, parser) {\r\n    const value = el.options[el.options.selectedIndex].value;\r\n    return parseOptionValue(value, parser);\r\n  }\r\n\r\n  /**\r\n   * Sets the selected <option> element within a <select> element based on a\r\n   * given value.\r\n   *\r\n   * @param {Element} el\r\n   *        The element to look in.\r\n   *\r\n   * @param {string} value\r\n   *        the property to look on.\r\n   *\r\n   * @param {Function} [parser]\r\n   *        Optional function to adjust the value before comparing.\r\n   *\r\n   * @private\r\n   */\r\n  function setSelectedOption(el, value, parser) {\r\n    if (!value) {\r\n      return;\r\n    }\r\n    for (let i = 0; i < el.options.length; i++) {\r\n      if (parseOptionValue(el.options[i].value, parser) === value) {\r\n        el.selectedIndex = i;\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Manipulate Text Tracks settings.\r\n   *\r\n   * @extends ModalDialog\r\n   */\r\n  class TextTrackSettings extends ModalDialog {\r\n    /**\r\n     * Creates an instance of this class.\r\n     *\r\n     * @param {Player} player\r\n     *         The `Player` that this class should be attached to.\r\n     *\r\n     * @param {Object} [options]\r\n     *         The key/value store of player options.\r\n     */\r\n    constructor(player, options) {\r\n      options.temporary = false;\r\n      super(player, options);\r\n      this.updateDisplay = this.updateDisplay.bind(this);\r\n\r\n      // fill the modal and pretend we have opened it\r\n      this.fill();\r\n      this.hasBeenOpened_ = this.hasBeenFilled_ = true;\r\n      this.renderModalComponents(player);\r\n      this.endDialog = createEl('p', {\r\n        className: 'vjs-control-text',\r\n        textContent: this.localize('End of dialog window.')\r\n      });\r\n      this.el().appendChild(this.endDialog);\r\n      this.setDefaults();\r\n\r\n      // Grab `persistTextTrackSettings` from the player options if not passed in child options\r\n      if (options.persistTextTrackSettings === undefined) {\r\n        this.options_.persistTextTrackSettings = this.options_.playerOptions.persistTextTrackSettings;\r\n      }\r\n      this.bindFunctionsToSelectsAndButtons();\r\n      if (this.options_.persistTextTrackSettings) {\r\n        this.restoreSettings();\r\n      }\r\n    }\r\n    renderModalComponents(player) {\r\n      const textTrackSettingsColors = new TextTrackSettingsColors(player, {\r\n        textTrackComponentid: this.id_,\r\n        selectConfigs,\r\n        fieldSets: [['color', 'textOpacity'], ['backgroundColor', 'backgroundOpacity'], ['windowColor', 'windowOpacity']]\r\n      });\r\n      this.addChild(textTrackSettingsColors);\r\n      const textTrackSettingsFont = new TextTrackSettingsFont(player, {\r\n        textTrackComponentid: this.id_,\r\n        selectConfigs,\r\n        fieldSets: [['fontPercent'], ['edgeStyle'], ['fontFamily']]\r\n      });\r\n      this.addChild(textTrackSettingsFont);\r\n      const trackSettingsControls = new TrackSettingsControls(player);\r\n      this.addChild(trackSettingsControls);\r\n    }\r\n    bindFunctionsToSelectsAndButtons() {\r\n      this.on(this.$('.vjs-done-button'), ['click', 'tap'], () => {\r\n        this.saveSettings();\r\n        this.close();\r\n      });\r\n      this.on(this.$('.vjs-default-button'), ['click', 'tap'], () => {\r\n        this.setDefaults();\r\n        this.updateDisplay();\r\n      });\r\n      each(selectConfigs, config => {\r\n        this.on(this.$(config.selector), 'change', this.updateDisplay);\r\n      });\r\n    }\r\n    dispose() {\r\n      this.endDialog = null;\r\n      super.dispose();\r\n    }\r\n    label() {\r\n      return this.localize('Caption Settings Dialog');\r\n    }\r\n    description() {\r\n      return this.localize('Beginning of dialog window. Escape will cancel and close the window.');\r\n    }\r\n    buildCSSClass() {\r\n      return super.buildCSSClass() + ' vjs-text-track-settings';\r\n    }\r\n\r\n    /**\r\n     * Gets an object of text track settings (or null).\r\n     *\r\n     * @return {Object}\r\n     *         An object with config values parsed from the DOM or localStorage.\r\n     */\r\n    getValues() {\r\n      return reduce(selectConfigs, (accum, config, key) => {\r\n        const value = getSelectedOptionValue(this.$(config.selector), config.parser);\r\n        if (value !== undefined) {\r\n          accum[key] = value;\r\n        }\r\n        return accum;\r\n      }, {});\r\n    }\r\n\r\n    /**\r\n     * Sets text track settings from an object of values.\r\n     *\r\n     * @param {Object} values\r\n     *        An object with config values parsed from the DOM or localStorage.\r\n     */\r\n    setValues(values) {\r\n      each(selectConfigs, (config, key) => {\r\n        setSelectedOption(this.$(config.selector), values[key], config.parser);\r\n      });\r\n    }\r\n\r\n    /**\r\n     * Sets all `<select>` elements to their default values.\r\n     */\r\n    setDefaults() {\r\n      each(selectConfigs, config => {\r\n        const index = config.hasOwnProperty('default') ? config.default : 0;\r\n        this.$(config.selector).selectedIndex = index;\r\n      });\r\n    }\r\n\r\n    /**\r\n     * Restore texttrack settings from localStorage\r\n     */\r\n    restoreSettings() {\r\n      let values;\r\n      try {\r\n        values = JSON.parse(window.localStorage.getItem(LOCAL_STORAGE_KEY$1));\r\n      } catch (err) {\r\n        log$1.warn(err);\r\n      }\r\n      if (values) {\r\n        this.setValues(values);\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Save text track settings to localStorage\r\n     */\r\n    saveSettings() {\r\n      if (!this.options_.persistTextTrackSettings) {\r\n        return;\r\n      }\r\n      const values = this.getValues();\r\n      try {\r\n        if (Object.keys(values).length) {\r\n          window.localStorage.setItem(LOCAL_STORAGE_KEY$1, JSON.stringify(values));\r\n        } else {\r\n          window.localStorage.removeItem(LOCAL_STORAGE_KEY$1);\r\n        }\r\n      } catch (err) {\r\n        log$1.warn(err);\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Update display of text track settings\r\n     */\r\n    updateDisplay() {\r\n      const ttDisplay = this.player_.getChild('textTrackDisplay');\r\n      if (ttDisplay) {\r\n        ttDisplay.updateDisplay();\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Repopulate dialog with new localizations on languagechange\r\n     */\r\n    handleLanguagechange() {\r\n      this.fill();\r\n      this.renderModalComponents(this.player_);\r\n      this.bindFunctionsToSelectsAndButtons();\r\n    }\r\n  }\r\n  Component$1.registerComponent('TextTrackSettings', TextTrackSettings);\r\n\r\n  /**\r\n   * @file resize-manager.js\r\n   */\r\n\r\n  /**\r\n   * A Resize Manager. It is in charge of triggering `playerresize` on the player in the right conditions.\r\n   *\r\n   * It'll either create an iframe and use a debounced resize handler on it or use the new {@link https://wicg.github.io/ResizeObserver/|ResizeObserver}.\r\n   *\r\n   * If the ResizeObserver is available natively, it will be used. A polyfill can be passed in as an option.\r\n   * If a `playerresize` event is not needed, the ResizeManager component can be removed from the player, see the example below.\r\n   *\r\n   * @example <caption>How to disable the resize manager</caption>\r\n   * const player = videojs('#vid', {\r\n   *   resizeManager: false\r\n   * });\r\n   *\r\n   * @see {@link https://wicg.github.io/ResizeObserver/|ResizeObserver specification}\r\n   *\r\n   * @extends Component\r\n   */\r\n  class ResizeManager extends Component$1 {\r\n    /**\r\n     * Create the ResizeManager.\r\n     *\r\n     * @param {Object} player\r\n     *        The `Player` that this class should be attached to.\r\n     *\r\n     * @param {Object} [options]\r\n     *        The key/value store of ResizeManager options.\r\n     *\r\n     * @param {Object} [options.ResizeObserver]\r\n     *        A polyfill for ResizeObserver can be passed in here.\r\n     *        If this is set to null it will ignore the native ResizeObserver and fall back to the iframe fallback.\r\n     */\r\n    constructor(player, options) {\r\n      let RESIZE_OBSERVER_AVAILABLE = options.ResizeObserver || window.ResizeObserver;\r\n\r\n      // if `null` was passed, we want to disable the ResizeObserver\r\n      if (options.ResizeObserver === null) {\r\n        RESIZE_OBSERVER_AVAILABLE = false;\r\n      }\r\n\r\n      // Only create an element when ResizeObserver isn't available\r\n      const options_ = merge$2({\r\n        createEl: !RESIZE_OBSERVER_AVAILABLE,\r\n        reportTouchActivity: false\r\n      }, options);\r\n      super(player, options_);\r\n      this.ResizeObserver = options.ResizeObserver || window.ResizeObserver;\r\n      this.loadListener_ = null;\r\n      this.resizeObserver_ = null;\r\n      this.debouncedHandler_ = debounce$1(() => {\r\n        this.resizeHandler();\r\n      }, 100, false, this);\r\n      if (RESIZE_OBSERVER_AVAILABLE) {\r\n        this.resizeObserver_ = new this.ResizeObserver(this.debouncedHandler_);\r\n        this.resizeObserver_.observe(player.el());\r\n      } else {\r\n        this.loadListener_ = () => {\r\n          if (!this.el_ || !this.el_.contentWindow) {\r\n            return;\r\n          }\r\n          const debouncedHandler_ = this.debouncedHandler_;\r\n          let unloadListener_ = this.unloadListener_ = function () {\r\n            off(this, 'resize', debouncedHandler_);\r\n            off(this, 'unload', unloadListener_);\r\n            unloadListener_ = null;\r\n          };\r\n\r\n          // safari and edge can unload the iframe before resizemanager dispose\r\n          // we have to dispose of event handlers correctly before that happens\r\n          on(this.el_.contentWindow, 'unload', unloadListener_);\r\n          on(this.el_.contentWindow, 'resize', debouncedHandler_);\r\n        };\r\n        this.one('load', this.loadListener_);\r\n      }\r\n    }\r\n    createEl() {\r\n      return super.createEl('iframe', {\r\n        className: 'vjs-resize-manager',\r\n        tabIndex: -1,\r\n        title: this.localize('No content')\r\n      }, {\r\n        'aria-hidden': 'true'\r\n      });\r\n    }\r\n\r\n    /**\r\n     * Called when a resize is triggered on the iframe or a resize is observed via the ResizeObserver\r\n     *\r\n     * @fires Player#playerresize\r\n     */\r\n    resizeHandler() {\r\n      /**\r\n       * Called when the player size has changed\r\n       *\r\n       * @event Player#playerresize\r\n       * @type {Event}\r\n       */\r\n      // make sure player is still around to trigger\r\n      // prevents this from causing an error after dispose\r\n      if (!this.player_ || !this.player_.trigger) {\r\n        return;\r\n      }\r\n      this.player_.trigger('playerresize');\r\n    }\r\n    dispose() {\r\n      if (this.debouncedHandler_) {\r\n        this.debouncedHandler_.cancel();\r\n      }\r\n      if (this.resizeObserver_) {\r\n        if (this.player_.el()) {\r\n          this.resizeObserver_.unobserve(this.player_.el());\r\n        }\r\n        this.resizeObserver_.disconnect();\r\n      }\r\n      if (this.loadListener_) {\r\n        this.off('load', this.loadListener_);\r\n      }\r\n      if (this.el_ && this.el_.contentWindow && this.unloadListener_) {\r\n        this.unloadListener_.call(this.el_.contentWindow);\r\n      }\r\n      this.ResizeObserver = null;\r\n      this.resizeObserver = null;\r\n      this.debouncedHandler_ = null;\r\n      this.loadListener_ = null;\r\n      super.dispose();\r\n    }\r\n  }\r\n  Component$1.registerComponent('ResizeManager', ResizeManager);\r\n\r\n  /** @import Player from './player' */\r\n\r\n  const defaults$1 = {\r\n    trackingThreshold: 20,\r\n    liveTolerance: 15\r\n  };\r\n\r\n  /*\r\n    track when we are at the live edge, and other helpers for live playback */\r\n\r\n  /**\r\n   * A class for checking live current time and determining when the player\r\n   * is at or behind the live edge.\r\n   */\r\n  class LiveTracker extends Component$1 {\r\n    /**\r\n     * Creates an instance of this class.\r\n     *\r\n     * @param {Player} player\r\n     *        The `Player` that this class should be attached to.\r\n     *\r\n     * @param {Object} [options]\r\n     *        The key/value store of player options.\r\n     *\r\n     * @param {number} [options.trackingThreshold=20]\r\n     *        Number of seconds of live window (seekableEnd - seekableStart) that\r\n     *        media needs to have before the liveui will be shown.\r\n     *\r\n     * @param {number} [options.liveTolerance=15]\r\n     *        Number of seconds behind live that we have to be\r\n     *        before we will be considered non-live. Note that this will only\r\n     *        be used when playing at the live edge. This allows large seekable end\r\n     *        changes to not effect whether we are live or not.\r\n     */\r\n    constructor(player, options) {\r\n      // LiveTracker does not need an element\r\n      const options_ = merge$2(defaults$1, options, {\r\n        createEl: false\r\n      });\r\n      super(player, options_);\r\n      this.trackLiveHandler_ = () => this.trackLive_();\r\n      this.handlePlay_ = e => this.handlePlay(e);\r\n      this.handleFirstTimeupdate_ = e => this.handleFirstTimeupdate(e);\r\n      this.handleSeeked_ = e => this.handleSeeked(e);\r\n      this.seekToLiveEdge_ = e => this.seekToLiveEdge(e);\r\n      this.reset_();\r\n      this.on(this.player_, 'durationchange', e => this.handleDurationchange(e));\r\n      // we should try to toggle tracking on canplay as native playback engines, like Safari\r\n      // may not have the proper values for things like seekableEnd until then\r\n      this.on(this.player_, 'canplay', () => this.toggleTracking());\r\n    }\r\n\r\n    /**\r\n     * all the functionality for tracking when seek end changes\r\n     * and for tracking how far past seek end we should be\r\n     */\r\n    trackLive_() {\r\n      const seekable = this.player_.seekable();\r\n\r\n      // skip undefined seekable\r\n      if (!seekable || !seekable.length) {\r\n        return;\r\n      }\r\n      const newTime = Number(window.performance.now().toFixed(4));\r\n      const deltaTime = this.lastTime_ === -1 ? 0 : (newTime - this.lastTime_) / 1000;\r\n      this.lastTime_ = newTime;\r\n      this.pastSeekEnd_ = this.pastSeekEnd() + deltaTime;\r\n      const liveCurrentTime = this.liveCurrentTime();\r\n      const currentTime = this.player_.currentTime();\r\n\r\n      // we are behind live if any are true\r\n      // 1. the player is paused\r\n      // 2. the user seeked to a location 2 seconds away from live\r\n      // 3. the difference between live and current time is greater\r\n      //    liveTolerance which defaults to 15s\r\n      let isBehind = this.player_.paused() || this.seekedBehindLive_ || Math.abs(liveCurrentTime - currentTime) > this.options_.liveTolerance;\r\n\r\n      // we cannot be behind if\r\n      // 1. until we have not seen a timeupdate yet\r\n      // 2. liveCurrentTime is Infinity, which happens on Android and Native Safari\r\n      if (!this.timeupdateSeen_ || liveCurrentTime === Infinity) {\r\n        isBehind = false;\r\n      }\r\n      if (isBehind !== this.behindLiveEdge_) {\r\n        this.behindLiveEdge_ = isBehind;\r\n        this.trigger('liveedgechange');\r\n      }\r\n    }\r\n\r\n    /**\r\n     * handle a durationchange event on the player\r\n     * and start/stop tracking accordingly.\r\n     */\r\n    handleDurationchange() {\r\n      this.toggleTracking();\r\n    }\r\n\r\n    /**\r\n     * start/stop tracking\r\n     */\r\n    toggleTracking() {\r\n      if (this.player_.duration() === Infinity && this.liveWindow() >= this.options_.trackingThreshold) {\r\n        if (this.player_.options_.liveui) {\r\n          this.player_.addClass('vjs-liveui');\r\n        }\r\n        this.startTracking();\r\n      } else {\r\n        this.player_.removeClass('vjs-liveui');\r\n        this.stopTracking();\r\n      }\r\n    }\r\n\r\n    /**\r\n     * start tracking live playback\r\n     */\r\n    startTracking() {\r\n      if (this.isTracking()) {\r\n        return;\r\n      }\r\n\r\n      // If we haven't seen a timeupdate, we need to check whether playback\r\n      // began before this component started tracking. This can happen commonly\r\n      // when using autoplay.\r\n      if (!this.timeupdateSeen_) {\r\n        this.timeupdateSeen_ = this.player_.hasStarted();\r\n      }\r\n      this.trackingInterval_ = this.setInterval(this.trackLiveHandler_, UPDATE_REFRESH_INTERVAL);\r\n      this.trackLive_();\r\n      this.on(this.player_, ['play', 'pause'], this.trackLiveHandler_);\r\n      if (!this.timeupdateSeen_) {\r\n        this.one(this.player_, 'play', this.handlePlay_);\r\n        this.one(this.player_, 'timeupdate', this.handleFirstTimeupdate_);\r\n      } else {\r\n        this.on(this.player_, 'seeked', this.handleSeeked_);\r\n      }\r\n    }\r\n\r\n    /**\r\n     * handle the first timeupdate on the player if it wasn't already playing\r\n     * when live tracker started tracking.\r\n     */\r\n    handleFirstTimeupdate() {\r\n      this.timeupdateSeen_ = true;\r\n      this.on(this.player_, 'seeked', this.handleSeeked_);\r\n    }\r\n\r\n    /**\r\n     * Keep track of what time a seek starts, and listen for seeked\r\n     * to find where a seek ends.\r\n     */\r\n    handleSeeked() {\r\n      const timeDiff = Math.abs(this.liveCurrentTime() - this.player_.currentTime());\r\n      this.seekedBehindLive_ = this.nextSeekedFromUser_ && timeDiff > 2;\r\n      this.nextSeekedFromUser_ = false;\r\n      this.trackLive_();\r\n    }\r\n\r\n    /**\r\n     * handle the first play on the player, and make sure that we seek\r\n     * right to the live edge.\r\n     */\r\n    handlePlay() {\r\n      this.one(this.player_, 'timeupdate', this.seekToLiveEdge_);\r\n    }\r\n\r\n    /**\r\n     * Stop tracking, and set all internal variables to\r\n     * their initial value.\r\n     */\r\n    reset_() {\r\n      this.lastTime_ = -1;\r\n      this.pastSeekEnd_ = 0;\r\n      this.lastSeekEnd_ = -1;\r\n      this.behindLiveEdge_ = true;\r\n      this.timeupdateSeen_ = false;\r\n      this.seekedBehindLive_ = false;\r\n      this.nextSeekedFromUser_ = false;\r\n      this.clearInterval(this.trackingInterval_);\r\n      this.trackingInterval_ = null;\r\n      this.off(this.player_, ['play', 'pause'], this.trackLiveHandler_);\r\n      this.off(this.player_, 'seeked', this.handleSeeked_);\r\n      this.off(this.player_, 'play', this.handlePlay_);\r\n      this.off(this.player_, 'timeupdate', this.handleFirstTimeupdate_);\r\n      this.off(this.player_, 'timeupdate', this.seekToLiveEdge_);\r\n    }\r\n\r\n    /**\r\n     * The next seeked event is from the user. Meaning that any seek\r\n     * > 2s behind live will be considered behind live for real and\r\n     * liveTolerance will be ignored.\r\n     */\r\n    nextSeekedFromUser() {\r\n      this.nextSeekedFromUser_ = true;\r\n    }\r\n\r\n    /**\r\n     * stop tracking live playback\r\n     */\r\n    stopTracking() {\r\n      if (!this.isTracking()) {\r\n        return;\r\n      }\r\n      this.reset_();\r\n      this.trigger('liveedgechange');\r\n    }\r\n\r\n    /**\r\n     * A helper to get the player seekable end\r\n     * so that we don't have to null check everywhere\r\n     *\r\n     * @return {number}\r\n     *         The furthest seekable end or Infinity.\r\n     */\r\n    seekableEnd() {\r\n      const seekable = this.player_.seekable();\r\n      const seekableEnds = [];\r\n      let i = seekable ? seekable.length : 0;\r\n      while (i--) {\r\n        seekableEnds.push(seekable.end(i));\r\n      }\r\n\r\n      // grab the furthest seekable end after sorting, or if there are none\r\n      // default to Infinity\r\n      return seekableEnds.length ? seekableEnds.sort()[seekableEnds.length - 1] : Infinity;\r\n    }\r\n\r\n    /**\r\n     * A helper to get the player seekable start\r\n     * so that we don't have to null check everywhere\r\n     *\r\n     * @return {number}\r\n     *         The earliest seekable start or 0.\r\n     */\r\n    seekableStart() {\r\n      const seekable = this.player_.seekable();\r\n      const seekableStarts = [];\r\n      let i = seekable ? seekable.length : 0;\r\n      while (i--) {\r\n        seekableStarts.push(seekable.start(i));\r\n      }\r\n\r\n      // grab the first seekable start after sorting, or if there are none\r\n      // default to 0\r\n      return seekableStarts.length ? seekableStarts.sort()[0] : 0;\r\n    }\r\n\r\n    /**\r\n     * Get the live time window aka\r\n     * the amount of time between seekable start and\r\n     * live current time.\r\n     *\r\n     * @return {number}\r\n     *         The amount of seconds that are seekable in\r\n     *         the live video.\r\n     */\r\n    liveWindow() {\r\n      const liveCurrentTime = this.liveCurrentTime();\r\n\r\n      // if liveCurrenTime is Infinity then we don't have a liveWindow at all\r\n      if (liveCurrentTime === Infinity) {\r\n        return 0;\r\n      }\r\n      return liveCurrentTime - this.seekableStart();\r\n    }\r\n\r\n    /**\r\n     * Determines if the player is live, only checks if this component\r\n     * is tracking live playback or not\r\n     *\r\n     * @return {boolean}\r\n     *         Whether liveTracker is tracking\r\n     */\r\n    isLive() {\r\n      return this.isTracking();\r\n    }\r\n\r\n    /**\r\n     * Determines if currentTime is at the live edge and won't fall behind\r\n     * on each seekableendchange\r\n     *\r\n     * @return {boolean}\r\n     *         Whether playback is at the live edge\r\n     */\r\n    atLiveEdge() {\r\n      return !this.behindLiveEdge();\r\n    }\r\n\r\n    /**\r\n     * get what we expect the live current time to be\r\n     *\r\n     * @return {number}\r\n     *         The expected live current time\r\n     */\r\n    liveCurrentTime() {\r\n      return this.pastSeekEnd() + this.seekableEnd();\r\n    }\r\n\r\n    /**\r\n     * The number of seconds that have occurred after seekable end\r\n     * changed. This will be reset to 0 once seekable end changes.\r\n     *\r\n     * @return {number}\r\n     *         Seconds past the current seekable end\r\n     */\r\n    pastSeekEnd() {\r\n      const seekableEnd = this.seekableEnd();\r\n      if (this.lastSeekEnd_ !== -1 && seekableEnd !== this.lastSeekEnd_) {\r\n        this.pastSeekEnd_ = 0;\r\n      }\r\n      this.lastSeekEnd_ = seekableEnd;\r\n      return this.pastSeekEnd_;\r\n    }\r\n\r\n    /**\r\n     * If we are currently behind the live edge, aka currentTime will be\r\n     * behind on a seekableendchange\r\n     *\r\n     * @return {boolean}\r\n     *         If we are behind the live edge\r\n     */\r\n    behindLiveEdge() {\r\n      return this.behindLiveEdge_;\r\n    }\r\n\r\n    /**\r\n     * Whether live tracker is currently tracking or not.\r\n     */\r\n    isTracking() {\r\n      return typeof this.trackingInterval_ === 'number';\r\n    }\r\n\r\n    /**\r\n     * Seek to the live edge if we are behind the live edge\r\n     */\r\n    seekToLiveEdge() {\r\n      this.seekedBehindLive_ = false;\r\n      if (this.atLiveEdge()) {\r\n        return;\r\n      }\r\n      this.nextSeekedFromUser_ = false;\r\n      this.player_.currentTime(this.liveCurrentTime());\r\n    }\r\n\r\n    /**\r\n     * Dispose of liveTracker\r\n     */\r\n    dispose() {\r\n      this.stopTracking();\r\n      super.dispose();\r\n    }\r\n  }\r\n  Component$1.registerComponent('LiveTracker', LiveTracker);\r\n\r\n  /**\r\n   * Displays an element over the player which contains an optional title and\r\n   * description for the current content.\r\n   *\r\n   * Much of the code for this component originated in the now obsolete\r\n   * videojs-dock plugin: https://github.com/brightcove/videojs-dock/\r\n   *\r\n   * @extends Component\r\n   */\r\n  class TitleBar extends Component$1 {\r\n    constructor(player, options) {\r\n      super(player, options);\r\n      this.on('statechanged', e => this.updateDom_());\r\n      this.updateDom_();\r\n    }\r\n\r\n    /**\r\n     * Create the `TitleBar`'s DOM element\r\n     *\r\n     * @return {Element}\r\n     *         The element that was created.\r\n     */\r\n    createEl() {\r\n      this.els = {\r\n        title: createEl('div', {\r\n          className: 'vjs-title-bar-title',\r\n          id: `vjs-title-bar-title-${newGUID()}`\r\n        }),\r\n        description: createEl('div', {\r\n          className: 'vjs-title-bar-description',\r\n          id: `vjs-title-bar-description-${newGUID()}`\r\n        })\r\n      };\r\n      return createEl('div', {\r\n        className: 'vjs-title-bar'\r\n      }, {}, values$1(this.els));\r\n    }\r\n\r\n    /**\r\n     * Updates the DOM based on the component's state object.\r\n     */\r\n    updateDom_() {\r\n      const tech = this.player_.tech_;\r\n      const techEl = tech && tech.el_;\r\n      const techAriaAttrs = {\r\n        title: 'aria-labelledby',\r\n        description: 'aria-describedby'\r\n      };\r\n      ['title', 'description'].forEach(k => {\r\n        const value = this.state[k];\r\n        const el = this.els[k];\r\n        const techAriaAttr = techAriaAttrs[k];\r\n        emptyEl(el);\r\n        if (value) {\r\n          textContent(el, value);\r\n        }\r\n\r\n        // If there is a tech element available, update its ARIA attributes\r\n        // according to whether a title and/or description have been provided.\r\n        if (techEl) {\r\n          techEl.removeAttribute(techAriaAttr);\r\n          if (value) {\r\n            techEl.setAttribute(techAriaAttr, el.id);\r\n          }\r\n        }\r\n      });\r\n      if (this.state.title || this.state.description) {\r\n        this.show();\r\n      } else {\r\n        this.hide();\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Update the contents of the title bar component with new title and\r\n     * description text.\r\n     *\r\n     * If both title and description are missing, the title bar will be hidden.\r\n     *\r\n     * If either title or description are present, the title bar will be visible.\r\n     *\r\n     * NOTE: Any previously set value will be preserved. To unset a previously\r\n     * set value, you must pass an empty string or null.\r\n     *\r\n     * For example:\r\n     *\r\n     * ```\r\n     * update({title: 'foo', description: 'bar'}) // title: 'foo', description: 'bar'\r\n     * update({description: 'bar2'}) // title: 'foo', description: 'bar2'\r\n     * update({title: ''}) // title: '', description: 'bar2'\r\n     * update({title: 'foo', description: null}) // title: 'foo', description: null\r\n     * ```\r\n     *\r\n     * @param  {Object} [options={}]\r\n     *         An options object. When empty, the title bar will be hidden.\r\n     *\r\n     * @param  {string} [options.title]\r\n     *         A title to display in the title bar.\r\n     *\r\n     * @param  {string} [options.description]\r\n     *         A description to display in the title bar.\r\n     */\r\n    update(options) {\r\n      this.setState(options);\r\n    }\r\n\r\n    /**\r\n     * Dispose the component.\r\n     */\r\n    dispose() {\r\n      const tech = this.player_.tech_;\r\n      const techEl = tech && tech.el_;\r\n      if (techEl) {\r\n        techEl.removeAttribute('aria-labelledby');\r\n        techEl.removeAttribute('aria-describedby');\r\n      }\r\n      super.dispose();\r\n      this.els = null;\r\n    }\r\n  }\r\n  Component$1.registerComponent('TitleBar', TitleBar);\r\n\r\n  /** @import Player from './player' */\r\n\r\n  /**\r\n   * @typedef {object} TransientButtonOptions\r\n   * @property {string} [controlText] Control text, usually visible for these buttons\r\n   * @property {number} [initialDisplay=4000] Time in ms that button should initially remain visible\r\n   * @property {Array<'top'|'neartop'|'bottom'|'left'|'right'>} [position] Array of position strings to add basic styles for positioning\r\n   * @property {string} [className] Class(es) to add\r\n   * @property {boolean} [takeFocus=false] Whether element sohuld take focus when shown\r\n   * @property {Function} [clickHandler] Function called on button activation\r\n   */\r\n\r\n  /** @type {TransientButtonOptions} */\r\n  const defaults = {\r\n    initialDisplay: 4000,\r\n    position: [],\r\n    takeFocus: false\r\n  };\r\n\r\n  /**\r\n   * A floating transient button.\r\n   * It's recommended to insert these buttons _before_ the control bar with the this argument to `addChild`\r\n   * for a logical tab order.\r\n   *\r\n   * @example\r\n   * ```\r\n   * player.addChild(\r\n   *   'TransientButton',\r\n   *   options,\r\n   *   player.children().indexOf(player.getChild(\"ControlBar\"))\r\n   * )\r\n   * ```\r\n   *\r\n   * @extends Button\r\n   */\r\n  class TransientButton extends Button {\r\n    /**\r\n     * TransientButton constructor\r\n     *\r\n     * @param {Player} player The button's player\r\n     * @param {TransientButtonOptions} options Options for the transient button\r\n     */\r\n    constructor(player, options) {\r\n      options = merge$2(defaults, options);\r\n      super(player, options);\r\n      this.controlText(options.controlText);\r\n      this.hide();\r\n\r\n      // When shown, the float button will be visible even if the user is inactive.\r\n      // Clear this if there is any interaction.\r\n      this.on(this.player_, ['useractive', 'userinactive'], e => {\r\n        this.removeClass('force-display');\r\n      });\r\n    }\r\n\r\n    /**\r\n     * Return CSS class including position classes\r\n     *\r\n     * @return {string} CSS class list\r\n     */\r\n    buildCSSClass() {\r\n      return `vjs-transient-button focus-visible ${this.options_.position.map(c => `vjs-${c}`).join(' ')}`;\r\n    }\r\n\r\n    /**\r\n     * Create the button element\r\n     *\r\n     * @return {HTMLButtonElement} The button element\r\n     */\r\n    createEl() {\r\n      /** @type HTMLButtonElement */\r\n      const el = createEl('button', {}, {\r\n        type: 'button',\r\n        class: this.buildCSSClass()\r\n      }, createEl('span'));\r\n      this.controlTextEl_ = el.querySelector('span');\r\n      return el;\r\n    }\r\n\r\n    /**\r\n     * Show the button. The button will remain visible for the `initialDisplay` time, default 4s,\r\n     * and when there is user activity.\r\n     */\r\n    show() {\r\n      super.show();\r\n      this.addClass('force-display');\r\n      if (this.options_.takeFocus) {\r\n        this.el().focus({\r\n          preventScroll: true\r\n        });\r\n      }\r\n      this.forceDisplayTimeout = this.player_.setTimeout(() => {\r\n        this.removeClass('force-display');\r\n      }, this.options_.initialDisplay);\r\n    }\r\n\r\n    /**\r\n     * Hide the display, even if during the `initialDisplay` time.\r\n     */\r\n    hide() {\r\n      this.removeClass('force-display');\r\n      super.hide();\r\n    }\r\n\r\n    /**\r\n     * Dispose the component\r\n     */\r\n    dispose() {\r\n      this.player_.clearTimeout(this.forceDisplayTimeout);\r\n      super.dispose();\r\n    }\r\n  }\r\n  Component$1.registerComponent('TransientButton', TransientButton);\r\n\r\n  /** @import Html5 from './html5' */\r\n\r\n  /**\r\n   * This function is used to fire a sourceset when there is something\r\n   * similar to `mediaEl.load()` being called. It will try to find the source via\r\n   * the `src` attribute and then the `<source>` elements. It will then fire `sourceset`\r\n   * with the source that was found or empty string if we cannot know. If it cannot\r\n   * find a source then `sourceset` will not be fired.\r\n   *\r\n   * @param {Html5} tech\r\n   *        The tech object that sourceset was setup on\r\n   *\r\n   * @return {boolean}\r\n   *         returns false if the sourceset was not fired and true otherwise.\r\n   */\r\n  const sourcesetLoad = tech => {\r\n    const el = tech.el();\r\n\r\n    // if `el.src` is set, that source will be loaded.\r\n    if (el.hasAttribute('src')) {\r\n      tech.triggerSourceset(el.src);\r\n      return true;\r\n    }\r\n\r\n    /**\r\n     * Since there isn't a src property on the media element, source elements will be used for\r\n     * implementing the source selection algorithm. This happens asynchronously and\r\n     * for most cases were there is more than one source we cannot tell what source will\r\n     * be loaded, without re-implementing the source selection algorithm. At this time we are not\r\n     * going to do that. There are three special cases that we do handle here though:\r\n     *\r\n     * 1. If there are no sources, do not fire `sourceset`.\r\n     * 2. If there is only one `<source>` with a `src` property/attribute that is our `src`\r\n     * 3. If there is more than one `<source>` but all of them have the same `src` url.\r\n     *    That will be our src.\r\n     */\r\n    const sources = tech.$$('source');\r\n    const srcUrls = [];\r\n    let src = '';\r\n\r\n    // if there are no sources, do not fire sourceset\r\n    if (!sources.length) {\r\n      return false;\r\n    }\r\n\r\n    // only count valid/non-duplicate source elements\r\n    for (let i = 0; i < sources.length; i++) {\r\n      const url = sources[i].src;\r\n      if (url && srcUrls.indexOf(url) === -1) {\r\n        srcUrls.push(url);\r\n      }\r\n    }\r\n\r\n    // there were no valid sources\r\n    if (!srcUrls.length) {\r\n      return false;\r\n    }\r\n\r\n    // there is only one valid source element url\r\n    // use that\r\n    if (srcUrls.length === 1) {\r\n      src = srcUrls[0];\r\n    }\r\n    tech.triggerSourceset(src);\r\n    return true;\r\n  };\r\n\r\n  /**\r\n   * our implementation of an `innerHTML` descriptor for browsers\r\n   * that do not have one.\r\n   */\r\n  const innerHTMLDescriptorPolyfill = Object.defineProperty({}, 'innerHTML', {\r\n    get() {\r\n      return this.cloneNode(true).innerHTML;\r\n    },\r\n    set(v) {\r\n      // make a dummy node to use innerHTML on\r\n      const dummy = document.createElement(this.nodeName.toLowerCase());\r\n\r\n      // set innerHTML to the value provided\r\n      dummy.innerHTML = v;\r\n\r\n      // make a document fragment to hold the nodes from dummy\r\n      const docFrag = document.createDocumentFragment();\r\n\r\n      // copy all of the nodes created by the innerHTML on dummy\r\n      // to the document fragment\r\n      while (dummy.childNodes.length) {\r\n        docFrag.appendChild(dummy.childNodes[0]);\r\n      }\r\n\r\n      // remove content\r\n      this.innerText = '';\r\n\r\n      // now we add all of that html in one by appending the\r\n      // document fragment. This is how innerHTML does it.\r\n      window.Element.prototype.appendChild.call(this, docFrag);\r\n\r\n      // then return the result that innerHTML's setter would\r\n      return this.innerHTML;\r\n    }\r\n  });\r\n\r\n  /**\r\n   * Get a property descriptor given a list of priorities and the\r\n   * property to get.\r\n   */\r\n  const getDescriptor = (priority, prop) => {\r\n    let descriptor = {};\r\n    for (let i = 0; i < priority.length; i++) {\r\n      descriptor = Object.getOwnPropertyDescriptor(priority[i], prop);\r\n      if (descriptor && descriptor.set && descriptor.get) {\r\n        break;\r\n      }\r\n    }\r\n    descriptor.enumerable = true;\r\n    descriptor.configurable = true;\r\n    return descriptor;\r\n  };\r\n  const getInnerHTMLDescriptor = tech => getDescriptor([tech.el(), window.HTMLMediaElement.prototype, window.Element.prototype, innerHTMLDescriptorPolyfill], 'innerHTML');\r\n\r\n  /**\r\n   * Patches browser internal functions so that we can tell synchronously\r\n   * if a `<source>` was appended to the media element. For some reason this\r\n   * causes a `sourceset` if the the media element is ready and has no source.\r\n   * This happens when:\r\n   * - The page has just loaded and the media element does not have a source.\r\n   * - The media element was emptied of all sources, then `load()` was called.\r\n   *\r\n   * It does this by patching the following functions/properties when they are supported:\r\n   *\r\n   * - `append()` - can be used to add a `<source>` element to the media element\r\n   * - `appendChild()` - can be used to add a `<source>` element to the media element\r\n   * - `insertAdjacentHTML()` -  can be used to add a `<source>` element to the media element\r\n   * - `innerHTML` -  can be used to add a `<source>` element to the media element\r\n   *\r\n   * @param {Html5} tech\r\n   *        The tech object that sourceset is being setup on.\r\n   */\r\n  const firstSourceWatch = function (tech) {\r\n    const el = tech.el();\r\n\r\n    // make sure firstSourceWatch isn't setup twice.\r\n    if (el.resetSourceWatch_) {\r\n      return;\r\n    }\r\n    const old = {};\r\n    const innerDescriptor = getInnerHTMLDescriptor(tech);\r\n    const appendWrapper = appendFn => (...args) => {\r\n      const retval = appendFn.apply(el, args);\r\n      sourcesetLoad(tech);\r\n      return retval;\r\n    };\r\n    ['append', 'appendChild', 'insertAdjacentHTML'].forEach(k => {\r\n      if (!el[k]) {\r\n        return;\r\n      }\r\n\r\n      // store the old function\r\n      old[k] = el[k];\r\n\r\n      // call the old function with a sourceset if a source\r\n      // was loaded\r\n      el[k] = appendWrapper(old[k]);\r\n    });\r\n    Object.defineProperty(el, 'innerHTML', merge$2(innerDescriptor, {\r\n      set: appendWrapper(innerDescriptor.set)\r\n    }));\r\n    el.resetSourceWatch_ = () => {\r\n      el.resetSourceWatch_ = null;\r\n      Object.keys(old).forEach(k => {\r\n        el[k] = old[k];\r\n      });\r\n      Object.defineProperty(el, 'innerHTML', innerDescriptor);\r\n    };\r\n\r\n    // on the first sourceset, we need to revert our changes\r\n    tech.one('sourceset', el.resetSourceWatch_);\r\n  };\r\n\r\n  /**\r\n   * our implementation of a `src` descriptor for browsers\r\n   * that do not have one\r\n   */\r\n  const srcDescriptorPolyfill = Object.defineProperty({}, 'src', {\r\n    get() {\r\n      if (this.hasAttribute('src')) {\r\n        return getAbsoluteURL(window.Element.prototype.getAttribute.call(this, 'src'));\r\n      }\r\n      return '';\r\n    },\r\n    set(v) {\r\n      window.Element.prototype.setAttribute.call(this, 'src', v);\r\n      return v;\r\n    }\r\n  });\r\n  const getSrcDescriptor = tech => getDescriptor([tech.el(), window.HTMLMediaElement.prototype, srcDescriptorPolyfill], 'src');\r\n\r\n  /**\r\n   * setup `sourceset` handling on the `Html5` tech. This function\r\n   * patches the following element properties/functions:\r\n   *\r\n   * - `src` - to determine when `src` is set\r\n   * - `setAttribute()` - to determine when `src` is set\r\n   * - `load()` - this re-triggers the source selection algorithm, and can\r\n   *              cause a sourceset.\r\n   *\r\n   * If there is no source when we are adding `sourceset` support or during a `load()`\r\n   * we also patch the functions listed in `firstSourceWatch`.\r\n   *\r\n   * @param {Html5} tech\r\n   *        The tech to patch\r\n   */\r\n  const setupSourceset = function (tech) {\r\n    if (!tech.featuresSourceset) {\r\n      return;\r\n    }\r\n    const el = tech.el();\r\n\r\n    // make sure sourceset isn't setup twice.\r\n    if (el.resetSourceset_) {\r\n      return;\r\n    }\r\n    const srcDescriptor = getSrcDescriptor(tech);\r\n    const oldSetAttribute = el.setAttribute;\r\n    const oldLoad = el.load;\r\n    Object.defineProperty(el, 'src', merge$2(srcDescriptor, {\r\n      set: v => {\r\n        const retval = srcDescriptor.set.call(el, v);\r\n\r\n        // we use the getter here to get the actual value set on src\r\n        tech.triggerSourceset(el.src);\r\n        return retval;\r\n      }\r\n    }));\r\n    el.setAttribute = (n, v) => {\r\n      const retval = oldSetAttribute.call(el, n, v);\r\n      if (/src/i.test(n)) {\r\n        tech.triggerSourceset(el.src);\r\n      }\r\n      return retval;\r\n    };\r\n    el.load = () => {\r\n      const retval = oldLoad.call(el);\r\n\r\n      // if load was called, but there was no source to fire\r\n      // sourceset on. We have to watch for a source append\r\n      // as that can trigger a `sourceset` when the media element\r\n      // has no source\r\n      if (!sourcesetLoad(tech)) {\r\n        tech.triggerSourceset('');\r\n        firstSourceWatch(tech);\r\n      }\r\n      return retval;\r\n    };\r\n    if (el.currentSrc) {\r\n      tech.triggerSourceset(el.currentSrc);\r\n    } else if (!sourcesetLoad(tech)) {\r\n      firstSourceWatch(tech);\r\n    }\r\n    el.resetSourceset_ = () => {\r\n      el.resetSourceset_ = null;\r\n      el.load = oldLoad;\r\n      el.setAttribute = oldSetAttribute;\r\n      Object.defineProperty(el, 'src', srcDescriptor);\r\n      if (el.resetSourceWatch_) {\r\n        el.resetSourceWatch_();\r\n      }\r\n    };\r\n  };\r\n\r\n  /**\r\n   * @file html5.js\r\n   */\r\n\r\n  /**\r\n   * HTML5 Media Controller - Wrapper for HTML5 Media API\r\n   *\r\n   * @mixes Tech~SourceHandlerAdditions\r\n   * @extends Tech\r\n   */\r\n  class Html5 extends Tech {\r\n    /**\r\n    * Create an instance of this Tech.\r\n    *\r\n    * @param {Object} [options]\r\n    *        The key/value store of player options.\r\n    *\r\n    * @param {Function} [ready]\r\n    *        Callback function to call when the `HTML5` Tech is ready.\r\n    */\r\n    constructor(options, ready) {\r\n      super(options, ready);\r\n      const source = options.source;\r\n      let crossoriginTracks = false;\r\n      this.featuresVideoFrameCallback = this.featuresVideoFrameCallback && this.el_.tagName === 'VIDEO';\r\n\r\n      // Set the source if one is provided\r\n      // 1) Check if the source is new (if not, we want to keep the original so playback isn't interrupted)\r\n      // 2) Check to see if the network state of the tag was failed at init, and if so, reset the source\r\n      // anyway so the error gets fired.\r\n      if (source && (this.el_.currentSrc !== source.src || options.tag && options.tag.initNetworkState_ === 3)) {\r\n        this.setSource(source);\r\n      } else {\r\n        this.handleLateInit_(this.el_);\r\n      }\r\n\r\n      // setup sourceset after late sourceset/init\r\n      if (options.enableSourceset) {\r\n        this.setupSourcesetHandling_();\r\n      }\r\n      this.isScrubbing_ = false;\r\n      if (this.el_.hasChildNodes()) {\r\n        const nodes = this.el_.childNodes;\r\n        let nodesLength = nodes.length;\r\n        const removeNodes = [];\r\n        while (nodesLength--) {\r\n          const node = nodes[nodesLength];\r\n          const nodeName = node.nodeName.toLowerCase();\r\n          if (nodeName === 'track') {\r\n            if (!this.featuresNativeTextTracks) {\r\n              // Empty video tag tracks so the built-in player doesn't use them also.\r\n              // This may not be fast enough to stop HTML5 browsers from reading the tags\r\n              // so we'll need to turn off any default tracks if we're manually doing\r\n              // captions and subtitles. videoElement.textTracks\r\n              removeNodes.push(node);\r\n            } else {\r\n              // store HTMLTrackElement and TextTrack to remote list\r\n              this.remoteTextTrackEls().addTrackElement_(node);\r\n              this.remoteTextTracks().addTrack(node.track);\r\n              this.textTracks().addTrack(node.track);\r\n              if (!crossoriginTracks && !this.el_.hasAttribute('crossorigin') && isCrossOrigin(node.src)) {\r\n                crossoriginTracks = true;\r\n              }\r\n            }\r\n          }\r\n        }\r\n        for (let i = 0; i < removeNodes.length; i++) {\r\n          this.el_.removeChild(removeNodes[i]);\r\n        }\r\n      }\r\n      this.proxyNativeTracks_();\r\n      if (this.featuresNativeTextTracks && crossoriginTracks) {\r\n        log$1.warn('Text Tracks are being loaded from another origin but the crossorigin attribute isn\\'t used.\\n' + 'This may prevent text tracks from loading.');\r\n      }\r\n\r\n      // prevent iOS Safari from disabling metadata text tracks during native playback\r\n      this.restoreMetadataTracksInIOSNativePlayer_();\r\n\r\n      // Determine if native controls should be used\r\n      // Our goal should be to get the custom controls on mobile solid everywhere\r\n      // so we can remove this all together. Right now this will block custom\r\n      // controls on touch enabled laptops like the Chrome Pixel\r\n      if ((TOUCH_ENABLED || IS_IPHONE) && options.nativeControlsForTouch === true) {\r\n        this.setControls(true);\r\n      }\r\n\r\n      // on iOS, we want to proxy `webkitbeginfullscreen` and `webkitendfullscreen`\r\n      // into a `fullscreenchange` event\r\n      this.proxyWebkitFullscreen_();\r\n      this.triggerReady();\r\n    }\r\n\r\n    /**\r\n     * Dispose of `HTML5` media element and remove all tracks.\r\n     */\r\n    dispose() {\r\n      if (this.el_ && this.el_.resetSourceset_) {\r\n        this.el_.resetSourceset_();\r\n      }\r\n      Html5.disposeMediaElement(this.el_);\r\n      this.options_ = null;\r\n\r\n      // tech will handle clearing of the emulated track list\r\n      super.dispose();\r\n    }\r\n\r\n    /**\r\n     * Modify the media element so that we can detect when\r\n     * the source is changed. Fires `sourceset` just after the source has changed\r\n     */\r\n    setupSourcesetHandling_() {\r\n      setupSourceset(this);\r\n    }\r\n\r\n    /**\r\n     * When a captions track is enabled in the iOS Safari native player, all other\r\n     * tracks are disabled (including metadata tracks), which nulls all of their\r\n     * associated cue points. This will restore metadata tracks to their pre-fullscreen\r\n     * state in those cases so that cue points are not needlessly lost.\r\n     *\r\n     * @private\r\n     */\r\n    restoreMetadataTracksInIOSNativePlayer_() {\r\n      const textTracks = this.textTracks();\r\n      let metadataTracksPreFullscreenState;\r\n\r\n      // captures a snapshot of every metadata track's current state\r\n      const takeMetadataTrackSnapshot = () => {\r\n        metadataTracksPreFullscreenState = [];\r\n        for (let i = 0; i < textTracks.length; i++) {\r\n          const track = textTracks[i];\r\n          if (track.kind === 'metadata') {\r\n            metadataTracksPreFullscreenState.push({\r\n              track,\r\n              storedMode: track.mode\r\n            });\r\n          }\r\n        }\r\n      };\r\n\r\n      // snapshot each metadata track's initial state, and update the snapshot\r\n      // each time there is a track 'change' event\r\n      takeMetadataTrackSnapshot();\r\n      textTracks.addEventListener('change', takeMetadataTrackSnapshot);\r\n      this.on('dispose', () => textTracks.removeEventListener('change', takeMetadataTrackSnapshot));\r\n      const restoreTrackMode = () => {\r\n        for (let i = 0; i < metadataTracksPreFullscreenState.length; i++) {\r\n          const storedTrack = metadataTracksPreFullscreenState[i];\r\n          if (storedTrack.track.mode === 'disabled' && storedTrack.track.mode !== storedTrack.storedMode) {\r\n            storedTrack.track.mode = storedTrack.storedMode;\r\n          }\r\n        }\r\n        // we only want this handler to be executed on the first 'change' event\r\n        textTracks.removeEventListener('change', restoreTrackMode);\r\n      };\r\n\r\n      // when we enter fullscreen playback, stop updating the snapshot and\r\n      // restore all track modes to their pre-fullscreen state\r\n      this.on('webkitbeginfullscreen', () => {\r\n        textTracks.removeEventListener('change', takeMetadataTrackSnapshot);\r\n\r\n        // remove the listener before adding it just in case it wasn't previously removed\r\n        textTracks.removeEventListener('change', restoreTrackMode);\r\n        textTracks.addEventListener('change', restoreTrackMode);\r\n      });\r\n\r\n      // start updating the snapshot again after leaving fullscreen\r\n      this.on('webkitendfullscreen', () => {\r\n        // remove the listener before adding it just in case it wasn't previously removed\r\n        textTracks.removeEventListener('change', takeMetadataTrackSnapshot);\r\n        textTracks.addEventListener('change', takeMetadataTrackSnapshot);\r\n\r\n        // remove the restoreTrackMode handler in case it wasn't triggered during fullscreen playback\r\n        textTracks.removeEventListener('change', restoreTrackMode);\r\n      });\r\n    }\r\n\r\n    /**\r\n     * Attempt to force override of tracks for the given type\r\n     *\r\n     * @param {string} type - Track type to override, possible values include 'Audio',\r\n     * 'Video', and 'Text'.\r\n     * @param {boolean} override - If set to true native audio/video will be overridden,\r\n     * otherwise native audio/video will potentially be used.\r\n     * @private\r\n     */\r\n    overrideNative_(type, override) {\r\n      // If there is no behavioral change don't add/remove listeners\r\n      if (override !== this[`featuresNative${type}Tracks`]) {\r\n        return;\r\n      }\r\n      const lowerCaseType = type.toLowerCase();\r\n      if (this[`${lowerCaseType}TracksListeners_`]) {\r\n        Object.keys(this[`${lowerCaseType}TracksListeners_`]).forEach(eventName => {\r\n          const elTracks = this.el()[`${lowerCaseType}Tracks`];\r\n          elTracks.removeEventListener(eventName, this[`${lowerCaseType}TracksListeners_`][eventName]);\r\n        });\r\n      }\r\n      this[`featuresNative${type}Tracks`] = !override;\r\n      this[`${lowerCaseType}TracksListeners_`] = null;\r\n      this.proxyNativeTracksForType_(lowerCaseType);\r\n    }\r\n\r\n    /**\r\n     * Attempt to force override of native audio tracks.\r\n     *\r\n     * @param {boolean} override - If set to true native audio will be overridden,\r\n     * otherwise native audio will potentially be used.\r\n     */\r\n    overrideNativeAudioTracks(override) {\r\n      this.overrideNative_('Audio', override);\r\n    }\r\n\r\n    /**\r\n     * Attempt to force override of native video tracks.\r\n     *\r\n     * @param {boolean} override - If set to true native video will be overridden,\r\n     * otherwise native video will potentially be used.\r\n     */\r\n    overrideNativeVideoTracks(override) {\r\n      this.overrideNative_('Video', override);\r\n    }\r\n\r\n    /**\r\n     * Proxy native track list events for the given type to our track\r\n     * lists if the browser we are playing in supports that type of track list.\r\n     *\r\n     * @param {string} name - Track type; values include 'audio', 'video', and 'text'\r\n     * @private\r\n     */\r\n    proxyNativeTracksForType_(name) {\r\n      const props = NORMAL[name];\r\n      const elTracks = this.el()[props.getterName];\r\n      const techTracks = this[props.getterName]();\r\n      if (!this[`featuresNative${props.capitalName}Tracks`] || !elTracks || !elTracks.addEventListener) {\r\n        return;\r\n      }\r\n      const listeners = {\r\n        change: e => {\r\n          const event = {\r\n            type: 'change',\r\n            target: techTracks,\r\n            currentTarget: techTracks,\r\n            srcElement: techTracks\r\n          };\r\n          techTracks.trigger(event);\r\n\r\n          // if we are a text track change event, we should also notify the\r\n          // remote text track list. This can potentially cause a false positive\r\n          // if we were to get a change event on a non-remote track and\r\n          // we triggered the event on the remote text track list which doesn't\r\n          // contain that track. However, best practices mean looping through the\r\n          // list of tracks and searching for the appropriate mode value, so,\r\n          // this shouldn't pose an issue\r\n          if (name === 'text') {\r\n            this[REMOTE.remoteText.getterName]().trigger(event);\r\n          }\r\n        },\r\n        addtrack(e) {\r\n          techTracks.addTrack(e.track);\r\n        },\r\n        removetrack(e) {\r\n          techTracks.removeTrack(e.track);\r\n        }\r\n      };\r\n      const removeOldTracks = function () {\r\n        const removeTracks = [];\r\n        for (let i = 0; i < techTracks.length; i++) {\r\n          let found = false;\r\n          for (let j = 0; j < elTracks.length; j++) {\r\n            if (elTracks[j] === techTracks[i]) {\r\n              found = true;\r\n              break;\r\n            }\r\n          }\r\n          if (!found) {\r\n            removeTracks.push(techTracks[i]);\r\n          }\r\n        }\r\n        while (removeTracks.length) {\r\n          techTracks.removeTrack(removeTracks.shift());\r\n        }\r\n      };\r\n      this[props.getterName + 'Listeners_'] = listeners;\r\n      Object.keys(listeners).forEach(eventName => {\r\n        const listener = listeners[eventName];\r\n        elTracks.addEventListener(eventName, listener);\r\n        this.on('dispose', e => elTracks.removeEventListener(eventName, listener));\r\n      });\r\n\r\n      // Remove (native) tracks that are not used anymore\r\n      this.on('loadstart', removeOldTracks);\r\n      this.on('dispose', e => this.off('loadstart', removeOldTracks));\r\n    }\r\n\r\n    /**\r\n     * Proxy all native track list events to our track lists if the browser we are playing\r\n     * in supports that type of track list.\r\n     *\r\n     * @private\r\n     */\r\n    proxyNativeTracks_() {\r\n      NORMAL.names.forEach(name => {\r\n        this.proxyNativeTracksForType_(name);\r\n      });\r\n    }\r\n\r\n    /**\r\n     * Create the `Html5` Tech's DOM element.\r\n     *\r\n     * @return {Element}\r\n     *         The element that gets created.\r\n     */\r\n    createEl() {\r\n      let el = this.options_.tag;\r\n\r\n      // Check if this browser supports moving the element into the box.\r\n      // On the iPhone video will break if you move the element,\r\n      // So we have to create a brand new element.\r\n      // If we ingested the player div, we do not need to move the media element.\r\n      if (!el || !(this.options_.playerElIngest || this.movingMediaElementInDOM)) {\r\n        // If the original tag is still there, clone and remove it.\r\n        if (el) {\r\n          const clone = el.cloneNode(true);\r\n          if (el.parentNode) {\r\n            el.parentNode.insertBefore(clone, el);\r\n          }\r\n          Html5.disposeMediaElement(el);\r\n          el = clone;\r\n        } else {\r\n          el = document.createElement('video');\r\n\r\n          // determine if native controls should be used\r\n          const tagAttributes = this.options_.tag && getAttributes(this.options_.tag);\r\n          const attributes = merge$2({}, tagAttributes);\r\n          if (!TOUCH_ENABLED || this.options_.nativeControlsForTouch !== true) {\r\n            delete attributes.controls;\r\n          }\r\n          setAttributes(el, Object.assign(attributes, {\r\n            id: this.options_.techId,\r\n            class: 'vjs-tech'\r\n          }));\r\n        }\r\n        el.playerId = this.options_.playerId;\r\n      }\r\n      if (typeof this.options_.preload !== 'undefined') {\r\n        setAttribute(el, 'preload', this.options_.preload);\r\n      }\r\n      if (this.options_.disablePictureInPicture !== undefined) {\r\n        el.disablePictureInPicture = this.options_.disablePictureInPicture;\r\n      }\r\n\r\n      // Update specific tag settings, in case they were overridden\r\n      // `autoplay` has to be *last* so that `muted` and `playsinline` are present\r\n      // when iOS/Safari or other browsers attempt to autoplay.\r\n      const settingsAttrs = ['loop', 'muted', 'playsinline', 'autoplay'];\r\n      for (let i = 0; i < settingsAttrs.length; i++) {\r\n        const attr = settingsAttrs[i];\r\n        const value = this.options_[attr];\r\n        if (typeof value !== 'undefined') {\r\n          if (value) {\r\n            setAttribute(el, attr, attr);\r\n          } else {\r\n            removeAttribute(el, attr);\r\n          }\r\n          el[attr] = value;\r\n        }\r\n      }\r\n      return el;\r\n    }\r\n\r\n    /**\r\n     * This will be triggered if the loadstart event has already fired, before videojs was\r\n     * ready. Two known examples of when this can happen are:\r\n     * 1. If we're loading the playback object after it has started loading\r\n     * 2. The media is already playing the (often with autoplay on) then\r\n     *\r\n     * This function will fire another loadstart so that videojs can catchup.\r\n     *\r\n     * @fires Tech#loadstart\r\n     *\r\n     * @return {undefined}\r\n     *         returns nothing.\r\n     */\r\n    handleLateInit_(el) {\r\n      if (el.networkState === 0 || el.networkState === 3) {\r\n        // The video element hasn't started loading the source yet\r\n        // or didn't find a source\r\n        return;\r\n      }\r\n      if (el.readyState === 0) {\r\n        // NetworkState is set synchronously BUT loadstart is fired at the\r\n        // end of the current stack, usually before setInterval(fn, 0).\r\n        // So at this point we know loadstart may have already fired or is\r\n        // about to fire, and either way the player hasn't seen it yet.\r\n        // We don't want to fire loadstart prematurely here and cause a\r\n        // double loadstart so we'll wait and see if it happens between now\r\n        // and the next loop, and fire it if not.\r\n        // HOWEVER, we also want to make sure it fires before loadedmetadata\r\n        // which could also happen between now and the next loop, so we'll\r\n        // watch for that also.\r\n        let loadstartFired = false;\r\n        const setLoadstartFired = function () {\r\n          loadstartFired = true;\r\n        };\r\n        this.on('loadstart', setLoadstartFired);\r\n        const triggerLoadstart = function () {\r\n          // We did miss the original loadstart. Make sure the player\r\n          // sees loadstart before loadedmetadata\r\n          if (!loadstartFired) {\r\n            this.trigger('loadstart');\r\n          }\r\n        };\r\n        this.on('loadedmetadata', triggerLoadstart);\r\n        this.ready(function () {\r\n          this.off('loadstart', setLoadstartFired);\r\n          this.off('loadedmetadata', triggerLoadstart);\r\n          if (!loadstartFired) {\r\n            // We did miss the original native loadstart. Fire it now.\r\n            this.trigger('loadstart');\r\n          }\r\n        });\r\n        return;\r\n      }\r\n\r\n      // From here on we know that loadstart already fired and we missed it.\r\n      // The other readyState events aren't as much of a problem if we double\r\n      // them, so not going to go to as much trouble as loadstart to prevent\r\n      // that unless we find reason to.\r\n      const eventsToTrigger = ['loadstart'];\r\n\r\n      // loadedmetadata: newly equal to HAVE_METADATA (1) or greater\r\n      eventsToTrigger.push('loadedmetadata');\r\n\r\n      // loadeddata: newly increased to HAVE_CURRENT_DATA (2) or greater\r\n      if (el.readyState >= 2) {\r\n        eventsToTrigger.push('loadeddata');\r\n      }\r\n\r\n      // canplay: newly increased to HAVE_FUTURE_DATA (3) or greater\r\n      if (el.readyState >= 3) {\r\n        eventsToTrigger.push('canplay');\r\n      }\r\n\r\n      // canplaythrough: newly equal to HAVE_ENOUGH_DATA (4)\r\n      if (el.readyState >= 4) {\r\n        eventsToTrigger.push('canplaythrough');\r\n      }\r\n\r\n      // We still need to give the player time to add event listeners\r\n      this.ready(function () {\r\n        eventsToTrigger.forEach(function (type) {\r\n          this.trigger(type);\r\n        }, this);\r\n      });\r\n    }\r\n\r\n    /**\r\n     * Set whether we are scrubbing or not.\r\n     * This is used to decide whether we should use `fastSeek` or not.\r\n     * `fastSeek` is used to provide trick play on Safari browsers.\r\n     *\r\n     * @param {boolean} isScrubbing\r\n     *                  - true for we are currently scrubbing\r\n     *                  - false for we are no longer scrubbing\r\n     */\r\n    setScrubbing(isScrubbing) {\r\n      this.isScrubbing_ = isScrubbing;\r\n    }\r\n\r\n    /**\r\n     * Get whether we are scrubbing or not.\r\n     *\r\n     * @return {boolean} isScrubbing\r\n     *                  - true for we are currently scrubbing\r\n     *                  - false for we are no longer scrubbing\r\n     */\r\n    scrubbing() {\r\n      return this.isScrubbing_;\r\n    }\r\n\r\n    /**\r\n     * Set current time for the `HTML5` tech.\r\n     *\r\n     * @param {number} seconds\r\n     *        Set the current time of the media to this.\r\n     */\r\n    setCurrentTime(seconds) {\r\n      try {\r\n        if (this.isScrubbing_ && this.el_.fastSeek && IS_ANY_SAFARI) {\r\n          this.el_.fastSeek(seconds);\r\n        } else {\r\n          this.el_.currentTime = seconds;\r\n        }\r\n      } catch (e) {\r\n        log$1(e, 'Video is not ready. (Video.js)');\r\n        // this.warning(VideoJS.warnings.videoNotReady);\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Get the current duration of the HTML5 media element.\r\n     *\r\n     * @return {number}\r\n     *         The duration of the media or 0 if there is no duration.\r\n     */\r\n    duration() {\r\n      // Android Chrome will report duration as Infinity for VOD HLS until after\r\n      // playback has started, which triggers the live display erroneously.\r\n      // Return NaN if playback has not started and trigger a durationupdate once\r\n      // the duration can be reliably known.\r\n      if (this.el_.duration === Infinity && IS_ANDROID && IS_CHROME && this.el_.currentTime === 0) {\r\n        // Wait for the first `timeupdate` with currentTime > 0 - there may be\r\n        // several with 0\r\n        const checkProgress = () => {\r\n          if (this.el_.currentTime > 0) {\r\n            // Trigger durationchange for genuinely live video\r\n            if (this.el_.duration === Infinity) {\r\n              this.trigger('durationchange');\r\n            }\r\n            this.off('timeupdate', checkProgress);\r\n          }\r\n        };\r\n        this.on('timeupdate', checkProgress);\r\n        return NaN;\r\n      }\r\n      return this.el_.duration || NaN;\r\n    }\r\n\r\n    /**\r\n     * Get the current width of the HTML5 media element.\r\n     *\r\n     * @return {number}\r\n     *         The width of the HTML5 media element.\r\n     */\r\n    width() {\r\n      return this.el_.offsetWidth;\r\n    }\r\n\r\n    /**\r\n     * Get the current height of the HTML5 media element.\r\n     *\r\n     * @return {number}\r\n     *         The height of the HTML5 media element.\r\n     */\r\n    height() {\r\n      return this.el_.offsetHeight;\r\n    }\r\n\r\n    /**\r\n     * Proxy iOS `webkitbeginfullscreen` and `webkitendfullscreen` into\r\n     * `fullscreenchange` event.\r\n     *\r\n     * @private\r\n     * @fires fullscreenchange\r\n     * @listens webkitendfullscreen\r\n     * @listens webkitbeginfullscreen\r\n     * @listens webkitbeginfullscreen\r\n     */\r\n    proxyWebkitFullscreen_() {\r\n      if (!('webkitDisplayingFullscreen' in this.el_)) {\r\n        return;\r\n      }\r\n      const endFn = function () {\r\n        this.trigger('fullscreenchange', {\r\n          isFullscreen: false\r\n        });\r\n        // Safari will sometimes set controls on the videoelement when existing fullscreen.\r\n        if (this.el_.controls && !this.options_.nativeControlsForTouch && this.controls()) {\r\n          this.el_.controls = false;\r\n        }\r\n      };\r\n      const beginFn = function () {\r\n        if ('webkitPresentationMode' in this.el_ && this.el_.webkitPresentationMode !== 'picture-in-picture') {\r\n          this.one('webkitendfullscreen', endFn);\r\n          this.trigger('fullscreenchange', {\r\n            isFullscreen: true,\r\n            // set a flag in case another tech triggers fullscreenchange\r\n            nativeIOSFullscreen: true\r\n          });\r\n        }\r\n      };\r\n      this.on('webkitbeginfullscreen', beginFn);\r\n      this.on('dispose', () => {\r\n        this.off('webkitbeginfullscreen', beginFn);\r\n        this.off('webkitendfullscreen', endFn);\r\n      });\r\n    }\r\n\r\n    /**\r\n     * Check if fullscreen is supported on the video el.\r\n     *\r\n     * @return {boolean}\r\n     *         - True if fullscreen is supported.\r\n     *         - False if fullscreen is not supported.\r\n     */\r\n    supportsFullScreen() {\r\n      return typeof this.el_.webkitEnterFullScreen === 'function';\r\n    }\r\n\r\n    /**\r\n     * Request that the `HTML5` Tech enter fullscreen.\r\n     */\r\n    enterFullScreen() {\r\n      const video = this.el_;\r\n      if (video.paused && video.networkState <= video.HAVE_METADATA) {\r\n        // attempt to prime the video element for programmatic access\r\n        // this isn't necessary on the desktop but shouldn't hurt\r\n        silencePromise(this.el_.play());\r\n\r\n        // playing and pausing synchronously during the transition to fullscreen\r\n        // can get iOS ~6.1 devices into a play/pause loop\r\n        this.setTimeout(function () {\r\n          video.pause();\r\n          try {\r\n            video.webkitEnterFullScreen();\r\n          } catch (e) {\r\n            this.trigger('fullscreenerror', e);\r\n          }\r\n        }, 0);\r\n      } else {\r\n        try {\r\n          video.webkitEnterFullScreen();\r\n        } catch (e) {\r\n          this.trigger('fullscreenerror', e);\r\n        }\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Request that the `HTML5` Tech exit fullscreen.\r\n     */\r\n    exitFullScreen() {\r\n      if (!this.el_.webkitDisplayingFullscreen) {\r\n        this.trigger('fullscreenerror', new Error('The video is not fullscreen'));\r\n        return;\r\n      }\r\n      this.el_.webkitExitFullScreen();\r\n    }\r\n\r\n    /**\r\n     * Create a floating video window always on top of other windows so that users may\r\n     * continue consuming media while they interact with other content sites, or\r\n     * applications on their device.\r\n     *\r\n     * @see [Spec]{@link https://wicg.github.io/picture-in-picture}\r\n     *\r\n     * @return {Promise}\r\n     *         A promise with a Picture-in-Picture window.\r\n     */\r\n    requestPictureInPicture() {\r\n      return this.el_.requestPictureInPicture();\r\n    }\r\n\r\n    /**\r\n     * Native requestVideoFrameCallback if supported by browser/tech, or fallback\r\n     * Don't use rVCF on Safari when DRM is playing, as it doesn't fire\r\n     * Needs to be checked later than the constructor\r\n     * This will be a false positive for clear sources loaded after a Fairplay source\r\n     *\r\n     * @param {function} cb function to call\r\n     * @return {number} id of request\r\n     */\r\n    requestVideoFrameCallback(cb) {\r\n      if (this.featuresVideoFrameCallback && !this.el_.webkitKeys) {\r\n        return this.el_.requestVideoFrameCallback(cb);\r\n      }\r\n      return super.requestVideoFrameCallback(cb);\r\n    }\r\n\r\n    /**\r\n     * Native or fallback requestVideoFrameCallback\r\n     *\r\n     * @param {number} id request id to cancel\r\n     */\r\n    cancelVideoFrameCallback(id) {\r\n      if (this.featuresVideoFrameCallback && !this.el_.webkitKeys) {\r\n        this.el_.cancelVideoFrameCallback(id);\r\n      } else {\r\n        super.cancelVideoFrameCallback(id);\r\n      }\r\n    }\r\n\r\n    /**\r\n     * A getter/setter for the `Html5` Tech's source object.\r\n     * > Note: Please use {@link Html5#setSource}\r\n     *\r\n     * @param {Tech~SourceObject} [src]\r\n     *        The source object you want to set on the `HTML5` techs element.\r\n     *\r\n     * @return {Tech~SourceObject|undefined}\r\n     *         - The current source object when a source is not passed in.\r\n     *         - undefined when setting\r\n     *\r\n     * @deprecated Since version 5.\r\n     */\r\n    src(src) {\r\n      if (src === undefined) {\r\n        return this.el_.src;\r\n      }\r\n\r\n      // Setting src through `src` instead of `setSrc` will be deprecated\r\n      this.setSrc(src);\r\n    }\r\n\r\n    /**\r\n     * Add a <source> element to the <video> element.\r\n     *\r\n     * @param {string} srcUrl\r\n     *        The URL of the video source.\r\n     *\r\n     * @param {string} [mimeType]\r\n     *        The MIME type of the video source. Optional but recommended.\r\n     *\r\n     * @return {boolean}\r\n     *         Returns true if the source element was successfully added, false otherwise.\r\n     */\r\n    addSourceElement(srcUrl, mimeType) {\r\n      if (!srcUrl) {\r\n        log$1.error('Invalid source URL.');\r\n        return false;\r\n      }\r\n      const sourceAttributes = {\r\n        src: srcUrl\r\n      };\r\n      if (mimeType) {\r\n        sourceAttributes.type = mimeType;\r\n      }\r\n      const sourceElement = createEl('source', {}, sourceAttributes);\r\n      this.el_.appendChild(sourceElement);\r\n      return true;\r\n    }\r\n\r\n    /**\r\n     * Remove a <source> element from the <video> element by its URL.\r\n     *\r\n     * @param {string} srcUrl\r\n     *        The URL of the source to remove.\r\n     *\r\n     * @return {boolean}\r\n     *         Returns true if the source element was successfully removed, false otherwise.\r\n     */\r\n    removeSourceElement(srcUrl) {\r\n      if (!srcUrl) {\r\n        log$1.error('Source URL is required to remove the source element.');\r\n        return false;\r\n      }\r\n      const sourceElements = this.el_.querySelectorAll('source');\r\n      for (const sourceElement of sourceElements) {\r\n        if (sourceElement.src === srcUrl) {\r\n          this.el_.removeChild(sourceElement);\r\n          return true;\r\n        }\r\n      }\r\n      log$1.warn(`No matching source element found with src: ${srcUrl}`);\r\n      return false;\r\n    }\r\n\r\n    /**\r\n     * Reset the tech by removing all sources and then calling\r\n     * {@link Html5.resetMediaElement}.\r\n     */\r\n    reset() {\r\n      Html5.resetMediaElement(this.el_);\r\n    }\r\n\r\n    /**\r\n     * Get the current source on the `HTML5` Tech. Falls back to returning the source from\r\n     * the HTML5 media element.\r\n     *\r\n     * @return {Tech~SourceObject}\r\n     *         The current source object from the HTML5 tech. With a fallback to the\r\n     *         elements source.\r\n     */\r\n    currentSrc() {\r\n      if (this.currentSource_) {\r\n        return this.currentSource_.src;\r\n      }\r\n      return this.el_.currentSrc;\r\n    }\r\n\r\n    /**\r\n     * Set controls attribute for the HTML5 media Element.\r\n     *\r\n     * @param {string} val\r\n     *        Value to set the controls attribute to\r\n     */\r\n    setControls(val) {\r\n      this.el_.controls = !!val;\r\n    }\r\n\r\n    /**\r\n     * Create and returns a remote {@link TextTrack} object.\r\n     *\r\n     * @param {string} kind\r\n     *        `TextTrack` kind (subtitles, captions, descriptions, chapters, or metadata)\r\n     *\r\n     * @param {string} [label]\r\n     *        Label to identify the text track\r\n     *\r\n     * @param {string} [language]\r\n     *        Two letter language abbreviation\r\n     *\r\n     * @return {TextTrack}\r\n     *         The TextTrack that gets created.\r\n     */\r\n    addTextTrack(kind, label, language) {\r\n      if (!this.featuresNativeTextTracks) {\r\n        return super.addTextTrack(kind, label, language);\r\n      }\r\n      return this.el_.addTextTrack(kind, label, language);\r\n    }\r\n\r\n    /**\r\n     * Creates either native TextTrack or an emulated TextTrack depending\r\n     * on the value of `featuresNativeTextTracks`\r\n     *\r\n     * @param {Object} options\r\n     *        The object should contain the options to initialize the TextTrack with.\r\n     *\r\n     * @param {string} [options.kind]\r\n     *        `TextTrack` kind (subtitles, captions, descriptions, chapters, or metadata).\r\n     *\r\n     * @param {string} [options.label]\r\n     *        Label to identify the text track\r\n     *\r\n     * @param {string} [options.language]\r\n     *        Two letter language abbreviation.\r\n     *\r\n     * @param {boolean} [options.default]\r\n     *        Default this track to on.\r\n     *\r\n     * @param {string} [options.id]\r\n     *        The internal id to assign this track.\r\n     *\r\n     * @param {string} [options.src]\r\n     *        A source url for the track.\r\n     *\r\n     * @return {HTMLTrackElement}\r\n     *         The track element that gets created.\r\n     */\r\n    createRemoteTextTrack(options) {\r\n      if (!this.featuresNativeTextTracks) {\r\n        return super.createRemoteTextTrack(options);\r\n      }\r\n      const htmlTrackElement = document.createElement('track');\r\n      if (options.kind) {\r\n        htmlTrackElement.kind = options.kind;\r\n      }\r\n      if (options.label) {\r\n        htmlTrackElement.label = options.label;\r\n      }\r\n      if (options.language || options.srclang) {\r\n        htmlTrackElement.srclang = options.language || options.srclang;\r\n      }\r\n      if (options.default) {\r\n        htmlTrackElement.default = options.default;\r\n      }\r\n      if (options.id) {\r\n        htmlTrackElement.id = options.id;\r\n      }\r\n      if (options.src) {\r\n        htmlTrackElement.src = options.src;\r\n      }\r\n      return htmlTrackElement;\r\n    }\r\n\r\n    /**\r\n     * Creates a remote text track object and returns an html track element.\r\n     *\r\n     * @param {Object} options The object should contain values for\r\n     * kind, language, label, and src (location of the WebVTT file)\r\n     * @param {boolean} [manualCleanup=false] if set to true, the TextTrack\r\n     * will not be removed from the TextTrackList and HtmlTrackElementList\r\n     * after a source change\r\n     * @return {HTMLTrackElement} An Html Track Element.\r\n     * This can be an emulated {@link HTMLTrackElement} or a native one.\r\n     *\r\n     */\r\n    addRemoteTextTrack(options, manualCleanup) {\r\n      const htmlTrackElement = super.addRemoteTextTrack(options, manualCleanup);\r\n      if (this.featuresNativeTextTracks) {\r\n        this.el().appendChild(htmlTrackElement);\r\n      }\r\n      return htmlTrackElement;\r\n    }\r\n\r\n    /**\r\n     * Remove remote `TextTrack` from `TextTrackList` object\r\n     *\r\n     * @param {TextTrack} track\r\n     *        `TextTrack` object to remove\r\n     */\r\n    removeRemoteTextTrack(track) {\r\n      super.removeRemoteTextTrack(track);\r\n      if (this.featuresNativeTextTracks) {\r\n        const tracks = this.$$('track');\r\n        let i = tracks.length;\r\n        while (i--) {\r\n          if (track === tracks[i] || track === tracks[i].track) {\r\n            this.el().removeChild(tracks[i]);\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Gets available media playback quality metrics as specified by the W3C's Media\r\n     * Playback Quality API.\r\n     *\r\n     * @see [Spec]{@link https://wicg.github.io/media-playback-quality}\r\n     *\r\n     * @return {Object}\r\n     *         An object with supported media playback quality metrics\r\n     */\r\n    getVideoPlaybackQuality() {\r\n      if (typeof this.el().getVideoPlaybackQuality === 'function') {\r\n        return this.el().getVideoPlaybackQuality();\r\n      }\r\n      const videoPlaybackQuality = {};\r\n      if (typeof this.el().webkitDroppedFrameCount !== 'undefined' && typeof this.el().webkitDecodedFrameCount !== 'undefined') {\r\n        videoPlaybackQuality.droppedVideoFrames = this.el().webkitDroppedFrameCount;\r\n        videoPlaybackQuality.totalVideoFrames = this.el().webkitDecodedFrameCount;\r\n      }\r\n      if (window.performance) {\r\n        videoPlaybackQuality.creationTime = window.performance.now();\r\n      }\r\n      return videoPlaybackQuality;\r\n    }\r\n  }\r\n\r\n  /* HTML5 Support Testing ---------------------------------------------------- */\r\n\r\n  /**\r\n   * Element for testing browser HTML5 media capabilities\r\n   *\r\n   * @type {Element}\r\n   * @constant\r\n   * @private\r\n   */\r\n  defineLazyProperty(Html5, 'TEST_VID', function () {\r\n    if (!isReal()) {\r\n      return;\r\n    }\r\n    const video = document.createElement('video');\r\n    const track = document.createElement('track');\r\n    track.kind = 'captions';\r\n    track.srclang = 'en';\r\n    track.label = 'English';\r\n    video.appendChild(track);\r\n    return video;\r\n  });\r\n\r\n  /**\r\n   * Check if HTML5 media is supported by this browser/device.\r\n   *\r\n   * @return {boolean}\r\n   *         - True if HTML5 media is supported.\r\n   *         - False if HTML5 media is not supported.\r\n   */\r\n  Html5.isSupported = function () {\r\n    // IE with no Media Player is a LIAR! (#984)\r\n    try {\r\n      Html5.TEST_VID.volume = 0.5;\r\n    } catch (e) {\r\n      return false;\r\n    }\r\n    return !!(Html5.TEST_VID && Html5.TEST_VID.canPlayType);\r\n  };\r\n\r\n  /**\r\n   * Check if the tech can support the given type\r\n   *\r\n   * @param {string} type\r\n   *        The mimetype to check\r\n   * @return {string} 'probably', 'maybe', or '' (empty string)\r\n   */\r\n  Html5.canPlayType = function (type) {\r\n    return Html5.TEST_VID.canPlayType(type);\r\n  };\r\n\r\n  /**\r\n   * Check if the tech can support the given source\r\n   *\r\n   * @param {Object} srcObj\r\n   *        The source object\r\n   * @param {Object} options\r\n   *        The options passed to the tech\r\n   * @return {string} 'probably', 'maybe', or '' (empty string)\r\n   */\r\n  Html5.canPlaySource = function (srcObj, options) {\r\n    return Html5.canPlayType(srcObj.type);\r\n  };\r\n\r\n  /**\r\n   * Check if the volume can be changed in this browser/device.\r\n   * Volume cannot be changed in a lot of mobile devices.\r\n   * Specifically, it can't be changed from 1 on iOS.\r\n   *\r\n   * @return {boolean}\r\n   *         - True if volume can be controlled\r\n   *         - False otherwise\r\n   */\r\n  Html5.canControlVolume = function () {\r\n    // IE will error if Windows Media Player not installed #3315\r\n    try {\r\n      const volume = Html5.TEST_VID.volume;\r\n      Html5.TEST_VID.volume = volume / 2 + 0.1;\r\n      const canControl = volume !== Html5.TEST_VID.volume;\r\n\r\n      // With the introduction of iOS 15, there are cases where the volume is read as\r\n      // changed but reverts back to its original state at the start of the next tick.\r\n      // To determine whether volume can be controlled on iOS,\r\n      // a timeout is set and the volume is checked asynchronously.\r\n      // Since `features` doesn't currently work asynchronously, the value is manually set.\r\n      if (canControl && IS_IOS) {\r\n        window.setTimeout(() => {\r\n          if (Html5 && Html5.prototype) {\r\n            Html5.prototype.featuresVolumeControl = volume !== Html5.TEST_VID.volume;\r\n          }\r\n        });\r\n\r\n        // default iOS to false, which will be updated in the timeout above.\r\n        return false;\r\n      }\r\n      return canControl;\r\n    } catch (e) {\r\n      return false;\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Check if the volume can be muted in this browser/device.\r\n   * Some devices, e.g. iOS, don't allow changing volume\r\n   * but permits muting/unmuting.\r\n   *\r\n   * @return {boolean}\r\n   *      - True if volume can be muted\r\n   *      - False otherwise\r\n   */\r\n  Html5.canMuteVolume = function () {\r\n    try {\r\n      const muted = Html5.TEST_VID.muted;\r\n\r\n      // in some versions of iOS muted property doesn't always\r\n      // work, so we want to set both property and attribute\r\n      Html5.TEST_VID.muted = !muted;\r\n      if (Html5.TEST_VID.muted) {\r\n        setAttribute(Html5.TEST_VID, 'muted', 'muted');\r\n      } else {\r\n        removeAttribute(Html5.TEST_VID, 'muted', 'muted');\r\n      }\r\n      return muted !== Html5.TEST_VID.muted;\r\n    } catch (e) {\r\n      return false;\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Check if the playback rate can be changed in this browser/device.\r\n   *\r\n   * @return {boolean}\r\n   *         - True if playback rate can be controlled\r\n   *         - False otherwise\r\n   */\r\n  Html5.canControlPlaybackRate = function () {\r\n    // Playback rate API is implemented in Android Chrome, but doesn't do anything\r\n    // https://github.com/videojs/video.js/issues/3180\r\n    if (IS_ANDROID && IS_CHROME && CHROME_VERSION < 58) {\r\n      return false;\r\n    }\r\n    // IE will error if Windows Media Player not installed #3315\r\n    try {\r\n      const playbackRate = Html5.TEST_VID.playbackRate;\r\n      Html5.TEST_VID.playbackRate = playbackRate / 2 + 0.1;\r\n      return playbackRate !== Html5.TEST_VID.playbackRate;\r\n    } catch (e) {\r\n      return false;\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Check if we can override a video/audio elements attributes, with\r\n   * Object.defineProperty.\r\n   *\r\n   * @return {boolean}\r\n   *         - True if builtin attributes can be overridden\r\n   *         - False otherwise\r\n   */\r\n  Html5.canOverrideAttributes = function () {\r\n    // if we cannot overwrite the src/innerHTML property, there is no support\r\n    // iOS 7 safari for instance cannot do this.\r\n    try {\r\n      const noop = () => {};\r\n      Object.defineProperty(document.createElement('video'), 'src', {\r\n        get: noop,\r\n        set: noop\r\n      });\r\n      Object.defineProperty(document.createElement('audio'), 'src', {\r\n        get: noop,\r\n        set: noop\r\n      });\r\n      Object.defineProperty(document.createElement('video'), 'innerHTML', {\r\n        get: noop,\r\n        set: noop\r\n      });\r\n      Object.defineProperty(document.createElement('audio'), 'innerHTML', {\r\n        get: noop,\r\n        set: noop\r\n      });\r\n    } catch (e) {\r\n      return false;\r\n    }\r\n    return true;\r\n  };\r\n\r\n  /**\r\n   * Check to see if native `TextTrack`s are supported by this browser/device.\r\n   *\r\n   * @return {boolean}\r\n   *         - True if native `TextTrack`s are supported.\r\n   *         - False otherwise\r\n   */\r\n  Html5.supportsNativeTextTracks = function () {\r\n    return IS_ANY_SAFARI || IS_IOS && IS_CHROME;\r\n  };\r\n\r\n  /**\r\n   * Check to see if native `VideoTrack`s are supported by this browser/device\r\n   *\r\n   * @return {boolean}\r\n   *        - True if native `VideoTrack`s are supported.\r\n   *        - False otherwise\r\n   */\r\n  Html5.supportsNativeVideoTracks = function () {\r\n    return !!(Html5.TEST_VID && Html5.TEST_VID.videoTracks);\r\n  };\r\n\r\n  /**\r\n   * Check to see if native `AudioTrack`s are supported by this browser/device\r\n   *\r\n   * @return {boolean}\r\n   *        - True if native `AudioTrack`s are supported.\r\n   *        - False otherwise\r\n   */\r\n  Html5.supportsNativeAudioTracks = function () {\r\n    return !!(Html5.TEST_VID && Html5.TEST_VID.audioTracks);\r\n  };\r\n\r\n  /**\r\n   * An array of events available on the Html5 tech.\r\n   *\r\n   * @private\r\n   * @type {Array}\r\n   */\r\n  Html5.Events = ['loadstart', 'suspend', 'abort', 'error', 'emptied', 'stalled', 'loadedmetadata', 'loadeddata', 'canplay', 'canplaythrough', 'playing', 'waiting', 'seeking', 'seeked', 'ended', 'durationchange', 'timeupdate', 'progress', 'play', 'pause', 'ratechange', 'resize', 'volumechange'];\r\n\r\n  /**\r\n   * Boolean indicating whether the `Tech` supports volume control.\r\n   *\r\n   * @type {boolean}\r\n   * @default {@link Html5.canControlVolume}\r\n   */\r\n  /**\r\n   * Boolean indicating whether the `Tech` supports muting volume.\r\n   *\r\n   * @type {boolean}\r\n   * @default {@link Html5.canMuteVolume}\r\n   */\r\n\r\n  /**\r\n   * Boolean indicating whether the `Tech` supports changing the speed at which the media\r\n   * plays. Examples:\r\n   *   - Set player to play 2x (twice) as fast\r\n   *   - Set player to play 0.5x (half) as fast\r\n   *\r\n   * @type {boolean}\r\n   * @default {@link Html5.canControlPlaybackRate}\r\n   */\r\n\r\n  /**\r\n   * Boolean indicating whether the `Tech` supports the `sourceset` event.\r\n   *\r\n   * @type {boolean}\r\n   * @default\r\n   */\r\n  /**\r\n   * Boolean indicating whether the `HTML5` tech currently supports native `TextTrack`s.\r\n   *\r\n   * @type {boolean}\r\n   * @default {@link Html5.supportsNativeTextTracks}\r\n   */\r\n  /**\r\n   * Boolean indicating whether the `HTML5` tech currently supports native `VideoTrack`s.\r\n   *\r\n   * @type {boolean}\r\n   * @default {@link Html5.supportsNativeVideoTracks}\r\n   */\r\n  /**\r\n   * Boolean indicating whether the `HTML5` tech currently supports native `AudioTrack`s.\r\n   *\r\n   * @type {boolean}\r\n   * @default {@link Html5.supportsNativeAudioTracks}\r\n   */\r\n  [['featuresMuteControl', 'canMuteVolume'], ['featuresPlaybackRate', 'canControlPlaybackRate'], ['featuresSourceset', 'canOverrideAttributes'], ['featuresNativeTextTracks', 'supportsNativeTextTracks'], ['featuresNativeVideoTracks', 'supportsNativeVideoTracks'], ['featuresNativeAudioTracks', 'supportsNativeAudioTracks']].forEach(function ([key, fn]) {\r\n    defineLazyProperty(Html5.prototype, key, () => Html5[fn](), true);\r\n  });\r\n  Html5.prototype.featuresVolumeControl = Html5.canControlVolume();\r\n\r\n  /**\r\n   * Boolean indicating whether the `HTML5` tech currently supports the media element\r\n   * moving in the DOM. iOS breaks if you move the media element, so this is set this to\r\n   * false there. Everywhere else this should be true.\r\n   *\r\n   * @type {boolean}\r\n   * @default\r\n   */\r\n  Html5.prototype.movingMediaElementInDOM = !IS_IOS;\r\n\r\n  // TODO: Previous comment: No longer appears to be used. Can probably be removed.\r\n  //       Is this true?\r\n  /**\r\n   * Boolean indicating whether the `HTML5` tech currently supports automatic media resize\r\n   * when going into fullscreen.\r\n   *\r\n   * @type {boolean}\r\n   * @default\r\n   */\r\n  Html5.prototype.featuresFullscreenResize = true;\r\n\r\n  /**\r\n   * Boolean indicating whether the `HTML5` tech currently supports the progress event.\r\n   * If this is false, manual `progress` events will be triggered instead.\r\n   *\r\n   * @type {boolean}\r\n   * @default\r\n   */\r\n  Html5.prototype.featuresProgressEvents = true;\r\n\r\n  /**\r\n   * Boolean indicating whether the `HTML5` tech currently supports the timeupdate event.\r\n   * If this is false, manual `timeupdate` events will be triggered instead.\r\n   *\r\n   * @default\r\n   */\r\n  Html5.prototype.featuresTimeupdateEvents = true;\r\n\r\n  /**\r\n   * Whether the HTML5 el supports `requestVideoFrameCallback`\r\n   *\r\n   * @type {boolean}\r\n   */\r\n  Html5.prototype.featuresVideoFrameCallback = !!(Html5.TEST_VID && Html5.TEST_VID.requestVideoFrameCallback);\r\n  Html5.disposeMediaElement = function (el) {\r\n    if (!el) {\r\n      return;\r\n    }\r\n    if (el.parentNode) {\r\n      el.parentNode.removeChild(el);\r\n    }\r\n\r\n    // remove any child track or source nodes to prevent their loading\r\n    while (el.hasChildNodes()) {\r\n      el.removeChild(el.firstChild);\r\n    }\r\n\r\n    // remove any src reference. not setting `src=''` because that causes a warning\r\n    // in firefox\r\n    el.removeAttribute('src');\r\n\r\n    // force the media element to update its loading state by calling load()\r\n    // however IE on Windows 7N has a bug that throws an error so need a try/catch (#793)\r\n    if (typeof el.load === 'function') {\r\n      // wrapping in an iife so it's not deoptimized (#1060#discussion_r10324473)\r\n      (function () {\r\n        try {\r\n          el.load();\r\n        } catch (e) {\r\n          // not supported\r\n        }\r\n      })();\r\n    }\r\n  };\r\n  Html5.resetMediaElement = function (el) {\r\n    if (!el) {\r\n      return;\r\n    }\r\n    const sources = el.querySelectorAll('source');\r\n    let i = sources.length;\r\n    while (i--) {\r\n      el.removeChild(sources[i]);\r\n    }\r\n\r\n    // remove any src reference.\r\n    // not setting `src=''` because that throws an error\r\n    el.removeAttribute('src');\r\n    if (typeof el.load === 'function') {\r\n      // wrapping in an iife so it's not deoptimized (#1060#discussion_r10324473)\r\n      (function () {\r\n        try {\r\n          el.load();\r\n        } catch (e) {\r\n          // satisfy linter\r\n        }\r\n      })();\r\n    }\r\n  };\r\n\r\n  /* Native HTML5 element property wrapping ----------------------------------- */\r\n  // Wrap native boolean attributes with getters that check both property and attribute\r\n  // The list is as followed:\r\n  // muted, defaultMuted, autoplay, controls, loop, playsinline\r\n  [\r\n  /**\r\n   * Get the value of `muted` from the media element. `muted` indicates\r\n   * that the volume for the media should be set to silent. This does not actually change\r\n   * the `volume` attribute.\r\n   *\r\n   * @method Html5#muted\r\n   * @return {boolean}\r\n   *         - True if the value of `volume` should be ignored and the audio set to silent.\r\n   *         - False if the value of `volume` should be used.\r\n   *\r\n   * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-muted}\r\n   */\r\n  'muted',\r\n  /**\r\n   * Get the value of `defaultMuted` from the media element. `defaultMuted` indicates\r\n   * whether the media should start muted or not. Only changes the default state of the\r\n   * media. `muted` and `defaultMuted` can have different values. {@link Html5#muted} indicates the\r\n   * current state.\r\n   *\r\n   * @method Html5#defaultMuted\r\n   * @return {boolean}\r\n   *         - The value of `defaultMuted` from the media element.\r\n   *         - True indicates that the media should start muted.\r\n   *         - False indicates that the media should not start muted\r\n   *\r\n   * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-defaultmuted}\r\n   */\r\n  'defaultMuted',\r\n  /**\r\n   * Get the value of `autoplay` from the media element. `autoplay` indicates\r\n   * that the media should start to play as soon as the page is ready.\r\n   *\r\n   * @method Html5#autoplay\r\n   * @return {boolean}\r\n   *         - The value of `autoplay` from the media element.\r\n   *         - True indicates that the media should start as soon as the page loads.\r\n   *         - False indicates that the media should not start as soon as the page loads.\r\n   *\r\n   * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-media-autoplay}\r\n   */\r\n  'autoplay',\r\n  /**\r\n   * Get the value of `controls` from the media element. `controls` indicates\r\n   * whether the native media controls should be shown or hidden.\r\n   *\r\n   * @method Html5#controls\r\n   * @return {boolean}\r\n   *         - The value of `controls` from the media element.\r\n   *         - True indicates that native controls should be showing.\r\n   *         - False indicates that native controls should be hidden.\r\n   *\r\n   * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-media-controls}\r\n   */\r\n  'controls',\r\n  /**\r\n   * Get the value of `loop` from the media element. `loop` indicates\r\n   * that the media should return to the start of the media and continue playing once\r\n   * it reaches the end.\r\n   *\r\n   * @method Html5#loop\r\n   * @return {boolean}\r\n   *         - The value of `loop` from the media element.\r\n   *         - True indicates that playback should seek back to start once\r\n   *           the end of a media is reached.\r\n   *         - False indicates that playback should not loop back to the start when the\r\n   *           end of the media is reached.\r\n   *\r\n   * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-media-loop}\r\n   */\r\n  'loop',\r\n  /**\r\n   * Get the value of `playsinline` from the media element. `playsinline` indicates\r\n   * to the browser that non-fullscreen playback is preferred when fullscreen\r\n   * playback is the native default, such as in iOS Safari.\r\n   *\r\n   * @method Html5#playsinline\r\n   * @return {boolean}\r\n   *         - The value of `playsinline` from the media element.\r\n   *         - True indicates that the media should play inline.\r\n   *         - False indicates that the media should not play inline.\r\n   *\r\n   * @see [Spec]{@link https://html.spec.whatwg.org/#attr-video-playsinline}\r\n   */\r\n  'playsinline'].forEach(function (prop) {\r\n    Html5.prototype[prop] = function () {\r\n      return this.el_[prop] || this.el_.hasAttribute(prop);\r\n    };\r\n  });\r\n\r\n  // Wrap native boolean attributes with setters that set both property and attribute\r\n  // The list is as followed:\r\n  // setMuted, setDefaultMuted, setAutoplay, setLoop, setPlaysinline\r\n  // setControls is special-cased above\r\n  [\r\n  /**\r\n   * Set the value of `muted` on the media element. `muted` indicates that the current\r\n   * audio level should be silent.\r\n   *\r\n   * @method Html5#setMuted\r\n   * @param {boolean} muted\r\n   *        - True if the audio should be set to silent\r\n   *        - False otherwise\r\n   *\r\n   * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-muted}\r\n   */\r\n  'muted',\r\n  /**\r\n   * Set the value of `defaultMuted` on the media element. `defaultMuted` indicates that the current\r\n   * audio level should be silent, but will only effect the muted level on initial playback..\r\n   *\r\n   * @method Html5.prototype.setDefaultMuted\r\n   * @param {boolean} defaultMuted\r\n   *        - True if the audio should be set to silent\r\n   *        - False otherwise\r\n   *\r\n   * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-defaultmuted}\r\n   */\r\n  'defaultMuted',\r\n  /**\r\n   * Set the value of `autoplay` on the media element. `autoplay` indicates\r\n   * that the media should start to play as soon as the page is ready.\r\n   *\r\n   * @method Html5#setAutoplay\r\n   * @param {boolean} autoplay\r\n   *         - True indicates that the media should start as soon as the page loads.\r\n   *         - False indicates that the media should not start as soon as the page loads.\r\n   *\r\n   * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-media-autoplay}\r\n   */\r\n  'autoplay',\r\n  /**\r\n   * Set the value of `loop` on the media element. `loop` indicates\r\n   * that the media should return to the start of the media and continue playing once\r\n   * it reaches the end.\r\n   *\r\n   * @method Html5#setLoop\r\n   * @param {boolean} loop\r\n   *         - True indicates that playback should seek back to start once\r\n   *           the end of a media is reached.\r\n   *         - False indicates that playback should not loop back to the start when the\r\n   *           end of the media is reached.\r\n   *\r\n   * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-media-loop}\r\n   */\r\n  'loop',\r\n  /**\r\n   * Set the value of `playsinline` from the media element. `playsinline` indicates\r\n   * to the browser that non-fullscreen playback is preferred when fullscreen\r\n   * playback is the native default, such as in iOS Safari.\r\n   *\r\n   * @method Html5#setPlaysinline\r\n   * @param {boolean} playsinline\r\n   *         - True indicates that the media should play inline.\r\n   *         - False indicates that the media should not play inline.\r\n   *\r\n   * @see [Spec]{@link https://html.spec.whatwg.org/#attr-video-playsinline}\r\n   */\r\n  'playsinline'].forEach(function (prop) {\r\n    Html5.prototype['set' + toTitleCase$1(prop)] = function (v) {\r\n      this.el_[prop] = v;\r\n      if (v) {\r\n        this.el_.setAttribute(prop, prop);\r\n      } else {\r\n        this.el_.removeAttribute(prop);\r\n      }\r\n    };\r\n  });\r\n\r\n  // Wrap native properties with a getter\r\n  // The list is as followed\r\n  // paused, currentTime, buffered, volume, poster, preload, error, seeking\r\n  // seekable, ended, playbackRate, defaultPlaybackRate, disablePictureInPicture\r\n  // played, networkState, readyState, videoWidth, videoHeight, crossOrigin\r\n  [\r\n  /**\r\n   * Get the value of `paused` from the media element. `paused` indicates whether the media element\r\n   * is currently paused or not.\r\n   *\r\n   * @method Html5#paused\r\n   * @return {boolean}\r\n   *         The value of `paused` from the media element.\r\n   *\r\n   * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-paused}\r\n   */\r\n  'paused',\r\n  /**\r\n   * Get the value of `currentTime` from the media element. `currentTime` indicates\r\n   * the current second that the media is at in playback.\r\n   *\r\n   * @method Html5#currentTime\r\n   * @return {number}\r\n   *         The value of `currentTime` from the media element.\r\n   *\r\n   * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-currenttime}\r\n   */\r\n  'currentTime',\r\n  /**\r\n   * Get the value of `buffered` from the media element. `buffered` is a `TimeRange`\r\n   * object that represents the parts of the media that are already downloaded and\r\n   * available for playback.\r\n   *\r\n   * @method Html5#buffered\r\n   * @return {TimeRange}\r\n   *         The value of `buffered` from the media element.\r\n   *\r\n   * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-buffered}\r\n   */\r\n  'buffered',\r\n  /**\r\n   * Get the value of `volume` from the media element. `volume` indicates\r\n   * the current playback volume of audio for a media. `volume` will be a value from 0\r\n   * (silent) to 1 (loudest and default).\r\n   *\r\n   * @method Html5#volume\r\n   * @return {number}\r\n   *         The value of `volume` from the media element. Value will be between 0-1.\r\n   *\r\n   * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-a-volume}\r\n   */\r\n  'volume',\r\n  /**\r\n   * Get the value of `poster` from the media element. `poster` indicates\r\n   * that the url of an image file that can/will be shown when no media data is available.\r\n   *\r\n   * @method Html5#poster\r\n   * @return {string}\r\n   *         The value of `poster` from the media element. Value will be a url to an\r\n   *         image.\r\n   *\r\n   * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-video-poster}\r\n   */\r\n  'poster',\r\n  /**\r\n   * Get the value of `preload` from the media element. `preload` indicates\r\n   * what should download before the media is interacted with. It can have the following\r\n   * values:\r\n   * - none: nothing should be downloaded\r\n   * - metadata: poster and the first few frames of the media may be downloaded to get\r\n   *   media dimensions and other metadata\r\n   * - auto: allow the media and metadata for the media to be downloaded before\r\n   *    interaction\r\n   *\r\n   * @method Html5#preload\r\n   * @return {string}\r\n   *         The value of `preload` from the media element. Will be 'none', 'metadata',\r\n   *         or 'auto'.\r\n   *\r\n   * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-media-preload}\r\n   */\r\n  'preload',\r\n  /**\r\n   * Get the value of the `error` from the media element. `error` indicates any\r\n   * MediaError that may have occurred during playback. If error returns null there is no\r\n   * current error.\r\n   *\r\n   * @method Html5#error\r\n   * @return {MediaError|null}\r\n   *         The value of `error` from the media element. Will be `MediaError` if there\r\n   *         is a current error and null otherwise.\r\n   *\r\n   * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-error}\r\n   */\r\n  'error',\r\n  /**\r\n   * Get the value of `seeking` from the media element. `seeking` indicates whether the\r\n   * media is currently seeking to a new position or not.\r\n   *\r\n   * @method Html5#seeking\r\n   * @return {boolean}\r\n   *         - The value of `seeking` from the media element.\r\n   *         - True indicates that the media is currently seeking to a new position.\r\n   *         - False indicates that the media is not seeking to a new position at this time.\r\n   *\r\n   * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-seeking}\r\n   */\r\n  'seeking',\r\n  /**\r\n   * Get the value of `seekable` from the media element. `seekable` returns a\r\n   * `TimeRange` object indicating ranges of time that can currently be `seeked` to.\r\n   *\r\n   * @method Html5#seekable\r\n   * @return {TimeRange}\r\n   *         The value of `seekable` from the media element. A `TimeRange` object\r\n   *         indicating the current ranges of time that can be seeked to.\r\n   *\r\n   * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-seekable}\r\n   */\r\n  'seekable',\r\n  /**\r\n   * Get the value of `ended` from the media element. `ended` indicates whether\r\n   * the media has reached the end or not.\r\n   *\r\n   * @method Html5#ended\r\n   * @return {boolean}\r\n   *         - The value of `ended` from the media element.\r\n   *         - True indicates that the media has ended.\r\n   *         - False indicates that the media has not ended.\r\n   *\r\n   * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-ended}\r\n   */\r\n  'ended',\r\n  /**\r\n   * Get the value of `playbackRate` from the media element. `playbackRate` indicates\r\n   * the rate at which the media is currently playing back. Examples:\r\n   *   - if playbackRate is set to 2, media will play twice as fast.\r\n   *   - if playbackRate is set to 0.5, media will play half as fast.\r\n   *\r\n   * @method Html5#playbackRate\r\n   * @return {number}\r\n   *         The value of `playbackRate` from the media element. A number indicating\r\n   *         the current playback speed of the media, where 1 is normal speed.\r\n   *\r\n   * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-playbackrate}\r\n   */\r\n  'playbackRate',\r\n  /**\r\n   * Get the value of `defaultPlaybackRate` from the media element. `defaultPlaybackRate` indicates\r\n   * the rate at which the media is currently playing back. This value will not indicate the current\r\n   * `playbackRate` after playback has started, use {@link Html5#playbackRate} for that.\r\n   *\r\n   * Examples:\r\n   *   - if defaultPlaybackRate is set to 2, media will play twice as fast.\r\n   *   - if defaultPlaybackRate is set to 0.5, media will play half as fast.\r\n   *\r\n   * @method Html5.prototype.defaultPlaybackRate\r\n   * @return {number}\r\n   *         The value of `defaultPlaybackRate` from the media element. A number indicating\r\n   *         the current playback speed of the media, where 1 is normal speed.\r\n   *\r\n   * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-playbackrate}\r\n   */\r\n  'defaultPlaybackRate',\r\n  /**\r\n   * Get the value of 'disablePictureInPicture' from the video element.\r\n   *\r\n   * @method Html5#disablePictureInPicture\r\n   * @return {boolean} value\r\n   *         - The value of `disablePictureInPicture` from the video element.\r\n   *         - True indicates that the video can't be played in Picture-In-Picture mode\r\n   *         - False indicates that the video can be played in Picture-In-Picture mode\r\n   *\r\n   * @see [Spec]{@link https://w3c.github.io/picture-in-picture/#disable-pip}\r\n   */\r\n  'disablePictureInPicture',\r\n  /**\r\n   * Get the value of `played` from the media element. `played` returns a `TimeRange`\r\n   * object representing points in the media timeline that have been played.\r\n   *\r\n   * @method Html5#played\r\n   * @return {TimeRange}\r\n   *         The value of `played` from the media element. A `TimeRange` object indicating\r\n   *         the ranges of time that have been played.\r\n   *\r\n   * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-played}\r\n   */\r\n  'played',\r\n  /**\r\n   * Get the value of `networkState` from the media element. `networkState` indicates\r\n   * the current network state. It returns an enumeration from the following list:\r\n   * - 0: NETWORK_EMPTY\r\n   * - 1: NETWORK_IDLE\r\n   * - 2: NETWORK_LOADING\r\n   * - 3: NETWORK_NO_SOURCE\r\n   *\r\n   * @method Html5#networkState\r\n   * @return {number}\r\n   *         The value of `networkState` from the media element. This will be a number\r\n   *         from the list in the description.\r\n   *\r\n   * @see [Spec] {@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-networkstate}\r\n   */\r\n  'networkState',\r\n  /**\r\n   * Get the value of `readyState` from the media element. `readyState` indicates\r\n   * the current state of the media element. It returns an enumeration from the\r\n   * following list:\r\n   * - 0: HAVE_NOTHING\r\n   * - 1: HAVE_METADATA\r\n   * - 2: HAVE_CURRENT_DATA\r\n   * - 3: HAVE_FUTURE_DATA\r\n   * - 4: HAVE_ENOUGH_DATA\r\n   *\r\n   * @method Html5#readyState\r\n   * @return {number}\r\n   *         The value of `readyState` from the media element. This will be a number\r\n   *         from the list in the description.\r\n   *\r\n   * @see [Spec] {@link https://www.w3.org/TR/html5/embedded-content-0.html#ready-states}\r\n   */\r\n  'readyState',\r\n  /**\r\n   * Get the value of `videoWidth` from the video element. `videoWidth` indicates\r\n   * the current width of the video in css pixels.\r\n   *\r\n   * @method Html5#videoWidth\r\n   * @return {number}\r\n   *         The value of `videoWidth` from the video element. This will be a number\r\n   *         in css pixels.\r\n   *\r\n   * @see [Spec] {@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-video-videowidth}\r\n   */\r\n  'videoWidth',\r\n  /**\r\n   * Get the value of `videoHeight` from the video element. `videoHeight` indicates\r\n   * the current height of the video in css pixels.\r\n   *\r\n   * @method Html5#videoHeight\r\n   * @return {number}\r\n   *         The value of `videoHeight` from the video element. This will be a number\r\n   *         in css pixels.\r\n   *\r\n   * @see [Spec] {@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-video-videowidth}\r\n   */\r\n  'videoHeight',\r\n  /**\r\n   * Get the value of `crossOrigin` from the media element. `crossOrigin` indicates\r\n   * to the browser that should sent the cookies along with the requests for the\r\n   * different assets/playlists\r\n   *\r\n   * @method Html5#crossOrigin\r\n   * @return {string}\r\n   *         - anonymous indicates that the media should not sent cookies.\r\n   *         - use-credentials indicates that the media should sent cookies along the requests.\r\n   *\r\n   * @see [Spec]{@link https://html.spec.whatwg.org/#attr-media-crossorigin}\r\n   */\r\n  'crossOrigin'].forEach(function (prop) {\r\n    Html5.prototype[prop] = function () {\r\n      return this.el_[prop];\r\n    };\r\n  });\r\n\r\n  // Wrap native properties with a setter in this format:\r\n  // set + toTitleCase(name)\r\n  // The list is as follows:\r\n  // setVolume, setSrc, setPoster, setPreload, setPlaybackRate, setDefaultPlaybackRate,\r\n  // setDisablePictureInPicture, setCrossOrigin\r\n  [\r\n  /**\r\n   * Set the value of `volume` on the media element. `volume` indicates the current\r\n   * audio level as a percentage in decimal form. This means that 1 is 100%, 0.5 is 50%, and\r\n   * so on.\r\n   *\r\n   * @method Html5#setVolume\r\n   * @param {number} percentAsDecimal\r\n   *        The volume percent as a decimal. Valid range is from 0-1.\r\n   *\r\n   * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-a-volume}\r\n   */\r\n  'volume',\r\n  /**\r\n   * Set the value of `src` on the media element. `src` indicates the current\r\n   * {@link Tech~SourceObject} for the media.\r\n   *\r\n   * @method Html5#setSrc\r\n   * @param {Tech~SourceObject} src\r\n   *        The source object to set as the current source.\r\n   *\r\n   * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-src}\r\n   */\r\n  'src',\r\n  /**\r\n   * Set the value of `poster` on the media element. `poster` is the url to\r\n   * an image file that can/will be shown when no media data is available.\r\n   *\r\n   * @method Html5#setPoster\r\n   * @param {string} poster\r\n   *        The url to an image that should be used as the `poster` for the media\r\n   *        element.\r\n   *\r\n   * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-media-poster}\r\n   */\r\n  'poster',\r\n  /**\r\n   * Set the value of `preload` on the media element. `preload` indicates\r\n   * what should download before the media is interacted with. It can have the following\r\n   * values:\r\n   * - none: nothing should be downloaded\r\n   * - metadata: poster and the first few frames of the media may be downloaded to get\r\n   *   media dimensions and other metadata\r\n   * - auto: allow the media and metadata for the media to be downloaded before\r\n   *    interaction\r\n   *\r\n   * @method Html5#setPreload\r\n   * @param {string} preload\r\n   *         The value of `preload` to set on the media element. Must be 'none', 'metadata',\r\n   *         or 'auto'.\r\n   *\r\n   * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-media-preload}\r\n   */\r\n  'preload',\r\n  /**\r\n   * Set the value of `playbackRate` on the media element. `playbackRate` indicates\r\n   * the rate at which the media should play back. Examples:\r\n   *   - if playbackRate is set to 2, media will play twice as fast.\r\n   *   - if playbackRate is set to 0.5, media will play half as fast.\r\n   *\r\n   * @method Html5#setPlaybackRate\r\n   * @return {number}\r\n   *         The value of `playbackRate` from the media element. A number indicating\r\n   *         the current playback speed of the media, where 1 is normal speed.\r\n   *\r\n   * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-playbackrate}\r\n   */\r\n  'playbackRate',\r\n  /**\r\n   * Set the value of `defaultPlaybackRate` on the media element. `defaultPlaybackRate` indicates\r\n   * the rate at which the media should play back upon initial startup. Changing this value\r\n   * after a video has started will do nothing. Instead you should used {@link Html5#setPlaybackRate}.\r\n   *\r\n   * Example Values:\r\n   *   - if playbackRate is set to 2, media will play twice as fast.\r\n   *   - if playbackRate is set to 0.5, media will play half as fast.\r\n   *\r\n   * @method Html5.prototype.setDefaultPlaybackRate\r\n   * @return {number}\r\n   *         The value of `defaultPlaybackRate` from the media element. A number indicating\r\n   *         the current playback speed of the media, where 1 is normal speed.\r\n   *\r\n   * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-defaultplaybackrate}\r\n   */\r\n  'defaultPlaybackRate',\r\n  /**\r\n   * Prevents the browser from suggesting a Picture-in-Picture context menu\r\n   * or to request Picture-in-Picture automatically in some cases.\r\n   *\r\n   * @method Html5#setDisablePictureInPicture\r\n   * @param {boolean} value\r\n   *         The true value will disable Picture-in-Picture mode.\r\n   *\r\n   * @see [Spec]{@link https://w3c.github.io/picture-in-picture/#disable-pip}\r\n   */\r\n  'disablePictureInPicture',\r\n  /**\r\n   * Set the value of `crossOrigin` from the media element. `crossOrigin` indicates\r\n   * to the browser that should sent the cookies along with the requests for the\r\n   * different assets/playlists\r\n   *\r\n   * @method Html5#setCrossOrigin\r\n   * @param {string} crossOrigin\r\n   *         - anonymous indicates that the media should not sent cookies.\r\n   *         - use-credentials indicates that the media should sent cookies along the requests.\r\n   *\r\n   * @see [Spec]{@link https://html.spec.whatwg.org/#attr-media-crossorigin}\r\n   */\r\n  'crossOrigin'].forEach(function (prop) {\r\n    Html5.prototype['set' + toTitleCase$1(prop)] = function (v) {\r\n      this.el_[prop] = v;\r\n    };\r\n  });\r\n\r\n  // wrap native functions with a function\r\n  // The list is as follows:\r\n  // pause, load, play\r\n  [\r\n  /**\r\n   * A wrapper around the media elements `pause` function. This will call the `HTML5`\r\n   * media elements `pause` function.\r\n   *\r\n   * @method Html5#pause\r\n   * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-pause}\r\n   */\r\n  'pause',\r\n  /**\r\n   * A wrapper around the media elements `load` function. This will call the `HTML5`s\r\n   * media element `load` function.\r\n   *\r\n   * @method Html5#load\r\n   * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-load}\r\n   */\r\n  'load',\r\n  /**\r\n   * A wrapper around the media elements `play` function. This will call the `HTML5`s\r\n   * media element `play` function.\r\n   *\r\n   * @method Html5#play\r\n   * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-play}\r\n   */\r\n  'play'].forEach(function (prop) {\r\n    Html5.prototype[prop] = function () {\r\n      return this.el_[prop]();\r\n    };\r\n  });\r\n  Tech.withSourceHandlers(Html5);\r\n\r\n  /**\r\n   * Native source handler for Html5, simply passes the source to the media element.\r\n   *\r\n   * @property {Tech~SourceObject} source\r\n   *        The source object\r\n   *\r\n   * @property {Html5} tech\r\n   *        The instance of the HTML5 tech.\r\n   */\r\n  Html5.nativeSourceHandler = {};\r\n\r\n  /**\r\n   * Check if the media element can play the given mime type.\r\n   *\r\n   * @param {string} type\r\n   *        The mimetype to check\r\n   *\r\n   * @return {string}\r\n   *         'probably', 'maybe', or '' (empty string)\r\n   */\r\n  Html5.nativeSourceHandler.canPlayType = function (type) {\r\n    // IE without MediaPlayer throws an error (#519)\r\n    try {\r\n      return Html5.TEST_VID.canPlayType(type);\r\n    } catch (e) {\r\n      return '';\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Check if the media element can handle a source natively.\r\n   *\r\n   * @param {Tech~SourceObject} source\r\n   *         The source object\r\n   *\r\n   * @param {Object} [options]\r\n   *         Options to be passed to the tech.\r\n   *\r\n   * @return {string}\r\n   *         'probably', 'maybe', or '' (empty string).\r\n   */\r\n  Html5.nativeSourceHandler.canHandleSource = function (source, options) {\r\n    // If a type was provided we should rely on that\r\n    if (source.type) {\r\n      return Html5.nativeSourceHandler.canPlayType(source.type);\r\n\r\n      // If no type, fall back to checking 'video/[EXTENSION]'\r\n    } else if (source.src) {\r\n      const ext = getFileExtension(source.src);\r\n      return Html5.nativeSourceHandler.canPlayType(`video/${ext}`);\r\n    }\r\n    return '';\r\n  };\r\n\r\n  /**\r\n   * Pass the source to the native media element.\r\n   *\r\n   * @param {Tech~SourceObject} source\r\n   *        The source object\r\n   *\r\n   * @param {Html5} tech\r\n   *        The instance of the Html5 tech\r\n   *\r\n   * @param {Object} [options]\r\n   *        The options to pass to the source\r\n   */\r\n  Html5.nativeSourceHandler.handleSource = function (source, tech, options) {\r\n    tech.setSrc(source.src);\r\n  };\r\n\r\n  /**\r\n   * A noop for the native dispose function, as cleanup is not needed.\r\n   */\r\n  Html5.nativeSourceHandler.dispose = function () {};\r\n\r\n  // Register the native source handler\r\n  Html5.registerSourceHandler(Html5.nativeSourceHandler);\r\n  Tech.registerTech('Html5', Html5);\r\n\r\n  /**\r\n   * @file player.js\r\n   */\r\n\r\n  /** @import { TimeRange } from './utils/time' */\r\n  /** @import HtmlTrackElement from './tracks/html-track-element' */\r\n\r\n  /**\r\n   * @callback PlayerReadyCallback\r\n   * @this     {Player}\r\n   * @returns  {void}\r\n   */\r\n\r\n  // The following tech events are simply re-triggered\r\n  // on the player when they happen\r\n  const TECH_EVENTS_RETRIGGER = [\r\n  /**\r\n   * Fired while the user agent is downloading media data.\r\n   *\r\n   * @event Player#progress\r\n   * @type {Event}\r\n   */\r\n  /**\r\n   * Retrigger the `progress` event that was triggered by the {@link Tech}.\r\n   *\r\n   * @private\r\n   * @method Player#handleTechProgress_\r\n   * @fires Player#progress\r\n   * @listens Tech#progress\r\n   */\r\n  'progress',\r\n  /**\r\n   * Fires when the loading of an audio/video is aborted.\r\n   *\r\n   * @event Player#abort\r\n   * @type {Event}\r\n   */\r\n  /**\r\n   * Retrigger the `abort` event that was triggered by the {@link Tech}.\r\n   *\r\n   * @private\r\n   * @method Player#handleTechAbort_\r\n   * @fires Player#abort\r\n   * @listens Tech#abort\r\n   */\r\n  'abort',\r\n  /**\r\n   * Fires when the browser is intentionally not getting media data.\r\n   *\r\n   * @event Player#suspend\r\n   * @type {Event}\r\n   */\r\n  /**\r\n   * Retrigger the `suspend` event that was triggered by the {@link Tech}.\r\n   *\r\n   * @private\r\n   * @method Player#handleTechSuspend_\r\n   * @fires Player#suspend\r\n   * @listens Tech#suspend\r\n   */\r\n  'suspend',\r\n  /**\r\n   * Fires when the current playlist is empty.\r\n   *\r\n   * @event Player#emptied\r\n   * @type {Event}\r\n   */\r\n  /**\r\n   * Retrigger the `emptied` event that was triggered by the {@link Tech}.\r\n   *\r\n   * @private\r\n   * @method Player#handleTechEmptied_\r\n   * @fires Player#emptied\r\n   * @listens Tech#emptied\r\n   */\r\n  'emptied',\r\n  /**\r\n   * Fires when the browser is trying to get media data, but data is not available.\r\n   *\r\n   * @event Player#stalled\r\n   * @type {Event}\r\n   */\r\n  /**\r\n   * Retrigger the `stalled` event that was triggered by the {@link Tech}.\r\n   *\r\n   * @private\r\n   * @method Player#handleTechStalled_\r\n   * @fires Player#stalled\r\n   * @listens Tech#stalled\r\n   */\r\n  'stalled',\r\n  /**\r\n   * Fires when the browser has loaded meta data for the audio/video.\r\n   *\r\n   * @event Player#loadedmetadata\r\n   * @type {Event}\r\n   */\r\n  /**\r\n   * Retrigger the `loadedmetadata` event that was triggered by the {@link Tech}.\r\n   *\r\n   * @private\r\n   * @method Player#handleTechLoadedmetadata_\r\n   * @fires Player#loadedmetadata\r\n   * @listens Tech#loadedmetadata\r\n   */\r\n  'loadedmetadata',\r\n  /**\r\n   * Fires when the browser has loaded the current frame of the audio/video.\r\n   *\r\n   * @event Player#loadeddata\r\n   * @type {event}\r\n   */\r\n  /**\r\n   * Retrigger the `loadeddata` event that was triggered by the {@link Tech}.\r\n   *\r\n   * @private\r\n   * @method Player#handleTechLoaddeddata_\r\n   * @fires Player#loadeddata\r\n   * @listens Tech#loadeddata\r\n   */\r\n  'loadeddata',\r\n  /**\r\n   * Fires when the current playback position has changed.\r\n   *\r\n   * @event Player#timeupdate\r\n   * @type {event}\r\n   */\r\n  /**\r\n   * Retrigger the `timeupdate` event that was triggered by the {@link Tech}.\r\n   *\r\n   * @private\r\n   * @method Player#handleTechTimeUpdate_\r\n   * @fires Player#timeupdate\r\n   * @listens Tech#timeupdate\r\n   */\r\n  'timeupdate',\r\n  /**\r\n   * Fires when the video's intrinsic dimensions change\r\n   *\r\n   * @event Player#resize\r\n   * @type {event}\r\n   */\r\n  /**\r\n   * Retrigger the `resize` event that was triggered by the {@link Tech}.\r\n   *\r\n   * @private\r\n   * @method Player#handleTechResize_\r\n   * @fires Player#resize\r\n   * @listens Tech#resize\r\n   */\r\n  'resize',\r\n  /**\r\n   * Fires when the volume has been changed\r\n   *\r\n   * @event Player#volumechange\r\n   * @type {event}\r\n   */\r\n  /**\r\n   * Retrigger the `volumechange` event that was triggered by the {@link Tech}.\r\n   *\r\n   * @private\r\n   * @method Player#handleTechVolumechange_\r\n   * @fires Player#volumechange\r\n   * @listens Tech#volumechange\r\n   */\r\n  'volumechange',\r\n  /**\r\n   * Fires when the text track has been changed\r\n   *\r\n   * @event Player#texttrackchange\r\n   * @type {event}\r\n   */\r\n  /**\r\n   * Retrigger the `texttrackchange` event that was triggered by the {@link Tech}.\r\n   *\r\n   * @private\r\n   * @method Player#handleTechTexttrackchange_\r\n   * @fires Player#texttrackchange\r\n   * @listens Tech#texttrackchange\r\n   */\r\n  'texttrackchange'];\r\n\r\n  // events to queue when playback rate is zero\r\n  // this is a hash for the sole purpose of mapping non-camel-cased event names\r\n  // to camel-cased function names\r\n  const TECH_EVENTS_QUEUE = {\r\n    canplay: 'CanPlay',\r\n    canplaythrough: 'CanPlayThrough',\r\n    playing: 'Playing',\r\n    seeked: 'Seeked'\r\n  };\r\n  const BREAKPOINT_ORDER = ['tiny', 'xsmall', 'small', 'medium', 'large', 'xlarge', 'huge'];\r\n  const BREAKPOINT_CLASSES = {};\r\n\r\n  // grep: vjs-layout-tiny\r\n  // grep: vjs-layout-x-small\r\n  // grep: vjs-layout-small\r\n  // grep: vjs-layout-medium\r\n  // grep: vjs-layout-large\r\n  // grep: vjs-layout-x-large\r\n  // grep: vjs-layout-huge\r\n  BREAKPOINT_ORDER.forEach(k => {\r\n    const v = k.charAt(0) === 'x' ? `x-${k.substring(1)}` : k;\r\n    BREAKPOINT_CLASSES[k] = `vjs-layout-${v}`;\r\n  });\r\n  const DEFAULT_BREAKPOINTS = {\r\n    tiny: 210,\r\n    xsmall: 320,\r\n    small: 425,\r\n    medium: 768,\r\n    large: 1440,\r\n    xlarge: 2560,\r\n    huge: Infinity\r\n  };\r\n\r\n  /**\r\n   * An instance of the `Player` class is created when any of the Video.js setup methods\r\n   * are used to initialize a video.\r\n   *\r\n   * After an instance has been created it can be accessed globally in three ways:\r\n   * 1. By calling `videojs.getPlayer('example_video_1');`\r\n   * 2. By calling `videojs('example_video_1');` (not recommended)\r\n   * 2. By using it directly via `videojs.players.example_video_1;`\r\n   *\r\n   * @extends Component\r\n   * @global\r\n   */\r\n  class Player extends Component$1 {\r\n    /**\r\n     * Create an instance of this class.\r\n     *\r\n     * @param {Element} tag\r\n     *        The original video DOM element used for configuring options.\r\n     *\r\n     * @param {Object} [options]\r\n     *        Object of option names and values.\r\n     *\r\n     * @param {PlayerReadyCallback} [ready]\r\n     *        Ready callback function.\r\n     */\r\n    constructor(tag, options, ready) {\r\n      // Make sure tag ID exists\r\n      // also here.. probably better\r\n      tag.id = tag.id || options.id || `vjs_video_${newGUID()}`;\r\n\r\n      // Set Options\r\n      // The options argument overrides options set in the video tag\r\n      // which overrides globally set options.\r\n      // This latter part coincides with the load order\r\n      // (tag must exist before Player)\r\n      options = Object.assign(Player.getTagSettings(tag), options);\r\n\r\n      // Delay the initialization of children because we need to set up\r\n      // player properties first, and can't use `this` before `super()`\r\n      options.initChildren = false;\r\n\r\n      // Same with creating the element\r\n      options.createEl = false;\r\n\r\n      // don't auto mixin the evented mixin\r\n      options.evented = false;\r\n\r\n      // we don't want the player to report touch activity on itself\r\n      // see enableTouchActivity in Component\r\n      options.reportTouchActivity = false;\r\n\r\n      // If language is not set, get the closest lang attribute\r\n      if (!options.language) {\r\n        const closest = tag.closest('[lang]');\r\n        if (closest) {\r\n          options.language = closest.getAttribute('lang');\r\n        }\r\n      }\r\n\r\n      // Run base component initializing with new options\r\n      super(null, options, ready);\r\n\r\n      // Create bound methods for document listeners.\r\n      this.boundDocumentFullscreenChange_ = e => this.documentFullscreenChange_(e);\r\n      this.boundFullWindowOnEscKey_ = e => this.fullWindowOnEscKey(e);\r\n      this.boundUpdateStyleEl_ = e => this.updateStyleEl_(e);\r\n      this.boundApplyInitTime_ = e => this.applyInitTime_(e);\r\n      this.boundUpdateCurrentBreakpoint_ = e => this.updateCurrentBreakpoint_(e);\r\n      this.boundHandleTechClick_ = e => this.handleTechClick_(e);\r\n      this.boundHandleTechDoubleClick_ = e => this.handleTechDoubleClick_(e);\r\n      this.boundHandleTechTouchStart_ = e => this.handleTechTouchStart_(e);\r\n      this.boundHandleTechTouchMove_ = e => this.handleTechTouchMove_(e);\r\n      this.boundHandleTechTouchEnd_ = e => this.handleTechTouchEnd_(e);\r\n      this.boundHandleTechTap_ = e => this.handleTechTap_(e);\r\n      this.boundUpdatePlayerHeightOnAudioOnlyMode_ = e => this.updatePlayerHeightOnAudioOnlyMode_(e);\r\n\r\n      // default isFullscreen_ to false\r\n      this.isFullscreen_ = false;\r\n\r\n      // create logger\r\n      this.log = createLogger(this.id_);\r\n\r\n      // Hold our own reference to fullscreen api so it can be mocked in tests\r\n      this.fsApi_ = FullscreenApi;\r\n\r\n      // Tracks when a tech changes the poster\r\n      this.isPosterFromTech_ = false;\r\n\r\n      // Holds callback info that gets queued when playback rate is zero\r\n      // and a seek is happening\r\n      this.queuedCallbacks_ = [];\r\n\r\n      // Turn off API access because we're loading a new tech that might load asynchronously\r\n      this.isReady_ = false;\r\n\r\n      // Init state hasStarted_\r\n      this.hasStarted_ = false;\r\n\r\n      // Init state userActive_\r\n      this.userActive_ = false;\r\n\r\n      // Init debugEnabled_\r\n      this.debugEnabled_ = false;\r\n\r\n      // Init state audioOnlyMode_\r\n      this.audioOnlyMode_ = false;\r\n\r\n      // Init state audioPosterMode_\r\n      this.audioPosterMode_ = false;\r\n\r\n      // Init state audioOnlyCache_\r\n      this.audioOnlyCache_ = {\r\n        controlBarHeight: null,\r\n        playerHeight: null,\r\n        hiddenChildren: []\r\n      };\r\n\r\n      // if the global option object was accidentally blown away by\r\n      // someone, bail early with an informative error\r\n      if (!this.options_ || !this.options_.techOrder || !this.options_.techOrder.length) {\r\n        throw new Error('No techOrder specified. Did you overwrite ' + 'videojs.options instead of just changing the ' + 'properties you want to override?');\r\n      }\r\n\r\n      // Store the original tag used to set options\r\n      this.tag = tag;\r\n\r\n      // Store the tag attributes used to restore html5 element\r\n      this.tagAttributes = tag && getAttributes(tag);\r\n\r\n      // Update current language\r\n      this.language(this.options_.language);\r\n\r\n      // Update Supported Languages\r\n      if (options.languages) {\r\n        // Normalise player option languages to lowercase\r\n        const languagesToLower = {};\r\n        Object.getOwnPropertyNames(options.languages).forEach(function (name) {\r\n          languagesToLower[name.toLowerCase()] = options.languages[name];\r\n        });\r\n        this.languages_ = languagesToLower;\r\n      } else {\r\n        this.languages_ = Player.prototype.options_.languages;\r\n      }\r\n      this.resetCache_();\r\n\r\n      // Set poster\r\n      /** @type string */\r\n      this.poster_ = options.poster || '';\r\n\r\n      // Set controls\r\n      /** @type {boolean} */\r\n      this.controls_ = !!options.controls;\r\n\r\n      // Original tag settings stored in options\r\n      // now remove immediately so native controls don't flash.\r\n      // May be turned back on by HTML5 tech if nativeControlsForTouch is true\r\n      tag.controls = false;\r\n      tag.removeAttribute('controls');\r\n      this.changingSrc_ = false;\r\n      this.playCallbacks_ = [];\r\n      this.playTerminatedQueue_ = [];\r\n\r\n      // the attribute overrides the option\r\n      if (tag.hasAttribute('autoplay')) {\r\n        this.autoplay(true);\r\n      } else {\r\n        // otherwise use the setter to validate and\r\n        // set the correct value.\r\n        this.autoplay(this.options_.autoplay);\r\n      }\r\n\r\n      // check plugins\r\n      if (options.plugins) {\r\n        Object.keys(options.plugins).forEach(name => {\r\n          if (typeof this[name] !== 'function') {\r\n            throw new Error(`plugin \"${name}\" does not exist`);\r\n          }\r\n        });\r\n      }\r\n\r\n      /*\r\n       * Store the internal state of scrubbing\r\n       *\r\n       * @private\r\n       * @return {Boolean} True if the user is scrubbing\r\n       */\r\n      this.scrubbing_ = false;\r\n      this.el_ = this.createEl();\r\n\r\n      // Make this an evented object and use `el_` as its event bus.\r\n      evented(this, {\r\n        eventBusKey: 'el_'\r\n      });\r\n\r\n      // listen to document and player fullscreenchange handlers so we receive those events\r\n      // before a user can receive them so we can update isFullscreen appropriately.\r\n      // make sure that we listen to fullscreenchange events before everything else to make sure that\r\n      // our isFullscreen method is updated properly for internal components as well as external.\r\n      if (this.fsApi_.requestFullscreen) {\r\n        on(document, this.fsApi_.fullscreenchange, this.boundDocumentFullscreenChange_);\r\n        this.on(this.fsApi_.fullscreenchange, this.boundDocumentFullscreenChange_);\r\n      }\r\n      if (this.fluid_) {\r\n        this.on(['playerreset', 'resize'], this.boundUpdateStyleEl_);\r\n      }\r\n      // We also want to pass the original player options to each component and plugin\r\n      // as well so they don't need to reach back into the player for options later.\r\n      // We also need to do another copy of this.options_ so we don't end up with\r\n      // an infinite loop.\r\n      const playerOptionsCopy = merge$2(this.options_);\r\n\r\n      // Load plugins\r\n      if (options.plugins) {\r\n        Object.keys(options.plugins).forEach(name => {\r\n          this[name](options.plugins[name]);\r\n        });\r\n      }\r\n\r\n      // Enable debug mode to fire debugon event for all plugins.\r\n      if (options.debug) {\r\n        this.debug(true);\r\n      }\r\n      this.options_.playerOptions = playerOptionsCopy;\r\n      this.middleware_ = [];\r\n      this.playbackRates(options.playbackRates);\r\n      if (options.experimentalSvgIcons) {\r\n        // Add SVG Sprite to the DOM\r\n        const parser = new window.DOMParser();\r\n        const parsedSVG = parser.parseFromString(icons, 'image/svg+xml');\r\n        const errorNode = parsedSVG.querySelector('parsererror');\r\n        if (errorNode) {\r\n          log$1.warn('Failed to load SVG Icons. Falling back to Font Icons.');\r\n          this.options_.experimentalSvgIcons = null;\r\n        } else {\r\n          const sprite = parsedSVG.documentElement;\r\n          sprite.style.display = 'none';\r\n          this.el_.appendChild(sprite);\r\n          this.addClass('vjs-svg-icons-enabled');\r\n        }\r\n      }\r\n      this.initChildren();\r\n\r\n      // Set isAudio based on whether or not an audio tag was used\r\n      this.isAudio(tag.nodeName.toLowerCase() === 'audio');\r\n\r\n      // Update controls className. Can't do this when the controls are initially\r\n      // set because the element doesn't exist yet.\r\n      if (this.controls()) {\r\n        this.addClass('vjs-controls-enabled');\r\n      } else {\r\n        this.addClass('vjs-controls-disabled');\r\n      }\r\n\r\n      // Set ARIA label and region role depending on player type\r\n      this.el_.setAttribute('role', 'region');\r\n      if (this.isAudio()) {\r\n        this.el_.setAttribute('aria-label', this.localize('Audio Player'));\r\n      } else {\r\n        this.el_.setAttribute('aria-label', this.localize('Video Player'));\r\n      }\r\n      if (this.isAudio()) {\r\n        this.addClass('vjs-audio');\r\n      }\r\n\r\n      // Check if spatial navigation is enabled in the options.\r\n      // If enabled, instantiate the SpatialNavigation class.\r\n      if (options.spatialNavigation && options.spatialNavigation.enabled) {\r\n        this.spatialNavigation = new SpatialNavigation(this);\r\n        this.addClass('vjs-spatial-navigation-enabled');\r\n      }\r\n\r\n      // TODO: Make this smarter. Toggle user state between touching/mousing\r\n      // using events, since devices can have both touch and mouse events.\r\n      // TODO: Make this check be performed again when the window switches between monitors\r\n      // (See https://github.com/videojs/video.js/issues/5683)\r\n      if (TOUCH_ENABLED) {\r\n        this.addClass('vjs-touch-enabled');\r\n      }\r\n\r\n      // iOS Safari has broken hover handling\r\n      if (!IS_IOS) {\r\n        this.addClass('vjs-workinghover');\r\n      }\r\n\r\n      // Make player easily findable by ID\r\n      Player.players[this.id_] = this;\r\n\r\n      // Add a major version class to aid css in plugins\r\n      const majorVersion = version$5.split('.')[0];\r\n      this.addClass(`vjs-v${majorVersion}`);\r\n\r\n      // When the player is first initialized, trigger activity so components\r\n      // like the control bar show themselves if needed\r\n      this.userActive(true);\r\n      this.reportUserActivity();\r\n      this.one('play', e => this.listenForUserActivity_(e));\r\n      this.on('keydown', e => this.handleKeyDown(e));\r\n      this.on('languagechange', e => this.handleLanguagechange(e));\r\n      this.breakpoints(this.options_.breakpoints);\r\n      this.responsive(this.options_.responsive);\r\n\r\n      // Calling both the audio mode methods after the player is fully\r\n      // setup to be able to listen to the events triggered by them\r\n      this.on('ready', () => {\r\n        // Calling the audioPosterMode method first so that\r\n        // the audioOnlyMode can take precedence when both options are set to true\r\n        this.audioPosterMode(this.options_.audioPosterMode);\r\n        this.audioOnlyMode(this.options_.audioOnlyMode);\r\n      });\r\n    }\r\n\r\n    /**\r\n     * Destroys the video player and does any necessary cleanup.\r\n     *\r\n     * This is especially helpful if you are dynamically adding and removing videos\r\n     * to/from the DOM.\r\n     *\r\n     * @fires Player#dispose\r\n     */\r\n    dispose() {\r\n      /**\r\n       * Called when the player is being disposed of.\r\n       *\r\n       * @event Player#dispose\r\n       * @type {Event}\r\n       */\r\n      this.trigger('dispose');\r\n      // prevent dispose from being called twice\r\n      this.off('dispose');\r\n\r\n      // Make sure all player-specific document listeners are unbound. This is\r\n      off(document, this.fsApi_.fullscreenchange, this.boundDocumentFullscreenChange_);\r\n      off(document, 'keydown', this.boundFullWindowOnEscKey_);\r\n      if (this.styleEl_ && this.styleEl_.parentNode) {\r\n        this.styleEl_.parentNode.removeChild(this.styleEl_);\r\n        this.styleEl_ = null;\r\n      }\r\n\r\n      // Kill reference to this player\r\n      Player.players[this.id_] = null;\r\n      if (this.tag && this.tag.player) {\r\n        this.tag.player = null;\r\n      }\r\n      if (this.el_ && this.el_.player) {\r\n        this.el_.player = null;\r\n      }\r\n      if (this.tech_) {\r\n        this.tech_.dispose();\r\n        this.isPosterFromTech_ = false;\r\n        this.poster_ = '';\r\n      }\r\n      if (this.playerElIngest_) {\r\n        this.playerElIngest_ = null;\r\n      }\r\n      if (this.tag) {\r\n        this.tag = null;\r\n      }\r\n      clearCacheForPlayer(this);\r\n\r\n      // remove all event handlers for track lists\r\n      // all tracks and track listeners are removed on\r\n      // tech dispose\r\n      ALL.names.forEach(name => {\r\n        const props = ALL[name];\r\n        const list = this[props.getterName]();\r\n\r\n        // if it is not a native list\r\n        // we have to manually remove event listeners\r\n        if (list && list.off) {\r\n          list.off();\r\n        }\r\n      });\r\n\r\n      // the actual .el_ is removed here, or replaced if\r\n      super.dispose({\r\n        restoreEl: this.options_.restoreEl\r\n      });\r\n    }\r\n\r\n    /**\r\n     * Create the `Player`'s DOM element.\r\n     *\r\n     * @return {Element}\r\n     *         The DOM element that gets created.\r\n     */\r\n    createEl() {\r\n      let tag = this.tag;\r\n      let el;\r\n      let playerElIngest = this.playerElIngest_ = tag.parentNode && tag.parentNode.hasAttribute && tag.parentNode.hasAttribute('data-vjs-player');\r\n      const divEmbed = this.tag.tagName.toLowerCase() === 'video-js';\r\n      if (playerElIngest) {\r\n        el = this.el_ = tag.parentNode;\r\n      } else if (!divEmbed) {\r\n        el = this.el_ = super.createEl('div');\r\n      }\r\n\r\n      // Copy over all the attributes from the tag, including ID and class\r\n      // ID will now reference player box, not the video tag\r\n      const attrs = getAttributes(tag);\r\n      if (divEmbed) {\r\n        el = this.el_ = tag;\r\n        tag = this.tag = document.createElement('video');\r\n        while (el.children.length) {\r\n          tag.appendChild(el.firstChild);\r\n        }\r\n        if (!hasClass(el, 'video-js')) {\r\n          addClass(el, 'video-js');\r\n        }\r\n        el.appendChild(tag);\r\n        playerElIngest = this.playerElIngest_ = el;\r\n        // move properties over from our custom `video-js` element\r\n        // to our new `video` element. This will move things like\r\n        // `src` or `controls` that were set via js before the player\r\n        // was initialized.\r\n        Object.keys(el).forEach(k => {\r\n          try {\r\n            tag[k] = el[k];\r\n          } catch (e) {\r\n            // we got a a property like outerHTML which we can't actually copy, ignore it\r\n          }\r\n        });\r\n      }\r\n\r\n      // set tabindex to -1 to remove the video element from the focus order\r\n      tag.setAttribute('tabindex', '-1');\r\n      attrs.tabindex = '-1';\r\n\r\n      // Workaround for #4583 on Chrome (on Windows) with JAWS.\r\n      // See https://github.com/FreedomScientific/VFO-standards-support/issues/78\r\n      // Note that we can't detect if JAWS is being used, but this ARIA attribute\r\n      // doesn't change behavior of Chrome if JAWS is not being used\r\n      if (IS_CHROME && IS_WINDOWS) {\r\n        tag.setAttribute('role', 'application');\r\n        attrs.role = 'application';\r\n      }\r\n\r\n      // Remove width/height attrs from tag so CSS can make it 100% width/height\r\n      tag.removeAttribute('width');\r\n      tag.removeAttribute('height');\r\n      if ('width' in attrs) {\r\n        delete attrs.width;\r\n      }\r\n      if ('height' in attrs) {\r\n        delete attrs.height;\r\n      }\r\n      Object.getOwnPropertyNames(attrs).forEach(function (attr) {\r\n        // don't copy over the class attribute to the player element when we're in a div embed\r\n        // the class is already set up properly in the divEmbed case\r\n        // and we want to make sure that the `video-js` class doesn't get lost\r\n        if (!(divEmbed && attr === 'class')) {\r\n          el.setAttribute(attr, attrs[attr]);\r\n        }\r\n        if (divEmbed) {\r\n          tag.setAttribute(attr, attrs[attr]);\r\n        }\r\n      });\r\n\r\n      // Update tag id/class for use as HTML5 playback tech\r\n      // Might think we should do this after embedding in container so .vjs-tech class\r\n      // doesn't flash 100% width/height, but class only applies with .video-js parent\r\n      tag.playerId = tag.id;\r\n      tag.id += '_html5_api';\r\n      tag.className = 'vjs-tech';\r\n\r\n      // Make player findable on elements\r\n      tag.player = el.player = this;\r\n      // Default state of video is paused\r\n      this.addClass('vjs-paused');\r\n      const deviceClassNames = ['IS_SMART_TV', 'IS_TIZEN', 'IS_WEBOS', 'IS_ANDROID', 'IS_IPAD', 'IS_IPHONE', 'IS_CHROMECAST_RECEIVER'].filter(key => browser[key]).map(key => {\r\n        return 'vjs-device-' + key.substring(3).toLowerCase().replace(/\\_/g, '-');\r\n      });\r\n      this.addClass(...deviceClassNames);\r\n\r\n      // Add a style element in the player that we'll use to set the width/height\r\n      // of the player in a way that's still overridable by CSS, just like the\r\n      // video element\r\n      if (window.VIDEOJS_NO_DYNAMIC_STYLE !== true) {\r\n        this.styleEl_ = createStyleElement('vjs-styles-dimensions');\r\n        const defaultsStyleEl = $('.vjs-styles-defaults');\r\n        const head = $('head');\r\n        head.insertBefore(this.styleEl_, defaultsStyleEl ? defaultsStyleEl.nextSibling : head.firstChild);\r\n      }\r\n      this.fill_ = false;\r\n      this.fluid_ = false;\r\n\r\n      // Pass in the width/height/aspectRatio options which will update the style el\r\n      this.width(this.options_.width);\r\n      this.height(this.options_.height);\r\n      this.fill(this.options_.fill);\r\n      this.fluid(this.options_.fluid);\r\n      this.aspectRatio(this.options_.aspectRatio);\r\n      // support both crossOrigin and crossorigin to reduce confusion and issues around the name\r\n      this.crossOrigin(this.options_.crossOrigin || this.options_.crossorigin);\r\n\r\n      // Hide any links within the video/audio tag,\r\n      // because IE doesn't hide them completely from screen readers.\r\n      const links = tag.getElementsByTagName('a');\r\n      for (let i = 0; i < links.length; i++) {\r\n        const linkEl = links.item(i);\r\n        addClass(linkEl, 'vjs-hidden');\r\n        linkEl.setAttribute('hidden', 'hidden');\r\n      }\r\n\r\n      // insertElFirst seems to cause the networkState to flicker from 3 to 2, so\r\n      // keep track of the original for later so we can know if the source originally failed\r\n      tag.initNetworkState_ = tag.networkState;\r\n\r\n      // Wrap video tag in div (el/box) container\r\n      if (tag.parentNode && !playerElIngest) {\r\n        tag.parentNode.insertBefore(el, tag);\r\n      }\r\n\r\n      // insert the tag as the first child of the player element\r\n      // then manually add it to the children array so that this.addChild\r\n      // will work properly for other components\r\n      //\r\n      // Breaks iPhone, fixed in HTML5 setup.\r\n      prependTo(tag, el);\r\n      this.children_.unshift(tag);\r\n\r\n      // Set lang attr on player to ensure CSS :lang() in consistent with player\r\n      // if it's been set to something different to the doc\r\n      this.el_.setAttribute('lang', this.language_);\r\n      this.el_.setAttribute('translate', 'no');\r\n      this.el_ = el;\r\n      return el;\r\n    }\r\n\r\n    /**\r\n     * Get or set the `Player`'s crossOrigin option. For the HTML5 player, this\r\n     * sets the `crossOrigin` property on the `<video>` tag to control the CORS\r\n     * behavior.\r\n     *\r\n     * @see [Video Element Attributes]{@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/video#attr-crossorigin}\r\n     *\r\n     * @param {string|null} [value]\r\n     *        The value to set the `Player`'s crossOrigin to. If an argument is\r\n     *        given, must be one of `'anonymous'` or `'use-credentials'`, or 'null'.\r\n     *\r\n     * @return {string|null|undefined}\r\n     *         - The current crossOrigin value of the `Player` when getting.\r\n     *         - undefined when setting\r\n     */\r\n    crossOrigin(value) {\r\n      // `null` can be set to unset a value\r\n      if (typeof value === 'undefined') {\r\n        return this.techGet_('crossOrigin');\r\n      }\r\n      if (value !== null && value !== 'anonymous' && value !== 'use-credentials') {\r\n        log$1.warn(`crossOrigin must be null,  \"anonymous\" or \"use-credentials\", given \"${value}\"`);\r\n        return;\r\n      }\r\n      this.techCall_('setCrossOrigin', value);\r\n      if (this.posterImage) {\r\n        this.posterImage.crossOrigin(value);\r\n      }\r\n      return;\r\n    }\r\n\r\n    /**\r\n     * A getter/setter for the `Player`'s width. Returns the player's configured value.\r\n     * To get the current width use `currentWidth()`.\r\n     *\r\n     * @param {number|string} [value]\r\n     *        CSS value to set the `Player`'s width to.\r\n     *\r\n     * @return {number|undefined}\r\n     *         - The current width of the `Player` when getting.\r\n     *         - Nothing when setting\r\n     */\r\n    width(value) {\r\n      return this.dimension('width', value);\r\n    }\r\n\r\n    /**\r\n     * A getter/setter for the `Player`'s height. Returns the player's configured value.\r\n     * To get the current height use `currentheight()`.\r\n     *\r\n     * @param {number|string} [value]\r\n     *        CSS value to set the `Player`'s height to.\r\n     *\r\n     * @return {number|undefined}\r\n     *         - The current height of the `Player` when getting.\r\n     *         - Nothing when setting\r\n     */\r\n    height(value) {\r\n      return this.dimension('height', value);\r\n    }\r\n\r\n    /**\r\n     * A getter/setter for the `Player`'s width & height.\r\n     *\r\n     * @param {string} dimension\r\n     *        This string can be:\r\n     *        - 'width'\r\n     *        - 'height'\r\n     *\r\n     * @param {number|string} [value]\r\n     *        Value for dimension specified in the first argument.\r\n     *\r\n     * @return {number}\r\n     *         The dimension arguments value when getting (width/height).\r\n     */\r\n    dimension(dimension, value) {\r\n      const privDimension = dimension + '_';\r\n      if (value === undefined) {\r\n        return this[privDimension] || 0;\r\n      }\r\n      if (value === '' || value === 'auto') {\r\n        // If an empty string is given, reset the dimension to be automatic\r\n        this[privDimension] = undefined;\r\n        this.updateStyleEl_();\r\n        return;\r\n      }\r\n      const parsedVal = parseFloat(value);\r\n      if (isNaN(parsedVal)) {\r\n        log$1.error(`Improper value \"${value}\" supplied for for ${dimension}`);\r\n        return;\r\n      }\r\n      this[privDimension] = parsedVal;\r\n      this.updateStyleEl_();\r\n    }\r\n\r\n    /**\r\n     * A getter/setter/toggler for the vjs-fluid `className` on the `Player`.\r\n     *\r\n     * Turning this on will turn off fill mode.\r\n     *\r\n     * @param {boolean} [bool]\r\n     *        - A value of true adds the class.\r\n     *        - A value of false removes the class.\r\n     *        - No value will be a getter.\r\n     *\r\n     * @return {boolean|undefined}\r\n     *         - The value of fluid when getting.\r\n     *         - `undefined` when setting.\r\n     */\r\n    fluid(bool) {\r\n      if (bool === undefined) {\r\n        return !!this.fluid_;\r\n      }\r\n      this.fluid_ = !!bool;\r\n      if (isEvented(this)) {\r\n        this.off(['playerreset', 'resize'], this.boundUpdateStyleEl_);\r\n      }\r\n      if (bool) {\r\n        this.addClass('vjs-fluid');\r\n        this.fill(false);\r\n        addEventedCallback(this, () => {\r\n          this.on(['playerreset', 'resize'], this.boundUpdateStyleEl_);\r\n        });\r\n      } else {\r\n        this.removeClass('vjs-fluid');\r\n      }\r\n      this.updateStyleEl_();\r\n    }\r\n\r\n    /**\r\n     * A getter/setter/toggler for the vjs-fill `className` on the `Player`.\r\n     *\r\n     * Turning this on will turn off fluid mode.\r\n     *\r\n     * @param {boolean} [bool]\r\n     *        - A value of true adds the class.\r\n     *        - A value of false removes the class.\r\n     *        - No value will be a getter.\r\n     *\r\n     * @return {boolean|undefined}\r\n     *         - The value of fluid when getting.\r\n     *         - `undefined` when setting.\r\n     */\r\n    fill(bool) {\r\n      if (bool === undefined) {\r\n        return !!this.fill_;\r\n      }\r\n      this.fill_ = !!bool;\r\n      if (bool) {\r\n        this.addClass('vjs-fill');\r\n        this.fluid(false);\r\n      } else {\r\n        this.removeClass('vjs-fill');\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Get/Set the aspect ratio\r\n     *\r\n     * @param {string} [ratio]\r\n     *        Aspect ratio for player\r\n     *\r\n     * @return {string|undefined}\r\n     *         returns the current aspect ratio when getting\r\n     */\r\n\r\n    /**\r\n     * A getter/setter for the `Player`'s aspect ratio.\r\n     *\r\n     * @param {string} [ratio]\r\n     *        The value to set the `Player`'s aspect ratio to.\r\n     *\r\n     * @return {string|undefined}\r\n     *         - The current aspect ratio of the `Player` when getting.\r\n     *         - undefined when setting\r\n     */\r\n    aspectRatio(ratio) {\r\n      if (ratio === undefined) {\r\n        return this.aspectRatio_;\r\n      }\r\n\r\n      // Check for width:height format\r\n      if (!/^\\d+\\:\\d+$/.test(ratio)) {\r\n        throw new Error('Improper value supplied for aspect ratio. The format should be width:height, for example 16:9.');\r\n      }\r\n      this.aspectRatio_ = ratio;\r\n\r\n      // We're assuming if you set an aspect ratio you want fluid mode,\r\n      // because in fixed mode you could calculate width and height yourself.\r\n      this.fluid(true);\r\n      this.updateStyleEl_();\r\n    }\r\n\r\n    /**\r\n     * Update styles of the `Player` element (height, width and aspect ratio).\r\n     *\r\n     * @private\r\n     * @listens Tech#loadedmetadata\r\n     */\r\n    updateStyleEl_() {\r\n      if (window.VIDEOJS_NO_DYNAMIC_STYLE === true) {\r\n        const width = typeof this.width_ === 'number' ? this.width_ : this.options_.width;\r\n        const height = typeof this.height_ === 'number' ? this.height_ : this.options_.height;\r\n        const techEl = this.tech_ && this.tech_.el();\r\n        if (techEl) {\r\n          if (width >= 0) {\r\n            techEl.width = width;\r\n          }\r\n          if (height >= 0) {\r\n            techEl.height = height;\r\n          }\r\n        }\r\n        return;\r\n      }\r\n      let width;\r\n      let height;\r\n      let aspectRatio;\r\n      let idClass;\r\n\r\n      // The aspect ratio is either used directly or to calculate width and height.\r\n      if (this.aspectRatio_ !== undefined && this.aspectRatio_ !== 'auto') {\r\n        // Use any aspectRatio that's been specifically set\r\n        aspectRatio = this.aspectRatio_;\r\n      } else if (this.videoWidth() > 0) {\r\n        // Otherwise try to get the aspect ratio from the video metadata\r\n        aspectRatio = this.videoWidth() + ':' + this.videoHeight();\r\n      } else {\r\n        // Or use a default. The video element's is 2:1, but 16:9 is more common.\r\n        aspectRatio = '16:9';\r\n      }\r\n\r\n      // Get the ratio as a decimal we can use to calculate dimensions\r\n      const ratioParts = aspectRatio.split(':');\r\n      const ratioMultiplier = ratioParts[1] / ratioParts[0];\r\n      if (this.width_ !== undefined) {\r\n        // Use any width that's been specifically set\r\n        width = this.width_;\r\n      } else if (this.height_ !== undefined) {\r\n        // Or calculate the width from the aspect ratio if a height has been set\r\n        width = this.height_ / ratioMultiplier;\r\n      } else {\r\n        // Or use the video's metadata, or use the video el's default of 300\r\n        width = this.videoWidth() || 300;\r\n      }\r\n      if (this.height_ !== undefined) {\r\n        // Use any height that's been specifically set\r\n        height = this.height_;\r\n      } else {\r\n        // Otherwise calculate the height from the ratio and the width\r\n        height = width * ratioMultiplier;\r\n      }\r\n\r\n      // Ensure the CSS class is valid by starting with an alpha character\r\n      if (/^[^a-zA-Z]/.test(this.id())) {\r\n        idClass = 'dimensions-' + this.id();\r\n      } else {\r\n        idClass = this.id() + '-dimensions';\r\n      }\r\n\r\n      // Ensure the right class is still on the player for the style element\r\n      this.addClass(idClass);\r\n      setTextContent(this.styleEl_, `\r\n      .${idClass} {\r\n        width: ${width}px;\r\n        height: ${height}px;\r\n      }\r\n\r\n      .${idClass}.vjs-fluid:not(.vjs-audio-only-mode) {\r\n        padding-top: ${ratioMultiplier * 100}%;\r\n      }\r\n    `);\r\n    }\r\n\r\n    /**\r\n     * Load/Create an instance of playback {@link Tech} including element\r\n     * and API methods. Then append the `Tech` element in `Player` as a child.\r\n     *\r\n     * @param {string} techName\r\n     *        name of the playback technology\r\n     *\r\n     * @param {string} source\r\n     *        video source\r\n     *\r\n     * @private\r\n     */\r\n    loadTech_(techName, source) {\r\n      // Pause and remove current playback technology\r\n      if (this.tech_) {\r\n        this.unloadTech_();\r\n      }\r\n      const titleTechName = toTitleCase$1(techName);\r\n      const camelTechName = techName.charAt(0).toLowerCase() + techName.slice(1);\r\n\r\n      // get rid of the HTML5 video tag as soon as we are using another tech\r\n      if (titleTechName !== 'Html5' && this.tag) {\r\n        Tech.getTech('Html5').disposeMediaElement(this.tag);\r\n        this.tag.player = null;\r\n        this.tag = null;\r\n      }\r\n      this.techName_ = titleTechName;\r\n\r\n      // Turn off API access because we're loading a new tech that might load asynchronously\r\n      this.isReady_ = false;\r\n      let autoplay = this.autoplay();\r\n\r\n      // if autoplay is a string (or `true` with normalizeAutoplay: true) we pass false to the tech\r\n      // because the player is going to handle autoplay on `loadstart`\r\n      if (typeof this.autoplay() === 'string' || this.autoplay() === true && this.options_.normalizeAutoplay) {\r\n        autoplay = false;\r\n      }\r\n\r\n      // Grab tech-specific options from player options and add source and parent element to use.\r\n      const techOptions = {\r\n        source,\r\n        autoplay,\r\n        'nativeControlsForTouch': this.options_.nativeControlsForTouch,\r\n        'playerId': this.id(),\r\n        'techId': `${this.id()}_${camelTechName}_api`,\r\n        'playsinline': this.options_.playsinline,\r\n        'preload': this.options_.preload,\r\n        'loop': this.options_.loop,\r\n        'disablePictureInPicture': this.options_.disablePictureInPicture,\r\n        'muted': this.options_.muted,\r\n        'poster': this.poster(),\r\n        'language': this.language(),\r\n        'playerElIngest': this.playerElIngest_ || false,\r\n        'vtt.js': this.options_['vtt.js'],\r\n        'canOverridePoster': !!this.options_.techCanOverridePoster,\r\n        'enableSourceset': this.options_.enableSourceset\r\n      };\r\n      ALL.names.forEach(name => {\r\n        const props = ALL[name];\r\n        techOptions[props.getterName] = this[props.privateName];\r\n      });\r\n      Object.assign(techOptions, this.options_[titleTechName]);\r\n      Object.assign(techOptions, this.options_[camelTechName]);\r\n      Object.assign(techOptions, this.options_[techName.toLowerCase()]);\r\n      if (this.tag) {\r\n        techOptions.tag = this.tag;\r\n      }\r\n      if (source && source.src === this.cache_.src && this.cache_.currentTime > 0) {\r\n        techOptions.startTime = this.cache_.currentTime;\r\n      }\r\n\r\n      // Initialize tech instance\r\n      const TechClass = Tech.getTech(techName);\r\n      if (!TechClass) {\r\n        throw new Error(`No Tech named '${titleTechName}' exists! '${titleTechName}' should be registered using videojs.registerTech()'`);\r\n      }\r\n      this.tech_ = new TechClass(techOptions);\r\n\r\n      // player.triggerReady is always async, so don't need this to be async\r\n      this.tech_.ready(bind_(this, this.handleTechReady_), true);\r\n      textTrackConverter.jsonToTextTracks(this.textTracksJson_ || [], this.tech_);\r\n\r\n      // Listen to all HTML5-defined events and trigger them on the player\r\n      TECH_EVENTS_RETRIGGER.forEach(event => {\r\n        this.on(this.tech_, event, e => this[`handleTech${toTitleCase$1(event)}_`](e));\r\n      });\r\n      Object.keys(TECH_EVENTS_QUEUE).forEach(event => {\r\n        this.on(this.tech_, event, eventObj => {\r\n          if (this.tech_.playbackRate() === 0 && this.tech_.seeking()) {\r\n            this.queuedCallbacks_.push({\r\n              callback: this[`handleTech${TECH_EVENTS_QUEUE[event]}_`].bind(this),\r\n              event: eventObj\r\n            });\r\n            return;\r\n          }\r\n          this[`handleTech${TECH_EVENTS_QUEUE[event]}_`](eventObj);\r\n        });\r\n      });\r\n      this.on(this.tech_, 'loadstart', e => this.handleTechLoadStart_(e));\r\n      this.on(this.tech_, 'sourceset', e => this.handleTechSourceset_(e));\r\n      this.on(this.tech_, 'waiting', e => this.handleTechWaiting_(e));\r\n      this.on(this.tech_, 'ended', e => this.handleTechEnded_(e));\r\n      this.on(this.tech_, 'seeking', e => this.handleTechSeeking_(e));\r\n      this.on(this.tech_, 'play', e => this.handleTechPlay_(e));\r\n      this.on(this.tech_, 'pause', e => this.handleTechPause_(e));\r\n      this.on(this.tech_, 'durationchange', e => this.handleTechDurationChange_(e));\r\n      this.on(this.tech_, 'fullscreenchange', (e, data) => this.handleTechFullscreenChange_(e, data));\r\n      this.on(this.tech_, 'fullscreenerror', (e, err) => this.handleTechFullscreenError_(e, err));\r\n      this.on(this.tech_, 'enterpictureinpicture', e => this.handleTechEnterPictureInPicture_(e));\r\n      this.on(this.tech_, 'leavepictureinpicture', e => this.handleTechLeavePictureInPicture_(e));\r\n      this.on(this.tech_, 'error', e => this.handleTechError_(e));\r\n      this.on(this.tech_, 'posterchange', e => this.handleTechPosterChange_(e));\r\n      this.on(this.tech_, 'textdata', e => this.handleTechTextData_(e));\r\n      this.on(this.tech_, 'ratechange', e => this.handleTechRateChange_(e));\r\n      this.on(this.tech_, 'loadedmetadata', this.boundUpdateStyleEl_);\r\n      this.usingNativeControls(this.techGet_('controls'));\r\n      if (this.controls() && !this.usingNativeControls()) {\r\n        this.addTechControlsListeners_();\r\n      }\r\n\r\n      // Add the tech element in the DOM if it was not already there\r\n      // Make sure to not insert the original video element if using Html5\r\n      if (this.tech_.el().parentNode !== this.el() && (titleTechName !== 'Html5' || !this.tag)) {\r\n        prependTo(this.tech_.el(), this.el());\r\n      }\r\n\r\n      // Get rid of the original video tag reference after the first tech is loaded\r\n      if (this.tag) {\r\n        this.tag.player = null;\r\n        this.tag = null;\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Unload and dispose of the current playback {@link Tech}.\r\n     *\r\n     * @private\r\n     */\r\n    unloadTech_() {\r\n      // Save the current text tracks so that we can reuse the same text tracks with the next tech\r\n      ALL.names.forEach(name => {\r\n        const props = ALL[name];\r\n        this[props.privateName] = this[props.getterName]();\r\n      });\r\n      this.textTracksJson_ = textTrackConverter.textTracksToJson(this.tech_);\r\n      this.isReady_ = false;\r\n      this.tech_.dispose();\r\n      this.tech_ = false;\r\n      if (this.isPosterFromTech_) {\r\n        this.poster_ = '';\r\n        this.trigger('posterchange');\r\n      }\r\n      this.isPosterFromTech_ = false;\r\n    }\r\n\r\n    /**\r\n     * Return a reference to the current {@link Tech}.\r\n     * It will print a warning by default about the danger of using the tech directly\r\n     * but any argument that is passed in will silence the warning.\r\n     *\r\n     * @param {*} [safety]\r\n     *        Anything passed in to silence the warning\r\n     *\r\n     * @return {Tech}\r\n     *         The Tech\r\n     */\r\n    tech(safety) {\r\n      if (safety === undefined) {\r\n        log$1.warn('Using the tech directly can be dangerous. I hope you know what you\\'re doing.\\n' + 'See https://github.com/videojs/video.js/issues/2617 for more info.\\n');\r\n      }\r\n      return this.tech_;\r\n    }\r\n\r\n    /**\r\n     * An object that contains Video.js version.\r\n     *\r\n     * @typedef {Object} PlayerVersion\r\n     *\r\n     * @property {string} 'video.js' - Video.js version\r\n     */\r\n\r\n    /**\r\n     * Returns an object with Video.js version.\r\n     *\r\n     * @return {PlayerVersion}\r\n     *          An object with Video.js version.\r\n     */\r\n    version() {\r\n      return {\r\n        'video.js': version$5\r\n      };\r\n    }\r\n\r\n    /**\r\n     * Set up click and touch listeners for the playback element\r\n     *\r\n     * - On desktops: a click on the video itself will toggle playback\r\n     * - On mobile devices: a click on the video toggles controls\r\n     *   which is done by toggling the user state between active and\r\n     *   inactive\r\n     * - A tap can signal that a user has become active or has become inactive\r\n     *   e.g. a quick tap on an iPhone movie should reveal the controls. Another\r\n     *   quick tap should hide them again (signaling the user is in an inactive\r\n     *   viewing state)\r\n     * - In addition to this, we still want the user to be considered inactive after\r\n     *   a few seconds of inactivity.\r\n     *\r\n     * > Note: the only part of iOS interaction we can't mimic with this setup\r\n     * is a touch and hold on the video element counting as activity in order to\r\n     * keep the controls showing, but that shouldn't be an issue. A touch and hold\r\n     * on any controls will still keep the user active\r\n     *\r\n     * @private\r\n     */\r\n    addTechControlsListeners_() {\r\n      // Make sure to remove all the previous listeners in case we are called multiple times.\r\n      this.removeTechControlsListeners_();\r\n      this.on(this.tech_, 'click', this.boundHandleTechClick_);\r\n      this.on(this.tech_, 'dblclick', this.boundHandleTechDoubleClick_);\r\n\r\n      // If the controls were hidden we don't want that to change without a tap event\r\n      // so we'll check if the controls were already showing before reporting user\r\n      // activity\r\n      this.on(this.tech_, 'touchstart', this.boundHandleTechTouchStart_);\r\n      this.on(this.tech_, 'touchmove', this.boundHandleTechTouchMove_);\r\n      this.on(this.tech_, 'touchend', this.boundHandleTechTouchEnd_);\r\n\r\n      // The tap listener needs to come after the touchend listener because the tap\r\n      // listener cancels out any reportedUserActivity when setting userActive(false)\r\n      this.on(this.tech_, 'tap', this.boundHandleTechTap_);\r\n    }\r\n\r\n    /**\r\n     * Remove the listeners used for click and tap controls. This is needed for\r\n     * toggling to controls disabled, where a tap/touch should do nothing.\r\n     *\r\n     * @private\r\n     */\r\n    removeTechControlsListeners_() {\r\n      // We don't want to just use `this.off()` because there might be other needed\r\n      // listeners added by techs that extend this.\r\n      this.off(this.tech_, 'tap', this.boundHandleTechTap_);\r\n      this.off(this.tech_, 'touchstart', this.boundHandleTechTouchStart_);\r\n      this.off(this.tech_, 'touchmove', this.boundHandleTechTouchMove_);\r\n      this.off(this.tech_, 'touchend', this.boundHandleTechTouchEnd_);\r\n      this.off(this.tech_, 'click', this.boundHandleTechClick_);\r\n      this.off(this.tech_, 'dblclick', this.boundHandleTechDoubleClick_);\r\n    }\r\n\r\n    /**\r\n     * Player waits for the tech to be ready\r\n     *\r\n     * @private\r\n     */\r\n    handleTechReady_() {\r\n      this.triggerReady();\r\n\r\n      // Keep the same volume as before\r\n      if (this.cache_.volume) {\r\n        this.techCall_('setVolume', this.cache_.volume);\r\n      }\r\n\r\n      // Look if the tech found a higher resolution poster while loading\r\n      this.handleTechPosterChange_();\r\n\r\n      // Update the duration if available\r\n      this.handleTechDurationChange_();\r\n    }\r\n\r\n    /**\r\n     * Retrigger the `loadstart` event that was triggered by the {@link Tech}.\r\n     *\r\n     * @fires Player#loadstart\r\n     * @listens Tech#loadstart\r\n     * @private\r\n     */\r\n    handleTechLoadStart_() {\r\n      // TODO: Update to use `emptied` event instead. See #1277.\r\n\r\n      this.removeClass('vjs-ended', 'vjs-seeking');\r\n\r\n      // reset the error state\r\n      this.error(null);\r\n\r\n      // Update the duration\r\n      this.handleTechDurationChange_();\r\n      if (!this.paused()) {\r\n        /**\r\n         * Fired when the user agent begins looking for media data\r\n         *\r\n         * @event Player#loadstart\r\n         * @type {Event}\r\n         */\r\n        this.trigger('loadstart');\r\n      } else {\r\n        // reset the hasStarted state\r\n        this.hasStarted(false);\r\n        this.trigger('loadstart');\r\n      }\r\n\r\n      // autoplay happens after loadstart for the browser,\r\n      // so we mimic that behavior\r\n      this.manualAutoplay_(this.autoplay() === true && this.options_.normalizeAutoplay ? 'play' : this.autoplay());\r\n    }\r\n\r\n    /**\r\n     * Handle autoplay string values, rather than the typical boolean\r\n     * values that should be handled by the tech. Note that this is not\r\n     * part of any specification. Valid values and what they do can be\r\n     * found on the autoplay getter at Player#autoplay()\r\n     */\r\n    manualAutoplay_(type) {\r\n      if (!this.tech_ || typeof type !== 'string') {\r\n        return;\r\n      }\r\n\r\n      // Save original muted() value, set muted to true, and attempt to play().\r\n      // On promise rejection, restore muted from saved value\r\n      const resolveMuted = () => {\r\n        const previouslyMuted = this.muted();\r\n        this.muted(true);\r\n        const restoreMuted = () => {\r\n          this.muted(previouslyMuted);\r\n        };\r\n\r\n        // restore muted on play terminatation\r\n        this.playTerminatedQueue_.push(restoreMuted);\r\n        const mutedPromise = this.play();\r\n        if (!isPromise(mutedPromise)) {\r\n          return;\r\n        }\r\n        return mutedPromise.catch(err => {\r\n          restoreMuted();\r\n          throw new Error(`Rejection at manualAutoplay. Restoring muted value. ${err ? err : ''}`);\r\n        });\r\n      };\r\n      let promise;\r\n\r\n      // if muted defaults to true\r\n      // the only thing we can do is call play\r\n      if (type === 'any' && !this.muted()) {\r\n        promise = this.play();\r\n        if (isPromise(promise)) {\r\n          promise = promise.catch(resolveMuted);\r\n        }\r\n      } else if (type === 'muted' && !this.muted()) {\r\n        promise = resolveMuted();\r\n      } else {\r\n        promise = this.play();\r\n      }\r\n      if (!isPromise(promise)) {\r\n        return;\r\n      }\r\n      return promise.then(() => {\r\n        this.trigger({\r\n          type: 'autoplay-success',\r\n          autoplay: type\r\n        });\r\n      }).catch(() => {\r\n        this.trigger({\r\n          type: 'autoplay-failure',\r\n          autoplay: type\r\n        });\r\n      });\r\n    }\r\n\r\n    /**\r\n     * Update the internal source caches so that we return the correct source from\r\n     * `src()`, `currentSource()`, and `currentSources()`.\r\n     *\r\n     * > Note: `currentSources` will not be updated if the source that is passed in exists\r\n     *         in the current `currentSources` cache.\r\n     *\r\n     *\r\n     * @param {Tech~SourceObject} srcObj\r\n     *        A string or object source to update our caches to.\r\n     */\r\n    updateSourceCaches_(srcObj = '') {\r\n      let src = srcObj;\r\n      let type = '';\r\n      if (typeof src !== 'string') {\r\n        src = srcObj.src;\r\n        type = srcObj.type;\r\n      }\r\n\r\n      // make sure all the caches are set to default values\r\n      // to prevent null checking\r\n      this.cache_.source = this.cache_.source || {};\r\n      this.cache_.sources = this.cache_.sources || [];\r\n\r\n      // try to get the type of the src that was passed in\r\n      if (src && !type) {\r\n        type = findMimetype(this, src);\r\n      }\r\n\r\n      // update `currentSource` cache always\r\n      this.cache_.source = merge$2({}, srcObj, {\r\n        src,\r\n        type\r\n      });\r\n      const matchingSources = this.cache_.sources.filter(s => s.src && s.src === src);\r\n      const sourceElSources = [];\r\n      const sourceEls = this.$$('source');\r\n      const matchingSourceEls = [];\r\n      for (let i = 0; i < sourceEls.length; i++) {\r\n        const sourceObj = getAttributes(sourceEls[i]);\r\n        sourceElSources.push(sourceObj);\r\n        if (sourceObj.src && sourceObj.src === src) {\r\n          matchingSourceEls.push(sourceObj.src);\r\n        }\r\n      }\r\n\r\n      // if we have matching source els but not matching sources\r\n      // the current source cache is not up to date\r\n      if (matchingSourceEls.length && !matchingSources.length) {\r\n        this.cache_.sources = sourceElSources;\r\n        // if we don't have matching source or source els set the\r\n        // sources cache to the `currentSource` cache\r\n      } else if (!matchingSources.length) {\r\n        this.cache_.sources = [this.cache_.source];\r\n      }\r\n\r\n      // update the tech `src` cache\r\n      this.cache_.src = src;\r\n    }\r\n\r\n    /**\r\n     * *EXPERIMENTAL* Fired when the source is set or changed on the {@link Tech}\r\n     * causing the media element to reload.\r\n     *\r\n     * It will fire for the initial source and each subsequent source.\r\n     * This event is a custom event from Video.js and is triggered by the {@link Tech}.\r\n     *\r\n     * The event object for this event contains a `src` property that will contain the source\r\n     * that was available when the event was triggered. This is generally only necessary if Video.js\r\n     * is switching techs while the source was being changed.\r\n     *\r\n     * It is also fired when `load` is called on the player (or media element)\r\n     * because the {@link https://html.spec.whatwg.org/multipage/media.html#dom-media-load|specification for `load`}\r\n     * says that the resource selection algorithm needs to be aborted and restarted.\r\n     * In this case, it is very likely that the `src` property will be set to the\r\n     * empty string `\"\"` to indicate we do not know what the source will be but\r\n     * that it is changing.\r\n     *\r\n     * *This event is currently still experimental and may change in minor releases.*\r\n     * __To use this, pass `enableSourceset` option to the player.__\r\n     *\r\n     * @event Player#sourceset\r\n     * @type {Event}\r\n     * @prop {string} src\r\n     *                The source url available when the `sourceset` was triggered.\r\n     *                It will be an empty string if we cannot know what the source is\r\n     *                but know that the source will change.\r\n     */\r\n    /**\r\n     * Retrigger the `sourceset` event that was triggered by the {@link Tech}.\r\n     *\r\n     * @fires Player#sourceset\r\n     * @listens Tech#sourceset\r\n     * @private\r\n     */\r\n    handleTechSourceset_(event) {\r\n      // only update the source cache when the source\r\n      // was not updated using the player api\r\n      if (!this.changingSrc_) {\r\n        let updateSourceCaches = src => this.updateSourceCaches_(src);\r\n        const playerSrc = this.currentSource().src;\r\n        const eventSrc = event.src;\r\n\r\n        // if we have a playerSrc that is not a blob, and a tech src that is a blob\r\n        if (playerSrc && !/^blob:/.test(playerSrc) && /^blob:/.test(eventSrc)) {\r\n          // if both the tech source and the player source were updated we assume\r\n          // something like @videojs/http-streaming did the sourceset and skip updating the source cache.\r\n          if (!this.lastSource_ || this.lastSource_.tech !== eventSrc && this.lastSource_.player !== playerSrc) {\r\n            updateSourceCaches = () => {};\r\n          }\r\n        }\r\n\r\n        // update the source to the initial source right away\r\n        // in some cases this will be empty string\r\n        updateSourceCaches(eventSrc);\r\n\r\n        // if the `sourceset` `src` was an empty string\r\n        // wait for a `loadstart` to update the cache to `currentSrc`.\r\n        // If a sourceset happens before a `loadstart`, we reset the state\r\n        if (!event.src) {\r\n          this.tech_.any(['sourceset', 'loadstart'], e => {\r\n            // if a sourceset happens before a `loadstart` there\r\n            // is nothing to do as this `handleTechSourceset_`\r\n            // will be called again and this will be handled there.\r\n            if (e.type === 'sourceset') {\r\n              return;\r\n            }\r\n            const techSrc = this.techGet_('currentSrc');\r\n            this.lastSource_.tech = techSrc;\r\n            this.updateSourceCaches_(techSrc);\r\n          });\r\n        }\r\n      }\r\n      this.lastSource_ = {\r\n        player: this.currentSource().src,\r\n        tech: event.src\r\n      };\r\n      this.trigger({\r\n        src: event.src,\r\n        type: 'sourceset'\r\n      });\r\n    }\r\n\r\n    /**\r\n     * Add/remove the vjs-has-started class\r\n     *\r\n     *\r\n     * @param {boolean} request\r\n     *        - true: adds the class\r\n     *        - false: remove the class\r\n     *\r\n     * @return {boolean}\r\n     *         the boolean value of hasStarted_\r\n     */\r\n    hasStarted(request) {\r\n      if (request === undefined) {\r\n        // act as getter, if we have no request to change\r\n        return this.hasStarted_;\r\n      }\r\n      if (request === this.hasStarted_) {\r\n        return;\r\n      }\r\n      this.hasStarted_ = request;\r\n      if (this.hasStarted_) {\r\n        this.addClass('vjs-has-started');\r\n      } else {\r\n        this.removeClass('vjs-has-started');\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Fired whenever the media begins or resumes playback\r\n     *\r\n     * @see [Spec]{@link https://html.spec.whatwg.org/multipage/embedded-content.html#dom-media-play}\r\n     * @fires Player#play\r\n     * @listens Tech#play\r\n     * @private\r\n     */\r\n    handleTechPlay_() {\r\n      this.removeClass('vjs-ended', 'vjs-paused');\r\n      this.addClass('vjs-playing');\r\n\r\n      // hide the poster when the user hits play\r\n      this.hasStarted(true);\r\n      /**\r\n       * Triggered whenever an {@link Tech#play} event happens. Indicates that\r\n       * playback has started or resumed.\r\n       *\r\n       * @event Player#play\r\n       * @type {Event}\r\n       */\r\n      this.trigger('play');\r\n    }\r\n\r\n    /**\r\n     * Retrigger the `ratechange` event that was triggered by the {@link Tech}.\r\n     *\r\n     * If there were any events queued while the playback rate was zero, fire\r\n     * those events now.\r\n     *\r\n     * @private\r\n     * @method Player#handleTechRateChange_\r\n     * @fires Player#ratechange\r\n     * @listens Tech#ratechange\r\n     */\r\n    handleTechRateChange_() {\r\n      if (this.tech_.playbackRate() > 0 && this.cache_.lastPlaybackRate === 0) {\r\n        this.queuedCallbacks_.forEach(queued => queued.callback(queued.event));\r\n        this.queuedCallbacks_ = [];\r\n      }\r\n      this.cache_.lastPlaybackRate = this.tech_.playbackRate();\r\n      /**\r\n       * Fires when the playing speed of the audio/video is changed\r\n       *\r\n       * @event Player#ratechange\r\n       * @type {event}\r\n       */\r\n      this.trigger('ratechange');\r\n    }\r\n\r\n    /**\r\n     * Retrigger the `waiting` event that was triggered by the {@link Tech}.\r\n     *\r\n     * @fires Player#waiting\r\n     * @listens Tech#waiting\r\n     * @private\r\n     */\r\n    handleTechWaiting_() {\r\n      this.addClass('vjs-waiting');\r\n      /**\r\n       * A readyState change on the DOM element has caused playback to stop.\r\n       *\r\n       * @event Player#waiting\r\n       * @type {Event}\r\n       */\r\n      this.trigger('waiting');\r\n\r\n      // Browsers may emit a timeupdate event after a waiting event. In order to prevent\r\n      // premature removal of the waiting class, wait for the time to change.\r\n      const timeWhenWaiting = this.currentTime();\r\n      const timeUpdateListener = () => {\r\n        if (timeWhenWaiting !== this.currentTime()) {\r\n          this.removeClass('vjs-waiting');\r\n          this.off('timeupdate', timeUpdateListener);\r\n        }\r\n      };\r\n      this.on('timeupdate', timeUpdateListener);\r\n    }\r\n\r\n    /**\r\n     * Retrigger the `canplay` event that was triggered by the {@link Tech}.\r\n     * > Note: This is not consistent between browsers. See #1351\r\n     *\r\n     * @fires Player#canplay\r\n     * @listens Tech#canplay\r\n     * @private\r\n     */\r\n    handleTechCanPlay_() {\r\n      this.removeClass('vjs-waiting');\r\n      /**\r\n       * The media has a readyState of HAVE_FUTURE_DATA or greater.\r\n       *\r\n       * @event Player#canplay\r\n       * @type {Event}\r\n       */\r\n      this.trigger('canplay');\r\n    }\r\n\r\n    /**\r\n     * Retrigger the `canplaythrough` event that was triggered by the {@link Tech}.\r\n     *\r\n     * @fires Player#canplaythrough\r\n     * @listens Tech#canplaythrough\r\n     * @private\r\n     */\r\n    handleTechCanPlayThrough_() {\r\n      this.removeClass('vjs-waiting');\r\n      /**\r\n       * The media has a readyState of HAVE_ENOUGH_DATA or greater. This means that the\r\n       * entire media file can be played without buffering.\r\n       *\r\n       * @event Player#canplaythrough\r\n       * @type {Event}\r\n       */\r\n      this.trigger('canplaythrough');\r\n    }\r\n\r\n    /**\r\n     * Retrigger the `playing` event that was triggered by the {@link Tech}.\r\n     *\r\n     * @fires Player#playing\r\n     * @listens Tech#playing\r\n     * @private\r\n     */\r\n    handleTechPlaying_() {\r\n      this.removeClass('vjs-waiting');\r\n      /**\r\n       * The media is no longer blocked from playback, and has started playing.\r\n       *\r\n       * @event Player#playing\r\n       * @type {Event}\r\n       */\r\n      this.trigger('playing');\r\n    }\r\n\r\n    /**\r\n     * Retrigger the `seeking` event that was triggered by the {@link Tech}.\r\n     *\r\n     * @fires Player#seeking\r\n     * @listens Tech#seeking\r\n     * @private\r\n     */\r\n    handleTechSeeking_() {\r\n      this.addClass('vjs-seeking');\r\n      /**\r\n       * Fired whenever the player is jumping to a new time\r\n       *\r\n       * @event Player#seeking\r\n       * @type {Event}\r\n       */\r\n      this.trigger('seeking');\r\n    }\r\n\r\n    /**\r\n     * Retrigger the `seeked` event that was triggered by the {@link Tech}.\r\n     *\r\n     * @fires Player#seeked\r\n     * @listens Tech#seeked\r\n     * @private\r\n     */\r\n    handleTechSeeked_() {\r\n      this.removeClass('vjs-seeking', 'vjs-ended');\r\n      /**\r\n       * Fired when the player has finished jumping to a new time\r\n       *\r\n       * @event Player#seeked\r\n       * @type {Event}\r\n       */\r\n      this.trigger('seeked');\r\n    }\r\n\r\n    /**\r\n     * Retrigger the `pause` event that was triggered by the {@link Tech}.\r\n     *\r\n     * @fires Player#pause\r\n     * @listens Tech#pause\r\n     * @private\r\n     */\r\n    handleTechPause_() {\r\n      this.removeClass('vjs-playing');\r\n      this.addClass('vjs-paused');\r\n      /**\r\n       * Fired whenever the media has been paused\r\n       *\r\n       * @event Player#pause\r\n       * @type {Event}\r\n       */\r\n      this.trigger('pause');\r\n    }\r\n\r\n    /**\r\n     * Retrigger the `ended` event that was triggered by the {@link Tech}.\r\n     *\r\n     * @fires Player#ended\r\n     * @listens Tech#ended\r\n     * @private\r\n     */\r\n    handleTechEnded_() {\r\n      this.addClass('vjs-ended');\r\n      this.removeClass('vjs-waiting');\r\n      if (this.options_.loop) {\r\n        this.currentTime(0);\r\n        this.play();\r\n      } else if (!this.paused()) {\r\n        this.pause();\r\n      }\r\n\r\n      /**\r\n       * Fired when the end of the media resource is reached (currentTime == duration)\r\n       *\r\n       * @event Player#ended\r\n       * @type {Event}\r\n       */\r\n      this.trigger('ended');\r\n    }\r\n\r\n    /**\r\n     * Fired when the duration of the media resource is first known or changed\r\n     *\r\n     * @listens Tech#durationchange\r\n     * @private\r\n     */\r\n    handleTechDurationChange_() {\r\n      this.duration(this.techGet_('duration'));\r\n    }\r\n\r\n    /**\r\n     * Handle a click on the media element to play/pause\r\n     *\r\n     * @param {Event} event\r\n     *        the event that caused this function to trigger\r\n     *\r\n     * @listens Tech#click\r\n     * @private\r\n     */\r\n    handleTechClick_(event) {\r\n      // When controls are disabled a click should not toggle playback because\r\n      // the click is considered a control\r\n      if (!this.controls_) {\r\n        return;\r\n      }\r\n      if (this.options_ === undefined || this.options_.userActions === undefined || this.options_.userActions.click === undefined || this.options_.userActions.click !== false) {\r\n        if (this.options_ !== undefined && this.options_.userActions !== undefined && typeof this.options_.userActions.click === 'function') {\r\n          this.options_.userActions.click.call(this, event);\r\n        } else if (this.paused()) {\r\n          silencePromise(this.play());\r\n        } else {\r\n          this.pause();\r\n        }\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Handle a double-click on the media element to enter/exit fullscreen,\r\n     * or exit documentPictureInPicture mode\r\n     *\r\n     * @param {Event} event\r\n     *        the event that caused this function to trigger\r\n     *\r\n     * @listens Tech#dblclick\r\n     * @private\r\n     */\r\n    handleTechDoubleClick_(event) {\r\n      if (!this.controls_) {\r\n        return;\r\n      }\r\n\r\n      // we do not want to toggle fullscreen state\r\n      // when double-clicking inside a control bar or a modal\r\n      const inAllowedEls = Array.prototype.some.call(this.$$('.vjs-control-bar, .vjs-modal-dialog'), el => el.contains(event.target));\r\n      if (!inAllowedEls) {\r\n        /*\r\n         * options.userActions.doubleClick\r\n         *\r\n         * If `undefined` or `true`, double-click toggles fullscreen if controls are present\r\n         * Set to `false` to disable double-click handling\r\n         * Set to a function to substitute an external double-click handler\r\n         */\r\n        if (this.options_ === undefined || this.options_.userActions === undefined || this.options_.userActions.doubleClick === undefined || this.options_.userActions.doubleClick !== false) {\r\n          if (this.options_ !== undefined && this.options_.userActions !== undefined && typeof this.options_.userActions.doubleClick === 'function') {\r\n            this.options_.userActions.doubleClick.call(this, event);\r\n          } else if (this.isInPictureInPicture() && !document.pictureInPictureElement) {\r\n            // Checking the presence of `window.documentPictureInPicture.window` complicates\r\n            // tests, checking `document.pictureInPictureElement` also works. It wouldn't\r\n            // be null in regular picture in picture.\r\n            // Exit picture in picture mode. This gesture can't trigger pip on the main window.\r\n            this.exitPictureInPicture();\r\n          } else if (this.isFullscreen()) {\r\n            this.exitFullscreen();\r\n          } else {\r\n            this.requestFullscreen();\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Handle a tap on the media element. It will toggle the user\r\n     * activity state, which hides and shows the controls.\r\n     *\r\n     * @listens Tech#tap\r\n     * @private\r\n     */\r\n    handleTechTap_() {\r\n      this.userActive(!this.userActive());\r\n    }\r\n\r\n    /**\r\n     * Handle touch to start\r\n     *\r\n     * @listens Tech#touchstart\r\n     * @private\r\n     */\r\n    handleTechTouchStart_() {\r\n      this.userWasActive = this.userActive();\r\n    }\r\n\r\n    /**\r\n     * Handle touch to move\r\n     *\r\n     * @listens Tech#touchmove\r\n     * @private\r\n     */\r\n    handleTechTouchMove_() {\r\n      if (this.userWasActive) {\r\n        this.reportUserActivity();\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Handle touch to end\r\n     *\r\n     * @param {Event} event\r\n     *        the touchend event that triggered\r\n     *        this function\r\n     *\r\n     * @listens Tech#touchend\r\n     * @private\r\n     */\r\n    handleTechTouchEnd_(event) {\r\n      // Stop the mouse events from also happening\r\n      if (event.cancelable) {\r\n        event.preventDefault();\r\n      }\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    toggleFullscreenClass_() {\r\n      if (this.isFullscreen()) {\r\n        this.addClass('vjs-fullscreen');\r\n      } else {\r\n        this.removeClass('vjs-fullscreen');\r\n      }\r\n    }\r\n\r\n    /**\r\n     * when the document fschange event triggers it calls this\r\n     */\r\n    documentFullscreenChange_(e) {\r\n      const targetPlayer = e.target.player;\r\n\r\n      // if another player was fullscreen\r\n      // do a null check for targetPlayer because older firefox's would put document as e.target\r\n      if (targetPlayer && targetPlayer !== this) {\r\n        return;\r\n      }\r\n      const el = this.el();\r\n      let isFs = document[this.fsApi_.fullscreenElement] === el;\r\n      if (!isFs && el.matches) {\r\n        isFs = el.matches(':' + this.fsApi_.fullscreen);\r\n      }\r\n      this.isFullscreen(isFs);\r\n    }\r\n\r\n    /**\r\n     * Handle Tech Fullscreen Change\r\n     *\r\n     * @param {Event} event\r\n     *        the fullscreenchange event that triggered this function\r\n     *\r\n     * @param {Object} data\r\n     *        the data that was sent with the event\r\n     *\r\n     * @private\r\n     * @listens Tech#fullscreenchange\r\n     * @fires Player#fullscreenchange\r\n     */\r\n    handleTechFullscreenChange_(event, data) {\r\n      if (data) {\r\n        if (data.nativeIOSFullscreen) {\r\n          this.addClass('vjs-ios-native-fs');\r\n          this.tech_.one('webkitendfullscreen', () => {\r\n            this.removeClass('vjs-ios-native-fs');\r\n          });\r\n        }\r\n        this.isFullscreen(data.isFullscreen);\r\n      }\r\n    }\r\n    handleTechFullscreenError_(event, err) {\r\n      this.trigger('fullscreenerror', err);\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    togglePictureInPictureClass_() {\r\n      if (this.isInPictureInPicture()) {\r\n        this.addClass('vjs-picture-in-picture');\r\n      } else {\r\n        this.removeClass('vjs-picture-in-picture');\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Handle Tech Enter Picture-in-Picture.\r\n     *\r\n     * @param {Event} event\r\n     *        the enterpictureinpicture event that triggered this function\r\n     *\r\n     * @private\r\n     * @listens Tech#enterpictureinpicture\r\n     */\r\n    handleTechEnterPictureInPicture_(event) {\r\n      this.isInPictureInPicture(true);\r\n    }\r\n\r\n    /**\r\n     * Handle Tech Leave Picture-in-Picture.\r\n     *\r\n     * @param {Event} event\r\n     *        the leavepictureinpicture event that triggered this function\r\n     *\r\n     * @private\r\n     * @listens Tech#leavepictureinpicture\r\n     */\r\n    handleTechLeavePictureInPicture_(event) {\r\n      this.isInPictureInPicture(false);\r\n    }\r\n\r\n    /**\r\n     * Fires when an error occurred during the loading of an audio/video.\r\n     *\r\n     * @private\r\n     * @listens Tech#error\r\n     */\r\n    handleTechError_() {\r\n      const error = this.tech_.error();\r\n      if (error) {\r\n        this.error(error);\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Retrigger the `textdata` event that was triggered by the {@link Tech}.\r\n     *\r\n     * @fires Player#textdata\r\n     * @listens Tech#textdata\r\n     * @private\r\n     */\r\n    handleTechTextData_() {\r\n      let data = null;\r\n      if (arguments.length > 1) {\r\n        data = arguments[1];\r\n      }\r\n\r\n      /**\r\n       * Fires when we get a textdata event from tech\r\n       *\r\n       * @event Player#textdata\r\n       * @type {Event}\r\n       */\r\n      this.trigger('textdata', data);\r\n    }\r\n\r\n    /**\r\n     * Get object for cached values.\r\n     *\r\n     * @return {Object}\r\n     *         get the current object cache\r\n     */\r\n    getCache() {\r\n      return this.cache_;\r\n    }\r\n\r\n    /**\r\n     * Resets the internal cache object.\r\n     *\r\n     * Using this function outside the player constructor or reset method may\r\n     * have unintended side-effects.\r\n     *\r\n     * @private\r\n     */\r\n    resetCache_() {\r\n      this.cache_ = {\r\n        // Right now, the currentTime is not _really_ cached because it is always\r\n        // retrieved from the tech (see: currentTime). However, for completeness,\r\n        // we set it to zero here to ensure that if we do start actually caching\r\n        // it, we reset it along with everything else.\r\n        currentTime: 0,\r\n        initTime: 0,\r\n        inactivityTimeout: this.options_.inactivityTimeout,\r\n        duration: NaN,\r\n        lastVolume: 1,\r\n        lastPlaybackRate: this.defaultPlaybackRate(),\r\n        media: null,\r\n        src: '',\r\n        source: {},\r\n        sources: [],\r\n        playbackRates: [],\r\n        volume: 1\r\n      };\r\n    }\r\n\r\n    /**\r\n     * Pass values to the playback tech\r\n     *\r\n     * @param {string} [method]\r\n     *        the method to call\r\n     *\r\n     * @param {Object} [arg]\r\n     *        the argument to pass\r\n     *\r\n     * @private\r\n     */\r\n    techCall_(method, arg) {\r\n      // If it's not ready yet, call method when it is\r\n\r\n      this.ready(function () {\r\n        if (method in allowedSetters) {\r\n          return set(this.middleware_, this.tech_, method, arg);\r\n        } else if (method in allowedMediators) {\r\n          return mediate(this.middleware_, this.tech_, method, arg);\r\n        }\r\n        try {\r\n          if (this.tech_) {\r\n            this.tech_[method](arg);\r\n          }\r\n        } catch (e) {\r\n          log$1(e);\r\n          throw e;\r\n        }\r\n      }, true);\r\n    }\r\n\r\n    /**\r\n     * Mediate attempt to call playback tech method\r\n     * and return the value of the method called.\r\n     *\r\n     * @param {string} method\r\n     *        Tech method\r\n     *\r\n     * @return {*}\r\n     *         Value returned by the tech method called, undefined if tech\r\n     *         is not ready or tech method is not present\r\n     *\r\n     * @private\r\n     */\r\n    techGet_(method) {\r\n      if (!this.tech_ || !this.tech_.isReady_) {\r\n        return;\r\n      }\r\n      if (method in allowedGetters) {\r\n        return get(this.middleware_, this.tech_, method);\r\n      } else if (method in allowedMediators) {\r\n        return mediate(this.middleware_, this.tech_, method);\r\n      }\r\n\r\n      // Log error when playback tech object is present but method\r\n      // is undefined or unavailable\r\n      try {\r\n        return this.tech_[method]();\r\n      } catch (e) {\r\n        // When building additional tech libs, an expected method may not be defined yet\r\n        if (this.tech_[method] === undefined) {\r\n          log$1(`Video.js: ${method} method not defined for ${this.techName_} playback technology.`, e);\r\n          throw e;\r\n        }\r\n\r\n        // When a method isn't available on the object it throws a TypeError\r\n        if (e.name === 'TypeError') {\r\n          log$1(`Video.js: ${method} unavailable on ${this.techName_} playback technology element.`, e);\r\n          this.tech_.isReady_ = false;\r\n          throw e;\r\n        }\r\n\r\n        // If error unknown, just log and throw\r\n        log$1(e);\r\n        throw e;\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Attempt to begin playback at the first opportunity.\r\n     *\r\n     * @return {Promise|undefined}\r\n     *         Returns a promise if the browser supports Promises (or one\r\n     *         was passed in as an option). This promise will be resolved on\r\n     *         the return value of play. If this is undefined it will fulfill the\r\n     *         promise chain otherwise the promise chain will be fulfilled when\r\n     *         the promise from play is fulfilled.\r\n     */\r\n    play() {\r\n      return new Promise(resolve => {\r\n        this.play_(resolve);\r\n      });\r\n    }\r\n\r\n    /**\r\n     * The actual logic for play, takes a callback that will be resolved on the\r\n     * return value of play. This allows us to resolve to the play promise if there\r\n     * is one on modern browsers.\r\n     *\r\n     * @private\r\n     * @param {Function} [callback]\r\n     *        The callback that should be called when the techs play is actually called\r\n     */\r\n    play_(callback = silencePromise) {\r\n      this.playCallbacks_.push(callback);\r\n      const isSrcReady = Boolean(!this.changingSrc_ && (this.src() || this.currentSrc()));\r\n      const isSafariOrIOS = Boolean(IS_ANY_SAFARI || IS_IOS);\r\n\r\n      // treat calls to play_ somewhat like the `one` event function\r\n      if (this.waitToPlay_) {\r\n        this.off(['ready', 'loadstart'], this.waitToPlay_);\r\n        this.waitToPlay_ = null;\r\n      }\r\n\r\n      // if the player/tech is not ready or the src itself is not ready\r\n      // queue up a call to play on `ready` or `loadstart`\r\n      if (!this.isReady_ || !isSrcReady) {\r\n        this.waitToPlay_ = e => {\r\n          this.play_();\r\n        };\r\n        this.one(['ready', 'loadstart'], this.waitToPlay_);\r\n\r\n        // if we are in Safari, there is a high chance that loadstart will trigger after the gesture timeperiod\r\n        // in that case, we need to prime the video element by calling load so it'll be ready in time\r\n        if (!isSrcReady && isSafariOrIOS) {\r\n          this.load();\r\n        }\r\n        return;\r\n      }\r\n\r\n      // If the player/tech is ready and we have a source, we can attempt playback.\r\n      const val = this.techGet_('play');\r\n\r\n      // For native playback, reset the progress bar if we get a play call from a replay.\r\n      const isNativeReplay = isSafariOrIOS && this.hasClass('vjs-ended');\r\n      if (isNativeReplay) {\r\n        this.resetProgressBar_();\r\n      }\r\n      // play was terminated if the returned value is null\r\n      if (val === null) {\r\n        this.runPlayTerminatedQueue_();\r\n      } else {\r\n        this.runPlayCallbacks_(val);\r\n      }\r\n    }\r\n\r\n    /**\r\n     * These functions will be run when if play is terminated. If play\r\n     * runPlayCallbacks_ is run these function will not be run. This allows us\r\n     * to differentiate between a terminated play and an actual call to play.\r\n     */\r\n    runPlayTerminatedQueue_() {\r\n      const queue = this.playTerminatedQueue_.slice(0);\r\n      this.playTerminatedQueue_ = [];\r\n      queue.forEach(function (q) {\r\n        q();\r\n      });\r\n    }\r\n\r\n    /**\r\n     * When a callback to play is delayed we have to run these\r\n     * callbacks when play is actually called on the tech. This function\r\n     * runs the callbacks that were delayed and accepts the return value\r\n     * from the tech.\r\n     *\r\n     * @param {undefined|Promise} val\r\n     *        The return value from the tech.\r\n     */\r\n    runPlayCallbacks_(val) {\r\n      const callbacks = this.playCallbacks_.slice(0);\r\n      this.playCallbacks_ = [];\r\n      // clear play terminatedQueue since we finished a real play\r\n      this.playTerminatedQueue_ = [];\r\n      callbacks.forEach(function (cb) {\r\n        cb(val);\r\n      });\r\n    }\r\n\r\n    /**\r\n     * Pause the video playback\r\n     */\r\n    pause() {\r\n      this.techCall_('pause');\r\n    }\r\n\r\n    /**\r\n     * Check if the player is paused or has yet to play\r\n     *\r\n     * @return {boolean}\r\n     *         - false: if the media is currently playing\r\n     *         - true: if media is not currently playing\r\n     */\r\n    paused() {\r\n      // The initial state of paused should be true (in Safari it's actually false)\r\n      return this.techGet_('paused') === false ? false : true;\r\n    }\r\n\r\n    /**\r\n     * Get a TimeRange object representing the current ranges of time that the user\r\n     * has played.\r\n     *\r\n     * @return {TimeRange}\r\n     *         A time range object that represents all the increments of time that have\r\n     *         been played.\r\n     */\r\n    played() {\r\n      return this.techGet_('played') || createTimeRanges$1(0, 0);\r\n    }\r\n\r\n    /**\r\n     * Sets or returns whether or not the user is \"scrubbing\". Scrubbing is\r\n     * when the user has clicked the progress bar handle and is\r\n     * dragging it along the progress bar.\r\n     *\r\n     * @param {boolean} [isScrubbing]\r\n     *        whether the user is or is not scrubbing\r\n     *\r\n     * @return {boolean|undefined}\r\n     *         - The value of scrubbing when getting\r\n     *         - Nothing when setting\r\n     */\r\n    scrubbing(isScrubbing) {\r\n      if (typeof isScrubbing === 'undefined') {\r\n        return this.scrubbing_;\r\n      }\r\n      this.scrubbing_ = !!isScrubbing;\r\n      this.techCall_('setScrubbing', this.scrubbing_);\r\n      if (isScrubbing) {\r\n        this.addClass('vjs-scrubbing');\r\n      } else {\r\n        this.removeClass('vjs-scrubbing');\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Get or set the current time (in seconds)\r\n     *\r\n     * @param {number|string} [seconds]\r\n     *        The time to seek to in seconds\r\n     *\r\n     * @return {number|undefined}\r\n     *         - the current time in seconds when getting\r\n     *         - Nothing when setting\r\n     */\r\n    currentTime(seconds) {\r\n      if (seconds === undefined) {\r\n        // cache last currentTime and return. default to 0 seconds\r\n        //\r\n        // Caching the currentTime is meant to prevent a massive amount of reads on the tech's\r\n        // currentTime when scrubbing, but may not provide much performance benefit after all.\r\n        // Should be tested. Also something has to read the actual current time or the cache will\r\n        // never get updated.\r\n        this.cache_.currentTime = this.techGet_('currentTime') || 0;\r\n        return this.cache_.currentTime;\r\n      }\r\n      if (seconds < 0) {\r\n        seconds = 0;\r\n      }\r\n      if (!this.isReady_ || this.changingSrc_ || !this.tech_ || !this.tech_.isReady_) {\r\n        this.cache_.initTime = seconds;\r\n        this.off('canplay', this.boundApplyInitTime_);\r\n        this.one('canplay', this.boundApplyInitTime_);\r\n        return;\r\n      }\r\n      this.techCall_('setCurrentTime', seconds);\r\n      this.cache_.initTime = 0;\r\n      if (isFinite(seconds)) {\r\n        this.cache_.currentTime = Number(seconds);\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Apply the value of initTime stored in cache as currentTime.\r\n     *\r\n     * @private\r\n     */\r\n    applyInitTime_() {\r\n      this.currentTime(this.cache_.initTime);\r\n    }\r\n\r\n    /**\r\n     * Normally gets the length in time of the video in seconds;\r\n     * in all but the rarest use cases an argument will NOT be passed to the method\r\n     *\r\n     * > **NOTE**: The video must have started loading before the duration can be\r\n     * known, and depending on preload behaviour may not be known until the video starts\r\n     * playing.\r\n     *\r\n     * @fires Player#durationchange\r\n     *\r\n     * @param {number} [seconds]\r\n     *        The duration of the video to set in seconds\r\n     *\r\n     * @return {number|undefined}\r\n     *         - The duration of the video in seconds when getting\r\n     *         - Nothing when setting\r\n     */\r\n    duration(seconds) {\r\n      if (seconds === undefined) {\r\n        // return NaN if the duration is not known\r\n        return this.cache_.duration !== undefined ? this.cache_.duration : NaN;\r\n      }\r\n      seconds = parseFloat(seconds);\r\n\r\n      // Standardize on Infinity for signaling video is live\r\n      if (seconds < 0) {\r\n        seconds = Infinity;\r\n      }\r\n      if (seconds !== this.cache_.duration) {\r\n        // Cache the last set value for optimized scrubbing\r\n        this.cache_.duration = seconds;\r\n        if (seconds === Infinity) {\r\n          this.addClass('vjs-live');\r\n        } else {\r\n          this.removeClass('vjs-live');\r\n        }\r\n        if (!isNaN(seconds)) {\r\n          // Do not fire durationchange unless the duration value is known.\r\n          // @see [Spec]{@link https://www.w3.org/TR/2011/WD-html5-20110113/video.html#media-element-load-algorithm}\r\n\r\n          /**\r\n           * @event Player#durationchange\r\n           * @type {Event}\r\n           */\r\n          this.trigger('durationchange');\r\n        }\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Calculates how much time is left in the video. Not part\r\n     * of the native video API.\r\n     *\r\n     * @return {number}\r\n     *         The time remaining in seconds\r\n     */\r\n    remainingTime() {\r\n      return this.duration() - this.currentTime();\r\n    }\r\n\r\n    /**\r\n     * A remaining time function that is intended to be used when\r\n     * the time is to be displayed directly to the user.\r\n     *\r\n     * @return {number}\r\n     *         The rounded time remaining in seconds\r\n     */\r\n    remainingTimeDisplay() {\r\n      return Math.floor(this.duration()) - Math.floor(this.currentTime());\r\n    }\r\n\r\n    //\r\n    // Kind of like an array of portions of the video that have been downloaded.\r\n\r\n    /**\r\n     * Get a TimeRange object with an array of the times of the video\r\n     * that have been downloaded. If you just want the percent of the\r\n     * video that's been downloaded, use bufferedPercent.\r\n     *\r\n     * @see [Buffered Spec]{@link http://dev.w3.org/html5/spec/video.html#dom-media-buffered}\r\n     *\r\n     * @return {TimeRange}\r\n     *         A mock {@link TimeRanges} object (following HTML spec)\r\n     */\r\n    buffered() {\r\n      let buffered = this.techGet_('buffered');\r\n      if (!buffered || !buffered.length) {\r\n        buffered = createTimeRanges$1(0, 0);\r\n      }\r\n      return buffered;\r\n    }\r\n\r\n    /**\r\n     * Get the TimeRanges of the media that are currently available\r\n     * for seeking to.\r\n     *\r\n     * @see [Seekable Spec]{@link https://html.spec.whatwg.org/multipage/media.html#dom-media-seekable}\r\n     *\r\n     * @return {TimeRange}\r\n     *         A mock {@link TimeRanges} object (following HTML spec)\r\n     */\r\n    seekable() {\r\n      let seekable = this.techGet_('seekable');\r\n      if (!seekable || !seekable.length) {\r\n        seekable = createTimeRanges$1(0, 0);\r\n      }\r\n      return seekable;\r\n    }\r\n\r\n    /**\r\n     * Returns whether the player is in the \"seeking\" state.\r\n     *\r\n     * @return {boolean} True if the player is in the seeking state, false if not.\r\n     */\r\n    seeking() {\r\n      return this.techGet_('seeking');\r\n    }\r\n\r\n    /**\r\n     * Returns whether the player is in the \"ended\" state.\r\n     *\r\n     * @return {boolean} True if the player is in the ended state, false if not.\r\n     */\r\n    ended() {\r\n      return this.techGet_('ended');\r\n    }\r\n\r\n    /**\r\n     * Returns the current state of network activity for the element, from\r\n     * the codes in the list below.\r\n     * - NETWORK_EMPTY (numeric value 0)\r\n     *   The element has not yet been initialised. All attributes are in\r\n     *   their initial states.\r\n     * - NETWORK_IDLE (numeric value 1)\r\n     *   The element's resource selection algorithm is active and has\r\n     *   selected a resource, but it is not actually using the network at\r\n     *   this time.\r\n     * - NETWORK_LOADING (numeric value 2)\r\n     *   The user agent is actively trying to download data.\r\n     * - NETWORK_NO_SOURCE (numeric value 3)\r\n     *   The element's resource selection algorithm is active, but it has\r\n     *   not yet found a resource to use.\r\n     *\r\n     * @see https://html.spec.whatwg.org/multipage/embedded-content.html#network-states\r\n     * @return {number} the current network activity state\r\n     */\r\n    networkState() {\r\n      return this.techGet_('networkState');\r\n    }\r\n\r\n    /**\r\n     * Returns a value that expresses the current state of the element\r\n     * with respect to rendering the current playback position, from the\r\n     * codes in the list below.\r\n     * - HAVE_NOTHING (numeric value 0)\r\n     *   No information regarding the media resource is available.\r\n     * - HAVE_METADATA (numeric value 1)\r\n     *   Enough of the resource has been obtained that the duration of the\r\n     *   resource is available.\r\n     * - HAVE_CURRENT_DATA (numeric value 2)\r\n     *   Data for the immediate current playback position is available.\r\n     * - HAVE_FUTURE_DATA (numeric value 3)\r\n     *   Data for the immediate current playback position is available, as\r\n     *   well as enough data for the user agent to advance the current\r\n     *   playback position in the direction of playback.\r\n     * - HAVE_ENOUGH_DATA (numeric value 4)\r\n     *   The user agent estimates that enough data is available for\r\n     *   playback to proceed uninterrupted.\r\n     *\r\n     * @see https://html.spec.whatwg.org/multipage/embedded-content.html#dom-media-readystate\r\n     * @return {number} the current playback rendering state\r\n     */\r\n    readyState() {\r\n      return this.techGet_('readyState');\r\n    }\r\n\r\n    /**\r\n     * Get the percent (as a decimal) of the video that's been downloaded.\r\n     * This method is not a part of the native HTML video API.\r\n     *\r\n     * @return {number}\r\n     *         A decimal between 0 and 1 representing the percent\r\n     *         that is buffered 0 being 0% and 1 being 100%\r\n     */\r\n    bufferedPercent() {\r\n      return bufferedPercent(this.buffered(), this.duration());\r\n    }\r\n\r\n    /**\r\n     * Get the ending time of the last buffered time range\r\n     * This is used in the progress bar to encapsulate all time ranges.\r\n     *\r\n     * @return {number}\r\n     *         The end of the last buffered time range\r\n     */\r\n    bufferedEnd() {\r\n      const buffered = this.buffered();\r\n      const duration = this.duration();\r\n      let end = buffered.end(buffered.length - 1);\r\n      if (end > duration) {\r\n        end = duration;\r\n      }\r\n      return end;\r\n    }\r\n\r\n    /**\r\n     * Get or set the current volume of the media\r\n     *\r\n     * @param  {number} [percentAsDecimal]\r\n     *         The new volume as a decimal percent:\r\n     *         - 0 is muted/0%/off\r\n     *         - 1.0 is 100%/full\r\n     *         - 0.5 is half volume or 50%\r\n     *\r\n     * @return {number|undefined}\r\n     *         The current volume as a percent when getting\r\n     */\r\n    volume(percentAsDecimal) {\r\n      let vol;\r\n      if (percentAsDecimal !== undefined) {\r\n        // Force value to between 0 and 1\r\n        vol = Math.max(0, Math.min(1, percentAsDecimal));\r\n        this.cache_.volume = vol;\r\n        this.techCall_('setVolume', vol);\r\n        if (vol > 0) {\r\n          this.lastVolume_(vol);\r\n        }\r\n        return;\r\n      }\r\n\r\n      // Default to 1 when returning current volume.\r\n      vol = parseFloat(this.techGet_('volume'));\r\n      return isNaN(vol) ? 1 : vol;\r\n    }\r\n\r\n    /**\r\n     * Get the current muted state, or turn mute on or off\r\n     *\r\n     * @param {boolean} [muted]\r\n     *        - true to mute\r\n     *        - false to unmute\r\n     *\r\n     * @return {boolean|undefined}\r\n     *         - true if mute is on and getting\r\n     *         - false if mute is off and getting\r\n     *         - nothing if setting\r\n     */\r\n    muted(muted) {\r\n      if (muted !== undefined) {\r\n        this.techCall_('setMuted', muted);\r\n        return;\r\n      }\r\n      return this.techGet_('muted') || false;\r\n    }\r\n\r\n    /**\r\n     * Get the current defaultMuted state, or turn defaultMuted on or off. defaultMuted\r\n     * indicates the state of muted on initial playback.\r\n     *\r\n     * ```js\r\n     *   var myPlayer = videojs('some-player-id');\r\n     *\r\n     *   myPlayer.src(\"http://www.example.com/path/to/video.mp4\");\r\n     *\r\n     *   // get, should be false\r\n     *   console.log(myPlayer.defaultMuted());\r\n     *   // set to true\r\n     *   myPlayer.defaultMuted(true);\r\n     *   // get should be true\r\n     *   console.log(myPlayer.defaultMuted());\r\n     * ```\r\n     *\r\n     * @param {boolean} [defaultMuted]\r\n     *        - true to mute\r\n     *        - false to unmute\r\n     *\r\n     * @return {boolean|undefined}\r\n     *         - true if defaultMuted is on and getting\r\n     *         - false if defaultMuted is off and getting\r\n     *         - Nothing when setting\r\n     */\r\n    defaultMuted(defaultMuted) {\r\n      if (defaultMuted !== undefined) {\r\n        this.techCall_('setDefaultMuted', defaultMuted);\r\n      }\r\n      return this.techGet_('defaultMuted') || false;\r\n    }\r\n\r\n    /**\r\n     * Get the last volume, or set it\r\n     *\r\n     * @param  {number} [percentAsDecimal]\r\n     *         The new last volume as a decimal percent:\r\n     *         - 0 is muted/0%/off\r\n     *         - 1.0 is 100%/full\r\n     *         - 0.5 is half volume or 50%\r\n     *\r\n     * @return {number|undefined}\r\n     *         - The current value of lastVolume as a percent when getting\r\n     *         - Nothing when setting\r\n     *\r\n     * @private\r\n     */\r\n    lastVolume_(percentAsDecimal) {\r\n      if (percentAsDecimal !== undefined && percentAsDecimal !== 0) {\r\n        this.cache_.lastVolume = percentAsDecimal;\r\n        return;\r\n      }\r\n      return this.cache_.lastVolume;\r\n    }\r\n\r\n    /**\r\n     * Check if current tech can support native fullscreen\r\n     * (e.g. with built in controls like iOS)\r\n     *\r\n     * @return {boolean}\r\n     *         if native fullscreen is supported\r\n     */\r\n    supportsFullScreen() {\r\n      return this.techGet_('supportsFullScreen') || false;\r\n    }\r\n\r\n    /**\r\n     * Check if the player is in fullscreen mode or tell the player that it\r\n     * is or is not in fullscreen mode.\r\n     *\r\n     * > NOTE: As of the latest HTML5 spec, isFullscreen is no longer an official\r\n     * property and instead document.fullscreenElement is used. But isFullscreen is\r\n     * still a valuable property for internal player workings.\r\n     *\r\n     * @param  {boolean} [isFS]\r\n     *         Set the players current fullscreen state\r\n     *\r\n     * @return {boolean|undefined}\r\n     *         - true if fullscreen is on and getting\r\n     *         - false if fullscreen is off and getting\r\n     *         - Nothing when setting\r\n     */\r\n    isFullscreen(isFS) {\r\n      if (isFS !== undefined) {\r\n        const oldValue = this.isFullscreen_;\r\n        this.isFullscreen_ = Boolean(isFS);\r\n\r\n        // if we changed fullscreen state and we're in prefixed mode, trigger fullscreenchange\r\n        // this is the only place where we trigger fullscreenchange events for older browsers\r\n        // fullWindow mode is treated as a prefixed event and will get a fullscreenchange event as well\r\n        if (this.isFullscreen_ !== oldValue && this.fsApi_.prefixed) {\r\n          /**\r\n             * @event Player#fullscreenchange\r\n             * @type {Event}\r\n             */\r\n          this.trigger('fullscreenchange');\r\n        }\r\n        this.toggleFullscreenClass_();\r\n        return;\r\n      }\r\n      return this.isFullscreen_;\r\n    }\r\n\r\n    /**\r\n     * Increase the size of the video to full screen\r\n     * In some browsers, full screen is not supported natively, so it enters\r\n     * \"full window mode\", where the video fills the browser window.\r\n     * In browsers and devices that support native full screen, sometimes the\r\n     * browser's default controls will be shown, and not the Video.js custom skin.\r\n     * This includes most mobile devices (iOS, Android) and older versions of\r\n     * Safari.\r\n     *\r\n     * @param  {Object} [fullscreenOptions]\r\n     *         Override the player fullscreen options\r\n     *\r\n     * @fires Player#fullscreenchange\r\n     */\r\n    requestFullscreen(fullscreenOptions) {\r\n      if (this.isInPictureInPicture()) {\r\n        this.exitPictureInPicture();\r\n      }\r\n      const self = this;\r\n      return new Promise((resolve, reject) => {\r\n        function offHandler() {\r\n          self.off('fullscreenerror', errorHandler);\r\n          self.off('fullscreenchange', changeHandler);\r\n        }\r\n        function changeHandler() {\r\n          offHandler();\r\n          resolve();\r\n        }\r\n        function errorHandler(e, err) {\r\n          offHandler();\r\n          reject(err);\r\n        }\r\n        self.one('fullscreenchange', changeHandler);\r\n        self.one('fullscreenerror', errorHandler);\r\n        const promise = self.requestFullscreenHelper_(fullscreenOptions);\r\n        if (promise) {\r\n          promise.then(offHandler, offHandler);\r\n          promise.then(resolve, reject);\r\n        }\r\n      });\r\n    }\r\n    requestFullscreenHelper_(fullscreenOptions) {\r\n      let fsOptions;\r\n\r\n      // Only pass fullscreen options to requestFullscreen in spec-compliant browsers.\r\n      // Use defaults or player configured option unless passed directly to this method.\r\n      if (!this.fsApi_.prefixed) {\r\n        fsOptions = this.options_.fullscreen && this.options_.fullscreen.options || {};\r\n        if (fullscreenOptions !== undefined) {\r\n          fsOptions = fullscreenOptions;\r\n        }\r\n      }\r\n\r\n      // This method works as follows:\r\n      // 1. if a fullscreen api is available, use it\r\n      //   1. call requestFullscreen with potential options\r\n      //   2. if we got a promise from above, use it to update isFullscreen()\r\n      // 2. otherwise, if the tech supports fullscreen, call `enterFullScreen` on it.\r\n      //   This is particularly used for iPhone, older iPads, and non-safari browser on iOS.\r\n      // 3. otherwise, use \"fullWindow\" mode\r\n      if (this.fsApi_.requestFullscreen) {\r\n        const promise = this.el_[this.fsApi_.requestFullscreen](fsOptions);\r\n\r\n        // Even on browsers with promise support this may not return a promise\r\n        if (promise) {\r\n          promise.then(() => this.isFullscreen(true), () => this.isFullscreen(false));\r\n        }\r\n        return promise;\r\n      } else if (this.tech_.supportsFullScreen() && !this.options_.preferFullWindow === true) {\r\n        // we can't take the video.js controls fullscreen but we can go fullscreen\r\n        // with native controls\r\n        this.techCall_('enterFullScreen');\r\n      } else {\r\n        // fullscreen isn't supported so we'll just stretch the video element to\r\n        // fill the viewport\r\n        this.enterFullWindow();\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Return the video to its normal size after having been in full screen mode\r\n     *\r\n     * @fires Player#fullscreenchange\r\n     */\r\n    exitFullscreen() {\r\n      const self = this;\r\n      return new Promise((resolve, reject) => {\r\n        function offHandler() {\r\n          self.off('fullscreenerror', errorHandler);\r\n          self.off('fullscreenchange', changeHandler);\r\n        }\r\n        function changeHandler() {\r\n          offHandler();\r\n          resolve();\r\n        }\r\n        function errorHandler(e, err) {\r\n          offHandler();\r\n          reject(err);\r\n        }\r\n        self.one('fullscreenchange', changeHandler);\r\n        self.one('fullscreenerror', errorHandler);\r\n        const promise = self.exitFullscreenHelper_();\r\n        if (promise) {\r\n          promise.then(offHandler, offHandler);\r\n          // map the promise to our resolve/reject methods\r\n          promise.then(resolve, reject);\r\n        }\r\n      });\r\n    }\r\n    exitFullscreenHelper_() {\r\n      if (this.fsApi_.requestFullscreen) {\r\n        const promise = document[this.fsApi_.exitFullscreen]();\r\n\r\n        // Even on browsers with promise support this may not return a promise\r\n        if (promise) {\r\n          // we're splitting the promise here, so, we want to catch the\r\n          // potential error so that this chain doesn't have unhandled errors\r\n          silencePromise(promise.then(() => this.isFullscreen(false)));\r\n        }\r\n        return promise;\r\n      } else if (this.tech_.supportsFullScreen() && !this.options_.preferFullWindow === true) {\r\n        this.techCall_('exitFullScreen');\r\n      } else {\r\n        this.exitFullWindow();\r\n      }\r\n    }\r\n\r\n    /**\r\n     * When fullscreen isn't supported we can stretch the\r\n     * video container to as wide as the browser will let us.\r\n     *\r\n     * @fires Player#enterFullWindow\r\n     */\r\n    enterFullWindow() {\r\n      this.isFullscreen(true);\r\n      this.isFullWindow = true;\r\n\r\n      // Storing original doc overflow value to return to when fullscreen is off\r\n      this.docOrigOverflow = document.documentElement.style.overflow;\r\n\r\n      // Add listener for esc key to exit fullscreen\r\n      on(document, 'keydown', this.boundFullWindowOnEscKey_);\r\n\r\n      // Hide any scroll bars\r\n      document.documentElement.style.overflow = 'hidden';\r\n\r\n      // Apply fullscreen styles\r\n      addClass(document.body, 'vjs-full-window');\r\n\r\n      /**\r\n       * @event Player#enterFullWindow\r\n       * @type {Event}\r\n       */\r\n      this.trigger('enterFullWindow');\r\n    }\r\n\r\n    /**\r\n     * Check for call to either exit full window or\r\n     * full screen on ESC key\r\n     *\r\n     * @param {string} event\r\n     *        Event to check for key press\r\n     */\r\n    fullWindowOnEscKey(event) {\r\n      if (event.key === 'Escape') {\r\n        if (this.isFullscreen() === true) {\r\n          if (!this.isFullWindow) {\r\n            this.exitFullscreen();\r\n          } else {\r\n            this.exitFullWindow();\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Exit full window\r\n     *\r\n     * @fires Player#exitFullWindow\r\n     */\r\n    exitFullWindow() {\r\n      this.isFullscreen(false);\r\n      this.isFullWindow = false;\r\n      off(document, 'keydown', this.boundFullWindowOnEscKey_);\r\n\r\n      // Unhide scroll bars.\r\n      document.documentElement.style.overflow = this.docOrigOverflow;\r\n\r\n      // Remove fullscreen styles\r\n      removeClass(document.body, 'vjs-full-window');\r\n\r\n      // Resize the box, controller, and poster to original sizes\r\n      // this.positionAll();\r\n      /**\r\n       * @event Player#exitFullWindow\r\n       * @type {Event}\r\n       */\r\n      this.trigger('exitFullWindow');\r\n    }\r\n\r\n    /**\r\n     * Get or set disable Picture-in-Picture mode.\r\n     *\r\n     * @param {boolean} [value]\r\n     *                  - true will disable Picture-in-Picture mode\r\n     *                  - false will enable Picture-in-Picture mode\r\n     */\r\n    disablePictureInPicture(value) {\r\n      if (value === undefined) {\r\n        return this.techGet_('disablePictureInPicture');\r\n      }\r\n      this.techCall_('setDisablePictureInPicture', value);\r\n      this.options_.disablePictureInPicture = value;\r\n      this.trigger('disablepictureinpicturechanged');\r\n    }\r\n\r\n    /**\r\n     * Check if the player is in Picture-in-Picture mode or tell the player that it\r\n     * is or is not in Picture-in-Picture mode.\r\n     *\r\n     * @param  {boolean} [isPiP]\r\n     *         Set the players current Picture-in-Picture state\r\n     *\r\n     * @return {boolean|undefined}\r\n     *         - true if Picture-in-Picture is on and getting\r\n     *         - false if Picture-in-Picture is off and getting\r\n     *         - nothing if setting\r\n     */\r\n    isInPictureInPicture(isPiP) {\r\n      if (isPiP !== undefined) {\r\n        this.isInPictureInPicture_ = !!isPiP;\r\n        this.togglePictureInPictureClass_();\r\n        return;\r\n      }\r\n      return !!this.isInPictureInPicture_;\r\n    }\r\n\r\n    /**\r\n     * Create a floating video window always on top of other windows so that users may\r\n     * continue consuming media while they interact with other content sites, or\r\n     * applications on their device.\r\n     *\r\n     * This can use document picture-in-picture or element picture in picture\r\n     *\r\n     * Set `enableDocumentPictureInPicture` to `true` to use docPiP on a supported browser\r\n     * Else set `disablePictureInPicture` to `false` to disable elPiP on a supported browser\r\n     *\r\n     *\r\n     * @see [Spec]{@link https://w3c.github.io/picture-in-picture/}\r\n     * @see [Spec]{@link https://wicg.github.io/document-picture-in-picture/}\r\n     *\r\n     * @fires Player#enterpictureinpicture\r\n     *\r\n     * @return {Promise}\r\n     *         A promise with a Picture-in-Picture window.\r\n     */\r\n    requestPictureInPicture() {\r\n      if (this.options_.enableDocumentPictureInPicture && window.documentPictureInPicture) {\r\n        const pipContainer = document.createElement(this.el().tagName);\r\n        pipContainer.classList = this.el().classList;\r\n        pipContainer.classList.add('vjs-pip-container');\r\n        if (this.posterImage) {\r\n          pipContainer.appendChild(this.posterImage.el().cloneNode(true));\r\n        }\r\n        if (this.titleBar) {\r\n          pipContainer.appendChild(this.titleBar.el().cloneNode(true));\r\n        }\r\n        pipContainer.appendChild(createEl('p', {\r\n          className: 'vjs-pip-text'\r\n        }, {}, this.localize('Playing in picture-in-picture')));\r\n        return window.documentPictureInPicture.requestWindow({\r\n          // The aspect ratio won't be correct, Chrome bug https://crbug.com/1407629\r\n          width: this.videoWidth(),\r\n          height: this.videoHeight()\r\n        }).then(pipWindow => {\r\n          copyStyleSheetsToWindow(pipWindow);\r\n          this.el_.parentNode.insertBefore(pipContainer, this.el_);\r\n          pipWindow.document.body.appendChild(this.el_);\r\n          pipWindow.document.body.classList.add('vjs-pip-window');\r\n          this.player_.isInPictureInPicture(true);\r\n          this.player_.trigger({\r\n            type: 'enterpictureinpicture',\r\n            pipWindow\r\n          });\r\n\r\n          // Listen for the PiP closing event to move the video back.\r\n          pipWindow.addEventListener('pagehide', event => {\r\n            const pipVideo = event.target.querySelector('.video-js');\r\n            pipContainer.parentNode.replaceChild(pipVideo, pipContainer);\r\n            this.player_.isInPictureInPicture(false);\r\n            this.player_.trigger('leavepictureinpicture');\r\n          });\r\n          return pipWindow;\r\n        });\r\n      }\r\n      if ('pictureInPictureEnabled' in document && this.disablePictureInPicture() === false) {\r\n        /**\r\n         * This event fires when the player enters picture in picture mode\r\n         *\r\n         * @event Player#enterpictureinpicture\r\n         * @type {Event}\r\n         */\r\n        return this.techGet_('requestPictureInPicture');\r\n      }\r\n      return Promise.reject('No PiP mode is available');\r\n    }\r\n\r\n    /**\r\n     * Exit Picture-in-Picture mode.\r\n     *\r\n     * @see [Spec]{@link https://wicg.github.io/picture-in-picture}\r\n     *\r\n     * @fires Player#leavepictureinpicture\r\n     *\r\n     * @return {Promise}\r\n     *         A promise.\r\n     */\r\n    exitPictureInPicture() {\r\n      if (window.documentPictureInPicture && window.documentPictureInPicture.window) {\r\n        // With documentPictureInPicture, Player#leavepictureinpicture is fired in the pagehide handler\r\n        window.documentPictureInPicture.window.close();\r\n        return Promise.resolve();\r\n      }\r\n      if ('pictureInPictureEnabled' in document) {\r\n        /**\r\n         * This event fires when the player leaves picture in picture mode\r\n         *\r\n         * @event Player#leavepictureinpicture\r\n         * @type {Event}\r\n         */\r\n        return document.exitPictureInPicture();\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Called when this Player has focus and a key gets pressed down, or when\r\n     * any Component of this player receives a key press that it doesn't handle.\r\n     * This allows player-wide hotkeys (either as defined below, or optionally\r\n     * by an external function).\r\n     *\r\n     * @param {KeyboardEvent} event\r\n     *        The `keydown` event that caused this function to be called.\r\n     *\r\n     * @listens keydown\r\n     */\r\n    handleKeyDown(event) {\r\n      const {\r\n        userActions\r\n      } = this.options_;\r\n\r\n      // Bail out if hotkeys are not configured.\r\n      if (!userActions || !userActions.hotkeys) {\r\n        return;\r\n      }\r\n\r\n      // Function that determines whether or not to exclude an element from\r\n      // hotkeys handling.\r\n      const excludeElement = el => {\r\n        const tagName = el.tagName.toLowerCase();\r\n\r\n        // The first and easiest test is for `contenteditable` elements.\r\n        if (el.isContentEditable) {\r\n          return true;\r\n        }\r\n\r\n        // Inputs matching these types will still trigger hotkey handling as\r\n        // they are not text inputs.\r\n        const allowedInputTypes = ['button', 'checkbox', 'hidden', 'radio', 'reset', 'submit'];\r\n        if (tagName === 'input') {\r\n          return allowedInputTypes.indexOf(el.type) === -1;\r\n        }\r\n\r\n        // The final test is by tag name. These tags will be excluded entirely.\r\n        const excludedTags = ['textarea'];\r\n        return excludedTags.indexOf(tagName) !== -1;\r\n      };\r\n\r\n      // Bail out if the user is focused on an interactive form element.\r\n      if (excludeElement(this.el_.ownerDocument.activeElement)) {\r\n        return;\r\n      }\r\n      if (typeof userActions.hotkeys === 'function') {\r\n        userActions.hotkeys.call(this, event);\r\n      } else {\r\n        this.handleHotkeys(event);\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Called when this Player receives a hotkey keydown event.\r\n     * Supported player-wide hotkeys are:\r\n     *\r\n     *   f          - toggle fullscreen\r\n     *   m          - toggle mute\r\n     *   k or Space - toggle play/pause\r\n     *\r\n     * @param {Event} event\r\n     *        The `keydown` event that caused this function to be called.\r\n     */\r\n    handleHotkeys(event) {\r\n      const hotkeys = this.options_.userActions ? this.options_.userActions.hotkeys : {};\r\n\r\n      // set fullscreenKey, muteKey, playPauseKey from `hotkeys`, use defaults if not set\r\n      const {\r\n        fullscreenKey = keydownEvent => event.key.toLowerCase() === 'f',\r\n        muteKey = keydownEvent => event.key.toLowerCase() === 'm',\r\n        playPauseKey = keydownEvent => event.key.toLowerCase() === 'k' || event.key.toLowerCase() === ' '\r\n      } = hotkeys;\r\n      if (fullscreenKey.call(this, event)) {\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n        const FSToggle = Component$1.getComponent('FullscreenToggle');\r\n        if (document[this.fsApi_.fullscreenEnabled] !== false) {\r\n          FSToggle.prototype.handleClick.call(this, event);\r\n        }\r\n      } else if (muteKey.call(this, event)) {\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n        const MuteToggle = Component$1.getComponent('MuteToggle');\r\n        MuteToggle.prototype.handleClick.call(this, event);\r\n      } else if (playPauseKey.call(this, event)) {\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n        const PlayToggle = Component$1.getComponent('PlayToggle');\r\n        PlayToggle.prototype.handleClick.call(this, event);\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Check whether the player can play a given mimetype\r\n     *\r\n     * @see https://www.w3.org/TR/2011/WD-html5-20110113/video.html#dom-navigator-canplaytype\r\n     *\r\n     * @param {string} type\r\n     *        The mimetype to check\r\n     *\r\n     * @return {string}\r\n     *         'probably', 'maybe', or '' (empty string)\r\n     */\r\n    canPlayType(type) {\r\n      let can;\r\n\r\n      // Loop through each playback technology in the options order\r\n      for (let i = 0, j = this.options_.techOrder; i < j.length; i++) {\r\n        const techName = j[i];\r\n        let tech = Tech.getTech(techName);\r\n\r\n        // Support old behavior of techs being registered as components.\r\n        // Remove once that deprecated behavior is removed.\r\n        if (!tech) {\r\n          tech = Component$1.getComponent(techName);\r\n        }\r\n\r\n        // Check if the current tech is defined before continuing\r\n        if (!tech) {\r\n          log$1.error(`The \"${techName}\" tech is undefined. Skipped browser support check for that tech.`);\r\n          continue;\r\n        }\r\n\r\n        // Check if the browser supports this technology\r\n        if (tech.isSupported()) {\r\n          can = tech.canPlayType(type);\r\n          if (can) {\r\n            return can;\r\n          }\r\n        }\r\n      }\r\n      return '';\r\n    }\r\n\r\n    /**\r\n     * Select source based on tech-order or source-order\r\n     * Uses source-order selection if `options.sourceOrder` is truthy. Otherwise,\r\n     * defaults to tech-order selection\r\n     *\r\n     * @param {Array} sources\r\n     *        The sources for a media asset\r\n     *\r\n     * @return {Object|boolean}\r\n     *         Object of source and tech order or false\r\n     */\r\n    selectSource(sources) {\r\n      // Get only the techs specified in `techOrder` that exist and are supported by the\r\n      // current platform\r\n      const techs = this.options_.techOrder.map(techName => {\r\n        return [techName, Tech.getTech(techName)];\r\n      }).filter(([techName, tech]) => {\r\n        // Check if the current tech is defined before continuing\r\n        if (tech) {\r\n          // Check if the browser supports this technology\r\n          return tech.isSupported();\r\n        }\r\n        log$1.error(`The \"${techName}\" tech is undefined. Skipped browser support check for that tech.`);\r\n        return false;\r\n      });\r\n\r\n      // Iterate over each `innerArray` element once per `outerArray` element and execute\r\n      // `tester` with both. If `tester` returns a non-falsy value, exit early and return\r\n      // that value.\r\n      const findFirstPassingTechSourcePair = function (outerArray, innerArray, tester) {\r\n        let found;\r\n        outerArray.some(outerChoice => {\r\n          return innerArray.some(innerChoice => {\r\n            found = tester(outerChoice, innerChoice);\r\n            if (found) {\r\n              return true;\r\n            }\r\n          });\r\n        });\r\n        return found;\r\n      };\r\n      let foundSourceAndTech;\r\n      const flip = fn => (a, b) => fn(b, a);\r\n      const finder = ([techName, tech], source) => {\r\n        if (tech.canPlaySource(source, this.options_[techName.toLowerCase()])) {\r\n          return {\r\n            source,\r\n            tech: techName\r\n          };\r\n        }\r\n      };\r\n\r\n      // Depending on the truthiness of `options.sourceOrder`, we swap the order of techs and sources\r\n      // to select from them based on their priority.\r\n      if (this.options_.sourceOrder) {\r\n        // Source-first ordering\r\n        foundSourceAndTech = findFirstPassingTechSourcePair(sources, techs, flip(finder));\r\n      } else {\r\n        // Tech-first ordering\r\n        foundSourceAndTech = findFirstPassingTechSourcePair(techs, sources, finder);\r\n      }\r\n      return foundSourceAndTech || false;\r\n    }\r\n\r\n    /**\r\n     * Executes source setting and getting logic\r\n     *\r\n     * @param {Tech~SourceObject|Tech~SourceObject[]|string} [source]\r\n     *        A SourceObject, an array of SourceObjects, or a string referencing\r\n     *        a URL to a media source. It is _highly recommended_ that an object\r\n     *        or array of objects is used here, so that source selection\r\n     *        algorithms can take the `type` into account.\r\n     *\r\n     *        If not provided, this method acts as a getter.\r\n     * @param {boolean} [isRetry]\r\n     *        Indicates whether this is being called internally as a result of a retry\r\n     *\r\n     * @return {string|undefined}\r\n     *         If the `source` argument is missing, returns the current source\r\n     *         URL. Otherwise, returns nothing/undefined.\r\n     */\r\n    handleSrc_(source, isRetry) {\r\n      // getter usage\r\n      if (typeof source === 'undefined') {\r\n        return this.cache_.src || '';\r\n      }\r\n\r\n      // Reset retry behavior for new source\r\n      if (this.resetRetryOnError_) {\r\n        this.resetRetryOnError_();\r\n      }\r\n\r\n      // filter out invalid sources and turn our source into\r\n      // an array of source objects\r\n      const sources = filterSource(source);\r\n\r\n      // if a source was passed in then it is invalid because\r\n      // it was filtered to a zero length Array. So we have to\r\n      // show an error\r\n      if (!sources.length) {\r\n        this.setTimeout(function () {\r\n          this.error({\r\n            code: 4,\r\n            message: this.options_.notSupportedMessage\r\n          });\r\n        }, 0);\r\n        return;\r\n      }\r\n\r\n      // initial sources\r\n      this.changingSrc_ = true;\r\n\r\n      // Only update the cached source list if we are not retrying a new source after error,\r\n      // since in that case we want to include the failed source(s) in the cache\r\n      if (!isRetry) {\r\n        this.cache_.sources = sources;\r\n      }\r\n      this.updateSourceCaches_(sources[0]);\r\n\r\n      // middlewareSource is the source after it has been changed by middleware\r\n      setSource(this, sources[0], (middlewareSource, mws) => {\r\n        this.middleware_ = mws;\r\n\r\n        // since sourceSet is async we have to update the cache again after we select a source since\r\n        // the source that is selected could be out of order from the cache update above this callback.\r\n        if (!isRetry) {\r\n          this.cache_.sources = sources;\r\n        }\r\n        this.updateSourceCaches_(middlewareSource);\r\n        const err = this.src_(middlewareSource);\r\n        if (err) {\r\n          if (sources.length > 1) {\r\n            return this.handleSrc_(sources.slice(1));\r\n          }\r\n          this.changingSrc_ = false;\r\n\r\n          // We need to wrap this in a timeout to give folks a chance to add error event handlers\r\n          this.setTimeout(function () {\r\n            this.error({\r\n              code: 4,\r\n              message: this.options_.notSupportedMessage\r\n            });\r\n          }, 0);\r\n\r\n          // we could not find an appropriate tech, but let's still notify the delegate that this is it\r\n          // this needs a better comment about why this is needed\r\n          this.triggerReady();\r\n          return;\r\n        }\r\n        setTech(mws, this.tech_);\r\n      });\r\n\r\n      // Try another available source if this one fails before playback.\r\n      if (sources.length > 1) {\r\n        const retry = () => {\r\n          // Remove the error modal\r\n          this.error(null);\r\n          this.handleSrc_(sources.slice(1), true);\r\n        };\r\n        const stopListeningForErrors = () => {\r\n          this.off('error', retry);\r\n        };\r\n        this.one('error', retry);\r\n        this.one('playing', stopListeningForErrors);\r\n        this.resetRetryOnError_ = () => {\r\n          this.off('error', retry);\r\n          this.off('playing', stopListeningForErrors);\r\n        };\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Get or set the video source.\r\n     *\r\n     * @param {Tech~SourceObject|Tech~SourceObject[]|string} [source]\r\n     *        A SourceObject, an array of SourceObjects, or a string referencing\r\n     *        a URL to a media source. It is _highly recommended_ that an object\r\n     *        or array of objects is used here, so that source selection\r\n     *        algorithms can take the `type` into account.\r\n     *\r\n     *        If not provided, this method acts as a getter.\r\n     *\r\n     * @return {string|undefined}\r\n     *         If the `source` argument is missing, returns the current source\r\n     *         URL. Otherwise, returns nothing/undefined.\r\n     */\r\n    src(source) {\r\n      return this.handleSrc_(source, false);\r\n    }\r\n\r\n    /**\r\n     * Set the source object on the tech, returns a boolean that indicates whether\r\n     * there is a tech that can play the source or not\r\n     *\r\n     * @param {Tech~SourceObject} source\r\n     *        The source object to set on the Tech\r\n     *\r\n     * @return {boolean}\r\n     *         - True if there is no Tech to playback this source\r\n     *         - False otherwise\r\n     *\r\n     * @private\r\n     */\r\n    src_(source) {\r\n      const sourceTech = this.selectSource([source]);\r\n      if (!sourceTech) {\r\n        return true;\r\n      }\r\n      if (!titleCaseEquals(sourceTech.tech, this.techName_)) {\r\n        this.changingSrc_ = true;\r\n        // load this technology with the chosen source\r\n        this.loadTech_(sourceTech.tech, sourceTech.source);\r\n        this.tech_.ready(() => {\r\n          this.changingSrc_ = false;\r\n        });\r\n        return false;\r\n      }\r\n\r\n      // wait until the tech is ready to set the source\r\n      // and set it synchronously if possible (#2326)\r\n      this.ready(function () {\r\n        // The setSource tech method was added with source handlers\r\n        // so older techs won't support it\r\n        // We need to check the direct prototype for the case where subclasses\r\n        // of the tech do not support source handlers\r\n        if (this.tech_.constructor.prototype.hasOwnProperty('setSource')) {\r\n          this.techCall_('setSource', source);\r\n        } else {\r\n          this.techCall_('src', source.src);\r\n        }\r\n        this.changingSrc_ = false;\r\n      }, true);\r\n      return false;\r\n    }\r\n\r\n    /**\r\n     * Add a <source> element to the <video> element.\r\n     *\r\n     * @param {string} srcUrl\r\n     *        The URL of the video source.\r\n     *\r\n     * @param {string} [mimeType]\r\n     *        The MIME type of the video source. Optional but recommended.\r\n     *\r\n     * @return {boolean}\r\n     *         Returns true if the source element was successfully added, false otherwise.\r\n     */\r\n    addSourceElement(srcUrl, mimeType) {\r\n      if (!this.tech_) {\r\n        return false;\r\n      }\r\n      return this.tech_.addSourceElement(srcUrl, mimeType);\r\n    }\r\n\r\n    /**\r\n     * Remove a <source> element from the <video> element by its URL.\r\n     *\r\n     * @param {string} srcUrl\r\n     *        The URL of the source to remove.\r\n     *\r\n     * @return {boolean}\r\n     *         Returns true if the source element was successfully removed, false otherwise.\r\n     */\r\n    removeSourceElement(srcUrl) {\r\n      if (!this.tech_) {\r\n        return false;\r\n      }\r\n      return this.tech_.removeSourceElement(srcUrl);\r\n    }\r\n\r\n    /**\r\n     * Begin loading the src data.\r\n     */\r\n    load() {\r\n      // Workaround to use the load method with the VHS.\r\n      // Does not cover the case when the load method is called directly from the mediaElement.\r\n      if (this.tech_ && this.tech_.vhs) {\r\n        this.src(this.currentSource());\r\n        return;\r\n      }\r\n      this.techCall_('load');\r\n    }\r\n\r\n    /**\r\n     * Reset the player. Loads the first tech in the techOrder,\r\n     * removes all the text tracks in the existing `tech`,\r\n     * and calls `reset` on the `tech`.\r\n     */\r\n    reset() {\r\n      if (this.paused()) {\r\n        this.doReset_();\r\n      } else {\r\n        const playPromise = this.play();\r\n        silencePromise(playPromise.then(() => this.doReset_()));\r\n      }\r\n    }\r\n    doReset_() {\r\n      if (this.tech_) {\r\n        this.tech_.clearTracks('text');\r\n      }\r\n      this.removeClass('vjs-playing');\r\n      this.addClass('vjs-paused');\r\n      this.resetCache_();\r\n      this.poster('');\r\n      this.loadTech_(this.options_.techOrder[0], null);\r\n      this.techCall_('reset');\r\n      this.resetControlBarUI_();\r\n      this.error(null);\r\n      if (this.titleBar) {\r\n        this.titleBar.update({\r\n          title: undefined,\r\n          description: undefined\r\n        });\r\n      }\r\n      if (isEvented(this)) {\r\n        this.trigger('playerreset');\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Reset Control Bar's UI by calling sub-methods that reset\r\n     * all of Control Bar's components\r\n     */\r\n    resetControlBarUI_() {\r\n      this.resetProgressBar_();\r\n      this.resetPlaybackRate_();\r\n      this.resetVolumeBar_();\r\n    }\r\n\r\n    /**\r\n     * Reset tech's progress so progress bar is reset in the UI\r\n     */\r\n    resetProgressBar_() {\r\n      this.currentTime(0);\r\n      const {\r\n        currentTimeDisplay,\r\n        durationDisplay,\r\n        progressControl,\r\n        remainingTimeDisplay\r\n      } = this.controlBar || {};\r\n      const {\r\n        seekBar\r\n      } = progressControl || {};\r\n      if (currentTimeDisplay) {\r\n        currentTimeDisplay.updateContent();\r\n      }\r\n      if (durationDisplay) {\r\n        durationDisplay.updateContent();\r\n      }\r\n      if (remainingTimeDisplay) {\r\n        remainingTimeDisplay.updateContent();\r\n      }\r\n      if (seekBar) {\r\n        seekBar.update();\r\n        if (seekBar.loadProgressBar) {\r\n          seekBar.loadProgressBar.update();\r\n        }\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Reset Playback ratio\r\n     */\r\n    resetPlaybackRate_() {\r\n      this.playbackRate(this.defaultPlaybackRate());\r\n      this.handleTechRateChange_();\r\n    }\r\n\r\n    /**\r\n     * Reset Volume bar\r\n     */\r\n    resetVolumeBar_() {\r\n      this.volume(1.0);\r\n      this.trigger('volumechange');\r\n    }\r\n\r\n    /**\r\n     * Returns all of the current source objects.\r\n     *\r\n     * @return {Tech~SourceObject[]}\r\n     *         The current source objects\r\n     */\r\n    currentSources() {\r\n      const source = this.currentSource();\r\n      const sources = [];\r\n\r\n      // assume `{}` or `{ src }`\r\n      if (Object.keys(source).length !== 0) {\r\n        sources.push(source);\r\n      }\r\n      return this.cache_.sources || sources;\r\n    }\r\n\r\n    /**\r\n     * Returns the current source object.\r\n     *\r\n     * @return {Tech~SourceObject}\r\n     *         The current source object\r\n     */\r\n    currentSource() {\r\n      return this.cache_.source || {};\r\n    }\r\n\r\n    /**\r\n     * Returns the fully qualified URL of the current source value e.g. http://mysite.com/video.mp4\r\n     * Can be used in conjunction with `currentType` to assist in rebuilding the current source object.\r\n     *\r\n     * @return {string}\r\n     *         The current source\r\n     */\r\n    currentSrc() {\r\n      return this.currentSource() && this.currentSource().src || '';\r\n    }\r\n\r\n    /**\r\n     * Get the current source type e.g. video/mp4\r\n     * This can allow you rebuild the current source object so that you could load the same\r\n     * source and tech later\r\n     *\r\n     * @return {string}\r\n     *         The source MIME type\r\n     */\r\n    currentType() {\r\n      return this.currentSource() && this.currentSource().type || '';\r\n    }\r\n\r\n    /**\r\n     * Get or set the preload attribute\r\n     *\r\n     * @param {'none'|'auto'|'metadata'} [value]\r\n     *        Preload mode to pass to tech\r\n     *\r\n     * @return {string|undefined}\r\n     *         - The preload attribute value when getting\r\n     *         - Nothing when setting\r\n     */\r\n    preload(value) {\r\n      if (value !== undefined) {\r\n        this.techCall_('setPreload', value);\r\n        this.options_.preload = value;\r\n        return;\r\n      }\r\n      return this.techGet_('preload');\r\n    }\r\n\r\n    /**\r\n     * Get or set the autoplay option. When this is a boolean it will\r\n     * modify the attribute on the tech. When this is a string the attribute on\r\n     * the tech will be removed and `Player` will handle autoplay on loadstarts.\r\n     *\r\n     * @param {boolean|'play'|'muted'|'any'} [value]\r\n     *        - true: autoplay using the browser behavior\r\n     *        - false: do not autoplay\r\n     *        - 'play': call play() on every loadstart\r\n     *        - 'muted': call muted() then play() on every loadstart\r\n     *        - 'any': call play() on every loadstart. if that fails call muted() then play().\r\n     *        - *: values other than those listed here will be set `autoplay` to true\r\n     *\r\n     * @return {boolean|string|undefined}\r\n     *         - The current value of autoplay when getting\r\n     *         - Nothing when setting\r\n     */\r\n    autoplay(value) {\r\n      // getter usage\r\n      if (value === undefined) {\r\n        return this.options_.autoplay || false;\r\n      }\r\n      let techAutoplay;\r\n\r\n      // if the value is a valid string set it to that, or normalize `true` to 'play', if need be\r\n      if (typeof value === 'string' && /(any|play|muted)/.test(value) || value === true && this.options_.normalizeAutoplay) {\r\n        this.options_.autoplay = value;\r\n        this.manualAutoplay_(typeof value === 'string' ? value : 'play');\r\n        techAutoplay = false;\r\n\r\n        // any falsy value sets autoplay to false in the browser,\r\n        // lets do the same\r\n      } else if (!value) {\r\n        this.options_.autoplay = false;\r\n\r\n        // any other value (ie truthy) sets autoplay to true\r\n      } else {\r\n        this.options_.autoplay = true;\r\n      }\r\n      techAutoplay = typeof techAutoplay === 'undefined' ? this.options_.autoplay : techAutoplay;\r\n\r\n      // if we don't have a tech then we do not queue up\r\n      // a setAutoplay call on tech ready. We do this because the\r\n      // autoplay option will be passed in the constructor and we\r\n      // do not need to set it twice\r\n      if (this.tech_) {\r\n        this.techCall_('setAutoplay', techAutoplay);\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Set or unset the playsinline attribute.\r\n     * Playsinline tells the browser that non-fullscreen playback is preferred.\r\n     *\r\n     * @param {boolean} [value]\r\n     *        - true means that we should try to play inline by default\r\n     *        - false means that we should use the browser's default playback mode,\r\n     *          which in most cases is inline. iOS Safari is a notable exception\r\n     *          and plays fullscreen by default.\r\n     *\r\n     * @return {string|undefined}\r\n     *         - the current value of playsinline\r\n     *         - Nothing when setting\r\n     *\r\n     * @see [Spec]{@link https://html.spec.whatwg.org/#attr-video-playsinline}\r\n     */\r\n    playsinline(value) {\r\n      if (value !== undefined) {\r\n        this.techCall_('setPlaysinline', value);\r\n        this.options_.playsinline = value;\r\n      }\r\n      return this.techGet_('playsinline');\r\n    }\r\n\r\n    /**\r\n     * Get or set the loop attribute on the video element.\r\n     *\r\n     * @param {boolean} [value]\r\n     *        - true means that we should loop the video\r\n     *        - false means that we should not loop the video\r\n     *\r\n     * @return {boolean|undefined}\r\n     *         - The current value of loop when getting\r\n     *         - Nothing when setting\r\n     */\r\n    loop(value) {\r\n      if (value !== undefined) {\r\n        this.techCall_('setLoop', value);\r\n        this.options_.loop = value;\r\n        return;\r\n      }\r\n      return this.techGet_('loop');\r\n    }\r\n\r\n    /**\r\n     * Get or set the poster image source url\r\n     *\r\n     * @fires Player#posterchange\r\n     *\r\n     * @param {string} [src]\r\n     *        Poster image source URL\r\n     *\r\n     * @return {string|undefined}\r\n     *         - The current value of poster when getting\r\n     *         - Nothing when setting\r\n     */\r\n    poster(src) {\r\n      if (src === undefined) {\r\n        return this.poster_;\r\n      }\r\n\r\n      // The correct way to remove a poster is to set as an empty string\r\n      // other falsey values will throw errors\r\n      if (!src) {\r\n        src = '';\r\n      }\r\n      if (src === this.poster_) {\r\n        return;\r\n      }\r\n\r\n      // update the internal poster variable\r\n      this.poster_ = src;\r\n\r\n      // update the tech's poster\r\n      this.techCall_('setPoster', src);\r\n      this.isPosterFromTech_ = false;\r\n\r\n      // alert components that the poster has been set\r\n      /**\r\n       * This event fires when the poster image is changed on the player.\r\n       *\r\n       * @event Player#posterchange\r\n       * @type {Event}\r\n       */\r\n      this.trigger('posterchange');\r\n    }\r\n\r\n    /**\r\n     * Some techs (e.g. YouTube) can provide a poster source in an\r\n     * asynchronous way. We want the poster component to use this\r\n     * poster source so that it covers up the tech's controls.\r\n     * (YouTube's play button). However we only want to use this\r\n     * source if the player user hasn't set a poster through\r\n     * the normal APIs.\r\n     *\r\n     * @fires Player#posterchange\r\n     * @listens Tech#posterchange\r\n     * @private\r\n     */\r\n    handleTechPosterChange_() {\r\n      if ((!this.poster_ || this.options_.techCanOverridePoster) && this.tech_ && this.tech_.poster) {\r\n        const newPoster = this.tech_.poster() || '';\r\n        if (newPoster !== this.poster_) {\r\n          this.poster_ = newPoster;\r\n          this.isPosterFromTech_ = true;\r\n\r\n          // Let components know the poster has changed\r\n          this.trigger('posterchange');\r\n        }\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Get or set whether or not the controls are showing.\r\n     *\r\n     * @fires Player#controlsenabled\r\n     *\r\n     * @param {boolean} [bool]\r\n     *        - true to turn controls on\r\n     *        - false to turn controls off\r\n     *\r\n     * @return {boolean|undefined}\r\n     *         - The current value of controls when getting\r\n     *         - Nothing when setting\r\n     */\r\n    controls(bool) {\r\n      if (bool === undefined) {\r\n        return !!this.controls_;\r\n      }\r\n      bool = !!bool;\r\n\r\n      // Don't trigger a change event unless it actually changed\r\n      if (this.controls_ === bool) {\r\n        return;\r\n      }\r\n      this.controls_ = bool;\r\n      if (this.usingNativeControls()) {\r\n        this.techCall_('setControls', bool);\r\n      }\r\n      if (this.controls_) {\r\n        this.removeClass('vjs-controls-disabled');\r\n        this.addClass('vjs-controls-enabled');\r\n        /**\r\n         * @event Player#controlsenabled\r\n         * @type {Event}\r\n         */\r\n        this.trigger('controlsenabled');\r\n        if (!this.usingNativeControls()) {\r\n          this.addTechControlsListeners_();\r\n        }\r\n      } else {\r\n        this.removeClass('vjs-controls-enabled');\r\n        this.addClass('vjs-controls-disabled');\r\n        /**\r\n         * @event Player#controlsdisabled\r\n         * @type {Event}\r\n         */\r\n        this.trigger('controlsdisabled');\r\n        if (!this.usingNativeControls()) {\r\n          this.removeTechControlsListeners_();\r\n        }\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Toggle native controls on/off. Native controls are the controls built into\r\n     * devices (e.g. default iPhone controls) or other techs\r\n     * (e.g. Vimeo Controls)\r\n     * **This should only be set by the current tech, because only the tech knows\r\n     * if it can support native controls**\r\n     *\r\n     * @fires Player#usingnativecontrols\r\n     * @fires Player#usingcustomcontrols\r\n     *\r\n     * @param {boolean} [bool]\r\n     *        - true to turn native controls on\r\n     *        - false to turn native controls off\r\n     *\r\n     * @return {boolean|undefined}\r\n     *         - The current value of native controls when getting\r\n     *         - Nothing when setting\r\n     */\r\n    usingNativeControls(bool) {\r\n      if (bool === undefined) {\r\n        return !!this.usingNativeControls_;\r\n      }\r\n      bool = !!bool;\r\n\r\n      // Don't trigger a change event unless it actually changed\r\n      if (this.usingNativeControls_ === bool) {\r\n        return;\r\n      }\r\n      this.usingNativeControls_ = bool;\r\n      if (this.usingNativeControls_) {\r\n        this.addClass('vjs-using-native-controls');\r\n\r\n        /**\r\n         * player is using the native device controls\r\n         *\r\n         * @event Player#usingnativecontrols\r\n         * @type {Event}\r\n         */\r\n        this.trigger('usingnativecontrols');\r\n      } else {\r\n        this.removeClass('vjs-using-native-controls');\r\n\r\n        /**\r\n         * player is using the custom HTML controls\r\n         *\r\n         * @event Player#usingcustomcontrols\r\n         * @type {Event}\r\n         */\r\n        this.trigger('usingcustomcontrols');\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Set or get the current MediaError\r\n     *\r\n     * @fires Player#error\r\n     *\r\n     * @param  {MediaError|string|number} [err]\r\n     *         A MediaError or a string/number to be turned\r\n     *         into a MediaError\r\n     *\r\n     * @return {MediaError|null|undefined}\r\n     *         - The current MediaError when getting (or null)\r\n     *         - Nothing when setting\r\n     */\r\n    error(err) {\r\n      if (err === undefined) {\r\n        return this.error_ || null;\r\n      }\r\n\r\n      // allow hooks to modify error object\r\n      hooks('beforeerror').forEach(hookFunction => {\r\n        const newErr = hookFunction(this, err);\r\n        if (!(isObject$1(newErr) && !Array.isArray(newErr) || typeof newErr === 'string' || typeof newErr === 'number' || newErr === null)) {\r\n          this.log.error('please return a value that MediaError expects in beforeerror hooks');\r\n          return;\r\n        }\r\n        err = newErr;\r\n      });\r\n\r\n      // Suppress the first error message for no compatible source until\r\n      // user interaction\r\n      if (this.options_.suppressNotSupportedError && err && err.code === 4) {\r\n        const triggerSuppressedError = function () {\r\n          this.error(err);\r\n        };\r\n        this.options_.suppressNotSupportedError = false;\r\n        this.any(['click', 'touchstart'], triggerSuppressedError);\r\n        this.one('loadstart', function () {\r\n          this.off(['click', 'touchstart'], triggerSuppressedError);\r\n        });\r\n        return;\r\n      }\r\n\r\n      // restoring to default\r\n      if (err === null) {\r\n        this.error_ = null;\r\n        this.removeClass('vjs-error');\r\n        if (this.errorDisplay) {\r\n          this.errorDisplay.close();\r\n        }\r\n        return;\r\n      }\r\n      this.error_ = new MediaError(err);\r\n\r\n      // add the vjs-error classname to the player\r\n      this.addClass('vjs-error');\r\n\r\n      // log the name of the error type and any message\r\n      // IE11 logs \"[object object]\" and required you to expand message to see error object\r\n      log$1.error(`(CODE:${this.error_.code} ${MediaError.errorTypes[this.error_.code]})`, this.error_.message, this.error_);\r\n\r\n      /**\r\n       * @event Player#error\r\n       * @type {Event}\r\n       */\r\n      this.trigger('error');\r\n\r\n      // notify hooks of the per player error\r\n      hooks('error').forEach(hookFunction => hookFunction(this, this.error_));\r\n      return;\r\n    }\r\n\r\n    /**\r\n     * Report user activity\r\n     *\r\n     * @param {Object} event\r\n     *        Event object\r\n     */\r\n    reportUserActivity(event) {\r\n      this.userActivity_ = true;\r\n    }\r\n\r\n    /**\r\n     * Get/set if user is active\r\n     *\r\n     * @fires Player#useractive\r\n     * @fires Player#userinactive\r\n     *\r\n     * @param {boolean} [bool]\r\n     *        - true if the user is active\r\n     *        - false if the user is inactive\r\n     *\r\n     * @return {boolean|undefined}\r\n     *         - The current value of userActive when getting\r\n     *         - Nothing when setting\r\n     */\r\n    userActive(bool) {\r\n      if (bool === undefined) {\r\n        return this.userActive_;\r\n      }\r\n      bool = !!bool;\r\n      if (bool === this.userActive_) {\r\n        return;\r\n      }\r\n      this.userActive_ = bool;\r\n      if (this.userActive_) {\r\n        this.userActivity_ = true;\r\n        this.removeClass('vjs-user-inactive');\r\n        this.addClass('vjs-user-active');\r\n        /**\r\n         * @event Player#useractive\r\n         * @type {Event}\r\n         */\r\n        this.trigger('useractive');\r\n        return;\r\n      }\r\n\r\n      // Chrome/Safari/IE have bugs where when you change the cursor it can\r\n      // trigger a mousemove event. This causes an issue when you're hiding\r\n      // the cursor when the user is inactive, and a mousemove signals user\r\n      // activity. Making it impossible to go into inactive mode. Specifically\r\n      // this happens in fullscreen when we really need to hide the cursor.\r\n      //\r\n      // When this gets resolved in ALL browsers it can be removed\r\n      // https://code.google.com/p/chromium/issues/detail?id=103041\r\n      if (this.tech_) {\r\n        this.tech_.one('mousemove', function (e) {\r\n          e.stopPropagation();\r\n          e.preventDefault();\r\n        });\r\n      }\r\n      this.userActivity_ = false;\r\n      this.removeClass('vjs-user-active');\r\n      this.addClass('vjs-user-inactive');\r\n      /**\r\n       * @event Player#userinactive\r\n       * @type {Event}\r\n       */\r\n      this.trigger('userinactive');\r\n    }\r\n\r\n    /**\r\n     * Listen for user activity based on timeout value\r\n     *\r\n     * @private\r\n     */\r\n    listenForUserActivity_() {\r\n      let mouseInProgress;\r\n      let lastMoveX;\r\n      let lastMoveY;\r\n      const handleActivity = bind_(this, this.reportUserActivity);\r\n      const handleMouseMove = function (e) {\r\n        // #1068 - Prevent mousemove spamming\r\n        // Chrome Bug: https://code.google.com/p/chromium/issues/detail?id=366970\r\n        if (e.screenX !== lastMoveX || e.screenY !== lastMoveY) {\r\n          lastMoveX = e.screenX;\r\n          lastMoveY = e.screenY;\r\n          handleActivity();\r\n        }\r\n      };\r\n      const handleMouseDown = function () {\r\n        handleActivity();\r\n        // For as long as the they are touching the device or have their mouse down,\r\n        // we consider them active even if they're not moving their finger or mouse.\r\n        // So we want to continue to update that they are active\r\n        this.clearInterval(mouseInProgress);\r\n        // Setting userActivity=true now and setting the interval to the same time\r\n        // as the activityCheck interval (250) should ensure we never miss the\r\n        // next activityCheck\r\n        mouseInProgress = this.setInterval(handleActivity, 250);\r\n      };\r\n      const handleMouseUpAndMouseLeave = function (event) {\r\n        handleActivity();\r\n        // Stop the interval that maintains activity if the mouse/touch is down\r\n        this.clearInterval(mouseInProgress);\r\n      };\r\n\r\n      // Any mouse movement will be considered user activity\r\n      this.on('mousedown', handleMouseDown);\r\n      this.on('mousemove', handleMouseMove);\r\n      this.on('mouseup', handleMouseUpAndMouseLeave);\r\n      this.on('mouseleave', handleMouseUpAndMouseLeave);\r\n      const controlBar = this.getChild('controlBar');\r\n\r\n      // Fixes bug on Android & iOS where when tapping progressBar (when control bar is displayed)\r\n      // controlBar would no longer be hidden by default timeout.\r\n      if (controlBar && !IS_IOS && !IS_ANDROID) {\r\n        controlBar.on('mouseenter', function (event) {\r\n          if (this.player().options_.inactivityTimeout !== 0) {\r\n            this.player().cache_.inactivityTimeout = this.player().options_.inactivityTimeout;\r\n          }\r\n          this.player().options_.inactivityTimeout = 0;\r\n        });\r\n        controlBar.on('mouseleave', function (event) {\r\n          this.player().options_.inactivityTimeout = this.player().cache_.inactivityTimeout;\r\n        });\r\n      }\r\n\r\n      // Listen for keyboard navigation\r\n      // Shouldn't need to use inProgress interval because of key repeat\r\n      this.on('keydown', handleActivity);\r\n      this.on('keyup', handleActivity);\r\n\r\n      // Run an interval every 250 milliseconds instead of stuffing everything into\r\n      // the mousemove/touchmove function itself, to prevent performance degradation.\r\n      // `this.reportUserActivity` simply sets this.userActivity_ to true, which\r\n      // then gets picked up by this loop\r\n      // http://ejohn.org/blog/learning-from-twitter/\r\n      let inactivityTimeout;\r\n\r\n      /** @this Player */\r\n      const activityCheck = function () {\r\n        // Check to see if mouse/touch activity has happened\r\n        if (!this.userActivity_) {\r\n          return;\r\n        }\r\n\r\n        // Reset the activity tracker\r\n        this.userActivity_ = false;\r\n\r\n        // If the user state was inactive, set the state to active\r\n        this.userActive(true);\r\n\r\n        // Clear any existing inactivity timeout to start the timer over\r\n        this.clearTimeout(inactivityTimeout);\r\n        const timeout = this.options_.inactivityTimeout;\r\n        if (timeout <= 0) {\r\n          return;\r\n        }\r\n\r\n        // In <timeout> milliseconds, if no more activity has occurred the\r\n        // user will be considered inactive\r\n        inactivityTimeout = this.setTimeout(function () {\r\n          // Protect against the case where the inactivityTimeout can trigger just\r\n          // before the next user activity is picked up by the activity check loop\r\n          // causing a flicker\r\n          if (!this.userActivity_) {\r\n            this.userActive(false);\r\n          }\r\n        }, timeout);\r\n      };\r\n      this.setInterval(activityCheck, 250);\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the current playback rate. A playback rate of\r\n     * 1.0 represents normal speed and 0.5 would indicate half-speed\r\n     * playback, for instance.\r\n     *\r\n     * @see https://html.spec.whatwg.org/multipage/embedded-content.html#dom-media-playbackrate\r\n     *\r\n     * @param {number} [rate]\r\n     *       New playback rate to set.\r\n     *\r\n     * @return {number|undefined}\r\n     *         - The current playback rate when getting or 1.0\r\n     *         - Nothing when setting\r\n     */\r\n    playbackRate(rate) {\r\n      if (rate !== undefined) {\r\n        // NOTE: this.cache_.lastPlaybackRate is set from the tech handler\r\n        // that is registered above\r\n        this.techCall_('setPlaybackRate', rate);\r\n        return;\r\n      }\r\n      if (this.tech_ && this.tech_.featuresPlaybackRate) {\r\n        return this.cache_.lastPlaybackRate || this.techGet_('playbackRate');\r\n      }\r\n      return 1.0;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the current default playback rate. A default playback rate of\r\n     * 1.0 represents normal speed and 0.5 would indicate half-speed playback, for instance.\r\n     * defaultPlaybackRate will only represent what the initial playbackRate of a video was, not\r\n     * not the current playbackRate.\r\n     *\r\n     * @see https://html.spec.whatwg.org/multipage/embedded-content.html#dom-media-defaultplaybackrate\r\n     *\r\n     * @param {number} [rate]\r\n     *       New default playback rate to set.\r\n     *\r\n     * @return {number|undefined}\r\n     *         - The default playback rate when getting or 1.0\r\n     *         - Nothing when setting\r\n     */\r\n    defaultPlaybackRate(rate) {\r\n      if (rate !== undefined) {\r\n        return this.techCall_('setDefaultPlaybackRate', rate);\r\n      }\r\n      if (this.tech_ && this.tech_.featuresPlaybackRate) {\r\n        return this.techGet_('defaultPlaybackRate');\r\n      }\r\n      return 1.0;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the audio flag\r\n     *\r\n     * @param {boolean} [bool]\r\n     *        - true signals that this is an audio player\r\n     *        - false signals that this is not an audio player\r\n     *\r\n     * @return {boolean|undefined}\r\n     *         - The current value of isAudio when getting\r\n     *         - Nothing when setting\r\n     */\r\n    isAudio(bool) {\r\n      if (bool !== undefined) {\r\n        this.isAudio_ = !!bool;\r\n        return;\r\n      }\r\n      return !!this.isAudio_;\r\n    }\r\n    updatePlayerHeightOnAudioOnlyMode_() {\r\n      const controlBar = this.getChild('ControlBar');\r\n      if (!controlBar || this.audioOnlyCache_.controlBarHeight === controlBar.currentHeight()) {\r\n        return;\r\n      }\r\n      this.audioOnlyCache_.controlBarHeight = controlBar.currentHeight();\r\n      this.height(this.audioOnlyCache_.controlBarHeight);\r\n    }\r\n    enableAudioOnlyUI_() {\r\n      // Update styling immediately to show the control bar so we can get its height\r\n      this.addClass('vjs-audio-only-mode');\r\n      const playerChildren = this.children();\r\n      const controlBar = this.getChild('ControlBar');\r\n      const controlBarHeight = controlBar && controlBar.currentHeight();\r\n\r\n      // Hide all player components except the control bar. Control bar components\r\n      // needed only for video are hidden with CSS\r\n      playerChildren.forEach(child => {\r\n        if (child === controlBar) {\r\n          return;\r\n        }\r\n        if (child.el_ && !child.hasClass('vjs-hidden')) {\r\n          child.hide();\r\n          this.audioOnlyCache_.hiddenChildren.push(child);\r\n        }\r\n      });\r\n      this.audioOnlyCache_.playerHeight = this.currentHeight();\r\n      this.audioOnlyCache_.controlBarHeight = controlBarHeight;\r\n      this.on('playerresize', this.boundUpdatePlayerHeightOnAudioOnlyMode_);\r\n\r\n      // Set the player height the same as the control bar\r\n      this.height(controlBarHeight);\r\n      this.trigger('audioonlymodechange');\r\n    }\r\n    disableAudioOnlyUI_() {\r\n      this.removeClass('vjs-audio-only-mode');\r\n      this.off('playerresize', this.boundUpdatePlayerHeightOnAudioOnlyMode_);\r\n\r\n      // Show player components that were previously hidden\r\n      this.audioOnlyCache_.hiddenChildren.forEach(child => child.show());\r\n\r\n      // Reset player height\r\n      this.height(this.audioOnlyCache_.playerHeight);\r\n      this.trigger('audioonlymodechange');\r\n    }\r\n\r\n    /**\r\n     * Get the current audioOnlyMode state or set audioOnlyMode to true or false.\r\n     *\r\n     * Setting this to `true` will hide all player components except the control bar,\r\n     * as well as control bar components needed only for video.\r\n     *\r\n     * @param {boolean} [value]\r\n     *         The value to set audioOnlyMode to.\r\n     *\r\n     * @return {Promise|boolean}\r\n     *        A Promise is returned when setting the state, and a boolean when getting\r\n     *        the present state\r\n     */\r\n    audioOnlyMode(value) {\r\n      if (typeof value !== 'boolean' || value === this.audioOnlyMode_) {\r\n        return this.audioOnlyMode_;\r\n      }\r\n      this.audioOnlyMode_ = value;\r\n\r\n      // Enable Audio Only Mode\r\n      if (value) {\r\n        const exitPromises = [];\r\n\r\n        // Fullscreen and PiP are not supported in audioOnlyMode, so exit if we need to.\r\n        if (this.isInPictureInPicture()) {\r\n          exitPromises.push(this.exitPictureInPicture());\r\n        }\r\n        if (this.isFullscreen()) {\r\n          exitPromises.push(this.exitFullscreen());\r\n        }\r\n        if (this.audioPosterMode()) {\r\n          exitPromises.push(this.audioPosterMode(false));\r\n        }\r\n        return Promise.all(exitPromises).then(() => this.enableAudioOnlyUI_());\r\n      }\r\n\r\n      // Disable Audio Only Mode\r\n      return Promise.resolve().then(() => this.disableAudioOnlyUI_());\r\n    }\r\n    enablePosterModeUI_() {\r\n      // Hide the video element and show the poster image to enable posterModeUI\r\n      const tech = this.tech_ && this.tech_;\r\n      tech.hide();\r\n      this.addClass('vjs-audio-poster-mode');\r\n      this.trigger('audiopostermodechange');\r\n    }\r\n    disablePosterModeUI_() {\r\n      // Show the video element and hide the poster image to disable posterModeUI\r\n      const tech = this.tech_ && this.tech_;\r\n      tech.show();\r\n      this.removeClass('vjs-audio-poster-mode');\r\n      this.trigger('audiopostermodechange');\r\n    }\r\n\r\n    /**\r\n     * Get the current audioPosterMode state or set audioPosterMode to true or false\r\n     *\r\n     * @param {boolean} [value]\r\n     *         The value to set audioPosterMode to.\r\n     *\r\n     * @return {Promise|boolean}\r\n     *         A Promise is returned when setting the state, and a boolean when getting\r\n     *        the present state\r\n     */\r\n    audioPosterMode(value) {\r\n      if (typeof value !== 'boolean' || value === this.audioPosterMode_) {\r\n        return this.audioPosterMode_;\r\n      }\r\n      this.audioPosterMode_ = value;\r\n      if (value) {\r\n        if (this.audioOnlyMode()) {\r\n          const audioOnlyModePromise = this.audioOnlyMode(false);\r\n          return audioOnlyModePromise.then(() => {\r\n            // enable audio poster mode after audio only mode is disabled\r\n            this.enablePosterModeUI_();\r\n          });\r\n        }\r\n        return Promise.resolve().then(() => {\r\n          // enable audio poster mode\r\n          this.enablePosterModeUI_();\r\n        });\r\n      }\r\n      return Promise.resolve().then(() => {\r\n        // disable audio poster mode\r\n        this.disablePosterModeUI_();\r\n      });\r\n    }\r\n\r\n    /**\r\n     * A helper method for adding a {@link TextTrack} to our\r\n     * {@link TextTrackList}.\r\n     *\r\n     * In addition to the W3C settings we allow adding additional info through options.\r\n     *\r\n     * @see http://www.w3.org/html/wg/drafts/html/master/embedded-content-0.html#dom-media-addtexttrack\r\n     *\r\n     * @param {string} [kind]\r\n     *        the kind of TextTrack you are adding\r\n     *\r\n     * @param {string} [label]\r\n     *        the label to give the TextTrack label\r\n     *\r\n     * @param {string} [language]\r\n     *        the language to set on the TextTrack\r\n     *\r\n     * @return {TextTrack|undefined}\r\n     *         the TextTrack that was added or undefined\r\n     *         if there is no tech\r\n     */\r\n    addTextTrack(kind, label, language) {\r\n      if (this.tech_) {\r\n        return this.tech_.addTextTrack(kind, label, language);\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Create a remote {@link TextTrack} and an {@link HTMLTrackElement}.\r\n     *\r\n     * @param {Object} options\r\n     *        Options to pass to {@link HTMLTrackElement} during creation. See\r\n     *        {@link HTMLTrackElement} for object properties that you should use.\r\n     *\r\n     * @param {boolean} [manualCleanup=false] if set to true, the TextTrack will not be removed\r\n     *                                        from the TextTrackList and HtmlTrackElementList\r\n     *                                        after a source change\r\n     *\r\n     * @return {HtmlTrackElement}\r\n     *         the HTMLTrackElement that was created and added\r\n     *         to the HtmlTrackElementList and the remote\r\n     *         TextTrackList\r\n     *\r\n     */\r\n    addRemoteTextTrack(options, manualCleanup) {\r\n      if (this.tech_) {\r\n        return this.tech_.addRemoteTextTrack(options, manualCleanup);\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Remove a remote {@link TextTrack} from the respective\r\n     * {@link TextTrackList} and {@link HtmlTrackElementList}.\r\n     *\r\n     * @param {Object} track\r\n     *        Remote {@link TextTrack} to remove\r\n     *\r\n     * @return {undefined}\r\n     *         does not return anything\r\n     */\r\n    removeRemoteTextTrack(obj = {}) {\r\n      let {\r\n        track\r\n      } = obj;\r\n      if (!track) {\r\n        track = obj;\r\n      }\r\n\r\n      // destructure the input into an object with a track argument, defaulting to arguments[0]\r\n      // default the whole argument to an empty object if nothing was passed in\r\n\r\n      if (this.tech_) {\r\n        return this.tech_.removeRemoteTextTrack(track);\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Gets available media playback quality metrics as specified by the W3C's Media\r\n     * Playback Quality API.\r\n     *\r\n     * @see [Spec]{@link https://wicg.github.io/media-playback-quality}\r\n     *\r\n     * @return {Object|undefined}\r\n     *         An object with supported media playback quality metrics or undefined if there\r\n     *         is no tech or the tech does not support it.\r\n     */\r\n    getVideoPlaybackQuality() {\r\n      return this.techGet_('getVideoPlaybackQuality');\r\n    }\r\n\r\n    /**\r\n     * Get video width\r\n     *\r\n     * @return {number}\r\n     *         current video width\r\n     */\r\n    videoWidth() {\r\n      return this.tech_ && this.tech_.videoWidth && this.tech_.videoWidth() || 0;\r\n    }\r\n\r\n    /**\r\n     * Get video height\r\n     *\r\n     * @return {number}\r\n     *         current video height\r\n     */\r\n    videoHeight() {\r\n      return this.tech_ && this.tech_.videoHeight && this.tech_.videoHeight() || 0;\r\n    }\r\n\r\n    /**\r\n     * Set or get the player's language code.\r\n     *\r\n     * Changing the language will trigger\r\n     * [languagechange]{@link Player#event:languagechange}\r\n     * which Components can use to update control text.\r\n     * ClickableComponent will update its control text by default on\r\n     * [languagechange]{@link Player#event:languagechange}.\r\n     *\r\n     * @fires Player#languagechange\r\n     *\r\n     * @param {string} [code]\r\n     *        the language code to set the player to\r\n     *\r\n     * @return {string|undefined}\r\n     *         - The current language code when getting\r\n     *         - Nothing when setting\r\n     */\r\n    language(code) {\r\n      if (code === undefined) {\r\n        return this.language_;\r\n      }\r\n      if (this.language_ !== String(code).toLowerCase()) {\r\n        this.language_ = String(code).toLowerCase();\r\n\r\n        // during first init, it's possible some things won't be evented\r\n        if (isEvented(this)) {\r\n          /**\r\n          * fires when the player language change\r\n          *\r\n          * @event Player#languagechange\r\n          * @type {Event}\r\n          */\r\n          this.trigger('languagechange');\r\n        }\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Get the player's language dictionary\r\n     * Merge every time, because a newly added plugin might call videojs.addLanguage() at any time\r\n     * Languages specified directly in the player options have precedence\r\n     *\r\n     * @return {Array}\r\n     *         An array of of supported languages\r\n     */\r\n    languages() {\r\n      return merge$2(Player.prototype.options_.languages, this.languages_);\r\n    }\r\n\r\n    /**\r\n     * returns a JavaScript object representing the current track\r\n     * information. **DOES not return it as JSON**\r\n     *\r\n     * @return {Object}\r\n     *         Object representing the current of track info\r\n     */\r\n    toJSON() {\r\n      const options = merge$2(this.options_);\r\n      const tracks = options.tracks;\r\n      options.tracks = [];\r\n      for (let i = 0; i < tracks.length; i++) {\r\n        let track = tracks[i];\r\n\r\n        // deep merge tracks and null out player so no circular references\r\n        track = merge$2(track);\r\n        track.player = undefined;\r\n        options.tracks[i] = track;\r\n      }\r\n      return options;\r\n    }\r\n\r\n    /**\r\n     * Creates a simple modal dialog (an instance of the {@link ModalDialog}\r\n     * component) that immediately overlays the player with arbitrary\r\n     * content and removes itself when closed.\r\n     *\r\n     * @param {string|Function|Element|Array|null} content\r\n     *        Same as {@link ModalDialog#content}'s param of the same name.\r\n     *        The most straight-forward usage is to provide a string or DOM\r\n     *        element.\r\n     *\r\n     * @param {Object} [options]\r\n     *        Extra options which will be passed on to the {@link ModalDialog}.\r\n     *\r\n     * @return {ModalDialog}\r\n     *         the {@link ModalDialog} that was created\r\n     */\r\n    createModal(content, options) {\r\n      options = options || {};\r\n      options.content = content || '';\r\n      const modal = new ModalDialog(this, options);\r\n      this.addChild(modal);\r\n      modal.on('dispose', () => {\r\n        this.removeChild(modal);\r\n      });\r\n      modal.open();\r\n      return modal;\r\n    }\r\n\r\n    /**\r\n     * Change breakpoint classes when the player resizes.\r\n     *\r\n     * @private\r\n     */\r\n    updateCurrentBreakpoint_() {\r\n      if (!this.responsive()) {\r\n        return;\r\n      }\r\n      const currentBreakpoint = this.currentBreakpoint();\r\n      const currentWidth = this.currentWidth();\r\n      for (let i = 0; i < BREAKPOINT_ORDER.length; i++) {\r\n        const candidateBreakpoint = BREAKPOINT_ORDER[i];\r\n        const maxWidth = this.breakpoints_[candidateBreakpoint];\r\n        if (currentWidth <= maxWidth) {\r\n          // The current breakpoint did not change, nothing to do.\r\n          if (currentBreakpoint === candidateBreakpoint) {\r\n            return;\r\n          }\r\n\r\n          // Only remove a class if there is a current breakpoint.\r\n          if (currentBreakpoint) {\r\n            this.removeClass(BREAKPOINT_CLASSES[currentBreakpoint]);\r\n          }\r\n          this.addClass(BREAKPOINT_CLASSES[candidateBreakpoint]);\r\n          this.breakpoint_ = candidateBreakpoint;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Removes the current breakpoint.\r\n     *\r\n     * @private\r\n     */\r\n    removeCurrentBreakpoint_() {\r\n      const className = this.currentBreakpointClass();\r\n      this.breakpoint_ = '';\r\n      if (className) {\r\n        this.removeClass(className);\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Get or set breakpoints on the player.\r\n     *\r\n     * Calling this method with an object or `true` will remove any previous\r\n     * custom breakpoints and start from the defaults again.\r\n     *\r\n     * @param  {Object|boolean} [breakpoints]\r\n     *         If an object is given, it can be used to provide custom\r\n     *         breakpoints. If `true` is given, will set default breakpoints.\r\n     *         If this argument is not given, will simply return the current\r\n     *         breakpoints.\r\n     *\r\n     * @param  {number} [breakpoints.tiny]\r\n     *         The maximum width for the \"vjs-layout-tiny\" class.\r\n     *\r\n     * @param  {number} [breakpoints.xsmall]\r\n     *         The maximum width for the \"vjs-layout-x-small\" class.\r\n     *\r\n     * @param  {number} [breakpoints.small]\r\n     *         The maximum width for the \"vjs-layout-small\" class.\r\n     *\r\n     * @param  {number} [breakpoints.medium]\r\n     *         The maximum width for the \"vjs-layout-medium\" class.\r\n     *\r\n     * @param  {number} [breakpoints.large]\r\n     *         The maximum width for the \"vjs-layout-large\" class.\r\n     *\r\n     * @param  {number} [breakpoints.xlarge]\r\n     *         The maximum width for the \"vjs-layout-x-large\" class.\r\n     *\r\n     * @param  {number} [breakpoints.huge]\r\n     *         The maximum width for the \"vjs-layout-huge\" class.\r\n     *\r\n     * @return {Object}\r\n     *         An object mapping breakpoint names to maximum width values.\r\n     */\r\n    breakpoints(breakpoints) {\r\n      // Used as a getter.\r\n      if (breakpoints === undefined) {\r\n        return Object.assign(this.breakpoints_);\r\n      }\r\n      this.breakpoint_ = '';\r\n      this.breakpoints_ = Object.assign({}, DEFAULT_BREAKPOINTS, breakpoints);\r\n\r\n      // When breakpoint definitions change, we need to update the currently\r\n      // selected breakpoint.\r\n      this.updateCurrentBreakpoint_();\r\n\r\n      // Clone the breakpoints before returning.\r\n      return Object.assign(this.breakpoints_);\r\n    }\r\n\r\n    /**\r\n     * Get or set a flag indicating whether or not this player should adjust\r\n     * its UI based on its dimensions.\r\n     *\r\n     * @param  {boolean} [value]\r\n     *         Should be `true` if the player should adjust its UI based on its\r\n     *         dimensions; otherwise, should be `false`.\r\n     *\r\n     * @return {boolean|undefined}\r\n     *         Will be `true` if this player should adjust its UI based on its\r\n     *         dimensions; otherwise, will be `false`.\r\n     *         Nothing if setting\r\n     */\r\n    responsive(value) {\r\n      // Used as a getter.\r\n      if (value === undefined) {\r\n        return this.responsive_;\r\n      }\r\n      value = Boolean(value);\r\n      const current = this.responsive_;\r\n\r\n      // Nothing changed.\r\n      if (value === current) {\r\n        return;\r\n      }\r\n\r\n      // The value actually changed, set it.\r\n      this.responsive_ = value;\r\n\r\n      // Start listening for breakpoints and set the initial breakpoint if the\r\n      // player is now responsive.\r\n      if (value) {\r\n        this.on('playerresize', this.boundUpdateCurrentBreakpoint_);\r\n        this.updateCurrentBreakpoint_();\r\n\r\n        // Stop listening for breakpoints if the player is no longer responsive.\r\n      } else {\r\n        this.off('playerresize', this.boundUpdateCurrentBreakpoint_);\r\n        this.removeCurrentBreakpoint_();\r\n      }\r\n      return value;\r\n    }\r\n\r\n    /**\r\n     * Get current breakpoint name, if any.\r\n     *\r\n     * @return {string}\r\n     *         If there is currently a breakpoint set, returns a the key from the\r\n     *         breakpoints object matching it. Otherwise, returns an empty string.\r\n     */\r\n    currentBreakpoint() {\r\n      return this.breakpoint_;\r\n    }\r\n\r\n    /**\r\n     * Get the current breakpoint class name.\r\n     *\r\n     * @return {string}\r\n     *         The matching class name (e.g. `\"vjs-layout-tiny\"` or\r\n     *         `\"vjs-layout-large\"`) for the current breakpoint. Empty string if\r\n     *         there is no current breakpoint.\r\n     */\r\n    currentBreakpointClass() {\r\n      return BREAKPOINT_CLASSES[this.breakpoint_] || '';\r\n    }\r\n\r\n    /**\r\n     * An object that describes a single piece of media.\r\n     *\r\n     * Properties that are not part of this type description will be retained; so,\r\n     * this can be viewed as a generic metadata storage mechanism as well.\r\n     *\r\n     * @see      {@link https://wicg.github.io/mediasession/#the-mediametadata-interface}\r\n     * @typedef  {Object} Player~MediaObject\r\n     *\r\n     * @property {string} [album]\r\n     *           Unused, except if this object is passed to the `MediaSession`\r\n     *           API.\r\n     *\r\n     * @property {string} [artist]\r\n     *           Unused, except if this object is passed to the `MediaSession`\r\n     *           API.\r\n     *\r\n     * @property {Object[]} [artwork]\r\n     *           Unused, except if this object is passed to the `MediaSession`\r\n     *           API. If not specified, will be populated via the `poster`, if\r\n     *           available.\r\n     *\r\n     * @property {string} [poster]\r\n     *           URL to an image that will display before playback.\r\n     *\r\n     * @property {Tech~SourceObject|Tech~SourceObject[]|string} [src]\r\n     *           A single source object, an array of source objects, or a string\r\n     *           referencing a URL to a media source. It is _highly recommended_\r\n     *           that an object or array of objects is used here, so that source\r\n     *           selection algorithms can take the `type` into account.\r\n     *\r\n     * @property {string} [title]\r\n     *           Unused, except if this object is passed to the `MediaSession`\r\n     *           API.\r\n     *\r\n     * @property {Object[]} [textTracks]\r\n     *           An array of objects to be used to create text tracks, following\r\n     *           the {@link https://www.w3.org/TR/html50/embedded-content-0.html#the-track-element|native track element format}.\r\n     *           For ease of removal, these will be created as \"remote\" text\r\n     *           tracks and set to automatically clean up on source changes.\r\n     *\r\n     *           These objects may have properties like `src`, `kind`, `label`,\r\n     *           and `language`, see {@link Tech#createRemoteTextTrack}.\r\n     */\r\n\r\n    /**\r\n     * Populate the player using a {@link Player~MediaObject|MediaObject}.\r\n     *\r\n     * @param  {Player~MediaObject} media\r\n     *         A media object.\r\n     *\r\n     * @param  {Function} ready\r\n     *         A callback to be called when the player is ready.\r\n     */\r\n    loadMedia(media, ready) {\r\n      if (!media || typeof media !== 'object') {\r\n        return;\r\n      }\r\n      const crossOrigin = this.crossOrigin();\r\n      this.reset();\r\n\r\n      // Clone the media object so it cannot be mutated from outside.\r\n      this.cache_.media = merge$2(media);\r\n      const {\r\n        artist,\r\n        artwork,\r\n        description,\r\n        poster,\r\n        src,\r\n        textTracks,\r\n        title\r\n      } = this.cache_.media;\r\n\r\n      // If `artwork` is not given, create it using `poster`.\r\n      if (!artwork && poster) {\r\n        this.cache_.media.artwork = [{\r\n          src: poster,\r\n          type: getMimetype(poster)\r\n        }];\r\n      }\r\n      if (crossOrigin) {\r\n        this.crossOrigin(crossOrigin);\r\n      }\r\n      if (src) {\r\n        this.src(src);\r\n      }\r\n      if (poster) {\r\n        this.poster(poster);\r\n      }\r\n      if (Array.isArray(textTracks)) {\r\n        textTracks.forEach(tt => this.addRemoteTextTrack(tt, false));\r\n      }\r\n      if (this.titleBar) {\r\n        this.titleBar.update({\r\n          title,\r\n          description: description || artist || ''\r\n        });\r\n      }\r\n      this.ready(ready);\r\n    }\r\n\r\n    /**\r\n     * Get a clone of the current {@link Player~MediaObject} for this player.\r\n     *\r\n     * If the `loadMedia` method has not been used, will attempt to return a\r\n     * {@link Player~MediaObject} based on the current state of the player.\r\n     *\r\n     * @return {Player~MediaObject}\r\n     */\r\n    getMedia() {\r\n      if (!this.cache_.media) {\r\n        const poster = this.poster();\r\n        const src = this.currentSources();\r\n        const textTracks = Array.prototype.map.call(this.remoteTextTracks(), tt => ({\r\n          kind: tt.kind,\r\n          label: tt.label,\r\n          language: tt.language,\r\n          src: tt.src\r\n        }));\r\n        const media = {\r\n          src,\r\n          textTracks\r\n        };\r\n        if (poster) {\r\n          media.poster = poster;\r\n          media.artwork = [{\r\n            src: media.poster,\r\n            type: getMimetype(media.poster)\r\n          }];\r\n        }\r\n        return media;\r\n      }\r\n      return merge$2(this.cache_.media);\r\n    }\r\n\r\n    /**\r\n     * Gets tag settings\r\n     *\r\n     * @param {Element} tag\r\n     *        The player tag\r\n     *\r\n     * @return {Object}\r\n     *         An object containing all of the settings\r\n     *         for a player tag\r\n     */\r\n    static getTagSettings(tag) {\r\n      const baseOptions = {\r\n        sources: [],\r\n        tracks: []\r\n      };\r\n      const tagOptions = getAttributes(tag);\r\n      const dataSetup = tagOptions['data-setup'];\r\n      if (hasClass(tag, 'vjs-fill')) {\r\n        tagOptions.fill = true;\r\n      }\r\n      if (hasClass(tag, 'vjs-fluid')) {\r\n        tagOptions.fluid = true;\r\n      }\r\n\r\n      // Check if data-setup attr exists.\r\n      if (dataSetup !== null) {\r\n        // Parse options JSON\r\n        try {\r\n          // If empty string, make it a parsable json object.\r\n          Object.assign(tagOptions, JSON.parse(dataSetup || '{}'));\r\n        } catch (e) {\r\n          log$1.error('data-setup', e);\r\n        }\r\n      }\r\n      Object.assign(baseOptions, tagOptions);\r\n\r\n      // Get tag children settings\r\n      if (tag.hasChildNodes()) {\r\n        const children = tag.childNodes;\r\n        for (let i = 0, j = children.length; i < j; i++) {\r\n          const child = children[i];\r\n          // Change case needed: http://ejohn.org/blog/nodename-case-sensitivity/\r\n          const childName = child.nodeName.toLowerCase();\r\n          if (childName === 'source') {\r\n            baseOptions.sources.push(getAttributes(child));\r\n          } else if (childName === 'track') {\r\n            baseOptions.tracks.push(getAttributes(child));\r\n          }\r\n        }\r\n      }\r\n      return baseOptions;\r\n    }\r\n\r\n    /**\r\n     * Set debug mode to enable/disable logs at info level.\r\n     *\r\n     * @param {boolean} enabled\r\n     * @fires Player#debugon\r\n     * @fires Player#debugoff\r\n     * @return {boolean|undefined}\r\n     */\r\n    debug(enabled) {\r\n      if (enabled === undefined) {\r\n        return this.debugEnabled_;\r\n      }\r\n      if (enabled) {\r\n        this.trigger('debugon');\r\n        this.previousLogLevel_ = this.log.level;\r\n        this.log.level('debug');\r\n        this.debugEnabled_ = true;\r\n      } else {\r\n        this.trigger('debugoff');\r\n        this.log.level(this.previousLogLevel_);\r\n        this.previousLogLevel_ = undefined;\r\n        this.debugEnabled_ = false;\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Set or get current playback rates.\r\n     * Takes an array and updates the playback rates menu with the new items.\r\n     * Pass in an empty array to hide the menu.\r\n     * Values other than arrays are ignored.\r\n     *\r\n     * @fires Player#playbackrateschange\r\n     * @param {number[]} [newRates]\r\n     *                   The new rates that the playback rates menu should update to.\r\n     *                   An empty array will hide the menu\r\n     * @return {number[]} When used as a getter will return the current playback rates\r\n     */\r\n    playbackRates(newRates) {\r\n      if (newRates === undefined) {\r\n        return this.cache_.playbackRates;\r\n      }\r\n\r\n      // ignore any value that isn't an array\r\n      if (!Array.isArray(newRates)) {\r\n        return;\r\n      }\r\n\r\n      // ignore any arrays that don't only contain numbers\r\n      if (!newRates.every(rate => typeof rate === 'number')) {\r\n        return;\r\n      }\r\n      this.cache_.playbackRates = newRates;\r\n\r\n      /**\r\n      * fires when the playback rates in a player are changed\r\n      *\r\n      * @event Player#playbackrateschange\r\n      * @type {Event}\r\n      */\r\n      this.trigger('playbackrateschange');\r\n    }\r\n\r\n    /**\r\n     * Reports whether or not a player has a plugin available.\r\n     *\r\n     * This does not report whether or not the plugin has ever been initialized\r\n     * on this player. For that, [usingPlugin]{@link Player#usingPlugin}.\r\n     *\r\n     * @method hasPlugin\r\n     * @param  {string}  name\r\n     *         The name of a plugin.\r\n     *\r\n     * @return {boolean}\r\n     *         Whether or not this player has the requested plugin available.\r\n     */\r\n\r\n    /**\r\n     * Reports whether or not a player is using a plugin by name.\r\n     *\r\n     * For basic plugins, this only reports whether the plugin has _ever_ been\r\n     * initialized on this player.\r\n     *\r\n     * @method Player#usingPlugin\r\n     * @param  {string} name\r\n     *         The name of a plugin.\r\n     *\r\n     * @return {boolean}\r\n     *         Whether or not this player is using the requested plugin.\r\n     */\r\n  }\r\n\r\n  /**\r\n   * Get the {@link VideoTrackList}\r\n   *\r\n   * @link https://html.spec.whatwg.org/multipage/embedded-content.html#videotracklist\r\n   *\r\n   * @return {VideoTrackList}\r\n   *         the current video track list\r\n   *\r\n   * @method Player.prototype.videoTracks\r\n   */\r\n\r\n  /**\r\n   * Get the {@link AudioTrackList}\r\n   *\r\n   * @link https://html.spec.whatwg.org/multipage/embedded-content.html#audiotracklist\r\n   *\r\n   * @return {AudioTrackList}\r\n   *         the current audio track list\r\n   *\r\n   * @method Player.prototype.audioTracks\r\n   */\r\n\r\n  /**\r\n   * Get the {@link TextTrackList}\r\n   *\r\n   * @link http://www.w3.org/html/wg/drafts/html/master/embedded-content-0.html#dom-media-texttracks\r\n   *\r\n   * @return {TextTrackList}\r\n   *         the current text track list\r\n   *\r\n   * @method Player.prototype.textTracks\r\n   */\r\n\r\n  /**\r\n   * Get the remote {@link TextTrackList}\r\n   *\r\n   * @return {TextTrackList}\r\n   *         The current remote text track list\r\n   *\r\n   * @method Player.prototype.remoteTextTracks\r\n   */\r\n\r\n  /**\r\n   * Get the remote {@link HtmlTrackElementList} tracks.\r\n   *\r\n   * @return {HtmlTrackElementList}\r\n   *         The current remote text track element list\r\n   *\r\n   * @method Player.prototype.remoteTextTrackEls\r\n   */\r\n\r\n  ALL.names.forEach(function (name) {\r\n    const props = ALL[name];\r\n    Player.prototype[props.getterName] = function () {\r\n      if (this.tech_) {\r\n        return this.tech_[props.getterName]();\r\n      }\r\n\r\n      // if we have not yet loadTech_, we create {video,audio,text}Tracks_\r\n      // these will be passed to the tech during loading\r\n      this[props.privateName] = this[props.privateName] || new props.ListClass();\r\n      return this[props.privateName];\r\n    };\r\n  });\r\n\r\n  /**\r\n   * Get or set the `Player`'s crossorigin option. For the HTML5 player, this\r\n   * sets the `crossOrigin` property on the `<video>` tag to control the CORS\r\n   * behavior.\r\n   *\r\n   * @see [Video Element Attributes]{@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/video#attr-crossorigin}\r\n   *\r\n   * @param {string} [value]\r\n   *        The value to set the `Player`'s crossorigin to. If an argument is\r\n   *        given, must be one of `anonymous` or `use-credentials`.\r\n   *\r\n   * @return {string|undefined}\r\n   *         - The current crossorigin value of the `Player` when getting.\r\n   *         - undefined when setting\r\n   */\r\n  Player.prototype.crossorigin = Player.prototype.crossOrigin;\r\n\r\n  /**\r\n   * Global enumeration of players.\r\n   *\r\n   * The keys are the player IDs and the values are either the {@link Player}\r\n   * instance or `null` for disposed players.\r\n   *\r\n   * @type {Object}\r\n   */\r\n  Player.players = {};\r\n  const navigator = window.navigator;\r\n\r\n  /*\r\n   * Player instance options, surfaced using options\r\n   * options = Player.prototype.options_\r\n   * Make changes in options, not here.\r\n   *\r\n   * @type {Object}\r\n   * @private\r\n   */\r\n  Player.prototype.options_ = {\r\n    // Default order of fallback technology\r\n    techOrder: Tech.defaultTechOrder_,\r\n    html5: {},\r\n    // enable sourceset by default\r\n    enableSourceset: true,\r\n    // default inactivity timeout\r\n    inactivityTimeout: 2000,\r\n    // default playback rates\r\n    playbackRates: [],\r\n    // Add playback rate selection by adding rates\r\n    // 'playbackRates': [0.5, 1, 1.5, 2],\r\n    liveui: false,\r\n    // Included control sets\r\n    children: ['mediaLoader', 'posterImage', 'titleBar', 'textTrackDisplay', 'loadingSpinner', 'bigPlayButton', 'liveTracker', 'controlBar', 'errorDisplay', 'textTrackSettings', 'resizeManager'],\r\n    language: navigator && (navigator.languages && navigator.languages[0] || navigator.userLanguage || navigator.language) || 'en',\r\n    // locales and their language translations\r\n    languages: {},\r\n    // Default message to show when a video cannot be played.\r\n    notSupportedMessage: 'No compatible source was found for this media.',\r\n    normalizeAutoplay: false,\r\n    fullscreen: {\r\n      options: {\r\n        navigationUI: 'hide'\r\n      }\r\n    },\r\n    breakpoints: {},\r\n    responsive: false,\r\n    audioOnlyMode: false,\r\n    audioPosterMode: false,\r\n    spatialNavigation: {\r\n      enabled: false,\r\n      horizontalSeek: false\r\n    },\r\n    // Default smooth seeking to false\r\n    enableSmoothSeeking: false,\r\n    disableSeekWhileScrubbingOnMobile: false\r\n  };\r\n  TECH_EVENTS_RETRIGGER.forEach(function (event) {\r\n    Player.prototype[`handleTech${toTitleCase$1(event)}_`] = function () {\r\n      return this.trigger(event);\r\n    };\r\n  });\r\n\r\n  /**\r\n   * Fired when the player has initial duration and dimension information\r\n   *\r\n   * @event Player#loadedmetadata\r\n   * @type {Event}\r\n   */\r\n\r\n  /**\r\n   * Fired when the player has downloaded data at the current playback position\r\n   *\r\n   * @event Player#loadeddata\r\n   * @type {Event}\r\n   */\r\n\r\n  /**\r\n   * Fired when the current playback position has changed *\r\n   * During playback this is fired every 15-250 milliseconds, depending on the\r\n   * playback technology in use.\r\n   *\r\n   * @event Player#timeupdate\r\n   * @type {Event}\r\n   */\r\n\r\n  /**\r\n   * Fired when the volume changes\r\n   *\r\n   * @event Player#volumechange\r\n   * @type {Event}\r\n   */\r\n\r\n  Component$1.registerComponent('Player', Player);\r\n\r\n  /**\r\n   * @file plugin.js\r\n   */\r\n\r\n  /**\r\n   * The base plugin name.\r\n   *\r\n   * @private\r\n   * @constant\r\n   * @type {string}\r\n   */\r\n  const BASE_PLUGIN_NAME = 'plugin';\r\n\r\n  /**\r\n   * The key on which a player's active plugins cache is stored.\r\n   *\r\n   * @private\r\n   * @constant\r\n   * @type     {string}\r\n   */\r\n  const PLUGIN_CACHE_KEY = 'activePlugins_';\r\n\r\n  /**\r\n   * Stores registered plugins in a private space.\r\n   *\r\n   * @private\r\n   * @type    {Object}\r\n   */\r\n  const pluginStorage = {};\r\n\r\n  /**\r\n   * Reports whether or not a plugin has been registered.\r\n   *\r\n   * @private\r\n   * @param   {string} name\r\n   *          The name of a plugin.\r\n   *\r\n   * @return {boolean}\r\n   *          Whether or not the plugin has been registered.\r\n   */\r\n  const pluginExists = name => pluginStorage.hasOwnProperty(name);\r\n\r\n  /**\r\n   * Get a single registered plugin by name.\r\n   *\r\n   * @private\r\n   * @param   {string} name\r\n   *          The name of a plugin.\r\n   *\r\n   * @return {typeof Plugin|Function|undefined}\r\n   *          The plugin (or undefined).\r\n   */\r\n  const getPlugin = name => pluginExists(name) ? pluginStorage[name] : undefined;\r\n\r\n  /**\r\n   * Marks a plugin as \"active\" on a player.\r\n   *\r\n   * Also, ensures that the player has an object for tracking active plugins.\r\n   *\r\n   * @private\r\n   * @param   {Player} player\r\n   *          A Video.js player instance.\r\n   *\r\n   * @param   {string} name\r\n   *          The name of a plugin.\r\n   */\r\n  const markPluginAsActive = (player, name) => {\r\n    player[PLUGIN_CACHE_KEY] = player[PLUGIN_CACHE_KEY] || {};\r\n    player[PLUGIN_CACHE_KEY][name] = true;\r\n  };\r\n\r\n  /**\r\n   * Triggers a pair of plugin setup events.\r\n   *\r\n   * @private\r\n   * @param  {Player} player\r\n   *         A Video.js player instance.\r\n   *\r\n   * @param  {PluginEventHash} hash\r\n   *         A plugin event hash.\r\n   *\r\n   * @param  {boolean} [before]\r\n   *         If true, prefixes the event name with \"before\". In other words,\r\n   *         use this to trigger \"beforepluginsetup\" instead of \"pluginsetup\".\r\n   */\r\n  const triggerSetupEvent = (player, hash, before) => {\r\n    const eventName = (before ? 'before' : '') + 'pluginsetup';\r\n    player.trigger(eventName, hash);\r\n    player.trigger(eventName + ':' + hash.name, hash);\r\n  };\r\n\r\n  /**\r\n   * Takes a basic plugin function and returns a wrapper function which marks\r\n   * on the player that the plugin has been activated.\r\n   *\r\n   * @private\r\n   * @param   {string} name\r\n   *          The name of the plugin.\r\n   *\r\n   * @param   {Function} plugin\r\n   *          The basic plugin.\r\n   *\r\n   * @return {Function}\r\n   *          A wrapper function for the given plugin.\r\n   */\r\n  const createBasicPlugin = function (name, plugin) {\r\n    const basicPluginWrapper = function () {\r\n      // We trigger the \"beforepluginsetup\" and \"pluginsetup\" events on the player\r\n      // regardless, but we want the hash to be consistent with the hash provided\r\n      // for advanced plugins.\r\n      //\r\n      // The only potentially counter-intuitive thing here is the `instance` in\r\n      // the \"pluginsetup\" event is the value returned by the `plugin` function.\r\n      triggerSetupEvent(this, {\r\n        name,\r\n        plugin,\r\n        instance: null\r\n      }, true);\r\n      const instance = plugin.apply(this, arguments);\r\n      markPluginAsActive(this, name);\r\n      triggerSetupEvent(this, {\r\n        name,\r\n        plugin,\r\n        instance\r\n      });\r\n      return instance;\r\n    };\r\n    Object.keys(plugin).forEach(function (prop) {\r\n      basicPluginWrapper[prop] = plugin[prop];\r\n    });\r\n    return basicPluginWrapper;\r\n  };\r\n\r\n  /**\r\n   * Takes a plugin sub-class and returns a factory function for generating\r\n   * instances of it.\r\n   *\r\n   * This factory function will replace itself with an instance of the requested\r\n   * sub-class of Plugin.\r\n   *\r\n   * @private\r\n   * @param   {string} name\r\n   *          The name of the plugin.\r\n   *\r\n   * @param   {Plugin} PluginSubClass\r\n   *          The advanced plugin.\r\n   *\r\n   * @return {Function}\r\n   */\r\n  const createPluginFactory = (name, PluginSubClass) => {\r\n    // Add a `name` property to the plugin prototype so that each plugin can\r\n    // refer to itself by name.\r\n    PluginSubClass.prototype.name = name;\r\n    return function (...args) {\r\n      triggerSetupEvent(this, {\r\n        name,\r\n        plugin: PluginSubClass,\r\n        instance: null\r\n      }, true);\r\n      const instance = new PluginSubClass(...[this, ...args]);\r\n\r\n      // The plugin is replaced by a function that returns the current instance.\r\n      this[name] = () => instance;\r\n      triggerSetupEvent(this, instance.getEventHash());\r\n      return instance;\r\n    };\r\n  };\r\n\r\n  /**\r\n   * Parent class for all advanced plugins.\r\n   *\r\n   * @mixes   module:evented~EventedMixin\r\n   * @mixes   module:stateful~StatefulMixin\r\n   * @fires   Player#beforepluginsetup\r\n   * @fires   Player#beforepluginsetup:$name\r\n   * @fires   Player#pluginsetup\r\n   * @fires   Player#pluginsetup:$name\r\n   * @listens Player#dispose\r\n   * @throws  {Error}\r\n   *          If attempting to instantiate the base {@link Plugin} class\r\n   *          directly instead of via a sub-class.\r\n   */\r\n  class Plugin {\r\n    /**\r\n     * Creates an instance of this class.\r\n     *\r\n     * Sub-classes should call `super` to ensure plugins are properly initialized.\r\n     *\r\n     * @param {Player} player\r\n     *        A Video.js player instance.\r\n     */\r\n    constructor(player) {\r\n      if (this.constructor === Plugin) {\r\n        throw new Error('Plugin must be sub-classed; not directly instantiated.');\r\n      }\r\n      this.player = player;\r\n      if (!this.log) {\r\n        this.log = this.player.log.createLogger(this.name);\r\n      }\r\n\r\n      // Make this object evented, but remove the added `trigger` method so we\r\n      // use the prototype version instead.\r\n      evented(this);\r\n      delete this.trigger;\r\n      stateful(this, this.constructor.defaultState);\r\n      markPluginAsActive(player, this.name);\r\n\r\n      // Auto-bind the dispose method so we can use it as a listener and unbind\r\n      // it later easily.\r\n      this.dispose = this.dispose.bind(this);\r\n\r\n      // If the player is disposed, dispose the plugin.\r\n      player.on('dispose', this.dispose);\r\n    }\r\n\r\n    /**\r\n     * Get the version of the plugin that was set on <pluginName>.VERSION\r\n     */\r\n    version() {\r\n      return this.constructor.VERSION;\r\n    }\r\n\r\n    /**\r\n     * Each event triggered by plugins includes a hash of additional data with\r\n     * conventional properties.\r\n     *\r\n     * This returns that object or mutates an existing hash.\r\n     *\r\n     * @param   {Object} [hash={}]\r\n     *          An object to be used as event an event hash.\r\n     *\r\n     * @return {PluginEventHash}\r\n     *          An event hash object with provided properties mixed-in.\r\n     */\r\n    getEventHash(hash = {}) {\r\n      hash.name = this.name;\r\n      hash.plugin = this.constructor;\r\n      hash.instance = this;\r\n      return hash;\r\n    }\r\n\r\n    /**\r\n     * Triggers an event on the plugin object and overrides\r\n     * {@link module:evented~EventedMixin.trigger|EventedMixin.trigger}.\r\n     *\r\n     * @param   {string|Object} event\r\n     *          An event type or an object with a type property.\r\n     *\r\n     * @param   {Object} [hash={}]\r\n     *          Additional data hash to merge with a\r\n     *          {@link PluginEventHash|PluginEventHash}.\r\n     *\r\n     * @return {boolean}\r\n     *          Whether or not default was prevented.\r\n     */\r\n    trigger(event, hash = {}) {\r\n      return trigger(this.eventBusEl_, event, this.getEventHash(hash));\r\n    }\r\n\r\n    /**\r\n     * Handles \"statechanged\" events on the plugin. No-op by default, override by\r\n     * subclassing.\r\n     *\r\n     * @abstract\r\n     * @param    {Event} e\r\n     *           An event object provided by a \"statechanged\" event.\r\n     *\r\n     * @param    {Object} e.changes\r\n     *           An object describing changes that occurred with the \"statechanged\"\r\n     *           event.\r\n     */\r\n    handleStateChanged(e) {}\r\n\r\n    /**\r\n     * Disposes a plugin.\r\n     *\r\n     * Subclasses can override this if they want, but for the sake of safety,\r\n     * it's probably best to subscribe the \"dispose\" event.\r\n     *\r\n     * @fires Plugin#dispose\r\n     */\r\n    dispose() {\r\n      const {\r\n        name,\r\n        player\r\n      } = this;\r\n\r\n      /**\r\n       * Signals that a advanced plugin is about to be disposed.\r\n       *\r\n       * @event Plugin#dispose\r\n       * @type  {Event}\r\n       */\r\n      this.trigger('dispose');\r\n      this.off();\r\n      player.off('dispose', this.dispose);\r\n\r\n      // Eliminate any possible sources of leaking memory by clearing up\r\n      // references between the player and the plugin instance and nulling out\r\n      // the plugin's state and replacing methods with a function that throws.\r\n      player[PLUGIN_CACHE_KEY][name] = false;\r\n      this.player = this.state = null;\r\n\r\n      // Finally, replace the plugin name on the player with a new factory\r\n      // function, so that the plugin is ready to be set up again.\r\n      player[name] = createPluginFactory(name, pluginStorage[name]);\r\n    }\r\n\r\n    /**\r\n     * Determines if a plugin is a basic plugin (i.e. not a sub-class of `Plugin`).\r\n     *\r\n     * @param   {string|Function} plugin\r\n     *          If a string, matches the name of a plugin. If a function, will be\r\n     *          tested directly.\r\n     *\r\n     * @return {boolean}\r\n     *          Whether or not a plugin is a basic plugin.\r\n     */\r\n    static isBasic(plugin) {\r\n      const p = typeof plugin === 'string' ? getPlugin(plugin) : plugin;\r\n      return typeof p === 'function' && !Plugin.prototype.isPrototypeOf(p.prototype);\r\n    }\r\n\r\n    /**\r\n     * Register a Video.js plugin.\r\n     *\r\n     * @param   {string} name\r\n     *          The name of the plugin to be registered. Must be a string and\r\n     *          must not match an existing plugin or a method on the `Player`\r\n     *          prototype.\r\n     *\r\n     * @param   {typeof Plugin|Function} plugin\r\n     *          A sub-class of `Plugin` or a function for basic plugins.\r\n     *\r\n     * @return {typeof Plugin|Function}\r\n     *          For advanced plugins, a factory function for that plugin. For\r\n     *          basic plugins, a wrapper function that initializes the plugin.\r\n     */\r\n    static registerPlugin(name, plugin) {\r\n      if (typeof name !== 'string') {\r\n        throw new Error(`Illegal plugin name, \"${name}\", must be a string, was ${typeof name}.`);\r\n      }\r\n      if (pluginExists(name)) {\r\n        log$1.warn(`A plugin named \"${name}\" already exists. You may want to avoid re-registering plugins!`);\r\n      } else if (Player.prototype.hasOwnProperty(name)) {\r\n        throw new Error(`Illegal plugin name, \"${name}\", cannot share a name with an existing player method!`);\r\n      }\r\n      if (typeof plugin !== 'function') {\r\n        throw new Error(`Illegal plugin for \"${name}\", must be a function, was ${typeof plugin}.`);\r\n      }\r\n      pluginStorage[name] = plugin;\r\n\r\n      // Add a player prototype method for all sub-classed plugins (but not for\r\n      // the base Plugin class).\r\n      if (name !== BASE_PLUGIN_NAME) {\r\n        if (Plugin.isBasic(plugin)) {\r\n          Player.prototype[name] = createBasicPlugin(name, plugin);\r\n        } else {\r\n          Player.prototype[name] = createPluginFactory(name, plugin);\r\n        }\r\n      }\r\n      return plugin;\r\n    }\r\n\r\n    /**\r\n     * De-register a Video.js plugin.\r\n     *\r\n     * @param  {string} name\r\n     *         The name of the plugin to be de-registered. Must be a string that\r\n     *         matches an existing plugin.\r\n     *\r\n     * @throws {Error}\r\n     *         If an attempt is made to de-register the base plugin.\r\n     */\r\n    static deregisterPlugin(name) {\r\n      if (name === BASE_PLUGIN_NAME) {\r\n        throw new Error('Cannot de-register base plugin.');\r\n      }\r\n      if (pluginExists(name)) {\r\n        delete pluginStorage[name];\r\n        delete Player.prototype[name];\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Gets an object containing multiple Video.js plugins.\r\n     *\r\n     * @param   {Array} [names]\r\n     *          If provided, should be an array of plugin names. Defaults to _all_\r\n     *          plugin names.\r\n     *\r\n     * @return {Object|undefined}\r\n     *          An object containing plugin(s) associated with their name(s) or\r\n     *          `undefined` if no matching plugins exist).\r\n     */\r\n    static getPlugins(names = Object.keys(pluginStorage)) {\r\n      let result;\r\n      names.forEach(name => {\r\n        const plugin = getPlugin(name);\r\n        if (plugin) {\r\n          result = result || {};\r\n          result[name] = plugin;\r\n        }\r\n      });\r\n      return result;\r\n    }\r\n\r\n    /**\r\n     * Gets a plugin's version, if available\r\n     *\r\n     * @param   {string} name\r\n     *          The name of a plugin.\r\n     *\r\n     * @return {string}\r\n     *          The plugin's version or an empty string.\r\n     */\r\n    static getPluginVersion(name) {\r\n      const plugin = getPlugin(name);\r\n      return plugin && plugin.VERSION || '';\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gets a plugin by name if it exists.\r\n   *\r\n   * @static\r\n   * @method   getPlugin\r\n   * @memberOf Plugin\r\n   * @param    {string} name\r\n   *           The name of a plugin.\r\n   *\r\n   * @returns  {typeof Plugin|Function|undefined}\r\n   *           The plugin (or `undefined`).\r\n   */\r\n  Plugin.getPlugin = getPlugin;\r\n\r\n  /**\r\n   * The name of the base plugin class as it is registered.\r\n   *\r\n   * @type {string}\r\n   */\r\n  Plugin.BASE_PLUGIN_NAME = BASE_PLUGIN_NAME;\r\n  Plugin.registerPlugin(BASE_PLUGIN_NAME, Plugin);\r\n\r\n  /**\r\n   * Documented in player.js\r\n   *\r\n   * @ignore\r\n   */\r\n  Player.prototype.usingPlugin = function (name) {\r\n    return !!this[PLUGIN_CACHE_KEY] && this[PLUGIN_CACHE_KEY][name] === true;\r\n  };\r\n\r\n  /**\r\n   * Documented in player.js\r\n   *\r\n   * @ignore\r\n   */\r\n  Player.prototype.hasPlugin = function (name) {\r\n    return !!pluginExists(name);\r\n  };\r\n\r\n  /**\r\n   * Signals that a plugin is about to be set up on a player.\r\n   *\r\n   * @event    Player#beforepluginsetup\r\n   * @type     {PluginEventHash}\r\n   */\r\n\r\n  /**\r\n   * Signals that a plugin is about to be set up on a player - by name. The name\r\n   * is the name of the plugin.\r\n   *\r\n   * @event    Player#beforepluginsetup:$name\r\n   * @type     {PluginEventHash}\r\n   */\r\n\r\n  /**\r\n   * Signals that a plugin has just been set up on a player.\r\n   *\r\n   * @event    Player#pluginsetup\r\n   * @type     {PluginEventHash}\r\n   */\r\n\r\n  /**\r\n   * Signals that a plugin has just been set up on a player - by name. The name\r\n   * is the name of the plugin.\r\n   *\r\n   * @event    Player#pluginsetup:$name\r\n   * @type     {PluginEventHash}\r\n   */\r\n\r\n  /**\r\n   * @typedef  {Object} PluginEventHash\r\n   *\r\n   * @property {string} instance\r\n   *           For basic plugins, the return value of the plugin function. For\r\n   *           advanced plugins, the plugin instance on which the event is fired.\r\n   *\r\n   * @property {string} name\r\n   *           The name of the plugin.\r\n   *\r\n   * @property {string} plugin\r\n   *           For basic plugins, the plugin function. For advanced plugins, the\r\n   *           plugin class/constructor.\r\n   */\r\n\r\n  /**\r\n   * @file deprecate.js\r\n   * @module deprecate\r\n   */\r\n\r\n  /**\r\n   * Decorate a function with a deprecation message the first time it is called.\r\n   *\r\n   * @param  {string}   message\r\n   *         A deprecation message to log the first time the returned function\r\n   *         is called.\r\n   *\r\n   * @param  {Function} fn\r\n   *         The function to be deprecated.\r\n   *\r\n   * @return {Function}\r\n   *         A wrapper function that will log a deprecation warning the first\r\n   *         time it is called. The return value will be the return value of\r\n   *         the wrapped function.\r\n   */\r\n  function deprecate(message, fn) {\r\n    let warned = false;\r\n    return function (...args) {\r\n      if (!warned) {\r\n        log$1.warn(message);\r\n      }\r\n      warned = true;\r\n      return fn.apply(this, args);\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Internal function used to mark a function as deprecated in the next major\r\n   * version with consistent messaging.\r\n   *\r\n   * @param  {number}   major   The major version where it will be removed\r\n   * @param  {string}   oldName The old function name\r\n   * @param  {string}   newName The new function name\r\n   * @param  {Function} fn      The function to deprecate\r\n   * @return {Function}         The decorated function\r\n   */\r\n  function deprecateForMajor(major, oldName, newName, fn) {\r\n    return deprecate(`${oldName} is deprecated and will be removed in ${major}.0; please use ${newName} instead.`, fn);\r\n  }\r\n\r\n  var VjsErrors = {\r\n    NetworkBadStatus: 'networkbadstatus',\r\n    NetworkRequestFailed: 'networkrequestfailed',\r\n    NetworkRequestAborted: 'networkrequestaborted',\r\n    NetworkRequestTimeout: 'networkrequesttimeout',\r\n    NetworkBodyParserFailed: 'networkbodyparserfailed',\r\n    StreamingHlsPlaylistParserError: 'streaminghlsplaylistparsererror',\r\n    StreamingDashManifestParserError: 'streamingdashmanifestparsererror',\r\n    StreamingContentSteeringParserError: 'streamingcontentsteeringparsererror',\r\n    StreamingVttParserError: 'streamingvttparsererror',\r\n    StreamingFailedToSelectNextSegment: 'streamingfailedtoselectnextsegment',\r\n    StreamingFailedToDecryptSegment: 'streamingfailedtodecryptsegment',\r\n    StreamingFailedToTransmuxSegment: 'streamingfailedtotransmuxsegment',\r\n    StreamingFailedToAppendSegment: 'streamingfailedtoappendsegment',\r\n    StreamingCodecsChangeError: 'streamingcodecschangeerror'\r\n  };\r\n\r\n  /**\r\n   * @file video.js\r\n   * @module videojs\r\n   */\r\n\r\n  /** @import { PlayerReadyCallback } from './player' */\r\n\r\n  /**\r\n   * Normalize an `id` value by trimming off a leading `#`\r\n   *\r\n   * @private\r\n   * @param   {string} id\r\n   *          A string, maybe with a leading `#`.\r\n   *\r\n   * @return {string}\r\n   *          The string, without any leading `#`.\r\n   */\r\n  const normalizeId = id => id.indexOf('#') === 0 ? id.slice(1) : id;\r\n\r\n  /**\r\n   * The `videojs()` function doubles as the main function for users to create a\r\n   * {@link Player} instance as well as the main library namespace.\r\n   *\r\n   * It can also be used as a getter for a pre-existing {@link Player} instance.\r\n   * However, we _strongly_ recommend using `videojs.getPlayer()` for this\r\n   * purpose because it avoids any potential for unintended initialization.\r\n   *\r\n   * Due to [limitations](https://github.com/jsdoc3/jsdoc/issues/955#issuecomment-313829149)\r\n   * of our JSDoc template, we cannot properly document this as both a function\r\n   * and a namespace, so its function signature is documented here.\r\n   *\r\n   * #### Arguments\r\n   * ##### id\r\n   * string|Element, **required**\r\n   *\r\n   * Video element or video element ID.\r\n   *\r\n   * ##### options\r\n   * Object, optional\r\n   *\r\n   * Options object for providing settings.\r\n   * See: [Options Guide](https://docs.videojs.com/tutorial-options.html).\r\n   *\r\n   * ##### ready\r\n   * {@link Component~ReadyCallback}, optional\r\n   *\r\n   * A function to be called when the {@link Player} and {@link Tech} are ready.\r\n   *\r\n   * #### Return Value\r\n   *\r\n   * The `videojs()` function returns a {@link Player} instance.\r\n   *\r\n   * @namespace\r\n   *\r\n   * @borrows AudioTrack as AudioTrack\r\n   * @borrows Component.getComponent as getComponent\r\n   * @borrows module:events.on as on\r\n   * @borrows module:events.one as one\r\n   * @borrows module:events.off as off\r\n   * @borrows module:events.trigger as trigger\r\n   * @borrows EventTarget as EventTarget\r\n   * @borrows module:middleware.use as use\r\n   * @borrows Player.players as players\r\n   * @borrows Plugin.registerPlugin as registerPlugin\r\n   * @borrows Plugin.deregisterPlugin as deregisterPlugin\r\n   * @borrows Plugin.getPlugins as getPlugins\r\n   * @borrows Plugin.getPlugin as getPlugin\r\n   * @borrows Plugin.getPluginVersion as getPluginVersion\r\n   * @borrows Tech.getTech as getTech\r\n   * @borrows Tech.registerTech as registerTech\r\n   * @borrows TextTrack as TextTrack\r\n   * @borrows VideoTrack as VideoTrack\r\n   *\r\n   * @param  {string|Element} id\r\n   *         Video element or video element ID.\r\n   *\r\n   * @param  {Object} [options]\r\n   *         Options object for providing settings.\r\n   *         See: [Options Guide](https://docs.videojs.com/tutorial-options.html).\r\n   *\r\n   * @param  {PlayerReadyCallback} [ready]\r\n   *         A function to be called when the {@link Player} and {@link Tech} are\r\n   *         ready.\r\n   *\r\n   * @return {Player}\r\n   *         The `videojs()` function returns a {@link Player|Player} instance.\r\n   */\r\n  function videojs(id, options, ready) {\r\n    let player = videojs.getPlayer(id);\r\n    if (player) {\r\n      if (options) {\r\n        log$1.warn(`Player \"${id}\" is already initialised. Options will not be applied.`);\r\n      }\r\n      if (ready) {\r\n        player.ready(ready);\r\n      }\r\n      return player;\r\n    }\r\n    const el = typeof id === 'string' ? $('#' + normalizeId(id)) : id;\r\n    if (!isEl(el)) {\r\n      throw new TypeError('The element or ID supplied is not valid. (videojs)');\r\n    }\r\n\r\n    // document.body.contains(el) will only check if el is contained within that one document.\r\n    // This causes problems for elements in iframes.\r\n    // Instead, use the element's ownerDocument instead of the global document.\r\n    // This will make sure that the element is indeed in the dom of that document.\r\n    // Additionally, check that the document in question has a default view.\r\n    // If the document is no longer attached to the dom, the defaultView of the document will be null.\r\n    // If element is inside Shadow DOM (e.g. is part of a Custom element), ownerDocument.body\r\n    // always returns false. Instead, use the Shadow DOM root.\r\n    const inShadowDom = 'getRootNode' in el ? el.getRootNode() instanceof window.ShadowRoot : false;\r\n    const rootNode = inShadowDom ? el.getRootNode() : el.ownerDocument.body;\r\n    if (!el.ownerDocument.defaultView || !rootNode.contains(el)) {\r\n      log$1.warn('The element supplied is not included in the DOM');\r\n    }\r\n    options = options || {};\r\n\r\n    // Store a copy of the el before modification, if it is to be restored in destroy()\r\n    // If div ingest, store the parent div\r\n    if (options.restoreEl === true) {\r\n      options.restoreEl = (el.parentNode && el.parentNode.hasAttribute && el.parentNode.hasAttribute('data-vjs-player') ? el.parentNode : el).cloneNode(true);\r\n    }\r\n    hooks('beforesetup').forEach(hookFunction => {\r\n      const opts = hookFunction(el, merge$2(options));\r\n      if (!isObject$1(opts) || Array.isArray(opts)) {\r\n        log$1.error('please return an object in beforesetup hooks');\r\n        return;\r\n      }\r\n      options = merge$2(options, opts);\r\n    });\r\n\r\n    // We get the current \"Player\" component here in case an integration has\r\n    // replaced it with a custom player.\r\n    const PlayerComponent = Component$1.getComponent('Player');\r\n    player = new PlayerComponent(el, options, ready);\r\n    hooks('setup').forEach(hookFunction => hookFunction(player));\r\n    return player;\r\n  }\r\n  videojs.hooks_ = hooks_;\r\n  videojs.hooks = hooks;\r\n  videojs.hook = hook;\r\n  videojs.hookOnce = hookOnce;\r\n  videojs.removeHook = removeHook;\r\n\r\n  // Add default styles\r\n  if (window.VIDEOJS_NO_DYNAMIC_STYLE !== true && isReal()) {\r\n    let style = $('.vjs-styles-defaults');\r\n    if (!style) {\r\n      style = createStyleElement('vjs-styles-defaults');\r\n      const head = $('head');\r\n      if (head) {\r\n        head.insertBefore(style, head.firstChild);\r\n      }\r\n      setTextContent(style, `\r\n      .video-js {\r\n        width: 300px;\r\n        height: 150px;\r\n      }\r\n\r\n      .vjs-fluid:not(.vjs-audio-only-mode) {\r\n        padding-top: 56.25%\r\n      }\r\n    `);\r\n    }\r\n  }\r\n\r\n  // Run Auto-load players\r\n  // You have to wait at least once in case this script is loaded after your\r\n  // video in the DOM (weird behavior only with minified version)\r\n  autoSetupTimeout(1, videojs);\r\n\r\n  /**\r\n   * Current Video.js version. Follows [semantic versioning](https://semver.org/).\r\n   *\r\n   * @type {string}\r\n   */\r\n  videojs.VERSION = version$5;\r\n\r\n  /**\r\n   * The global options object. These are the settings that take effect\r\n   * if no overrides are specified when the player is created.\r\n   *\r\n   * @type {Object}\r\n   */\r\n  videojs.options = Player.prototype.options_;\r\n\r\n  /**\r\n   * Get an object with the currently created players, keyed by player ID\r\n   *\r\n   * @return {Object}\r\n   *         The created players\r\n   */\r\n  videojs.getPlayers = () => Player.players;\r\n\r\n  /**\r\n   * Get a single player based on an ID or DOM element.\r\n   *\r\n   * This is useful if you want to check if an element or ID has an associated\r\n   * Video.js player, but not create one if it doesn't.\r\n   *\r\n   * @param   {string|Element} id\r\n   *          An HTML element - `<video>`, `<audio>`, or `<video-js>` -\r\n   *          or a string matching the `id` of such an element.\r\n   *\r\n   * @return {Player|undefined}\r\n   *          A player instance or `undefined` if there is no player instance\r\n   *          matching the argument.\r\n   */\r\n  videojs.getPlayer = id => {\r\n    const players = Player.players;\r\n    let tag;\r\n    if (typeof id === 'string') {\r\n      const nId = normalizeId(id);\r\n      const player = players[nId];\r\n      if (player) {\r\n        return player;\r\n      }\r\n      tag = $('#' + nId);\r\n    } else {\r\n      tag = id;\r\n    }\r\n    if (isEl(tag)) {\r\n      const {\r\n        player,\r\n        playerId\r\n      } = tag;\r\n\r\n      // Element may have a `player` property referring to an already created\r\n      // player instance. If so, return that.\r\n      if (player || players[playerId]) {\r\n        return player || players[playerId];\r\n      }\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Returns an array of all current players.\r\n   *\r\n   * @return {Array}\r\n   *         An array of all players. The array will be in the order that\r\n   *         `Object.keys` provides, which could potentially vary between\r\n   *         JavaScript engines.\r\n   *\r\n   */\r\n  videojs.getAllPlayers = () =>\r\n  // Disposed players leave a key with a `null` value, so we need to make sure\r\n  // we filter those out.\r\n  Object.keys(Player.players).map(k => Player.players[k]).filter(Boolean);\r\n  videojs.players = Player.players;\r\n  videojs.getComponent = Component$1.getComponent;\r\n\r\n  /**\r\n   * Register a component so it can referred to by name. Used when adding to other\r\n   * components, either through addChild `component.addChild('myComponent')` or through\r\n   * default children options  `{ children: ['myComponent'] }`.\r\n   *\r\n   * > NOTE: You could also just initialize the component before adding.\r\n   * `component.addChild(new MyComponent());`\r\n   *\r\n   * @param {string} name\r\n   *        The class name of the component\r\n   *\r\n   * @param {typeof Component} comp\r\n   *        The component class\r\n   *\r\n   * @return {typeof Component}\r\n   *         The newly registered component\r\n   */\r\n  videojs.registerComponent = (name, comp) => {\r\n    if (Tech.isTech(comp)) {\r\n      log$1.warn(`The ${name} tech was registered as a component. It should instead be registered using videojs.registerTech(name, tech)`);\r\n    }\r\n    return Component$1.registerComponent.call(Component$1, name, comp);\r\n  };\r\n  videojs.getTech = Tech.getTech;\r\n  videojs.registerTech = Tech.registerTech;\r\n  videojs.use = use;\r\n\r\n  /**\r\n   * An object that can be returned by a middleware to signify\r\n   * that the middleware is being terminated.\r\n   *\r\n   * @type {object}\r\n   * @property {object} middleware.TERMINATOR\r\n   */\r\n  Object.defineProperty(videojs, 'middleware', {\r\n    value: {},\r\n    writeable: false,\r\n    enumerable: true\r\n  });\r\n  Object.defineProperty(videojs.middleware, 'TERMINATOR', {\r\n    value: TERMINATOR,\r\n    writeable: false,\r\n    enumerable: true\r\n  });\r\n\r\n  /**\r\n   * A reference to the {@link module:browser|browser utility module} as an object.\r\n   *\r\n   * @type {Object}\r\n   * @see  {@link module:browser|browser}\r\n   */\r\n  videojs.browser = browser;\r\n\r\n  /**\r\n   * A reference to the {@link module:obj|obj utility module} as an object.\r\n   *\r\n   * @type {Object}\r\n   * @see  {@link module:obj|obj}\r\n   */\r\n  videojs.obj = Obj;\r\n\r\n  /**\r\n   * Deprecated reference to the {@link module:obj.merge|merge function}\r\n   *\r\n   * @type {Function}\r\n   * @see {@link module:obj.merge|merge}\r\n   * @deprecated Deprecated and will be removed in 9.0. Please use videojs.obj.merge instead.\r\n   */\r\n  videojs.mergeOptions = deprecateForMajor(9, 'videojs.mergeOptions', 'videojs.obj.merge', merge$2);\r\n\r\n  /**\r\n   * Deprecated reference to the {@link module:obj.defineLazyProperty|defineLazyProperty function}\r\n   *\r\n   * @type {Function}\r\n   * @see {@link module:obj.defineLazyProperty|defineLazyProperty}\r\n   * @deprecated Deprecated and will be removed in 9.0. Please use videojs.obj.defineLazyProperty instead.\r\n   */\r\n  videojs.defineLazyProperty = deprecateForMajor(9, 'videojs.defineLazyProperty', 'videojs.obj.defineLazyProperty', defineLazyProperty);\r\n\r\n  /**\r\n   * Deprecated reference to the {@link module:fn.bind_|fn.bind_ function}\r\n   *\r\n   * @type {Function}\r\n   * @see {@link module:fn.bind_|fn.bind_}\r\n   * @deprecated Deprecated and will be removed in 9.0. Please use native Function.prototype.bind instead.\r\n   */\r\n  videojs.bind = deprecateForMajor(9, 'videojs.bind', 'native Function.prototype.bind', bind_);\r\n  videojs.registerPlugin = Plugin.registerPlugin;\r\n  videojs.deregisterPlugin = Plugin.deregisterPlugin;\r\n\r\n  /**\r\n   * Deprecated method to register a plugin with Video.js\r\n   *\r\n   * @deprecated Deprecated and will be removed in 9.0. Use videojs.registerPlugin() instead.\r\n   *\r\n   * @param {string} name\r\n   *        The plugin name\r\n  *\r\n   * @param {typeof Plugin|Function} plugin\r\n   *         The plugin sub-class or function\r\n   *\r\n   * @return {typeof Plugin|Function}\r\n   */\r\n  videojs.plugin = (name, plugin) => {\r\n    log$1.warn('videojs.plugin() is deprecated; use videojs.registerPlugin() instead');\r\n    return Plugin.registerPlugin(name, plugin);\r\n  };\r\n  videojs.getPlugins = Plugin.getPlugins;\r\n  videojs.getPlugin = Plugin.getPlugin;\r\n  videojs.getPluginVersion = Plugin.getPluginVersion;\r\n\r\n  /**\r\n   * Adding languages so that they're available to all players.\r\n   * Example: `videojs.addLanguage('es', { 'Hello': 'Hola' });`\r\n   *\r\n   * @param {string} code\r\n   *        The language code or dictionary property\r\n   *\r\n   * @param {Object} data\r\n   *        The data values to be translated\r\n   *\r\n   * @return {Object}\r\n   *         The resulting language dictionary object\r\n   */\r\n  videojs.addLanguage = function (code, data) {\r\n    code = ('' + code).toLowerCase();\r\n    videojs.options.languages = merge$2(videojs.options.languages, {\r\n      [code]: data\r\n    });\r\n    return videojs.options.languages[code];\r\n  };\r\n\r\n  /**\r\n   * A reference to the {@link module:log|log utility module} as an object.\r\n   *\r\n   * @type {Function}\r\n   * @see  {@link module:log|log}\r\n   */\r\n  videojs.log = log$1;\r\n  videojs.createLogger = createLogger;\r\n\r\n  /**\r\n   * A reference to the {@link module:time|time utility module} as an object.\r\n   *\r\n   * @type {Object}\r\n   * @see {@link module:time|time}\r\n   */\r\n  videojs.time = Time;\r\n\r\n  /**\r\n   * Deprecated reference to the {@link module:time.createTimeRanges|createTimeRanges function}\r\n   *\r\n   * @type {Function}\r\n   * @see {@link module:time.createTimeRanges|createTimeRanges}\r\n   * @deprecated Deprecated and will be removed in 9.0. Please use videojs.time.createTimeRanges instead.\r\n   */\r\n  videojs.createTimeRange = deprecateForMajor(9, 'videojs.createTimeRange', 'videojs.time.createTimeRanges', createTimeRanges$1);\r\n\r\n  /**\r\n   * Deprecated reference to the {@link module:time.createTimeRanges|createTimeRanges function}\r\n   *\r\n   * @type {Function}\r\n   * @see {@link module:time.createTimeRanges|createTimeRanges}\r\n   * @deprecated Deprecated and will be removed in 9.0. Please use videojs.time.createTimeRanges instead.\r\n   */\r\n  videojs.createTimeRanges = deprecateForMajor(9, 'videojs.createTimeRanges', 'videojs.time.createTimeRanges', createTimeRanges$1);\r\n\r\n  /**\r\n   * Deprecated reference to the {@link module:time.formatTime|formatTime function}\r\n   *\r\n   * @type {Function}\r\n   * @see {@link module:time.formatTime|formatTime}\r\n   * @deprecated Deprecated and will be removed in 9.0. Please use videojs.time.format instead.\r\n   */\r\n  videojs.formatTime = deprecateForMajor(9, 'videojs.formatTime', 'videojs.time.formatTime', formatTime);\r\n\r\n  /**\r\n   * Deprecated reference to the {@link module:time.setFormatTime|setFormatTime function}\r\n   *\r\n   * @type {Function}\r\n   * @see {@link module:time.setFormatTime|setFormatTime}\r\n   * @deprecated Deprecated and will be removed in 9.0. Please use videojs.time.setFormat instead.\r\n   */\r\n  videojs.setFormatTime = deprecateForMajor(9, 'videojs.setFormatTime', 'videojs.time.setFormatTime', setFormatTime);\r\n\r\n  /**\r\n   * Deprecated reference to the {@link module:time.resetFormatTime|resetFormatTime function}\r\n   *\r\n   * @type {Function}\r\n   * @see {@link module:time.resetFormatTime|resetFormatTime}\r\n   * @deprecated Deprecated and will be removed in 9.0. Please use videojs.time.resetFormat instead.\r\n   */\r\n  videojs.resetFormatTime = deprecateForMajor(9, 'videojs.resetFormatTime', 'videojs.time.resetFormatTime', resetFormatTime);\r\n\r\n  /**\r\n   * Deprecated reference to the {@link module:url.parseUrl|Url.parseUrl function}\r\n   *\r\n   * @type {Function}\r\n   * @see {@link module:url.parseUrl|parseUrl}\r\n   * @deprecated Deprecated and will be removed in 9.0. Please use videojs.url.parseUrl instead.\r\n   */\r\n  videojs.parseUrl = deprecateForMajor(9, 'videojs.parseUrl', 'videojs.url.parseUrl', parseUrl);\r\n\r\n  /**\r\n   * Deprecated reference to the {@link module:url.isCrossOrigin|Url.isCrossOrigin function}\r\n   *\r\n   * @type {Function}\r\n   * @see {@link module:url.isCrossOrigin|isCrossOrigin}\r\n   * @deprecated Deprecated and will be removed in 9.0. Please use videojs.url.isCrossOrigin instead.\r\n   */\r\n  videojs.isCrossOrigin = deprecateForMajor(9, 'videojs.isCrossOrigin', 'videojs.url.isCrossOrigin', isCrossOrigin);\r\n  videojs.EventTarget = EventTarget$2;\r\n  videojs.any = any;\r\n  videojs.on = on;\r\n  videojs.one = one;\r\n  videojs.off = off;\r\n  videojs.trigger = trigger;\r\n\r\n  /**\r\n   * A cross-browser XMLHttpRequest wrapper.\r\n   *\r\n   * @function\r\n   * @param    {Object} options\r\n   *           Settings for the request.\r\n   *\r\n   * @return   {XMLHttpRequest|XDomainRequest}\r\n   *           The request object.\r\n   *\r\n   * @see      https://github.com/Raynos/xhr\r\n   */\r\n  videojs.xhr = lib;\r\n  videojs.TextTrack = TextTrack;\r\n  videojs.AudioTrack = AudioTrack;\r\n  videojs.VideoTrack = VideoTrack;\r\n  ['isEl', 'isTextNode', 'createEl', 'hasClass', 'addClass', 'removeClass', 'toggleClass', 'setAttributes', 'getAttributes', 'emptyEl', 'appendContent', 'insertContent'].forEach(k => {\r\n    videojs[k] = function () {\r\n      log$1.warn(`videojs.${k}() is deprecated; use videojs.dom.${k}() instead`);\r\n      return Dom[k].apply(null, arguments);\r\n    };\r\n  });\r\n  videojs.computedStyle = deprecateForMajor(9, 'videojs.computedStyle', 'videojs.dom.computedStyle', computedStyle);\r\n\r\n  /**\r\n   * A reference to the {@link module:dom|DOM utility module} as an object.\r\n   *\r\n   * @type {Object}\r\n   * @see {@link module:dom|dom}\r\n   */\r\n  videojs.dom = Dom;\r\n\r\n  /**\r\n   * A reference to the {@link module:fn|fn utility module} as an object.\r\n   *\r\n   * @type {Object}\r\n   * @see {@link module:fn|fn}\r\n   */\r\n  videojs.fn = Fn;\r\n\r\n  /**\r\n   * A reference to the {@link module:num|num utility module} as an object.\r\n   *\r\n   * @type {Object}\r\n   * @see {@link module:num|num}\r\n   */\r\n  videojs.num = Num;\r\n\r\n  /**\r\n   * A reference to the {@link module:str|str utility module} as an object.\r\n   *\r\n   * @type {Object}\r\n   * @see {@link module:str|str}\r\n   */\r\n  videojs.str = Str;\r\n\r\n  /**\r\n   * A reference to the {@link module:url|URL utility module} as an object.\r\n   *\r\n   * @type {Object}\r\n   * @see {@link module:url|url}\r\n   */\r\n  videojs.url = Url;\r\n\r\n  // The list of possible error types to occur in video.js\r\n  videojs.Error = VjsErrors;\r\n\r\n  createCommonjsModule(function (module, exports) {\r\n    /*! @name videojs-contrib-quality-levels @version 4.1.0 @license Apache-2.0 */\r\n    (function (global, factory) {\r\n      module.exports = factory(videojs) ;\r\n    })(commonjsGlobal, function (videojs) {\r\n\r\n      function _interopDefaultLegacy(e) {\r\n        return e && typeof e === 'object' && 'default' in e ? e : {\r\n          'default': e\r\n        };\r\n      }\r\n      var videojs__default = /*#__PURE__*/_interopDefaultLegacy(videojs);\r\n\r\n      /**\r\n       * A single QualityLevel.\r\n       *\r\n       * interface QualityLevel {\r\n       *   readonly attribute DOMString id;\r\n       *            attribute DOMString label;\r\n       *   readonly attribute long width;\r\n       *   readonly attribute long height;\r\n       *   readonly attribute long bitrate;\r\n       *            attribute boolean enabled;\r\n       * };\r\n       *\r\n       * @class QualityLevel\r\n       */\r\n      class QualityLevel {\r\n        /**\r\n         * Creates a QualityLevel\r\n         *\r\n         * @param {Representation|Object} representation The representation of the quality level\r\n         * @param {string}   representation.id        Unique id of the QualityLevel\r\n         * @param {number=}  representation.width     Resolution width of the QualityLevel\r\n         * @param {number=}  representation.height    Resolution height of the QualityLevel\r\n         * @param {number}   representation.bandwidth Bitrate of the QualityLevel\r\n         * @param {number=}  representation.frameRate Frame-rate of the QualityLevel\r\n         * @param {Function} representation.enabled   Callback to enable/disable QualityLevel\r\n         */\r\n        constructor(representation) {\r\n          let level = this; // eslint-disable-line\r\n\r\n          level.id = representation.id;\r\n          level.label = level.id;\r\n          level.width = representation.width;\r\n          level.height = representation.height;\r\n          level.bitrate = representation.bandwidth;\r\n          level.frameRate = representation.frameRate;\r\n          level.enabled_ = representation.enabled;\r\n          Object.defineProperty(level, 'enabled', {\r\n            /**\r\n             * Get whether the QualityLevel is enabled.\r\n             *\r\n             * @return {boolean} True if the QualityLevel is enabled.\r\n             */\r\n            get() {\r\n              return level.enabled_();\r\n            },\r\n            /**\r\n             * Enable or disable the QualityLevel.\r\n             *\r\n             * @param {boolean} enable true to enable QualityLevel, false to disable.\r\n             */\r\n            set(enable) {\r\n              level.enabled_(enable);\r\n            }\r\n          });\r\n          return level;\r\n        }\r\n      }\r\n\r\n      /**\r\n       * A list of QualityLevels.\r\n       *\r\n       * interface QualityLevelList : EventTarget {\r\n       *   getter QualityLevel (unsigned long index);\r\n       *   readonly attribute unsigned long length;\r\n       *   readonly attribute long selectedIndex;\r\n       *\r\n       *   void addQualityLevel(QualityLevel qualityLevel)\r\n       *   void removeQualityLevel(QualityLevel remove)\r\n       *   QualityLevel? getQualityLevelById(DOMString id);\r\n       *\r\n       *   attribute EventHandler onchange;\r\n       *   attribute EventHandler onaddqualitylevel;\r\n       *   attribute EventHandler onremovequalitylevel;\r\n       * };\r\n       *\r\n       * @extends videojs.EventTarget\r\n       * @class QualityLevelList\r\n       */\r\n      class QualityLevelList extends videojs__default[\"default\"].EventTarget {\r\n        /**\r\n         * Creates a QualityLevelList.\r\n         */\r\n        constructor() {\r\n          super();\r\n          let list = this; // eslint-disable-line\r\n\r\n          list.levels_ = [];\r\n          list.selectedIndex_ = -1;\r\n\r\n          /**\r\n           * Get the index of the currently selected QualityLevel.\r\n           *\r\n           * @returns {number} The index of the selected QualityLevel. -1 if none selected.\r\n           * @readonly\r\n           */\r\n          Object.defineProperty(list, 'selectedIndex', {\r\n            get() {\r\n              return list.selectedIndex_;\r\n            }\r\n          });\r\n\r\n          /**\r\n           * Get the length of the list of QualityLevels.\r\n           *\r\n           * @returns {number} The length of the list.\r\n           * @readonly\r\n           */\r\n          Object.defineProperty(list, 'length', {\r\n            get() {\r\n              return list.levels_.length;\r\n            }\r\n          });\r\n          list[Symbol.iterator] = () => list.levels_.values();\r\n          return list;\r\n        }\r\n\r\n        /**\r\n         * Adds a quality level to the list.\r\n         *\r\n         * @param {Representation|Object} representation The representation of the quality level\r\n         * @param {string}   representation.id        Unique id of the QualityLevel\r\n         * @param {number=}  representation.width     Resolution width of the QualityLevel\r\n         * @param {number=}  representation.height    Resolution height of the QualityLevel\r\n         * @param {number}   representation.bandwidth Bitrate of the QualityLevel\r\n         * @param {number=}  representation.frameRate Frame-rate of the QualityLevel\r\n         * @param {Function} representation.enabled   Callback to enable/disable QualityLevel\r\n         * @return {QualityLevel} the QualityLevel added to the list\r\n         * @method addQualityLevel\r\n         */\r\n        addQualityLevel(representation) {\r\n          let qualityLevel = this.getQualityLevelById(representation.id);\r\n\r\n          // Do not add duplicate quality levels\r\n          if (qualityLevel) {\r\n            return qualityLevel;\r\n          }\r\n          const index = this.levels_.length;\r\n          qualityLevel = new QualityLevel(representation);\r\n          if (!('' + index in this)) {\r\n            Object.defineProperty(this, index, {\r\n              get() {\r\n                return this.levels_[index];\r\n              }\r\n            });\r\n          }\r\n          this.levels_.push(qualityLevel);\r\n          this.trigger({\r\n            qualityLevel,\r\n            type: 'addqualitylevel'\r\n          });\r\n          return qualityLevel;\r\n        }\r\n\r\n        /**\r\n         * Removes a quality level from the list.\r\n         *\r\n         * @param {QualityLevel} qualityLevel The QualityLevel to remove from the list.\r\n         * @return {QualityLevel|null} the QualityLevel removed or null if nothing removed\r\n         * @method removeQualityLevel\r\n         */\r\n        removeQualityLevel(qualityLevel) {\r\n          let removed = null;\r\n          for (let i = 0, l = this.length; i < l; i++) {\r\n            if (this[i] === qualityLevel) {\r\n              removed = this.levels_.splice(i, 1)[0];\r\n              if (this.selectedIndex_ === i) {\r\n                this.selectedIndex_ = -1;\r\n              } else if (this.selectedIndex_ > i) {\r\n                this.selectedIndex_--;\r\n              }\r\n              break;\r\n            }\r\n          }\r\n          if (removed) {\r\n            this.trigger({\r\n              qualityLevel,\r\n              type: 'removequalitylevel'\r\n            });\r\n          }\r\n          return removed;\r\n        }\r\n\r\n        /**\r\n         * Searches for a QualityLevel with the given id.\r\n         *\r\n         * @param {string} id The id of the QualityLevel to find.\r\n         * @return {QualityLevel|null} The QualityLevel with id, or null if not found.\r\n         * @method getQualityLevelById\r\n         */\r\n        getQualityLevelById(id) {\r\n          for (let i = 0, l = this.length; i < l; i++) {\r\n            const level = this[i];\r\n            if (level.id === id) {\r\n              return level;\r\n            }\r\n          }\r\n          return null;\r\n        }\r\n\r\n        /**\r\n         * Resets the list of QualityLevels to empty\r\n         *\r\n         * @method dispose\r\n         */\r\n        dispose() {\r\n          this.selectedIndex_ = -1;\r\n          this.levels_.length = 0;\r\n        }\r\n      }\r\n\r\n      /**\r\n       * change - The selected QualityLevel has changed.\r\n       * addqualitylevel - A QualityLevel has been added to the QualityLevelList.\r\n       * removequalitylevel - A QualityLevel has been removed from the QualityLevelList.\r\n       */\r\n      QualityLevelList.prototype.allowedEvents_ = {\r\n        change: 'change',\r\n        addqualitylevel: 'addqualitylevel',\r\n        removequalitylevel: 'removequalitylevel'\r\n      };\r\n\r\n      // emulate attribute EventHandler support to allow for feature detection\r\n      for (const event in QualityLevelList.prototype.allowedEvents_) {\r\n        QualityLevelList.prototype['on' + event] = null;\r\n      }\r\n      var version = \"4.1.0\";\r\n\r\n      /**\r\n       * Initialization function for the qualityLevels plugin. Sets up the QualityLevelList and\r\n       * event handlers.\r\n       *\r\n       * @param {Player} player Player object.\r\n       * @param {Object} options Plugin options object.\r\n       * @return {QualityLevelList} a list of QualityLevels\r\n       */\r\n      const initPlugin = function (player, options) {\r\n        const originalPluginFn = player.qualityLevels;\r\n        const qualityLevelList = new QualityLevelList();\r\n        const disposeHandler = function () {\r\n          qualityLevelList.dispose();\r\n          player.qualityLevels = originalPluginFn;\r\n          player.off('dispose', disposeHandler);\r\n        };\r\n        player.on('dispose', disposeHandler);\r\n        player.qualityLevels = () => qualityLevelList;\r\n        player.qualityLevels.VERSION = version;\r\n        return qualityLevelList;\r\n      };\r\n\r\n      /**\r\n       * A video.js plugin.\r\n       *\r\n       * In the plugin function, the value of `this` is a video.js `Player`\r\n       * instance. You cannot rely on the player being in a \"ready\" state here,\r\n       * depending on how the plugin is invoked. This may or may not be important\r\n       * to you; if not, remove the wait for \"ready\"!\r\n       *\r\n       * @param {Object} options Plugin options object\r\n       * @return {QualityLevelList} a list of QualityLevels\r\n       */\r\n      const qualityLevels = function (options) {\r\n        return initPlugin(this, videojs__default[\"default\"].obj.merge({}, options));\r\n      };\r\n\r\n      // Register the plugin with video.js.\r\n      videojs__default[\"default\"].registerPlugin('qualityLevels', qualityLevels);\r\n\r\n      // Include the version number.\r\n      qualityLevels.VERSION = version;\r\n      return qualityLevels;\r\n    });\r\n  });\r\n\r\n  var DEFAULT_LOCATION = 'https://example.com';\r\n  var resolveUrl$1 = function resolveUrl(baseUrl, relativeUrl) {\r\n    // return early if we don't need to resolve\r\n    if (/^[a-z]+:/i.test(relativeUrl)) {\r\n      return relativeUrl;\r\n    } // if baseUrl is a data URI, ignore it and resolve everything relative to window.location\r\n\r\n    if (/^data:/.test(baseUrl)) {\r\n      baseUrl = window.location && window.location.href || '';\r\n    }\r\n    var protocolLess = /^\\/\\//.test(baseUrl); // remove location if window.location isn't available (i.e. we're in node)\r\n    // and if baseUrl isn't an absolute url\r\n\r\n    var removeLocation = !window.location && !/\\/\\//i.test(baseUrl); // if the base URL is relative then combine with the current location\r\n\r\n    baseUrl = new window.URL(baseUrl, window.location || DEFAULT_LOCATION);\r\n    var newUrl = new URL(relativeUrl, baseUrl); // if we're a protocol-less url, remove the protocol\r\n    // and if we're location-less, remove the location\r\n    // otherwise, return the url unmodified\r\n\r\n    if (removeLocation) {\r\n      return newUrl.href.slice(DEFAULT_LOCATION.length);\r\n    } else if (protocolLess) {\r\n      return newUrl.href.slice(newUrl.protocol.length);\r\n    }\r\n    return newUrl.href;\r\n  };\r\n\r\n  /**\r\n   * @file stream.js\r\n   */\r\n\r\n  /**\r\n   * A lightweight readable stream implemention that handles event dispatching.\r\n   *\r\n   * @class Stream\r\n   */\r\n  var Stream = /*#__PURE__*/function () {\r\n    function Stream() {\r\n      this.listeners = {};\r\n    }\r\n    /**\r\n     * Add a listener for a specified event type.\r\n     *\r\n     * @param {string} type the event name\r\n     * @param {Function} listener the callback to be invoked when an event of\r\n     * the specified type occurs\r\n     */\r\n\r\n    var _proto = Stream.prototype;\r\n    _proto.on = function on(type, listener) {\r\n      if (!this.listeners[type]) {\r\n        this.listeners[type] = [];\r\n      }\r\n      this.listeners[type].push(listener);\r\n    }\r\n    /**\r\n     * Remove a listener for a specified event type.\r\n     *\r\n     * @param {string} type the event name\r\n     * @param {Function} listener  a function previously registered for this\r\n     * type of event through `on`\r\n     * @return {boolean} if we could turn it off or not\r\n     */;\r\n    _proto.off = function off(type, listener) {\r\n      if (!this.listeners[type]) {\r\n        return false;\r\n      }\r\n      var index = this.listeners[type].indexOf(listener); // TODO: which is better?\r\n      // In Video.js we slice listener functions\r\n      // on trigger so that it does not mess up the order\r\n      // while we loop through.\r\n      //\r\n      // Here we slice on off so that the loop in trigger\r\n      // can continue using it's old reference to loop without\r\n      // messing up the order.\r\n\r\n      this.listeners[type] = this.listeners[type].slice(0);\r\n      this.listeners[type].splice(index, 1);\r\n      return index > -1;\r\n    }\r\n    /**\r\n     * Trigger an event of the specified type on this stream. Any additional\r\n     * arguments to this function are passed as parameters to event listeners.\r\n     *\r\n     * @param {string} type the event name\r\n     */;\r\n    _proto.trigger = function trigger(type) {\r\n      var callbacks = this.listeners[type];\r\n      if (!callbacks) {\r\n        return;\r\n      } // Slicing the arguments on every invocation of this method\r\n      // can add a significant amount of overhead. Avoid the\r\n      // intermediate object creation for the common case of a\r\n      // single callback argument\r\n\r\n      if (arguments.length === 2) {\r\n        var length = callbacks.length;\r\n        for (var i = 0; i < length; ++i) {\r\n          callbacks[i].call(this, arguments[1]);\r\n        }\r\n      } else {\r\n        var args = Array.prototype.slice.call(arguments, 1);\r\n        var _length = callbacks.length;\r\n        for (var _i = 0; _i < _length; ++_i) {\r\n          callbacks[_i].apply(this, args);\r\n        }\r\n      }\r\n    }\r\n    /**\r\n     * Destroys the stream and cleans up.\r\n     */;\r\n    _proto.dispose = function dispose() {\r\n      this.listeners = {};\r\n    }\r\n    /**\r\n     * Forwards all `data` events on this stream to the destination stream. The\r\n     * destination stream should provide a method `push` to receive the data\r\n     * events as they arrive.\r\n     *\r\n     * @param {Stream} destination the stream that will receive all `data` events\r\n     * @see http://nodejs.org/api/stream.html#stream_readable_pipe_destination_options\r\n     */;\r\n    _proto.pipe = function pipe(destination) {\r\n      this.on('data', function (data) {\r\n        destination.push(data);\r\n      });\r\n    };\r\n    return Stream;\r\n  }();\r\n\r\n  var atob = function atob(s) {\r\n    return window.atob ? window.atob(s) : Buffer.from(s, 'base64').toString('binary');\r\n  };\r\n  function decodeB64ToUint8Array(b64Text) {\r\n    var decodedString = atob(b64Text);\r\n    var array = new Uint8Array(decodedString.length);\r\n    for (var i = 0; i < decodedString.length; i++) {\r\n      array[i] = decodedString.charCodeAt(i);\r\n    }\r\n    return array;\r\n  }\r\n\r\n  /*! @name m3u8-parser @version 7.2.0 @license Apache-2.0 */\r\n\r\n  /**\r\n   * @file m3u8/line-stream.js\r\n   */\r\n  /**\r\n   * A stream that buffers string input and generates a `data` event for each\r\n   * line.\r\n   *\r\n   * @class LineStream\r\n   * @extends Stream\r\n   */\r\n\r\n  class LineStream extends Stream {\r\n    constructor() {\r\n      super();\r\n      this.buffer = '';\r\n    }\r\n    /**\r\n     * Add new data to be parsed.\r\n     *\r\n     * @param {string} data the text to process\r\n     */\r\n\r\n    push(data) {\r\n      let nextNewline;\r\n      this.buffer += data;\r\n      nextNewline = this.buffer.indexOf('\\n');\r\n      for (; nextNewline > -1; nextNewline = this.buffer.indexOf('\\n')) {\r\n        this.trigger('data', this.buffer.substring(0, nextNewline));\r\n        this.buffer = this.buffer.substring(nextNewline + 1);\r\n      }\r\n    }\r\n  }\r\n  const TAB = String.fromCharCode(0x09);\r\n  const parseByterange = function (byterangeString) {\r\n    // optionally match and capture 0+ digits before `@`\r\n    // optionally match and capture 0+ digits after `@`\r\n    const match = /([0-9.]*)?@?([0-9.]*)?/.exec(byterangeString || '');\r\n    const result = {};\r\n    if (match[1]) {\r\n      result.length = parseInt(match[1], 10);\r\n    }\r\n    if (match[2]) {\r\n      result.offset = parseInt(match[2], 10);\r\n    }\r\n    return result;\r\n  };\r\n  /**\r\n   * \"forgiving\" attribute list psuedo-grammar:\r\n   * attributes -> keyvalue (',' keyvalue)*\r\n   * keyvalue   -> key '=' value\r\n   * key        -> [^=]*\r\n   * value      -> '\"' [^\"]* '\"' | [^,]*\r\n   */\r\n\r\n  const attributeSeparator = function () {\r\n    const key = '[^=]*';\r\n    const value = '\"[^\"]*\"|[^,]*';\r\n    const keyvalue = '(?:' + key + ')=(?:' + value + ')';\r\n    return new RegExp('(?:^|,)(' + keyvalue + ')');\r\n  };\r\n  /**\r\n   * Parse attributes from a line given the separator\r\n   *\r\n   * @param {string} attributes the attribute line to parse\r\n   */\r\n\r\n  const parseAttributes$1 = function (attributes) {\r\n    const result = {};\r\n    if (!attributes) {\r\n      return result;\r\n    } // split the string using attributes as the separator\r\n\r\n    const attrs = attributes.split(attributeSeparator());\r\n    let i = attrs.length;\r\n    let attr;\r\n    while (i--) {\r\n      // filter out unmatched portions of the string\r\n      if (attrs[i] === '') {\r\n        continue;\r\n      } // split the key and value\r\n\r\n      attr = /([^=]*)=(.*)/.exec(attrs[i]).slice(1); // trim whitespace and remove optional quotes around the value\r\n\r\n      attr[0] = attr[0].replace(/^\\s+|\\s+$/g, '');\r\n      attr[1] = attr[1].replace(/^\\s+|\\s+$/g, '');\r\n      attr[1] = attr[1].replace(/^['\"](.*)['\"]$/g, '$1');\r\n      result[attr[0]] = attr[1];\r\n    }\r\n    return result;\r\n  };\r\n  /**\r\n   * Converts a string into a resolution object\r\n   *\r\n   * @param {string} resolution a string such as 3840x2160\r\n   *\r\n   * @return {Object} An object representing the resolution\r\n   *\r\n   */\r\n\r\n  const parseResolution = resolution => {\r\n    const split = resolution.split('x');\r\n    const result = {};\r\n    if (split[0]) {\r\n      result.width = parseInt(split[0], 10);\r\n    }\r\n    if (split[1]) {\r\n      result.height = parseInt(split[1], 10);\r\n    }\r\n    return result;\r\n  };\r\n  /**\r\n   * A line-level M3U8 parser event stream. It expects to receive input one\r\n   * line at a time and performs a context-free parse of its contents. A stream\r\n   * interpretation of a manifest can be useful if the manifest is expected to\r\n   * be too large to fit comfortably into memory or the entirety of the input\r\n   * is not immediately available. Otherwise, it's probably much easier to work\r\n   * with a regular `Parser` object.\r\n   *\r\n   * Produces `data` events with an object that captures the parser's\r\n   * interpretation of the input. That object has a property `tag` that is one\r\n   * of `uri`, `comment`, or `tag`. URIs only have a single additional\r\n   * property, `line`, which captures the entirety of the input without\r\n   * interpretation. Comments similarly have a single additional property\r\n   * `text` which is the input without the leading `#`.\r\n   *\r\n   * Tags always have a property `tagType` which is the lower-cased version of\r\n   * the M3U8 directive without the `#EXT` or `#EXT-X-` prefix. For instance,\r\n   * `#EXT-X-MEDIA-SEQUENCE` becomes `media-sequence` when parsed. Unrecognized\r\n   * tags are given the tag type `unknown` and a single additional property\r\n   * `data` with the remainder of the input.\r\n   *\r\n   * @class ParseStream\r\n   * @extends Stream\r\n   */\r\n\r\n  class ParseStream extends Stream {\r\n    constructor() {\r\n      super();\r\n      this.customParsers = [];\r\n      this.tagMappers = [];\r\n    }\r\n    /**\r\n     * Parses an additional line of input.\r\n     *\r\n     * @param {string} line a single line of an M3U8 file to parse\r\n     */\r\n\r\n    push(line) {\r\n      let match;\r\n      let event; // strip whitespace\r\n\r\n      line = line.trim();\r\n      if (line.length === 0) {\r\n        // ignore empty lines\r\n        return;\r\n      } // URIs\r\n\r\n      if (line[0] !== '#') {\r\n        this.trigger('data', {\r\n          type: 'uri',\r\n          uri: line\r\n        });\r\n        return;\r\n      } // map tags\r\n\r\n      const newLines = this.tagMappers.reduce((acc, mapper) => {\r\n        const mappedLine = mapper(line); // skip if unchanged\r\n\r\n        if (mappedLine === line) {\r\n          return acc;\r\n        }\r\n        return acc.concat([mappedLine]);\r\n      }, [line]);\r\n      newLines.forEach(newLine => {\r\n        for (let i = 0; i < this.customParsers.length; i++) {\r\n          if (this.customParsers[i].call(this, newLine)) {\r\n            return;\r\n          }\r\n        } // Comments\r\n\r\n        if (newLine.indexOf('#EXT') !== 0) {\r\n          this.trigger('data', {\r\n            type: 'comment',\r\n            text: newLine.slice(1)\r\n          });\r\n          return;\r\n        } // strip off any carriage returns here so the regex matching\r\n        // doesn't have to account for them.\r\n\r\n        newLine = newLine.replace('\\r', ''); // Tags\r\n\r\n        match = /^#EXTM3U/.exec(newLine);\r\n        if (match) {\r\n          this.trigger('data', {\r\n            type: 'tag',\r\n            tagType: 'm3u'\r\n          });\r\n          return;\r\n        }\r\n        match = /^#EXTINF:([0-9\\.]*)?,?(.*)?$/.exec(newLine);\r\n        if (match) {\r\n          event = {\r\n            type: 'tag',\r\n            tagType: 'inf'\r\n          };\r\n          if (match[1]) {\r\n            event.duration = parseFloat(match[1]);\r\n          }\r\n          if (match[2]) {\r\n            event.title = match[2];\r\n          }\r\n          this.trigger('data', event);\r\n          return;\r\n        }\r\n        match = /^#EXT-X-TARGETDURATION:([0-9.]*)?/.exec(newLine);\r\n        if (match) {\r\n          event = {\r\n            type: 'tag',\r\n            tagType: 'targetduration'\r\n          };\r\n          if (match[1]) {\r\n            event.duration = parseInt(match[1], 10);\r\n          }\r\n          this.trigger('data', event);\r\n          return;\r\n        }\r\n        match = /^#EXT-X-VERSION:([0-9.]*)?/.exec(newLine);\r\n        if (match) {\r\n          event = {\r\n            type: 'tag',\r\n            tagType: 'version'\r\n          };\r\n          if (match[1]) {\r\n            event.version = parseInt(match[1], 10);\r\n          }\r\n          this.trigger('data', event);\r\n          return;\r\n        }\r\n        match = /^#EXT-X-MEDIA-SEQUENCE:(\\-?[0-9.]*)?/.exec(newLine);\r\n        if (match) {\r\n          event = {\r\n            type: 'tag',\r\n            tagType: 'media-sequence'\r\n          };\r\n          if (match[1]) {\r\n            event.number = parseInt(match[1], 10);\r\n          }\r\n          this.trigger('data', event);\r\n          return;\r\n        }\r\n        match = /^#EXT-X-DISCONTINUITY-SEQUENCE:(\\-?[0-9.]*)?/.exec(newLine);\r\n        if (match) {\r\n          event = {\r\n            type: 'tag',\r\n            tagType: 'discontinuity-sequence'\r\n          };\r\n          if (match[1]) {\r\n            event.number = parseInt(match[1], 10);\r\n          }\r\n          this.trigger('data', event);\r\n          return;\r\n        }\r\n        match = /^#EXT-X-PLAYLIST-TYPE:(.*)?$/.exec(newLine);\r\n        if (match) {\r\n          event = {\r\n            type: 'tag',\r\n            tagType: 'playlist-type'\r\n          };\r\n          if (match[1]) {\r\n            event.playlistType = match[1];\r\n          }\r\n          this.trigger('data', event);\r\n          return;\r\n        }\r\n        match = /^#EXT-X-BYTERANGE:(.*)?$/.exec(newLine);\r\n        if (match) {\r\n          event = _extends$1(parseByterange(match[1]), {\r\n            type: 'tag',\r\n            tagType: 'byterange'\r\n          });\r\n          this.trigger('data', event);\r\n          return;\r\n        }\r\n        match = /^#EXT-X-ALLOW-CACHE:(YES|NO)?/.exec(newLine);\r\n        if (match) {\r\n          event = {\r\n            type: 'tag',\r\n            tagType: 'allow-cache'\r\n          };\r\n          if (match[1]) {\r\n            event.allowed = !/NO/.test(match[1]);\r\n          }\r\n          this.trigger('data', event);\r\n          return;\r\n        }\r\n        match = /^#EXT-X-MAP:(.*)$/.exec(newLine);\r\n        if (match) {\r\n          event = {\r\n            type: 'tag',\r\n            tagType: 'map'\r\n          };\r\n          if (match[1]) {\r\n            const attributes = parseAttributes$1(match[1]);\r\n            if (attributes.URI) {\r\n              event.uri = attributes.URI;\r\n            }\r\n            if (attributes.BYTERANGE) {\r\n              event.byterange = parseByterange(attributes.BYTERANGE);\r\n            }\r\n          }\r\n          this.trigger('data', event);\r\n          return;\r\n        }\r\n        match = /^#EXT-X-STREAM-INF:(.*)$/.exec(newLine);\r\n        if (match) {\r\n          event = {\r\n            type: 'tag',\r\n            tagType: 'stream-inf'\r\n          };\r\n          if (match[1]) {\r\n            event.attributes = parseAttributes$1(match[1]);\r\n            if (event.attributes.RESOLUTION) {\r\n              event.attributes.RESOLUTION = parseResolution(event.attributes.RESOLUTION);\r\n            }\r\n            if (event.attributes.BANDWIDTH) {\r\n              event.attributes.BANDWIDTH = parseInt(event.attributes.BANDWIDTH, 10);\r\n            }\r\n            if (event.attributes['FRAME-RATE']) {\r\n              event.attributes['FRAME-RATE'] = parseFloat(event.attributes['FRAME-RATE']);\r\n            }\r\n            if (event.attributes['PROGRAM-ID']) {\r\n              event.attributes['PROGRAM-ID'] = parseInt(event.attributes['PROGRAM-ID'], 10);\r\n            }\r\n          }\r\n          this.trigger('data', event);\r\n          return;\r\n        }\r\n        match = /^#EXT-X-MEDIA:(.*)$/.exec(newLine);\r\n        if (match) {\r\n          event = {\r\n            type: 'tag',\r\n            tagType: 'media'\r\n          };\r\n          if (match[1]) {\r\n            event.attributes = parseAttributes$1(match[1]);\r\n          }\r\n          this.trigger('data', event);\r\n          return;\r\n        }\r\n        match = /^#EXT-X-ENDLIST/.exec(newLine);\r\n        if (match) {\r\n          this.trigger('data', {\r\n            type: 'tag',\r\n            tagType: 'endlist'\r\n          });\r\n          return;\r\n        }\r\n        match = /^#EXT-X-DISCONTINUITY/.exec(newLine);\r\n        if (match) {\r\n          this.trigger('data', {\r\n            type: 'tag',\r\n            tagType: 'discontinuity'\r\n          });\r\n          return;\r\n        }\r\n        match = /^#EXT-X-PROGRAM-DATE-TIME:(.*)$/.exec(newLine);\r\n        if (match) {\r\n          event = {\r\n            type: 'tag',\r\n            tagType: 'program-date-time'\r\n          };\r\n          if (match[1]) {\r\n            event.dateTimeString = match[1];\r\n            event.dateTimeObject = new Date(match[1]);\r\n          }\r\n          this.trigger('data', event);\r\n          return;\r\n        }\r\n        match = /^#EXT-X-KEY:(.*)$/.exec(newLine);\r\n        if (match) {\r\n          event = {\r\n            type: 'tag',\r\n            tagType: 'key'\r\n          };\r\n          if (match[1]) {\r\n            event.attributes = parseAttributes$1(match[1]); // parse the IV string into a Uint32Array\r\n\r\n            if (event.attributes.IV) {\r\n              if (event.attributes.IV.substring(0, 2).toLowerCase() === '0x') {\r\n                event.attributes.IV = event.attributes.IV.substring(2);\r\n              }\r\n              event.attributes.IV = event.attributes.IV.match(/.{8}/g);\r\n              event.attributes.IV[0] = parseInt(event.attributes.IV[0], 16);\r\n              event.attributes.IV[1] = parseInt(event.attributes.IV[1], 16);\r\n              event.attributes.IV[2] = parseInt(event.attributes.IV[2], 16);\r\n              event.attributes.IV[3] = parseInt(event.attributes.IV[3], 16);\r\n              event.attributes.IV = new Uint32Array(event.attributes.IV);\r\n            }\r\n          }\r\n          this.trigger('data', event);\r\n          return;\r\n        }\r\n        match = /^#EXT-X-START:(.*)$/.exec(newLine);\r\n        if (match) {\r\n          event = {\r\n            type: 'tag',\r\n            tagType: 'start'\r\n          };\r\n          if (match[1]) {\r\n            event.attributes = parseAttributes$1(match[1]);\r\n            event.attributes['TIME-OFFSET'] = parseFloat(event.attributes['TIME-OFFSET']);\r\n            event.attributes.PRECISE = /YES/.test(event.attributes.PRECISE);\r\n          }\r\n          this.trigger('data', event);\r\n          return;\r\n        }\r\n        match = /^#EXT-X-CUE-OUT-CONT:(.*)?$/.exec(newLine);\r\n        if (match) {\r\n          event = {\r\n            type: 'tag',\r\n            tagType: 'cue-out-cont'\r\n          };\r\n          if (match[1]) {\r\n            event.data = match[1];\r\n          } else {\r\n            event.data = '';\r\n          }\r\n          this.trigger('data', event);\r\n          return;\r\n        }\r\n        match = /^#EXT-X-CUE-OUT:(.*)?$/.exec(newLine);\r\n        if (match) {\r\n          event = {\r\n            type: 'tag',\r\n            tagType: 'cue-out'\r\n          };\r\n          if (match[1]) {\r\n            event.data = match[1];\r\n          } else {\r\n            event.data = '';\r\n          }\r\n          this.trigger('data', event);\r\n          return;\r\n        }\r\n        match = /^#EXT-X-CUE-IN:?(.*)?$/.exec(newLine);\r\n        if (match) {\r\n          event = {\r\n            type: 'tag',\r\n            tagType: 'cue-in'\r\n          };\r\n          if (match[1]) {\r\n            event.data = match[1];\r\n          } else {\r\n            event.data = '';\r\n          }\r\n          this.trigger('data', event);\r\n          return;\r\n        }\r\n        match = /^#EXT-X-SKIP:(.*)$/.exec(newLine);\r\n        if (match && match[1]) {\r\n          event = {\r\n            type: 'tag',\r\n            tagType: 'skip'\r\n          };\r\n          event.attributes = parseAttributes$1(match[1]);\r\n          if (event.attributes.hasOwnProperty('SKIPPED-SEGMENTS')) {\r\n            event.attributes['SKIPPED-SEGMENTS'] = parseInt(event.attributes['SKIPPED-SEGMENTS'], 10);\r\n          }\r\n          if (event.attributes.hasOwnProperty('RECENTLY-REMOVED-DATERANGES')) {\r\n            event.attributes['RECENTLY-REMOVED-DATERANGES'] = event.attributes['RECENTLY-REMOVED-DATERANGES'].split(TAB);\r\n          }\r\n          this.trigger('data', event);\r\n          return;\r\n        }\r\n        match = /^#EXT-X-PART:(.*)$/.exec(newLine);\r\n        if (match && match[1]) {\r\n          event = {\r\n            type: 'tag',\r\n            tagType: 'part'\r\n          };\r\n          event.attributes = parseAttributes$1(match[1]);\r\n          ['DURATION'].forEach(function (key) {\r\n            if (event.attributes.hasOwnProperty(key)) {\r\n              event.attributes[key] = parseFloat(event.attributes[key]);\r\n            }\r\n          });\r\n          ['INDEPENDENT', 'GAP'].forEach(function (key) {\r\n            if (event.attributes.hasOwnProperty(key)) {\r\n              event.attributes[key] = /YES/.test(event.attributes[key]);\r\n            }\r\n          });\r\n          if (event.attributes.hasOwnProperty('BYTERANGE')) {\r\n            event.attributes.byterange = parseByterange(event.attributes.BYTERANGE);\r\n          }\r\n          this.trigger('data', event);\r\n          return;\r\n        }\r\n        match = /^#EXT-X-SERVER-CONTROL:(.*)$/.exec(newLine);\r\n        if (match && match[1]) {\r\n          event = {\r\n            type: 'tag',\r\n            tagType: 'server-control'\r\n          };\r\n          event.attributes = parseAttributes$1(match[1]);\r\n          ['CAN-SKIP-UNTIL', 'PART-HOLD-BACK', 'HOLD-BACK'].forEach(function (key) {\r\n            if (event.attributes.hasOwnProperty(key)) {\r\n              event.attributes[key] = parseFloat(event.attributes[key]);\r\n            }\r\n          });\r\n          ['CAN-SKIP-DATERANGES', 'CAN-BLOCK-RELOAD'].forEach(function (key) {\r\n            if (event.attributes.hasOwnProperty(key)) {\r\n              event.attributes[key] = /YES/.test(event.attributes[key]);\r\n            }\r\n          });\r\n          this.trigger('data', event);\r\n          return;\r\n        }\r\n        match = /^#EXT-X-PART-INF:(.*)$/.exec(newLine);\r\n        if (match && match[1]) {\r\n          event = {\r\n            type: 'tag',\r\n            tagType: 'part-inf'\r\n          };\r\n          event.attributes = parseAttributes$1(match[1]);\r\n          ['PART-TARGET'].forEach(function (key) {\r\n            if (event.attributes.hasOwnProperty(key)) {\r\n              event.attributes[key] = parseFloat(event.attributes[key]);\r\n            }\r\n          });\r\n          this.trigger('data', event);\r\n          return;\r\n        }\r\n        match = /^#EXT-X-PRELOAD-HINT:(.*)$/.exec(newLine);\r\n        if (match && match[1]) {\r\n          event = {\r\n            type: 'tag',\r\n            tagType: 'preload-hint'\r\n          };\r\n          event.attributes = parseAttributes$1(match[1]);\r\n          ['BYTERANGE-START', 'BYTERANGE-LENGTH'].forEach(function (key) {\r\n            if (event.attributes.hasOwnProperty(key)) {\r\n              event.attributes[key] = parseInt(event.attributes[key], 10);\r\n              const subkey = key === 'BYTERANGE-LENGTH' ? 'length' : 'offset';\r\n              event.attributes.byterange = event.attributes.byterange || {};\r\n              event.attributes.byterange[subkey] = event.attributes[key]; // only keep the parsed byterange object.\r\n\r\n              delete event.attributes[key];\r\n            }\r\n          });\r\n          this.trigger('data', event);\r\n          return;\r\n        }\r\n        match = /^#EXT-X-RENDITION-REPORT:(.*)$/.exec(newLine);\r\n        if (match && match[1]) {\r\n          event = {\r\n            type: 'tag',\r\n            tagType: 'rendition-report'\r\n          };\r\n          event.attributes = parseAttributes$1(match[1]);\r\n          ['LAST-MSN', 'LAST-PART'].forEach(function (key) {\r\n            if (event.attributes.hasOwnProperty(key)) {\r\n              event.attributes[key] = parseInt(event.attributes[key], 10);\r\n            }\r\n          });\r\n          this.trigger('data', event);\r\n          return;\r\n        }\r\n        match = /^#EXT-X-DATERANGE:(.*)$/.exec(newLine);\r\n        if (match && match[1]) {\r\n          event = {\r\n            type: 'tag',\r\n            tagType: 'daterange'\r\n          };\r\n          event.attributes = parseAttributes$1(match[1]);\r\n          ['ID', 'CLASS'].forEach(function (key) {\r\n            if (event.attributes.hasOwnProperty(key)) {\r\n              event.attributes[key] = String(event.attributes[key]);\r\n            }\r\n          });\r\n          ['START-DATE', 'END-DATE'].forEach(function (key) {\r\n            if (event.attributes.hasOwnProperty(key)) {\r\n              event.attributes[key] = new Date(event.attributes[key]);\r\n            }\r\n          });\r\n          ['DURATION', 'PLANNED-DURATION'].forEach(function (key) {\r\n            if (event.attributes.hasOwnProperty(key)) {\r\n              event.attributes[key] = parseFloat(event.attributes[key]);\r\n            }\r\n          });\r\n          ['END-ON-NEXT'].forEach(function (key) {\r\n            if (event.attributes.hasOwnProperty(key)) {\r\n              event.attributes[key] = /YES/i.test(event.attributes[key]);\r\n            }\r\n          });\r\n          ['SCTE35-CMD', ' SCTE35-OUT', 'SCTE35-IN'].forEach(function (key) {\r\n            if (event.attributes.hasOwnProperty(key)) {\r\n              event.attributes[key] = event.attributes[key].toString(16);\r\n            }\r\n          });\r\n          const clientAttributePattern = /^X-([A-Z]+-)+[A-Z]+$/;\r\n          for (const key in event.attributes) {\r\n            if (!clientAttributePattern.test(key)) {\r\n              continue;\r\n            }\r\n            const isHexaDecimal = /[0-9A-Fa-f]{6}/g.test(event.attributes[key]);\r\n            const isDecimalFloating = /^\\d+(\\.\\d+)?$/.test(event.attributes[key]);\r\n            event.attributes[key] = isHexaDecimal ? event.attributes[key].toString(16) : isDecimalFloating ? parseFloat(event.attributes[key]) : String(event.attributes[key]);\r\n          }\r\n          this.trigger('data', event);\r\n          return;\r\n        }\r\n        match = /^#EXT-X-INDEPENDENT-SEGMENTS/.exec(newLine);\r\n        if (match) {\r\n          this.trigger('data', {\r\n            type: 'tag',\r\n            tagType: 'independent-segments'\r\n          });\r\n          return;\r\n        }\r\n        match = /^#EXT-X-I-FRAMES-ONLY/.exec(newLine);\r\n        if (match) {\r\n          this.trigger('data', {\r\n            type: 'tag',\r\n            tagType: 'i-frames-only'\r\n          });\r\n          return;\r\n        }\r\n        match = /^#EXT-X-CONTENT-STEERING:(.*)$/.exec(newLine);\r\n        if (match) {\r\n          event = {\r\n            type: 'tag',\r\n            tagType: 'content-steering'\r\n          };\r\n          event.attributes = parseAttributes$1(match[1]);\r\n          this.trigger('data', event);\r\n          return;\r\n        }\r\n        match = /^#EXT-X-I-FRAME-STREAM-INF:(.*)$/.exec(newLine);\r\n        if (match) {\r\n          event = {\r\n            type: 'tag',\r\n            tagType: 'i-frame-playlist'\r\n          };\r\n          event.attributes = parseAttributes$1(match[1]);\r\n          if (event.attributes.URI) {\r\n            event.uri = event.attributes.URI;\r\n          }\r\n          if (event.attributes.BANDWIDTH) {\r\n            event.attributes.BANDWIDTH = parseInt(event.attributes.BANDWIDTH, 10);\r\n          }\r\n          if (event.attributes.RESOLUTION) {\r\n            event.attributes.RESOLUTION = parseResolution(event.attributes.RESOLUTION);\r\n          }\r\n          if (event.attributes['AVERAGE-BANDWIDTH']) {\r\n            event.attributes['AVERAGE-BANDWIDTH'] = parseInt(event.attributes['AVERAGE-BANDWIDTH'], 10);\r\n          }\r\n          if (event.attributes['FRAME-RATE']) {\r\n            event.attributes['FRAME-RATE'] = parseFloat(event.attributes['FRAME-RATE']);\r\n          }\r\n          this.trigger('data', event);\r\n          return;\r\n        }\r\n        match = /^#EXT-X-DEFINE:(.*)$/.exec(newLine);\r\n        if (match) {\r\n          event = {\r\n            type: 'tag',\r\n            tagType: 'define'\r\n          };\r\n          event.attributes = parseAttributes$1(match[1]);\r\n          this.trigger('data', event);\r\n          return;\r\n        } // unknown tag type\r\n\r\n        this.trigger('data', {\r\n          type: 'tag',\r\n          data: newLine.slice(4)\r\n        });\r\n      });\r\n    }\r\n    /**\r\n     * Add a parser for custom headers\r\n     *\r\n     * @param {Object}   options              a map of options for the added parser\r\n     * @param {RegExp}   options.expression   a regular expression to match the custom header\r\n     * @param {string}   options.customType   the custom type to register to the output\r\n     * @param {Function} [options.dataParser] function to parse the line into an object\r\n     * @param {boolean}  [options.segment]    should tag data be attached to the segment object\r\n     */\r\n\r\n    addParser({\r\n      expression,\r\n      customType,\r\n      dataParser,\r\n      segment\r\n    }) {\r\n      if (typeof dataParser !== 'function') {\r\n        dataParser = line => line;\r\n      }\r\n      this.customParsers.push(line => {\r\n        const match = expression.exec(line);\r\n        if (match) {\r\n          this.trigger('data', {\r\n            type: 'custom',\r\n            data: dataParser(line),\r\n            customType,\r\n            segment\r\n          });\r\n          return true;\r\n        }\r\n      });\r\n    }\r\n    /**\r\n     * Add a custom header mapper\r\n     *\r\n     * @param {Object}   options\r\n     * @param {RegExp}   options.expression   a regular expression to match the custom header\r\n     * @param {Function} options.map          function to translate tag into a different tag\r\n     */\r\n\r\n    addTagMapper({\r\n      expression,\r\n      map\r\n    }) {\r\n      const mapFn = line => {\r\n        if (expression.test(line)) {\r\n          return map(line);\r\n        }\r\n        return line;\r\n      };\r\n      this.tagMappers.push(mapFn);\r\n    }\r\n  }\r\n  const camelCase = str => str.toLowerCase().replace(/-(\\w)/g, a => a[1].toUpperCase());\r\n  const camelCaseKeys = function (attributes) {\r\n    const result = {};\r\n    Object.keys(attributes).forEach(function (key) {\r\n      result[camelCase(key)] = attributes[key];\r\n    });\r\n    return result;\r\n  }; // set SERVER-CONTROL hold back based upon targetDuration and partTargetDuration\r\n  // we need this helper because defaults are based upon targetDuration and\r\n  // partTargetDuration being set, but they may not be if SERVER-CONTROL appears before\r\n  // target durations are set.\r\n\r\n  const setHoldBack = function (manifest) {\r\n    const {\r\n      serverControl,\r\n      targetDuration,\r\n      partTargetDuration\r\n    } = manifest;\r\n    if (!serverControl) {\r\n      return;\r\n    }\r\n    const tag = '#EXT-X-SERVER-CONTROL';\r\n    const hb = 'holdBack';\r\n    const phb = 'partHoldBack';\r\n    const minTargetDuration = targetDuration && targetDuration * 3;\r\n    const minPartDuration = partTargetDuration && partTargetDuration * 2;\r\n    if (targetDuration && !serverControl.hasOwnProperty(hb)) {\r\n      serverControl[hb] = minTargetDuration;\r\n      this.trigger('info', {\r\n        message: `${tag} defaulting HOLD-BACK to targetDuration * 3 (${minTargetDuration}).`\r\n      });\r\n    }\r\n    if (minTargetDuration && serverControl[hb] < minTargetDuration) {\r\n      this.trigger('warn', {\r\n        message: `${tag} clamping HOLD-BACK (${serverControl[hb]}) to targetDuration * 3 (${minTargetDuration})`\r\n      });\r\n      serverControl[hb] = minTargetDuration;\r\n    } // default no part hold back to part target duration * 3\r\n\r\n    if (partTargetDuration && !serverControl.hasOwnProperty(phb)) {\r\n      serverControl[phb] = partTargetDuration * 3;\r\n      this.trigger('info', {\r\n        message: `${tag} defaulting PART-HOLD-BACK to partTargetDuration * 3 (${serverControl[phb]}).`\r\n      });\r\n    } // if part hold back is too small default it to part target duration * 2\r\n\r\n    if (partTargetDuration && serverControl[phb] < minPartDuration) {\r\n      this.trigger('warn', {\r\n        message: `${tag} clamping PART-HOLD-BACK (${serverControl[phb]}) to partTargetDuration * 2 (${minPartDuration}).`\r\n      });\r\n      serverControl[phb] = minPartDuration;\r\n    }\r\n  };\r\n  /**\r\n   * A parser for M3U8 files. The current interpretation of the input is\r\n   * exposed as a property `manifest` on parser objects. It's just two lines to\r\n   * create and parse a manifest once you have the contents available as a string:\r\n   *\r\n   * ```js\r\n   * var parser = new m3u8.Parser();\r\n   * parser.push(xhr.responseText);\r\n   * ```\r\n   *\r\n   * New input can later be applied to update the manifest object by calling\r\n   * `push` again.\r\n   *\r\n   * The parser attempts to create a usable manifest object even if the\r\n   * underlying input is somewhat nonsensical. It emits `info` and `warning`\r\n   * events during the parse if it encounters input that seems invalid or\r\n   * requires some property of the manifest object to be defaulted.\r\n   *\r\n   * @class Parser\r\n   * @param {Object} [opts] Options for the constructor, needed for substitutions\r\n   * @param {string} [opts.uri] URL to check for query params\r\n   * @param {Object} [opts.mainDefinitions] Definitions on main playlist that can be imported\r\n   * @extends Stream\r\n   */\r\n\r\n  class Parser extends Stream {\r\n    constructor(opts = {}) {\r\n      super();\r\n      this.lineStream = new LineStream();\r\n      this.parseStream = new ParseStream();\r\n      this.lineStream.pipe(this.parseStream);\r\n      this.mainDefinitions = opts.mainDefinitions || {};\r\n      this.params = new URL(opts.uri, 'https://a.com').searchParams;\r\n      this.lastProgramDateTime = null;\r\n      /* eslint-disable consistent-this */\r\n\r\n      const self = this;\r\n      /* eslint-enable consistent-this */\r\n\r\n      const uris = [];\r\n      let currentUri = {}; // if specified, the active EXT-X-MAP definition\r\n\r\n      let currentMap; // if specified, the active decryption key\r\n\r\n      let key;\r\n      let hasParts = false;\r\n      const noop = function () {};\r\n      const defaultMediaGroups = {\r\n        'AUDIO': {},\r\n        'VIDEO': {},\r\n        'CLOSED-CAPTIONS': {},\r\n        'SUBTITLES': {}\r\n      }; // This is the Widevine UUID from DASH IF IOP. The same exact string is\r\n      // used in MPDs with Widevine encrypted streams.\r\n\r\n      const widevineUuid = 'urn:uuid:edef8ba9-79d6-4ace-a3c8-27dcd51d21ed'; // group segments into numbered timelines delineated by discontinuities\r\n\r\n      let currentTimeline = 0; // the manifest is empty until the parse stream begins delivering data\r\n\r\n      this.manifest = {\r\n        allowCache: true,\r\n        discontinuityStarts: [],\r\n        dateRanges: [],\r\n        iFramePlaylists: [],\r\n        segments: []\r\n      }; // keep track of the last seen segment's byte range end, as segments are not required\r\n      // to provide the offset, in which case it defaults to the next byte after the\r\n      // previous segment\r\n\r\n      let lastByterangeEnd = 0; // keep track of the last seen part's byte range end.\r\n\r\n      let lastPartByterangeEnd = 0;\r\n      const dateRangeTags = {};\r\n      this.on('end', () => {\r\n        // only add preloadSegment if we don't yet have a uri for it.\r\n        // and we actually have parts/preloadHints\r\n        if (currentUri.uri || !currentUri.parts && !currentUri.preloadHints) {\r\n          return;\r\n        }\r\n        if (!currentUri.map && currentMap) {\r\n          currentUri.map = currentMap;\r\n        }\r\n        if (!currentUri.key && key) {\r\n          currentUri.key = key;\r\n        }\r\n        if (!currentUri.timeline && typeof currentTimeline === 'number') {\r\n          currentUri.timeline = currentTimeline;\r\n        }\r\n        this.manifest.preloadSegment = currentUri;\r\n      }); // update the manifest with the m3u8 entry from the parse stream\r\n\r\n      this.parseStream.on('data', function (entry) {\r\n        let mediaGroup;\r\n        let rendition; // Replace variables in uris and attributes as defined in #EXT-X-DEFINE tags\r\n\r\n        if (self.manifest.definitions) {\r\n          for (const def in self.manifest.definitions) {\r\n            if (entry.uri) {\r\n              entry.uri = entry.uri.replace(`{$${def}}`, self.manifest.definitions[def]);\r\n            }\r\n            if (entry.attributes) {\r\n              for (const attr in entry.attributes) {\r\n                if (typeof entry.attributes[attr] === 'string') {\r\n                  entry.attributes[attr] = entry.attributes[attr].replace(`{$${def}}`, self.manifest.definitions[def]);\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n        ({\r\n          tag() {\r\n            // switch based on the tag type\r\n            (({\r\n              version() {\r\n                if (entry.version) {\r\n                  this.manifest.version = entry.version;\r\n                }\r\n              },\r\n              'allow-cache'() {\r\n                this.manifest.allowCache = entry.allowed;\r\n                if (!('allowed' in entry)) {\r\n                  this.trigger('info', {\r\n                    message: 'defaulting allowCache to YES'\r\n                  });\r\n                  this.manifest.allowCache = true;\r\n                }\r\n              },\r\n              byterange() {\r\n                const byterange = {};\r\n                if ('length' in entry) {\r\n                  currentUri.byterange = byterange;\r\n                  byterange.length = entry.length;\r\n                  if (!('offset' in entry)) {\r\n                    /*\r\n                     * From the latest spec (as of this writing):\r\n                     * https://tools.ietf.org/html/draft-pantos-http-live-streaming-23#section-4.3.2.2\r\n                     *\r\n                     * Same text since EXT-X-BYTERANGE's introduction in draft 7:\r\n                     * https://tools.ietf.org/html/draft-pantos-http-live-streaming-07#section-3.3.1)\r\n                     *\r\n                     * \"If o [offset] is not present, the sub-range begins at the next byte\r\n                     * following the sub-range of the previous media segment.\"\r\n                     */\r\n                    entry.offset = lastByterangeEnd;\r\n                  }\r\n                }\r\n                if ('offset' in entry) {\r\n                  currentUri.byterange = byterange;\r\n                  byterange.offset = entry.offset;\r\n                }\r\n                lastByterangeEnd = byterange.offset + byterange.length;\r\n              },\r\n              endlist() {\r\n                this.manifest.endList = true;\r\n              },\r\n              inf() {\r\n                if (!('mediaSequence' in this.manifest)) {\r\n                  this.manifest.mediaSequence = 0;\r\n                  this.trigger('info', {\r\n                    message: 'defaulting media sequence to zero'\r\n                  });\r\n                }\r\n                if (!('discontinuitySequence' in this.manifest)) {\r\n                  this.manifest.discontinuitySequence = 0;\r\n                  this.trigger('info', {\r\n                    message: 'defaulting discontinuity sequence to zero'\r\n                  });\r\n                }\r\n                if (entry.title) {\r\n                  currentUri.title = entry.title;\r\n                }\r\n                if (entry.duration > 0) {\r\n                  currentUri.duration = entry.duration;\r\n                }\r\n                if (entry.duration === 0) {\r\n                  currentUri.duration = 0.01;\r\n                  this.trigger('info', {\r\n                    message: 'updating zero segment duration to a small value'\r\n                  });\r\n                }\r\n                this.manifest.segments = uris;\r\n              },\r\n              key() {\r\n                if (!entry.attributes) {\r\n                  this.trigger('warn', {\r\n                    message: 'ignoring key declaration without attribute list'\r\n                  });\r\n                  return;\r\n                } // clear the active encryption key\r\n\r\n                if (entry.attributes.METHOD === 'NONE') {\r\n                  key = null;\r\n                  return;\r\n                }\r\n                if (!entry.attributes.URI) {\r\n                  this.trigger('warn', {\r\n                    message: 'ignoring key declaration without URI'\r\n                  });\r\n                  return;\r\n                }\r\n                if (entry.attributes.KEYFORMAT === 'com.apple.streamingkeydelivery') {\r\n                  this.manifest.contentProtection = this.manifest.contentProtection || {}; // TODO: add full support for this.\r\n\r\n                  this.manifest.contentProtection['com.apple.fps.1_0'] = {\r\n                    attributes: entry.attributes\r\n                  };\r\n                  return;\r\n                }\r\n                if (entry.attributes.KEYFORMAT === 'com.microsoft.playready') {\r\n                  this.manifest.contentProtection = this.manifest.contentProtection || {}; // TODO: add full support for this.\r\n\r\n                  this.manifest.contentProtection['com.microsoft.playready'] = {\r\n                    uri: entry.attributes.URI\r\n                  };\r\n                  return;\r\n                } // check if the content is encrypted for Widevine\r\n                // Widevine/HLS spec: https://storage.googleapis.com/wvdocs/Widevine_DRM_HLS.pdf\r\n\r\n                if (entry.attributes.KEYFORMAT === widevineUuid) {\r\n                  const VALID_METHODS = ['SAMPLE-AES', 'SAMPLE-AES-CTR', 'SAMPLE-AES-CENC'];\r\n                  if (VALID_METHODS.indexOf(entry.attributes.METHOD) === -1) {\r\n                    this.trigger('warn', {\r\n                      message: 'invalid key method provided for Widevine'\r\n                    });\r\n                    return;\r\n                  }\r\n                  if (entry.attributes.METHOD === 'SAMPLE-AES-CENC') {\r\n                    this.trigger('warn', {\r\n                      message: 'SAMPLE-AES-CENC is deprecated, please use SAMPLE-AES-CTR instead'\r\n                    });\r\n                  }\r\n                  if (entry.attributes.URI.substring(0, 23) !== 'data:text/plain;base64,') {\r\n                    this.trigger('warn', {\r\n                      message: 'invalid key URI provided for Widevine'\r\n                    });\r\n                    return;\r\n                  }\r\n                  if (!(entry.attributes.KEYID && entry.attributes.KEYID.substring(0, 2) === '0x')) {\r\n                    this.trigger('warn', {\r\n                      message: 'invalid key ID provided for Widevine'\r\n                    });\r\n                    return;\r\n                  } // if Widevine key attributes are valid, store them as `contentProtection`\r\n                  // on the manifest to emulate Widevine tag structure in a DASH mpd\r\n\r\n                  this.manifest.contentProtection = this.manifest.contentProtection || {};\r\n                  this.manifest.contentProtection['com.widevine.alpha'] = {\r\n                    attributes: {\r\n                      schemeIdUri: entry.attributes.KEYFORMAT,\r\n                      // remove '0x' from the key id string\r\n                      keyId: entry.attributes.KEYID.substring(2)\r\n                    },\r\n                    // decode the base64-encoded PSSH box\r\n                    pssh: decodeB64ToUint8Array(entry.attributes.URI.split(',')[1])\r\n                  };\r\n                  return;\r\n                }\r\n                if (!entry.attributes.METHOD) {\r\n                  this.trigger('warn', {\r\n                    message: 'defaulting key method to AES-128'\r\n                  });\r\n                } // setup an encryption key for upcoming segments\r\n\r\n                key = {\r\n                  method: entry.attributes.METHOD || 'AES-128',\r\n                  uri: entry.attributes.URI\r\n                };\r\n                if (typeof entry.attributes.IV !== 'undefined') {\r\n                  key.iv = entry.attributes.IV;\r\n                }\r\n              },\r\n              'media-sequence'() {\r\n                if (!isFinite(entry.number)) {\r\n                  this.trigger('warn', {\r\n                    message: 'ignoring invalid media sequence: ' + entry.number\r\n                  });\r\n                  return;\r\n                }\r\n                this.manifest.mediaSequence = entry.number;\r\n              },\r\n              'discontinuity-sequence'() {\r\n                if (!isFinite(entry.number)) {\r\n                  this.trigger('warn', {\r\n                    message: 'ignoring invalid discontinuity sequence: ' + entry.number\r\n                  });\r\n                  return;\r\n                }\r\n                this.manifest.discontinuitySequence = entry.number;\r\n                currentTimeline = entry.number;\r\n              },\r\n              'playlist-type'() {\r\n                if (!/VOD|EVENT/.test(entry.playlistType)) {\r\n                  this.trigger('warn', {\r\n                    message: 'ignoring unknown playlist type: ' + entry.playlist\r\n                  });\r\n                  return;\r\n                }\r\n                this.manifest.playlistType = entry.playlistType;\r\n              },\r\n              map() {\r\n                currentMap = {};\r\n                if (entry.uri) {\r\n                  currentMap.uri = entry.uri;\r\n                }\r\n                if (entry.byterange) {\r\n                  currentMap.byterange = entry.byterange;\r\n                }\r\n                if (key) {\r\n                  currentMap.key = key;\r\n                }\r\n              },\r\n              'stream-inf'() {\r\n                this.manifest.playlists = uris;\r\n                this.manifest.mediaGroups = this.manifest.mediaGroups || defaultMediaGroups;\r\n                if (!entry.attributes) {\r\n                  this.trigger('warn', {\r\n                    message: 'ignoring empty stream-inf attributes'\r\n                  });\r\n                  return;\r\n                }\r\n                if (!currentUri.attributes) {\r\n                  currentUri.attributes = {};\r\n                }\r\n                _extends$1(currentUri.attributes, entry.attributes);\r\n              },\r\n              media() {\r\n                this.manifest.mediaGroups = this.manifest.mediaGroups || defaultMediaGroups;\r\n                if (!(entry.attributes && entry.attributes.TYPE && entry.attributes['GROUP-ID'] && entry.attributes.NAME)) {\r\n                  this.trigger('warn', {\r\n                    message: 'ignoring incomplete or missing media group'\r\n                  });\r\n                  return;\r\n                } // find the media group, creating defaults as necessary\r\n\r\n                const mediaGroupType = this.manifest.mediaGroups[entry.attributes.TYPE];\r\n                mediaGroupType[entry.attributes['GROUP-ID']] = mediaGroupType[entry.attributes['GROUP-ID']] || {};\r\n                mediaGroup = mediaGroupType[entry.attributes['GROUP-ID']]; // collect the rendition metadata\r\n\r\n                rendition = {\r\n                  default: /yes/i.test(entry.attributes.DEFAULT)\r\n                };\r\n                if (rendition.default) {\r\n                  rendition.autoselect = true;\r\n                } else {\r\n                  rendition.autoselect = /yes/i.test(entry.attributes.AUTOSELECT);\r\n                }\r\n                if (entry.attributes.LANGUAGE) {\r\n                  rendition.language = entry.attributes.LANGUAGE;\r\n                }\r\n                if (entry.attributes.URI) {\r\n                  rendition.uri = entry.attributes.URI;\r\n                }\r\n                if (entry.attributes['INSTREAM-ID']) {\r\n                  rendition.instreamId = entry.attributes['INSTREAM-ID'];\r\n                }\r\n                if (entry.attributes.CHARACTERISTICS) {\r\n                  rendition.characteristics = entry.attributes.CHARACTERISTICS;\r\n                }\r\n                if (entry.attributes.FORCED) {\r\n                  rendition.forced = /yes/i.test(entry.attributes.FORCED);\r\n                } // insert the new rendition\r\n\r\n                mediaGroup[entry.attributes.NAME] = rendition;\r\n              },\r\n              discontinuity() {\r\n                currentTimeline += 1;\r\n                currentUri.discontinuity = true;\r\n                this.manifest.discontinuityStarts.push(uris.length);\r\n              },\r\n              'program-date-time'() {\r\n                if (typeof this.manifest.dateTimeString === 'undefined') {\r\n                  // PROGRAM-DATE-TIME is a media-segment tag, but for backwards\r\n                  // compatibility, we add the first occurence of the PROGRAM-DATE-TIME tag\r\n                  // to the manifest object\r\n                  // TODO: Consider removing this in future major version\r\n                  this.manifest.dateTimeString = entry.dateTimeString;\r\n                  this.manifest.dateTimeObject = entry.dateTimeObject;\r\n                }\r\n                currentUri.dateTimeString = entry.dateTimeString;\r\n                currentUri.dateTimeObject = entry.dateTimeObject;\r\n                const {\r\n                  lastProgramDateTime\r\n                } = this;\r\n                this.lastProgramDateTime = new Date(entry.dateTimeString).getTime(); // We should extrapolate Program Date Time backward only during first program date time occurrence.\r\n                // Once we have at least one program date time point, we can always extrapolate it forward using lastProgramDateTime reference.\r\n\r\n                if (lastProgramDateTime === null) {\r\n                  // Extrapolate Program Date Time backward\r\n                  // Since it is first program date time occurrence we're assuming that\r\n                  // all this.manifest.segments have no program date time info\r\n                  this.manifest.segments.reduceRight((programDateTime, segment) => {\r\n                    segment.programDateTime = programDateTime - segment.duration * 1000;\r\n                    return segment.programDateTime;\r\n                  }, this.lastProgramDateTime);\r\n                }\r\n              },\r\n              targetduration() {\r\n                if (!isFinite(entry.duration) || entry.duration < 0) {\r\n                  this.trigger('warn', {\r\n                    message: 'ignoring invalid target duration: ' + entry.duration\r\n                  });\r\n                  return;\r\n                }\r\n                this.manifest.targetDuration = entry.duration;\r\n                setHoldBack.call(this, this.manifest);\r\n              },\r\n              start() {\r\n                if (!entry.attributes || isNaN(entry.attributes['TIME-OFFSET'])) {\r\n                  this.trigger('warn', {\r\n                    message: 'ignoring start declaration without appropriate attribute list'\r\n                  });\r\n                  return;\r\n                }\r\n                this.manifest.start = {\r\n                  timeOffset: entry.attributes['TIME-OFFSET'],\r\n                  precise: entry.attributes.PRECISE\r\n                };\r\n              },\r\n              'cue-out'() {\r\n                currentUri.cueOut = entry.data;\r\n              },\r\n              'cue-out-cont'() {\r\n                currentUri.cueOutCont = entry.data;\r\n              },\r\n              'cue-in'() {\r\n                currentUri.cueIn = entry.data;\r\n              },\r\n              'skip'() {\r\n                this.manifest.skip = camelCaseKeys(entry.attributes);\r\n                this.warnOnMissingAttributes_('#EXT-X-SKIP', entry.attributes, ['SKIPPED-SEGMENTS']);\r\n              },\r\n              'part'() {\r\n                hasParts = true; // parts are always specifed before a segment\r\n\r\n                const segmentIndex = this.manifest.segments.length;\r\n                const part = camelCaseKeys(entry.attributes);\r\n                currentUri.parts = currentUri.parts || [];\r\n                currentUri.parts.push(part);\r\n                if (part.byterange) {\r\n                  if (!part.byterange.hasOwnProperty('offset')) {\r\n                    part.byterange.offset = lastPartByterangeEnd;\r\n                  }\r\n                  lastPartByterangeEnd = part.byterange.offset + part.byterange.length;\r\n                }\r\n                const partIndex = currentUri.parts.length - 1;\r\n                this.warnOnMissingAttributes_(`#EXT-X-PART #${partIndex} for segment #${segmentIndex}`, entry.attributes, ['URI', 'DURATION']);\r\n                if (this.manifest.renditionReports) {\r\n                  this.manifest.renditionReports.forEach((r, i) => {\r\n                    if (!r.hasOwnProperty('lastPart')) {\r\n                      this.trigger('warn', {\r\n                        message: `#EXT-X-RENDITION-REPORT #${i} lacks required attribute(s): LAST-PART`\r\n                      });\r\n                    }\r\n                  });\r\n                }\r\n              },\r\n              'server-control'() {\r\n                const attrs = this.manifest.serverControl = camelCaseKeys(entry.attributes);\r\n                if (!attrs.hasOwnProperty('canBlockReload')) {\r\n                  attrs.canBlockReload = false;\r\n                  this.trigger('info', {\r\n                    message: '#EXT-X-SERVER-CONTROL defaulting CAN-BLOCK-RELOAD to false'\r\n                  });\r\n                }\r\n                setHoldBack.call(this, this.manifest);\r\n                if (attrs.canSkipDateranges && !attrs.hasOwnProperty('canSkipUntil')) {\r\n                  this.trigger('warn', {\r\n                    message: '#EXT-X-SERVER-CONTROL lacks required attribute CAN-SKIP-UNTIL which is required when CAN-SKIP-DATERANGES is set'\r\n                  });\r\n                }\r\n              },\r\n              'preload-hint'() {\r\n                // parts are always specifed before a segment\r\n                const segmentIndex = this.manifest.segments.length;\r\n                const hint = camelCaseKeys(entry.attributes);\r\n                const isPart = hint.type && hint.type === 'PART';\r\n                currentUri.preloadHints = currentUri.preloadHints || [];\r\n                currentUri.preloadHints.push(hint);\r\n                if (hint.byterange) {\r\n                  if (!hint.byterange.hasOwnProperty('offset')) {\r\n                    // use last part byterange end or zero if not a part.\r\n                    hint.byterange.offset = isPart ? lastPartByterangeEnd : 0;\r\n                    if (isPart) {\r\n                      lastPartByterangeEnd = hint.byterange.offset + hint.byterange.length;\r\n                    }\r\n                  }\r\n                }\r\n                const index = currentUri.preloadHints.length - 1;\r\n                this.warnOnMissingAttributes_(`#EXT-X-PRELOAD-HINT #${index} for segment #${segmentIndex}`, entry.attributes, ['TYPE', 'URI']);\r\n                if (!hint.type) {\r\n                  return;\r\n                } // search through all preload hints except for the current one for\r\n                // a duplicate type.\r\n\r\n                for (let i = 0; i < currentUri.preloadHints.length - 1; i++) {\r\n                  const otherHint = currentUri.preloadHints[i];\r\n                  if (!otherHint.type) {\r\n                    continue;\r\n                  }\r\n                  if (otherHint.type === hint.type) {\r\n                    this.trigger('warn', {\r\n                      message: `#EXT-X-PRELOAD-HINT #${index} for segment #${segmentIndex} has the same TYPE ${hint.type} as preload hint #${i}`\r\n                    });\r\n                  }\r\n                }\r\n              },\r\n              'rendition-report'() {\r\n                const report = camelCaseKeys(entry.attributes);\r\n                this.manifest.renditionReports = this.manifest.renditionReports || [];\r\n                this.manifest.renditionReports.push(report);\r\n                const index = this.manifest.renditionReports.length - 1;\r\n                const required = ['LAST-MSN', 'URI'];\r\n                if (hasParts) {\r\n                  required.push('LAST-PART');\r\n                }\r\n                this.warnOnMissingAttributes_(`#EXT-X-RENDITION-REPORT #${index}`, entry.attributes, required);\r\n              },\r\n              'part-inf'() {\r\n                this.manifest.partInf = camelCaseKeys(entry.attributes);\r\n                this.warnOnMissingAttributes_('#EXT-X-PART-INF', entry.attributes, ['PART-TARGET']);\r\n                if (this.manifest.partInf.partTarget) {\r\n                  this.manifest.partTargetDuration = this.manifest.partInf.partTarget;\r\n                }\r\n                setHoldBack.call(this, this.manifest);\r\n              },\r\n              'daterange'() {\r\n                this.manifest.dateRanges.push(camelCaseKeys(entry.attributes));\r\n                const index = this.manifest.dateRanges.length - 1;\r\n                this.warnOnMissingAttributes_(`#EXT-X-DATERANGE #${index}`, entry.attributes, ['ID', 'START-DATE']);\r\n                const dateRange = this.manifest.dateRanges[index];\r\n                if (dateRange.endDate && dateRange.startDate && new Date(dateRange.endDate) < new Date(dateRange.startDate)) {\r\n                  this.trigger('warn', {\r\n                    message: 'EXT-X-DATERANGE END-DATE must be equal to or later than the value of the START-DATE'\r\n                  });\r\n                }\r\n                if (dateRange.duration && dateRange.duration < 0) {\r\n                  this.trigger('warn', {\r\n                    message: 'EXT-X-DATERANGE DURATION must not be negative'\r\n                  });\r\n                }\r\n                if (dateRange.plannedDuration && dateRange.plannedDuration < 0) {\r\n                  this.trigger('warn', {\r\n                    message: 'EXT-X-DATERANGE PLANNED-DURATION must not be negative'\r\n                  });\r\n                }\r\n                const endOnNextYes = !!dateRange.endOnNext;\r\n                if (endOnNextYes && !dateRange.class) {\r\n                  this.trigger('warn', {\r\n                    message: 'EXT-X-DATERANGE with an END-ON-NEXT=YES attribute must have a CLASS attribute'\r\n                  });\r\n                }\r\n                if (endOnNextYes && (dateRange.duration || dateRange.endDate)) {\r\n                  this.trigger('warn', {\r\n                    message: 'EXT-X-DATERANGE with an END-ON-NEXT=YES attribute must not contain DURATION or END-DATE attributes'\r\n                  });\r\n                }\r\n                if (dateRange.duration && dateRange.endDate) {\r\n                  const startDate = dateRange.startDate;\r\n                  const newDateInSeconds = startDate.getTime() + dateRange.duration * 1000;\r\n                  this.manifest.dateRanges[index].endDate = new Date(newDateInSeconds);\r\n                }\r\n                if (!dateRangeTags[dateRange.id]) {\r\n                  dateRangeTags[dateRange.id] = dateRange;\r\n                } else {\r\n                  for (const attribute in dateRangeTags[dateRange.id]) {\r\n                    if (!!dateRange[attribute] && JSON.stringify(dateRangeTags[dateRange.id][attribute]) !== JSON.stringify(dateRange[attribute])) {\r\n                      this.trigger('warn', {\r\n                        message: 'EXT-X-DATERANGE tags with the same ID in a playlist must have the same attributes values'\r\n                      });\r\n                      break;\r\n                    }\r\n                  } // if tags with the same ID do not have conflicting attributes, merge them\r\n\r\n                  const dateRangeWithSameId = this.manifest.dateRanges.findIndex(dateRangeToFind => dateRangeToFind.id === dateRange.id);\r\n                  this.manifest.dateRanges[dateRangeWithSameId] = _extends$1(this.manifest.dateRanges[dateRangeWithSameId], dateRange);\r\n                  dateRangeTags[dateRange.id] = _extends$1(dateRangeTags[dateRange.id], dateRange); // after merging, delete the duplicate dateRange that was added last\r\n\r\n                  this.manifest.dateRanges.pop();\r\n                }\r\n              },\r\n              'independent-segments'() {\r\n                this.manifest.independentSegments = true;\r\n              },\r\n              'i-frames-only'() {\r\n                this.manifest.iFramesOnly = true;\r\n                this.requiredCompatibilityversion(this.manifest.version, 4);\r\n              },\r\n              'content-steering'() {\r\n                this.manifest.contentSteering = camelCaseKeys(entry.attributes);\r\n                this.warnOnMissingAttributes_('#EXT-X-CONTENT-STEERING', entry.attributes, ['SERVER-URI']);\r\n              },\r\n              /** @this {Parser} */\r\n              define() {\r\n                this.manifest.definitions = this.manifest.definitions || {};\r\n                const addDef = (n, v) => {\r\n                  if (n in this.manifest.definitions) {\r\n                    // An EXT-X-DEFINE tag MUST NOT specify the same Variable Name as any other\r\n                    // EXT-X-DEFINE tag in the same Playlist.  Parsers that encounter duplicate\r\n                    // Variable Name declarations MUST fail to parse the Playlist.\r\n                    this.trigger('error', {\r\n                      message: `EXT-X-DEFINE: Duplicate name ${n}`\r\n                    });\r\n                    return;\r\n                  }\r\n                  this.manifest.definitions[n] = v;\r\n                };\r\n                if ('QUERYPARAM' in entry.attributes) {\r\n                  if ('NAME' in entry.attributes || 'IMPORT' in entry.attributes) {\r\n                    // An EXT-X-DEFINE tag MUST contain either a NAME, an IMPORT, or a\r\n                    // QUERYPARAM attribute, but only one of the three.  Otherwise, the\r\n                    // client MUST fail to parse the Playlist.\r\n                    this.trigger('error', {\r\n                      message: 'EXT-X-DEFINE: Invalid attributes'\r\n                    });\r\n                    return;\r\n                  }\r\n                  const val = this.params.get(entry.attributes.QUERYPARAM);\r\n                  if (!val) {\r\n                    // If the QUERYPARAM attribute value does not match any query parameter in\r\n                    // the URI or the matching parameter has no associated value, the parser\r\n                    // MUST fail to parse the Playlist.  If more than one parameter matches,\r\n                    // any of the associated values MAY be used.\r\n                    this.trigger('error', {\r\n                      message: `EXT-X-DEFINE: No query param ${entry.attributes.QUERYPARAM}`\r\n                    });\r\n                    return;\r\n                  }\r\n                  addDef(entry.attributes.QUERYPARAM, decodeURIComponent(val));\r\n                  return;\r\n                }\r\n                if ('NAME' in entry.attributes) {\r\n                  if ('IMPORT' in entry.attributes) {\r\n                    // An EXT-X-DEFINE tag MUST contain either a NAME, an IMPORT, or a\r\n                    // QUERYPARAM attribute, but only one of the three.  Otherwise, the\r\n                    // client MUST fail to parse the Playlist.\r\n                    this.trigger('error', {\r\n                      message: 'EXT-X-DEFINE: Invalid attributes'\r\n                    });\r\n                    return;\r\n                  }\r\n                  if (!('VALUE' in entry.attributes) || typeof entry.attributes.VALUE !== 'string') {\r\n                    // This attribute is REQUIRED if the EXT-X-DEFINE tag has a NAME attribute.\r\n                    // The quoted-string MAY be empty.\r\n                    this.trigger('error', {\r\n                      message: `EXT-X-DEFINE: No value for ${entry.attributes.NAME}`\r\n                    });\r\n                    return;\r\n                  }\r\n                  addDef(entry.attributes.NAME, entry.attributes.VALUE);\r\n                  return;\r\n                }\r\n                if ('IMPORT' in entry.attributes) {\r\n                  if (!this.mainDefinitions[entry.attributes.IMPORT]) {\r\n                    // Covers two conditions, as mainDefinitions will always be empty on main\r\n                    //\r\n                    // EXT-X-DEFINE tags containing the IMPORT attribute MUST NOT occur in\r\n                    // Multivariant Playlists; they are only allowed in Media Playlists.\r\n                    //\r\n                    // If the IMPORT attribute value does not match any Variable Name in the\r\n                    // Multivariant Playlist, or if the Media Playlist loaded from a\r\n                    // Multivariant Playlist, the parser MUST fail the Playlist.\r\n                    this.trigger('error', {\r\n                      message: `EXT-X-DEFINE: No value ${entry.attributes.IMPORT} to import, or IMPORT used on main playlist`\r\n                    });\r\n                    return;\r\n                  }\r\n                  addDef(entry.attributes.IMPORT, this.mainDefinitions[entry.attributes.IMPORT]);\r\n                  return;\r\n                } // An EXT-X-DEFINE tag MUST contain either a NAME, an IMPORT, or a QUERYPARAM\r\n                // attribute, but only one of the three.  Otherwise, the client MUST fail to\r\n                // parse the Playlist.\r\n\r\n                this.trigger('error', {\r\n                  message: 'EXT-X-DEFINE: No attribute'\r\n                });\r\n              },\r\n              'i-frame-playlist'() {\r\n                this.manifest.iFramePlaylists.push({\r\n                  attributes: entry.attributes,\r\n                  uri: entry.uri,\r\n                  timeline: currentTimeline\r\n                });\r\n                this.warnOnMissingAttributes_('#EXT-X-I-FRAME-STREAM-INF', entry.attributes, ['BANDWIDTH', 'URI']);\r\n              }\r\n            })[entry.tagType] || noop).call(self);\r\n          },\r\n          uri() {\r\n            currentUri.uri = entry.uri;\r\n            uris.push(currentUri); // if no explicit duration was declared, use the target duration\r\n\r\n            if (this.manifest.targetDuration && !('duration' in currentUri)) {\r\n              this.trigger('warn', {\r\n                message: 'defaulting segment duration to the target duration'\r\n              });\r\n              currentUri.duration = this.manifest.targetDuration;\r\n            } // annotate with encryption information, if necessary\r\n\r\n            if (key) {\r\n              currentUri.key = key;\r\n            }\r\n            currentUri.timeline = currentTimeline; // annotate with initialization segment information, if necessary\r\n\r\n            if (currentMap) {\r\n              currentUri.map = currentMap;\r\n            } // reset the last byterange end as it needs to be 0 between parts\r\n\r\n            lastPartByterangeEnd = 0; // Once we have at least one program date time we can always extrapolate it forward\r\n\r\n            if (this.lastProgramDateTime !== null) {\r\n              currentUri.programDateTime = this.lastProgramDateTime;\r\n              this.lastProgramDateTime += currentUri.duration * 1000;\r\n            } // prepare for the next URI\r\n\r\n            currentUri = {};\r\n          },\r\n          comment() {// comments are not important for playback\r\n          },\r\n          custom() {\r\n            // if this is segment-level data attach the output to the segment\r\n            if (entry.segment) {\r\n              currentUri.custom = currentUri.custom || {};\r\n              currentUri.custom[entry.customType] = entry.data; // if this is manifest-level data attach to the top level manifest object\r\n            } else {\r\n              this.manifest.custom = this.manifest.custom || {};\r\n              this.manifest.custom[entry.customType] = entry.data;\r\n            }\r\n          }\r\n        })[entry.type].call(self);\r\n      });\r\n    }\r\n    requiredCompatibilityversion(currentVersion, targetVersion) {\r\n      if (currentVersion < targetVersion || !currentVersion) {\r\n        this.trigger('warn', {\r\n          message: `manifest must be at least version ${targetVersion}`\r\n        });\r\n      }\r\n    }\r\n    warnOnMissingAttributes_(identifier, attributes, required) {\r\n      const missing = [];\r\n      required.forEach(function (key) {\r\n        if (!attributes.hasOwnProperty(key)) {\r\n          missing.push(key);\r\n        }\r\n      });\r\n      if (missing.length) {\r\n        this.trigger('warn', {\r\n          message: `${identifier} lacks required attribute(s): ${missing.join(', ')}`\r\n        });\r\n      }\r\n    }\r\n    /**\r\n     * Parse the input string and update the manifest object.\r\n     *\r\n     * @param {string} chunk a potentially incomplete portion of the manifest\r\n     */\r\n\r\n    push(chunk) {\r\n      this.lineStream.push(chunk);\r\n    }\r\n    /**\r\n     * Flush any remaining input. This can be handy if the last line of an M3U8\r\n     * manifest did not contain a trailing newline but the file has been\r\n     * completely received.\r\n     */\r\n\r\n    end() {\r\n      // flush any buffered input\r\n      this.lineStream.push('\\n');\r\n      if (this.manifest.dateRanges.length && this.lastProgramDateTime === null) {\r\n        this.trigger('warn', {\r\n          message: 'A playlist with EXT-X-DATERANGE tag must contain atleast one EXT-X-PROGRAM-DATE-TIME tag'\r\n        });\r\n      }\r\n      this.lastProgramDateTime = null;\r\n      this.trigger('end');\r\n    }\r\n    /**\r\n     * Add an additional parser for non-standard tags\r\n     *\r\n     * @param {Object}   options              a map of options for the added parser\r\n     * @param {RegExp}   options.expression   a regular expression to match the custom header\r\n     * @param {string}   options.customType   the custom type to register to the output\r\n     * @param {Function} [options.dataParser] function to parse the line into an object\r\n     * @param {boolean}  [options.segment]    should tag data be attached to the segment object\r\n     */\r\n\r\n    addParser(options) {\r\n      this.parseStream.addParser(options);\r\n    }\r\n    /**\r\n     * Add a custom header mapper\r\n     *\r\n     * @param {Object}   options\r\n     * @param {RegExp}   options.expression   a regular expression to match the custom header\r\n     * @param {Function} options.map          function to translate tag into a different tag\r\n     */\r\n\r\n    addTagMapper(options) {\r\n      this.parseStream.addTagMapper(options);\r\n    }\r\n  }\r\n\r\n  var regexs = {\r\n    // to determine mime types\r\n    mp4: /^(av0?1|avc0?[1234]|vp0?9|flac|opus|mp3|mp4a|mp4v|stpp.ttml.im1t)/,\r\n    webm: /^(vp0?[89]|av0?1|opus|vorbis)/,\r\n    ogg: /^(vp0?[89]|theora|flac|opus|vorbis)/,\r\n    // to determine if a codec is audio or video\r\n    video: /^(av0?1|avc0?[1234]|vp0?[89]|hvc1|hev1|theora|mp4v)/,\r\n    audio: /^(mp4a|flac|vorbis|opus|ac-[34]|ec-3|alac|mp3|speex|aac)/,\r\n    text: /^(stpp.ttml.im1t)/,\r\n    // mux.js support regex\r\n    muxerVideo: /^(avc0?1)/,\r\n    muxerAudio: /^(mp4a)/,\r\n    // match nothing as muxer does not support text right now.\r\n    // there cannot never be a character before the start of a string\r\n    // so this matches nothing.\r\n    muxerText: /a^/\r\n  };\r\n  var mediaTypes = ['video', 'audio', 'text'];\r\n  var upperMediaTypes = ['Video', 'Audio', 'Text'];\r\n  /**\r\n   * Replace the old apple-style `avc1.<dd>.<dd>` codec string with the standard\r\n   * `avc1.<hhhhhh>`\r\n   *\r\n   * @param {string} codec\r\n   *        Codec string to translate\r\n   * @return {string}\r\n   *         The translated codec string\r\n   */\r\n\r\n  var translateLegacyCodec = function translateLegacyCodec(codec) {\r\n    if (!codec) {\r\n      return codec;\r\n    }\r\n    return codec.replace(/avc1\\.(\\d+)\\.(\\d+)/i, function (orig, profile, avcLevel) {\r\n      var profileHex = ('00' + Number(profile).toString(16)).slice(-2);\r\n      var avcLevelHex = ('00' + Number(avcLevel).toString(16)).slice(-2);\r\n      return 'avc1.' + profileHex + '00' + avcLevelHex;\r\n    });\r\n  };\r\n  /**\r\n   * @typedef {Object} ParsedCodecInfo\r\n   * @property {number} codecCount\r\n   *           Number of codecs parsed\r\n   * @property {string} [videoCodec]\r\n   *           Parsed video codec (if found)\r\n   * @property {string} [videoObjectTypeIndicator]\r\n   *           Video object type indicator (if found)\r\n   * @property {string|null} audioProfile\r\n   *           Audio profile\r\n   */\r\n\r\n  /**\r\n   * Parses a codec string to retrieve the number of codecs specified, the video codec and\r\n   * object type indicator, and the audio profile.\r\n   *\r\n   * @param {string} [codecString]\r\n   *        The codec string to parse\r\n   * @return {ParsedCodecInfo}\r\n   *         Parsed codec info\r\n   */\r\n\r\n  var parseCodecs = function parseCodecs(codecString) {\r\n    if (codecString === void 0) {\r\n      codecString = '';\r\n    }\r\n    var codecs = codecString.split(',');\r\n    var result = [];\r\n    codecs.forEach(function (codec) {\r\n      codec = codec.trim();\r\n      var codecType;\r\n      mediaTypes.forEach(function (name) {\r\n        var match = regexs[name].exec(codec.toLowerCase());\r\n        if (!match || match.length <= 1) {\r\n          return;\r\n        }\r\n        codecType = name; // maintain codec case\r\n\r\n        var type = codec.substring(0, match[1].length);\r\n        var details = codec.replace(type, '');\r\n        result.push({\r\n          type: type,\r\n          details: details,\r\n          mediaType: name\r\n        });\r\n      });\r\n      if (!codecType) {\r\n        result.push({\r\n          type: codec,\r\n          details: '',\r\n          mediaType: 'unknown'\r\n        });\r\n      }\r\n    });\r\n    return result;\r\n  };\r\n  /**\r\n   * Returns a ParsedCodecInfo object for the default alternate audio playlist if there is\r\n   * a default alternate audio playlist for the provided audio group.\r\n   *\r\n   * @param {Object} master\r\n   *        The master playlist\r\n   * @param {string} audioGroupId\r\n   *        ID of the audio group for which to find the default codec info\r\n   * @return {ParsedCodecInfo}\r\n   *         Parsed codec info\r\n   */\r\n\r\n  var codecsFromDefault = function codecsFromDefault(master, audioGroupId) {\r\n    if (!master.mediaGroups.AUDIO || !audioGroupId) {\r\n      return null;\r\n    }\r\n    var audioGroup = master.mediaGroups.AUDIO[audioGroupId];\r\n    if (!audioGroup) {\r\n      return null;\r\n    }\r\n    for (var name in audioGroup) {\r\n      var audioType = audioGroup[name];\r\n      if (audioType.default && audioType.playlists) {\r\n        // codec should be the same for all playlists within the audio type\r\n        return parseCodecs(audioType.playlists[0].attributes.CODECS);\r\n      }\r\n    }\r\n    return null;\r\n  };\r\n  var isAudioCodec = function isAudioCodec(codec) {\r\n    if (codec === void 0) {\r\n      codec = '';\r\n    }\r\n    return regexs.audio.test(codec.trim().toLowerCase());\r\n  };\r\n  var isTextCodec = function isTextCodec(codec) {\r\n    if (codec === void 0) {\r\n      codec = '';\r\n    }\r\n    return regexs.text.test(codec.trim().toLowerCase());\r\n  };\r\n  var getMimeForCodec = function getMimeForCodec(codecString) {\r\n    if (!codecString || typeof codecString !== 'string') {\r\n      return;\r\n    }\r\n    var codecs = codecString.toLowerCase().split(',').map(function (c) {\r\n      return translateLegacyCodec(c.trim());\r\n    }); // default to video type\r\n\r\n    var type = 'video'; // only change to audio type if the only codec we have is\r\n    // audio\r\n\r\n    if (codecs.length === 1 && isAudioCodec(codecs[0])) {\r\n      type = 'audio';\r\n    } else if (codecs.length === 1 && isTextCodec(codecs[0])) {\r\n      // text uses application/<container> for now\r\n      type = 'application';\r\n    } // default the container to mp4\r\n\r\n    var container = 'mp4'; // every codec must be able to go into the container\r\n    // for that container to be the correct one\r\n\r\n    if (codecs.every(function (c) {\r\n      return regexs.mp4.test(c);\r\n    })) {\r\n      container = 'mp4';\r\n    } else if (codecs.every(function (c) {\r\n      return regexs.webm.test(c);\r\n    })) {\r\n      container = 'webm';\r\n    } else if (codecs.every(function (c) {\r\n      return regexs.ogg.test(c);\r\n    })) {\r\n      container = 'ogg';\r\n    }\r\n    return type + \"/\" + container + \";codecs=\\\"\" + codecString + \"\\\"\";\r\n  };\r\n  /**\r\n   * Tests whether the codec is supported by MediaSource. Optionally also tests ManagedMediaSource.\r\n   *\r\n   * @param {string} codecString\r\n   *        Codec to test\r\n   * @param {boolean} [withMMS]\r\n   *        Whether to check if ManagedMediaSource supports it\r\n   * @return {boolean}\r\n   *          Codec is supported\r\n   */\r\n\r\n  var browserSupportsCodec = function browserSupportsCodec(codecString, withMMS) {\r\n    if (codecString === void 0) {\r\n      codecString = '';\r\n    }\r\n    if (withMMS === void 0) {\r\n      withMMS = false;\r\n    }\r\n    return window.MediaSource && window.MediaSource.isTypeSupported && window.MediaSource.isTypeSupported(getMimeForCodec(codecString)) || withMMS && window.ManagedMediaSource && window.ManagedMediaSource.isTypeSupported && window.ManagedMediaSource.isTypeSupported(getMimeForCodec(codecString)) || false;\r\n  };\r\n  var muxerSupportsCodec = function muxerSupportsCodec(codecString) {\r\n    if (codecString === void 0) {\r\n      codecString = '';\r\n    }\r\n    return codecString.toLowerCase().split(',').every(function (codec) {\r\n      codec = codec.trim(); // any match is supported.\r\n\r\n      for (var i = 0; i < upperMediaTypes.length; i++) {\r\n        var type = upperMediaTypes[i];\r\n        if (regexs[\"muxer\" + type].test(codec)) {\r\n          return true;\r\n        }\r\n      }\r\n      return false;\r\n    });\r\n  };\r\n  var DEFAULT_AUDIO_CODEC = 'mp4a.40.2';\r\n  var DEFAULT_VIDEO_CODEC = 'avc1.4d400d';\r\n\r\n  var MPEGURL_REGEX = /^(audio|video|application)\\/(x-|vnd\\.apple\\.)?mpegurl/i;\r\n  var DASH_REGEX = /^application\\/dash\\+xml/i;\r\n  /**\r\n   * Returns a string that describes the type of source based on a video source object's\r\n   * media type.\r\n   *\r\n   * @see {@link https://dev.w3.org/html5/pf-summary/video.html#dom-source-type|Source Type}\r\n   *\r\n   * @param {string} type\r\n   *        Video source object media type\r\n   * @return {('hls'|'dash'|'vhs-json'|null)}\r\n   *         VHS source type string\r\n   */\r\n\r\n  var simpleTypeFromSourceType = function simpleTypeFromSourceType(type) {\r\n    if (MPEGURL_REGEX.test(type)) {\r\n      return 'hls';\r\n    }\r\n    if (DASH_REGEX.test(type)) {\r\n      return 'dash';\r\n    } // Denotes the special case of a manifest object passed to http-streaming instead of a\r\n    // source URL.\r\n    //\r\n    // See https://en.wikipedia.org/wiki/Media_type for details on specifying media types.\r\n    //\r\n    // In this case, vnd stands for vendor, video.js for the organization, VHS for this\r\n    // project, and the +json suffix identifies the structure of the media type.\r\n\r\n    if (type === 'application/vnd.videojs.vhs+json') {\r\n      return 'vhs-json';\r\n    }\r\n    return null;\r\n  };\r\n\r\n  // const log2 = Math.log2 ? Math.log2 : (x) => (Math.log(x) / Math.log(2));\r\n  // we used to do this with log2 but BigInt does not support builtin math\r\n  // Math.ceil(log2(x));\r\n\r\n  var countBits = function countBits(x) {\r\n    return x.toString(2).length;\r\n  }; // count the number of whole bytes it would take to represent a number\r\n\r\n  var countBytes = function countBytes(x) {\r\n    return Math.ceil(countBits(x) / 8);\r\n  };\r\n  var isArrayBufferView = function isArrayBufferView(obj) {\r\n    if (ArrayBuffer.isView === 'function') {\r\n      return ArrayBuffer.isView(obj);\r\n    }\r\n    return obj && obj.buffer instanceof ArrayBuffer;\r\n  };\r\n  var isTypedArray = function isTypedArray(obj) {\r\n    return isArrayBufferView(obj);\r\n  };\r\n  var toUint8 = function toUint8(bytes) {\r\n    if (bytes instanceof Uint8Array) {\r\n      return bytes;\r\n    }\r\n    if (!Array.isArray(bytes) && !isTypedArray(bytes) && !(bytes instanceof ArrayBuffer)) {\r\n      // any non-number or NaN leads to empty uint8array\r\n      // eslint-disable-next-line\r\n      if (typeof bytes !== 'number' || typeof bytes === 'number' && bytes !== bytes) {\r\n        bytes = 0;\r\n      } else {\r\n        bytes = [bytes];\r\n      }\r\n    }\r\n    return new Uint8Array(bytes && bytes.buffer || bytes, bytes && bytes.byteOffset || 0, bytes && bytes.byteLength || 0);\r\n  };\r\n  var BigInt = window.BigInt || Number;\r\n  var BYTE_TABLE = [BigInt('0x1'), BigInt('0x100'), BigInt('0x10000'), BigInt('0x1000000'), BigInt('0x100000000'), BigInt('0x10000000000'), BigInt('0x1000000000000'), BigInt('0x100000000000000'), BigInt('0x10000000000000000')];\r\n  (function () {\r\n    var a = new Uint16Array([0xFFCC]);\r\n    var b = new Uint8Array(a.buffer, a.byteOffset, a.byteLength);\r\n    if (b[0] === 0xFF) {\r\n      return 'big';\r\n    }\r\n    if (b[0] === 0xCC) {\r\n      return 'little';\r\n    }\r\n    return 'unknown';\r\n  })();\r\n  var bytesToNumber = function bytesToNumber(bytes, _temp) {\r\n    var _ref = _temp === void 0 ? {} : _temp,\r\n      _ref$signed = _ref.signed,\r\n      signed = _ref$signed === void 0 ? false : _ref$signed,\r\n      _ref$le = _ref.le,\r\n      le = _ref$le === void 0 ? false : _ref$le;\r\n    bytes = toUint8(bytes);\r\n    var fn = le ? 'reduce' : 'reduceRight';\r\n    var obj = bytes[fn] ? bytes[fn] : Array.prototype[fn];\r\n    var number = obj.call(bytes, function (total, byte, i) {\r\n      var exponent = le ? i : Math.abs(i + 1 - bytes.length);\r\n      return total + BigInt(byte) * BYTE_TABLE[exponent];\r\n    }, BigInt(0));\r\n    if (signed) {\r\n      var max = BYTE_TABLE[bytes.length] / BigInt(2) - BigInt(1);\r\n      number = BigInt(number);\r\n      if (number > max) {\r\n        number -= max;\r\n        number -= max;\r\n        number -= BigInt(2);\r\n      }\r\n    }\r\n    return Number(number);\r\n  };\r\n  var numberToBytes = function numberToBytes(number, _temp2) {\r\n    var _ref2 = _temp2 === void 0 ? {} : _temp2,\r\n      _ref2$le = _ref2.le,\r\n      le = _ref2$le === void 0 ? false : _ref2$le;\r\n\r\n    // eslint-disable-next-line\r\n    if (typeof number !== 'bigint' && typeof number !== 'number' || typeof number === 'number' && number !== number) {\r\n      number = 0;\r\n    }\r\n    number = BigInt(number);\r\n    var byteCount = countBytes(number);\r\n    var bytes = new Uint8Array(new ArrayBuffer(byteCount));\r\n    for (var i = 0; i < byteCount; i++) {\r\n      var byteIndex = le ? i : Math.abs(i + 1 - bytes.length);\r\n      bytes[byteIndex] = Number(number / BYTE_TABLE[i] & BigInt(0xFF));\r\n      if (number < 0) {\r\n        bytes[byteIndex] = Math.abs(~bytes[byteIndex]);\r\n        bytes[byteIndex] -= i === 0 ? 1 : 2;\r\n      }\r\n    }\r\n    return bytes;\r\n  };\r\n  var stringToBytes = function stringToBytes(string, stringIsBytes) {\r\n    if (typeof string !== 'string' && string && typeof string.toString === 'function') {\r\n      string = string.toString();\r\n    }\r\n    if (typeof string !== 'string') {\r\n      return new Uint8Array();\r\n    } // If the string already is bytes, we don't have to do this\r\n    // otherwise we do this so that we split multi length characters\r\n    // into individual bytes\r\n\r\n    if (!stringIsBytes) {\r\n      string = unescape(encodeURIComponent(string));\r\n    }\r\n    var view = new Uint8Array(string.length);\r\n    for (var i = 0; i < string.length; i++) {\r\n      view[i] = string.charCodeAt(i);\r\n    }\r\n    return view;\r\n  };\r\n  var concatTypedArrays = function concatTypedArrays() {\r\n    for (var _len = arguments.length, buffers = new Array(_len), _key = 0; _key < _len; _key++) {\r\n      buffers[_key] = arguments[_key];\r\n    }\r\n    buffers = buffers.filter(function (b) {\r\n      return b && (b.byteLength || b.length) && typeof b !== 'string';\r\n    });\r\n    if (buffers.length <= 1) {\r\n      // for 0 length we will return empty uint8\r\n      // for 1 length we return the first uint8\r\n      return toUint8(buffers[0]);\r\n    }\r\n    var totalLen = buffers.reduce(function (total, buf, i) {\r\n      return total + (buf.byteLength || buf.length);\r\n    }, 0);\r\n    var tempBuffer = new Uint8Array(totalLen);\r\n    var offset = 0;\r\n    buffers.forEach(function (buf) {\r\n      buf = toUint8(buf);\r\n      tempBuffer.set(buf, offset);\r\n      offset += buf.byteLength;\r\n    });\r\n    return tempBuffer;\r\n  };\r\n  /**\r\n   * Check if the bytes \"b\" are contained within bytes \"a\".\r\n   *\r\n   * @param {Uint8Array|Array} a\r\n   *        Bytes to check in\r\n   *\r\n   * @param {Uint8Array|Array} b\r\n   *        Bytes to check for\r\n   *\r\n   * @param {Object} options\r\n   *        options\r\n   *\r\n   * @param {Array|Uint8Array} [offset=0]\r\n   *        offset to use when looking at bytes in a\r\n   *\r\n   * @param {Array|Uint8Array} [mask=[]]\r\n   *        mask to use on bytes before comparison.\r\n   *\r\n   * @return {boolean}\r\n   *         If all bytes in b are inside of a, taking into account\r\n   *         bit masks.\r\n   */\r\n\r\n  var bytesMatch = function bytesMatch(a, b, _temp3) {\r\n    var _ref3 = _temp3 === void 0 ? {} : _temp3,\r\n      _ref3$offset = _ref3.offset,\r\n      offset = _ref3$offset === void 0 ? 0 : _ref3$offset,\r\n      _ref3$mask = _ref3.mask,\r\n      mask = _ref3$mask === void 0 ? [] : _ref3$mask;\r\n    a = toUint8(a);\r\n    b = toUint8(b); // ie 11 does not support uint8 every\r\n\r\n    var fn = b.every ? b.every : Array.prototype.every;\r\n    return b.length && a.length - offset >= b.length &&\r\n    // ie 11 doesn't support every on uin8\r\n    fn.call(b, function (bByte, i) {\r\n      var aByte = mask[i] ? mask[i] & a[offset + i] : a[offset + i];\r\n      return bByte === aByte;\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Loops through all supported media groups in master and calls the provided\r\n   * callback for each group\r\n   *\r\n   * @param {Object} master\r\n   *        The parsed master manifest object\r\n   * @param {string[]} groups\r\n   *        The media groups to call the callback for\r\n   * @param {Function} callback\r\n   *        Callback to call for each media group\r\n   */\r\n  var forEachMediaGroup$1 = function forEachMediaGroup(master, groups, callback) {\r\n    groups.forEach(function (mediaType) {\r\n      for (var groupKey in master.mediaGroups[mediaType]) {\r\n        for (var labelKey in master.mediaGroups[mediaType][groupKey]) {\r\n          var mediaProperties = master.mediaGroups[mediaType][groupKey][labelKey];\r\n          callback(mediaProperties, mediaType, groupKey, labelKey);\r\n        }\r\n      }\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Ponyfill for `Array.prototype.find` which is only available in ES6 runtimes.\r\n   *\r\n   * Works with anything that has a `length` property and index access properties, including NodeList.\r\n   *\r\n   * @template {unknown} T\r\n   * @param {Array<T> | ({length:number, [number]: T})} list\r\n   * @param {function (item: T, index: number, list:Array<T> | ({length:number, [number]: T})):boolean} predicate\r\n   * @param {Partial<Pick<ArrayConstructor['prototype'], 'find'>>?} ac `Array.prototype` by default,\r\n   * \t\t\t\tallows injecting a custom implementation in tests\r\n   * @returns {T | undefined}\r\n   *\r\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find\r\n   * @see https://tc39.es/ecma262/multipage/indexed-collections.html#sec-array.prototype.find\r\n   */\r\n  function find$1(list, predicate, ac) {\r\n    if (ac === undefined) {\r\n      ac = Array.prototype;\r\n    }\r\n    if (list && typeof ac.find === 'function') {\r\n      return ac.find.call(list, predicate);\r\n    }\r\n    for (var i = 0; i < list.length; i++) {\r\n      if (Object.prototype.hasOwnProperty.call(list, i)) {\r\n        var item = list[i];\r\n        if (predicate.call(undefined, item, i, list)) {\r\n          return item;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * \"Shallow freezes\" an object to render it immutable.\r\n   * Uses `Object.freeze` if available,\r\n   * otherwise the immutability is only in the type.\r\n   *\r\n   * Is used to create \"enum like\" objects.\r\n   *\r\n   * @template T\r\n   * @param {T} object the object to freeze\r\n   * @param {Pick<ObjectConstructor, 'freeze'> = Object} oc `Object` by default,\r\n   * \t\t\t\tallows to inject custom object constructor for tests\r\n   * @returns {Readonly<T>}\r\n   *\r\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze\r\n   */\r\n  function freeze(object, oc) {\r\n    if (oc === undefined) {\r\n      oc = Object;\r\n    }\r\n    return oc && typeof oc.freeze === 'function' ? oc.freeze(object) : object;\r\n  }\r\n\r\n  /**\r\n   * Since we can not rely on `Object.assign` we provide a simplified version\r\n   * that is sufficient for our needs.\r\n   *\r\n   * @param {Object} target\r\n   * @param {Object | null | undefined} source\r\n   *\r\n   * @returns {Object} target\r\n   * @throws TypeError if target is not an object\r\n   *\r\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\r\n   * @see https://tc39.es/ecma262/multipage/fundamental-objects.html#sec-object.assign\r\n   */\r\n  function assign(target, source) {\r\n    if (target === null || typeof target !== 'object') {\r\n      throw new TypeError('target is not an object');\r\n    }\r\n    for (var key in source) {\r\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\r\n        target[key] = source[key];\r\n      }\r\n    }\r\n    return target;\r\n  }\r\n\r\n  /**\r\n   * All mime types that are allowed as input to `DOMParser.parseFromString`\r\n   *\r\n   * @see https://developer.mozilla.org/en-US/docs/Web/API/DOMParser/parseFromString#Argument02 MDN\r\n   * @see https://html.spec.whatwg.org/multipage/dynamic-markup-insertion.html#domparsersupportedtype WHATWG HTML Spec\r\n   * @see DOMParser.prototype.parseFromString\r\n   */\r\n  var MIME_TYPE = freeze({\r\n    /**\r\n     * `text/html`, the only mime type that triggers treating an XML document as HTML.\r\n     *\r\n     * @see DOMParser.SupportedType.isHTML\r\n     * @see https://www.iana.org/assignments/media-types/text/html IANA MimeType registration\r\n     * @see https://en.wikipedia.org/wiki/HTML Wikipedia\r\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/DOMParser/parseFromString MDN\r\n     * @see https://html.spec.whatwg.org/multipage/dynamic-markup-insertion.html#dom-domparser-parsefromstring WHATWG HTML Spec\r\n     */\r\n    HTML: 'text/html',\r\n    /**\r\n     * Helper method to check a mime type if it indicates an HTML document\r\n     *\r\n     * @param {string} [value]\r\n     * @returns {boolean}\r\n     *\r\n     * @see https://www.iana.org/assignments/media-types/text/html IANA MimeType registration\r\n     * @see https://en.wikipedia.org/wiki/HTML Wikipedia\r\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/DOMParser/parseFromString MDN\r\n     * @see https://html.spec.whatwg.org/multipage/dynamic-markup-insertion.html#dom-domparser-parsefromstring \t */\r\n    isHTML: function (value) {\r\n      return value === MIME_TYPE.HTML;\r\n    },\r\n    /**\r\n     * `application/xml`, the standard mime type for XML documents.\r\n     *\r\n     * @see https://www.iana.org/assignments/media-types/application/xml IANA MimeType registration\r\n     * @see https://tools.ietf.org/html/rfc7303#section-9.1 RFC 7303\r\n     * @see https://en.wikipedia.org/wiki/XML_and_MIME Wikipedia\r\n     */\r\n    XML_APPLICATION: 'application/xml',\r\n    /**\r\n     * `text/html`, an alias for `application/xml`.\r\n     *\r\n     * @see https://tools.ietf.org/html/rfc7303#section-9.2 RFC 7303\r\n     * @see https://www.iana.org/assignments/media-types/text/xml IANA MimeType registration\r\n     * @see https://en.wikipedia.org/wiki/XML_and_MIME Wikipedia\r\n     */\r\n    XML_TEXT: 'text/xml',\r\n    /**\r\n     * `application/xhtml+xml`, indicates an XML document that has the default HTML namespace,\r\n     * but is parsed as an XML document.\r\n     *\r\n     * @see https://www.iana.org/assignments/media-types/application/xhtml+xml IANA MimeType registration\r\n     * @see https://dom.spec.whatwg.org/#dom-domimplementation-createdocument WHATWG DOM Spec\r\n     * @see https://en.wikipedia.org/wiki/XHTML Wikipedia\r\n     */\r\n    XML_XHTML_APPLICATION: 'application/xhtml+xml',\r\n    /**\r\n     * `image/svg+xml`,\r\n     *\r\n     * @see https://www.iana.org/assignments/media-types/image/svg+xml IANA MimeType registration\r\n     * @see https://www.w3.org/TR/SVG11/ W3C SVG 1.1\r\n     * @see https://en.wikipedia.org/wiki/Scalable_Vector_Graphics Wikipedia\r\n     */\r\n    XML_SVG_IMAGE: 'image/svg+xml'\r\n  });\r\n\r\n  /**\r\n   * Namespaces that are used in this code base.\r\n   *\r\n   * @see http://www.w3.org/TR/REC-xml-names\r\n   */\r\n  var NAMESPACE$3 = freeze({\r\n    /**\r\n     * The XHTML namespace.\r\n     *\r\n     * @see http://www.w3.org/1999/xhtml\r\n     */\r\n    HTML: 'http://www.w3.org/1999/xhtml',\r\n    /**\r\n     * Checks if `uri` equals `NAMESPACE.HTML`.\r\n     *\r\n     * @param {string} [uri]\r\n     *\r\n     * @see NAMESPACE.HTML\r\n     */\r\n    isHTML: function (uri) {\r\n      return uri === NAMESPACE$3.HTML;\r\n    },\r\n    /**\r\n     * The SVG namespace.\r\n     *\r\n     * @see http://www.w3.org/2000/svg\r\n     */\r\n    SVG: 'http://www.w3.org/2000/svg',\r\n    /**\r\n     * The `xml:` namespace.\r\n     *\r\n     * @see http://www.w3.org/XML/1998/namespace\r\n     */\r\n    XML: 'http://www.w3.org/XML/1998/namespace',\r\n    /**\r\n     * The `xmlns:` namespace\r\n     *\r\n     * @see https://www.w3.org/2000/xmlns/\r\n     */\r\n    XMLNS: 'http://www.w3.org/2000/xmlns/'\r\n  });\r\n  var assign_1 = assign;\r\n  var find_1 = find$1;\r\n  var freeze_1 = freeze;\r\n  var MIME_TYPE_1 = MIME_TYPE;\r\n  var NAMESPACE_1 = NAMESPACE$3;\r\n  var conventions = {\r\n    assign: assign_1,\r\n    find: find_1,\r\n    freeze: freeze_1,\r\n    MIME_TYPE: MIME_TYPE_1,\r\n    NAMESPACE: NAMESPACE_1\r\n  };\r\n\r\n  var find = conventions.find;\r\n  var NAMESPACE$2 = conventions.NAMESPACE;\r\n\r\n  /**\r\n   * A prerequisite for `[].filter`, to drop elements that are empty\r\n   * @param {string} input\r\n   * @returns {boolean}\r\n   */\r\n  function notEmptyString(input) {\r\n    return input !== '';\r\n  }\r\n  /**\r\n   * @see https://infra.spec.whatwg.org/#split-on-ascii-whitespace\r\n   * @see https://infra.spec.whatwg.org/#ascii-whitespace\r\n   *\r\n   * @param {string} input\r\n   * @returns {string[]} (can be empty)\r\n   */\r\n  function splitOnASCIIWhitespace(input) {\r\n    // U+0009 TAB, U+000A LF, U+000C FF, U+000D CR, U+0020 SPACE\r\n    return input ? input.split(/[\\t\\n\\f\\r ]+/).filter(notEmptyString) : [];\r\n  }\r\n\r\n  /**\r\n   * Adds element as a key to current if it is not already present.\r\n   *\r\n   * @param {Record<string, boolean | undefined>} current\r\n   * @param {string} element\r\n   * @returns {Record<string, boolean | undefined>}\r\n   */\r\n  function orderedSetReducer(current, element) {\r\n    if (!current.hasOwnProperty(element)) {\r\n      current[element] = true;\r\n    }\r\n    return current;\r\n  }\r\n\r\n  /**\r\n   * @see https://infra.spec.whatwg.org/#ordered-set\r\n   * @param {string} input\r\n   * @returns {string[]}\r\n   */\r\n  function toOrderedSet(input) {\r\n    if (!input) return [];\r\n    var list = splitOnASCIIWhitespace(input);\r\n    return Object.keys(list.reduce(orderedSetReducer, {}));\r\n  }\r\n\r\n  /**\r\n   * Uses `list.indexOf` to implement something like `Array.prototype.includes`,\r\n   * which we can not rely on being available.\r\n   *\r\n   * @param {any[]} list\r\n   * @returns {function(any): boolean}\r\n   */\r\n  function arrayIncludes(list) {\r\n    return function (element) {\r\n      return list && list.indexOf(element) !== -1;\r\n    };\r\n  }\r\n  function copy(src, dest) {\r\n    for (var p in src) {\r\n      if (Object.prototype.hasOwnProperty.call(src, p)) {\r\n        dest[p] = src[p];\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n  ^\\w+\\.prototype\\.([_\\w]+)\\s*=\\s*((?:.*\\{\\s*?[\\r\\n][\\s\\S]*?^})|\\S.*?(?=[;\\r\\n]));?\r\n  ^\\w+\\.prototype\\.([_\\w]+)\\s*=\\s*(\\S.*?(?=[;\\r\\n]));?\r\n   */\r\n  function _extends(Class, Super) {\r\n    var pt = Class.prototype;\r\n    if (!(pt instanceof Super)) {\r\n      function t() {}\r\n      t.prototype = Super.prototype;\r\n      t = new t();\r\n      copy(pt, t);\r\n      Class.prototype = pt = t;\r\n    }\r\n    if (pt.constructor != Class) {\r\n      if (typeof Class != 'function') {\r\n        console.error(\"unknown Class:\" + Class);\r\n      }\r\n      pt.constructor = Class;\r\n    }\r\n  }\r\n\r\n  // Node Types\r\n  var NodeType = {};\r\n  var ELEMENT_NODE = NodeType.ELEMENT_NODE = 1;\r\n  var ATTRIBUTE_NODE = NodeType.ATTRIBUTE_NODE = 2;\r\n  var TEXT_NODE = NodeType.TEXT_NODE = 3;\r\n  var CDATA_SECTION_NODE = NodeType.CDATA_SECTION_NODE = 4;\r\n  var ENTITY_REFERENCE_NODE = NodeType.ENTITY_REFERENCE_NODE = 5;\r\n  var ENTITY_NODE = NodeType.ENTITY_NODE = 6;\r\n  var PROCESSING_INSTRUCTION_NODE = NodeType.PROCESSING_INSTRUCTION_NODE = 7;\r\n  var COMMENT_NODE = NodeType.COMMENT_NODE = 8;\r\n  var DOCUMENT_NODE = NodeType.DOCUMENT_NODE = 9;\r\n  var DOCUMENT_TYPE_NODE = NodeType.DOCUMENT_TYPE_NODE = 10;\r\n  var DOCUMENT_FRAGMENT_NODE = NodeType.DOCUMENT_FRAGMENT_NODE = 11;\r\n  var NOTATION_NODE = NodeType.NOTATION_NODE = 12;\r\n\r\n  // ExceptionCode\r\n  var ExceptionCode = {};\r\n  var ExceptionMessage = {};\r\n  ExceptionCode.INDEX_SIZE_ERR = (ExceptionMessage[1] = \"Index size error\", 1);\r\n  ExceptionCode.DOMSTRING_SIZE_ERR = (ExceptionMessage[2] = \"DOMString size error\", 2);\r\n  var HIERARCHY_REQUEST_ERR = ExceptionCode.HIERARCHY_REQUEST_ERR = (ExceptionMessage[3] = \"Hierarchy request error\", 3);\r\n  ExceptionCode.WRONG_DOCUMENT_ERR = (ExceptionMessage[4] = \"Wrong document\", 4);\r\n  ExceptionCode.INVALID_CHARACTER_ERR = (ExceptionMessage[5] = \"Invalid character\", 5);\r\n  ExceptionCode.NO_DATA_ALLOWED_ERR = (ExceptionMessage[6] = \"No data allowed\", 6);\r\n  ExceptionCode.NO_MODIFICATION_ALLOWED_ERR = (ExceptionMessage[7] = \"No modification allowed\", 7);\r\n  var NOT_FOUND_ERR = ExceptionCode.NOT_FOUND_ERR = (ExceptionMessage[8] = \"Not found\", 8);\r\n  ExceptionCode.NOT_SUPPORTED_ERR = (ExceptionMessage[9] = \"Not supported\", 9);\r\n  var INUSE_ATTRIBUTE_ERR = ExceptionCode.INUSE_ATTRIBUTE_ERR = (ExceptionMessage[10] = \"Attribute in use\", 10);\r\n  //level2\r\n  ExceptionCode.INVALID_STATE_ERR = (ExceptionMessage[11] = \"Invalid state\", 11);\r\n  ExceptionCode.SYNTAX_ERR = (ExceptionMessage[12] = \"Syntax error\", 12);\r\n  ExceptionCode.INVALID_MODIFICATION_ERR = (ExceptionMessage[13] = \"Invalid modification\", 13);\r\n  ExceptionCode.NAMESPACE_ERR = (ExceptionMessage[14] = \"Invalid namespace\", 14);\r\n  ExceptionCode.INVALID_ACCESS_ERR = (ExceptionMessage[15] = \"Invalid access\", 15);\r\n\r\n  /**\r\n   * DOM Level 2\r\n   * Object DOMException\r\n   * @see http://www.w3.org/TR/2000/REC-DOM-Level-2-Core-20001113/ecma-script-binding.html\r\n   * @see http://www.w3.org/TR/REC-DOM-Level-1/ecma-script-language-binding.html\r\n   */\r\n  function DOMException(code, message) {\r\n    if (message instanceof Error) {\r\n      var error = message;\r\n    } else {\r\n      error = this;\r\n      Error.call(this, ExceptionMessage[code]);\r\n      this.message = ExceptionMessage[code];\r\n      if (Error.captureStackTrace) Error.captureStackTrace(this, DOMException);\r\n    }\r\n    error.code = code;\r\n    if (message) this.message = this.message + \": \" + message;\r\n    return error;\r\n  }\r\n  DOMException.prototype = Error.prototype;\r\n  copy(ExceptionCode, DOMException);\r\n\r\n  /**\r\n   * @see http://www.w3.org/TR/2000/REC-DOM-Level-2-Core-20001113/core.html#ID-536297177\r\n   * The NodeList interface provides the abstraction of an ordered collection of nodes, without defining or constraining how this collection is implemented. NodeList objects in the DOM are live.\r\n   * The items in the NodeList are accessible via an integral index, starting from 0.\r\n   */\r\n  function NodeList() {}\r\n  NodeList.prototype = {\r\n    /**\r\n     * The number of nodes in the list. The range of valid child node indices is 0 to length-1 inclusive.\r\n     * @standard level1\r\n     */\r\n    length: 0,\r\n    /**\r\n     * Returns the indexth item in the collection. If index is greater than or equal to the number of nodes in the list, this returns null.\r\n     * @standard level1\r\n     * @param index  unsigned long\r\n     *   Index into the collection.\r\n     * @return Node\r\n     * \tThe node at the indexth position in the NodeList, or null if that is not a valid index.\r\n     */\r\n    item: function (index) {\r\n      return index >= 0 && index < this.length ? this[index] : null;\r\n    },\r\n    toString: function (isHTML, nodeFilter) {\r\n      for (var buf = [], i = 0; i < this.length; i++) {\r\n        serializeToString(this[i], buf, isHTML, nodeFilter);\r\n      }\r\n      return buf.join('');\r\n    },\r\n    /**\r\n     * @private\r\n     * @param {function (Node):boolean} predicate\r\n     * @returns {Node[]}\r\n     */\r\n    filter: function (predicate) {\r\n      return Array.prototype.filter.call(this, predicate);\r\n    },\r\n    /**\r\n     * @private\r\n     * @param {Node} item\r\n     * @returns {number}\r\n     */\r\n    indexOf: function (item) {\r\n      return Array.prototype.indexOf.call(this, item);\r\n    }\r\n  };\r\n  function LiveNodeList(node, refresh) {\r\n    this._node = node;\r\n    this._refresh = refresh;\r\n    _updateLiveList(this);\r\n  }\r\n  function _updateLiveList(list) {\r\n    var inc = list._node._inc || list._node.ownerDocument._inc;\r\n    if (list._inc !== inc) {\r\n      var ls = list._refresh(list._node);\r\n      __set__(list, 'length', ls.length);\r\n      if (!list.$$length || ls.length < list.$$length) {\r\n        for (var i = ls.length; i in list; i++) {\r\n          if (Object.prototype.hasOwnProperty.call(list, i)) {\r\n            delete list[i];\r\n          }\r\n        }\r\n      }\r\n      copy(ls, list);\r\n      list._inc = inc;\r\n    }\r\n  }\r\n  LiveNodeList.prototype.item = function (i) {\r\n    _updateLiveList(this);\r\n    return this[i] || null;\r\n  };\r\n  _extends(LiveNodeList, NodeList);\r\n\r\n  /**\r\n   * Objects implementing the NamedNodeMap interface are used\r\n   * to represent collections of nodes that can be accessed by name.\r\n   * Note that NamedNodeMap does not inherit from NodeList;\r\n   * NamedNodeMaps are not maintained in any particular order.\r\n   * Objects contained in an object implementing NamedNodeMap may also be accessed by an ordinal index,\r\n   * but this is simply to allow convenient enumeration of the contents of a NamedNodeMap,\r\n   * and does not imply that the DOM specifies an order to these Nodes.\r\n   * NamedNodeMap objects in the DOM are live.\r\n   * used for attributes or DocumentType entities\r\n   */\r\n  function NamedNodeMap() {}\r\n  function _findNodeIndex(list, node) {\r\n    var i = list.length;\r\n    while (i--) {\r\n      if (list[i] === node) {\r\n        return i;\r\n      }\r\n    }\r\n  }\r\n  function _addNamedNode(el, list, newAttr, oldAttr) {\r\n    if (oldAttr) {\r\n      list[_findNodeIndex(list, oldAttr)] = newAttr;\r\n    } else {\r\n      list[list.length++] = newAttr;\r\n    }\r\n    if (el) {\r\n      newAttr.ownerElement = el;\r\n      var doc = el.ownerDocument;\r\n      if (doc) {\r\n        oldAttr && _onRemoveAttribute(doc, el, oldAttr);\r\n        _onAddAttribute(doc, el, newAttr);\r\n      }\r\n    }\r\n  }\r\n  function _removeNamedNode(el, list, attr) {\r\n    //console.log('remove attr:'+attr)\r\n    var i = _findNodeIndex(list, attr);\r\n    if (i >= 0) {\r\n      var lastIndex = list.length - 1;\r\n      while (i < lastIndex) {\r\n        list[i] = list[++i];\r\n      }\r\n      list.length = lastIndex;\r\n      if (el) {\r\n        var doc = el.ownerDocument;\r\n        if (doc) {\r\n          _onRemoveAttribute(doc, el, attr);\r\n          attr.ownerElement = null;\r\n        }\r\n      }\r\n    } else {\r\n      throw new DOMException(NOT_FOUND_ERR, new Error(el.tagName + '@' + attr));\r\n    }\r\n  }\r\n  NamedNodeMap.prototype = {\r\n    length: 0,\r\n    item: NodeList.prototype.item,\r\n    getNamedItem: function (key) {\r\n      //\t\tif(key.indexOf(':')>0 || key == 'xmlns'){\r\n      //\t\t\treturn null;\r\n      //\t\t}\r\n      //console.log()\r\n      var i = this.length;\r\n      while (i--) {\r\n        var attr = this[i];\r\n        //console.log(attr.nodeName,key)\r\n        if (attr.nodeName == key) {\r\n          return attr;\r\n        }\r\n      }\r\n    },\r\n    setNamedItem: function (attr) {\r\n      var el = attr.ownerElement;\r\n      if (el && el != this._ownerElement) {\r\n        throw new DOMException(INUSE_ATTRIBUTE_ERR);\r\n      }\r\n      var oldAttr = this.getNamedItem(attr.nodeName);\r\n      _addNamedNode(this._ownerElement, this, attr, oldAttr);\r\n      return oldAttr;\r\n    },\r\n    /* returns Node */\r\n    setNamedItemNS: function (attr) {\r\n      // raises: WRONG_DOCUMENT_ERR,NO_MODIFICATION_ALLOWED_ERR,INUSE_ATTRIBUTE_ERR\r\n      var el = attr.ownerElement,\r\n        oldAttr;\r\n      if (el && el != this._ownerElement) {\r\n        throw new DOMException(INUSE_ATTRIBUTE_ERR);\r\n      }\r\n      oldAttr = this.getNamedItemNS(attr.namespaceURI, attr.localName);\r\n      _addNamedNode(this._ownerElement, this, attr, oldAttr);\r\n      return oldAttr;\r\n    },\r\n    /* returns Node */\r\n    removeNamedItem: function (key) {\r\n      var attr = this.getNamedItem(key);\r\n      _removeNamedNode(this._ownerElement, this, attr);\r\n      return attr;\r\n    },\r\n    // raises: NOT_FOUND_ERR,NO_MODIFICATION_ALLOWED_ERR\r\n\r\n    //for level2\r\n    removeNamedItemNS: function (namespaceURI, localName) {\r\n      var attr = this.getNamedItemNS(namespaceURI, localName);\r\n      _removeNamedNode(this._ownerElement, this, attr);\r\n      return attr;\r\n    },\r\n    getNamedItemNS: function (namespaceURI, localName) {\r\n      var i = this.length;\r\n      while (i--) {\r\n        var node = this[i];\r\n        if (node.localName == localName && node.namespaceURI == namespaceURI) {\r\n          return node;\r\n        }\r\n      }\r\n      return null;\r\n    }\r\n  };\r\n\r\n  /**\r\n   * The DOMImplementation interface represents an object providing methods\r\n   * which are not dependent on any particular document.\r\n   * Such an object is returned by the `Document.implementation` property.\r\n   *\r\n   * __The individual methods describe the differences compared to the specs.__\r\n   *\r\n   * @constructor\r\n   *\r\n   * @see https://developer.mozilla.org/en-US/docs/Web/API/DOMImplementation MDN\r\n   * @see https://www.w3.org/TR/REC-DOM-Level-1/level-one-core.html#ID-102161490 DOM Level 1 Core (Initial)\r\n   * @see https://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-102161490 DOM Level 2 Core\r\n   * @see https://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-102161490 DOM Level 3 Core\r\n   * @see https://dom.spec.whatwg.org/#domimplementation DOM Living Standard\r\n   */\r\n  function DOMImplementation$1() {}\r\n  DOMImplementation$1.prototype = {\r\n    /**\r\n     * The DOMImplementation.hasFeature() method returns a Boolean flag indicating if a given feature is supported.\r\n     * The different implementations fairly diverged in what kind of features were reported.\r\n     * The latest version of the spec settled to force this method to always return true, where the functionality was accurate and in use.\r\n     *\r\n     * @deprecated It is deprecated and modern browsers return true in all cases.\r\n     *\r\n     * @param {string} feature\r\n     * @param {string} [version]\r\n     * @returns {boolean} always true\r\n     *\r\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/DOMImplementation/hasFeature MDN\r\n     * @see https://www.w3.org/TR/REC-DOM-Level-1/level-one-core.html#ID-5CED94D7 DOM Level 1 Core\r\n     * @see https://dom.spec.whatwg.org/#dom-domimplementation-hasfeature DOM Living Standard\r\n     */\r\n    hasFeature: function (feature, version) {\r\n      return true;\r\n    },\r\n    /**\r\n     * Creates an XML Document object of the specified type with its document element.\r\n     *\r\n     * __It behaves slightly different from the description in the living standard__:\r\n     * - There is no interface/class `XMLDocument`, it returns a `Document` instance.\r\n     * - `contentType`, `encoding`, `mode`, `origin`, `url` fields are currently not declared.\r\n     * - this implementation is not validating names or qualified names\r\n     *   (when parsing XML strings, the SAX parser takes care of that)\r\n     *\r\n     * @param {string|null} namespaceURI\r\n     * @param {string} qualifiedName\r\n     * @param {DocumentType=null} doctype\r\n     * @returns {Document}\r\n     *\r\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/DOMImplementation/createDocument MDN\r\n     * @see https://www.w3.org/TR/DOM-Level-2-Core/core.html#Level-2-Core-DOM-createDocument DOM Level 2 Core (initial)\r\n     * @see https://dom.spec.whatwg.org/#dom-domimplementation-createdocument  DOM Level 2 Core\r\n     *\r\n     * @see https://dom.spec.whatwg.org/#validate-and-extract DOM: Validate and extract\r\n     * @see https://www.w3.org/TR/xml/#NT-NameStartChar XML Spec: Names\r\n     * @see https://www.w3.org/TR/xml-names/#ns-qualnames XML Namespaces: Qualified names\r\n     */\r\n    createDocument: function (namespaceURI, qualifiedName, doctype) {\r\n      var doc = new Document();\r\n      doc.implementation = this;\r\n      doc.childNodes = new NodeList();\r\n      doc.doctype = doctype || null;\r\n      if (doctype) {\r\n        doc.appendChild(doctype);\r\n      }\r\n      if (qualifiedName) {\r\n        var root = doc.createElementNS(namespaceURI, qualifiedName);\r\n        doc.appendChild(root);\r\n      }\r\n      return doc;\r\n    },\r\n    /**\r\n     * Returns a doctype, with the given `qualifiedName`, `publicId`, and `systemId`.\r\n     *\r\n     * __This behavior is slightly different from the in the specs__:\r\n     * - this implementation is not validating names or qualified names\r\n     *   (when parsing XML strings, the SAX parser takes care of that)\r\n     *\r\n     * @param {string} qualifiedName\r\n     * @param {string} [publicId]\r\n     * @param {string} [systemId]\r\n     * @returns {DocumentType} which can either be used with `DOMImplementation.createDocument` upon document creation\r\n     * \t\t\t\t  or can be put into the document via methods like `Node.insertBefore()` or `Node.replaceChild()`\r\n     *\r\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/DOMImplementation/createDocumentType MDN\r\n     * @see https://www.w3.org/TR/DOM-Level-2-Core/core.html#Level-2-Core-DOM-createDocType DOM Level 2 Core\r\n     * @see https://dom.spec.whatwg.org/#dom-domimplementation-createdocumenttype DOM Living Standard\r\n     *\r\n     * @see https://dom.spec.whatwg.org/#validate-and-extract DOM: Validate and extract\r\n     * @see https://www.w3.org/TR/xml/#NT-NameStartChar XML Spec: Names\r\n     * @see https://www.w3.org/TR/xml-names/#ns-qualnames XML Namespaces: Qualified names\r\n     */\r\n    createDocumentType: function (qualifiedName, publicId, systemId) {\r\n      var node = new DocumentType();\r\n      node.name = qualifiedName;\r\n      node.nodeName = qualifiedName;\r\n      node.publicId = publicId || '';\r\n      node.systemId = systemId || '';\r\n      return node;\r\n    }\r\n  };\r\n\r\n  /**\r\n   * @see http://www.w3.org/TR/2000/REC-DOM-Level-2-Core-20001113/core.html#ID-1950641247\r\n   */\r\n\r\n  function Node() {}\r\n  Node.prototype = {\r\n    firstChild: null,\r\n    lastChild: null,\r\n    previousSibling: null,\r\n    nextSibling: null,\r\n    attributes: null,\r\n    parentNode: null,\r\n    childNodes: null,\r\n    ownerDocument: null,\r\n    nodeValue: null,\r\n    namespaceURI: null,\r\n    prefix: null,\r\n    localName: null,\r\n    // Modified in DOM Level 2:\r\n    insertBefore: function (newChild, refChild) {\r\n      //raises\r\n      return _insertBefore(this, newChild, refChild);\r\n    },\r\n    replaceChild: function (newChild, oldChild) {\r\n      //raises\r\n      _insertBefore(this, newChild, oldChild, assertPreReplacementValidityInDocument);\r\n      if (oldChild) {\r\n        this.removeChild(oldChild);\r\n      }\r\n    },\r\n    removeChild: function (oldChild) {\r\n      return _removeChild(this, oldChild);\r\n    },\r\n    appendChild: function (newChild) {\r\n      return this.insertBefore(newChild, null);\r\n    },\r\n    hasChildNodes: function () {\r\n      return this.firstChild != null;\r\n    },\r\n    cloneNode: function (deep) {\r\n      return cloneNode(this.ownerDocument || this, this, deep);\r\n    },\r\n    // Modified in DOM Level 2:\r\n    normalize: function () {\r\n      var child = this.firstChild;\r\n      while (child) {\r\n        var next = child.nextSibling;\r\n        if (next && next.nodeType == TEXT_NODE && child.nodeType == TEXT_NODE) {\r\n          this.removeChild(next);\r\n          child.appendData(next.data);\r\n        } else {\r\n          child.normalize();\r\n          child = next;\r\n        }\r\n      }\r\n    },\r\n    // Introduced in DOM Level 2:\r\n    isSupported: function (feature, version) {\r\n      return this.ownerDocument.implementation.hasFeature(feature, version);\r\n    },\r\n    // Introduced in DOM Level 2:\r\n    hasAttributes: function () {\r\n      return this.attributes.length > 0;\r\n    },\r\n    /**\r\n     * Look up the prefix associated to the given namespace URI, starting from this node.\r\n     * **The default namespace declarations are ignored by this method.**\r\n     * See Namespace Prefix Lookup for details on the algorithm used by this method.\r\n     *\r\n     * _Note: The implementation seems to be incomplete when compared to the algorithm described in the specs._\r\n     *\r\n     * @param {string | null} namespaceURI\r\n     * @returns {string | null}\r\n     * @see https://www.w3.org/TR/DOM-Level-3-Core/core.html#Node3-lookupNamespacePrefix\r\n     * @see https://www.w3.org/TR/DOM-Level-3-Core/namespaces-algorithms.html#lookupNamespacePrefixAlgo\r\n     * @see https://dom.spec.whatwg.org/#dom-node-lookupprefix\r\n     * @see https://github.com/xmldom/xmldom/issues/322\r\n     */\r\n    lookupPrefix: function (namespaceURI) {\r\n      var el = this;\r\n      while (el) {\r\n        var map = el._nsMap;\r\n        //console.dir(map)\r\n        if (map) {\r\n          for (var n in map) {\r\n            if (Object.prototype.hasOwnProperty.call(map, n) && map[n] === namespaceURI) {\r\n              return n;\r\n            }\r\n          }\r\n        }\r\n        el = el.nodeType == ATTRIBUTE_NODE ? el.ownerDocument : el.parentNode;\r\n      }\r\n      return null;\r\n    },\r\n    // Introduced in DOM Level 3:\r\n    lookupNamespaceURI: function (prefix) {\r\n      var el = this;\r\n      while (el) {\r\n        var map = el._nsMap;\r\n        //console.dir(map)\r\n        if (map) {\r\n          if (Object.prototype.hasOwnProperty.call(map, prefix)) {\r\n            return map[prefix];\r\n          }\r\n        }\r\n        el = el.nodeType == ATTRIBUTE_NODE ? el.ownerDocument : el.parentNode;\r\n      }\r\n      return null;\r\n    },\r\n    // Introduced in DOM Level 3:\r\n    isDefaultNamespace: function (namespaceURI) {\r\n      var prefix = this.lookupPrefix(namespaceURI);\r\n      return prefix == null;\r\n    }\r\n  };\r\n  function _xmlEncoder(c) {\r\n    return c == '<' && '&lt;' || c == '>' && '&gt;' || c == '&' && '&amp;' || c == '\"' && '&quot;' || '&#' + c.charCodeAt() + ';';\r\n  }\r\n  copy(NodeType, Node);\r\n  copy(NodeType, Node.prototype);\r\n\r\n  /**\r\n   * @param callback return true for continue,false for break\r\n   * @return boolean true: break visit;\r\n   */\r\n  function _visitNode(node, callback) {\r\n    if (callback(node)) {\r\n      return true;\r\n    }\r\n    if (node = node.firstChild) {\r\n      do {\r\n        if (_visitNode(node, callback)) {\r\n          return true;\r\n        }\r\n      } while (node = node.nextSibling);\r\n    }\r\n  }\r\n  function Document() {\r\n    this.ownerDocument = this;\r\n  }\r\n  function _onAddAttribute(doc, el, newAttr) {\r\n    doc && doc._inc++;\r\n    var ns = newAttr.namespaceURI;\r\n    if (ns === NAMESPACE$2.XMLNS) {\r\n      //update namespace\r\n      el._nsMap[newAttr.prefix ? newAttr.localName : ''] = newAttr.value;\r\n    }\r\n  }\r\n  function _onRemoveAttribute(doc, el, newAttr, remove) {\r\n    doc && doc._inc++;\r\n    var ns = newAttr.namespaceURI;\r\n    if (ns === NAMESPACE$2.XMLNS) {\r\n      //update namespace\r\n      delete el._nsMap[newAttr.prefix ? newAttr.localName : ''];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Updates `el.childNodes`, updating the indexed items and it's `length`.\r\n   * Passing `newChild` means it will be appended.\r\n   * Otherwise it's assumed that an item has been removed,\r\n   * and `el.firstNode` and it's `.nextSibling` are used\r\n   * to walk the current list of child nodes.\r\n   *\r\n   * @param {Document} doc\r\n   * @param {Node} el\r\n   * @param {Node} [newChild]\r\n   * @private\r\n   */\r\n  function _onUpdateChild(doc, el, newChild) {\r\n    if (doc && doc._inc) {\r\n      doc._inc++;\r\n      //update childNodes\r\n      var cs = el.childNodes;\r\n      if (newChild) {\r\n        cs[cs.length++] = newChild;\r\n      } else {\r\n        var child = el.firstChild;\r\n        var i = 0;\r\n        while (child) {\r\n          cs[i++] = child;\r\n          child = child.nextSibling;\r\n        }\r\n        cs.length = i;\r\n        delete cs[cs.length];\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Removes the connections between `parentNode` and `child`\r\n   * and any existing `child.previousSibling` or `child.nextSibling`.\r\n   *\r\n   * @see https://github.com/xmldom/xmldom/issues/135\r\n   * @see https://github.com/xmldom/xmldom/issues/145\r\n   *\r\n   * @param {Node} parentNode\r\n   * @param {Node} child\r\n   * @returns {Node} the child that was removed.\r\n   * @private\r\n   */\r\n  function _removeChild(parentNode, child) {\r\n    var previous = child.previousSibling;\r\n    var next = child.nextSibling;\r\n    if (previous) {\r\n      previous.nextSibling = next;\r\n    } else {\r\n      parentNode.firstChild = next;\r\n    }\r\n    if (next) {\r\n      next.previousSibling = previous;\r\n    } else {\r\n      parentNode.lastChild = previous;\r\n    }\r\n    child.parentNode = null;\r\n    child.previousSibling = null;\r\n    child.nextSibling = null;\r\n    _onUpdateChild(parentNode.ownerDocument, parentNode);\r\n    return child;\r\n  }\r\n\r\n  /**\r\n   * Returns `true` if `node` can be a parent for insertion.\r\n   * @param {Node} node\r\n   * @returns {boolean}\r\n   */\r\n  function hasValidParentNodeType(node) {\r\n    return node && (node.nodeType === Node.DOCUMENT_NODE || node.nodeType === Node.DOCUMENT_FRAGMENT_NODE || node.nodeType === Node.ELEMENT_NODE);\r\n  }\r\n\r\n  /**\r\n   * Returns `true` if `node` can be inserted according to it's `nodeType`.\r\n   * @param {Node} node\r\n   * @returns {boolean}\r\n   */\r\n  function hasInsertableNodeType(node) {\r\n    return node && (isElementNode(node) || isTextNode(node) || isDocTypeNode(node) || node.nodeType === Node.DOCUMENT_FRAGMENT_NODE || node.nodeType === Node.COMMENT_NODE || node.nodeType === Node.PROCESSING_INSTRUCTION_NODE);\r\n  }\r\n\r\n  /**\r\n   * Returns true if `node` is a DOCTYPE node\r\n   * @param {Node} node\r\n   * @returns {boolean}\r\n   */\r\n  function isDocTypeNode(node) {\r\n    return node && node.nodeType === Node.DOCUMENT_TYPE_NODE;\r\n  }\r\n\r\n  /**\r\n   * Returns true if the node is an element\r\n   * @param {Node} node\r\n   * @returns {boolean}\r\n   */\r\n  function isElementNode(node) {\r\n    return node && node.nodeType === Node.ELEMENT_NODE;\r\n  }\r\n  /**\r\n   * Returns true if `node` is a text node\r\n   * @param {Node} node\r\n   * @returns {boolean}\r\n   */\r\n  function isTextNode(node) {\r\n    return node && node.nodeType === Node.TEXT_NODE;\r\n  }\r\n\r\n  /**\r\n   * Check if en element node can be inserted before `child`, or at the end if child is falsy,\r\n   * according to the presence and position of a doctype node on the same level.\r\n   *\r\n   * @param {Document} doc The document node\r\n   * @param {Node} child the node that would become the nextSibling if the element would be inserted\r\n   * @returns {boolean} `true` if an element can be inserted before child\r\n   * @private\r\n   * https://dom.spec.whatwg.org/#concept-node-ensure-pre-insertion-validity\r\n   */\r\n  function isElementInsertionPossible(doc, child) {\r\n    var parentChildNodes = doc.childNodes || [];\r\n    if (find(parentChildNodes, isElementNode) || isDocTypeNode(child)) {\r\n      return false;\r\n    }\r\n    var docTypeNode = find(parentChildNodes, isDocTypeNode);\r\n    return !(child && docTypeNode && parentChildNodes.indexOf(docTypeNode) > parentChildNodes.indexOf(child));\r\n  }\r\n\r\n  /**\r\n   * Check if en element node can be inserted before `child`, or at the end if child is falsy,\r\n   * according to the presence and position of a doctype node on the same level.\r\n   *\r\n   * @param {Node} doc The document node\r\n   * @param {Node} child the node that would become the nextSibling if the element would be inserted\r\n   * @returns {boolean} `true` if an element can be inserted before child\r\n   * @private\r\n   * https://dom.spec.whatwg.org/#concept-node-ensure-pre-insertion-validity\r\n   */\r\n  function isElementReplacementPossible(doc, child) {\r\n    var parentChildNodes = doc.childNodes || [];\r\n    function hasElementChildThatIsNotChild(node) {\r\n      return isElementNode(node) && node !== child;\r\n    }\r\n    if (find(parentChildNodes, hasElementChildThatIsNotChild)) {\r\n      return false;\r\n    }\r\n    var docTypeNode = find(parentChildNodes, isDocTypeNode);\r\n    return !(child && docTypeNode && parentChildNodes.indexOf(docTypeNode) > parentChildNodes.indexOf(child));\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * Steps 1-5 of the checks before inserting and before replacing a child are the same.\r\n   *\r\n   * @param {Node} parent the parent node to insert `node` into\r\n   * @param {Node} node the node to insert\r\n   * @param {Node=} child the node that should become the `nextSibling` of `node`\r\n   * @returns {Node}\r\n   * @throws DOMException for several node combinations that would create a DOM that is not well-formed.\r\n   * @throws DOMException if `child` is provided but is not a child of `parent`.\r\n   * @see https://dom.spec.whatwg.org/#concept-node-ensure-pre-insertion-validity\r\n   * @see https://dom.spec.whatwg.org/#concept-node-replace\r\n   */\r\n  function assertPreInsertionValidity1to5(parent, node, child) {\r\n    // 1. If `parent` is not a Document, DocumentFragment, or Element node, then throw a \"HierarchyRequestError\" DOMException.\r\n    if (!hasValidParentNodeType(parent)) {\r\n      throw new DOMException(HIERARCHY_REQUEST_ERR, 'Unexpected parent node type ' + parent.nodeType);\r\n    }\r\n    // 2. If `node` is a host-including inclusive ancestor of `parent`, then throw a \"HierarchyRequestError\" DOMException.\r\n    // not implemented!\r\n    // 3. If `child` is non-null and its parent is not `parent`, then throw a \"NotFoundError\" DOMException.\r\n    if (child && child.parentNode !== parent) {\r\n      throw new DOMException(NOT_FOUND_ERR, 'child not in parent');\r\n    }\r\n    if (\r\n    // 4. If `node` is not a DocumentFragment, DocumentType, Element, or CharacterData node, then throw a \"HierarchyRequestError\" DOMException.\r\n    !hasInsertableNodeType(node) ||\r\n    // 5. If either `node` is a Text node and `parent` is a document,\r\n    // the sax parser currently adds top level text nodes, this will be fixed in 0.9.0\r\n    // || (node.nodeType === Node.TEXT_NODE && parent.nodeType === Node.DOCUMENT_NODE)\r\n    // or `node` is a doctype and `parent` is not a document, then throw a \"HierarchyRequestError\" DOMException.\r\n    isDocTypeNode(node) && parent.nodeType !== Node.DOCUMENT_NODE) {\r\n      throw new DOMException(HIERARCHY_REQUEST_ERR, 'Unexpected node type ' + node.nodeType + ' for parent node type ' + parent.nodeType);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * Step 6 of the checks before inserting and before replacing a child are different.\r\n   *\r\n   * @param {Document} parent the parent node to insert `node` into\r\n   * @param {Node} node the node to insert\r\n   * @param {Node | undefined} child the node that should become the `nextSibling` of `node`\r\n   * @returns {Node}\r\n   * @throws DOMException for several node combinations that would create a DOM that is not well-formed.\r\n   * @throws DOMException if `child` is provided but is not a child of `parent`.\r\n   * @see https://dom.spec.whatwg.org/#concept-node-ensure-pre-insertion-validity\r\n   * @see https://dom.spec.whatwg.org/#concept-node-replace\r\n   */\r\n  function assertPreInsertionValidityInDocument(parent, node, child) {\r\n    var parentChildNodes = parent.childNodes || [];\r\n    var nodeChildNodes = node.childNodes || [];\r\n\r\n    // DocumentFragment\r\n    if (node.nodeType === Node.DOCUMENT_FRAGMENT_NODE) {\r\n      var nodeChildElements = nodeChildNodes.filter(isElementNode);\r\n      // If node has more than one element child or has a Text node child.\r\n      if (nodeChildElements.length > 1 || find(nodeChildNodes, isTextNode)) {\r\n        throw new DOMException(HIERARCHY_REQUEST_ERR, 'More than one element or text in fragment');\r\n      }\r\n      // Otherwise, if `node` has one element child and either `parent` has an element child,\r\n      // `child` is a doctype, or `child` is non-null and a doctype is following `child`.\r\n      if (nodeChildElements.length === 1 && !isElementInsertionPossible(parent, child)) {\r\n        throw new DOMException(HIERARCHY_REQUEST_ERR, 'Element in fragment can not be inserted before doctype');\r\n      }\r\n    }\r\n    // Element\r\n    if (isElementNode(node)) {\r\n      // `parent` has an element child, `child` is a doctype,\r\n      // or `child` is non-null and a doctype is following `child`.\r\n      if (!isElementInsertionPossible(parent, child)) {\r\n        throw new DOMException(HIERARCHY_REQUEST_ERR, 'Only one element can be added and only after doctype');\r\n      }\r\n    }\r\n    // DocumentType\r\n    if (isDocTypeNode(node)) {\r\n      // `parent` has a doctype child,\r\n      if (find(parentChildNodes, isDocTypeNode)) {\r\n        throw new DOMException(HIERARCHY_REQUEST_ERR, 'Only one doctype is allowed');\r\n      }\r\n      var parentElementChild = find(parentChildNodes, isElementNode);\r\n      // `child` is non-null and an element is preceding `child`,\r\n      if (child && parentChildNodes.indexOf(parentElementChild) < parentChildNodes.indexOf(child)) {\r\n        throw new DOMException(HIERARCHY_REQUEST_ERR, 'Doctype can only be inserted before an element');\r\n      }\r\n      // or `child` is null and `parent` has an element child.\r\n      if (!child && parentElementChild) {\r\n        throw new DOMException(HIERARCHY_REQUEST_ERR, 'Doctype can not be appended since element is present');\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * Step 6 of the checks before inserting and before replacing a child are different.\r\n   *\r\n   * @param {Document} parent the parent node to insert `node` into\r\n   * @param {Node} node the node to insert\r\n   * @param {Node | undefined} child the node that should become the `nextSibling` of `node`\r\n   * @returns {Node}\r\n   * @throws DOMException for several node combinations that would create a DOM that is not well-formed.\r\n   * @throws DOMException if `child` is provided but is not a child of `parent`.\r\n   * @see https://dom.spec.whatwg.org/#concept-node-ensure-pre-insertion-validity\r\n   * @see https://dom.spec.whatwg.org/#concept-node-replace\r\n   */\r\n  function assertPreReplacementValidityInDocument(parent, node, child) {\r\n    var parentChildNodes = parent.childNodes || [];\r\n    var nodeChildNodes = node.childNodes || [];\r\n\r\n    // DocumentFragment\r\n    if (node.nodeType === Node.DOCUMENT_FRAGMENT_NODE) {\r\n      var nodeChildElements = nodeChildNodes.filter(isElementNode);\r\n      // If `node` has more than one element child or has a Text node child.\r\n      if (nodeChildElements.length > 1 || find(nodeChildNodes, isTextNode)) {\r\n        throw new DOMException(HIERARCHY_REQUEST_ERR, 'More than one element or text in fragment');\r\n      }\r\n      // Otherwise, if `node` has one element child and either `parent` has an element child that is not `child` or a doctype is following `child`.\r\n      if (nodeChildElements.length === 1 && !isElementReplacementPossible(parent, child)) {\r\n        throw new DOMException(HIERARCHY_REQUEST_ERR, 'Element in fragment can not be inserted before doctype');\r\n      }\r\n    }\r\n    // Element\r\n    if (isElementNode(node)) {\r\n      // `parent` has an element child that is not `child` or a doctype is following `child`.\r\n      if (!isElementReplacementPossible(parent, child)) {\r\n        throw new DOMException(HIERARCHY_REQUEST_ERR, 'Only one element can be added and only after doctype');\r\n      }\r\n    }\r\n    // DocumentType\r\n    if (isDocTypeNode(node)) {\r\n      function hasDoctypeChildThatIsNotChild(node) {\r\n        return isDocTypeNode(node) && node !== child;\r\n      }\r\n\r\n      // `parent` has a doctype child that is not `child`,\r\n      if (find(parentChildNodes, hasDoctypeChildThatIsNotChild)) {\r\n        throw new DOMException(HIERARCHY_REQUEST_ERR, 'Only one doctype is allowed');\r\n      }\r\n      var parentElementChild = find(parentChildNodes, isElementNode);\r\n      // or an element is preceding `child`.\r\n      if (child && parentChildNodes.indexOf(parentElementChild) < parentChildNodes.indexOf(child)) {\r\n        throw new DOMException(HIERARCHY_REQUEST_ERR, 'Doctype can only be inserted before an element');\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {Node} parent the parent node to insert `node` into\r\n   * @param {Node} node the node to insert\r\n   * @param {Node=} child the node that should become the `nextSibling` of `node`\r\n   * @returns {Node}\r\n   * @throws DOMException for several node combinations that would create a DOM that is not well-formed.\r\n   * @throws DOMException if `child` is provided but is not a child of `parent`.\r\n   * @see https://dom.spec.whatwg.org/#concept-node-ensure-pre-insertion-validity\r\n   */\r\n  function _insertBefore(parent, node, child, _inDocumentAssertion) {\r\n    // To ensure pre-insertion validity of a node into a parent before a child, run these steps:\r\n    assertPreInsertionValidity1to5(parent, node, child);\r\n\r\n    // If parent is a document, and any of the statements below, switched on the interface node implements,\r\n    // are true, then throw a \"HierarchyRequestError\" DOMException.\r\n    if (parent.nodeType === Node.DOCUMENT_NODE) {\r\n      (_inDocumentAssertion || assertPreInsertionValidityInDocument)(parent, node, child);\r\n    }\r\n    var cp = node.parentNode;\r\n    if (cp) {\r\n      cp.removeChild(node); //remove and update\r\n    }\r\n    if (node.nodeType === DOCUMENT_FRAGMENT_NODE) {\r\n      var newFirst = node.firstChild;\r\n      if (newFirst == null) {\r\n        return node;\r\n      }\r\n      var newLast = node.lastChild;\r\n    } else {\r\n      newFirst = newLast = node;\r\n    }\r\n    var pre = child ? child.previousSibling : parent.lastChild;\r\n    newFirst.previousSibling = pre;\r\n    newLast.nextSibling = child;\r\n    if (pre) {\r\n      pre.nextSibling = newFirst;\r\n    } else {\r\n      parent.firstChild = newFirst;\r\n    }\r\n    if (child == null) {\r\n      parent.lastChild = newLast;\r\n    } else {\r\n      child.previousSibling = newLast;\r\n    }\r\n    do {\r\n      newFirst.parentNode = parent;\r\n    } while (newFirst !== newLast && (newFirst = newFirst.nextSibling));\r\n    _onUpdateChild(parent.ownerDocument || parent, parent);\r\n    //console.log(parent.lastChild.nextSibling == null)\r\n    if (node.nodeType == DOCUMENT_FRAGMENT_NODE) {\r\n      node.firstChild = node.lastChild = null;\r\n    }\r\n    return node;\r\n  }\r\n\r\n  /**\r\n   * Appends `newChild` to `parentNode`.\r\n   * If `newChild` is already connected to a `parentNode` it is first removed from it.\r\n   *\r\n   * @see https://github.com/xmldom/xmldom/issues/135\r\n   * @see https://github.com/xmldom/xmldom/issues/145\r\n   * @param {Node} parentNode\r\n   * @param {Node} newChild\r\n   * @returns {Node}\r\n   * @private\r\n   */\r\n  function _appendSingleChild(parentNode, newChild) {\r\n    if (newChild.parentNode) {\r\n      newChild.parentNode.removeChild(newChild);\r\n    }\r\n    newChild.parentNode = parentNode;\r\n    newChild.previousSibling = parentNode.lastChild;\r\n    newChild.nextSibling = null;\r\n    if (newChild.previousSibling) {\r\n      newChild.previousSibling.nextSibling = newChild;\r\n    } else {\r\n      parentNode.firstChild = newChild;\r\n    }\r\n    parentNode.lastChild = newChild;\r\n    _onUpdateChild(parentNode.ownerDocument, parentNode, newChild);\r\n    return newChild;\r\n  }\r\n  Document.prototype = {\r\n    //implementation : null,\r\n    nodeName: '#document',\r\n    nodeType: DOCUMENT_NODE,\r\n    /**\r\n     * The DocumentType node of the document.\r\n     *\r\n     * @readonly\r\n     * @type DocumentType\r\n     */\r\n    doctype: null,\r\n    documentElement: null,\r\n    _inc: 1,\r\n    insertBefore: function (newChild, refChild) {\r\n      //raises\r\n      if (newChild.nodeType == DOCUMENT_FRAGMENT_NODE) {\r\n        var child = newChild.firstChild;\r\n        while (child) {\r\n          var next = child.nextSibling;\r\n          this.insertBefore(child, refChild);\r\n          child = next;\r\n        }\r\n        return newChild;\r\n      }\r\n      _insertBefore(this, newChild, refChild);\r\n      newChild.ownerDocument = this;\r\n      if (this.documentElement === null && newChild.nodeType === ELEMENT_NODE) {\r\n        this.documentElement = newChild;\r\n      }\r\n      return newChild;\r\n    },\r\n    removeChild: function (oldChild) {\r\n      if (this.documentElement == oldChild) {\r\n        this.documentElement = null;\r\n      }\r\n      return _removeChild(this, oldChild);\r\n    },\r\n    replaceChild: function (newChild, oldChild) {\r\n      //raises\r\n      _insertBefore(this, newChild, oldChild, assertPreReplacementValidityInDocument);\r\n      newChild.ownerDocument = this;\r\n      if (oldChild) {\r\n        this.removeChild(oldChild);\r\n      }\r\n      if (isElementNode(newChild)) {\r\n        this.documentElement = newChild;\r\n      }\r\n    },\r\n    // Introduced in DOM Level 2:\r\n    importNode: function (importedNode, deep) {\r\n      return importNode(this, importedNode, deep);\r\n    },\r\n    // Introduced in DOM Level 2:\r\n    getElementById: function (id) {\r\n      var rtv = null;\r\n      _visitNode(this.documentElement, function (node) {\r\n        if (node.nodeType == ELEMENT_NODE) {\r\n          if (node.getAttribute('id') == id) {\r\n            rtv = node;\r\n            return true;\r\n          }\r\n        }\r\n      });\r\n      return rtv;\r\n    },\r\n    /**\r\n     * The `getElementsByClassName` method of `Document` interface returns an array-like object\r\n     * of all child elements which have **all** of the given class name(s).\r\n     *\r\n     * Returns an empty list if `classeNames` is an empty string or only contains HTML white space characters.\r\n     *\r\n     *\r\n     * Warning: This is a live LiveNodeList.\r\n     * Changes in the DOM will reflect in the array as the changes occur.\r\n     * If an element selected by this array no longer qualifies for the selector,\r\n     * it will automatically be removed. Be aware of this for iteration purposes.\r\n     *\r\n     * @param {string} classNames is a string representing the class name(s) to match; multiple class names are separated by (ASCII-)whitespace\r\n     *\r\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/Document/getElementsByClassName\r\n     * @see https://dom.spec.whatwg.org/#concept-getelementsbyclassname\r\n     */\r\n    getElementsByClassName: function (classNames) {\r\n      var classNamesSet = toOrderedSet(classNames);\r\n      return new LiveNodeList(this, function (base) {\r\n        var ls = [];\r\n        if (classNamesSet.length > 0) {\r\n          _visitNode(base.documentElement, function (node) {\r\n            if (node !== base && node.nodeType === ELEMENT_NODE) {\r\n              var nodeClassNames = node.getAttribute('class');\r\n              // can be null if the attribute does not exist\r\n              if (nodeClassNames) {\r\n                // before splitting and iterating just compare them for the most common case\r\n                var matches = classNames === nodeClassNames;\r\n                if (!matches) {\r\n                  var nodeClassNamesSet = toOrderedSet(nodeClassNames);\r\n                  matches = classNamesSet.every(arrayIncludes(nodeClassNamesSet));\r\n                }\r\n                if (matches) {\r\n                  ls.push(node);\r\n                }\r\n              }\r\n            }\r\n          });\r\n        }\r\n        return ls;\r\n      });\r\n    },\r\n    //document factory method:\r\n    createElement: function (tagName) {\r\n      var node = new Element();\r\n      node.ownerDocument = this;\r\n      node.nodeName = tagName;\r\n      node.tagName = tagName;\r\n      node.localName = tagName;\r\n      node.childNodes = new NodeList();\r\n      var attrs = node.attributes = new NamedNodeMap();\r\n      attrs._ownerElement = node;\r\n      return node;\r\n    },\r\n    createDocumentFragment: function () {\r\n      var node = new DocumentFragment();\r\n      node.ownerDocument = this;\r\n      node.childNodes = new NodeList();\r\n      return node;\r\n    },\r\n    createTextNode: function (data) {\r\n      var node = new Text();\r\n      node.ownerDocument = this;\r\n      node.appendData(data);\r\n      return node;\r\n    },\r\n    createComment: function (data) {\r\n      var node = new Comment();\r\n      node.ownerDocument = this;\r\n      node.appendData(data);\r\n      return node;\r\n    },\r\n    createCDATASection: function (data) {\r\n      var node = new CDATASection();\r\n      node.ownerDocument = this;\r\n      node.appendData(data);\r\n      return node;\r\n    },\r\n    createProcessingInstruction: function (target, data) {\r\n      var node = new ProcessingInstruction();\r\n      node.ownerDocument = this;\r\n      node.tagName = node.nodeName = node.target = target;\r\n      node.nodeValue = node.data = data;\r\n      return node;\r\n    },\r\n    createAttribute: function (name) {\r\n      var node = new Attr();\r\n      node.ownerDocument = this;\r\n      node.name = name;\r\n      node.nodeName = name;\r\n      node.localName = name;\r\n      node.specified = true;\r\n      return node;\r\n    },\r\n    createEntityReference: function (name) {\r\n      var node = new EntityReference();\r\n      node.ownerDocument = this;\r\n      node.nodeName = name;\r\n      return node;\r\n    },\r\n    // Introduced in DOM Level 2:\r\n    createElementNS: function (namespaceURI, qualifiedName) {\r\n      var node = new Element();\r\n      var pl = qualifiedName.split(':');\r\n      var attrs = node.attributes = new NamedNodeMap();\r\n      node.childNodes = new NodeList();\r\n      node.ownerDocument = this;\r\n      node.nodeName = qualifiedName;\r\n      node.tagName = qualifiedName;\r\n      node.namespaceURI = namespaceURI;\r\n      if (pl.length == 2) {\r\n        node.prefix = pl[0];\r\n        node.localName = pl[1];\r\n      } else {\r\n        //el.prefix = null;\r\n        node.localName = qualifiedName;\r\n      }\r\n      attrs._ownerElement = node;\r\n      return node;\r\n    },\r\n    // Introduced in DOM Level 2:\r\n    createAttributeNS: function (namespaceURI, qualifiedName) {\r\n      var node = new Attr();\r\n      var pl = qualifiedName.split(':');\r\n      node.ownerDocument = this;\r\n      node.nodeName = qualifiedName;\r\n      node.name = qualifiedName;\r\n      node.namespaceURI = namespaceURI;\r\n      node.specified = true;\r\n      if (pl.length == 2) {\r\n        node.prefix = pl[0];\r\n        node.localName = pl[1];\r\n      } else {\r\n        //el.prefix = null;\r\n        node.localName = qualifiedName;\r\n      }\r\n      return node;\r\n    }\r\n  };\r\n  _extends(Document, Node);\r\n  function Element() {\r\n    this._nsMap = {};\r\n  }\r\n  Element.prototype = {\r\n    nodeType: ELEMENT_NODE,\r\n    hasAttribute: function (name) {\r\n      return this.getAttributeNode(name) != null;\r\n    },\r\n    getAttribute: function (name) {\r\n      var attr = this.getAttributeNode(name);\r\n      return attr && attr.value || '';\r\n    },\r\n    getAttributeNode: function (name) {\r\n      return this.attributes.getNamedItem(name);\r\n    },\r\n    setAttribute: function (name, value) {\r\n      var attr = this.ownerDocument.createAttribute(name);\r\n      attr.value = attr.nodeValue = \"\" + value;\r\n      this.setAttributeNode(attr);\r\n    },\r\n    removeAttribute: function (name) {\r\n      var attr = this.getAttributeNode(name);\r\n      attr && this.removeAttributeNode(attr);\r\n    },\r\n    //four real opeartion method\r\n    appendChild: function (newChild) {\r\n      if (newChild.nodeType === DOCUMENT_FRAGMENT_NODE) {\r\n        return this.insertBefore(newChild, null);\r\n      } else {\r\n        return _appendSingleChild(this, newChild);\r\n      }\r\n    },\r\n    setAttributeNode: function (newAttr) {\r\n      return this.attributes.setNamedItem(newAttr);\r\n    },\r\n    setAttributeNodeNS: function (newAttr) {\r\n      return this.attributes.setNamedItemNS(newAttr);\r\n    },\r\n    removeAttributeNode: function (oldAttr) {\r\n      //console.log(this == oldAttr.ownerElement)\r\n      return this.attributes.removeNamedItem(oldAttr.nodeName);\r\n    },\r\n    //get real attribute name,and remove it by removeAttributeNode\r\n    removeAttributeNS: function (namespaceURI, localName) {\r\n      var old = this.getAttributeNodeNS(namespaceURI, localName);\r\n      old && this.removeAttributeNode(old);\r\n    },\r\n    hasAttributeNS: function (namespaceURI, localName) {\r\n      return this.getAttributeNodeNS(namespaceURI, localName) != null;\r\n    },\r\n    getAttributeNS: function (namespaceURI, localName) {\r\n      var attr = this.getAttributeNodeNS(namespaceURI, localName);\r\n      return attr && attr.value || '';\r\n    },\r\n    setAttributeNS: function (namespaceURI, qualifiedName, value) {\r\n      var attr = this.ownerDocument.createAttributeNS(namespaceURI, qualifiedName);\r\n      attr.value = attr.nodeValue = \"\" + value;\r\n      this.setAttributeNode(attr);\r\n    },\r\n    getAttributeNodeNS: function (namespaceURI, localName) {\r\n      return this.attributes.getNamedItemNS(namespaceURI, localName);\r\n    },\r\n    getElementsByTagName: function (tagName) {\r\n      return new LiveNodeList(this, function (base) {\r\n        var ls = [];\r\n        _visitNode(base, function (node) {\r\n          if (node !== base && node.nodeType == ELEMENT_NODE && (tagName === '*' || node.tagName == tagName)) {\r\n            ls.push(node);\r\n          }\r\n        });\r\n        return ls;\r\n      });\r\n    },\r\n    getElementsByTagNameNS: function (namespaceURI, localName) {\r\n      return new LiveNodeList(this, function (base) {\r\n        var ls = [];\r\n        _visitNode(base, function (node) {\r\n          if (node !== base && node.nodeType === ELEMENT_NODE && (namespaceURI === '*' || node.namespaceURI === namespaceURI) && (localName === '*' || node.localName == localName)) {\r\n            ls.push(node);\r\n          }\r\n        });\r\n        return ls;\r\n      });\r\n    }\r\n  };\r\n  Document.prototype.getElementsByTagName = Element.prototype.getElementsByTagName;\r\n  Document.prototype.getElementsByTagNameNS = Element.prototype.getElementsByTagNameNS;\r\n  _extends(Element, Node);\r\n  function Attr() {}\r\n  Attr.prototype.nodeType = ATTRIBUTE_NODE;\r\n  _extends(Attr, Node);\r\n  function CharacterData() {}\r\n  CharacterData.prototype = {\r\n    data: '',\r\n    substringData: function (offset, count) {\r\n      return this.data.substring(offset, offset + count);\r\n    },\r\n    appendData: function (text) {\r\n      text = this.data + text;\r\n      this.nodeValue = this.data = text;\r\n      this.length = text.length;\r\n    },\r\n    insertData: function (offset, text) {\r\n      this.replaceData(offset, 0, text);\r\n    },\r\n    appendChild: function (newChild) {\r\n      throw new Error(ExceptionMessage[HIERARCHY_REQUEST_ERR]);\r\n    },\r\n    deleteData: function (offset, count) {\r\n      this.replaceData(offset, count, \"\");\r\n    },\r\n    replaceData: function (offset, count, text) {\r\n      var start = this.data.substring(0, offset);\r\n      var end = this.data.substring(offset + count);\r\n      text = start + text + end;\r\n      this.nodeValue = this.data = text;\r\n      this.length = text.length;\r\n    }\r\n  };\r\n  _extends(CharacterData, Node);\r\n  function Text() {}\r\n  Text.prototype = {\r\n    nodeName: \"#text\",\r\n    nodeType: TEXT_NODE,\r\n    splitText: function (offset) {\r\n      var text = this.data;\r\n      var newText = text.substring(offset);\r\n      text = text.substring(0, offset);\r\n      this.data = this.nodeValue = text;\r\n      this.length = text.length;\r\n      var newNode = this.ownerDocument.createTextNode(newText);\r\n      if (this.parentNode) {\r\n        this.parentNode.insertBefore(newNode, this.nextSibling);\r\n      }\r\n      return newNode;\r\n    }\r\n  };\r\n  _extends(Text, CharacterData);\r\n  function Comment() {}\r\n  Comment.prototype = {\r\n    nodeName: \"#comment\",\r\n    nodeType: COMMENT_NODE\r\n  };\r\n  _extends(Comment, CharacterData);\r\n  function CDATASection() {}\r\n  CDATASection.prototype = {\r\n    nodeName: \"#cdata-section\",\r\n    nodeType: CDATA_SECTION_NODE\r\n  };\r\n  _extends(CDATASection, CharacterData);\r\n  function DocumentType() {}\r\n  DocumentType.prototype.nodeType = DOCUMENT_TYPE_NODE;\r\n  _extends(DocumentType, Node);\r\n  function Notation() {}\r\n  Notation.prototype.nodeType = NOTATION_NODE;\r\n  _extends(Notation, Node);\r\n  function Entity() {}\r\n  Entity.prototype.nodeType = ENTITY_NODE;\r\n  _extends(Entity, Node);\r\n  function EntityReference() {}\r\n  EntityReference.prototype.nodeType = ENTITY_REFERENCE_NODE;\r\n  _extends(EntityReference, Node);\r\n  function DocumentFragment() {}\r\n  DocumentFragment.prototype.nodeName = \"#document-fragment\";\r\n  DocumentFragment.prototype.nodeType = DOCUMENT_FRAGMENT_NODE;\r\n  _extends(DocumentFragment, Node);\r\n  function ProcessingInstruction() {}\r\n  ProcessingInstruction.prototype.nodeType = PROCESSING_INSTRUCTION_NODE;\r\n  _extends(ProcessingInstruction, Node);\r\n  function XMLSerializer() {}\r\n  XMLSerializer.prototype.serializeToString = function (node, isHtml, nodeFilter) {\r\n    return nodeSerializeToString.call(node, isHtml, nodeFilter);\r\n  };\r\n  Node.prototype.toString = nodeSerializeToString;\r\n  function nodeSerializeToString(isHtml, nodeFilter) {\r\n    var buf = [];\r\n    var refNode = this.nodeType == 9 && this.documentElement || this;\r\n    var prefix = refNode.prefix;\r\n    var uri = refNode.namespaceURI;\r\n    if (uri && prefix == null) {\r\n      //console.log(prefix)\r\n      var prefix = refNode.lookupPrefix(uri);\r\n      if (prefix == null) {\r\n        //isHTML = true;\r\n        var visibleNamespaces = [{\r\n          namespace: uri,\r\n          prefix: null\r\n        }\r\n        //{namespace:uri,prefix:''}\r\n        ];\r\n      }\r\n    }\r\n    serializeToString(this, buf, isHtml, nodeFilter, visibleNamespaces);\r\n    //console.log('###',this.nodeType,uri,prefix,buf.join(''))\r\n    return buf.join('');\r\n  }\r\n  function needNamespaceDefine(node, isHTML, visibleNamespaces) {\r\n    var prefix = node.prefix || '';\r\n    var uri = node.namespaceURI;\r\n    // According to [Namespaces in XML 1.0](https://www.w3.org/TR/REC-xml-names/#ns-using) ,\r\n    // and more specifically https://www.w3.org/TR/REC-xml-names/#nsc-NoPrefixUndecl :\r\n    // > In a namespace declaration for a prefix [...], the attribute value MUST NOT be empty.\r\n    // in a similar manner [Namespaces in XML 1.1](https://www.w3.org/TR/xml-names11/#ns-using)\r\n    // and more specifically https://www.w3.org/TR/xml-names11/#nsc-NSDeclared :\r\n    // > [...] Furthermore, the attribute value [...] must not be an empty string.\r\n    // so serializing empty namespace value like xmlns:ds=\"\" would produce an invalid XML document.\r\n    if (!uri) {\r\n      return false;\r\n    }\r\n    if (prefix === \"xml\" && uri === NAMESPACE$2.XML || uri === NAMESPACE$2.XMLNS) {\r\n      return false;\r\n    }\r\n    var i = visibleNamespaces.length;\r\n    while (i--) {\r\n      var ns = visibleNamespaces[i];\r\n      // get namespace prefix\r\n      if (ns.prefix === prefix) {\r\n        return ns.namespace !== uri;\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n  /**\r\n   * Well-formed constraint: No < in Attribute Values\r\n   * > The replacement text of any entity referred to directly or indirectly\r\n   * > in an attribute value must not contain a <.\r\n   * @see https://www.w3.org/TR/xml11/#CleanAttrVals\r\n   * @see https://www.w3.org/TR/xml11/#NT-AttValue\r\n   *\r\n   * Literal whitespace other than space that appear in attribute values\r\n   * are serialized as their entity references, so they will be preserved.\r\n   * (In contrast to whitespace literals in the input which are normalized to spaces)\r\n   * @see https://www.w3.org/TR/xml11/#AVNormalize\r\n   * @see https://w3c.github.io/DOM-Parsing/#serializing-an-element-s-attributes\r\n   */\r\n  function addSerializedAttribute(buf, qualifiedName, value) {\r\n    buf.push(' ', qualifiedName, '=\"', value.replace(/[<>&\"\\t\\n\\r]/g, _xmlEncoder), '\"');\r\n  }\r\n  function serializeToString(node, buf, isHTML, nodeFilter, visibleNamespaces) {\r\n    if (!visibleNamespaces) {\r\n      visibleNamespaces = [];\r\n    }\r\n    if (nodeFilter) {\r\n      node = nodeFilter(node);\r\n      if (node) {\r\n        if (typeof node == 'string') {\r\n          buf.push(node);\r\n          return;\r\n        }\r\n      } else {\r\n        return;\r\n      }\r\n      //buf.sort.apply(attrs, attributeSorter);\r\n    }\r\n    switch (node.nodeType) {\r\n      case ELEMENT_NODE:\r\n        var attrs = node.attributes;\r\n        var len = attrs.length;\r\n        var child = node.firstChild;\r\n        var nodeName = node.tagName;\r\n        isHTML = NAMESPACE$2.isHTML(node.namespaceURI) || isHTML;\r\n        var prefixedNodeName = nodeName;\r\n        if (!isHTML && !node.prefix && node.namespaceURI) {\r\n          var defaultNS;\r\n          // lookup current default ns from `xmlns` attribute\r\n          for (var ai = 0; ai < attrs.length; ai++) {\r\n            if (attrs.item(ai).name === 'xmlns') {\r\n              defaultNS = attrs.item(ai).value;\r\n              break;\r\n            }\r\n          }\r\n          if (!defaultNS) {\r\n            // lookup current default ns in visibleNamespaces\r\n            for (var nsi = visibleNamespaces.length - 1; nsi >= 0; nsi--) {\r\n              var namespace = visibleNamespaces[nsi];\r\n              if (namespace.prefix === '' && namespace.namespace === node.namespaceURI) {\r\n                defaultNS = namespace.namespace;\r\n                break;\r\n              }\r\n            }\r\n          }\r\n          if (defaultNS !== node.namespaceURI) {\r\n            for (var nsi = visibleNamespaces.length - 1; nsi >= 0; nsi--) {\r\n              var namespace = visibleNamespaces[nsi];\r\n              if (namespace.namespace === node.namespaceURI) {\r\n                if (namespace.prefix) {\r\n                  prefixedNodeName = namespace.prefix + ':' + nodeName;\r\n                }\r\n                break;\r\n              }\r\n            }\r\n          }\r\n        }\r\n        buf.push('<', prefixedNodeName);\r\n        for (var i = 0; i < len; i++) {\r\n          // add namespaces for attributes\r\n          var attr = attrs.item(i);\r\n          if (attr.prefix == 'xmlns') {\r\n            visibleNamespaces.push({\r\n              prefix: attr.localName,\r\n              namespace: attr.value\r\n            });\r\n          } else if (attr.nodeName == 'xmlns') {\r\n            visibleNamespaces.push({\r\n              prefix: '',\r\n              namespace: attr.value\r\n            });\r\n          }\r\n        }\r\n        for (var i = 0; i < len; i++) {\r\n          var attr = attrs.item(i);\r\n          if (needNamespaceDefine(attr, isHTML, visibleNamespaces)) {\r\n            var prefix = attr.prefix || '';\r\n            var uri = attr.namespaceURI;\r\n            addSerializedAttribute(buf, prefix ? 'xmlns:' + prefix : \"xmlns\", uri);\r\n            visibleNamespaces.push({\r\n              prefix: prefix,\r\n              namespace: uri\r\n            });\r\n          }\r\n          serializeToString(attr, buf, isHTML, nodeFilter, visibleNamespaces);\r\n        }\r\n\r\n        // add namespace for current node\r\n        if (nodeName === prefixedNodeName && needNamespaceDefine(node, isHTML, visibleNamespaces)) {\r\n          var prefix = node.prefix || '';\r\n          var uri = node.namespaceURI;\r\n          addSerializedAttribute(buf, prefix ? 'xmlns:' + prefix : \"xmlns\", uri);\r\n          visibleNamespaces.push({\r\n            prefix: prefix,\r\n            namespace: uri\r\n          });\r\n        }\r\n        if (child || isHTML && !/^(?:meta|link|img|br|hr|input)$/i.test(nodeName)) {\r\n          buf.push('>');\r\n          //if is cdata child node\r\n          if (isHTML && /^script$/i.test(nodeName)) {\r\n            while (child) {\r\n              if (child.data) {\r\n                buf.push(child.data);\r\n              } else {\r\n                serializeToString(child, buf, isHTML, nodeFilter, visibleNamespaces.slice());\r\n              }\r\n              child = child.nextSibling;\r\n            }\r\n          } else {\r\n            while (child) {\r\n              serializeToString(child, buf, isHTML, nodeFilter, visibleNamespaces.slice());\r\n              child = child.nextSibling;\r\n            }\r\n          }\r\n          buf.push('</', prefixedNodeName, '>');\r\n        } else {\r\n          buf.push('/>');\r\n        }\r\n        // remove added visible namespaces\r\n        //visibleNamespaces.length = startVisibleNamespaces;\r\n        return;\r\n      case DOCUMENT_NODE:\r\n      case DOCUMENT_FRAGMENT_NODE:\r\n        var child = node.firstChild;\r\n        while (child) {\r\n          serializeToString(child, buf, isHTML, nodeFilter, visibleNamespaces.slice());\r\n          child = child.nextSibling;\r\n        }\r\n        return;\r\n      case ATTRIBUTE_NODE:\r\n        return addSerializedAttribute(buf, node.name, node.value);\r\n      case TEXT_NODE:\r\n        /**\r\n         * The ampersand character (&) and the left angle bracket (<) must not appear in their literal form,\r\n         * except when used as markup delimiters, or within a comment, a processing instruction, or a CDATA section.\r\n         * If they are needed elsewhere, they must be escaped using either numeric character references or the strings\r\n         * `&amp;` and `&lt;` respectively.\r\n         * The right angle bracket (>) may be represented using the string \" &gt; \", and must, for compatibility,\r\n         * be escaped using either `&gt;` or a character reference when it appears in the string `]]>` in content,\r\n         * when that string is not marking the end of a CDATA section.\r\n         *\r\n         * In the content of elements, character data is any string of characters\r\n         * which does not contain the start-delimiter of any markup\r\n         * and does not include the CDATA-section-close delimiter, `]]>`.\r\n         *\r\n         * @see https://www.w3.org/TR/xml/#NT-CharData\r\n         * @see https://w3c.github.io/DOM-Parsing/#xml-serializing-a-text-node\r\n         */\r\n        return buf.push(node.data.replace(/[<&>]/g, _xmlEncoder));\r\n      case CDATA_SECTION_NODE:\r\n        return buf.push('<![CDATA[', node.data, ']]>');\r\n      case COMMENT_NODE:\r\n        return buf.push(\"<!--\", node.data, \"-->\");\r\n      case DOCUMENT_TYPE_NODE:\r\n        var pubid = node.publicId;\r\n        var sysid = node.systemId;\r\n        buf.push('<!DOCTYPE ', node.name);\r\n        if (pubid) {\r\n          buf.push(' PUBLIC ', pubid);\r\n          if (sysid && sysid != '.') {\r\n            buf.push(' ', sysid);\r\n          }\r\n          buf.push('>');\r\n        } else if (sysid && sysid != '.') {\r\n          buf.push(' SYSTEM ', sysid, '>');\r\n        } else {\r\n          var sub = node.internalSubset;\r\n          if (sub) {\r\n            buf.push(\" [\", sub, \"]\");\r\n          }\r\n          buf.push(\">\");\r\n        }\r\n        return;\r\n      case PROCESSING_INSTRUCTION_NODE:\r\n        return buf.push(\"<?\", node.target, \" \", node.data, \"?>\");\r\n      case ENTITY_REFERENCE_NODE:\r\n        return buf.push('&', node.nodeName, ';');\r\n      //case ENTITY_NODE:\r\n      //case NOTATION_NODE:\r\n      default:\r\n        buf.push('??', node.nodeName);\r\n    }\r\n  }\r\n  function importNode(doc, node, deep) {\r\n    var node2;\r\n    switch (node.nodeType) {\r\n      case ELEMENT_NODE:\r\n        node2 = node.cloneNode(false);\r\n        node2.ownerDocument = doc;\r\n      //var attrs = node2.attributes;\r\n      //var len = attrs.length;\r\n      //for(var i=0;i<len;i++){\r\n      //node2.setAttributeNodeNS(importNode(doc,attrs.item(i),deep));\r\n      //}\r\n      case DOCUMENT_FRAGMENT_NODE:\r\n        break;\r\n      case ATTRIBUTE_NODE:\r\n        deep = true;\r\n        break;\r\n      //case ENTITY_REFERENCE_NODE:\r\n      //case PROCESSING_INSTRUCTION_NODE:\r\n      ////case TEXT_NODE:\r\n      //case CDATA_SECTION_NODE:\r\n      //case COMMENT_NODE:\r\n      //\tdeep = false;\r\n      //\tbreak;\r\n      //case DOCUMENT_NODE:\r\n      //case DOCUMENT_TYPE_NODE:\r\n      //cannot be imported.\r\n      //case ENTITY_NODE:\r\n      //case NOTATION_NODE：\r\n      //can not hit in level3\r\n      //default:throw e;\r\n    }\r\n    if (!node2) {\r\n      node2 = node.cloneNode(false); //false\r\n    }\r\n    node2.ownerDocument = doc;\r\n    node2.parentNode = null;\r\n    if (deep) {\r\n      var child = node.firstChild;\r\n      while (child) {\r\n        node2.appendChild(importNode(doc, child, deep));\r\n        child = child.nextSibling;\r\n      }\r\n    }\r\n    return node2;\r\n  }\r\n  //\r\n  //var _relationMap = {firstChild:1,lastChild:1,previousSibling:1,nextSibling:1,\r\n  //\t\t\t\t\tattributes:1,childNodes:1,parentNode:1,documentElement:1,doctype,};\r\n  function cloneNode(doc, node, deep) {\r\n    var node2 = new node.constructor();\r\n    for (var n in node) {\r\n      if (Object.prototype.hasOwnProperty.call(node, n)) {\r\n        var v = node[n];\r\n        if (typeof v != \"object\") {\r\n          if (v != node2[n]) {\r\n            node2[n] = v;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    if (node.childNodes) {\r\n      node2.childNodes = new NodeList();\r\n    }\r\n    node2.ownerDocument = doc;\r\n    switch (node2.nodeType) {\r\n      case ELEMENT_NODE:\r\n        var attrs = node.attributes;\r\n        var attrs2 = node2.attributes = new NamedNodeMap();\r\n        var len = attrs.length;\r\n        attrs2._ownerElement = node2;\r\n        for (var i = 0; i < len; i++) {\r\n          node2.setAttributeNode(cloneNode(doc, attrs.item(i), true));\r\n        }\r\n        break;\r\n      case ATTRIBUTE_NODE:\r\n        deep = true;\r\n    }\r\n    if (deep) {\r\n      var child = node.firstChild;\r\n      while (child) {\r\n        node2.appendChild(cloneNode(doc, child, deep));\r\n        child = child.nextSibling;\r\n      }\r\n    }\r\n    return node2;\r\n  }\r\n  function __set__(object, key, value) {\r\n    object[key] = value;\r\n  }\r\n  //do dynamic\r\n  try {\r\n    if (Object.defineProperty) {\r\n      Object.defineProperty(LiveNodeList.prototype, 'length', {\r\n        get: function () {\r\n          _updateLiveList(this);\r\n          return this.$$length;\r\n        }\r\n      });\r\n      Object.defineProperty(Node.prototype, 'textContent', {\r\n        get: function () {\r\n          return getTextContent(this);\r\n        },\r\n        set: function (data) {\r\n          switch (this.nodeType) {\r\n            case ELEMENT_NODE:\r\n            case DOCUMENT_FRAGMENT_NODE:\r\n              while (this.firstChild) {\r\n                this.removeChild(this.firstChild);\r\n              }\r\n              if (data || String(data)) {\r\n                this.appendChild(this.ownerDocument.createTextNode(data));\r\n              }\r\n              break;\r\n            default:\r\n              this.data = data;\r\n              this.value = data;\r\n              this.nodeValue = data;\r\n          }\r\n        }\r\n      });\r\n      function getTextContent(node) {\r\n        switch (node.nodeType) {\r\n          case ELEMENT_NODE:\r\n          case DOCUMENT_FRAGMENT_NODE:\r\n            var buf = [];\r\n            node = node.firstChild;\r\n            while (node) {\r\n              if (node.nodeType !== 7 && node.nodeType !== 8) {\r\n                buf.push(getTextContent(node));\r\n              }\r\n              node = node.nextSibling;\r\n            }\r\n            return buf.join('');\r\n          default:\r\n            return node.nodeValue;\r\n        }\r\n      }\r\n      __set__ = function (object, key, value) {\r\n        //console.log(value)\r\n        object['$$' + key] = value;\r\n      };\r\n    }\r\n  } catch (e) {//ie8\r\n  }\r\n\r\n  //if(typeof require == 'function'){\r\n  var DocumentType_1 = DocumentType;\r\n  var DOMException_1 = DOMException;\r\n  var DOMImplementation_1 = DOMImplementation$1;\r\n  var Element_1 = Element;\r\n  var Node_1 = Node;\r\n  var NodeList_1 = NodeList;\r\n  var XMLSerializer_1 = XMLSerializer;\r\n  //}\r\n\r\n  var dom = {\r\n    DocumentType: DocumentType_1,\r\n    DOMException: DOMException_1,\r\n    DOMImplementation: DOMImplementation_1,\r\n    Element: Element_1,\r\n    Node: Node_1,\r\n    NodeList: NodeList_1,\r\n    XMLSerializer: XMLSerializer_1\r\n  };\r\n\r\n  var entities = createCommonjsModule(function (module, exports) {\r\n\r\n    var freeze = conventions.freeze;\r\n\r\n    /**\r\n     * The entities that are predefined in every XML document.\r\n     *\r\n     * @see https://www.w3.org/TR/2006/REC-xml11-20060816/#sec-predefined-ent W3C XML 1.1\r\n     * @see https://www.w3.org/TR/2008/REC-xml-20081126/#sec-predefined-ent W3C XML 1.0\r\n     * @see https://en.wikipedia.org/wiki/List_of_XML_and_HTML_character_entity_references#Predefined_entities_in_XML Wikipedia\r\n     */\r\n    exports.XML_ENTITIES = freeze({\r\n      amp: '&',\r\n      apos: \"'\",\r\n      gt: '>',\r\n      lt: '<',\r\n      quot: '\"'\r\n    });\r\n\r\n    /**\r\n     * A map of all entities that are detected in an HTML document.\r\n     * They contain all entries from `XML_ENTITIES`.\r\n     *\r\n     * @see XML_ENTITIES\r\n     * @see DOMParser.parseFromString\r\n     * @see DOMImplementation.prototype.createHTMLDocument\r\n     * @see https://html.spec.whatwg.org/#named-character-references WHATWG HTML(5) Spec\r\n     * @see https://html.spec.whatwg.org/entities.json JSON\r\n     * @see https://www.w3.org/TR/xml-entity-names/ W3C XML Entity Names\r\n     * @see https://www.w3.org/TR/html4/sgml/entities.html W3C HTML4/SGML\r\n     * @see https://en.wikipedia.org/wiki/List_of_XML_and_HTML_character_entity_references#Character_entity_references_in_HTML Wikipedia (HTML)\r\n     * @see https://en.wikipedia.org/wiki/List_of_XML_and_HTML_character_entity_references#Entities_representing_special_characters_in_XHTML Wikpedia (XHTML)\r\n     */\r\n    exports.HTML_ENTITIES = freeze({\r\n      Aacute: '\\u00C1',\r\n      aacute: '\\u00E1',\r\n      Abreve: '\\u0102',\r\n      abreve: '\\u0103',\r\n      ac: '\\u223E',\r\n      acd: '\\u223F',\r\n      acE: '\\u223E\\u0333',\r\n      Acirc: '\\u00C2',\r\n      acirc: '\\u00E2',\r\n      acute: '\\u00B4',\r\n      Acy: '\\u0410',\r\n      acy: '\\u0430',\r\n      AElig: '\\u00C6',\r\n      aelig: '\\u00E6',\r\n      af: '\\u2061',\r\n      Afr: '\\uD835\\uDD04',\r\n      afr: '\\uD835\\uDD1E',\r\n      Agrave: '\\u00C0',\r\n      agrave: '\\u00E0',\r\n      alefsym: '\\u2135',\r\n      aleph: '\\u2135',\r\n      Alpha: '\\u0391',\r\n      alpha: '\\u03B1',\r\n      Amacr: '\\u0100',\r\n      amacr: '\\u0101',\r\n      amalg: '\\u2A3F',\r\n      AMP: '\\u0026',\r\n      amp: '\\u0026',\r\n      And: '\\u2A53',\r\n      and: '\\u2227',\r\n      andand: '\\u2A55',\r\n      andd: '\\u2A5C',\r\n      andslope: '\\u2A58',\r\n      andv: '\\u2A5A',\r\n      ang: '\\u2220',\r\n      ange: '\\u29A4',\r\n      angle: '\\u2220',\r\n      angmsd: '\\u2221',\r\n      angmsdaa: '\\u29A8',\r\n      angmsdab: '\\u29A9',\r\n      angmsdac: '\\u29AA',\r\n      angmsdad: '\\u29AB',\r\n      angmsdae: '\\u29AC',\r\n      angmsdaf: '\\u29AD',\r\n      angmsdag: '\\u29AE',\r\n      angmsdah: '\\u29AF',\r\n      angrt: '\\u221F',\r\n      angrtvb: '\\u22BE',\r\n      angrtvbd: '\\u299D',\r\n      angsph: '\\u2222',\r\n      angst: '\\u00C5',\r\n      angzarr: '\\u237C',\r\n      Aogon: '\\u0104',\r\n      aogon: '\\u0105',\r\n      Aopf: '\\uD835\\uDD38',\r\n      aopf: '\\uD835\\uDD52',\r\n      ap: '\\u2248',\r\n      apacir: '\\u2A6F',\r\n      apE: '\\u2A70',\r\n      ape: '\\u224A',\r\n      apid: '\\u224B',\r\n      apos: '\\u0027',\r\n      ApplyFunction: '\\u2061',\r\n      approx: '\\u2248',\r\n      approxeq: '\\u224A',\r\n      Aring: '\\u00C5',\r\n      aring: '\\u00E5',\r\n      Ascr: '\\uD835\\uDC9C',\r\n      ascr: '\\uD835\\uDCB6',\r\n      Assign: '\\u2254',\r\n      ast: '\\u002A',\r\n      asymp: '\\u2248',\r\n      asympeq: '\\u224D',\r\n      Atilde: '\\u00C3',\r\n      atilde: '\\u00E3',\r\n      Auml: '\\u00C4',\r\n      auml: '\\u00E4',\r\n      awconint: '\\u2233',\r\n      awint: '\\u2A11',\r\n      backcong: '\\u224C',\r\n      backepsilon: '\\u03F6',\r\n      backprime: '\\u2035',\r\n      backsim: '\\u223D',\r\n      backsimeq: '\\u22CD',\r\n      Backslash: '\\u2216',\r\n      Barv: '\\u2AE7',\r\n      barvee: '\\u22BD',\r\n      Barwed: '\\u2306',\r\n      barwed: '\\u2305',\r\n      barwedge: '\\u2305',\r\n      bbrk: '\\u23B5',\r\n      bbrktbrk: '\\u23B6',\r\n      bcong: '\\u224C',\r\n      Bcy: '\\u0411',\r\n      bcy: '\\u0431',\r\n      bdquo: '\\u201E',\r\n      becaus: '\\u2235',\r\n      Because: '\\u2235',\r\n      because: '\\u2235',\r\n      bemptyv: '\\u29B0',\r\n      bepsi: '\\u03F6',\r\n      bernou: '\\u212C',\r\n      Bernoullis: '\\u212C',\r\n      Beta: '\\u0392',\r\n      beta: '\\u03B2',\r\n      beth: '\\u2136',\r\n      between: '\\u226C',\r\n      Bfr: '\\uD835\\uDD05',\r\n      bfr: '\\uD835\\uDD1F',\r\n      bigcap: '\\u22C2',\r\n      bigcirc: '\\u25EF',\r\n      bigcup: '\\u22C3',\r\n      bigodot: '\\u2A00',\r\n      bigoplus: '\\u2A01',\r\n      bigotimes: '\\u2A02',\r\n      bigsqcup: '\\u2A06',\r\n      bigstar: '\\u2605',\r\n      bigtriangledown: '\\u25BD',\r\n      bigtriangleup: '\\u25B3',\r\n      biguplus: '\\u2A04',\r\n      bigvee: '\\u22C1',\r\n      bigwedge: '\\u22C0',\r\n      bkarow: '\\u290D',\r\n      blacklozenge: '\\u29EB',\r\n      blacksquare: '\\u25AA',\r\n      blacktriangle: '\\u25B4',\r\n      blacktriangledown: '\\u25BE',\r\n      blacktriangleleft: '\\u25C2',\r\n      blacktriangleright: '\\u25B8',\r\n      blank: '\\u2423',\r\n      blk12: '\\u2592',\r\n      blk14: '\\u2591',\r\n      blk34: '\\u2593',\r\n      block: '\\u2588',\r\n      bne: '\\u003D\\u20E5',\r\n      bnequiv: '\\u2261\\u20E5',\r\n      bNot: '\\u2AED',\r\n      bnot: '\\u2310',\r\n      Bopf: '\\uD835\\uDD39',\r\n      bopf: '\\uD835\\uDD53',\r\n      bot: '\\u22A5',\r\n      bottom: '\\u22A5',\r\n      bowtie: '\\u22C8',\r\n      boxbox: '\\u29C9',\r\n      boxDL: '\\u2557',\r\n      boxDl: '\\u2556',\r\n      boxdL: '\\u2555',\r\n      boxdl: '\\u2510',\r\n      boxDR: '\\u2554',\r\n      boxDr: '\\u2553',\r\n      boxdR: '\\u2552',\r\n      boxdr: '\\u250C',\r\n      boxH: '\\u2550',\r\n      boxh: '\\u2500',\r\n      boxHD: '\\u2566',\r\n      boxHd: '\\u2564',\r\n      boxhD: '\\u2565',\r\n      boxhd: '\\u252C',\r\n      boxHU: '\\u2569',\r\n      boxHu: '\\u2567',\r\n      boxhU: '\\u2568',\r\n      boxhu: '\\u2534',\r\n      boxminus: '\\u229F',\r\n      boxplus: '\\u229E',\r\n      boxtimes: '\\u22A0',\r\n      boxUL: '\\u255D',\r\n      boxUl: '\\u255C',\r\n      boxuL: '\\u255B',\r\n      boxul: '\\u2518',\r\n      boxUR: '\\u255A',\r\n      boxUr: '\\u2559',\r\n      boxuR: '\\u2558',\r\n      boxur: '\\u2514',\r\n      boxV: '\\u2551',\r\n      boxv: '\\u2502',\r\n      boxVH: '\\u256C',\r\n      boxVh: '\\u256B',\r\n      boxvH: '\\u256A',\r\n      boxvh: '\\u253C',\r\n      boxVL: '\\u2563',\r\n      boxVl: '\\u2562',\r\n      boxvL: '\\u2561',\r\n      boxvl: '\\u2524',\r\n      boxVR: '\\u2560',\r\n      boxVr: '\\u255F',\r\n      boxvR: '\\u255E',\r\n      boxvr: '\\u251C',\r\n      bprime: '\\u2035',\r\n      Breve: '\\u02D8',\r\n      breve: '\\u02D8',\r\n      brvbar: '\\u00A6',\r\n      Bscr: '\\u212C',\r\n      bscr: '\\uD835\\uDCB7',\r\n      bsemi: '\\u204F',\r\n      bsim: '\\u223D',\r\n      bsime: '\\u22CD',\r\n      bsol: '\\u005C',\r\n      bsolb: '\\u29C5',\r\n      bsolhsub: '\\u27C8',\r\n      bull: '\\u2022',\r\n      bullet: '\\u2022',\r\n      bump: '\\u224E',\r\n      bumpE: '\\u2AAE',\r\n      bumpe: '\\u224F',\r\n      Bumpeq: '\\u224E',\r\n      bumpeq: '\\u224F',\r\n      Cacute: '\\u0106',\r\n      cacute: '\\u0107',\r\n      Cap: '\\u22D2',\r\n      cap: '\\u2229',\r\n      capand: '\\u2A44',\r\n      capbrcup: '\\u2A49',\r\n      capcap: '\\u2A4B',\r\n      capcup: '\\u2A47',\r\n      capdot: '\\u2A40',\r\n      CapitalDifferentialD: '\\u2145',\r\n      caps: '\\u2229\\uFE00',\r\n      caret: '\\u2041',\r\n      caron: '\\u02C7',\r\n      Cayleys: '\\u212D',\r\n      ccaps: '\\u2A4D',\r\n      Ccaron: '\\u010C',\r\n      ccaron: '\\u010D',\r\n      Ccedil: '\\u00C7',\r\n      ccedil: '\\u00E7',\r\n      Ccirc: '\\u0108',\r\n      ccirc: '\\u0109',\r\n      Cconint: '\\u2230',\r\n      ccups: '\\u2A4C',\r\n      ccupssm: '\\u2A50',\r\n      Cdot: '\\u010A',\r\n      cdot: '\\u010B',\r\n      cedil: '\\u00B8',\r\n      Cedilla: '\\u00B8',\r\n      cemptyv: '\\u29B2',\r\n      cent: '\\u00A2',\r\n      CenterDot: '\\u00B7',\r\n      centerdot: '\\u00B7',\r\n      Cfr: '\\u212D',\r\n      cfr: '\\uD835\\uDD20',\r\n      CHcy: '\\u0427',\r\n      chcy: '\\u0447',\r\n      check: '\\u2713',\r\n      checkmark: '\\u2713',\r\n      Chi: '\\u03A7',\r\n      chi: '\\u03C7',\r\n      cir: '\\u25CB',\r\n      circ: '\\u02C6',\r\n      circeq: '\\u2257',\r\n      circlearrowleft: '\\u21BA',\r\n      circlearrowright: '\\u21BB',\r\n      circledast: '\\u229B',\r\n      circledcirc: '\\u229A',\r\n      circleddash: '\\u229D',\r\n      CircleDot: '\\u2299',\r\n      circledR: '\\u00AE',\r\n      circledS: '\\u24C8',\r\n      CircleMinus: '\\u2296',\r\n      CirclePlus: '\\u2295',\r\n      CircleTimes: '\\u2297',\r\n      cirE: '\\u29C3',\r\n      cire: '\\u2257',\r\n      cirfnint: '\\u2A10',\r\n      cirmid: '\\u2AEF',\r\n      cirscir: '\\u29C2',\r\n      ClockwiseContourIntegral: '\\u2232',\r\n      CloseCurlyDoubleQuote: '\\u201D',\r\n      CloseCurlyQuote: '\\u2019',\r\n      clubs: '\\u2663',\r\n      clubsuit: '\\u2663',\r\n      Colon: '\\u2237',\r\n      colon: '\\u003A',\r\n      Colone: '\\u2A74',\r\n      colone: '\\u2254',\r\n      coloneq: '\\u2254',\r\n      comma: '\\u002C',\r\n      commat: '\\u0040',\r\n      comp: '\\u2201',\r\n      compfn: '\\u2218',\r\n      complement: '\\u2201',\r\n      complexes: '\\u2102',\r\n      cong: '\\u2245',\r\n      congdot: '\\u2A6D',\r\n      Congruent: '\\u2261',\r\n      Conint: '\\u222F',\r\n      conint: '\\u222E',\r\n      ContourIntegral: '\\u222E',\r\n      Copf: '\\u2102',\r\n      copf: '\\uD835\\uDD54',\r\n      coprod: '\\u2210',\r\n      Coproduct: '\\u2210',\r\n      COPY: '\\u00A9',\r\n      copy: '\\u00A9',\r\n      copysr: '\\u2117',\r\n      CounterClockwiseContourIntegral: '\\u2233',\r\n      crarr: '\\u21B5',\r\n      Cross: '\\u2A2F',\r\n      cross: '\\u2717',\r\n      Cscr: '\\uD835\\uDC9E',\r\n      cscr: '\\uD835\\uDCB8',\r\n      csub: '\\u2ACF',\r\n      csube: '\\u2AD1',\r\n      csup: '\\u2AD0',\r\n      csupe: '\\u2AD2',\r\n      ctdot: '\\u22EF',\r\n      cudarrl: '\\u2938',\r\n      cudarrr: '\\u2935',\r\n      cuepr: '\\u22DE',\r\n      cuesc: '\\u22DF',\r\n      cularr: '\\u21B6',\r\n      cularrp: '\\u293D',\r\n      Cup: '\\u22D3',\r\n      cup: '\\u222A',\r\n      cupbrcap: '\\u2A48',\r\n      CupCap: '\\u224D',\r\n      cupcap: '\\u2A46',\r\n      cupcup: '\\u2A4A',\r\n      cupdot: '\\u228D',\r\n      cupor: '\\u2A45',\r\n      cups: '\\u222A\\uFE00',\r\n      curarr: '\\u21B7',\r\n      curarrm: '\\u293C',\r\n      curlyeqprec: '\\u22DE',\r\n      curlyeqsucc: '\\u22DF',\r\n      curlyvee: '\\u22CE',\r\n      curlywedge: '\\u22CF',\r\n      curren: '\\u00A4',\r\n      curvearrowleft: '\\u21B6',\r\n      curvearrowright: '\\u21B7',\r\n      cuvee: '\\u22CE',\r\n      cuwed: '\\u22CF',\r\n      cwconint: '\\u2232',\r\n      cwint: '\\u2231',\r\n      cylcty: '\\u232D',\r\n      Dagger: '\\u2021',\r\n      dagger: '\\u2020',\r\n      daleth: '\\u2138',\r\n      Darr: '\\u21A1',\r\n      dArr: '\\u21D3',\r\n      darr: '\\u2193',\r\n      dash: '\\u2010',\r\n      Dashv: '\\u2AE4',\r\n      dashv: '\\u22A3',\r\n      dbkarow: '\\u290F',\r\n      dblac: '\\u02DD',\r\n      Dcaron: '\\u010E',\r\n      dcaron: '\\u010F',\r\n      Dcy: '\\u0414',\r\n      dcy: '\\u0434',\r\n      DD: '\\u2145',\r\n      dd: '\\u2146',\r\n      ddagger: '\\u2021',\r\n      ddarr: '\\u21CA',\r\n      DDotrahd: '\\u2911',\r\n      ddotseq: '\\u2A77',\r\n      deg: '\\u00B0',\r\n      Del: '\\u2207',\r\n      Delta: '\\u0394',\r\n      delta: '\\u03B4',\r\n      demptyv: '\\u29B1',\r\n      dfisht: '\\u297F',\r\n      Dfr: '\\uD835\\uDD07',\r\n      dfr: '\\uD835\\uDD21',\r\n      dHar: '\\u2965',\r\n      dharl: '\\u21C3',\r\n      dharr: '\\u21C2',\r\n      DiacriticalAcute: '\\u00B4',\r\n      DiacriticalDot: '\\u02D9',\r\n      DiacriticalDoubleAcute: '\\u02DD',\r\n      DiacriticalGrave: '\\u0060',\r\n      DiacriticalTilde: '\\u02DC',\r\n      diam: '\\u22C4',\r\n      Diamond: '\\u22C4',\r\n      diamond: '\\u22C4',\r\n      diamondsuit: '\\u2666',\r\n      diams: '\\u2666',\r\n      die: '\\u00A8',\r\n      DifferentialD: '\\u2146',\r\n      digamma: '\\u03DD',\r\n      disin: '\\u22F2',\r\n      div: '\\u00F7',\r\n      divide: '\\u00F7',\r\n      divideontimes: '\\u22C7',\r\n      divonx: '\\u22C7',\r\n      DJcy: '\\u0402',\r\n      djcy: '\\u0452',\r\n      dlcorn: '\\u231E',\r\n      dlcrop: '\\u230D',\r\n      dollar: '\\u0024',\r\n      Dopf: '\\uD835\\uDD3B',\r\n      dopf: '\\uD835\\uDD55',\r\n      Dot: '\\u00A8',\r\n      dot: '\\u02D9',\r\n      DotDot: '\\u20DC',\r\n      doteq: '\\u2250',\r\n      doteqdot: '\\u2251',\r\n      DotEqual: '\\u2250',\r\n      dotminus: '\\u2238',\r\n      dotplus: '\\u2214',\r\n      dotsquare: '\\u22A1',\r\n      doublebarwedge: '\\u2306',\r\n      DoubleContourIntegral: '\\u222F',\r\n      DoubleDot: '\\u00A8',\r\n      DoubleDownArrow: '\\u21D3',\r\n      DoubleLeftArrow: '\\u21D0',\r\n      DoubleLeftRightArrow: '\\u21D4',\r\n      DoubleLeftTee: '\\u2AE4',\r\n      DoubleLongLeftArrow: '\\u27F8',\r\n      DoubleLongLeftRightArrow: '\\u27FA',\r\n      DoubleLongRightArrow: '\\u27F9',\r\n      DoubleRightArrow: '\\u21D2',\r\n      DoubleRightTee: '\\u22A8',\r\n      DoubleUpArrow: '\\u21D1',\r\n      DoubleUpDownArrow: '\\u21D5',\r\n      DoubleVerticalBar: '\\u2225',\r\n      DownArrow: '\\u2193',\r\n      Downarrow: '\\u21D3',\r\n      downarrow: '\\u2193',\r\n      DownArrowBar: '\\u2913',\r\n      DownArrowUpArrow: '\\u21F5',\r\n      DownBreve: '\\u0311',\r\n      downdownarrows: '\\u21CA',\r\n      downharpoonleft: '\\u21C3',\r\n      downharpoonright: '\\u21C2',\r\n      DownLeftRightVector: '\\u2950',\r\n      DownLeftTeeVector: '\\u295E',\r\n      DownLeftVector: '\\u21BD',\r\n      DownLeftVectorBar: '\\u2956',\r\n      DownRightTeeVector: '\\u295F',\r\n      DownRightVector: '\\u21C1',\r\n      DownRightVectorBar: '\\u2957',\r\n      DownTee: '\\u22A4',\r\n      DownTeeArrow: '\\u21A7',\r\n      drbkarow: '\\u2910',\r\n      drcorn: '\\u231F',\r\n      drcrop: '\\u230C',\r\n      Dscr: '\\uD835\\uDC9F',\r\n      dscr: '\\uD835\\uDCB9',\r\n      DScy: '\\u0405',\r\n      dscy: '\\u0455',\r\n      dsol: '\\u29F6',\r\n      Dstrok: '\\u0110',\r\n      dstrok: '\\u0111',\r\n      dtdot: '\\u22F1',\r\n      dtri: '\\u25BF',\r\n      dtrif: '\\u25BE',\r\n      duarr: '\\u21F5',\r\n      duhar: '\\u296F',\r\n      dwangle: '\\u29A6',\r\n      DZcy: '\\u040F',\r\n      dzcy: '\\u045F',\r\n      dzigrarr: '\\u27FF',\r\n      Eacute: '\\u00C9',\r\n      eacute: '\\u00E9',\r\n      easter: '\\u2A6E',\r\n      Ecaron: '\\u011A',\r\n      ecaron: '\\u011B',\r\n      ecir: '\\u2256',\r\n      Ecirc: '\\u00CA',\r\n      ecirc: '\\u00EA',\r\n      ecolon: '\\u2255',\r\n      Ecy: '\\u042D',\r\n      ecy: '\\u044D',\r\n      eDDot: '\\u2A77',\r\n      Edot: '\\u0116',\r\n      eDot: '\\u2251',\r\n      edot: '\\u0117',\r\n      ee: '\\u2147',\r\n      efDot: '\\u2252',\r\n      Efr: '\\uD835\\uDD08',\r\n      efr: '\\uD835\\uDD22',\r\n      eg: '\\u2A9A',\r\n      Egrave: '\\u00C8',\r\n      egrave: '\\u00E8',\r\n      egs: '\\u2A96',\r\n      egsdot: '\\u2A98',\r\n      el: '\\u2A99',\r\n      Element: '\\u2208',\r\n      elinters: '\\u23E7',\r\n      ell: '\\u2113',\r\n      els: '\\u2A95',\r\n      elsdot: '\\u2A97',\r\n      Emacr: '\\u0112',\r\n      emacr: '\\u0113',\r\n      empty: '\\u2205',\r\n      emptyset: '\\u2205',\r\n      EmptySmallSquare: '\\u25FB',\r\n      emptyv: '\\u2205',\r\n      EmptyVerySmallSquare: '\\u25AB',\r\n      emsp: '\\u2003',\r\n      emsp13: '\\u2004',\r\n      emsp14: '\\u2005',\r\n      ENG: '\\u014A',\r\n      eng: '\\u014B',\r\n      ensp: '\\u2002',\r\n      Eogon: '\\u0118',\r\n      eogon: '\\u0119',\r\n      Eopf: '\\uD835\\uDD3C',\r\n      eopf: '\\uD835\\uDD56',\r\n      epar: '\\u22D5',\r\n      eparsl: '\\u29E3',\r\n      eplus: '\\u2A71',\r\n      epsi: '\\u03B5',\r\n      Epsilon: '\\u0395',\r\n      epsilon: '\\u03B5',\r\n      epsiv: '\\u03F5',\r\n      eqcirc: '\\u2256',\r\n      eqcolon: '\\u2255',\r\n      eqsim: '\\u2242',\r\n      eqslantgtr: '\\u2A96',\r\n      eqslantless: '\\u2A95',\r\n      Equal: '\\u2A75',\r\n      equals: '\\u003D',\r\n      EqualTilde: '\\u2242',\r\n      equest: '\\u225F',\r\n      Equilibrium: '\\u21CC',\r\n      equiv: '\\u2261',\r\n      equivDD: '\\u2A78',\r\n      eqvparsl: '\\u29E5',\r\n      erarr: '\\u2971',\r\n      erDot: '\\u2253',\r\n      Escr: '\\u2130',\r\n      escr: '\\u212F',\r\n      esdot: '\\u2250',\r\n      Esim: '\\u2A73',\r\n      esim: '\\u2242',\r\n      Eta: '\\u0397',\r\n      eta: '\\u03B7',\r\n      ETH: '\\u00D0',\r\n      eth: '\\u00F0',\r\n      Euml: '\\u00CB',\r\n      euml: '\\u00EB',\r\n      euro: '\\u20AC',\r\n      excl: '\\u0021',\r\n      exist: '\\u2203',\r\n      Exists: '\\u2203',\r\n      expectation: '\\u2130',\r\n      ExponentialE: '\\u2147',\r\n      exponentiale: '\\u2147',\r\n      fallingdotseq: '\\u2252',\r\n      Fcy: '\\u0424',\r\n      fcy: '\\u0444',\r\n      female: '\\u2640',\r\n      ffilig: '\\uFB03',\r\n      fflig: '\\uFB00',\r\n      ffllig: '\\uFB04',\r\n      Ffr: '\\uD835\\uDD09',\r\n      ffr: '\\uD835\\uDD23',\r\n      filig: '\\uFB01',\r\n      FilledSmallSquare: '\\u25FC',\r\n      FilledVerySmallSquare: '\\u25AA',\r\n      fjlig: '\\u0066\\u006A',\r\n      flat: '\\u266D',\r\n      fllig: '\\uFB02',\r\n      fltns: '\\u25B1',\r\n      fnof: '\\u0192',\r\n      Fopf: '\\uD835\\uDD3D',\r\n      fopf: '\\uD835\\uDD57',\r\n      ForAll: '\\u2200',\r\n      forall: '\\u2200',\r\n      fork: '\\u22D4',\r\n      forkv: '\\u2AD9',\r\n      Fouriertrf: '\\u2131',\r\n      fpartint: '\\u2A0D',\r\n      frac12: '\\u00BD',\r\n      frac13: '\\u2153',\r\n      frac14: '\\u00BC',\r\n      frac15: '\\u2155',\r\n      frac16: '\\u2159',\r\n      frac18: '\\u215B',\r\n      frac23: '\\u2154',\r\n      frac25: '\\u2156',\r\n      frac34: '\\u00BE',\r\n      frac35: '\\u2157',\r\n      frac38: '\\u215C',\r\n      frac45: '\\u2158',\r\n      frac56: '\\u215A',\r\n      frac58: '\\u215D',\r\n      frac78: '\\u215E',\r\n      frasl: '\\u2044',\r\n      frown: '\\u2322',\r\n      Fscr: '\\u2131',\r\n      fscr: '\\uD835\\uDCBB',\r\n      gacute: '\\u01F5',\r\n      Gamma: '\\u0393',\r\n      gamma: '\\u03B3',\r\n      Gammad: '\\u03DC',\r\n      gammad: '\\u03DD',\r\n      gap: '\\u2A86',\r\n      Gbreve: '\\u011E',\r\n      gbreve: '\\u011F',\r\n      Gcedil: '\\u0122',\r\n      Gcirc: '\\u011C',\r\n      gcirc: '\\u011D',\r\n      Gcy: '\\u0413',\r\n      gcy: '\\u0433',\r\n      Gdot: '\\u0120',\r\n      gdot: '\\u0121',\r\n      gE: '\\u2267',\r\n      ge: '\\u2265',\r\n      gEl: '\\u2A8C',\r\n      gel: '\\u22DB',\r\n      geq: '\\u2265',\r\n      geqq: '\\u2267',\r\n      geqslant: '\\u2A7E',\r\n      ges: '\\u2A7E',\r\n      gescc: '\\u2AA9',\r\n      gesdot: '\\u2A80',\r\n      gesdoto: '\\u2A82',\r\n      gesdotol: '\\u2A84',\r\n      gesl: '\\u22DB\\uFE00',\r\n      gesles: '\\u2A94',\r\n      Gfr: '\\uD835\\uDD0A',\r\n      gfr: '\\uD835\\uDD24',\r\n      Gg: '\\u22D9',\r\n      gg: '\\u226B',\r\n      ggg: '\\u22D9',\r\n      gimel: '\\u2137',\r\n      GJcy: '\\u0403',\r\n      gjcy: '\\u0453',\r\n      gl: '\\u2277',\r\n      gla: '\\u2AA5',\r\n      glE: '\\u2A92',\r\n      glj: '\\u2AA4',\r\n      gnap: '\\u2A8A',\r\n      gnapprox: '\\u2A8A',\r\n      gnE: '\\u2269',\r\n      gne: '\\u2A88',\r\n      gneq: '\\u2A88',\r\n      gneqq: '\\u2269',\r\n      gnsim: '\\u22E7',\r\n      Gopf: '\\uD835\\uDD3E',\r\n      gopf: '\\uD835\\uDD58',\r\n      grave: '\\u0060',\r\n      GreaterEqual: '\\u2265',\r\n      GreaterEqualLess: '\\u22DB',\r\n      GreaterFullEqual: '\\u2267',\r\n      GreaterGreater: '\\u2AA2',\r\n      GreaterLess: '\\u2277',\r\n      GreaterSlantEqual: '\\u2A7E',\r\n      GreaterTilde: '\\u2273',\r\n      Gscr: '\\uD835\\uDCA2',\r\n      gscr: '\\u210A',\r\n      gsim: '\\u2273',\r\n      gsime: '\\u2A8E',\r\n      gsiml: '\\u2A90',\r\n      Gt: '\\u226B',\r\n      GT: '\\u003E',\r\n      gt: '\\u003E',\r\n      gtcc: '\\u2AA7',\r\n      gtcir: '\\u2A7A',\r\n      gtdot: '\\u22D7',\r\n      gtlPar: '\\u2995',\r\n      gtquest: '\\u2A7C',\r\n      gtrapprox: '\\u2A86',\r\n      gtrarr: '\\u2978',\r\n      gtrdot: '\\u22D7',\r\n      gtreqless: '\\u22DB',\r\n      gtreqqless: '\\u2A8C',\r\n      gtrless: '\\u2277',\r\n      gtrsim: '\\u2273',\r\n      gvertneqq: '\\u2269\\uFE00',\r\n      gvnE: '\\u2269\\uFE00',\r\n      Hacek: '\\u02C7',\r\n      hairsp: '\\u200A',\r\n      half: '\\u00BD',\r\n      hamilt: '\\u210B',\r\n      HARDcy: '\\u042A',\r\n      hardcy: '\\u044A',\r\n      hArr: '\\u21D4',\r\n      harr: '\\u2194',\r\n      harrcir: '\\u2948',\r\n      harrw: '\\u21AD',\r\n      Hat: '\\u005E',\r\n      hbar: '\\u210F',\r\n      Hcirc: '\\u0124',\r\n      hcirc: '\\u0125',\r\n      hearts: '\\u2665',\r\n      heartsuit: '\\u2665',\r\n      hellip: '\\u2026',\r\n      hercon: '\\u22B9',\r\n      Hfr: '\\u210C',\r\n      hfr: '\\uD835\\uDD25',\r\n      HilbertSpace: '\\u210B',\r\n      hksearow: '\\u2925',\r\n      hkswarow: '\\u2926',\r\n      hoarr: '\\u21FF',\r\n      homtht: '\\u223B',\r\n      hookleftarrow: '\\u21A9',\r\n      hookrightarrow: '\\u21AA',\r\n      Hopf: '\\u210D',\r\n      hopf: '\\uD835\\uDD59',\r\n      horbar: '\\u2015',\r\n      HorizontalLine: '\\u2500',\r\n      Hscr: '\\u210B',\r\n      hscr: '\\uD835\\uDCBD',\r\n      hslash: '\\u210F',\r\n      Hstrok: '\\u0126',\r\n      hstrok: '\\u0127',\r\n      HumpDownHump: '\\u224E',\r\n      HumpEqual: '\\u224F',\r\n      hybull: '\\u2043',\r\n      hyphen: '\\u2010',\r\n      Iacute: '\\u00CD',\r\n      iacute: '\\u00ED',\r\n      ic: '\\u2063',\r\n      Icirc: '\\u00CE',\r\n      icirc: '\\u00EE',\r\n      Icy: '\\u0418',\r\n      icy: '\\u0438',\r\n      Idot: '\\u0130',\r\n      IEcy: '\\u0415',\r\n      iecy: '\\u0435',\r\n      iexcl: '\\u00A1',\r\n      iff: '\\u21D4',\r\n      Ifr: '\\u2111',\r\n      ifr: '\\uD835\\uDD26',\r\n      Igrave: '\\u00CC',\r\n      igrave: '\\u00EC',\r\n      ii: '\\u2148',\r\n      iiiint: '\\u2A0C',\r\n      iiint: '\\u222D',\r\n      iinfin: '\\u29DC',\r\n      iiota: '\\u2129',\r\n      IJlig: '\\u0132',\r\n      ijlig: '\\u0133',\r\n      Im: '\\u2111',\r\n      Imacr: '\\u012A',\r\n      imacr: '\\u012B',\r\n      image: '\\u2111',\r\n      ImaginaryI: '\\u2148',\r\n      imagline: '\\u2110',\r\n      imagpart: '\\u2111',\r\n      imath: '\\u0131',\r\n      imof: '\\u22B7',\r\n      imped: '\\u01B5',\r\n      Implies: '\\u21D2',\r\n      in: '\\u2208',\r\n      incare: '\\u2105',\r\n      infin: '\\u221E',\r\n      infintie: '\\u29DD',\r\n      inodot: '\\u0131',\r\n      Int: '\\u222C',\r\n      int: '\\u222B',\r\n      intcal: '\\u22BA',\r\n      integers: '\\u2124',\r\n      Integral: '\\u222B',\r\n      intercal: '\\u22BA',\r\n      Intersection: '\\u22C2',\r\n      intlarhk: '\\u2A17',\r\n      intprod: '\\u2A3C',\r\n      InvisibleComma: '\\u2063',\r\n      InvisibleTimes: '\\u2062',\r\n      IOcy: '\\u0401',\r\n      iocy: '\\u0451',\r\n      Iogon: '\\u012E',\r\n      iogon: '\\u012F',\r\n      Iopf: '\\uD835\\uDD40',\r\n      iopf: '\\uD835\\uDD5A',\r\n      Iota: '\\u0399',\r\n      iota: '\\u03B9',\r\n      iprod: '\\u2A3C',\r\n      iquest: '\\u00BF',\r\n      Iscr: '\\u2110',\r\n      iscr: '\\uD835\\uDCBE',\r\n      isin: '\\u2208',\r\n      isindot: '\\u22F5',\r\n      isinE: '\\u22F9',\r\n      isins: '\\u22F4',\r\n      isinsv: '\\u22F3',\r\n      isinv: '\\u2208',\r\n      it: '\\u2062',\r\n      Itilde: '\\u0128',\r\n      itilde: '\\u0129',\r\n      Iukcy: '\\u0406',\r\n      iukcy: '\\u0456',\r\n      Iuml: '\\u00CF',\r\n      iuml: '\\u00EF',\r\n      Jcirc: '\\u0134',\r\n      jcirc: '\\u0135',\r\n      Jcy: '\\u0419',\r\n      jcy: '\\u0439',\r\n      Jfr: '\\uD835\\uDD0D',\r\n      jfr: '\\uD835\\uDD27',\r\n      jmath: '\\u0237',\r\n      Jopf: '\\uD835\\uDD41',\r\n      jopf: '\\uD835\\uDD5B',\r\n      Jscr: '\\uD835\\uDCA5',\r\n      jscr: '\\uD835\\uDCBF',\r\n      Jsercy: '\\u0408',\r\n      jsercy: '\\u0458',\r\n      Jukcy: '\\u0404',\r\n      jukcy: '\\u0454',\r\n      Kappa: '\\u039A',\r\n      kappa: '\\u03BA',\r\n      kappav: '\\u03F0',\r\n      Kcedil: '\\u0136',\r\n      kcedil: '\\u0137',\r\n      Kcy: '\\u041A',\r\n      kcy: '\\u043A',\r\n      Kfr: '\\uD835\\uDD0E',\r\n      kfr: '\\uD835\\uDD28',\r\n      kgreen: '\\u0138',\r\n      KHcy: '\\u0425',\r\n      khcy: '\\u0445',\r\n      KJcy: '\\u040C',\r\n      kjcy: '\\u045C',\r\n      Kopf: '\\uD835\\uDD42',\r\n      kopf: '\\uD835\\uDD5C',\r\n      Kscr: '\\uD835\\uDCA6',\r\n      kscr: '\\uD835\\uDCC0',\r\n      lAarr: '\\u21DA',\r\n      Lacute: '\\u0139',\r\n      lacute: '\\u013A',\r\n      laemptyv: '\\u29B4',\r\n      lagran: '\\u2112',\r\n      Lambda: '\\u039B',\r\n      lambda: '\\u03BB',\r\n      Lang: '\\u27EA',\r\n      lang: '\\u27E8',\r\n      langd: '\\u2991',\r\n      langle: '\\u27E8',\r\n      lap: '\\u2A85',\r\n      Laplacetrf: '\\u2112',\r\n      laquo: '\\u00AB',\r\n      Larr: '\\u219E',\r\n      lArr: '\\u21D0',\r\n      larr: '\\u2190',\r\n      larrb: '\\u21E4',\r\n      larrbfs: '\\u291F',\r\n      larrfs: '\\u291D',\r\n      larrhk: '\\u21A9',\r\n      larrlp: '\\u21AB',\r\n      larrpl: '\\u2939',\r\n      larrsim: '\\u2973',\r\n      larrtl: '\\u21A2',\r\n      lat: '\\u2AAB',\r\n      lAtail: '\\u291B',\r\n      latail: '\\u2919',\r\n      late: '\\u2AAD',\r\n      lates: '\\u2AAD\\uFE00',\r\n      lBarr: '\\u290E',\r\n      lbarr: '\\u290C',\r\n      lbbrk: '\\u2772',\r\n      lbrace: '\\u007B',\r\n      lbrack: '\\u005B',\r\n      lbrke: '\\u298B',\r\n      lbrksld: '\\u298F',\r\n      lbrkslu: '\\u298D',\r\n      Lcaron: '\\u013D',\r\n      lcaron: '\\u013E',\r\n      Lcedil: '\\u013B',\r\n      lcedil: '\\u013C',\r\n      lceil: '\\u2308',\r\n      lcub: '\\u007B',\r\n      Lcy: '\\u041B',\r\n      lcy: '\\u043B',\r\n      ldca: '\\u2936',\r\n      ldquo: '\\u201C',\r\n      ldquor: '\\u201E',\r\n      ldrdhar: '\\u2967',\r\n      ldrushar: '\\u294B',\r\n      ldsh: '\\u21B2',\r\n      lE: '\\u2266',\r\n      le: '\\u2264',\r\n      LeftAngleBracket: '\\u27E8',\r\n      LeftArrow: '\\u2190',\r\n      Leftarrow: '\\u21D0',\r\n      leftarrow: '\\u2190',\r\n      LeftArrowBar: '\\u21E4',\r\n      LeftArrowRightArrow: '\\u21C6',\r\n      leftarrowtail: '\\u21A2',\r\n      LeftCeiling: '\\u2308',\r\n      LeftDoubleBracket: '\\u27E6',\r\n      LeftDownTeeVector: '\\u2961',\r\n      LeftDownVector: '\\u21C3',\r\n      LeftDownVectorBar: '\\u2959',\r\n      LeftFloor: '\\u230A',\r\n      leftharpoondown: '\\u21BD',\r\n      leftharpoonup: '\\u21BC',\r\n      leftleftarrows: '\\u21C7',\r\n      LeftRightArrow: '\\u2194',\r\n      Leftrightarrow: '\\u21D4',\r\n      leftrightarrow: '\\u2194',\r\n      leftrightarrows: '\\u21C6',\r\n      leftrightharpoons: '\\u21CB',\r\n      leftrightsquigarrow: '\\u21AD',\r\n      LeftRightVector: '\\u294E',\r\n      LeftTee: '\\u22A3',\r\n      LeftTeeArrow: '\\u21A4',\r\n      LeftTeeVector: '\\u295A',\r\n      leftthreetimes: '\\u22CB',\r\n      LeftTriangle: '\\u22B2',\r\n      LeftTriangleBar: '\\u29CF',\r\n      LeftTriangleEqual: '\\u22B4',\r\n      LeftUpDownVector: '\\u2951',\r\n      LeftUpTeeVector: '\\u2960',\r\n      LeftUpVector: '\\u21BF',\r\n      LeftUpVectorBar: '\\u2958',\r\n      LeftVector: '\\u21BC',\r\n      LeftVectorBar: '\\u2952',\r\n      lEg: '\\u2A8B',\r\n      leg: '\\u22DA',\r\n      leq: '\\u2264',\r\n      leqq: '\\u2266',\r\n      leqslant: '\\u2A7D',\r\n      les: '\\u2A7D',\r\n      lescc: '\\u2AA8',\r\n      lesdot: '\\u2A7F',\r\n      lesdoto: '\\u2A81',\r\n      lesdotor: '\\u2A83',\r\n      lesg: '\\u22DA\\uFE00',\r\n      lesges: '\\u2A93',\r\n      lessapprox: '\\u2A85',\r\n      lessdot: '\\u22D6',\r\n      lesseqgtr: '\\u22DA',\r\n      lesseqqgtr: '\\u2A8B',\r\n      LessEqualGreater: '\\u22DA',\r\n      LessFullEqual: '\\u2266',\r\n      LessGreater: '\\u2276',\r\n      lessgtr: '\\u2276',\r\n      LessLess: '\\u2AA1',\r\n      lesssim: '\\u2272',\r\n      LessSlantEqual: '\\u2A7D',\r\n      LessTilde: '\\u2272',\r\n      lfisht: '\\u297C',\r\n      lfloor: '\\u230A',\r\n      Lfr: '\\uD835\\uDD0F',\r\n      lfr: '\\uD835\\uDD29',\r\n      lg: '\\u2276',\r\n      lgE: '\\u2A91',\r\n      lHar: '\\u2962',\r\n      lhard: '\\u21BD',\r\n      lharu: '\\u21BC',\r\n      lharul: '\\u296A',\r\n      lhblk: '\\u2584',\r\n      LJcy: '\\u0409',\r\n      ljcy: '\\u0459',\r\n      Ll: '\\u22D8',\r\n      ll: '\\u226A',\r\n      llarr: '\\u21C7',\r\n      llcorner: '\\u231E',\r\n      Lleftarrow: '\\u21DA',\r\n      llhard: '\\u296B',\r\n      lltri: '\\u25FA',\r\n      Lmidot: '\\u013F',\r\n      lmidot: '\\u0140',\r\n      lmoust: '\\u23B0',\r\n      lmoustache: '\\u23B0',\r\n      lnap: '\\u2A89',\r\n      lnapprox: '\\u2A89',\r\n      lnE: '\\u2268',\r\n      lne: '\\u2A87',\r\n      lneq: '\\u2A87',\r\n      lneqq: '\\u2268',\r\n      lnsim: '\\u22E6',\r\n      loang: '\\u27EC',\r\n      loarr: '\\u21FD',\r\n      lobrk: '\\u27E6',\r\n      LongLeftArrow: '\\u27F5',\r\n      Longleftarrow: '\\u27F8',\r\n      longleftarrow: '\\u27F5',\r\n      LongLeftRightArrow: '\\u27F7',\r\n      Longleftrightarrow: '\\u27FA',\r\n      longleftrightarrow: '\\u27F7',\r\n      longmapsto: '\\u27FC',\r\n      LongRightArrow: '\\u27F6',\r\n      Longrightarrow: '\\u27F9',\r\n      longrightarrow: '\\u27F6',\r\n      looparrowleft: '\\u21AB',\r\n      looparrowright: '\\u21AC',\r\n      lopar: '\\u2985',\r\n      Lopf: '\\uD835\\uDD43',\r\n      lopf: '\\uD835\\uDD5D',\r\n      loplus: '\\u2A2D',\r\n      lotimes: '\\u2A34',\r\n      lowast: '\\u2217',\r\n      lowbar: '\\u005F',\r\n      LowerLeftArrow: '\\u2199',\r\n      LowerRightArrow: '\\u2198',\r\n      loz: '\\u25CA',\r\n      lozenge: '\\u25CA',\r\n      lozf: '\\u29EB',\r\n      lpar: '\\u0028',\r\n      lparlt: '\\u2993',\r\n      lrarr: '\\u21C6',\r\n      lrcorner: '\\u231F',\r\n      lrhar: '\\u21CB',\r\n      lrhard: '\\u296D',\r\n      lrm: '\\u200E',\r\n      lrtri: '\\u22BF',\r\n      lsaquo: '\\u2039',\r\n      Lscr: '\\u2112',\r\n      lscr: '\\uD835\\uDCC1',\r\n      Lsh: '\\u21B0',\r\n      lsh: '\\u21B0',\r\n      lsim: '\\u2272',\r\n      lsime: '\\u2A8D',\r\n      lsimg: '\\u2A8F',\r\n      lsqb: '\\u005B',\r\n      lsquo: '\\u2018',\r\n      lsquor: '\\u201A',\r\n      Lstrok: '\\u0141',\r\n      lstrok: '\\u0142',\r\n      Lt: '\\u226A',\r\n      LT: '\\u003C',\r\n      lt: '\\u003C',\r\n      ltcc: '\\u2AA6',\r\n      ltcir: '\\u2A79',\r\n      ltdot: '\\u22D6',\r\n      lthree: '\\u22CB',\r\n      ltimes: '\\u22C9',\r\n      ltlarr: '\\u2976',\r\n      ltquest: '\\u2A7B',\r\n      ltri: '\\u25C3',\r\n      ltrie: '\\u22B4',\r\n      ltrif: '\\u25C2',\r\n      ltrPar: '\\u2996',\r\n      lurdshar: '\\u294A',\r\n      luruhar: '\\u2966',\r\n      lvertneqq: '\\u2268\\uFE00',\r\n      lvnE: '\\u2268\\uFE00',\r\n      macr: '\\u00AF',\r\n      male: '\\u2642',\r\n      malt: '\\u2720',\r\n      maltese: '\\u2720',\r\n      Map: '\\u2905',\r\n      map: '\\u21A6',\r\n      mapsto: '\\u21A6',\r\n      mapstodown: '\\u21A7',\r\n      mapstoleft: '\\u21A4',\r\n      mapstoup: '\\u21A5',\r\n      marker: '\\u25AE',\r\n      mcomma: '\\u2A29',\r\n      Mcy: '\\u041C',\r\n      mcy: '\\u043C',\r\n      mdash: '\\u2014',\r\n      mDDot: '\\u223A',\r\n      measuredangle: '\\u2221',\r\n      MediumSpace: '\\u205F',\r\n      Mellintrf: '\\u2133',\r\n      Mfr: '\\uD835\\uDD10',\r\n      mfr: '\\uD835\\uDD2A',\r\n      mho: '\\u2127',\r\n      micro: '\\u00B5',\r\n      mid: '\\u2223',\r\n      midast: '\\u002A',\r\n      midcir: '\\u2AF0',\r\n      middot: '\\u00B7',\r\n      minus: '\\u2212',\r\n      minusb: '\\u229F',\r\n      minusd: '\\u2238',\r\n      minusdu: '\\u2A2A',\r\n      MinusPlus: '\\u2213',\r\n      mlcp: '\\u2ADB',\r\n      mldr: '\\u2026',\r\n      mnplus: '\\u2213',\r\n      models: '\\u22A7',\r\n      Mopf: '\\uD835\\uDD44',\r\n      mopf: '\\uD835\\uDD5E',\r\n      mp: '\\u2213',\r\n      Mscr: '\\u2133',\r\n      mscr: '\\uD835\\uDCC2',\r\n      mstpos: '\\u223E',\r\n      Mu: '\\u039C',\r\n      mu: '\\u03BC',\r\n      multimap: '\\u22B8',\r\n      mumap: '\\u22B8',\r\n      nabla: '\\u2207',\r\n      Nacute: '\\u0143',\r\n      nacute: '\\u0144',\r\n      nang: '\\u2220\\u20D2',\r\n      nap: '\\u2249',\r\n      napE: '\\u2A70\\u0338',\r\n      napid: '\\u224B\\u0338',\r\n      napos: '\\u0149',\r\n      napprox: '\\u2249',\r\n      natur: '\\u266E',\r\n      natural: '\\u266E',\r\n      naturals: '\\u2115',\r\n      nbsp: '\\u00A0',\r\n      nbump: '\\u224E\\u0338',\r\n      nbumpe: '\\u224F\\u0338',\r\n      ncap: '\\u2A43',\r\n      Ncaron: '\\u0147',\r\n      ncaron: '\\u0148',\r\n      Ncedil: '\\u0145',\r\n      ncedil: '\\u0146',\r\n      ncong: '\\u2247',\r\n      ncongdot: '\\u2A6D\\u0338',\r\n      ncup: '\\u2A42',\r\n      Ncy: '\\u041D',\r\n      ncy: '\\u043D',\r\n      ndash: '\\u2013',\r\n      ne: '\\u2260',\r\n      nearhk: '\\u2924',\r\n      neArr: '\\u21D7',\r\n      nearr: '\\u2197',\r\n      nearrow: '\\u2197',\r\n      nedot: '\\u2250\\u0338',\r\n      NegativeMediumSpace: '\\u200B',\r\n      NegativeThickSpace: '\\u200B',\r\n      NegativeThinSpace: '\\u200B',\r\n      NegativeVeryThinSpace: '\\u200B',\r\n      nequiv: '\\u2262',\r\n      nesear: '\\u2928',\r\n      nesim: '\\u2242\\u0338',\r\n      NestedGreaterGreater: '\\u226B',\r\n      NestedLessLess: '\\u226A',\r\n      NewLine: '\\u000A',\r\n      nexist: '\\u2204',\r\n      nexists: '\\u2204',\r\n      Nfr: '\\uD835\\uDD11',\r\n      nfr: '\\uD835\\uDD2B',\r\n      ngE: '\\u2267\\u0338',\r\n      nge: '\\u2271',\r\n      ngeq: '\\u2271',\r\n      ngeqq: '\\u2267\\u0338',\r\n      ngeqslant: '\\u2A7E\\u0338',\r\n      nges: '\\u2A7E\\u0338',\r\n      nGg: '\\u22D9\\u0338',\r\n      ngsim: '\\u2275',\r\n      nGt: '\\u226B\\u20D2',\r\n      ngt: '\\u226F',\r\n      ngtr: '\\u226F',\r\n      nGtv: '\\u226B\\u0338',\r\n      nhArr: '\\u21CE',\r\n      nharr: '\\u21AE',\r\n      nhpar: '\\u2AF2',\r\n      ni: '\\u220B',\r\n      nis: '\\u22FC',\r\n      nisd: '\\u22FA',\r\n      niv: '\\u220B',\r\n      NJcy: '\\u040A',\r\n      njcy: '\\u045A',\r\n      nlArr: '\\u21CD',\r\n      nlarr: '\\u219A',\r\n      nldr: '\\u2025',\r\n      nlE: '\\u2266\\u0338',\r\n      nle: '\\u2270',\r\n      nLeftarrow: '\\u21CD',\r\n      nleftarrow: '\\u219A',\r\n      nLeftrightarrow: '\\u21CE',\r\n      nleftrightarrow: '\\u21AE',\r\n      nleq: '\\u2270',\r\n      nleqq: '\\u2266\\u0338',\r\n      nleqslant: '\\u2A7D\\u0338',\r\n      nles: '\\u2A7D\\u0338',\r\n      nless: '\\u226E',\r\n      nLl: '\\u22D8\\u0338',\r\n      nlsim: '\\u2274',\r\n      nLt: '\\u226A\\u20D2',\r\n      nlt: '\\u226E',\r\n      nltri: '\\u22EA',\r\n      nltrie: '\\u22EC',\r\n      nLtv: '\\u226A\\u0338',\r\n      nmid: '\\u2224',\r\n      NoBreak: '\\u2060',\r\n      NonBreakingSpace: '\\u00A0',\r\n      Nopf: '\\u2115',\r\n      nopf: '\\uD835\\uDD5F',\r\n      Not: '\\u2AEC',\r\n      not: '\\u00AC',\r\n      NotCongruent: '\\u2262',\r\n      NotCupCap: '\\u226D',\r\n      NotDoubleVerticalBar: '\\u2226',\r\n      NotElement: '\\u2209',\r\n      NotEqual: '\\u2260',\r\n      NotEqualTilde: '\\u2242\\u0338',\r\n      NotExists: '\\u2204',\r\n      NotGreater: '\\u226F',\r\n      NotGreaterEqual: '\\u2271',\r\n      NotGreaterFullEqual: '\\u2267\\u0338',\r\n      NotGreaterGreater: '\\u226B\\u0338',\r\n      NotGreaterLess: '\\u2279',\r\n      NotGreaterSlantEqual: '\\u2A7E\\u0338',\r\n      NotGreaterTilde: '\\u2275',\r\n      NotHumpDownHump: '\\u224E\\u0338',\r\n      NotHumpEqual: '\\u224F\\u0338',\r\n      notin: '\\u2209',\r\n      notindot: '\\u22F5\\u0338',\r\n      notinE: '\\u22F9\\u0338',\r\n      notinva: '\\u2209',\r\n      notinvb: '\\u22F7',\r\n      notinvc: '\\u22F6',\r\n      NotLeftTriangle: '\\u22EA',\r\n      NotLeftTriangleBar: '\\u29CF\\u0338',\r\n      NotLeftTriangleEqual: '\\u22EC',\r\n      NotLess: '\\u226E',\r\n      NotLessEqual: '\\u2270',\r\n      NotLessGreater: '\\u2278',\r\n      NotLessLess: '\\u226A\\u0338',\r\n      NotLessSlantEqual: '\\u2A7D\\u0338',\r\n      NotLessTilde: '\\u2274',\r\n      NotNestedGreaterGreater: '\\u2AA2\\u0338',\r\n      NotNestedLessLess: '\\u2AA1\\u0338',\r\n      notni: '\\u220C',\r\n      notniva: '\\u220C',\r\n      notnivb: '\\u22FE',\r\n      notnivc: '\\u22FD',\r\n      NotPrecedes: '\\u2280',\r\n      NotPrecedesEqual: '\\u2AAF\\u0338',\r\n      NotPrecedesSlantEqual: '\\u22E0',\r\n      NotReverseElement: '\\u220C',\r\n      NotRightTriangle: '\\u22EB',\r\n      NotRightTriangleBar: '\\u29D0\\u0338',\r\n      NotRightTriangleEqual: '\\u22ED',\r\n      NotSquareSubset: '\\u228F\\u0338',\r\n      NotSquareSubsetEqual: '\\u22E2',\r\n      NotSquareSuperset: '\\u2290\\u0338',\r\n      NotSquareSupersetEqual: '\\u22E3',\r\n      NotSubset: '\\u2282\\u20D2',\r\n      NotSubsetEqual: '\\u2288',\r\n      NotSucceeds: '\\u2281',\r\n      NotSucceedsEqual: '\\u2AB0\\u0338',\r\n      NotSucceedsSlantEqual: '\\u22E1',\r\n      NotSucceedsTilde: '\\u227F\\u0338',\r\n      NotSuperset: '\\u2283\\u20D2',\r\n      NotSupersetEqual: '\\u2289',\r\n      NotTilde: '\\u2241',\r\n      NotTildeEqual: '\\u2244',\r\n      NotTildeFullEqual: '\\u2247',\r\n      NotTildeTilde: '\\u2249',\r\n      NotVerticalBar: '\\u2224',\r\n      npar: '\\u2226',\r\n      nparallel: '\\u2226',\r\n      nparsl: '\\u2AFD\\u20E5',\r\n      npart: '\\u2202\\u0338',\r\n      npolint: '\\u2A14',\r\n      npr: '\\u2280',\r\n      nprcue: '\\u22E0',\r\n      npre: '\\u2AAF\\u0338',\r\n      nprec: '\\u2280',\r\n      npreceq: '\\u2AAF\\u0338',\r\n      nrArr: '\\u21CF',\r\n      nrarr: '\\u219B',\r\n      nrarrc: '\\u2933\\u0338',\r\n      nrarrw: '\\u219D\\u0338',\r\n      nRightarrow: '\\u21CF',\r\n      nrightarrow: '\\u219B',\r\n      nrtri: '\\u22EB',\r\n      nrtrie: '\\u22ED',\r\n      nsc: '\\u2281',\r\n      nsccue: '\\u22E1',\r\n      nsce: '\\u2AB0\\u0338',\r\n      Nscr: '\\uD835\\uDCA9',\r\n      nscr: '\\uD835\\uDCC3',\r\n      nshortmid: '\\u2224',\r\n      nshortparallel: '\\u2226',\r\n      nsim: '\\u2241',\r\n      nsime: '\\u2244',\r\n      nsimeq: '\\u2244',\r\n      nsmid: '\\u2224',\r\n      nspar: '\\u2226',\r\n      nsqsube: '\\u22E2',\r\n      nsqsupe: '\\u22E3',\r\n      nsub: '\\u2284',\r\n      nsubE: '\\u2AC5\\u0338',\r\n      nsube: '\\u2288',\r\n      nsubset: '\\u2282\\u20D2',\r\n      nsubseteq: '\\u2288',\r\n      nsubseteqq: '\\u2AC5\\u0338',\r\n      nsucc: '\\u2281',\r\n      nsucceq: '\\u2AB0\\u0338',\r\n      nsup: '\\u2285',\r\n      nsupE: '\\u2AC6\\u0338',\r\n      nsupe: '\\u2289',\r\n      nsupset: '\\u2283\\u20D2',\r\n      nsupseteq: '\\u2289',\r\n      nsupseteqq: '\\u2AC6\\u0338',\r\n      ntgl: '\\u2279',\r\n      Ntilde: '\\u00D1',\r\n      ntilde: '\\u00F1',\r\n      ntlg: '\\u2278',\r\n      ntriangleleft: '\\u22EA',\r\n      ntrianglelefteq: '\\u22EC',\r\n      ntriangleright: '\\u22EB',\r\n      ntrianglerighteq: '\\u22ED',\r\n      Nu: '\\u039D',\r\n      nu: '\\u03BD',\r\n      num: '\\u0023',\r\n      numero: '\\u2116',\r\n      numsp: '\\u2007',\r\n      nvap: '\\u224D\\u20D2',\r\n      nVDash: '\\u22AF',\r\n      nVdash: '\\u22AE',\r\n      nvDash: '\\u22AD',\r\n      nvdash: '\\u22AC',\r\n      nvge: '\\u2265\\u20D2',\r\n      nvgt: '\\u003E\\u20D2',\r\n      nvHarr: '\\u2904',\r\n      nvinfin: '\\u29DE',\r\n      nvlArr: '\\u2902',\r\n      nvle: '\\u2264\\u20D2',\r\n      nvlt: '\\u003C\\u20D2',\r\n      nvltrie: '\\u22B4\\u20D2',\r\n      nvrArr: '\\u2903',\r\n      nvrtrie: '\\u22B5\\u20D2',\r\n      nvsim: '\\u223C\\u20D2',\r\n      nwarhk: '\\u2923',\r\n      nwArr: '\\u21D6',\r\n      nwarr: '\\u2196',\r\n      nwarrow: '\\u2196',\r\n      nwnear: '\\u2927',\r\n      Oacute: '\\u00D3',\r\n      oacute: '\\u00F3',\r\n      oast: '\\u229B',\r\n      ocir: '\\u229A',\r\n      Ocirc: '\\u00D4',\r\n      ocirc: '\\u00F4',\r\n      Ocy: '\\u041E',\r\n      ocy: '\\u043E',\r\n      odash: '\\u229D',\r\n      Odblac: '\\u0150',\r\n      odblac: '\\u0151',\r\n      odiv: '\\u2A38',\r\n      odot: '\\u2299',\r\n      odsold: '\\u29BC',\r\n      OElig: '\\u0152',\r\n      oelig: '\\u0153',\r\n      ofcir: '\\u29BF',\r\n      Ofr: '\\uD835\\uDD12',\r\n      ofr: '\\uD835\\uDD2C',\r\n      ogon: '\\u02DB',\r\n      Ograve: '\\u00D2',\r\n      ograve: '\\u00F2',\r\n      ogt: '\\u29C1',\r\n      ohbar: '\\u29B5',\r\n      ohm: '\\u03A9',\r\n      oint: '\\u222E',\r\n      olarr: '\\u21BA',\r\n      olcir: '\\u29BE',\r\n      olcross: '\\u29BB',\r\n      oline: '\\u203E',\r\n      olt: '\\u29C0',\r\n      Omacr: '\\u014C',\r\n      omacr: '\\u014D',\r\n      Omega: '\\u03A9',\r\n      omega: '\\u03C9',\r\n      Omicron: '\\u039F',\r\n      omicron: '\\u03BF',\r\n      omid: '\\u29B6',\r\n      ominus: '\\u2296',\r\n      Oopf: '\\uD835\\uDD46',\r\n      oopf: '\\uD835\\uDD60',\r\n      opar: '\\u29B7',\r\n      OpenCurlyDoubleQuote: '\\u201C',\r\n      OpenCurlyQuote: '\\u2018',\r\n      operp: '\\u29B9',\r\n      oplus: '\\u2295',\r\n      Or: '\\u2A54',\r\n      or: '\\u2228',\r\n      orarr: '\\u21BB',\r\n      ord: '\\u2A5D',\r\n      order: '\\u2134',\r\n      orderof: '\\u2134',\r\n      ordf: '\\u00AA',\r\n      ordm: '\\u00BA',\r\n      origof: '\\u22B6',\r\n      oror: '\\u2A56',\r\n      orslope: '\\u2A57',\r\n      orv: '\\u2A5B',\r\n      oS: '\\u24C8',\r\n      Oscr: '\\uD835\\uDCAA',\r\n      oscr: '\\u2134',\r\n      Oslash: '\\u00D8',\r\n      oslash: '\\u00F8',\r\n      osol: '\\u2298',\r\n      Otilde: '\\u00D5',\r\n      otilde: '\\u00F5',\r\n      Otimes: '\\u2A37',\r\n      otimes: '\\u2297',\r\n      otimesas: '\\u2A36',\r\n      Ouml: '\\u00D6',\r\n      ouml: '\\u00F6',\r\n      ovbar: '\\u233D',\r\n      OverBar: '\\u203E',\r\n      OverBrace: '\\u23DE',\r\n      OverBracket: '\\u23B4',\r\n      OverParenthesis: '\\u23DC',\r\n      par: '\\u2225',\r\n      para: '\\u00B6',\r\n      parallel: '\\u2225',\r\n      parsim: '\\u2AF3',\r\n      parsl: '\\u2AFD',\r\n      part: '\\u2202',\r\n      PartialD: '\\u2202',\r\n      Pcy: '\\u041F',\r\n      pcy: '\\u043F',\r\n      percnt: '\\u0025',\r\n      period: '\\u002E',\r\n      permil: '\\u2030',\r\n      perp: '\\u22A5',\r\n      pertenk: '\\u2031',\r\n      Pfr: '\\uD835\\uDD13',\r\n      pfr: '\\uD835\\uDD2D',\r\n      Phi: '\\u03A6',\r\n      phi: '\\u03C6',\r\n      phiv: '\\u03D5',\r\n      phmmat: '\\u2133',\r\n      phone: '\\u260E',\r\n      Pi: '\\u03A0',\r\n      pi: '\\u03C0',\r\n      pitchfork: '\\u22D4',\r\n      piv: '\\u03D6',\r\n      planck: '\\u210F',\r\n      planckh: '\\u210E',\r\n      plankv: '\\u210F',\r\n      plus: '\\u002B',\r\n      plusacir: '\\u2A23',\r\n      plusb: '\\u229E',\r\n      pluscir: '\\u2A22',\r\n      plusdo: '\\u2214',\r\n      plusdu: '\\u2A25',\r\n      pluse: '\\u2A72',\r\n      PlusMinus: '\\u00B1',\r\n      plusmn: '\\u00B1',\r\n      plussim: '\\u2A26',\r\n      plustwo: '\\u2A27',\r\n      pm: '\\u00B1',\r\n      Poincareplane: '\\u210C',\r\n      pointint: '\\u2A15',\r\n      Popf: '\\u2119',\r\n      popf: '\\uD835\\uDD61',\r\n      pound: '\\u00A3',\r\n      Pr: '\\u2ABB',\r\n      pr: '\\u227A',\r\n      prap: '\\u2AB7',\r\n      prcue: '\\u227C',\r\n      prE: '\\u2AB3',\r\n      pre: '\\u2AAF',\r\n      prec: '\\u227A',\r\n      precapprox: '\\u2AB7',\r\n      preccurlyeq: '\\u227C',\r\n      Precedes: '\\u227A',\r\n      PrecedesEqual: '\\u2AAF',\r\n      PrecedesSlantEqual: '\\u227C',\r\n      PrecedesTilde: '\\u227E',\r\n      preceq: '\\u2AAF',\r\n      precnapprox: '\\u2AB9',\r\n      precneqq: '\\u2AB5',\r\n      precnsim: '\\u22E8',\r\n      precsim: '\\u227E',\r\n      Prime: '\\u2033',\r\n      prime: '\\u2032',\r\n      primes: '\\u2119',\r\n      prnap: '\\u2AB9',\r\n      prnE: '\\u2AB5',\r\n      prnsim: '\\u22E8',\r\n      prod: '\\u220F',\r\n      Product: '\\u220F',\r\n      profalar: '\\u232E',\r\n      profline: '\\u2312',\r\n      profsurf: '\\u2313',\r\n      prop: '\\u221D',\r\n      Proportion: '\\u2237',\r\n      Proportional: '\\u221D',\r\n      propto: '\\u221D',\r\n      prsim: '\\u227E',\r\n      prurel: '\\u22B0',\r\n      Pscr: '\\uD835\\uDCAB',\r\n      pscr: '\\uD835\\uDCC5',\r\n      Psi: '\\u03A8',\r\n      psi: '\\u03C8',\r\n      puncsp: '\\u2008',\r\n      Qfr: '\\uD835\\uDD14',\r\n      qfr: '\\uD835\\uDD2E',\r\n      qint: '\\u2A0C',\r\n      Qopf: '\\u211A',\r\n      qopf: '\\uD835\\uDD62',\r\n      qprime: '\\u2057',\r\n      Qscr: '\\uD835\\uDCAC',\r\n      qscr: '\\uD835\\uDCC6',\r\n      quaternions: '\\u210D',\r\n      quatint: '\\u2A16',\r\n      quest: '\\u003F',\r\n      questeq: '\\u225F',\r\n      QUOT: '\\u0022',\r\n      quot: '\\u0022',\r\n      rAarr: '\\u21DB',\r\n      race: '\\u223D\\u0331',\r\n      Racute: '\\u0154',\r\n      racute: '\\u0155',\r\n      radic: '\\u221A',\r\n      raemptyv: '\\u29B3',\r\n      Rang: '\\u27EB',\r\n      rang: '\\u27E9',\r\n      rangd: '\\u2992',\r\n      range: '\\u29A5',\r\n      rangle: '\\u27E9',\r\n      raquo: '\\u00BB',\r\n      Rarr: '\\u21A0',\r\n      rArr: '\\u21D2',\r\n      rarr: '\\u2192',\r\n      rarrap: '\\u2975',\r\n      rarrb: '\\u21E5',\r\n      rarrbfs: '\\u2920',\r\n      rarrc: '\\u2933',\r\n      rarrfs: '\\u291E',\r\n      rarrhk: '\\u21AA',\r\n      rarrlp: '\\u21AC',\r\n      rarrpl: '\\u2945',\r\n      rarrsim: '\\u2974',\r\n      Rarrtl: '\\u2916',\r\n      rarrtl: '\\u21A3',\r\n      rarrw: '\\u219D',\r\n      rAtail: '\\u291C',\r\n      ratail: '\\u291A',\r\n      ratio: '\\u2236',\r\n      rationals: '\\u211A',\r\n      RBarr: '\\u2910',\r\n      rBarr: '\\u290F',\r\n      rbarr: '\\u290D',\r\n      rbbrk: '\\u2773',\r\n      rbrace: '\\u007D',\r\n      rbrack: '\\u005D',\r\n      rbrke: '\\u298C',\r\n      rbrksld: '\\u298E',\r\n      rbrkslu: '\\u2990',\r\n      Rcaron: '\\u0158',\r\n      rcaron: '\\u0159',\r\n      Rcedil: '\\u0156',\r\n      rcedil: '\\u0157',\r\n      rceil: '\\u2309',\r\n      rcub: '\\u007D',\r\n      Rcy: '\\u0420',\r\n      rcy: '\\u0440',\r\n      rdca: '\\u2937',\r\n      rdldhar: '\\u2969',\r\n      rdquo: '\\u201D',\r\n      rdquor: '\\u201D',\r\n      rdsh: '\\u21B3',\r\n      Re: '\\u211C',\r\n      real: '\\u211C',\r\n      realine: '\\u211B',\r\n      realpart: '\\u211C',\r\n      reals: '\\u211D',\r\n      rect: '\\u25AD',\r\n      REG: '\\u00AE',\r\n      reg: '\\u00AE',\r\n      ReverseElement: '\\u220B',\r\n      ReverseEquilibrium: '\\u21CB',\r\n      ReverseUpEquilibrium: '\\u296F',\r\n      rfisht: '\\u297D',\r\n      rfloor: '\\u230B',\r\n      Rfr: '\\u211C',\r\n      rfr: '\\uD835\\uDD2F',\r\n      rHar: '\\u2964',\r\n      rhard: '\\u21C1',\r\n      rharu: '\\u21C0',\r\n      rharul: '\\u296C',\r\n      Rho: '\\u03A1',\r\n      rho: '\\u03C1',\r\n      rhov: '\\u03F1',\r\n      RightAngleBracket: '\\u27E9',\r\n      RightArrow: '\\u2192',\r\n      Rightarrow: '\\u21D2',\r\n      rightarrow: '\\u2192',\r\n      RightArrowBar: '\\u21E5',\r\n      RightArrowLeftArrow: '\\u21C4',\r\n      rightarrowtail: '\\u21A3',\r\n      RightCeiling: '\\u2309',\r\n      RightDoubleBracket: '\\u27E7',\r\n      RightDownTeeVector: '\\u295D',\r\n      RightDownVector: '\\u21C2',\r\n      RightDownVectorBar: '\\u2955',\r\n      RightFloor: '\\u230B',\r\n      rightharpoondown: '\\u21C1',\r\n      rightharpoonup: '\\u21C0',\r\n      rightleftarrows: '\\u21C4',\r\n      rightleftharpoons: '\\u21CC',\r\n      rightrightarrows: '\\u21C9',\r\n      rightsquigarrow: '\\u219D',\r\n      RightTee: '\\u22A2',\r\n      RightTeeArrow: '\\u21A6',\r\n      RightTeeVector: '\\u295B',\r\n      rightthreetimes: '\\u22CC',\r\n      RightTriangle: '\\u22B3',\r\n      RightTriangleBar: '\\u29D0',\r\n      RightTriangleEqual: '\\u22B5',\r\n      RightUpDownVector: '\\u294F',\r\n      RightUpTeeVector: '\\u295C',\r\n      RightUpVector: '\\u21BE',\r\n      RightUpVectorBar: '\\u2954',\r\n      RightVector: '\\u21C0',\r\n      RightVectorBar: '\\u2953',\r\n      ring: '\\u02DA',\r\n      risingdotseq: '\\u2253',\r\n      rlarr: '\\u21C4',\r\n      rlhar: '\\u21CC',\r\n      rlm: '\\u200F',\r\n      rmoust: '\\u23B1',\r\n      rmoustache: '\\u23B1',\r\n      rnmid: '\\u2AEE',\r\n      roang: '\\u27ED',\r\n      roarr: '\\u21FE',\r\n      robrk: '\\u27E7',\r\n      ropar: '\\u2986',\r\n      Ropf: '\\u211D',\r\n      ropf: '\\uD835\\uDD63',\r\n      roplus: '\\u2A2E',\r\n      rotimes: '\\u2A35',\r\n      RoundImplies: '\\u2970',\r\n      rpar: '\\u0029',\r\n      rpargt: '\\u2994',\r\n      rppolint: '\\u2A12',\r\n      rrarr: '\\u21C9',\r\n      Rrightarrow: '\\u21DB',\r\n      rsaquo: '\\u203A',\r\n      Rscr: '\\u211B',\r\n      rscr: '\\uD835\\uDCC7',\r\n      Rsh: '\\u21B1',\r\n      rsh: '\\u21B1',\r\n      rsqb: '\\u005D',\r\n      rsquo: '\\u2019',\r\n      rsquor: '\\u2019',\r\n      rthree: '\\u22CC',\r\n      rtimes: '\\u22CA',\r\n      rtri: '\\u25B9',\r\n      rtrie: '\\u22B5',\r\n      rtrif: '\\u25B8',\r\n      rtriltri: '\\u29CE',\r\n      RuleDelayed: '\\u29F4',\r\n      ruluhar: '\\u2968',\r\n      rx: '\\u211E',\r\n      Sacute: '\\u015A',\r\n      sacute: '\\u015B',\r\n      sbquo: '\\u201A',\r\n      Sc: '\\u2ABC',\r\n      sc: '\\u227B',\r\n      scap: '\\u2AB8',\r\n      Scaron: '\\u0160',\r\n      scaron: '\\u0161',\r\n      sccue: '\\u227D',\r\n      scE: '\\u2AB4',\r\n      sce: '\\u2AB0',\r\n      Scedil: '\\u015E',\r\n      scedil: '\\u015F',\r\n      Scirc: '\\u015C',\r\n      scirc: '\\u015D',\r\n      scnap: '\\u2ABA',\r\n      scnE: '\\u2AB6',\r\n      scnsim: '\\u22E9',\r\n      scpolint: '\\u2A13',\r\n      scsim: '\\u227F',\r\n      Scy: '\\u0421',\r\n      scy: '\\u0441',\r\n      sdot: '\\u22C5',\r\n      sdotb: '\\u22A1',\r\n      sdote: '\\u2A66',\r\n      searhk: '\\u2925',\r\n      seArr: '\\u21D8',\r\n      searr: '\\u2198',\r\n      searrow: '\\u2198',\r\n      sect: '\\u00A7',\r\n      semi: '\\u003B',\r\n      seswar: '\\u2929',\r\n      setminus: '\\u2216',\r\n      setmn: '\\u2216',\r\n      sext: '\\u2736',\r\n      Sfr: '\\uD835\\uDD16',\r\n      sfr: '\\uD835\\uDD30',\r\n      sfrown: '\\u2322',\r\n      sharp: '\\u266F',\r\n      SHCHcy: '\\u0429',\r\n      shchcy: '\\u0449',\r\n      SHcy: '\\u0428',\r\n      shcy: '\\u0448',\r\n      ShortDownArrow: '\\u2193',\r\n      ShortLeftArrow: '\\u2190',\r\n      shortmid: '\\u2223',\r\n      shortparallel: '\\u2225',\r\n      ShortRightArrow: '\\u2192',\r\n      ShortUpArrow: '\\u2191',\r\n      shy: '\\u00AD',\r\n      Sigma: '\\u03A3',\r\n      sigma: '\\u03C3',\r\n      sigmaf: '\\u03C2',\r\n      sigmav: '\\u03C2',\r\n      sim: '\\u223C',\r\n      simdot: '\\u2A6A',\r\n      sime: '\\u2243',\r\n      simeq: '\\u2243',\r\n      simg: '\\u2A9E',\r\n      simgE: '\\u2AA0',\r\n      siml: '\\u2A9D',\r\n      simlE: '\\u2A9F',\r\n      simne: '\\u2246',\r\n      simplus: '\\u2A24',\r\n      simrarr: '\\u2972',\r\n      slarr: '\\u2190',\r\n      SmallCircle: '\\u2218',\r\n      smallsetminus: '\\u2216',\r\n      smashp: '\\u2A33',\r\n      smeparsl: '\\u29E4',\r\n      smid: '\\u2223',\r\n      smile: '\\u2323',\r\n      smt: '\\u2AAA',\r\n      smte: '\\u2AAC',\r\n      smtes: '\\u2AAC\\uFE00',\r\n      SOFTcy: '\\u042C',\r\n      softcy: '\\u044C',\r\n      sol: '\\u002F',\r\n      solb: '\\u29C4',\r\n      solbar: '\\u233F',\r\n      Sopf: '\\uD835\\uDD4A',\r\n      sopf: '\\uD835\\uDD64',\r\n      spades: '\\u2660',\r\n      spadesuit: '\\u2660',\r\n      spar: '\\u2225',\r\n      sqcap: '\\u2293',\r\n      sqcaps: '\\u2293\\uFE00',\r\n      sqcup: '\\u2294',\r\n      sqcups: '\\u2294\\uFE00',\r\n      Sqrt: '\\u221A',\r\n      sqsub: '\\u228F',\r\n      sqsube: '\\u2291',\r\n      sqsubset: '\\u228F',\r\n      sqsubseteq: '\\u2291',\r\n      sqsup: '\\u2290',\r\n      sqsupe: '\\u2292',\r\n      sqsupset: '\\u2290',\r\n      sqsupseteq: '\\u2292',\r\n      squ: '\\u25A1',\r\n      Square: '\\u25A1',\r\n      square: '\\u25A1',\r\n      SquareIntersection: '\\u2293',\r\n      SquareSubset: '\\u228F',\r\n      SquareSubsetEqual: '\\u2291',\r\n      SquareSuperset: '\\u2290',\r\n      SquareSupersetEqual: '\\u2292',\r\n      SquareUnion: '\\u2294',\r\n      squarf: '\\u25AA',\r\n      squf: '\\u25AA',\r\n      srarr: '\\u2192',\r\n      Sscr: '\\uD835\\uDCAE',\r\n      sscr: '\\uD835\\uDCC8',\r\n      ssetmn: '\\u2216',\r\n      ssmile: '\\u2323',\r\n      sstarf: '\\u22C6',\r\n      Star: '\\u22C6',\r\n      star: '\\u2606',\r\n      starf: '\\u2605',\r\n      straightepsilon: '\\u03F5',\r\n      straightphi: '\\u03D5',\r\n      strns: '\\u00AF',\r\n      Sub: '\\u22D0',\r\n      sub: '\\u2282',\r\n      subdot: '\\u2ABD',\r\n      subE: '\\u2AC5',\r\n      sube: '\\u2286',\r\n      subedot: '\\u2AC3',\r\n      submult: '\\u2AC1',\r\n      subnE: '\\u2ACB',\r\n      subne: '\\u228A',\r\n      subplus: '\\u2ABF',\r\n      subrarr: '\\u2979',\r\n      Subset: '\\u22D0',\r\n      subset: '\\u2282',\r\n      subseteq: '\\u2286',\r\n      subseteqq: '\\u2AC5',\r\n      SubsetEqual: '\\u2286',\r\n      subsetneq: '\\u228A',\r\n      subsetneqq: '\\u2ACB',\r\n      subsim: '\\u2AC7',\r\n      subsub: '\\u2AD5',\r\n      subsup: '\\u2AD3',\r\n      succ: '\\u227B',\r\n      succapprox: '\\u2AB8',\r\n      succcurlyeq: '\\u227D',\r\n      Succeeds: '\\u227B',\r\n      SucceedsEqual: '\\u2AB0',\r\n      SucceedsSlantEqual: '\\u227D',\r\n      SucceedsTilde: '\\u227F',\r\n      succeq: '\\u2AB0',\r\n      succnapprox: '\\u2ABA',\r\n      succneqq: '\\u2AB6',\r\n      succnsim: '\\u22E9',\r\n      succsim: '\\u227F',\r\n      SuchThat: '\\u220B',\r\n      Sum: '\\u2211',\r\n      sum: '\\u2211',\r\n      sung: '\\u266A',\r\n      Sup: '\\u22D1',\r\n      sup: '\\u2283',\r\n      sup1: '\\u00B9',\r\n      sup2: '\\u00B2',\r\n      sup3: '\\u00B3',\r\n      supdot: '\\u2ABE',\r\n      supdsub: '\\u2AD8',\r\n      supE: '\\u2AC6',\r\n      supe: '\\u2287',\r\n      supedot: '\\u2AC4',\r\n      Superset: '\\u2283',\r\n      SupersetEqual: '\\u2287',\r\n      suphsol: '\\u27C9',\r\n      suphsub: '\\u2AD7',\r\n      suplarr: '\\u297B',\r\n      supmult: '\\u2AC2',\r\n      supnE: '\\u2ACC',\r\n      supne: '\\u228B',\r\n      supplus: '\\u2AC0',\r\n      Supset: '\\u22D1',\r\n      supset: '\\u2283',\r\n      supseteq: '\\u2287',\r\n      supseteqq: '\\u2AC6',\r\n      supsetneq: '\\u228B',\r\n      supsetneqq: '\\u2ACC',\r\n      supsim: '\\u2AC8',\r\n      supsub: '\\u2AD4',\r\n      supsup: '\\u2AD6',\r\n      swarhk: '\\u2926',\r\n      swArr: '\\u21D9',\r\n      swarr: '\\u2199',\r\n      swarrow: '\\u2199',\r\n      swnwar: '\\u292A',\r\n      szlig: '\\u00DF',\r\n      Tab: '\\u0009',\r\n      target: '\\u2316',\r\n      Tau: '\\u03A4',\r\n      tau: '\\u03C4',\r\n      tbrk: '\\u23B4',\r\n      Tcaron: '\\u0164',\r\n      tcaron: '\\u0165',\r\n      Tcedil: '\\u0162',\r\n      tcedil: '\\u0163',\r\n      Tcy: '\\u0422',\r\n      tcy: '\\u0442',\r\n      tdot: '\\u20DB',\r\n      telrec: '\\u2315',\r\n      Tfr: '\\uD835\\uDD17',\r\n      tfr: '\\uD835\\uDD31',\r\n      there4: '\\u2234',\r\n      Therefore: '\\u2234',\r\n      therefore: '\\u2234',\r\n      Theta: '\\u0398',\r\n      theta: '\\u03B8',\r\n      thetasym: '\\u03D1',\r\n      thetav: '\\u03D1',\r\n      thickapprox: '\\u2248',\r\n      thicksim: '\\u223C',\r\n      ThickSpace: '\\u205F\\u200A',\r\n      thinsp: '\\u2009',\r\n      ThinSpace: '\\u2009',\r\n      thkap: '\\u2248',\r\n      thksim: '\\u223C',\r\n      THORN: '\\u00DE',\r\n      thorn: '\\u00FE',\r\n      Tilde: '\\u223C',\r\n      tilde: '\\u02DC',\r\n      TildeEqual: '\\u2243',\r\n      TildeFullEqual: '\\u2245',\r\n      TildeTilde: '\\u2248',\r\n      times: '\\u00D7',\r\n      timesb: '\\u22A0',\r\n      timesbar: '\\u2A31',\r\n      timesd: '\\u2A30',\r\n      tint: '\\u222D',\r\n      toea: '\\u2928',\r\n      top: '\\u22A4',\r\n      topbot: '\\u2336',\r\n      topcir: '\\u2AF1',\r\n      Topf: '\\uD835\\uDD4B',\r\n      topf: '\\uD835\\uDD65',\r\n      topfork: '\\u2ADA',\r\n      tosa: '\\u2929',\r\n      tprime: '\\u2034',\r\n      TRADE: '\\u2122',\r\n      trade: '\\u2122',\r\n      triangle: '\\u25B5',\r\n      triangledown: '\\u25BF',\r\n      triangleleft: '\\u25C3',\r\n      trianglelefteq: '\\u22B4',\r\n      triangleq: '\\u225C',\r\n      triangleright: '\\u25B9',\r\n      trianglerighteq: '\\u22B5',\r\n      tridot: '\\u25EC',\r\n      trie: '\\u225C',\r\n      triminus: '\\u2A3A',\r\n      TripleDot: '\\u20DB',\r\n      triplus: '\\u2A39',\r\n      trisb: '\\u29CD',\r\n      tritime: '\\u2A3B',\r\n      trpezium: '\\u23E2',\r\n      Tscr: '\\uD835\\uDCAF',\r\n      tscr: '\\uD835\\uDCC9',\r\n      TScy: '\\u0426',\r\n      tscy: '\\u0446',\r\n      TSHcy: '\\u040B',\r\n      tshcy: '\\u045B',\r\n      Tstrok: '\\u0166',\r\n      tstrok: '\\u0167',\r\n      twixt: '\\u226C',\r\n      twoheadleftarrow: '\\u219E',\r\n      twoheadrightarrow: '\\u21A0',\r\n      Uacute: '\\u00DA',\r\n      uacute: '\\u00FA',\r\n      Uarr: '\\u219F',\r\n      uArr: '\\u21D1',\r\n      uarr: '\\u2191',\r\n      Uarrocir: '\\u2949',\r\n      Ubrcy: '\\u040E',\r\n      ubrcy: '\\u045E',\r\n      Ubreve: '\\u016C',\r\n      ubreve: '\\u016D',\r\n      Ucirc: '\\u00DB',\r\n      ucirc: '\\u00FB',\r\n      Ucy: '\\u0423',\r\n      ucy: '\\u0443',\r\n      udarr: '\\u21C5',\r\n      Udblac: '\\u0170',\r\n      udblac: '\\u0171',\r\n      udhar: '\\u296E',\r\n      ufisht: '\\u297E',\r\n      Ufr: '\\uD835\\uDD18',\r\n      ufr: '\\uD835\\uDD32',\r\n      Ugrave: '\\u00D9',\r\n      ugrave: '\\u00F9',\r\n      uHar: '\\u2963',\r\n      uharl: '\\u21BF',\r\n      uharr: '\\u21BE',\r\n      uhblk: '\\u2580',\r\n      ulcorn: '\\u231C',\r\n      ulcorner: '\\u231C',\r\n      ulcrop: '\\u230F',\r\n      ultri: '\\u25F8',\r\n      Umacr: '\\u016A',\r\n      umacr: '\\u016B',\r\n      uml: '\\u00A8',\r\n      UnderBar: '\\u005F',\r\n      UnderBrace: '\\u23DF',\r\n      UnderBracket: '\\u23B5',\r\n      UnderParenthesis: '\\u23DD',\r\n      Union: '\\u22C3',\r\n      UnionPlus: '\\u228E',\r\n      Uogon: '\\u0172',\r\n      uogon: '\\u0173',\r\n      Uopf: '\\uD835\\uDD4C',\r\n      uopf: '\\uD835\\uDD66',\r\n      UpArrow: '\\u2191',\r\n      Uparrow: '\\u21D1',\r\n      uparrow: '\\u2191',\r\n      UpArrowBar: '\\u2912',\r\n      UpArrowDownArrow: '\\u21C5',\r\n      UpDownArrow: '\\u2195',\r\n      Updownarrow: '\\u21D5',\r\n      updownarrow: '\\u2195',\r\n      UpEquilibrium: '\\u296E',\r\n      upharpoonleft: '\\u21BF',\r\n      upharpoonright: '\\u21BE',\r\n      uplus: '\\u228E',\r\n      UpperLeftArrow: '\\u2196',\r\n      UpperRightArrow: '\\u2197',\r\n      Upsi: '\\u03D2',\r\n      upsi: '\\u03C5',\r\n      upsih: '\\u03D2',\r\n      Upsilon: '\\u03A5',\r\n      upsilon: '\\u03C5',\r\n      UpTee: '\\u22A5',\r\n      UpTeeArrow: '\\u21A5',\r\n      upuparrows: '\\u21C8',\r\n      urcorn: '\\u231D',\r\n      urcorner: '\\u231D',\r\n      urcrop: '\\u230E',\r\n      Uring: '\\u016E',\r\n      uring: '\\u016F',\r\n      urtri: '\\u25F9',\r\n      Uscr: '\\uD835\\uDCB0',\r\n      uscr: '\\uD835\\uDCCA',\r\n      utdot: '\\u22F0',\r\n      Utilde: '\\u0168',\r\n      utilde: '\\u0169',\r\n      utri: '\\u25B5',\r\n      utrif: '\\u25B4',\r\n      uuarr: '\\u21C8',\r\n      Uuml: '\\u00DC',\r\n      uuml: '\\u00FC',\r\n      uwangle: '\\u29A7',\r\n      vangrt: '\\u299C',\r\n      varepsilon: '\\u03F5',\r\n      varkappa: '\\u03F0',\r\n      varnothing: '\\u2205',\r\n      varphi: '\\u03D5',\r\n      varpi: '\\u03D6',\r\n      varpropto: '\\u221D',\r\n      vArr: '\\u21D5',\r\n      varr: '\\u2195',\r\n      varrho: '\\u03F1',\r\n      varsigma: '\\u03C2',\r\n      varsubsetneq: '\\u228A\\uFE00',\r\n      varsubsetneqq: '\\u2ACB\\uFE00',\r\n      varsupsetneq: '\\u228B\\uFE00',\r\n      varsupsetneqq: '\\u2ACC\\uFE00',\r\n      vartheta: '\\u03D1',\r\n      vartriangleleft: '\\u22B2',\r\n      vartriangleright: '\\u22B3',\r\n      Vbar: '\\u2AEB',\r\n      vBar: '\\u2AE8',\r\n      vBarv: '\\u2AE9',\r\n      Vcy: '\\u0412',\r\n      vcy: '\\u0432',\r\n      VDash: '\\u22AB',\r\n      Vdash: '\\u22A9',\r\n      vDash: '\\u22A8',\r\n      vdash: '\\u22A2',\r\n      Vdashl: '\\u2AE6',\r\n      Vee: '\\u22C1',\r\n      vee: '\\u2228',\r\n      veebar: '\\u22BB',\r\n      veeeq: '\\u225A',\r\n      vellip: '\\u22EE',\r\n      Verbar: '\\u2016',\r\n      verbar: '\\u007C',\r\n      Vert: '\\u2016',\r\n      vert: '\\u007C',\r\n      VerticalBar: '\\u2223',\r\n      VerticalLine: '\\u007C',\r\n      VerticalSeparator: '\\u2758',\r\n      VerticalTilde: '\\u2240',\r\n      VeryThinSpace: '\\u200A',\r\n      Vfr: '\\uD835\\uDD19',\r\n      vfr: '\\uD835\\uDD33',\r\n      vltri: '\\u22B2',\r\n      vnsub: '\\u2282\\u20D2',\r\n      vnsup: '\\u2283\\u20D2',\r\n      Vopf: '\\uD835\\uDD4D',\r\n      vopf: '\\uD835\\uDD67',\r\n      vprop: '\\u221D',\r\n      vrtri: '\\u22B3',\r\n      Vscr: '\\uD835\\uDCB1',\r\n      vscr: '\\uD835\\uDCCB',\r\n      vsubnE: '\\u2ACB\\uFE00',\r\n      vsubne: '\\u228A\\uFE00',\r\n      vsupnE: '\\u2ACC\\uFE00',\r\n      vsupne: '\\u228B\\uFE00',\r\n      Vvdash: '\\u22AA',\r\n      vzigzag: '\\u299A',\r\n      Wcirc: '\\u0174',\r\n      wcirc: '\\u0175',\r\n      wedbar: '\\u2A5F',\r\n      Wedge: '\\u22C0',\r\n      wedge: '\\u2227',\r\n      wedgeq: '\\u2259',\r\n      weierp: '\\u2118',\r\n      Wfr: '\\uD835\\uDD1A',\r\n      wfr: '\\uD835\\uDD34',\r\n      Wopf: '\\uD835\\uDD4E',\r\n      wopf: '\\uD835\\uDD68',\r\n      wp: '\\u2118',\r\n      wr: '\\u2240',\r\n      wreath: '\\u2240',\r\n      Wscr: '\\uD835\\uDCB2',\r\n      wscr: '\\uD835\\uDCCC',\r\n      xcap: '\\u22C2',\r\n      xcirc: '\\u25EF',\r\n      xcup: '\\u22C3',\r\n      xdtri: '\\u25BD',\r\n      Xfr: '\\uD835\\uDD1B',\r\n      xfr: '\\uD835\\uDD35',\r\n      xhArr: '\\u27FA',\r\n      xharr: '\\u27F7',\r\n      Xi: '\\u039E',\r\n      xi: '\\u03BE',\r\n      xlArr: '\\u27F8',\r\n      xlarr: '\\u27F5',\r\n      xmap: '\\u27FC',\r\n      xnis: '\\u22FB',\r\n      xodot: '\\u2A00',\r\n      Xopf: '\\uD835\\uDD4F',\r\n      xopf: '\\uD835\\uDD69',\r\n      xoplus: '\\u2A01',\r\n      xotime: '\\u2A02',\r\n      xrArr: '\\u27F9',\r\n      xrarr: '\\u27F6',\r\n      Xscr: '\\uD835\\uDCB3',\r\n      xscr: '\\uD835\\uDCCD',\r\n      xsqcup: '\\u2A06',\r\n      xuplus: '\\u2A04',\r\n      xutri: '\\u25B3',\r\n      xvee: '\\u22C1',\r\n      xwedge: '\\u22C0',\r\n      Yacute: '\\u00DD',\r\n      yacute: '\\u00FD',\r\n      YAcy: '\\u042F',\r\n      yacy: '\\u044F',\r\n      Ycirc: '\\u0176',\r\n      ycirc: '\\u0177',\r\n      Ycy: '\\u042B',\r\n      ycy: '\\u044B',\r\n      yen: '\\u00A5',\r\n      Yfr: '\\uD835\\uDD1C',\r\n      yfr: '\\uD835\\uDD36',\r\n      YIcy: '\\u0407',\r\n      yicy: '\\u0457',\r\n      Yopf: '\\uD835\\uDD50',\r\n      yopf: '\\uD835\\uDD6A',\r\n      Yscr: '\\uD835\\uDCB4',\r\n      yscr: '\\uD835\\uDCCE',\r\n      YUcy: '\\u042E',\r\n      yucy: '\\u044E',\r\n      Yuml: '\\u0178',\r\n      yuml: '\\u00FF',\r\n      Zacute: '\\u0179',\r\n      zacute: '\\u017A',\r\n      Zcaron: '\\u017D',\r\n      zcaron: '\\u017E',\r\n      Zcy: '\\u0417',\r\n      zcy: '\\u0437',\r\n      Zdot: '\\u017B',\r\n      zdot: '\\u017C',\r\n      zeetrf: '\\u2128',\r\n      ZeroWidthSpace: '\\u200B',\r\n      Zeta: '\\u0396',\r\n      zeta: '\\u03B6',\r\n      Zfr: '\\u2128',\r\n      zfr: '\\uD835\\uDD37',\r\n      ZHcy: '\\u0416',\r\n      zhcy: '\\u0436',\r\n      zigrarr: '\\u21DD',\r\n      Zopf: '\\u2124',\r\n      zopf: '\\uD835\\uDD6B',\r\n      Zscr: '\\uD835\\uDCB5',\r\n      zscr: '\\uD835\\uDCCF',\r\n      zwj: '\\u200D',\r\n      zwnj: '\\u200C'\r\n    });\r\n\r\n    /**\r\n     * @deprecated use `HTML_ENTITIES` instead\r\n     * @see HTML_ENTITIES\r\n     */\r\n    exports.entityMap = exports.HTML_ENTITIES;\r\n  });\r\n  entities.XML_ENTITIES;\r\n  entities.HTML_ENTITIES;\r\n  entities.entityMap;\r\n\r\n  var NAMESPACE$1 = conventions.NAMESPACE;\r\n\r\n  //[4]   \tNameStartChar\t   ::=   \t\":\" | [A-Z] | \"_\" | [a-z] | [#xC0-#xD6] | [#xD8-#xF6] | [#xF8-#x2FF] | [#x370-#x37D] | [#x37F-#x1FFF] | [#x200C-#x200D] | [#x2070-#x218F] | [#x2C00-#x2FEF] | [#x3001-#xD7FF] | [#xF900-#xFDCF] | [#xFDF0-#xFFFD] | [#x10000-#xEFFFF]\r\n  //[4a]   \tNameChar\t   ::=   \tNameStartChar | \"-\" | \".\" | [0-9] | #xB7 | [#x0300-#x036F] | [#x203F-#x2040]\r\n  //[5]   \tName\t   ::=   \tNameStartChar (NameChar)*\r\n  var nameStartChar = /[A-Z_a-z\\xC0-\\xD6\\xD8-\\xF6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD]/; //\\u10000-\\uEFFFF\r\n  var nameChar = new RegExp(\"[\\\\-\\\\.0-9\" + nameStartChar.source.slice(1, -1) + \"\\\\u00B7\\\\u0300-\\\\u036F\\\\u203F-\\\\u2040]\");\r\n  var tagNamePattern = new RegExp('^' + nameStartChar.source + nameChar.source + '*(?:\\:' + nameStartChar.source + nameChar.source + '*)?$');\r\n  //var tagNamePattern = /^[a-zA-Z_][\\w\\-\\.]*(?:\\:[a-zA-Z_][\\w\\-\\.]*)?$/\r\n  //var handlers = 'resolveEntity,getExternalSubset,characters,endDocument,endElement,endPrefixMapping,ignorableWhitespace,processingInstruction,setDocumentLocator,skippedEntity,startDocument,startElement,startPrefixMapping,notationDecl,unparsedEntityDecl,error,fatalError,warning,attributeDecl,elementDecl,externalEntityDecl,internalEntityDecl,comment,endCDATA,endDTD,endEntity,startCDATA,startDTD,startEntity'.split(',')\r\n\r\n  //S_TAG,\tS_ATTR,\tS_EQ,\tS_ATTR_NOQUOT_VALUE\r\n  //S_ATTR_SPACE,\tS_ATTR_END,\tS_TAG_SPACE, S_TAG_CLOSE\r\n  var S_TAG = 0; //tag name offerring\r\n  var S_ATTR = 1; //attr name offerring\r\n  var S_ATTR_SPACE = 2; //attr name end and space offer\r\n  var S_EQ = 3; //=space?\r\n  var S_ATTR_NOQUOT_VALUE = 4; //attr value(no quot value only)\r\n  var S_ATTR_END = 5; //attr value end and no space(quot end)\r\n  var S_TAG_SPACE = 6; //(attr value end || tag end ) && (space offer)\r\n  var S_TAG_CLOSE = 7; //closed el<el />\r\n\r\n  /**\r\n   * Creates an error that will not be caught by XMLReader aka the SAX parser.\r\n   *\r\n   * @param {string} message\r\n   * @param {any?} locator Optional, can provide details about the location in the source\r\n   * @constructor\r\n   */\r\n  function ParseError$1(message, locator) {\r\n    this.message = message;\r\n    this.locator = locator;\r\n    if (Error.captureStackTrace) Error.captureStackTrace(this, ParseError$1);\r\n  }\r\n  ParseError$1.prototype = new Error();\r\n  ParseError$1.prototype.name = ParseError$1.name;\r\n  function XMLReader$1() {}\r\n  XMLReader$1.prototype = {\r\n    parse: function (source, defaultNSMap, entityMap) {\r\n      var domBuilder = this.domBuilder;\r\n      domBuilder.startDocument();\r\n      _copy(defaultNSMap, defaultNSMap = {});\r\n      parse$1(source, defaultNSMap, entityMap, domBuilder, this.errorHandler);\r\n      domBuilder.endDocument();\r\n    }\r\n  };\r\n  function parse$1(source, defaultNSMapCopy, entityMap, domBuilder, errorHandler) {\r\n    function fixedFromCharCode(code) {\r\n      // String.prototype.fromCharCode does not supports\r\n      // > 2 bytes unicode chars directly\r\n      if (code > 0xffff) {\r\n        code -= 0x10000;\r\n        var surrogate1 = 0xd800 + (code >> 10),\r\n          surrogate2 = 0xdc00 + (code & 0x3ff);\r\n        return String.fromCharCode(surrogate1, surrogate2);\r\n      } else {\r\n        return String.fromCharCode(code);\r\n      }\r\n    }\r\n    function entityReplacer(a) {\r\n      var k = a.slice(1, -1);\r\n      if (Object.hasOwnProperty.call(entityMap, k)) {\r\n        return entityMap[k];\r\n      } else if (k.charAt(0) === '#') {\r\n        return fixedFromCharCode(parseInt(k.substr(1).replace('x', '0x')));\r\n      } else {\r\n        errorHandler.error('entity not found:' + a);\r\n        return a;\r\n      }\r\n    }\r\n    function appendText(end) {\r\n      //has some bugs\r\n      if (end > start) {\r\n        var xt = source.substring(start, end).replace(/&#?\\w+;/g, entityReplacer);\r\n        locator && position(start);\r\n        domBuilder.characters(xt, 0, end - start);\r\n        start = end;\r\n      }\r\n    }\r\n    function position(p, m) {\r\n      while (p >= lineEnd && (m = linePattern.exec(source))) {\r\n        lineStart = m.index;\r\n        lineEnd = lineStart + m[0].length;\r\n        locator.lineNumber++;\r\n        //console.log('line++:',locator,startPos,endPos)\r\n      }\r\n      locator.columnNumber = p - lineStart + 1;\r\n    }\r\n    var lineStart = 0;\r\n    var lineEnd = 0;\r\n    var linePattern = /.*(?:\\r\\n?|\\n)|.*$/g;\r\n    var locator = domBuilder.locator;\r\n    var parseStack = [{\r\n      currentNSMap: defaultNSMapCopy\r\n    }];\r\n    var closeMap = {};\r\n    var start = 0;\r\n    while (true) {\r\n      try {\r\n        var tagStart = source.indexOf('<', start);\r\n        if (tagStart < 0) {\r\n          if (!source.substr(start).match(/^\\s*$/)) {\r\n            var doc = domBuilder.doc;\r\n            var text = doc.createTextNode(source.substr(start));\r\n            doc.appendChild(text);\r\n            domBuilder.currentElement = text;\r\n          }\r\n          return;\r\n        }\r\n        if (tagStart > start) {\r\n          appendText(tagStart);\r\n        }\r\n        switch (source.charAt(tagStart + 1)) {\r\n          case '/':\r\n            var end = source.indexOf('>', tagStart + 3);\r\n            var tagName = source.substring(tagStart + 2, end).replace(/[ \\t\\n\\r]+$/g, '');\r\n            var config = parseStack.pop();\r\n            if (end < 0) {\r\n              tagName = source.substring(tagStart + 2).replace(/[\\s<].*/, '');\r\n              errorHandler.error(\"end tag name: \" + tagName + ' is not complete:' + config.tagName);\r\n              end = tagStart + 1 + tagName.length;\r\n            } else if (tagName.match(/\\s</)) {\r\n              tagName = tagName.replace(/[\\s<].*/, '');\r\n              errorHandler.error(\"end tag name: \" + tagName + ' maybe not complete');\r\n              end = tagStart + 1 + tagName.length;\r\n            }\r\n            var localNSMap = config.localNSMap;\r\n            var endMatch = config.tagName == tagName;\r\n            var endIgnoreCaseMach = endMatch || config.tagName && config.tagName.toLowerCase() == tagName.toLowerCase();\r\n            if (endIgnoreCaseMach) {\r\n              domBuilder.endElement(config.uri, config.localName, tagName);\r\n              if (localNSMap) {\r\n                for (var prefix in localNSMap) {\r\n                  if (Object.prototype.hasOwnProperty.call(localNSMap, prefix)) {\r\n                    domBuilder.endPrefixMapping(prefix);\r\n                  }\r\n                }\r\n              }\r\n              if (!endMatch) {\r\n                errorHandler.fatalError(\"end tag name: \" + tagName + ' is not match the current start tagName:' + config.tagName); // No known test case\r\n              }\r\n            } else {\r\n              parseStack.push(config);\r\n            }\r\n            end++;\r\n            break;\r\n          // end elment\r\n          case '?':\r\n            // <?...?>\r\n            locator && position(tagStart);\r\n            end = parseInstruction(source, tagStart, domBuilder);\r\n            break;\r\n          case '!':\r\n            // <!doctype,<![CDATA,<!--\r\n            locator && position(tagStart);\r\n            end = parseDCC(source, tagStart, domBuilder, errorHandler);\r\n            break;\r\n          default:\r\n            locator && position(tagStart);\r\n            var el = new ElementAttributes();\r\n            var currentNSMap = parseStack[parseStack.length - 1].currentNSMap;\r\n            //elStartEnd\r\n            var end = parseElementStartPart(source, tagStart, el, currentNSMap, entityReplacer, errorHandler);\r\n            var len = el.length;\r\n            if (!el.closed && fixSelfClosed(source, end, el.tagName, closeMap)) {\r\n              el.closed = true;\r\n              if (!entityMap.nbsp) {\r\n                errorHandler.warning('unclosed xml attribute');\r\n              }\r\n            }\r\n            if (locator && len) {\r\n              var locator2 = copyLocator(locator, {});\r\n              //try{//attribute position fixed\r\n              for (var i = 0; i < len; i++) {\r\n                var a = el[i];\r\n                position(a.offset);\r\n                a.locator = copyLocator(locator, {});\r\n              }\r\n              domBuilder.locator = locator2;\r\n              if (appendElement$1(el, domBuilder, currentNSMap)) {\r\n                parseStack.push(el);\r\n              }\r\n              domBuilder.locator = locator;\r\n            } else {\r\n              if (appendElement$1(el, domBuilder, currentNSMap)) {\r\n                parseStack.push(el);\r\n              }\r\n            }\r\n            if (NAMESPACE$1.isHTML(el.uri) && !el.closed) {\r\n              end = parseHtmlSpecialContent(source, end, el.tagName, entityReplacer, domBuilder);\r\n            } else {\r\n              end++;\r\n            }\r\n        }\r\n      } catch (e) {\r\n        if (e instanceof ParseError$1) {\r\n          throw e;\r\n        }\r\n        errorHandler.error('element parse error: ' + e);\r\n        end = -1;\r\n      }\r\n      if (end > start) {\r\n        start = end;\r\n      } else {\r\n        //TODO: 这里有可能sax回退，有位置错误风险\r\n        appendText(Math.max(tagStart, start) + 1);\r\n      }\r\n    }\r\n  }\r\n  function copyLocator(f, t) {\r\n    t.lineNumber = f.lineNumber;\r\n    t.columnNumber = f.columnNumber;\r\n    return t;\r\n  }\r\n\r\n  /**\r\n   * @see #appendElement(source,elStartEnd,el,selfClosed,entityReplacer,domBuilder,parseStack);\r\n   * @return end of the elementStartPart(end of elementEndPart for selfClosed el)\r\n   */\r\n  function parseElementStartPart(source, start, el, currentNSMap, entityReplacer, errorHandler) {\r\n    /**\r\n     * @param {string} qname\r\n     * @param {string} value\r\n     * @param {number} startIndex\r\n     */\r\n    function addAttribute(qname, value, startIndex) {\r\n      if (el.attributeNames.hasOwnProperty(qname)) {\r\n        errorHandler.fatalError('Attribute ' + qname + ' redefined');\r\n      }\r\n      el.addValue(qname,\r\n      // @see https://www.w3.org/TR/xml/#AVNormalize\r\n      // since the xmldom sax parser does not \"interpret\" DTD the following is not implemented:\r\n      // - recursive replacement of (DTD) entity references\r\n      // - trimming and collapsing multiple spaces into a single one for attributes that are not of type CDATA\r\n      value.replace(/[\\t\\n\\r]/g, ' ').replace(/&#?\\w+;/g, entityReplacer), startIndex);\r\n    }\r\n    var attrName;\r\n    var value;\r\n    var p = ++start;\r\n    var s = S_TAG; //status\r\n    while (true) {\r\n      var c = source.charAt(p);\r\n      switch (c) {\r\n        case '=':\r\n          if (s === S_ATTR) {\r\n            //attrName\r\n            attrName = source.slice(start, p);\r\n            s = S_EQ;\r\n          } else if (s === S_ATTR_SPACE) {\r\n            s = S_EQ;\r\n          } else {\r\n            //fatalError: equal must after attrName or space after attrName\r\n            throw new Error('attribute equal must after attrName'); // No known test case\r\n          }\r\n          break;\r\n        case '\\'':\r\n        case '\"':\r\n          if (s === S_EQ || s === S_ATTR //|| s == S_ATTR_SPACE\r\n          ) {\r\n            //equal\r\n            if (s === S_ATTR) {\r\n              errorHandler.warning('attribute value must after \"=\"');\r\n              attrName = source.slice(start, p);\r\n            }\r\n            start = p + 1;\r\n            p = source.indexOf(c, start);\r\n            if (p > 0) {\r\n              value = source.slice(start, p);\r\n              addAttribute(attrName, value, start - 1);\r\n              s = S_ATTR_END;\r\n            } else {\r\n              //fatalError: no end quot match\r\n              throw new Error('attribute value no end \\'' + c + '\\' match');\r\n            }\r\n          } else if (s == S_ATTR_NOQUOT_VALUE) {\r\n            value = source.slice(start, p);\r\n            addAttribute(attrName, value, start);\r\n            errorHandler.warning('attribute \"' + attrName + '\" missed start quot(' + c + ')!!');\r\n            start = p + 1;\r\n            s = S_ATTR_END;\r\n          } else {\r\n            //fatalError: no equal before\r\n            throw new Error('attribute value must after \"=\"'); // No known test case\r\n          }\r\n          break;\r\n        case '/':\r\n          switch (s) {\r\n            case S_TAG:\r\n              el.setTagName(source.slice(start, p));\r\n            case S_ATTR_END:\r\n            case S_TAG_SPACE:\r\n            case S_TAG_CLOSE:\r\n              s = S_TAG_CLOSE;\r\n              el.closed = true;\r\n            case S_ATTR_NOQUOT_VALUE:\r\n            case S_ATTR:\r\n              break;\r\n            case S_ATTR_SPACE:\r\n              el.closed = true;\r\n              break;\r\n            //case S_EQ:\r\n            default:\r\n              throw new Error(\"attribute invalid close char('/')\");\r\n            // No known test case\r\n          }\r\n          break;\r\n        case '':\r\n          //end document\r\n          errorHandler.error('unexpected end of input');\r\n          if (s == S_TAG) {\r\n            el.setTagName(source.slice(start, p));\r\n          }\r\n          return p;\r\n        case '>':\r\n          switch (s) {\r\n            case S_TAG:\r\n              el.setTagName(source.slice(start, p));\r\n            case S_ATTR_END:\r\n            case S_TAG_SPACE:\r\n            case S_TAG_CLOSE:\r\n              break;\r\n            //normal\r\n            case S_ATTR_NOQUOT_VALUE: //Compatible state\r\n            case S_ATTR:\r\n              value = source.slice(start, p);\r\n              if (value.slice(-1) === '/') {\r\n                el.closed = true;\r\n                value = value.slice(0, -1);\r\n              }\r\n            case S_ATTR_SPACE:\r\n              if (s === S_ATTR_SPACE) {\r\n                value = attrName;\r\n              }\r\n              if (s == S_ATTR_NOQUOT_VALUE) {\r\n                errorHandler.warning('attribute \"' + value + '\" missed quot(\")!');\r\n                addAttribute(attrName, value, start);\r\n              } else {\r\n                if (!NAMESPACE$1.isHTML(currentNSMap['']) || !value.match(/^(?:disabled|checked|selected)$/i)) {\r\n                  errorHandler.warning('attribute \"' + value + '\" missed value!! \"' + value + '\" instead!!');\r\n                }\r\n                addAttribute(value, value, start);\r\n              }\r\n              break;\r\n            case S_EQ:\r\n              throw new Error('attribute value missed!!');\r\n          }\r\n          //\t\t\tconsole.log(tagName,tagNamePattern,tagNamePattern.test(tagName))\r\n          return p;\r\n        /*xml space '\\x20' | #x9 | #xD | #xA; */\r\n        case '\\u0080':\r\n          c = ' ';\r\n        default:\r\n          if (c <= ' ') {\r\n            //space\r\n            switch (s) {\r\n              case S_TAG:\r\n                el.setTagName(source.slice(start, p)); //tagName\r\n                s = S_TAG_SPACE;\r\n                break;\r\n              case S_ATTR:\r\n                attrName = source.slice(start, p);\r\n                s = S_ATTR_SPACE;\r\n                break;\r\n              case S_ATTR_NOQUOT_VALUE:\r\n                var value = source.slice(start, p);\r\n                errorHandler.warning('attribute \"' + value + '\" missed quot(\")!!');\r\n                addAttribute(attrName, value, start);\r\n              case S_ATTR_END:\r\n                s = S_TAG_SPACE;\r\n                break;\r\n              //case S_TAG_SPACE:\r\n              //case S_EQ:\r\n              //case S_ATTR_SPACE:\r\n              //\tvoid();break;\r\n              //case S_TAG_CLOSE:\r\n              //ignore warning\r\n            }\r\n          } else {\r\n            //not space\r\n            //S_TAG,\tS_ATTR,\tS_EQ,\tS_ATTR_NOQUOT_VALUE\r\n            //S_ATTR_SPACE,\tS_ATTR_END,\tS_TAG_SPACE, S_TAG_CLOSE\r\n            switch (s) {\r\n              //case S_TAG:void();break;\r\n              //case S_ATTR:void();break;\r\n              //case S_ATTR_NOQUOT_VALUE:void();break;\r\n              case S_ATTR_SPACE:\r\n                el.tagName;\r\n                if (!NAMESPACE$1.isHTML(currentNSMap['']) || !attrName.match(/^(?:disabled|checked|selected)$/i)) {\r\n                  errorHandler.warning('attribute \"' + attrName + '\" missed value!! \"' + attrName + '\" instead2!!');\r\n                }\r\n                addAttribute(attrName, attrName, start);\r\n                start = p;\r\n                s = S_ATTR;\r\n                break;\r\n              case S_ATTR_END:\r\n                errorHandler.warning('attribute space is required\"' + attrName + '\"!!');\r\n              case S_TAG_SPACE:\r\n                s = S_ATTR;\r\n                start = p;\r\n                break;\r\n              case S_EQ:\r\n                s = S_ATTR_NOQUOT_VALUE;\r\n                start = p;\r\n                break;\r\n              case S_TAG_CLOSE:\r\n                throw new Error(\"elements closed character '/' and '>' must be connected to\");\r\n            }\r\n          }\r\n      } //end outer switch\r\n      //console.log('p++',p)\r\n      p++;\r\n    }\r\n  }\r\n  /**\r\n   * @return true if has new namespace define\r\n   */\r\n  function appendElement$1(el, domBuilder, currentNSMap) {\r\n    var tagName = el.tagName;\r\n    var localNSMap = null;\r\n    //var currentNSMap = parseStack[parseStack.length-1].currentNSMap;\r\n    var i = el.length;\r\n    while (i--) {\r\n      var a = el[i];\r\n      var qName = a.qName;\r\n      var value = a.value;\r\n      var nsp = qName.indexOf(':');\r\n      if (nsp > 0) {\r\n        var prefix = a.prefix = qName.slice(0, nsp);\r\n        var localName = qName.slice(nsp + 1);\r\n        var nsPrefix = prefix === 'xmlns' && localName;\r\n      } else {\r\n        localName = qName;\r\n        prefix = null;\r\n        nsPrefix = qName === 'xmlns' && '';\r\n      }\r\n      //can not set prefix,because prefix !== ''\r\n      a.localName = localName;\r\n      //prefix == null for no ns prefix attribute\r\n      if (nsPrefix !== false) {\r\n        //hack!!\r\n        if (localNSMap == null) {\r\n          localNSMap = {};\r\n          //console.log(currentNSMap,0)\r\n          _copy(currentNSMap, currentNSMap = {});\r\n          //console.log(currentNSMap,1)\r\n        }\r\n        currentNSMap[nsPrefix] = localNSMap[nsPrefix] = value;\r\n        a.uri = NAMESPACE$1.XMLNS;\r\n        domBuilder.startPrefixMapping(nsPrefix, value);\r\n      }\r\n    }\r\n    var i = el.length;\r\n    while (i--) {\r\n      a = el[i];\r\n      var prefix = a.prefix;\r\n      if (prefix) {\r\n        //no prefix attribute has no namespace\r\n        if (prefix === 'xml') {\r\n          a.uri = NAMESPACE$1.XML;\r\n        }\r\n        if (prefix !== 'xmlns') {\r\n          a.uri = currentNSMap[prefix || ''];\r\n\r\n          //{console.log('###'+a.qName,domBuilder.locator.systemId+'',currentNSMap,a.uri)}\r\n        }\r\n      }\r\n    }\r\n    var nsp = tagName.indexOf(':');\r\n    if (nsp > 0) {\r\n      prefix = el.prefix = tagName.slice(0, nsp);\r\n      localName = el.localName = tagName.slice(nsp + 1);\r\n    } else {\r\n      prefix = null; //important!!\r\n      localName = el.localName = tagName;\r\n    }\r\n    //no prefix element has default namespace\r\n    var ns = el.uri = currentNSMap[prefix || ''];\r\n    domBuilder.startElement(ns, localName, tagName, el);\r\n    //endPrefixMapping and startPrefixMapping have not any help for dom builder\r\n    //localNSMap = null\r\n    if (el.closed) {\r\n      domBuilder.endElement(ns, localName, tagName);\r\n      if (localNSMap) {\r\n        for (prefix in localNSMap) {\r\n          if (Object.prototype.hasOwnProperty.call(localNSMap, prefix)) {\r\n            domBuilder.endPrefixMapping(prefix);\r\n          }\r\n        }\r\n      }\r\n    } else {\r\n      el.currentNSMap = currentNSMap;\r\n      el.localNSMap = localNSMap;\r\n      //parseStack.push(el);\r\n      return true;\r\n    }\r\n  }\r\n  function parseHtmlSpecialContent(source, elStartEnd, tagName, entityReplacer, domBuilder) {\r\n    if (/^(?:script|textarea)$/i.test(tagName)) {\r\n      var elEndStart = source.indexOf('</' + tagName + '>', elStartEnd);\r\n      var text = source.substring(elStartEnd + 1, elEndStart);\r\n      if (/[&<]/.test(text)) {\r\n        if (/^script$/i.test(tagName)) {\r\n          //if(!/\\]\\]>/.test(text)){\r\n          //lexHandler.startCDATA();\r\n          domBuilder.characters(text, 0, text.length);\r\n          //lexHandler.endCDATA();\r\n          return elEndStart;\r\n          //}\r\n        } //}else{//text area\r\n        text = text.replace(/&#?\\w+;/g, entityReplacer);\r\n        domBuilder.characters(text, 0, text.length);\r\n        return elEndStart;\r\n        //}\r\n      }\r\n    }\r\n    return elStartEnd + 1;\r\n  }\r\n  function fixSelfClosed(source, elStartEnd, tagName, closeMap) {\r\n    //if(tagName in closeMap){\r\n    var pos = closeMap[tagName];\r\n    if (pos == null) {\r\n      //console.log(tagName)\r\n      pos = source.lastIndexOf('</' + tagName + '>');\r\n      if (pos < elStartEnd) {\r\n        //忘记闭合\r\n        pos = source.lastIndexOf('</' + tagName);\r\n      }\r\n      closeMap[tagName] = pos;\r\n    }\r\n    return pos < elStartEnd;\r\n    //}\r\n  }\r\n  function _copy(source, target) {\r\n    for (var n in source) {\r\n      if (Object.prototype.hasOwnProperty.call(source, n)) {\r\n        target[n] = source[n];\r\n      }\r\n    }\r\n  }\r\n  function parseDCC(source, start, domBuilder, errorHandler) {\r\n    //sure start with '<!'\r\n    var next = source.charAt(start + 2);\r\n    switch (next) {\r\n      case '-':\r\n        if (source.charAt(start + 3) === '-') {\r\n          var end = source.indexOf('-->', start + 4);\r\n          //append comment source.substring(4,end)//<!--\r\n          if (end > start) {\r\n            domBuilder.comment(source, start + 4, end - start - 4);\r\n            return end + 3;\r\n          } else {\r\n            errorHandler.error(\"Unclosed comment\");\r\n            return -1;\r\n          }\r\n        } else {\r\n          //error\r\n          return -1;\r\n        }\r\n      default:\r\n        if (source.substr(start + 3, 6) == 'CDATA[') {\r\n          var end = source.indexOf(']]>', start + 9);\r\n          domBuilder.startCDATA();\r\n          domBuilder.characters(source, start + 9, end - start - 9);\r\n          domBuilder.endCDATA();\r\n          return end + 3;\r\n        }\r\n        //<!DOCTYPE\r\n        //startDTD(java.lang.String name, java.lang.String publicId, java.lang.String systemId)\r\n        var matchs = split(source, start);\r\n        var len = matchs.length;\r\n        if (len > 1 && /!doctype/i.test(matchs[0][0])) {\r\n          var name = matchs[1][0];\r\n          var pubid = false;\r\n          var sysid = false;\r\n          if (len > 3) {\r\n            if (/^public$/i.test(matchs[2][0])) {\r\n              pubid = matchs[3][0];\r\n              sysid = len > 4 && matchs[4][0];\r\n            } else if (/^system$/i.test(matchs[2][0])) {\r\n              sysid = matchs[3][0];\r\n            }\r\n          }\r\n          var lastMatch = matchs[len - 1];\r\n          domBuilder.startDTD(name, pubid, sysid);\r\n          domBuilder.endDTD();\r\n          return lastMatch.index + lastMatch[0].length;\r\n        }\r\n    }\r\n    return -1;\r\n  }\r\n  function parseInstruction(source, start, domBuilder) {\r\n    var end = source.indexOf('?>', start);\r\n    if (end) {\r\n      var match = source.substring(start, end).match(/^<\\?(\\S*)\\s*([\\s\\S]*?)\\s*$/);\r\n      if (match) {\r\n        match[0].length;\r\n        domBuilder.processingInstruction(match[1], match[2]);\r\n        return end + 2;\r\n      } else {\r\n        //error\r\n        return -1;\r\n      }\r\n    }\r\n    return -1;\r\n  }\r\n  function ElementAttributes() {\r\n    this.attributeNames = {};\r\n  }\r\n  ElementAttributes.prototype = {\r\n    setTagName: function (tagName) {\r\n      if (!tagNamePattern.test(tagName)) {\r\n        throw new Error('invalid tagName:' + tagName);\r\n      }\r\n      this.tagName = tagName;\r\n    },\r\n    addValue: function (qName, value, offset) {\r\n      if (!tagNamePattern.test(qName)) {\r\n        throw new Error('invalid attribute:' + qName);\r\n      }\r\n      this.attributeNames[qName] = this.length;\r\n      this[this.length++] = {\r\n        qName: qName,\r\n        value: value,\r\n        offset: offset\r\n      };\r\n    },\r\n    length: 0,\r\n    getLocalName: function (i) {\r\n      return this[i].localName;\r\n    },\r\n    getLocator: function (i) {\r\n      return this[i].locator;\r\n    },\r\n    getQName: function (i) {\r\n      return this[i].qName;\r\n    },\r\n    getURI: function (i) {\r\n      return this[i].uri;\r\n    },\r\n    getValue: function (i) {\r\n      return this[i].value;\r\n    }\r\n    //\t,getIndex:function(uri, localName)){\r\n    //\t\tif(localName){\r\n    //\r\n    //\t\t}else{\r\n    //\t\t\tvar qName = uri\r\n    //\t\t}\r\n    //\t},\r\n    //\tgetValue:function(){return this.getValue(this.getIndex.apply(this,arguments))},\r\n    //\tgetType:function(uri,localName){}\r\n    //\tgetType:function(i){},\r\n  };\r\n  function split(source, start) {\r\n    var match;\r\n    var buf = [];\r\n    var reg = /'[^']+'|\"[^\"]+\"|[^\\s<>\\/=]+=?|(\\/?\\s*>|<)/g;\r\n    reg.lastIndex = start;\r\n    reg.exec(source); //skip <\r\n    while (match = reg.exec(source)) {\r\n      buf.push(match);\r\n      if (match[1]) return buf;\r\n    }\r\n  }\r\n  var XMLReader_1 = XMLReader$1;\r\n  var ParseError_1 = ParseError$1;\r\n  var sax = {\r\n    XMLReader: XMLReader_1,\r\n    ParseError: ParseError_1\r\n  };\r\n\r\n  var DOMImplementation = dom.DOMImplementation;\r\n  var NAMESPACE = conventions.NAMESPACE;\r\n  var ParseError = sax.ParseError;\r\n  var XMLReader = sax.XMLReader;\r\n\r\n  /**\r\n   * Normalizes line ending according to https://www.w3.org/TR/xml11/#sec-line-ends:\r\n   *\r\n   * > XML parsed entities are often stored in computer files which,\r\n   * > for editing convenience, are organized into lines.\r\n   * > These lines are typically separated by some combination\r\n   * > of the characters CARRIAGE RETURN (#xD) and LINE FEED (#xA).\r\n   * >\r\n   * > To simplify the tasks of applications, the XML processor must behave\r\n   * > as if it normalized all line breaks in external parsed entities (including the document entity)\r\n   * > on input, before parsing, by translating all of the following to a single #xA character:\r\n   * >\r\n   * > 1. the two-character sequence #xD #xA\r\n   * > 2. the two-character sequence #xD #x85\r\n   * > 3. the single character #x85\r\n   * > 4. the single character #x2028\r\n   * > 5. any #xD character that is not immediately followed by #xA or #x85.\r\n   *\r\n   * @param {string} input\r\n   * @returns {string}\r\n   */\r\n  function normalizeLineEndings(input) {\r\n    return input.replace(/\\r[\\n\\u0085]/g, '\\n').replace(/[\\r\\u0085\\u2028]/g, '\\n');\r\n  }\r\n\r\n  /**\r\n   * @typedef Locator\r\n   * @property {number} [columnNumber]\r\n   * @property {number} [lineNumber]\r\n   */\r\n\r\n  /**\r\n   * @typedef DOMParserOptions\r\n   * @property {DOMHandler} [domBuilder]\r\n   * @property {Function} [errorHandler]\r\n   * @property {(string) => string} [normalizeLineEndings] used to replace line endings before parsing\r\n   * \t\t\t\t\t\tdefaults to `normalizeLineEndings`\r\n   * @property {Locator} [locator]\r\n   * @property {Record<string, string>} [xmlns]\r\n   *\r\n   * @see normalizeLineEndings\r\n   */\r\n\r\n  /**\r\n   * The DOMParser interface provides the ability to parse XML or HTML source code\r\n   * from a string into a DOM `Document`.\r\n   *\r\n   * _xmldom is different from the spec in that it allows an `options` parameter,\r\n   * to override the default behavior._\r\n   *\r\n   * @param {DOMParserOptions} [options]\r\n   * @constructor\r\n   *\r\n   * @see https://developer.mozilla.org/en-US/docs/Web/API/DOMParser\r\n   * @see https://html.spec.whatwg.org/multipage/dynamic-markup-insertion.html#dom-parsing-and-serialization\r\n   */\r\n  function DOMParser$1(options) {\r\n    this.options = options || {\r\n      locator: {}\r\n    };\r\n  }\r\n  DOMParser$1.prototype.parseFromString = function (source, mimeType) {\r\n    var options = this.options;\r\n    var sax = new XMLReader();\r\n    var domBuilder = options.domBuilder || new DOMHandler(); //contentHandler and LexicalHandler\r\n    var errorHandler = options.errorHandler;\r\n    var locator = options.locator;\r\n    var defaultNSMap = options.xmlns || {};\r\n    var isHTML = /\\/x?html?$/.test(mimeType); //mimeType.toLowerCase().indexOf('html') > -1;\r\n    var entityMap = isHTML ? entities.HTML_ENTITIES : entities.XML_ENTITIES;\r\n    if (locator) {\r\n      domBuilder.setDocumentLocator(locator);\r\n    }\r\n    sax.errorHandler = buildErrorHandler(errorHandler, domBuilder, locator);\r\n    sax.domBuilder = options.domBuilder || domBuilder;\r\n    if (isHTML) {\r\n      defaultNSMap[''] = NAMESPACE.HTML;\r\n    }\r\n    defaultNSMap.xml = defaultNSMap.xml || NAMESPACE.XML;\r\n    var normalize = options.normalizeLineEndings || normalizeLineEndings;\r\n    if (source && typeof source === 'string') {\r\n      sax.parse(normalize(source), defaultNSMap, entityMap);\r\n    } else {\r\n      sax.errorHandler.error('invalid doc source');\r\n    }\r\n    return domBuilder.doc;\r\n  };\r\n  function buildErrorHandler(errorImpl, domBuilder, locator) {\r\n    if (!errorImpl) {\r\n      if (domBuilder instanceof DOMHandler) {\r\n        return domBuilder;\r\n      }\r\n      errorImpl = domBuilder;\r\n    }\r\n    var errorHandler = {};\r\n    var isCallback = errorImpl instanceof Function;\r\n    locator = locator || {};\r\n    function build(key) {\r\n      var fn = errorImpl[key];\r\n      if (!fn && isCallback) {\r\n        fn = errorImpl.length == 2 ? function (msg) {\r\n          errorImpl(key, msg);\r\n        } : errorImpl;\r\n      }\r\n      errorHandler[key] = fn && function (msg) {\r\n        fn('[xmldom ' + key + ']\\t' + msg + _locator(locator));\r\n      } || function () {};\r\n    }\r\n    build('warning');\r\n    build('error');\r\n    build('fatalError');\r\n    return errorHandler;\r\n  }\r\n\r\n  //console.log('#\\n\\n\\n\\n\\n\\n\\n####')\r\n  /**\r\n   * +ContentHandler+ErrorHandler\r\n   * +LexicalHandler+EntityResolver2\r\n   * -DeclHandler-DTDHandler\r\n   *\r\n   * DefaultHandler:EntityResolver, DTDHandler, ContentHandler, ErrorHandler\r\n   * DefaultHandler2:DefaultHandler,LexicalHandler, DeclHandler, EntityResolver2\r\n   * @link http://www.saxproject.org/apidoc/org/xml/sax/helpers/DefaultHandler.html\r\n   */\r\n  function DOMHandler() {\r\n    this.cdata = false;\r\n  }\r\n  function position(locator, node) {\r\n    node.lineNumber = locator.lineNumber;\r\n    node.columnNumber = locator.columnNumber;\r\n  }\r\n  /**\r\n   * @see org.xml.sax.ContentHandler#startDocument\r\n   * @link http://www.saxproject.org/apidoc/org/xml/sax/ContentHandler.html\r\n   */\r\n  DOMHandler.prototype = {\r\n    startDocument: function () {\r\n      this.doc = new DOMImplementation().createDocument(null, null, null);\r\n      if (this.locator) {\r\n        this.doc.documentURI = this.locator.systemId;\r\n      }\r\n    },\r\n    startElement: function (namespaceURI, localName, qName, attrs) {\r\n      var doc = this.doc;\r\n      var el = doc.createElementNS(namespaceURI, qName || localName);\r\n      var len = attrs.length;\r\n      appendElement(this, el);\r\n      this.currentElement = el;\r\n      this.locator && position(this.locator, el);\r\n      for (var i = 0; i < len; i++) {\r\n        var namespaceURI = attrs.getURI(i);\r\n        var value = attrs.getValue(i);\r\n        var qName = attrs.getQName(i);\r\n        var attr = doc.createAttributeNS(namespaceURI, qName);\r\n        this.locator && position(attrs.getLocator(i), attr);\r\n        attr.value = attr.nodeValue = value;\r\n        el.setAttributeNode(attr);\r\n      }\r\n    },\r\n    endElement: function (namespaceURI, localName, qName) {\r\n      var current = this.currentElement;\r\n      current.tagName;\r\n      this.currentElement = current.parentNode;\r\n    },\r\n    startPrefixMapping: function (prefix, uri) {},\r\n    endPrefixMapping: function (prefix) {},\r\n    processingInstruction: function (target, data) {\r\n      var ins = this.doc.createProcessingInstruction(target, data);\r\n      this.locator && position(this.locator, ins);\r\n      appendElement(this, ins);\r\n    },\r\n    ignorableWhitespace: function (ch, start, length) {},\r\n    characters: function (chars, start, length) {\r\n      chars = _toString.apply(this, arguments);\r\n      //console.log(chars)\r\n      if (chars) {\r\n        if (this.cdata) {\r\n          var charNode = this.doc.createCDATASection(chars);\r\n        } else {\r\n          var charNode = this.doc.createTextNode(chars);\r\n        }\r\n        if (this.currentElement) {\r\n          this.currentElement.appendChild(charNode);\r\n        } else if (/^\\s*$/.test(chars)) {\r\n          this.doc.appendChild(charNode);\r\n          //process xml\r\n        }\r\n        this.locator && position(this.locator, charNode);\r\n      }\r\n    },\r\n    skippedEntity: function (name) {},\r\n    endDocument: function () {\r\n      this.doc.normalize();\r\n    },\r\n    setDocumentLocator: function (locator) {\r\n      if (this.locator = locator) {\r\n        // && !('lineNumber' in locator)){\r\n        locator.lineNumber = 0;\r\n      }\r\n    },\r\n    //LexicalHandler\r\n    comment: function (chars, start, length) {\r\n      chars = _toString.apply(this, arguments);\r\n      var comm = this.doc.createComment(chars);\r\n      this.locator && position(this.locator, comm);\r\n      appendElement(this, comm);\r\n    },\r\n    startCDATA: function () {\r\n      //used in characters() methods\r\n      this.cdata = true;\r\n    },\r\n    endCDATA: function () {\r\n      this.cdata = false;\r\n    },\r\n    startDTD: function (name, publicId, systemId) {\r\n      var impl = this.doc.implementation;\r\n      if (impl && impl.createDocumentType) {\r\n        var dt = impl.createDocumentType(name, publicId, systemId);\r\n        this.locator && position(this.locator, dt);\r\n        appendElement(this, dt);\r\n        this.doc.doctype = dt;\r\n      }\r\n    },\r\n    /**\r\n     * @see org.xml.sax.ErrorHandler\r\n     * @link http://www.saxproject.org/apidoc/org/xml/sax/ErrorHandler.html\r\n     */\r\n    warning: function (error) {\r\n      console.warn('[xmldom warning]\\t' + error, _locator(this.locator));\r\n    },\r\n    error: function (error) {\r\n      console.error('[xmldom error]\\t' + error, _locator(this.locator));\r\n    },\r\n    fatalError: function (error) {\r\n      throw new ParseError(error, this.locator);\r\n    }\r\n  };\r\n  function _locator(l) {\r\n    if (l) {\r\n      return '\\n@' + (l.systemId || '') + '#[line:' + l.lineNumber + ',col:' + l.columnNumber + ']';\r\n    }\r\n  }\r\n  function _toString(chars, start, length) {\r\n    if (typeof chars == 'string') {\r\n      return chars.substr(start, length);\r\n    } else {\r\n      //java sax connect width xmldom on rhino(what about: \"? && !(chars instanceof String)\")\r\n      if (chars.length >= start + length || start) {\r\n        return new java.lang.String(chars, start, length) + '';\r\n      }\r\n      return chars;\r\n    }\r\n  }\r\n\r\n  /*\r\n   * @link http://www.saxproject.org/apidoc/org/xml/sax/ext/LexicalHandler.html\r\n   * used method of org.xml.sax.ext.LexicalHandler:\r\n   *  #comment(chars, start, length)\r\n   *  #startCDATA()\r\n   *  #endCDATA()\r\n   *  #startDTD(name, publicId, systemId)\r\n   *\r\n   *\r\n   * IGNORED method of org.xml.sax.ext.LexicalHandler:\r\n   *  #endDTD()\r\n   *  #startEntity(name)\r\n   *  #endEntity(name)\r\n   *\r\n   *\r\n   * @link http://www.saxproject.org/apidoc/org/xml/sax/ext/DeclHandler.html\r\n   * IGNORED method of org.xml.sax.ext.DeclHandler\r\n   * \t#attributeDecl(eName, aName, type, mode, value)\r\n   *  #elementDecl(name, model)\r\n   *  #externalEntityDecl(name, publicId, systemId)\r\n   *  #internalEntityDecl(name, value)\r\n   * @link http://www.saxproject.org/apidoc/org/xml/sax/ext/EntityResolver2.html\r\n   * IGNORED method of org.xml.sax.EntityResolver2\r\n   *  #resolveEntity(String name,String publicId,String baseURI,String systemId)\r\n   *  #resolveEntity(publicId, systemId)\r\n   *  #getExternalSubset(name, baseURI)\r\n   * @link http://www.saxproject.org/apidoc/org/xml/sax/DTDHandler.html\r\n   * IGNORED method of org.xml.sax.DTDHandler\r\n   *  #notationDecl(name, publicId, systemId) {};\r\n   *  #unparsedEntityDecl(name, publicId, systemId, notationName) {};\r\n   */\r\n  \"endDTD,startEntity,endEntity,attributeDecl,elementDecl,externalEntityDecl,internalEntityDecl,resolveEntity,getExternalSubset,notationDecl,unparsedEntityDecl\".replace(/\\w+/g, function (key) {\r\n    DOMHandler.prototype[key] = function () {\r\n      return null;\r\n    };\r\n  });\r\n\r\n  /* Private static helpers treated below as private instance methods, so don't need to add these to the public API; we might use a Relator to also get rid of non-standard public properties */\r\n  function appendElement(hander, node) {\r\n    if (!hander.currentElement) {\r\n      hander.doc.appendChild(node);\r\n    } else {\r\n      hander.currentElement.appendChild(node);\r\n    }\r\n  } //appendChild and setAttributeNS are preformance key\r\n\r\n  var __DOMHandler = DOMHandler;\r\n  var normalizeLineEndings_1 = normalizeLineEndings;\r\n  var DOMParser_1 = DOMParser$1;\r\n  var domParser = {\r\n    __DOMHandler: __DOMHandler,\r\n    normalizeLineEndings: normalizeLineEndings_1,\r\n    DOMParser: DOMParser_1\r\n  };\r\n\r\n  var DOMParser = domParser.DOMParser;\r\n\r\n  /*! @name mpd-parser @version 1.3.1 @license Apache-2.0 */\r\n  const isObject = obj => {\r\n    return !!obj && typeof obj === 'object';\r\n  };\r\n  const merge$1 = (...objects) => {\r\n    return objects.reduce((result, source) => {\r\n      if (typeof source !== 'object') {\r\n        return result;\r\n      }\r\n      Object.keys(source).forEach(key => {\r\n        if (Array.isArray(result[key]) && Array.isArray(source[key])) {\r\n          result[key] = result[key].concat(source[key]);\r\n        } else if (isObject(result[key]) && isObject(source[key])) {\r\n          result[key] = merge$1(result[key], source[key]);\r\n        } else {\r\n          result[key] = source[key];\r\n        }\r\n      });\r\n      return result;\r\n    }, {});\r\n  };\r\n  const values = o => Object.keys(o).map(k => o[k]);\r\n  const range = (start, end) => {\r\n    const result = [];\r\n    for (let i = start; i < end; i++) {\r\n      result.push(i);\r\n    }\r\n    return result;\r\n  };\r\n  const flatten = lists => lists.reduce((x, y) => x.concat(y), []);\r\n  const from = list => {\r\n    if (!list.length) {\r\n      return [];\r\n    }\r\n    const result = [];\r\n    for (let i = 0; i < list.length; i++) {\r\n      result.push(list[i]);\r\n    }\r\n    return result;\r\n  };\r\n  const findIndexes = (l, key) => l.reduce((a, e, i) => {\r\n    if (e[key]) {\r\n      a.push(i);\r\n    }\r\n    return a;\r\n  }, []);\r\n  /**\r\n   * Returns a union of the included lists provided each element can be identified by a key.\r\n   *\r\n   * @param {Array} list - list of lists to get the union of\r\n   * @param {Function} keyFunction - the function to use as a key for each element\r\n   *\r\n   * @return {Array} the union of the arrays\r\n   */\r\n\r\n  const union = (lists, keyFunction) => {\r\n    return values(lists.reduce((acc, list) => {\r\n      list.forEach(el => {\r\n        acc[keyFunction(el)] = el;\r\n      });\r\n      return acc;\r\n    }, {}));\r\n  };\r\n  var errors = {\r\n    INVALID_NUMBER_OF_PERIOD: 'INVALID_NUMBER_OF_PERIOD',\r\n    INVALID_NUMBER_OF_CONTENT_STEERING: 'INVALID_NUMBER_OF_CONTENT_STEERING',\r\n    DASH_EMPTY_MANIFEST: 'DASH_EMPTY_MANIFEST',\r\n    DASH_INVALID_XML: 'DASH_INVALID_XML',\r\n    NO_BASE_URL: 'NO_BASE_URL',\r\n    MISSING_SEGMENT_INFORMATION: 'MISSING_SEGMENT_INFORMATION',\r\n    SEGMENT_TIME_UNSPECIFIED: 'SEGMENT_TIME_UNSPECIFIED',\r\n    UNSUPPORTED_UTC_TIMING_SCHEME: 'UNSUPPORTED_UTC_TIMING_SCHEME'\r\n  };\r\n\r\n  /**\r\n   * @typedef {Object} SingleUri\r\n   * @property {string} uri - relative location of segment\r\n   * @property {string} resolvedUri - resolved location of segment\r\n   * @property {Object} byterange - Object containing information on how to make byte range\r\n   *   requests following byte-range-spec per RFC2616.\r\n   * @property {String} byterange.length - length of range request\r\n   * @property {String} byterange.offset - byte offset of range request\r\n   *\r\n   * @see https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.35.1\r\n   */\r\n\r\n  /**\r\n   * Converts a URLType node (5.3.9.2.3 Table 13) to a segment object\r\n   * that conforms to how m3u8-parser is structured\r\n   *\r\n   * @see https://github.com/videojs/m3u8-parser\r\n   *\r\n   * @param {string} baseUrl - baseUrl provided by <BaseUrl> nodes\r\n   * @param {string} source - source url for segment\r\n   * @param {string} range - optional range used for range calls,\r\n   *   follows  RFC 2616, Clause 14.35.1\r\n   * @return {SingleUri} full segment information transformed into a format similar\r\n   *   to m3u8-parser\r\n   */\r\n\r\n  const urlTypeToSegment = ({\r\n    baseUrl = '',\r\n    source = '',\r\n    range = '',\r\n    indexRange = ''\r\n  }) => {\r\n    const segment = {\r\n      uri: source,\r\n      resolvedUri: resolveUrl$1(baseUrl || '', source)\r\n    };\r\n    if (range || indexRange) {\r\n      const rangeStr = range ? range : indexRange;\r\n      const ranges = rangeStr.split('-'); // default to parsing this as a BigInt if possible\r\n\r\n      let startRange = window.BigInt ? window.BigInt(ranges[0]) : parseInt(ranges[0], 10);\r\n      let endRange = window.BigInt ? window.BigInt(ranges[1]) : parseInt(ranges[1], 10); // convert back to a number if less than MAX_SAFE_INTEGER\r\n\r\n      if (startRange < Number.MAX_SAFE_INTEGER && typeof startRange === 'bigint') {\r\n        startRange = Number(startRange);\r\n      }\r\n      if (endRange < Number.MAX_SAFE_INTEGER && typeof endRange === 'bigint') {\r\n        endRange = Number(endRange);\r\n      }\r\n      let length;\r\n      if (typeof endRange === 'bigint' || typeof startRange === 'bigint') {\r\n        length = window.BigInt(endRange) - window.BigInt(startRange) + window.BigInt(1);\r\n      } else {\r\n        length = endRange - startRange + 1;\r\n      }\r\n      if (typeof length === 'bigint' && length < Number.MAX_SAFE_INTEGER) {\r\n        length = Number(length);\r\n      } // byterange should be inclusive according to\r\n      // RFC 2616, Clause 14.35.1\r\n\r\n      segment.byterange = {\r\n        length,\r\n        offset: startRange\r\n      };\r\n    }\r\n    return segment;\r\n  };\r\n  const byteRangeToString = byterange => {\r\n    // `endRange` is one less than `offset + length` because the HTTP range\r\n    // header uses inclusive ranges\r\n    let endRange;\r\n    if (typeof byterange.offset === 'bigint' || typeof byterange.length === 'bigint') {\r\n      endRange = window.BigInt(byterange.offset) + window.BigInt(byterange.length) - window.BigInt(1);\r\n    } else {\r\n      endRange = byterange.offset + byterange.length - 1;\r\n    }\r\n    return `${byterange.offset}-${endRange}`;\r\n  };\r\n\r\n  /**\r\n   * parse the end number attribue that can be a string\r\n   * number, or undefined.\r\n   *\r\n   * @param {string|number|undefined} endNumber\r\n   *        The end number attribute.\r\n   *\r\n   * @return {number|null}\r\n   *          The result of parsing the end number.\r\n   */\r\n\r\n  const parseEndNumber = endNumber => {\r\n    if (endNumber && typeof endNumber !== 'number') {\r\n      endNumber = parseInt(endNumber, 10);\r\n    }\r\n    if (isNaN(endNumber)) {\r\n      return null;\r\n    }\r\n    return endNumber;\r\n  };\r\n  /**\r\n   * Functions for calculating the range of available segments in static and dynamic\r\n   * manifests.\r\n   */\r\n\r\n  const segmentRange = {\r\n    /**\r\n     * Returns the entire range of available segments for a static MPD\r\n     *\r\n     * @param {Object} attributes\r\n     *        Inheritied MPD attributes\r\n     * @return {{ start: number, end: number }}\r\n     *         The start and end numbers for available segments\r\n     */\r\n    static(attributes) {\r\n      const {\r\n        duration,\r\n        timescale = 1,\r\n        sourceDuration,\r\n        periodDuration\r\n      } = attributes;\r\n      const endNumber = parseEndNumber(attributes.endNumber);\r\n      const segmentDuration = duration / timescale;\r\n      if (typeof endNumber === 'number') {\r\n        return {\r\n          start: 0,\r\n          end: endNumber\r\n        };\r\n      }\r\n      if (typeof periodDuration === 'number') {\r\n        return {\r\n          start: 0,\r\n          end: periodDuration / segmentDuration\r\n        };\r\n      }\r\n      return {\r\n        start: 0,\r\n        end: sourceDuration / segmentDuration\r\n      };\r\n    },\r\n    /**\r\n     * Returns the current live window range of available segments for a dynamic MPD\r\n     *\r\n     * @param {Object} attributes\r\n     *        Inheritied MPD attributes\r\n     * @return {{ start: number, end: number }}\r\n     *         The start and end numbers for available segments\r\n     */\r\n    dynamic(attributes) {\r\n      const {\r\n        NOW,\r\n        clientOffset,\r\n        availabilityStartTime,\r\n        timescale = 1,\r\n        duration,\r\n        periodStart = 0,\r\n        minimumUpdatePeriod = 0,\r\n        timeShiftBufferDepth = Infinity\r\n      } = attributes;\r\n      const endNumber = parseEndNumber(attributes.endNumber); // clientOffset is passed in at the top level of mpd-parser and is an offset calculated\r\n      // after retrieving UTC server time.\r\n\r\n      const now = (NOW + clientOffset) / 1000; // WC stands for Wall Clock.\r\n      // Convert the period start time to EPOCH.\r\n\r\n      const periodStartWC = availabilityStartTime + periodStart; // Period end in EPOCH is manifest's retrieval time + time until next update.\r\n\r\n      const periodEndWC = now + minimumUpdatePeriod;\r\n      const periodDuration = periodEndWC - periodStartWC;\r\n      const segmentCount = Math.ceil(periodDuration * timescale / duration);\r\n      const availableStart = Math.floor((now - periodStartWC - timeShiftBufferDepth) * timescale / duration);\r\n      const availableEnd = Math.floor((now - periodStartWC) * timescale / duration);\r\n      return {\r\n        start: Math.max(0, availableStart),\r\n        end: typeof endNumber === 'number' ? endNumber : Math.min(segmentCount, availableEnd)\r\n      };\r\n    }\r\n  };\r\n  /**\r\n   * Maps a range of numbers to objects with information needed to build the corresponding\r\n   * segment list\r\n   *\r\n   * @name toSegmentsCallback\r\n   * @function\r\n   * @param {number} number\r\n   *        Number of the segment\r\n   * @param {number} index\r\n   *        Index of the number in the range list\r\n   * @return {{ number: Number, duration: Number, timeline: Number, time: Number }}\r\n   *         Object with segment timing and duration info\r\n   */\r\n\r\n  /**\r\n   * Returns a callback for Array.prototype.map for mapping a range of numbers to\r\n   * information needed to build the segment list.\r\n   *\r\n   * @param {Object} attributes\r\n   *        Inherited MPD attributes\r\n   * @return {toSegmentsCallback}\r\n   *         Callback map function\r\n   */\r\n\r\n  const toSegments = attributes => number => {\r\n    const {\r\n      duration,\r\n      timescale = 1,\r\n      periodStart,\r\n      startNumber = 1\r\n    } = attributes;\r\n    return {\r\n      number: startNumber + number,\r\n      duration: duration / timescale,\r\n      timeline: periodStart,\r\n      time: number * duration\r\n    };\r\n  };\r\n  /**\r\n   * Returns a list of objects containing segment timing and duration info used for\r\n   * building the list of segments. This uses the @duration attribute specified\r\n   * in the MPD manifest to derive the range of segments.\r\n   *\r\n   * @param {Object} attributes\r\n   *        Inherited MPD attributes\r\n   * @return {{number: number, duration: number, time: number, timeline: number}[]}\r\n   *         List of Objects with segment timing and duration info\r\n   */\r\n\r\n  const parseByDuration = attributes => {\r\n    const {\r\n      type,\r\n      duration,\r\n      timescale = 1,\r\n      periodDuration,\r\n      sourceDuration\r\n    } = attributes;\r\n    const {\r\n      start,\r\n      end\r\n    } = segmentRange[type](attributes);\r\n    const segments = range(start, end).map(toSegments(attributes));\r\n    if (type === 'static') {\r\n      const index = segments.length - 1; // section is either a period or the full source\r\n\r\n      const sectionDuration = typeof periodDuration === 'number' ? periodDuration : sourceDuration; // final segment may be less than full segment duration\r\n\r\n      segments[index].duration = sectionDuration - duration / timescale * index;\r\n    }\r\n    return segments;\r\n  };\r\n\r\n  /**\r\n   * Translates SegmentBase into a set of segments.\r\n   * (DASH SPEC Section 5.3.9.3.2) contains a set of <SegmentURL> nodes.  Each\r\n   * node should be translated into segment.\r\n   *\r\n   * @param {Object} attributes\r\n   *   Object containing all inherited attributes from parent elements with attribute\r\n   *   names as keys\r\n   * @return {Object.<Array>} list of segments\r\n   */\r\n\r\n  const segmentsFromBase = attributes => {\r\n    const {\r\n      baseUrl,\r\n      initialization = {},\r\n      sourceDuration,\r\n      indexRange = '',\r\n      periodStart,\r\n      presentationTime,\r\n      number = 0,\r\n      duration\r\n    } = attributes; // base url is required for SegmentBase to work, per spec (Section 5.3.9.2.1)\r\n\r\n    if (!baseUrl) {\r\n      throw new Error(errors.NO_BASE_URL);\r\n    }\r\n    const initSegment = urlTypeToSegment({\r\n      baseUrl,\r\n      source: initialization.sourceURL,\r\n      range: initialization.range\r\n    });\r\n    const segment = urlTypeToSegment({\r\n      baseUrl,\r\n      source: baseUrl,\r\n      indexRange\r\n    });\r\n    segment.map = initSegment; // If there is a duration, use it, otherwise use the given duration of the source\r\n    // (since SegmentBase is only for one total segment)\r\n\r\n    if (duration) {\r\n      const segmentTimeInfo = parseByDuration(attributes);\r\n      if (segmentTimeInfo.length) {\r\n        segment.duration = segmentTimeInfo[0].duration;\r\n        segment.timeline = segmentTimeInfo[0].timeline;\r\n      }\r\n    } else if (sourceDuration) {\r\n      segment.duration = sourceDuration;\r\n      segment.timeline = periodStart;\r\n    } // If presentation time is provided, these segments are being generated by SIDX\r\n    // references, and should use the time provided. For the general case of SegmentBase,\r\n    // there should only be one segment in the period, so its presentation time is the same\r\n    // as its period start.\r\n\r\n    segment.presentationTime = presentationTime || periodStart;\r\n    segment.number = number;\r\n    return [segment];\r\n  };\r\n  /**\r\n   * Given a playlist, a sidx box, and a baseUrl, update the segment list of the playlist\r\n   * according to the sidx information given.\r\n   *\r\n   * playlist.sidx has metadadata about the sidx where-as the sidx param\r\n   * is the parsed sidx box itself.\r\n   *\r\n   * @param {Object} playlist the playlist to update the sidx information for\r\n   * @param {Object} sidx the parsed sidx box\r\n   * @return {Object} the playlist object with the updated sidx information\r\n   */\r\n\r\n  const addSidxSegmentsToPlaylist$1 = (playlist, sidx, baseUrl) => {\r\n    // Retain init segment information\r\n    const initSegment = playlist.sidx.map ? playlist.sidx.map : null; // Retain source duration from initial main manifest parsing\r\n\r\n    const sourceDuration = playlist.sidx.duration; // Retain source timeline\r\n\r\n    const timeline = playlist.timeline || 0;\r\n    const sidxByteRange = playlist.sidx.byterange;\r\n    const sidxEnd = sidxByteRange.offset + sidxByteRange.length; // Retain timescale of the parsed sidx\r\n\r\n    const timescale = sidx.timescale; // referenceType 1 refers to other sidx boxes\r\n\r\n    const mediaReferences = sidx.references.filter(r => r.referenceType !== 1);\r\n    const segments = [];\r\n    const type = playlist.endList ? 'static' : 'dynamic';\r\n    const periodStart = playlist.sidx.timeline;\r\n    let presentationTime = periodStart;\r\n    let number = playlist.mediaSequence || 0; // firstOffset is the offset from the end of the sidx box\r\n\r\n    let startIndex; // eslint-disable-next-line\r\n\r\n    if (typeof sidx.firstOffset === 'bigint') {\r\n      startIndex = window.BigInt(sidxEnd) + sidx.firstOffset;\r\n    } else {\r\n      startIndex = sidxEnd + sidx.firstOffset;\r\n    }\r\n    for (let i = 0; i < mediaReferences.length; i++) {\r\n      const reference = sidx.references[i]; // size of the referenced (sub)segment\r\n\r\n      const size = reference.referencedSize; // duration of the referenced (sub)segment, in  the  timescale\r\n      // this will be converted to seconds when generating segments\r\n\r\n      const duration = reference.subsegmentDuration; // should be an inclusive range\r\n\r\n      let endIndex; // eslint-disable-next-line\r\n\r\n      if (typeof startIndex === 'bigint') {\r\n        endIndex = startIndex + window.BigInt(size) - window.BigInt(1);\r\n      } else {\r\n        endIndex = startIndex + size - 1;\r\n      }\r\n      const indexRange = `${startIndex}-${endIndex}`;\r\n      const attributes = {\r\n        baseUrl,\r\n        timescale,\r\n        timeline,\r\n        periodStart,\r\n        presentationTime,\r\n        number,\r\n        duration,\r\n        sourceDuration,\r\n        indexRange,\r\n        type\r\n      };\r\n      const segment = segmentsFromBase(attributes)[0];\r\n      if (initSegment) {\r\n        segment.map = initSegment;\r\n      }\r\n      segments.push(segment);\r\n      if (typeof startIndex === 'bigint') {\r\n        startIndex += window.BigInt(size);\r\n      } else {\r\n        startIndex += size;\r\n      }\r\n      presentationTime += duration / timescale;\r\n      number++;\r\n    }\r\n    playlist.segments = segments;\r\n    return playlist;\r\n  };\r\n  const SUPPORTED_MEDIA_TYPES = ['AUDIO', 'SUBTITLES']; // allow one 60fps frame as leniency (arbitrarily chosen)\r\n\r\n  const TIME_FUDGE = 1 / 60;\r\n  /**\r\n   * Given a list of timelineStarts, combines, dedupes, and sorts them.\r\n   *\r\n   * @param {TimelineStart[]} timelineStarts - list of timeline starts\r\n   *\r\n   * @return {TimelineStart[]} the combined and deduped timeline starts\r\n   */\r\n\r\n  const getUniqueTimelineStarts = timelineStarts => {\r\n    return union(timelineStarts, ({\r\n      timeline\r\n    }) => timeline).sort((a, b) => a.timeline > b.timeline ? 1 : -1);\r\n  };\r\n  /**\r\n   * Finds the playlist with the matching NAME attribute.\r\n   *\r\n   * @param {Array} playlists - playlists to search through\r\n   * @param {string} name - the NAME attribute to search for\r\n   *\r\n   * @return {Object|null} the matching playlist object, or null\r\n   */\r\n\r\n  const findPlaylistWithName = (playlists, name) => {\r\n    for (let i = 0; i < playlists.length; i++) {\r\n      if (playlists[i].attributes.NAME === name) {\r\n        return playlists[i];\r\n      }\r\n    }\r\n    return null;\r\n  };\r\n  /**\r\n   * Gets a flattened array of media group playlists.\r\n   *\r\n   * @param {Object} manifest - the main manifest object\r\n   *\r\n   * @return {Array} the media group playlists\r\n   */\r\n\r\n  const getMediaGroupPlaylists = manifest => {\r\n    let mediaGroupPlaylists = [];\r\n    forEachMediaGroup$1(manifest, SUPPORTED_MEDIA_TYPES, (properties, type, group, label) => {\r\n      mediaGroupPlaylists = mediaGroupPlaylists.concat(properties.playlists || []);\r\n    });\r\n    return mediaGroupPlaylists;\r\n  };\r\n  /**\r\n   * Updates the playlist's media sequence numbers.\r\n   *\r\n   * @param {Object} config - options object\r\n   * @param {Object} config.playlist - the playlist to update\r\n   * @param {number} config.mediaSequence - the mediaSequence number to start with\r\n   */\r\n\r\n  const updateMediaSequenceForPlaylist = ({\r\n    playlist,\r\n    mediaSequence\r\n  }) => {\r\n    playlist.mediaSequence = mediaSequence;\r\n    playlist.segments.forEach((segment, index) => {\r\n      segment.number = playlist.mediaSequence + index;\r\n    });\r\n  };\r\n  /**\r\n   * Updates the media and discontinuity sequence numbers of newPlaylists given oldPlaylists\r\n   * and a complete list of timeline starts.\r\n   *\r\n   * If no matching playlist is found, only the discontinuity sequence number of the playlist\r\n   * will be updated.\r\n   *\r\n   * Since early available timelines are not supported, at least one segment must be present.\r\n   *\r\n   * @param {Object} config - options object\r\n   * @param {Object[]} oldPlaylists - the old playlists to use as a reference\r\n   * @param {Object[]} newPlaylists - the new playlists to update\r\n   * @param {Object} timelineStarts - all timelineStarts seen in the stream to this point\r\n   */\r\n\r\n  const updateSequenceNumbers = ({\r\n    oldPlaylists,\r\n    newPlaylists,\r\n    timelineStarts\r\n  }) => {\r\n    newPlaylists.forEach(playlist => {\r\n      playlist.discontinuitySequence = timelineStarts.findIndex(function ({\r\n        timeline\r\n      }) {\r\n        return timeline === playlist.timeline;\r\n      }); // Playlists NAMEs come from DASH Representation IDs, which are mandatory\r\n      // (see ISO_23009-1-2012 5.3.5.2).\r\n      //\r\n      // If the same Representation existed in a prior Period, it will retain the same NAME.\r\n\r\n      const oldPlaylist = findPlaylistWithName(oldPlaylists, playlist.attributes.NAME);\r\n      if (!oldPlaylist) {\r\n        // Since this is a new playlist, the media sequence values can start from 0 without\r\n        // consequence.\r\n        return;\r\n      } // TODO better support for live SIDX\r\n      //\r\n      // As of this writing, mpd-parser does not support multiperiod SIDX (in live or VOD).\r\n      // This is evident by a playlist only having a single SIDX reference. In a multiperiod\r\n      // playlist there would need to be multiple SIDX references. In addition, live SIDX is\r\n      // not supported when the SIDX properties change on refreshes.\r\n      //\r\n      // In the future, if support needs to be added, the merging logic here can be called\r\n      // after SIDX references are resolved. For now, exit early to prevent exceptions being\r\n      // thrown due to undefined references.\r\n\r\n      if (playlist.sidx) {\r\n        return;\r\n      } // Since we don't yet support early available timelines, we don't need to support\r\n      // playlists with no segments.\r\n\r\n      const firstNewSegment = playlist.segments[0];\r\n      const oldMatchingSegmentIndex = oldPlaylist.segments.findIndex(function (oldSegment) {\r\n        return Math.abs(oldSegment.presentationTime - firstNewSegment.presentationTime) < TIME_FUDGE;\r\n      }); // No matching segment from the old playlist means the entire playlist was refreshed.\r\n      // In this case the media sequence should account for this update, and the new segments\r\n      // should be marked as discontinuous from the prior content, since the last prior\r\n      // timeline was removed.\r\n\r\n      if (oldMatchingSegmentIndex === -1) {\r\n        updateMediaSequenceForPlaylist({\r\n          playlist,\r\n          mediaSequence: oldPlaylist.mediaSequence + oldPlaylist.segments.length\r\n        });\r\n        playlist.segments[0].discontinuity = true;\r\n        playlist.discontinuityStarts.unshift(0); // No matching segment does not necessarily mean there's missing content.\r\n        //\r\n        // If the new playlist's timeline is the same as the last seen segment's timeline,\r\n        // then a discontinuity can be added to identify that there's potentially missing\r\n        // content. If there's no missing content, the discontinuity should still be rather\r\n        // harmless. It's possible that if segment durations are accurate enough, that the\r\n        // existence of a gap can be determined using the presentation times and durations,\r\n        // but if the segment timing info is off, it may introduce more problems than simply\r\n        // adding the discontinuity.\r\n        //\r\n        // If the new playlist's timeline is different from the last seen segment's timeline,\r\n        // then a discontinuity can be added to identify that this is the first seen segment\r\n        // of a new timeline. However, the logic at the start of this function that\r\n        // determined the disconinuity sequence by timeline index is now off by one (the\r\n        // discontinuity of the newest timeline hasn't yet fallen off the manifest...since\r\n        // we added it), so the disconinuity sequence must be decremented.\r\n        //\r\n        // A period may also have a duration of zero, so the case of no segments is handled\r\n        // here even though we don't yet support early available periods.\r\n\r\n        if (!oldPlaylist.segments.length && playlist.timeline > oldPlaylist.timeline || oldPlaylist.segments.length && playlist.timeline > oldPlaylist.segments[oldPlaylist.segments.length - 1].timeline) {\r\n          playlist.discontinuitySequence--;\r\n        }\r\n        return;\r\n      } // If the first segment matched with a prior segment on a discontinuity (it's matching\r\n      // on the first segment of a period), then the discontinuitySequence shouldn't be the\r\n      // timeline's matching one, but instead should be the one prior, and the first segment\r\n      // of the new manifest should be marked with a discontinuity.\r\n      //\r\n      // The reason for this special case is that discontinuity sequence shows how many\r\n      // discontinuities have fallen off of the playlist, and discontinuities are marked on\r\n      // the first segment of a new \"timeline.\" Because of this, while DASH will retain that\r\n      // Period while the \"timeline\" exists, HLS keeps track of it via the discontinuity\r\n      // sequence, and that first segment is an indicator, but can be removed before that\r\n      // timeline is gone.\r\n\r\n      const oldMatchingSegment = oldPlaylist.segments[oldMatchingSegmentIndex];\r\n      if (oldMatchingSegment.discontinuity && !firstNewSegment.discontinuity) {\r\n        firstNewSegment.discontinuity = true;\r\n        playlist.discontinuityStarts.unshift(0);\r\n        playlist.discontinuitySequence--;\r\n      }\r\n      updateMediaSequenceForPlaylist({\r\n        playlist,\r\n        mediaSequence: oldPlaylist.segments[oldMatchingSegmentIndex].number\r\n      });\r\n    });\r\n  };\r\n  /**\r\n   * Given an old parsed manifest object and a new parsed manifest object, updates the\r\n   * sequence and timing values within the new manifest to ensure that it lines up with the\r\n   * old.\r\n   *\r\n   * @param {Array} oldManifest - the old main manifest object\r\n   * @param {Array} newManifest - the new main manifest object\r\n   *\r\n   * @return {Object} the updated new manifest object\r\n   */\r\n\r\n  const positionManifestOnTimeline = ({\r\n    oldManifest,\r\n    newManifest\r\n  }) => {\r\n    // Starting from v4.1.2 of the IOP, section 4.4.3.3 states:\r\n    //\r\n    // \"MPD@availabilityStartTime and Period@start shall not be changed over MPD updates.\"\r\n    //\r\n    // This was added from https://github.com/Dash-Industry-Forum/DASH-IF-IOP/issues/160\r\n    //\r\n    // Because of this change, and the difficulty of supporting periods with changing start\r\n    // times, periods with changing start times are not supported. This makes the logic much\r\n    // simpler, since periods with the same start time can be considerred the same period\r\n    // across refreshes.\r\n    //\r\n    // To give an example as to the difficulty of handling periods where the start time may\r\n    // change, if a single period manifest is refreshed with another manifest with a single\r\n    // period, and both the start and end times are increased, then the only way to determine\r\n    // if it's a new period or an old one that has changed is to look through the segments of\r\n    // each playlist and determine the presentation time bounds to find a match. In addition,\r\n    // if the period start changed to exceed the old period end, then there would be no\r\n    // match, and it would not be possible to determine whether the refreshed period is a new\r\n    // one or the old one.\r\n    const oldPlaylists = oldManifest.playlists.concat(getMediaGroupPlaylists(oldManifest));\r\n    const newPlaylists = newManifest.playlists.concat(getMediaGroupPlaylists(newManifest)); // Save all seen timelineStarts to the new manifest. Although this potentially means that\r\n    // there's a \"memory leak\" in that it will never stop growing, in reality, only a couple\r\n    // of properties are saved for each seen Period. Even long running live streams won't\r\n    // generate too many Periods, unless the stream is watched for decades. In the future,\r\n    // this can be optimized by mapping to discontinuity sequence numbers for each timeline,\r\n    // but it may not become an issue, and the additional info can be useful for debugging.\r\n\r\n    newManifest.timelineStarts = getUniqueTimelineStarts([oldManifest.timelineStarts, newManifest.timelineStarts]);\r\n    updateSequenceNumbers({\r\n      oldPlaylists,\r\n      newPlaylists,\r\n      timelineStarts: newManifest.timelineStarts\r\n    });\r\n    return newManifest;\r\n  };\r\n  const generateSidxKey = sidx => sidx && sidx.uri + '-' + byteRangeToString(sidx.byterange);\r\n  const mergeDiscontiguousPlaylists = playlists => {\r\n    // Break out playlists into groups based on their baseUrl\r\n    const playlistsByBaseUrl = playlists.reduce(function (acc, cur) {\r\n      if (!acc[cur.attributes.baseUrl]) {\r\n        acc[cur.attributes.baseUrl] = [];\r\n      }\r\n      acc[cur.attributes.baseUrl].push(cur);\r\n      return acc;\r\n    }, {});\r\n    let allPlaylists = [];\r\n    Object.values(playlistsByBaseUrl).forEach(playlistGroup => {\r\n      const mergedPlaylists = values(playlistGroup.reduce((acc, playlist) => {\r\n        // assuming playlist IDs are the same across periods\r\n        // TODO: handle multiperiod where representation sets are not the same\r\n        // across periods\r\n        const name = playlist.attributes.id + (playlist.attributes.lang || '');\r\n        if (!acc[name]) {\r\n          // First Period\r\n          acc[name] = playlist;\r\n          acc[name].attributes.timelineStarts = [];\r\n        } else {\r\n          // Subsequent Periods\r\n          if (playlist.segments) {\r\n            // first segment of subsequent periods signal a discontinuity\r\n            if (playlist.segments[0]) {\r\n              playlist.segments[0].discontinuity = true;\r\n            }\r\n            acc[name].segments.push(...playlist.segments);\r\n          } // bubble up contentProtection, this assumes all DRM content\r\n          // has the same contentProtection\r\n\r\n          if (playlist.attributes.contentProtection) {\r\n            acc[name].attributes.contentProtection = playlist.attributes.contentProtection;\r\n          }\r\n        }\r\n        acc[name].attributes.timelineStarts.push({\r\n          // Although they represent the same number, it's important to have both to make it\r\n          // compatible with HLS potentially having a similar attribute.\r\n          start: playlist.attributes.periodStart,\r\n          timeline: playlist.attributes.periodStart\r\n        });\r\n        return acc;\r\n      }, {}));\r\n      allPlaylists = allPlaylists.concat(mergedPlaylists);\r\n    });\r\n    return allPlaylists.map(playlist => {\r\n      playlist.discontinuityStarts = findIndexes(playlist.segments || [], 'discontinuity');\r\n      return playlist;\r\n    });\r\n  };\r\n  const addSidxSegmentsToPlaylist = (playlist, sidxMapping) => {\r\n    const sidxKey = generateSidxKey(playlist.sidx);\r\n    const sidxMatch = sidxKey && sidxMapping[sidxKey] && sidxMapping[sidxKey].sidx;\r\n    if (sidxMatch) {\r\n      addSidxSegmentsToPlaylist$1(playlist, sidxMatch, playlist.sidx.resolvedUri);\r\n    }\r\n    return playlist;\r\n  };\r\n  const addSidxSegmentsToPlaylists = (playlists, sidxMapping = {}) => {\r\n    if (!Object.keys(sidxMapping).length) {\r\n      return playlists;\r\n    }\r\n    for (const i in playlists) {\r\n      playlists[i] = addSidxSegmentsToPlaylist(playlists[i], sidxMapping);\r\n    }\r\n    return playlists;\r\n  };\r\n  const formatAudioPlaylist = ({\r\n    attributes,\r\n    segments,\r\n    sidx,\r\n    mediaSequence,\r\n    discontinuitySequence,\r\n    discontinuityStarts\r\n  }, isAudioOnly) => {\r\n    const playlist = {\r\n      attributes: {\r\n        NAME: attributes.id,\r\n        BANDWIDTH: attributes.bandwidth,\r\n        CODECS: attributes.codecs,\r\n        ['PROGRAM-ID']: 1\r\n      },\r\n      uri: '',\r\n      endList: attributes.type === 'static',\r\n      timeline: attributes.periodStart,\r\n      resolvedUri: attributes.baseUrl || '',\r\n      targetDuration: attributes.duration,\r\n      discontinuitySequence,\r\n      discontinuityStarts,\r\n      timelineStarts: attributes.timelineStarts,\r\n      mediaSequence,\r\n      segments\r\n    };\r\n    if (attributes.contentProtection) {\r\n      playlist.contentProtection = attributes.contentProtection;\r\n    }\r\n    if (attributes.serviceLocation) {\r\n      playlist.attributes.serviceLocation = attributes.serviceLocation;\r\n    }\r\n    if (sidx) {\r\n      playlist.sidx = sidx;\r\n    }\r\n    if (isAudioOnly) {\r\n      playlist.attributes.AUDIO = 'audio';\r\n      playlist.attributes.SUBTITLES = 'subs';\r\n    }\r\n    return playlist;\r\n  };\r\n  const formatVttPlaylist = ({\r\n    attributes,\r\n    segments,\r\n    mediaSequence,\r\n    discontinuityStarts,\r\n    discontinuitySequence\r\n  }) => {\r\n    if (typeof segments === 'undefined') {\r\n      // vtt tracks may use single file in BaseURL\r\n      segments = [{\r\n        uri: attributes.baseUrl,\r\n        timeline: attributes.periodStart,\r\n        resolvedUri: attributes.baseUrl || '',\r\n        duration: attributes.sourceDuration,\r\n        number: 0\r\n      }]; // targetDuration should be the same duration as the only segment\r\n\r\n      attributes.duration = attributes.sourceDuration;\r\n    }\r\n    const m3u8Attributes = {\r\n      NAME: attributes.id,\r\n      BANDWIDTH: attributes.bandwidth,\r\n      ['PROGRAM-ID']: 1\r\n    };\r\n    if (attributes.codecs) {\r\n      m3u8Attributes.CODECS = attributes.codecs;\r\n    }\r\n    const vttPlaylist = {\r\n      attributes: m3u8Attributes,\r\n      uri: '',\r\n      endList: attributes.type === 'static',\r\n      timeline: attributes.periodStart,\r\n      resolvedUri: attributes.baseUrl || '',\r\n      targetDuration: attributes.duration,\r\n      timelineStarts: attributes.timelineStarts,\r\n      discontinuityStarts,\r\n      discontinuitySequence,\r\n      mediaSequence,\r\n      segments\r\n    };\r\n    if (attributes.serviceLocation) {\r\n      vttPlaylist.attributes.serviceLocation = attributes.serviceLocation;\r\n    }\r\n    return vttPlaylist;\r\n  };\r\n  const organizeAudioPlaylists = (playlists, sidxMapping = {}, isAudioOnly = false) => {\r\n    let mainPlaylist;\r\n    const formattedPlaylists = playlists.reduce((a, playlist) => {\r\n      const role = playlist.attributes.role && playlist.attributes.role.value || '';\r\n      const language = playlist.attributes.lang || '';\r\n      let label = playlist.attributes.label || 'main';\r\n      if (language && !playlist.attributes.label) {\r\n        const roleLabel = role ? ` (${role})` : '';\r\n        label = `${playlist.attributes.lang}${roleLabel}`;\r\n      }\r\n      if (!a[label]) {\r\n        a[label] = {\r\n          language,\r\n          autoselect: true,\r\n          default: role === 'main',\r\n          playlists: [],\r\n          uri: ''\r\n        };\r\n      }\r\n      const formatted = addSidxSegmentsToPlaylist(formatAudioPlaylist(playlist, isAudioOnly), sidxMapping);\r\n      a[label].playlists.push(formatted);\r\n      if (typeof mainPlaylist === 'undefined' && role === 'main') {\r\n        mainPlaylist = playlist;\r\n        mainPlaylist.default = true;\r\n      }\r\n      return a;\r\n    }, {}); // if no playlists have role \"main\", mark the first as main\r\n\r\n    if (!mainPlaylist) {\r\n      const firstLabel = Object.keys(formattedPlaylists)[0];\r\n      formattedPlaylists[firstLabel].default = true;\r\n    }\r\n    return formattedPlaylists;\r\n  };\r\n  const organizeVttPlaylists = (playlists, sidxMapping = {}) => {\r\n    return playlists.reduce((a, playlist) => {\r\n      const label = playlist.attributes.label || playlist.attributes.lang || 'text';\r\n      const language = playlist.attributes.lang || 'und';\r\n      if (!a[label]) {\r\n        a[label] = {\r\n          language,\r\n          default: false,\r\n          autoselect: false,\r\n          playlists: [],\r\n          uri: ''\r\n        };\r\n      }\r\n      a[label].playlists.push(addSidxSegmentsToPlaylist(formatVttPlaylist(playlist), sidxMapping));\r\n      return a;\r\n    }, {});\r\n  };\r\n  const organizeCaptionServices = captionServices => captionServices.reduce((svcObj, svc) => {\r\n    if (!svc) {\r\n      return svcObj;\r\n    }\r\n    svc.forEach(service => {\r\n      const {\r\n        channel,\r\n        language\r\n      } = service;\r\n      svcObj[language] = {\r\n        autoselect: false,\r\n        default: false,\r\n        instreamId: channel,\r\n        language\r\n      };\r\n      if (service.hasOwnProperty('aspectRatio')) {\r\n        svcObj[language].aspectRatio = service.aspectRatio;\r\n      }\r\n      if (service.hasOwnProperty('easyReader')) {\r\n        svcObj[language].easyReader = service.easyReader;\r\n      }\r\n      if (service.hasOwnProperty('3D')) {\r\n        svcObj[language]['3D'] = service['3D'];\r\n      }\r\n    });\r\n    return svcObj;\r\n  }, {});\r\n  const formatVideoPlaylist = ({\r\n    attributes,\r\n    segments,\r\n    sidx,\r\n    discontinuityStarts\r\n  }) => {\r\n    const playlist = {\r\n      attributes: {\r\n        NAME: attributes.id,\r\n        AUDIO: 'audio',\r\n        SUBTITLES: 'subs',\r\n        RESOLUTION: {\r\n          width: attributes.width,\r\n          height: attributes.height\r\n        },\r\n        CODECS: attributes.codecs,\r\n        BANDWIDTH: attributes.bandwidth,\r\n        ['PROGRAM-ID']: 1\r\n      },\r\n      uri: '',\r\n      endList: attributes.type === 'static',\r\n      timeline: attributes.periodStart,\r\n      resolvedUri: attributes.baseUrl || '',\r\n      targetDuration: attributes.duration,\r\n      discontinuityStarts,\r\n      timelineStarts: attributes.timelineStarts,\r\n      segments\r\n    };\r\n    if (attributes.frameRate) {\r\n      playlist.attributes['FRAME-RATE'] = attributes.frameRate;\r\n    }\r\n    if (attributes.contentProtection) {\r\n      playlist.contentProtection = attributes.contentProtection;\r\n    }\r\n    if (attributes.serviceLocation) {\r\n      playlist.attributes.serviceLocation = attributes.serviceLocation;\r\n    }\r\n    if (sidx) {\r\n      playlist.sidx = sidx;\r\n    }\r\n    return playlist;\r\n  };\r\n  const videoOnly = ({\r\n    attributes\r\n  }) => attributes.mimeType === 'video/mp4' || attributes.mimeType === 'video/webm' || attributes.contentType === 'video';\r\n  const audioOnly = ({\r\n    attributes\r\n  }) => attributes.mimeType === 'audio/mp4' || attributes.mimeType === 'audio/webm' || attributes.contentType === 'audio';\r\n  const vttOnly = ({\r\n    attributes\r\n  }) => attributes.mimeType === 'text/vtt' || attributes.contentType === 'text';\r\n  /**\r\n   * Contains start and timeline properties denoting a timeline start. For DASH, these will\r\n   * be the same number.\r\n   *\r\n   * @typedef {Object} TimelineStart\r\n   * @property {number} start - the start time of the timeline\r\n   * @property {number} timeline - the timeline number\r\n   */\r\n\r\n  /**\r\n   * Adds appropriate media and discontinuity sequence values to the segments and playlists.\r\n   *\r\n   * Throughout mpd-parser, the `number` attribute is used in relation to `startNumber`, a\r\n   * DASH specific attribute used in constructing segment URI's from templates. However, from\r\n   * an HLS perspective, the `number` attribute on a segment would be its `mediaSequence`\r\n   * value, which should start at the original media sequence value (or 0) and increment by 1\r\n   * for each segment thereafter. Since DASH's `startNumber` values are independent per\r\n   * period, it doesn't make sense to use it for `number`. Instead, assume everything starts\r\n   * from a 0 mediaSequence value and increment from there.\r\n   *\r\n   * Note that VHS currently doesn't use the `number` property, but it can be helpful for\r\n   * debugging and making sense of the manifest.\r\n   *\r\n   * For live playlists, to account for values increasing in manifests when periods are\r\n   * removed on refreshes, merging logic should be used to update the numbers to their\r\n   * appropriate values (to ensure they're sequential and increasing).\r\n   *\r\n   * @param {Object[]} playlists - the playlists to update\r\n   * @param {TimelineStart[]} timelineStarts - the timeline starts for the manifest\r\n   */\r\n\r\n  const addMediaSequenceValues = (playlists, timelineStarts) => {\r\n    // increment all segments sequentially\r\n    playlists.forEach(playlist => {\r\n      playlist.mediaSequence = 0;\r\n      playlist.discontinuitySequence = timelineStarts.findIndex(function ({\r\n        timeline\r\n      }) {\r\n        return timeline === playlist.timeline;\r\n      });\r\n      if (!playlist.segments) {\r\n        return;\r\n      }\r\n      playlist.segments.forEach((segment, index) => {\r\n        segment.number = index;\r\n      });\r\n    });\r\n  };\r\n  /**\r\n   * Given a media group object, flattens all playlists within the media group into a single\r\n   * array.\r\n   *\r\n   * @param {Object} mediaGroupObject - the media group object\r\n   *\r\n   * @return {Object[]}\r\n   *         The media group playlists\r\n   */\r\n\r\n  const flattenMediaGroupPlaylists = mediaGroupObject => {\r\n    if (!mediaGroupObject) {\r\n      return [];\r\n    }\r\n    return Object.keys(mediaGroupObject).reduce((acc, label) => {\r\n      const labelContents = mediaGroupObject[label];\r\n      return acc.concat(labelContents.playlists);\r\n    }, []);\r\n  };\r\n  const toM3u8 = ({\r\n    dashPlaylists,\r\n    locations,\r\n    contentSteering,\r\n    sidxMapping = {},\r\n    previousManifest,\r\n    eventStream\r\n  }) => {\r\n    if (!dashPlaylists.length) {\r\n      return {};\r\n    } // grab all main manifest attributes\r\n\r\n    const {\r\n      sourceDuration: duration,\r\n      type,\r\n      suggestedPresentationDelay,\r\n      minimumUpdatePeriod\r\n    } = dashPlaylists[0].attributes;\r\n    const videoPlaylists = mergeDiscontiguousPlaylists(dashPlaylists.filter(videoOnly)).map(formatVideoPlaylist);\r\n    const audioPlaylists = mergeDiscontiguousPlaylists(dashPlaylists.filter(audioOnly));\r\n    const vttPlaylists = mergeDiscontiguousPlaylists(dashPlaylists.filter(vttOnly));\r\n    const captions = dashPlaylists.map(playlist => playlist.attributes.captionServices).filter(Boolean);\r\n    const manifest = {\r\n      allowCache: true,\r\n      discontinuityStarts: [],\r\n      segments: [],\r\n      endList: true,\r\n      mediaGroups: {\r\n        AUDIO: {},\r\n        VIDEO: {},\r\n        ['CLOSED-CAPTIONS']: {},\r\n        SUBTITLES: {}\r\n      },\r\n      uri: '',\r\n      duration,\r\n      playlists: addSidxSegmentsToPlaylists(videoPlaylists, sidxMapping)\r\n    };\r\n    if (minimumUpdatePeriod >= 0) {\r\n      manifest.minimumUpdatePeriod = minimumUpdatePeriod * 1000;\r\n    }\r\n    if (locations) {\r\n      manifest.locations = locations;\r\n    }\r\n    if (contentSteering) {\r\n      manifest.contentSteering = contentSteering;\r\n    }\r\n    if (type === 'dynamic') {\r\n      manifest.suggestedPresentationDelay = suggestedPresentationDelay;\r\n    }\r\n    if (eventStream && eventStream.length > 0) {\r\n      manifest.eventStream = eventStream;\r\n    }\r\n    const isAudioOnly = manifest.playlists.length === 0;\r\n    const organizedAudioGroup = audioPlaylists.length ? organizeAudioPlaylists(audioPlaylists, sidxMapping, isAudioOnly) : null;\r\n    const organizedVttGroup = vttPlaylists.length ? organizeVttPlaylists(vttPlaylists, sidxMapping) : null;\r\n    const formattedPlaylists = videoPlaylists.concat(flattenMediaGroupPlaylists(organizedAudioGroup), flattenMediaGroupPlaylists(organizedVttGroup));\r\n    const playlistTimelineStarts = formattedPlaylists.map(({\r\n      timelineStarts\r\n    }) => timelineStarts);\r\n    manifest.timelineStarts = getUniqueTimelineStarts(playlistTimelineStarts);\r\n    addMediaSequenceValues(formattedPlaylists, manifest.timelineStarts);\r\n    if (organizedAudioGroup) {\r\n      manifest.mediaGroups.AUDIO.audio = organizedAudioGroup;\r\n    }\r\n    if (organizedVttGroup) {\r\n      manifest.mediaGroups.SUBTITLES.subs = organizedVttGroup;\r\n    }\r\n    if (captions.length) {\r\n      manifest.mediaGroups['CLOSED-CAPTIONS'].cc = organizeCaptionServices(captions);\r\n    }\r\n    if (previousManifest) {\r\n      return positionManifestOnTimeline({\r\n        oldManifest: previousManifest,\r\n        newManifest: manifest\r\n      });\r\n    }\r\n    return manifest;\r\n  };\r\n\r\n  /**\r\n   * Calculates the R (repetition) value for a live stream (for the final segment\r\n   * in a manifest where the r value is negative 1)\r\n   *\r\n   * @param {Object} attributes\r\n   *        Object containing all inherited attributes from parent elements with attribute\r\n   *        names as keys\r\n   * @param {number} time\r\n   *        current time (typically the total time up until the final segment)\r\n   * @param {number} duration\r\n   *        duration property for the given <S />\r\n   *\r\n   * @return {number}\r\n   *        R value to reach the end of the given period\r\n   */\r\n  const getLiveRValue = (attributes, time, duration) => {\r\n    const {\r\n      NOW,\r\n      clientOffset,\r\n      availabilityStartTime,\r\n      timescale = 1,\r\n      periodStart = 0,\r\n      minimumUpdatePeriod = 0\r\n    } = attributes;\r\n    const now = (NOW + clientOffset) / 1000;\r\n    const periodStartWC = availabilityStartTime + periodStart;\r\n    const periodEndWC = now + minimumUpdatePeriod;\r\n    const periodDuration = periodEndWC - periodStartWC;\r\n    return Math.ceil((periodDuration * timescale - time) / duration);\r\n  };\r\n  /**\r\n   * Uses information provided by SegmentTemplate.SegmentTimeline to determine segment\r\n   * timing and duration\r\n   *\r\n   * @param {Object} attributes\r\n   *        Object containing all inherited attributes from parent elements with attribute\r\n   *        names as keys\r\n   * @param {Object[]} segmentTimeline\r\n   *        List of objects representing the attributes of each S element contained within\r\n   *\r\n   * @return {{number: number, duration: number, time: number, timeline: number}[]}\r\n   *         List of Objects with segment timing and duration info\r\n   */\r\n\r\n  const parseByTimeline = (attributes, segmentTimeline) => {\r\n    const {\r\n      type,\r\n      minimumUpdatePeriod = 0,\r\n      media = '',\r\n      sourceDuration,\r\n      timescale = 1,\r\n      startNumber = 1,\r\n      periodStart: timeline\r\n    } = attributes;\r\n    const segments = [];\r\n    let time = -1;\r\n    for (let sIndex = 0; sIndex < segmentTimeline.length; sIndex++) {\r\n      const S = segmentTimeline[sIndex];\r\n      const duration = S.d;\r\n      const repeat = S.r || 0;\r\n      const segmentTime = S.t || 0;\r\n      if (time < 0) {\r\n        // first segment\r\n        time = segmentTime;\r\n      }\r\n      if (segmentTime && segmentTime > time) {\r\n        // discontinuity\r\n        // TODO: How to handle this type of discontinuity\r\n        // timeline++ here would treat it like HLS discontuity and content would\r\n        // get appended without gap\r\n        // E.G.\r\n        //  <S t=\"0\" d=\"1\" />\r\n        //  <S d=\"1\" />\r\n        //  <S d=\"1\" />\r\n        //  <S t=\"5\" d=\"1\" />\r\n        // would have $Time$ values of [0, 1, 2, 5]\r\n        // should this be appened at time positions [0, 1, 2, 3],(#EXT-X-DISCONTINUITY)\r\n        // or [0, 1, 2, gap, gap, 5]? (#EXT-X-GAP)\r\n        // does the value of sourceDuration consider this when calculating arbitrary\r\n        // negative @r repeat value?\r\n        // E.G. Same elements as above with this added at the end\r\n        //  <S d=\"1\" r=\"-1\" />\r\n        //  with a sourceDuration of 10\r\n        // Would the 2 gaps be included in the time duration calculations resulting in\r\n        // 8 segments with $Time$ values of [0, 1, 2, 5, 6, 7, 8, 9] or 10 segments\r\n        // with $Time$ values of [0, 1, 2, 5, 6, 7, 8, 9, 10, 11] ?\r\n        time = segmentTime;\r\n      }\r\n      let count;\r\n      if (repeat < 0) {\r\n        const nextS = sIndex + 1;\r\n        if (nextS === segmentTimeline.length) {\r\n          // last segment\r\n          if (type === 'dynamic' && minimumUpdatePeriod > 0 && media.indexOf('$Number$') > 0) {\r\n            count = getLiveRValue(attributes, time, duration);\r\n          } else {\r\n            // TODO: This may be incorrect depending on conclusion of TODO above\r\n            count = (sourceDuration * timescale - time) / duration;\r\n          }\r\n        } else {\r\n          count = (segmentTimeline[nextS].t - time) / duration;\r\n        }\r\n      } else {\r\n        count = repeat + 1;\r\n      }\r\n      const end = startNumber + segments.length + count;\r\n      let number = startNumber + segments.length;\r\n      while (number < end) {\r\n        segments.push({\r\n          number,\r\n          duration: duration / timescale,\r\n          time,\r\n          timeline\r\n        });\r\n        time += duration;\r\n        number++;\r\n      }\r\n    }\r\n    return segments;\r\n  };\r\n  const identifierPattern = /\\$([A-z]*)(?:(%0)([0-9]+)d)?\\$/g;\r\n  /**\r\n   * Replaces template identifiers with corresponding values. To be used as the callback\r\n   * for String.prototype.replace\r\n   *\r\n   * @name replaceCallback\r\n   * @function\r\n   * @param {string} match\r\n   *        Entire match of identifier\r\n   * @param {string} identifier\r\n   *        Name of matched identifier\r\n   * @param {string} format\r\n   *        Format tag string. Its presence indicates that padding is expected\r\n   * @param {string} width\r\n   *        Desired length of the replaced value. Values less than this width shall be left\r\n   *        zero padded\r\n   * @return {string}\r\n   *         Replacement for the matched identifier\r\n   */\r\n\r\n  /**\r\n   * Returns a function to be used as a callback for String.prototype.replace to replace\r\n   * template identifiers\r\n   *\r\n   * @param {Obect} values\r\n   *        Object containing values that shall be used to replace known identifiers\r\n   * @param {number} values.RepresentationID\r\n   *        Value of the Representation@id attribute\r\n   * @param {number} values.Number\r\n   *        Number of the corresponding segment\r\n   * @param {number} values.Bandwidth\r\n   *        Value of the Representation@bandwidth attribute.\r\n   * @param {number} values.Time\r\n   *        Timestamp value of the corresponding segment\r\n   * @return {replaceCallback}\r\n   *         Callback to be used with String.prototype.replace to replace identifiers\r\n   */\r\n\r\n  const identifierReplacement = values => (match, identifier, format, width) => {\r\n    if (match === '$$') {\r\n      // escape sequence\r\n      return '$';\r\n    }\r\n    if (typeof values[identifier] === 'undefined') {\r\n      return match;\r\n    }\r\n    const value = '' + values[identifier];\r\n    if (identifier === 'RepresentationID') {\r\n      // Format tag shall not be present with RepresentationID\r\n      return value;\r\n    }\r\n    if (!format) {\r\n      width = 1;\r\n    } else {\r\n      width = parseInt(width, 10);\r\n    }\r\n    if (value.length >= width) {\r\n      return value;\r\n    }\r\n    return `${new Array(width - value.length + 1).join('0')}${value}`;\r\n  };\r\n  /**\r\n   * Constructs a segment url from a template string\r\n   *\r\n   * @param {string} url\r\n   *        Template string to construct url from\r\n   * @param {Obect} values\r\n   *        Object containing values that shall be used to replace known identifiers\r\n   * @param {number} values.RepresentationID\r\n   *        Value of the Representation@id attribute\r\n   * @param {number} values.Number\r\n   *        Number of the corresponding segment\r\n   * @param {number} values.Bandwidth\r\n   *        Value of the Representation@bandwidth attribute.\r\n   * @param {number} values.Time\r\n   *        Timestamp value of the corresponding segment\r\n   * @return {string}\r\n   *         Segment url with identifiers replaced\r\n   */\r\n\r\n  const constructTemplateUrl = (url, values) => url.replace(identifierPattern, identifierReplacement(values));\r\n  /**\r\n   * Generates a list of objects containing timing and duration information about each\r\n   * segment needed to generate segment uris and the complete segment object\r\n   *\r\n   * @param {Object} attributes\r\n   *        Object containing all inherited attributes from parent elements with attribute\r\n   *        names as keys\r\n   * @param {Object[]|undefined} segmentTimeline\r\n   *        List of objects representing the attributes of each S element contained within\r\n   *        the SegmentTimeline element\r\n   * @return {{number: number, duration: number, time: number, timeline: number}[]}\r\n   *         List of Objects with segment timing and duration info\r\n   */\r\n\r\n  const parseTemplateInfo = (attributes, segmentTimeline) => {\r\n    if (!attributes.duration && !segmentTimeline) {\r\n      // if neither @duration or SegmentTimeline are present, then there shall be exactly\r\n      // one media segment\r\n      return [{\r\n        number: attributes.startNumber || 1,\r\n        duration: attributes.sourceDuration,\r\n        time: 0,\r\n        timeline: attributes.periodStart\r\n      }];\r\n    }\r\n    if (attributes.duration) {\r\n      return parseByDuration(attributes);\r\n    }\r\n    return parseByTimeline(attributes, segmentTimeline);\r\n  };\r\n  /**\r\n   * Generates a list of segments using information provided by the SegmentTemplate element\r\n   *\r\n   * @param {Object} attributes\r\n   *        Object containing all inherited attributes from parent elements with attribute\r\n   *        names as keys\r\n   * @param {Object[]|undefined} segmentTimeline\r\n   *        List of objects representing the attributes of each S element contained within\r\n   *        the SegmentTimeline element\r\n   * @return {Object[]}\r\n   *         List of segment objects\r\n   */\r\n\r\n  const segmentsFromTemplate = (attributes, segmentTimeline) => {\r\n    const templateValues = {\r\n      RepresentationID: attributes.id,\r\n      Bandwidth: attributes.bandwidth || 0\r\n    };\r\n    const {\r\n      initialization = {\r\n        sourceURL: '',\r\n        range: ''\r\n      }\r\n    } = attributes;\r\n    const mapSegment = urlTypeToSegment({\r\n      baseUrl: attributes.baseUrl,\r\n      source: constructTemplateUrl(initialization.sourceURL, templateValues),\r\n      range: initialization.range\r\n    });\r\n    const segments = parseTemplateInfo(attributes, segmentTimeline);\r\n    return segments.map(segment => {\r\n      templateValues.Number = segment.number;\r\n      templateValues.Time = segment.time;\r\n      const uri = constructTemplateUrl(attributes.media || '', templateValues); // See DASH spec section 5.3.9.2.2\r\n      // - if timescale isn't present on any level, default to 1.\r\n\r\n      const timescale = attributes.timescale || 1; // - if presentationTimeOffset isn't present on any level, default to 0\r\n\r\n      const presentationTimeOffset = attributes.presentationTimeOffset || 0;\r\n      const presentationTime =\r\n      // Even if the @t attribute is not specified for the segment, segment.time is\r\n      // calculated in mpd-parser prior to this, so it's assumed to be available.\r\n      attributes.periodStart + (segment.time - presentationTimeOffset) / timescale;\r\n      const map = {\r\n        uri,\r\n        timeline: segment.timeline,\r\n        duration: segment.duration,\r\n        resolvedUri: resolveUrl$1(attributes.baseUrl || '', uri),\r\n        map: mapSegment,\r\n        number: segment.number,\r\n        presentationTime\r\n      };\r\n      return map;\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Converts a <SegmentUrl> (of type URLType from the DASH spec 5.3.9.2 Table 14)\r\n   * to an object that matches the output of a segment in videojs/mpd-parser\r\n   *\r\n   * @param {Object} attributes\r\n   *   Object containing all inherited attributes from parent elements with attribute\r\n   *   names as keys\r\n   * @param {Object} segmentUrl\r\n   *   <SegmentURL> node to translate into a segment object\r\n   * @return {Object} translated segment object\r\n   */\r\n\r\n  const SegmentURLToSegmentObject = (attributes, segmentUrl) => {\r\n    const {\r\n      baseUrl,\r\n      initialization = {}\r\n    } = attributes;\r\n    const initSegment = urlTypeToSegment({\r\n      baseUrl,\r\n      source: initialization.sourceURL,\r\n      range: initialization.range\r\n    });\r\n    const segment = urlTypeToSegment({\r\n      baseUrl,\r\n      source: segmentUrl.media,\r\n      range: segmentUrl.mediaRange\r\n    });\r\n    segment.map = initSegment;\r\n    return segment;\r\n  };\r\n  /**\r\n   * Generates a list of segments using information provided by the SegmentList element\r\n   * SegmentList (DASH SPEC Section 5.3.9.3.2) contains a set of <SegmentURL> nodes.  Each\r\n   * node should be translated into segment.\r\n   *\r\n   * @param {Object} attributes\r\n   *   Object containing all inherited attributes from parent elements with attribute\r\n   *   names as keys\r\n   * @param {Object[]|undefined} segmentTimeline\r\n   *        List of objects representing the attributes of each S element contained within\r\n   *        the SegmentTimeline element\r\n   * @return {Object.<Array>} list of segments\r\n   */\r\n\r\n  const segmentsFromList = (attributes, segmentTimeline) => {\r\n    const {\r\n      duration,\r\n      segmentUrls = [],\r\n      periodStart\r\n    } = attributes; // Per spec (5.3.9.2.1) no way to determine segment duration OR\r\n    // if both SegmentTimeline and @duration are defined, it is outside of spec.\r\n\r\n    if (!duration && !segmentTimeline || duration && segmentTimeline) {\r\n      throw new Error(errors.SEGMENT_TIME_UNSPECIFIED);\r\n    }\r\n    const segmentUrlMap = segmentUrls.map(segmentUrlObject => SegmentURLToSegmentObject(attributes, segmentUrlObject));\r\n    let segmentTimeInfo;\r\n    if (duration) {\r\n      segmentTimeInfo = parseByDuration(attributes);\r\n    }\r\n    if (segmentTimeline) {\r\n      segmentTimeInfo = parseByTimeline(attributes, segmentTimeline);\r\n    }\r\n    const segments = segmentTimeInfo.map((segmentTime, index) => {\r\n      if (segmentUrlMap[index]) {\r\n        const segment = segmentUrlMap[index]; // See DASH spec section 5.3.9.2.2\r\n        // - if timescale isn't present on any level, default to 1.\r\n\r\n        const timescale = attributes.timescale || 1; // - if presentationTimeOffset isn't present on any level, default to 0\r\n\r\n        const presentationTimeOffset = attributes.presentationTimeOffset || 0;\r\n        segment.timeline = segmentTime.timeline;\r\n        segment.duration = segmentTime.duration;\r\n        segment.number = segmentTime.number;\r\n        segment.presentationTime = periodStart + (segmentTime.time - presentationTimeOffset) / timescale;\r\n        return segment;\r\n      } // Since we're mapping we should get rid of any blank segments (in case\r\n      // the given SegmentTimeline is handling for more elements than we have\r\n      // SegmentURLs for).\r\n    }).filter(segment => segment);\r\n    return segments;\r\n  };\r\n  const generateSegments = ({\r\n    attributes,\r\n    segmentInfo\r\n  }) => {\r\n    let segmentAttributes;\r\n    let segmentsFn;\r\n    if (segmentInfo.template) {\r\n      segmentsFn = segmentsFromTemplate;\r\n      segmentAttributes = merge$1(attributes, segmentInfo.template);\r\n    } else if (segmentInfo.base) {\r\n      segmentsFn = segmentsFromBase;\r\n      segmentAttributes = merge$1(attributes, segmentInfo.base);\r\n    } else if (segmentInfo.list) {\r\n      segmentsFn = segmentsFromList;\r\n      segmentAttributes = merge$1(attributes, segmentInfo.list);\r\n    }\r\n    const segmentsInfo = {\r\n      attributes\r\n    };\r\n    if (!segmentsFn) {\r\n      return segmentsInfo;\r\n    }\r\n    const segments = segmentsFn(segmentAttributes, segmentInfo.segmentTimeline); // The @duration attribute will be used to determin the playlist's targetDuration which\r\n    // must be in seconds. Since we've generated the segment list, we no longer need\r\n    // @duration to be in @timescale units, so we can convert it here.\r\n\r\n    if (segmentAttributes.duration) {\r\n      const {\r\n        duration,\r\n        timescale = 1\r\n      } = segmentAttributes;\r\n      segmentAttributes.duration = duration / timescale;\r\n    } else if (segments.length) {\r\n      // if there is no @duration attribute, use the largest segment duration as\r\n      // as target duration\r\n      segmentAttributes.duration = segments.reduce((max, segment) => {\r\n        return Math.max(max, Math.ceil(segment.duration));\r\n      }, 0);\r\n    } else {\r\n      segmentAttributes.duration = 0;\r\n    }\r\n    segmentsInfo.attributes = segmentAttributes;\r\n    segmentsInfo.segments = segments; // This is a sidx box without actual segment information\r\n\r\n    if (segmentInfo.base && segmentAttributes.indexRange) {\r\n      segmentsInfo.sidx = segments[0];\r\n      segmentsInfo.segments = [];\r\n    }\r\n    return segmentsInfo;\r\n  };\r\n  const toPlaylists = representations => representations.map(generateSegments);\r\n  const findChildren = (element, name) => from(element.childNodes).filter(({\r\n    tagName\r\n  }) => tagName === name);\r\n  const getContent = element => element.textContent.trim();\r\n\r\n  /**\r\n   * Converts the provided string that may contain a division operation to a number.\r\n   *\r\n   * @param {string} value - the provided string value\r\n   *\r\n   * @return {number} the parsed string value\r\n   */\r\n  const parseDivisionValue = value => {\r\n    return parseFloat(value.split('/').reduce((prev, current) => prev / current));\r\n  };\r\n  const parseDuration = str => {\r\n    const SECONDS_IN_YEAR = 365 * 24 * 60 * 60;\r\n    const SECONDS_IN_MONTH = 30 * 24 * 60 * 60;\r\n    const SECONDS_IN_DAY = 24 * 60 * 60;\r\n    const SECONDS_IN_HOUR = 60 * 60;\r\n    const SECONDS_IN_MIN = 60; // P10Y10M10DT10H10M10.1S\r\n\r\n    const durationRegex = /P(?:(\\d*)Y)?(?:(\\d*)M)?(?:(\\d*)D)?(?:T(?:(\\d*)H)?(?:(\\d*)M)?(?:([\\d.]*)S)?)?/;\r\n    const match = durationRegex.exec(str);\r\n    if (!match) {\r\n      return 0;\r\n    }\r\n    const [year, month, day, hour, minute, second] = match.slice(1);\r\n    return parseFloat(year || 0) * SECONDS_IN_YEAR + parseFloat(month || 0) * SECONDS_IN_MONTH + parseFloat(day || 0) * SECONDS_IN_DAY + parseFloat(hour || 0) * SECONDS_IN_HOUR + parseFloat(minute || 0) * SECONDS_IN_MIN + parseFloat(second || 0);\r\n  };\r\n  const parseDate = str => {\r\n    // Date format without timezone according to ISO 8601\r\n    // YYY-MM-DDThh:mm:ss.ssssss\r\n    const dateRegex = /^\\d+-\\d+-\\d+T\\d+:\\d+:\\d+(\\.\\d+)?$/; // If the date string does not specifiy a timezone, we must specifiy UTC. This is\r\n    // expressed by ending with 'Z'\r\n\r\n    if (dateRegex.test(str)) {\r\n      str += 'Z';\r\n    }\r\n    return Date.parse(str);\r\n  };\r\n  const parsers = {\r\n    /**\r\n     * Specifies the duration of the entire Media Presentation. Format is a duration string\r\n     * as specified in ISO 8601\r\n     *\r\n     * @param {string} value\r\n     *        value of attribute as a string\r\n     * @return {number}\r\n     *         The duration in seconds\r\n     */\r\n    mediaPresentationDuration(value) {\r\n      return parseDuration(value);\r\n    },\r\n    /**\r\n     * Specifies the Segment availability start time for all Segments referred to in this\r\n     * MPD. For a dynamic manifest, it specifies the anchor for the earliest availability\r\n     * time. Format is a date string as specified in ISO 8601\r\n     *\r\n     * @param {string} value\r\n     *        value of attribute as a string\r\n     * @return {number}\r\n     *         The date as seconds from unix epoch\r\n     */\r\n    availabilityStartTime(value) {\r\n      return parseDate(value) / 1000;\r\n    },\r\n    /**\r\n     * Specifies the smallest period between potential changes to the MPD. Format is a\r\n     * duration string as specified in ISO 8601\r\n     *\r\n     * @param {string} value\r\n     *        value of attribute as a string\r\n     * @return {number}\r\n     *         The duration in seconds\r\n     */\r\n    minimumUpdatePeriod(value) {\r\n      return parseDuration(value);\r\n    },\r\n    /**\r\n     * Specifies the suggested presentation delay. Format is a\r\n     * duration string as specified in ISO 8601\r\n     *\r\n     * @param {string} value\r\n     *        value of attribute as a string\r\n     * @return {number}\r\n     *         The duration in seconds\r\n     */\r\n    suggestedPresentationDelay(value) {\r\n      return parseDuration(value);\r\n    },\r\n    /**\r\n     * specifices the type of mpd. Can be either \"static\" or \"dynamic\"\r\n     *\r\n     * @param {string} value\r\n     *        value of attribute as a string\r\n     *\r\n     * @return {string}\r\n     *         The type as a string\r\n     */\r\n    type(value) {\r\n      return value;\r\n    },\r\n    /**\r\n     * Specifies the duration of the smallest time shifting buffer for any Representation\r\n     * in the MPD. Format is a duration string as specified in ISO 8601\r\n     *\r\n     * @param {string} value\r\n     *        value of attribute as a string\r\n     * @return {number}\r\n     *         The duration in seconds\r\n     */\r\n    timeShiftBufferDepth(value) {\r\n      return parseDuration(value);\r\n    },\r\n    /**\r\n     * Specifies the PeriodStart time of the Period relative to the availabilityStarttime.\r\n     * Format is a duration string as specified in ISO 8601\r\n     *\r\n     * @param {string} value\r\n     *        value of attribute as a string\r\n     * @return {number}\r\n     *         The duration in seconds\r\n     */\r\n    start(value) {\r\n      return parseDuration(value);\r\n    },\r\n    /**\r\n     * Specifies the width of the visual presentation\r\n     *\r\n     * @param {string} value\r\n     *        value of attribute as a string\r\n     * @return {number}\r\n     *         The parsed width\r\n     */\r\n    width(value) {\r\n      return parseInt(value, 10);\r\n    },\r\n    /**\r\n     * Specifies the height of the visual presentation\r\n     *\r\n     * @param {string} value\r\n     *        value of attribute as a string\r\n     * @return {number}\r\n     *         The parsed height\r\n     */\r\n    height(value) {\r\n      return parseInt(value, 10);\r\n    },\r\n    /**\r\n     * Specifies the bitrate of the representation\r\n     *\r\n     * @param {string} value\r\n     *        value of attribute as a string\r\n     * @return {number}\r\n     *         The parsed bandwidth\r\n     */\r\n    bandwidth(value) {\r\n      return parseInt(value, 10);\r\n    },\r\n    /**\r\n     * Specifies the frame rate of the representation\r\n     *\r\n     * @param {string} value\r\n     *        value of attribute as a string\r\n     * @return {number}\r\n     *         The parsed frame rate\r\n     */\r\n    frameRate(value) {\r\n      return parseDivisionValue(value);\r\n    },\r\n    /**\r\n     * Specifies the number of the first Media Segment in this Representation in the Period\r\n     *\r\n     * @param {string} value\r\n     *        value of attribute as a string\r\n     * @return {number}\r\n     *         The parsed number\r\n     */\r\n    startNumber(value) {\r\n      return parseInt(value, 10);\r\n    },\r\n    /**\r\n     * Specifies the timescale in units per seconds\r\n     *\r\n     * @param {string} value\r\n     *        value of attribute as a string\r\n     * @return {number}\r\n     *         The parsed timescale\r\n     */\r\n    timescale(value) {\r\n      return parseInt(value, 10);\r\n    },\r\n    /**\r\n     * Specifies the presentationTimeOffset.\r\n     *\r\n     * @param {string} value\r\n     *        value of the attribute as a string\r\n     *\r\n     * @return {number}\r\n     *         The parsed presentationTimeOffset\r\n     */\r\n    presentationTimeOffset(value) {\r\n      return parseInt(value, 10);\r\n    },\r\n    /**\r\n     * Specifies the constant approximate Segment duration\r\n     * NOTE: The <Period> element also contains an @duration attribute. This duration\r\n     *       specifies the duration of the Period. This attribute is currently not\r\n     *       supported by the rest of the parser, however we still check for it to prevent\r\n     *       errors.\r\n     *\r\n     * @param {string} value\r\n     *        value of attribute as a string\r\n     * @return {number}\r\n     *         The parsed duration\r\n     */\r\n    duration(value) {\r\n      const parsedValue = parseInt(value, 10);\r\n      if (isNaN(parsedValue)) {\r\n        return parseDuration(value);\r\n      }\r\n      return parsedValue;\r\n    },\r\n    /**\r\n     * Specifies the Segment duration, in units of the value of the @timescale.\r\n     *\r\n     * @param {string} value\r\n     *        value of attribute as a string\r\n     * @return {number}\r\n     *         The parsed duration\r\n     */\r\n    d(value) {\r\n      return parseInt(value, 10);\r\n    },\r\n    /**\r\n     * Specifies the MPD start time, in @timescale units, the first Segment in the series\r\n     * starts relative to the beginning of the Period\r\n     *\r\n     * @param {string} value\r\n     *        value of attribute as a string\r\n     * @return {number}\r\n     *         The parsed time\r\n     */\r\n    t(value) {\r\n      return parseInt(value, 10);\r\n    },\r\n    /**\r\n     * Specifies the repeat count of the number of following contiguous Segments with the\r\n     * same duration expressed by the value of @d\r\n     *\r\n     * @param {string} value\r\n     *        value of attribute as a string\r\n     * @return {number}\r\n     *         The parsed number\r\n     */\r\n    r(value) {\r\n      return parseInt(value, 10);\r\n    },\r\n    /**\r\n     * Specifies the presentationTime.\r\n     *\r\n     * @param {string} value\r\n     *        value of the attribute as a string\r\n     *\r\n     * @return {number}\r\n     *         The parsed presentationTime\r\n     */\r\n    presentationTime(value) {\r\n      return parseInt(value, 10);\r\n    },\r\n    /**\r\n     * Default parser for all other attributes. Acts as a no-op and just returns the value\r\n     * as a string\r\n     *\r\n     * @param {string} value\r\n     *        value of attribute as a string\r\n     * @return {string}\r\n     *         Unparsed value\r\n     */\r\n    DEFAULT(value) {\r\n      return value;\r\n    }\r\n  };\r\n  /**\r\n   * Gets all the attributes and values of the provided node, parses attributes with known\r\n   * types, and returns an object with attribute names mapped to values.\r\n   *\r\n   * @param {Node} el\r\n   *        The node to parse attributes from\r\n   * @return {Object}\r\n   *         Object with all attributes of el parsed\r\n   */\r\n\r\n  const parseAttributes = el => {\r\n    if (!(el && el.attributes)) {\r\n      return {};\r\n    }\r\n    return from(el.attributes).reduce((a, e) => {\r\n      const parseFn = parsers[e.name] || parsers.DEFAULT;\r\n      a[e.name] = parseFn(e.value);\r\n      return a;\r\n    }, {});\r\n  };\r\n  const keySystemsMap = {\r\n    'urn:uuid:1077efec-c0b2-4d02-ace3-3c1e52e2fb4b': 'org.w3.clearkey',\r\n    'urn:uuid:edef8ba9-79d6-4ace-a3c8-27dcd51d21ed': 'com.widevine.alpha',\r\n    'urn:uuid:9a04f079-9840-4286-ab92-e65be0885f95': 'com.microsoft.playready',\r\n    'urn:uuid:f239e769-efa3-4850-9c16-a903c6932efb': 'com.adobe.primetime',\r\n    // ISO_IEC 23009-1_2022 5.8.5.2.2 The mp4 Protection Scheme\r\n    'urn:mpeg:dash:mp4protection:2011': 'mp4protection'\r\n  };\r\n  /**\r\n   * Builds a list of urls that is the product of the reference urls and BaseURL values\r\n   *\r\n   * @param {Object[]} references\r\n   *        List of objects containing the reference URL as well as its attributes\r\n   * @param {Node[]} baseUrlElements\r\n   *        List of BaseURL nodes from the mpd\r\n   * @return {Object[]}\r\n   *         List of objects with resolved urls and attributes\r\n   */\r\n\r\n  const buildBaseUrls = (references, baseUrlElements) => {\r\n    if (!baseUrlElements.length) {\r\n      return references;\r\n    }\r\n    return flatten(references.map(function (reference) {\r\n      return baseUrlElements.map(function (baseUrlElement) {\r\n        const initialBaseUrl = getContent(baseUrlElement);\r\n        const resolvedBaseUrl = resolveUrl$1(reference.baseUrl, initialBaseUrl);\r\n        const finalBaseUrl = merge$1(parseAttributes(baseUrlElement), {\r\n          baseUrl: resolvedBaseUrl\r\n        }); // If the URL is resolved, we want to get the serviceLocation from the reference\r\n        // assuming there is no serviceLocation on the initialBaseUrl\r\n\r\n        if (resolvedBaseUrl !== initialBaseUrl && !finalBaseUrl.serviceLocation && reference.serviceLocation) {\r\n          finalBaseUrl.serviceLocation = reference.serviceLocation;\r\n        }\r\n        return finalBaseUrl;\r\n      });\r\n    }));\r\n  };\r\n  /**\r\n   * Contains all Segment information for its containing AdaptationSet\r\n   *\r\n   * @typedef {Object} SegmentInformation\r\n   * @property {Object|undefined} template\r\n   *           Contains the attributes for the SegmentTemplate node\r\n   * @property {Object[]|undefined} segmentTimeline\r\n   *           Contains a list of atrributes for each S node within the SegmentTimeline node\r\n   * @property {Object|undefined} list\r\n   *           Contains the attributes for the SegmentList node\r\n   * @property {Object|undefined} base\r\n   *           Contains the attributes for the SegmentBase node\r\n   */\r\n\r\n  /**\r\n   * Returns all available Segment information contained within the AdaptationSet node\r\n   *\r\n   * @param {Node} adaptationSet\r\n   *        The AdaptationSet node to get Segment information from\r\n   * @return {SegmentInformation}\r\n   *         The Segment information contained within the provided AdaptationSet\r\n   */\r\n\r\n  const getSegmentInformation = adaptationSet => {\r\n    const segmentTemplate = findChildren(adaptationSet, 'SegmentTemplate')[0];\r\n    const segmentList = findChildren(adaptationSet, 'SegmentList')[0];\r\n    const segmentUrls = segmentList && findChildren(segmentList, 'SegmentURL').map(s => merge$1({\r\n      tag: 'SegmentURL'\r\n    }, parseAttributes(s)));\r\n    const segmentBase = findChildren(adaptationSet, 'SegmentBase')[0];\r\n    const segmentTimelineParentNode = segmentList || segmentTemplate;\r\n    const segmentTimeline = segmentTimelineParentNode && findChildren(segmentTimelineParentNode, 'SegmentTimeline')[0];\r\n    const segmentInitializationParentNode = segmentList || segmentBase || segmentTemplate;\r\n    const segmentInitialization = segmentInitializationParentNode && findChildren(segmentInitializationParentNode, 'Initialization')[0]; // SegmentTemplate is handled slightly differently, since it can have both\r\n    // @initialization and an <Initialization> node.  @initialization can be templated,\r\n    // while the node can have a url and range specified.  If the <SegmentTemplate> has\r\n    // both @initialization and an <Initialization> subelement we opt to override with\r\n    // the node, as this interaction is not defined in the spec.\r\n\r\n    const template = segmentTemplate && parseAttributes(segmentTemplate);\r\n    if (template && segmentInitialization) {\r\n      template.initialization = segmentInitialization && parseAttributes(segmentInitialization);\r\n    } else if (template && template.initialization) {\r\n      // If it is @initialization we convert it to an object since this is the format that\r\n      // later functions will rely on for the initialization segment.  This is only valid\r\n      // for <SegmentTemplate>\r\n      template.initialization = {\r\n        sourceURL: template.initialization\r\n      };\r\n    }\r\n    const segmentInfo = {\r\n      template,\r\n      segmentTimeline: segmentTimeline && findChildren(segmentTimeline, 'S').map(s => parseAttributes(s)),\r\n      list: segmentList && merge$1(parseAttributes(segmentList), {\r\n        segmentUrls,\r\n        initialization: parseAttributes(segmentInitialization)\r\n      }),\r\n      base: segmentBase && merge$1(parseAttributes(segmentBase), {\r\n        initialization: parseAttributes(segmentInitialization)\r\n      })\r\n    };\r\n    Object.keys(segmentInfo).forEach(key => {\r\n      if (!segmentInfo[key]) {\r\n        delete segmentInfo[key];\r\n      }\r\n    });\r\n    return segmentInfo;\r\n  };\r\n  /**\r\n   * Contains Segment information and attributes needed to construct a Playlist object\r\n   * from a Representation\r\n   *\r\n   * @typedef {Object} RepresentationInformation\r\n   * @property {SegmentInformation} segmentInfo\r\n   *           Segment information for this Representation\r\n   * @property {Object} attributes\r\n   *           Inherited attributes for this Representation\r\n   */\r\n\r\n  /**\r\n   * Maps a Representation node to an object containing Segment information and attributes\r\n   *\r\n   * @name inheritBaseUrlsCallback\r\n   * @function\r\n   * @param {Node} representation\r\n   *        Representation node from the mpd\r\n   * @return {RepresentationInformation}\r\n   *         Representation information needed to construct a Playlist object\r\n   */\r\n\r\n  /**\r\n   * Returns a callback for Array.prototype.map for mapping Representation nodes to\r\n   * Segment information and attributes using inherited BaseURL nodes.\r\n   *\r\n   * @param {Object} adaptationSetAttributes\r\n   *        Contains attributes inherited by the AdaptationSet\r\n   * @param {Object[]} adaptationSetBaseUrls\r\n   *        List of objects containing resolved base URLs and attributes\r\n   *        inherited by the AdaptationSet\r\n   * @param {SegmentInformation} adaptationSetSegmentInfo\r\n   *        Contains Segment information for the AdaptationSet\r\n   * @return {inheritBaseUrlsCallback}\r\n   *         Callback map function\r\n   */\r\n\r\n  const inheritBaseUrls = (adaptationSetAttributes, adaptationSetBaseUrls, adaptationSetSegmentInfo) => representation => {\r\n    const repBaseUrlElements = findChildren(representation, 'BaseURL');\r\n    const repBaseUrls = buildBaseUrls(adaptationSetBaseUrls, repBaseUrlElements);\r\n    const attributes = merge$1(adaptationSetAttributes, parseAttributes(representation));\r\n    const representationSegmentInfo = getSegmentInformation(representation);\r\n    return repBaseUrls.map(baseUrl => {\r\n      return {\r\n        segmentInfo: merge$1(adaptationSetSegmentInfo, representationSegmentInfo),\r\n        attributes: merge$1(attributes, baseUrl)\r\n      };\r\n    });\r\n  };\r\n  /**\r\n   * Tranforms a series of content protection nodes to\r\n   * an object containing pssh data by key system\r\n   *\r\n   * @param {Node[]} contentProtectionNodes\r\n   *        Content protection nodes\r\n   * @return {Object}\r\n   *        Object containing pssh data by key system\r\n   */\r\n\r\n  const generateKeySystemInformation = contentProtectionNodes => {\r\n    return contentProtectionNodes.reduce((acc, node) => {\r\n      const attributes = parseAttributes(node); // Although it could be argued that according to the UUID RFC spec the UUID string (a-f chars) should be generated\r\n      // as a lowercase string it also mentions it should be treated as case-insensitive on input. Since the key system\r\n      // UUIDs in the keySystemsMap are hardcoded as lowercase in the codebase there isn't any reason not to do\r\n      // .toLowerCase() on the input UUID string from the manifest (at least I could not think of one).\r\n\r\n      if (attributes.schemeIdUri) {\r\n        attributes.schemeIdUri = attributes.schemeIdUri.toLowerCase();\r\n      }\r\n      const keySystem = keySystemsMap[attributes.schemeIdUri];\r\n      if (keySystem) {\r\n        acc[keySystem] = {\r\n          attributes\r\n        };\r\n        const psshNode = findChildren(node, 'cenc:pssh')[0];\r\n        if (psshNode) {\r\n          const pssh = getContent(psshNode);\r\n          acc[keySystem].pssh = pssh && decodeB64ToUint8Array(pssh);\r\n        }\r\n      }\r\n      return acc;\r\n    }, {});\r\n  }; // defined in ANSI_SCTE 214-1 2016\r\n\r\n  const parseCaptionServiceMetadata = service => {\r\n    // 608 captions\r\n    if (service.schemeIdUri === 'urn:scte:dash:cc:cea-608:2015') {\r\n      const values = typeof service.value !== 'string' ? [] : service.value.split(';');\r\n      return values.map(value => {\r\n        let channel;\r\n        let language; // default language to value\r\n\r\n        language = value;\r\n        if (/^CC\\d=/.test(value)) {\r\n          [channel, language] = value.split('=');\r\n        } else if (/^CC\\d$/.test(value)) {\r\n          channel = value;\r\n        }\r\n        return {\r\n          channel,\r\n          language\r\n        };\r\n      });\r\n    } else if (service.schemeIdUri === 'urn:scte:dash:cc:cea-708:2015') {\r\n      const values = typeof service.value !== 'string' ? [] : service.value.split(';');\r\n      return values.map(value => {\r\n        const flags = {\r\n          // service or channel number 1-63\r\n          'channel': undefined,\r\n          // language is a 3ALPHA per ISO 639.2/B\r\n          // field is required\r\n          'language': undefined,\r\n          // BIT 1/0 or ?\r\n          // default value is 1, meaning 16:9 aspect ratio, 0 is 4:3, ? is unknown\r\n          'aspectRatio': 1,\r\n          // BIT 1/0\r\n          // easy reader flag indicated the text is tailed to the needs of beginning readers\r\n          // default 0, or off\r\n          'easyReader': 0,\r\n          // BIT 1/0\r\n          // If 3d metadata is present (CEA-708.1) then 1\r\n          // default 0\r\n          '3D': 0\r\n        };\r\n        if (/=/.test(value)) {\r\n          const [channel, opts = ''] = value.split('=');\r\n          flags.channel = channel;\r\n          flags.language = value;\r\n          opts.split(',').forEach(opt => {\r\n            const [name, val] = opt.split(':');\r\n            if (name === 'lang') {\r\n              flags.language = val; // er for easyReadery\r\n            } else if (name === 'er') {\r\n              flags.easyReader = Number(val); // war for wide aspect ratio\r\n            } else if (name === 'war') {\r\n              flags.aspectRatio = Number(val);\r\n            } else if (name === '3D') {\r\n              flags['3D'] = Number(val);\r\n            }\r\n          });\r\n        } else {\r\n          flags.language = value;\r\n        }\r\n        if (flags.channel) {\r\n          flags.channel = 'SERVICE' + flags.channel;\r\n        }\r\n        return flags;\r\n      });\r\n    }\r\n  };\r\n  /**\r\n   * A map callback that will parse all event stream data for a collection of periods\r\n   * DASH ISO_IEC_23009 5.10.2.2\r\n   * https://dashif-documents.azurewebsites.net/Events/master/event.html#mpd-event-timing\r\n   *\r\n   * @param {PeriodInformation} period object containing necessary period information\r\n   * @return a collection of parsed eventstream event objects\r\n   */\r\n\r\n  const toEventStream = period => {\r\n    // get and flatten all EventStreams tags and parse attributes and children\r\n    return flatten(findChildren(period.node, 'EventStream').map(eventStream => {\r\n      const eventStreamAttributes = parseAttributes(eventStream);\r\n      const schemeIdUri = eventStreamAttributes.schemeIdUri; // find all Events per EventStream tag and map to return objects\r\n\r\n      return findChildren(eventStream, 'Event').map(event => {\r\n        const eventAttributes = parseAttributes(event);\r\n        const presentationTime = eventAttributes.presentationTime || 0;\r\n        const timescale = eventStreamAttributes.timescale || 1;\r\n        const duration = eventAttributes.duration || 0;\r\n        const start = presentationTime / timescale + period.attributes.start;\r\n        return {\r\n          schemeIdUri,\r\n          value: eventStreamAttributes.value,\r\n          id: eventAttributes.id,\r\n          start,\r\n          end: start + duration / timescale,\r\n          messageData: getContent(event) || eventAttributes.messageData,\r\n          contentEncoding: eventStreamAttributes.contentEncoding,\r\n          presentationTimeOffset: eventStreamAttributes.presentationTimeOffset || 0\r\n        };\r\n      });\r\n    }));\r\n  };\r\n  /**\r\n   * Maps an AdaptationSet node to a list of Representation information objects\r\n   *\r\n   * @name toRepresentationsCallback\r\n   * @function\r\n   * @param {Node} adaptationSet\r\n   *        AdaptationSet node from the mpd\r\n   * @return {RepresentationInformation[]}\r\n   *         List of objects containing Representaion information\r\n   */\r\n\r\n  /**\r\n   * Returns a callback for Array.prototype.map for mapping AdaptationSet nodes to a list of\r\n   * Representation information objects\r\n   *\r\n   * @param {Object} periodAttributes\r\n   *        Contains attributes inherited by the Period\r\n   * @param {Object[]} periodBaseUrls\r\n   *        Contains list of objects with resolved base urls and attributes\r\n   *        inherited by the Period\r\n   * @param {string[]} periodSegmentInfo\r\n   *        Contains Segment Information at the period level\r\n   * @return {toRepresentationsCallback}\r\n   *         Callback map function\r\n   */\r\n\r\n  const toRepresentations = (periodAttributes, periodBaseUrls, periodSegmentInfo) => adaptationSet => {\r\n    const adaptationSetAttributes = parseAttributes(adaptationSet);\r\n    const adaptationSetBaseUrls = buildBaseUrls(periodBaseUrls, findChildren(adaptationSet, 'BaseURL'));\r\n    const role = findChildren(adaptationSet, 'Role')[0];\r\n    const roleAttributes = {\r\n      role: parseAttributes(role)\r\n    };\r\n    let attrs = merge$1(periodAttributes, adaptationSetAttributes, roleAttributes);\r\n    const accessibility = findChildren(adaptationSet, 'Accessibility')[0];\r\n    const captionServices = parseCaptionServiceMetadata(parseAttributes(accessibility));\r\n    if (captionServices) {\r\n      attrs = merge$1(attrs, {\r\n        captionServices\r\n      });\r\n    }\r\n    const label = findChildren(adaptationSet, 'Label')[0];\r\n    if (label && label.childNodes.length) {\r\n      const labelVal = label.childNodes[0].nodeValue.trim();\r\n      attrs = merge$1(attrs, {\r\n        label: labelVal\r\n      });\r\n    }\r\n    const contentProtection = generateKeySystemInformation(findChildren(adaptationSet, 'ContentProtection'));\r\n    if (Object.keys(contentProtection).length) {\r\n      attrs = merge$1(attrs, {\r\n        contentProtection\r\n      });\r\n    }\r\n    const segmentInfo = getSegmentInformation(adaptationSet);\r\n    const representations = findChildren(adaptationSet, 'Representation');\r\n    const adaptationSetSegmentInfo = merge$1(periodSegmentInfo, segmentInfo);\r\n    return flatten(representations.map(inheritBaseUrls(attrs, adaptationSetBaseUrls, adaptationSetSegmentInfo)));\r\n  };\r\n  /**\r\n   * Contains all period information for mapping nodes onto adaptation sets.\r\n   *\r\n   * @typedef {Object} PeriodInformation\r\n   * @property {Node} period.node\r\n   *           Period node from the mpd\r\n   * @property {Object} period.attributes\r\n   *           Parsed period attributes from node plus any added\r\n   */\r\n\r\n  /**\r\n   * Maps a PeriodInformation object to a list of Representation information objects for all\r\n   * AdaptationSet nodes contained within the Period.\r\n   *\r\n   * @name toAdaptationSetsCallback\r\n   * @function\r\n   * @param {PeriodInformation} period\r\n   *        Period object containing necessary period information\r\n   * @param {number} periodStart\r\n   *        Start time of the Period within the mpd\r\n   * @return {RepresentationInformation[]}\r\n   *         List of objects containing Representaion information\r\n   */\r\n\r\n  /**\r\n   * Returns a callback for Array.prototype.map for mapping Period nodes to a list of\r\n   * Representation information objects\r\n   *\r\n   * @param {Object} mpdAttributes\r\n   *        Contains attributes inherited by the mpd\r\n    * @param {Object[]} mpdBaseUrls\r\n   *        Contains list of objects with resolved base urls and attributes\r\n   *        inherited by the mpd\r\n   * @return {toAdaptationSetsCallback}\r\n   *         Callback map function\r\n   */\r\n\r\n  const toAdaptationSets = (mpdAttributes, mpdBaseUrls) => (period, index) => {\r\n    const periodBaseUrls = buildBaseUrls(mpdBaseUrls, findChildren(period.node, 'BaseURL'));\r\n    const periodAttributes = merge$1(mpdAttributes, {\r\n      periodStart: period.attributes.start\r\n    });\r\n    if (typeof period.attributes.duration === 'number') {\r\n      periodAttributes.periodDuration = period.attributes.duration;\r\n    }\r\n    const adaptationSets = findChildren(period.node, 'AdaptationSet');\r\n    const periodSegmentInfo = getSegmentInformation(period.node);\r\n    return flatten(adaptationSets.map(toRepresentations(periodAttributes, periodBaseUrls, periodSegmentInfo)));\r\n  };\r\n  /**\r\n   * Tranforms an array of content steering nodes into an object\r\n   * containing CDN content steering information from the MPD manifest.\r\n   *\r\n   * For more information on the DASH spec for Content Steering parsing, see:\r\n   * https://dashif.org/docs/DASH-IF-CTS-00XX-Content-Steering-Community-Review.pdf\r\n   *\r\n   * @param {Node[]} contentSteeringNodes\r\n   *        Content steering nodes\r\n   * @param {Function} eventHandler\r\n   *        The event handler passed into the parser options to handle warnings\r\n   * @return {Object}\r\n   *        Object containing content steering data\r\n   */\r\n\r\n  const generateContentSteeringInformation = (contentSteeringNodes, eventHandler) => {\r\n    // If there are more than one ContentSteering tags, throw an error\r\n    if (contentSteeringNodes.length > 1) {\r\n      eventHandler({\r\n        type: 'warn',\r\n        message: 'The MPD manifest should contain no more than one ContentSteering tag'\r\n      });\r\n    } // Return a null value if there are no ContentSteering tags\r\n\r\n    if (!contentSteeringNodes.length) {\r\n      return null;\r\n    }\r\n    const infoFromContentSteeringTag = merge$1({\r\n      serverURL: getContent(contentSteeringNodes[0])\r\n    }, parseAttributes(contentSteeringNodes[0])); // Converts `queryBeforeStart` to a boolean, as well as setting the default value\r\n    // to `false` if it doesn't exist\r\n\r\n    infoFromContentSteeringTag.queryBeforeStart = infoFromContentSteeringTag.queryBeforeStart === 'true';\r\n    return infoFromContentSteeringTag;\r\n  };\r\n  /**\r\n   * Gets Period@start property for a given period.\r\n   *\r\n   * @param {Object} options\r\n   *        Options object\r\n   * @param {Object} options.attributes\r\n   *        Period attributes\r\n   * @param {Object} [options.priorPeriodAttributes]\r\n   *        Prior period attributes (if prior period is available)\r\n   * @param {string} options.mpdType\r\n   *        The MPD@type these periods came from\r\n   * @return {number|null}\r\n   *         The period start, or null if it's an early available period or error\r\n   */\r\n\r\n  const getPeriodStart = ({\r\n    attributes,\r\n    priorPeriodAttributes,\r\n    mpdType\r\n  }) => {\r\n    // Summary of period start time calculation from DASH spec section 5.3.2.1\r\n    //\r\n    // A period's start is the first period's start + time elapsed after playing all\r\n    // prior periods to this one. Periods continue one after the other in time (without\r\n    // gaps) until the end of the presentation.\r\n    //\r\n    // The value of Period@start should be:\r\n    // 1. if Period@start is present: value of Period@start\r\n    // 2. if previous period exists and it has @duration: previous Period@start +\r\n    //    previous Period@duration\r\n    // 3. if this is first period and MPD@type is 'static': 0\r\n    // 4. in all other cases, consider the period an \"early available period\" (note: not\r\n    //    currently supported)\r\n    // (1)\r\n    if (typeof attributes.start === 'number') {\r\n      return attributes.start;\r\n    } // (2)\r\n\r\n    if (priorPeriodAttributes && typeof priorPeriodAttributes.start === 'number' && typeof priorPeriodAttributes.duration === 'number') {\r\n      return priorPeriodAttributes.start + priorPeriodAttributes.duration;\r\n    } // (3)\r\n\r\n    if (!priorPeriodAttributes && mpdType === 'static') {\r\n      return 0;\r\n    } // (4)\r\n    // There is currently no logic for calculating the Period@start value if there is\r\n    // no Period@start or prior Period@start and Period@duration available. This is not made\r\n    // explicit by the DASH interop guidelines or the DASH spec, however, since there's\r\n    // nothing about any other resolution strategies, it's implied. Thus, this case should\r\n    // be considered an early available period, or error, and null should suffice for both\r\n    // of those cases.\r\n\r\n    return null;\r\n  };\r\n  /**\r\n   * Traverses the mpd xml tree to generate a list of Representation information objects\r\n   * that have inherited attributes from parent nodes\r\n   *\r\n   * @param {Node} mpd\r\n   *        The root node of the mpd\r\n   * @param {Object} options\r\n   *        Available options for inheritAttributes\r\n   * @param {string} options.manifestUri\r\n   *        The uri source of the mpd\r\n   * @param {number} options.NOW\r\n   *        Current time per DASH IOP.  Default is current time in ms since epoch\r\n   * @param {number} options.clientOffset\r\n   *        Client time difference from NOW (in milliseconds)\r\n   * @return {RepresentationInformation[]}\r\n   *         List of objects containing Representation information\r\n   */\r\n\r\n  const inheritAttributes = (mpd, options = {}) => {\r\n    const {\r\n      manifestUri = '',\r\n      NOW = Date.now(),\r\n      clientOffset = 0,\r\n      // TODO: For now, we are expecting an eventHandler callback function\r\n      // to be passed into the mpd parser as an option.\r\n      // In the future, we should enable stream parsing by using the Stream class from vhs-utils.\r\n      // This will support new features including a standardized event handler.\r\n      // See the m3u8 parser for examples of how stream parsing is currently used for HLS parsing.\r\n      // https://github.com/videojs/vhs-utils/blob/88d6e10c631e57a5af02c5a62bc7376cd456b4f5/src/stream.js#L9\r\n      eventHandler = function () {}\r\n    } = options;\r\n    const periodNodes = findChildren(mpd, 'Period');\r\n    if (!periodNodes.length) {\r\n      throw new Error(errors.INVALID_NUMBER_OF_PERIOD);\r\n    }\r\n    const locations = findChildren(mpd, 'Location');\r\n    const mpdAttributes = parseAttributes(mpd);\r\n    const mpdBaseUrls = buildBaseUrls([{\r\n      baseUrl: manifestUri\r\n    }], findChildren(mpd, 'BaseURL'));\r\n    const contentSteeringNodes = findChildren(mpd, 'ContentSteering'); // See DASH spec section 5.3.1.2, Semantics of MPD element. Default type to 'static'.\r\n\r\n    mpdAttributes.type = mpdAttributes.type || 'static';\r\n    mpdAttributes.sourceDuration = mpdAttributes.mediaPresentationDuration || 0;\r\n    mpdAttributes.NOW = NOW;\r\n    mpdAttributes.clientOffset = clientOffset;\r\n    if (locations.length) {\r\n      mpdAttributes.locations = locations.map(getContent);\r\n    }\r\n    const periods = []; // Since toAdaptationSets acts on individual periods right now, the simplest approach to\r\n    // adding properties that require looking at prior periods is to parse attributes and add\r\n    // missing ones before toAdaptationSets is called. If more such properties are added, it\r\n    // may be better to refactor toAdaptationSets.\r\n\r\n    periodNodes.forEach((node, index) => {\r\n      const attributes = parseAttributes(node); // Use the last modified prior period, as it may contain added information necessary\r\n      // for this period.\r\n\r\n      const priorPeriod = periods[index - 1];\r\n      attributes.start = getPeriodStart({\r\n        attributes,\r\n        priorPeriodAttributes: priorPeriod ? priorPeriod.attributes : null,\r\n        mpdType: mpdAttributes.type\r\n      });\r\n      periods.push({\r\n        node,\r\n        attributes\r\n      });\r\n    });\r\n    return {\r\n      locations: mpdAttributes.locations,\r\n      contentSteeringInfo: generateContentSteeringInformation(contentSteeringNodes, eventHandler),\r\n      // TODO: There are occurences where this `representationInfo` array contains undesired\r\n      // duplicates. This generally occurs when there are multiple BaseURL nodes that are\r\n      // direct children of the MPD node. When we attempt to resolve URLs from a combination of the\r\n      // parent BaseURL and a child BaseURL, and the value does not resolve,\r\n      // we end up returning the child BaseURL multiple times.\r\n      // We need to determine a way to remove these duplicates in a safe way.\r\n      // See: https://github.com/videojs/mpd-parser/pull/17#discussion_r162750527\r\n      representationInfo: flatten(periods.map(toAdaptationSets(mpdAttributes, mpdBaseUrls))),\r\n      eventStream: flatten(periods.map(toEventStream))\r\n    };\r\n  };\r\n  const stringToMpdXml = manifestString => {\r\n    if (manifestString === '') {\r\n      throw new Error(errors.DASH_EMPTY_MANIFEST);\r\n    }\r\n    const parser = new DOMParser();\r\n    let xml;\r\n    let mpd;\r\n    try {\r\n      xml = parser.parseFromString(manifestString, 'application/xml');\r\n      mpd = xml && xml.documentElement.tagName === 'MPD' ? xml.documentElement : null;\r\n    } catch (e) {// ie 11 throws on invalid xml\r\n    }\r\n    if (!mpd || mpd && mpd.getElementsByTagName('parsererror').length > 0) {\r\n      throw new Error(errors.DASH_INVALID_XML);\r\n    }\r\n    return mpd;\r\n  };\r\n\r\n  /**\r\n   * Parses the manifest for a UTCTiming node, returning the nodes attributes if found\r\n   *\r\n   * @param {string} mpd\r\n   *        XML string of the MPD manifest\r\n   * @return {Object|null}\r\n   *         Attributes of UTCTiming node specified in the manifest. Null if none found\r\n   */\r\n\r\n  const parseUTCTimingScheme = mpd => {\r\n    const UTCTimingNode = findChildren(mpd, 'UTCTiming')[0];\r\n    if (!UTCTimingNode) {\r\n      return null;\r\n    }\r\n    const attributes = parseAttributes(UTCTimingNode);\r\n    switch (attributes.schemeIdUri) {\r\n      case 'urn:mpeg:dash:utc:http-head:2014':\r\n      case 'urn:mpeg:dash:utc:http-head:2012':\r\n        attributes.method = 'HEAD';\r\n        break;\r\n      case 'urn:mpeg:dash:utc:http-xsdate:2014':\r\n      case 'urn:mpeg:dash:utc:http-iso:2014':\r\n      case 'urn:mpeg:dash:utc:http-xsdate:2012':\r\n      case 'urn:mpeg:dash:utc:http-iso:2012':\r\n        attributes.method = 'GET';\r\n        break;\r\n      case 'urn:mpeg:dash:utc:direct:2014':\r\n      case 'urn:mpeg:dash:utc:direct:2012':\r\n        attributes.method = 'DIRECT';\r\n        attributes.value = Date.parse(attributes.value);\r\n        break;\r\n      case 'urn:mpeg:dash:utc:http-ntp:2014':\r\n      case 'urn:mpeg:dash:utc:ntp:2014':\r\n      case 'urn:mpeg:dash:utc:sntp:2014':\r\n      default:\r\n        throw new Error(errors.UNSUPPORTED_UTC_TIMING_SCHEME);\r\n    }\r\n    return attributes;\r\n  };\r\n  /*\r\n   * Given a DASH manifest string and options, parses the DASH manifest into an object in the\r\n   * form outputed by m3u8-parser and accepted by videojs/http-streaming.\r\n   *\r\n   * For live DASH manifests, if `previousManifest` is provided in options, then the newly\r\n   * parsed DASH manifest will have its media sequence and discontinuity sequence values\r\n   * updated to reflect its position relative to the prior manifest.\r\n   *\r\n   * @param {string} manifestString - the DASH manifest as a string\r\n   * @param {options} [options] - any options\r\n   *\r\n   * @return {Object} the manifest object\r\n   */\r\n\r\n  const parse = (manifestString, options = {}) => {\r\n    const parsedManifestInfo = inheritAttributes(stringToMpdXml(manifestString), options);\r\n    const playlists = toPlaylists(parsedManifestInfo.representationInfo);\r\n    return toM3u8({\r\n      dashPlaylists: playlists,\r\n      locations: parsedManifestInfo.locations,\r\n      contentSteering: parsedManifestInfo.contentSteeringInfo,\r\n      sidxMapping: options.sidxMapping,\r\n      previousManifest: options.previousManifest,\r\n      eventStream: parsedManifestInfo.eventStream\r\n    });\r\n  };\r\n  /**\r\n   * Parses the manifest for a UTCTiming node, returning the nodes attributes if found\r\n   *\r\n   * @param {string} manifestString\r\n   *        XML string of the MPD manifest\r\n   * @return {Object|null}\r\n   *         Attributes of UTCTiming node specified in the manifest. Null if none found\r\n   */\r\n\r\n  const parseUTCTiming = manifestString => parseUTCTimingScheme(stringToMpdXml(manifestString));\r\n\r\n  var MAX_UINT32 = Math.pow(2, 32);\r\n  var getUint64$1 = function (uint8) {\r\n    var dv = new DataView(uint8.buffer, uint8.byteOffset, uint8.byteLength);\r\n    var value;\r\n    if (dv.getBigUint64) {\r\n      value = dv.getBigUint64(0);\r\n      if (value < Number.MAX_SAFE_INTEGER) {\r\n        return Number(value);\r\n      }\r\n      return value;\r\n    }\r\n    return dv.getUint32(0) * MAX_UINT32 + dv.getUint32(4);\r\n  };\r\n  var numbers = {\r\n    getUint64: getUint64$1,\r\n    MAX_UINT32: MAX_UINT32\r\n  };\r\n\r\n  var getUint64 = numbers.getUint64;\r\n  var parseSidx = function (data) {\r\n    var view = new DataView(data.buffer, data.byteOffset, data.byteLength),\r\n      result = {\r\n        version: data[0],\r\n        flags: new Uint8Array(data.subarray(1, 4)),\r\n        references: [],\r\n        referenceId: view.getUint32(4),\r\n        timescale: view.getUint32(8)\r\n      },\r\n      i = 12;\r\n    if (result.version === 0) {\r\n      result.earliestPresentationTime = view.getUint32(i);\r\n      result.firstOffset = view.getUint32(i + 4);\r\n      i += 8;\r\n    } else {\r\n      // read 64 bits\r\n      result.earliestPresentationTime = getUint64(data.subarray(i));\r\n      result.firstOffset = getUint64(data.subarray(i + 8));\r\n      i += 16;\r\n    }\r\n    i += 2; // reserved\r\n\r\n    var referenceCount = view.getUint16(i);\r\n    i += 2; // start of references\r\n\r\n    for (; referenceCount > 0; i += 12, referenceCount--) {\r\n      result.references.push({\r\n        referenceType: (data[i] & 0x80) >>> 7,\r\n        referencedSize: view.getUint32(i) & 0x7FFFFFFF,\r\n        subsegmentDuration: view.getUint32(i + 4),\r\n        startsWithSap: !!(data[i + 8] & 0x80),\r\n        sapType: (data[i + 8] & 0x70) >>> 4,\r\n        sapDeltaTime: view.getUint32(i + 8) & 0x0FFFFFFF\r\n      });\r\n    }\r\n    return result;\r\n  };\r\n  var parseSidx_1 = parseSidx;\r\n\r\n  var ID3 = toUint8([0x49, 0x44, 0x33]);\r\n  var getId3Size = function getId3Size(bytes, offset) {\r\n    if (offset === void 0) {\r\n      offset = 0;\r\n    }\r\n    bytes = toUint8(bytes);\r\n    var flags = bytes[offset + 5];\r\n    var returnSize = bytes[offset + 6] << 21 | bytes[offset + 7] << 14 | bytes[offset + 8] << 7 | bytes[offset + 9];\r\n    var footerPresent = (flags & 16) >> 4;\r\n    if (footerPresent) {\r\n      return returnSize + 20;\r\n    }\r\n    return returnSize + 10;\r\n  };\r\n  var getId3Offset = function getId3Offset(bytes, offset) {\r\n    if (offset === void 0) {\r\n      offset = 0;\r\n    }\r\n    bytes = toUint8(bytes);\r\n    if (bytes.length - offset < 10 || !bytesMatch(bytes, ID3, {\r\n      offset: offset\r\n    })) {\r\n      return offset;\r\n    }\r\n    offset += getId3Size(bytes, offset); // recursive check for id3 tags as some files\r\n    // have multiple ID3 tag sections even though\r\n    // they should not.\r\n\r\n    return getId3Offset(bytes, offset);\r\n  };\r\n\r\n  var normalizePath$1 = function normalizePath(path) {\r\n    if (typeof path === 'string') {\r\n      return stringToBytes(path);\r\n    }\r\n    if (typeof path === 'number') {\r\n      return path;\r\n    }\r\n    return path;\r\n  };\r\n  var normalizePaths$1 = function normalizePaths(paths) {\r\n    if (!Array.isArray(paths)) {\r\n      return [normalizePath$1(paths)];\r\n    }\r\n    return paths.map(function (p) {\r\n      return normalizePath$1(p);\r\n    });\r\n  };\r\n  /**\r\n   * find any number of boxes by name given a path to it in an iso bmff\r\n   * such as mp4.\r\n   *\r\n   * @param {TypedArray} bytes\r\n   *        bytes for the iso bmff to search for boxes in\r\n   *\r\n   * @param {Uint8Array[]|string[]|string|Uint8Array} name\r\n   *        An array of paths or a single path representing the name\r\n   *        of boxes to search through in bytes. Paths may be\r\n   *        uint8 (character codes) or strings.\r\n   *\r\n   * @param {boolean} [complete=false]\r\n   *        Should we search only for complete boxes on the final path.\r\n   *        This is very useful when you do not want to get back partial boxes\r\n   *        in the case of streaming files.\r\n   *\r\n   * @return {Uint8Array[]}\r\n   *         An array of the end paths that we found.\r\n   */\r\n\r\n  var findBox = function findBox(bytes, paths, complete) {\r\n    if (complete === void 0) {\r\n      complete = false;\r\n    }\r\n    paths = normalizePaths$1(paths);\r\n    bytes = toUint8(bytes);\r\n    var results = [];\r\n    if (!paths.length) {\r\n      // short-circuit the search for empty paths\r\n      return results;\r\n    }\r\n    var i = 0;\r\n    while (i < bytes.length) {\r\n      var size = (bytes[i] << 24 | bytes[i + 1] << 16 | bytes[i + 2] << 8 | bytes[i + 3]) >>> 0;\r\n      var type = bytes.subarray(i + 4, i + 8); // invalid box format.\r\n\r\n      if (size === 0) {\r\n        break;\r\n      }\r\n      var end = i + size;\r\n      if (end > bytes.length) {\r\n        // this box is bigger than the number of bytes we have\r\n        // and complete is set, we cannot find any more boxes.\r\n        if (complete) {\r\n          break;\r\n        }\r\n        end = bytes.length;\r\n      }\r\n      var data = bytes.subarray(i + 8, end);\r\n      if (bytesMatch(type, paths[0])) {\r\n        if (paths.length === 1) {\r\n          // this is the end of the path and we've found the box we were\r\n          // looking for\r\n          results.push(data);\r\n        } else {\r\n          // recursively search for the next box along the path\r\n          results.push.apply(results, findBox(data, paths.slice(1), complete));\r\n        }\r\n      }\r\n      i = end;\r\n    } // we've finished searching all of bytes\r\n\r\n    return results;\r\n  };\r\n\r\n  // https://matroska-org.github.io/libebml/specs.html\r\n  // https://www.matroska.org/technical/elements.html\r\n  // https://www.webmproject.org/docs/container/\r\n\r\n  var EBML_TAGS = {\r\n    EBML: toUint8([0x1A, 0x45, 0xDF, 0xA3]),\r\n    DocType: toUint8([0x42, 0x82]),\r\n    Segment: toUint8([0x18, 0x53, 0x80, 0x67]),\r\n    SegmentInfo: toUint8([0x15, 0x49, 0xA9, 0x66]),\r\n    Tracks: toUint8([0x16, 0x54, 0xAE, 0x6B]),\r\n    Track: toUint8([0xAE]),\r\n    TrackNumber: toUint8([0xd7]),\r\n    DefaultDuration: toUint8([0x23, 0xe3, 0x83]),\r\n    TrackEntry: toUint8([0xAE]),\r\n    TrackType: toUint8([0x83]),\r\n    FlagDefault: toUint8([0x88]),\r\n    CodecID: toUint8([0x86]),\r\n    CodecPrivate: toUint8([0x63, 0xA2]),\r\n    VideoTrack: toUint8([0xe0]),\r\n    AudioTrack: toUint8([0xe1]),\r\n    // Not used yet, but will be used for live webm/mkv\r\n    // see https://www.matroska.org/technical/basics.html#block-structure\r\n    // see https://www.matroska.org/technical/basics.html#simpleblock-structure\r\n    Cluster: toUint8([0x1F, 0x43, 0xB6, 0x75]),\r\n    Timestamp: toUint8([0xE7]),\r\n    TimestampScale: toUint8([0x2A, 0xD7, 0xB1]),\r\n    BlockGroup: toUint8([0xA0]),\r\n    BlockDuration: toUint8([0x9B]),\r\n    Block: toUint8([0xA1]),\r\n    SimpleBlock: toUint8([0xA3])\r\n  };\r\n  /**\r\n   * This is a simple table to determine the length\r\n   * of things in ebml. The length is one based (starts at 1,\r\n   * rather than zero) and for every zero bit before a one bit\r\n   * we add one to length. We also need this table because in some\r\n   * case we have to xor all the length bits from another value.\r\n   */\r\n\r\n  var LENGTH_TABLE = [128, 64, 32, 16, 8, 4, 2, 1];\r\n  var getLength = function getLength(byte) {\r\n    var len = 1;\r\n    for (var i = 0; i < LENGTH_TABLE.length; i++) {\r\n      if (byte & LENGTH_TABLE[i]) {\r\n        break;\r\n      }\r\n      len++;\r\n    }\r\n    return len;\r\n  }; // length in ebml is stored in the first 4 to 8 bits\r\n  // of the first byte. 4 for the id length and 8 for the\r\n  // data size length. Length is measured by converting the number to binary\r\n  // then 1 + the number of zeros before a 1 is encountered starting\r\n  // from the left.\r\n\r\n  var getvint = function getvint(bytes, offset, removeLength, signed) {\r\n    if (removeLength === void 0) {\r\n      removeLength = true;\r\n    }\r\n    if (signed === void 0) {\r\n      signed = false;\r\n    }\r\n    var length = getLength(bytes[offset]);\r\n    var valueBytes = bytes.subarray(offset, offset + length); // NOTE that we do **not** subarray here because we need to copy these bytes\r\n    // as they will be modified below to remove the dataSizeLen bits and we do not\r\n    // want to modify the original data. normally we could just call slice on\r\n    // uint8array but ie 11 does not support that...\r\n\r\n    if (removeLength) {\r\n      valueBytes = Array.prototype.slice.call(bytes, offset, offset + length);\r\n      valueBytes[0] ^= LENGTH_TABLE[length - 1];\r\n    }\r\n    return {\r\n      length: length,\r\n      value: bytesToNumber(valueBytes, {\r\n        signed: signed\r\n      }),\r\n      bytes: valueBytes\r\n    };\r\n  };\r\n  var normalizePath = function normalizePath(path) {\r\n    if (typeof path === 'string') {\r\n      return path.match(/.{1,2}/g).map(function (p) {\r\n        return normalizePath(p);\r\n      });\r\n    }\r\n    if (typeof path === 'number') {\r\n      return numberToBytes(path);\r\n    }\r\n    return path;\r\n  };\r\n  var normalizePaths = function normalizePaths(paths) {\r\n    if (!Array.isArray(paths)) {\r\n      return [normalizePath(paths)];\r\n    }\r\n    return paths.map(function (p) {\r\n      return normalizePath(p);\r\n    });\r\n  };\r\n  var getInfinityDataSize = function getInfinityDataSize(id, bytes, offset) {\r\n    if (offset >= bytes.length) {\r\n      return bytes.length;\r\n    }\r\n    var innerid = getvint(bytes, offset, false);\r\n    if (bytesMatch(id.bytes, innerid.bytes)) {\r\n      return offset;\r\n    }\r\n    var dataHeader = getvint(bytes, offset + innerid.length);\r\n    return getInfinityDataSize(id, bytes, offset + dataHeader.length + dataHeader.value + innerid.length);\r\n  };\r\n  /**\r\n   * Notes on the EBLM format.\r\n   *\r\n   * EBLM uses \"vints\" tags. Every vint tag contains\r\n   * two parts\r\n   *\r\n   * 1. The length from the first byte. You get this by\r\n   *    converting the byte to binary and counting the zeros\r\n   *    before a 1. Then you add 1 to that. Examples\r\n   *    00011111 = length 4 because there are 3 zeros before a 1.\r\n   *    00100000 = length 3 because there are 2 zeros before a 1.\r\n   *    00000011 = length 7 because there are 6 zeros before a 1.\r\n   *\r\n   * 2. The bits used for length are removed from the first byte\r\n   *    Then all the bytes are merged into a value. NOTE: this\r\n   *    is not the case for id ebml tags as there id includes\r\n   *    length bits.\r\n   *\r\n   */\r\n\r\n  var findEbml = function findEbml(bytes, paths) {\r\n    paths = normalizePaths(paths);\r\n    bytes = toUint8(bytes);\r\n    var results = [];\r\n    if (!paths.length) {\r\n      return results;\r\n    }\r\n    var i = 0;\r\n    while (i < bytes.length) {\r\n      var id = getvint(bytes, i, false);\r\n      var dataHeader = getvint(bytes, i + id.length);\r\n      var dataStart = i + id.length + dataHeader.length; // dataSize is unknown or this is a live stream\r\n\r\n      if (dataHeader.value === 0x7f) {\r\n        dataHeader.value = getInfinityDataSize(id, bytes, dataStart);\r\n        if (dataHeader.value !== bytes.length) {\r\n          dataHeader.value -= dataStart;\r\n        }\r\n      }\r\n      var dataEnd = dataStart + dataHeader.value > bytes.length ? bytes.length : dataStart + dataHeader.value;\r\n      var data = bytes.subarray(dataStart, dataEnd);\r\n      if (bytesMatch(paths[0], id.bytes)) {\r\n        if (paths.length === 1) {\r\n          // this is the end of the paths and we've found the tag we were\r\n          // looking for\r\n          results.push(data);\r\n        } else {\r\n          // recursively search for the next tag inside of the data\r\n          // of this one\r\n          results = results.concat(findEbml(data, paths.slice(1)));\r\n        }\r\n      }\r\n      var totalLength = id.length + dataHeader.length + data.length; // move past this tag entirely, we are not looking for it\r\n\r\n      i += totalLength;\r\n    }\r\n    return results;\r\n  }; // see https://www.matroska.org/technical/basics.html#block-structure\r\n\r\n  var NAL_TYPE_ONE = toUint8([0x00, 0x00, 0x00, 0x01]);\r\n  var NAL_TYPE_TWO = toUint8([0x00, 0x00, 0x01]);\r\n  var EMULATION_PREVENTION = toUint8([0x00, 0x00, 0x03]);\r\n  /**\r\n   * Expunge any \"Emulation Prevention\" bytes from a \"Raw Byte\r\n   * Sequence Payload\"\r\n   *\r\n   * @param data {Uint8Array} the bytes of a RBSP from a NAL\r\n   * unit\r\n   * @return {Uint8Array} the RBSP without any Emulation\r\n   * Prevention Bytes\r\n   */\r\n\r\n  var discardEmulationPreventionBytes = function discardEmulationPreventionBytes(bytes) {\r\n    var positions = [];\r\n    var i = 1; // Find all `Emulation Prevention Bytes`\r\n\r\n    while (i < bytes.length - 2) {\r\n      if (bytesMatch(bytes.subarray(i, i + 3), EMULATION_PREVENTION)) {\r\n        positions.push(i + 2);\r\n        i++;\r\n      }\r\n      i++;\r\n    } // If no Emulation Prevention Bytes were found just return the original\r\n    // array\r\n\r\n    if (positions.length === 0) {\r\n      return bytes;\r\n    } // Create a new array to hold the NAL unit data\r\n\r\n    var newLength = bytes.length - positions.length;\r\n    var newData = new Uint8Array(newLength);\r\n    var sourceIndex = 0;\r\n    for (i = 0; i < newLength; sourceIndex++, i++) {\r\n      if (sourceIndex === positions[0]) {\r\n        // Skip this byte\r\n        sourceIndex++; // Remove this position index\r\n\r\n        positions.shift();\r\n      }\r\n      newData[i] = bytes[sourceIndex];\r\n    }\r\n    return newData;\r\n  };\r\n  var findNal = function findNal(bytes, dataType, types, nalLimit) {\r\n    if (nalLimit === void 0) {\r\n      nalLimit = Infinity;\r\n    }\r\n    bytes = toUint8(bytes);\r\n    types = [].concat(types);\r\n    var i = 0;\r\n    var nalStart;\r\n    var nalsFound = 0; // keep searching until:\r\n    // we reach the end of bytes\r\n    // we reach the maximum number of nals they want to seach\r\n    // NOTE: that we disregard nalLimit when we have found the start\r\n    // of the nal we want so that we can find the end of the nal we want.\r\n\r\n    while (i < bytes.length && (nalsFound < nalLimit || nalStart)) {\r\n      var nalOffset = void 0;\r\n      if (bytesMatch(bytes.subarray(i), NAL_TYPE_ONE)) {\r\n        nalOffset = 4;\r\n      } else if (bytesMatch(bytes.subarray(i), NAL_TYPE_TWO)) {\r\n        nalOffset = 3;\r\n      } // we are unsynced,\r\n      // find the next nal unit\r\n\r\n      if (!nalOffset) {\r\n        i++;\r\n        continue;\r\n      }\r\n      nalsFound++;\r\n      if (nalStart) {\r\n        return discardEmulationPreventionBytes(bytes.subarray(nalStart, i));\r\n      }\r\n      var nalType = void 0;\r\n      if (dataType === 'h264') {\r\n        nalType = bytes[i + nalOffset] & 0x1f;\r\n      } else if (dataType === 'h265') {\r\n        nalType = bytes[i + nalOffset] >> 1 & 0x3f;\r\n      }\r\n      if (types.indexOf(nalType) !== -1) {\r\n        nalStart = i + nalOffset;\r\n      } // nal header is 1 length for h264, and 2 for h265\r\n\r\n      i += nalOffset + (dataType === 'h264' ? 1 : 2);\r\n    }\r\n    return bytes.subarray(0, 0);\r\n  };\r\n  var findH264Nal = function findH264Nal(bytes, type, nalLimit) {\r\n    return findNal(bytes, 'h264', type, nalLimit);\r\n  };\r\n  var findH265Nal = function findH265Nal(bytes, type, nalLimit) {\r\n    return findNal(bytes, 'h265', type, nalLimit);\r\n  };\r\n\r\n  var CONSTANTS = {\r\n    // \"webm\" string literal in hex\r\n    'webm': toUint8([0x77, 0x65, 0x62, 0x6d]),\r\n    // \"matroska\" string literal in hex\r\n    'matroska': toUint8([0x6d, 0x61, 0x74, 0x72, 0x6f, 0x73, 0x6b, 0x61]),\r\n    // \"fLaC\" string literal in hex\r\n    'flac': toUint8([0x66, 0x4c, 0x61, 0x43]),\r\n    // \"OggS\" string literal in hex\r\n    'ogg': toUint8([0x4f, 0x67, 0x67, 0x53]),\r\n    // ac-3 sync byte, also works for ec-3 as that is simply a codec\r\n    // of ac-3\r\n    'ac3': toUint8([0x0b, 0x77]),\r\n    // \"RIFF\" string literal in hex used for wav and avi\r\n    'riff': toUint8([0x52, 0x49, 0x46, 0x46]),\r\n    // \"AVI\" string literal in hex\r\n    'avi': toUint8([0x41, 0x56, 0x49]),\r\n    // \"WAVE\" string literal in hex\r\n    'wav': toUint8([0x57, 0x41, 0x56, 0x45]),\r\n    // \"ftyp3g\" string literal in hex\r\n    '3gp': toUint8([0x66, 0x74, 0x79, 0x70, 0x33, 0x67]),\r\n    // \"ftyp\" string literal in hex\r\n    'mp4': toUint8([0x66, 0x74, 0x79, 0x70]),\r\n    // \"styp\" string literal in hex\r\n    'fmp4': toUint8([0x73, 0x74, 0x79, 0x70]),\r\n    // \"ftypqt\" string literal in hex\r\n    'mov': toUint8([0x66, 0x74, 0x79, 0x70, 0x71, 0x74]),\r\n    // moov string literal in hex\r\n    'moov': toUint8([0x6D, 0x6F, 0x6F, 0x76]),\r\n    // moof string literal in hex\r\n    'moof': toUint8([0x6D, 0x6F, 0x6F, 0x66])\r\n  };\r\n  var _isLikely = {\r\n    aac: function aac(bytes) {\r\n      var offset = getId3Offset(bytes);\r\n      return bytesMatch(bytes, [0xFF, 0x10], {\r\n        offset: offset,\r\n        mask: [0xFF, 0x16]\r\n      });\r\n    },\r\n    mp3: function mp3(bytes) {\r\n      var offset = getId3Offset(bytes);\r\n      return bytesMatch(bytes, [0xFF, 0x02], {\r\n        offset: offset,\r\n        mask: [0xFF, 0x06]\r\n      });\r\n    },\r\n    webm: function webm(bytes) {\r\n      var docType = findEbml(bytes, [EBML_TAGS.EBML, EBML_TAGS.DocType])[0]; // check if DocType EBML tag is webm\r\n\r\n      return bytesMatch(docType, CONSTANTS.webm);\r\n    },\r\n    mkv: function mkv(bytes) {\r\n      var docType = findEbml(bytes, [EBML_TAGS.EBML, EBML_TAGS.DocType])[0]; // check if DocType EBML tag is matroska\r\n\r\n      return bytesMatch(docType, CONSTANTS.matroska);\r\n    },\r\n    mp4: function mp4(bytes) {\r\n      // if this file is another base media file format, it is not mp4\r\n      if (_isLikely['3gp'](bytes) || _isLikely.mov(bytes)) {\r\n        return false;\r\n      } // if this file starts with a ftyp or styp box its mp4\r\n\r\n      if (bytesMatch(bytes, CONSTANTS.mp4, {\r\n        offset: 4\r\n      }) || bytesMatch(bytes, CONSTANTS.fmp4, {\r\n        offset: 4\r\n      })) {\r\n        return true;\r\n      } // if this file starts with a moof/moov box its mp4\r\n\r\n      if (bytesMatch(bytes, CONSTANTS.moof, {\r\n        offset: 4\r\n      }) || bytesMatch(bytes, CONSTANTS.moov, {\r\n        offset: 4\r\n      })) {\r\n        return true;\r\n      }\r\n    },\r\n    mov: function mov(bytes) {\r\n      return bytesMatch(bytes, CONSTANTS.mov, {\r\n        offset: 4\r\n      });\r\n    },\r\n    '3gp': function gp(bytes) {\r\n      return bytesMatch(bytes, CONSTANTS['3gp'], {\r\n        offset: 4\r\n      });\r\n    },\r\n    ac3: function ac3(bytes) {\r\n      var offset = getId3Offset(bytes);\r\n      return bytesMatch(bytes, CONSTANTS.ac3, {\r\n        offset: offset\r\n      });\r\n    },\r\n    ts: function ts(bytes) {\r\n      if (bytes.length < 189 && bytes.length >= 1) {\r\n        return bytes[0] === 0x47;\r\n      }\r\n      var i = 0; // check the first 376 bytes for two matching sync bytes\r\n\r\n      while (i + 188 < bytes.length && i < 188) {\r\n        if (bytes[i] === 0x47 && bytes[i + 188] === 0x47) {\r\n          return true;\r\n        }\r\n        i += 1;\r\n      }\r\n      return false;\r\n    },\r\n    flac: function flac(bytes) {\r\n      var offset = getId3Offset(bytes);\r\n      return bytesMatch(bytes, CONSTANTS.flac, {\r\n        offset: offset\r\n      });\r\n    },\r\n    ogg: function ogg(bytes) {\r\n      return bytesMatch(bytes, CONSTANTS.ogg);\r\n    },\r\n    avi: function avi(bytes) {\r\n      return bytesMatch(bytes, CONSTANTS.riff) && bytesMatch(bytes, CONSTANTS.avi, {\r\n        offset: 8\r\n      });\r\n    },\r\n    wav: function wav(bytes) {\r\n      return bytesMatch(bytes, CONSTANTS.riff) && bytesMatch(bytes, CONSTANTS.wav, {\r\n        offset: 8\r\n      });\r\n    },\r\n    'h264': function h264(bytes) {\r\n      // find seq_parameter_set_rbsp\r\n      return findH264Nal(bytes, 7, 3).length;\r\n    },\r\n    'h265': function h265(bytes) {\r\n      // find video_parameter_set_rbsp or seq_parameter_set_rbsp\r\n      return findH265Nal(bytes, [32, 33], 3).length;\r\n    }\r\n  }; // get all the isLikely functions\r\n  // but make sure 'ts' is above h264 and h265\r\n  // but below everything else as it is the least specific\r\n\r\n  var isLikelyTypes = Object.keys(_isLikely) // remove ts, h264, h265\r\n  .filter(function (t) {\r\n    return t !== 'ts' && t !== 'h264' && t !== 'h265';\r\n  }) // add it back to the bottom\r\n  .concat(['ts', 'h264', 'h265']); // make sure we are dealing with uint8 data.\r\n\r\n  isLikelyTypes.forEach(function (type) {\r\n    var isLikelyFn = _isLikely[type];\r\n    _isLikely[type] = function (bytes) {\r\n      return isLikelyFn(toUint8(bytes));\r\n    };\r\n  }); // export after wrapping\r\n\r\n  var isLikely = _isLikely; // A useful list of file signatures can be found here\r\n  // https://en.wikipedia.org/wiki/List_of_file_signatures\r\n\r\n  var detectContainerForBytes = function detectContainerForBytes(bytes) {\r\n    bytes = toUint8(bytes);\r\n    for (var i = 0; i < isLikelyTypes.length; i++) {\r\n      var type = isLikelyTypes[i];\r\n      if (isLikely[type](bytes)) {\r\n        return type;\r\n      }\r\n    }\r\n    return '';\r\n  }; // fmp4 is not a container\r\n\r\n  var isLikelyFmp4MediaSegment = function isLikelyFmp4MediaSegment(bytes) {\r\n    return findBox(bytes, ['moof']).length > 0;\r\n  };\r\n\r\n  /**\r\n   * mux.js\r\n   *\r\n   * Copyright (c) Brightcove\r\n   * Licensed Apache-2.0 https://github.com/videojs/mux.js/blob/master/LICENSE\r\n   */\r\n  var ONE_SECOND_IN_TS = 90000,\r\n    // 90kHz clock\r\n    secondsToVideoTs,\r\n    secondsToAudioTs,\r\n    videoTsToSeconds,\r\n    audioTsToSeconds,\r\n    audioTsToVideoTs,\r\n    videoTsToAudioTs,\r\n    metadataTsToSeconds;\r\n  secondsToVideoTs = function (seconds) {\r\n    return seconds * ONE_SECOND_IN_TS;\r\n  };\r\n  secondsToAudioTs = function (seconds, sampleRate) {\r\n    return seconds * sampleRate;\r\n  };\r\n  videoTsToSeconds = function (timestamp) {\r\n    return timestamp / ONE_SECOND_IN_TS;\r\n  };\r\n  audioTsToSeconds = function (timestamp, sampleRate) {\r\n    return timestamp / sampleRate;\r\n  };\r\n  audioTsToVideoTs = function (timestamp, sampleRate) {\r\n    return secondsToVideoTs(audioTsToSeconds(timestamp, sampleRate));\r\n  };\r\n  videoTsToAudioTs = function (timestamp, sampleRate) {\r\n    return secondsToAudioTs(videoTsToSeconds(timestamp), sampleRate);\r\n  };\r\n\r\n  /**\r\n   * Adjust ID3 tag or caption timing information by the timeline pts values\r\n   * (if keepOriginalTimestamps is false) and convert to seconds\r\n   */\r\n  metadataTsToSeconds = function (timestamp, timelineStartPts, keepOriginalTimestamps) {\r\n    return videoTsToSeconds(keepOriginalTimestamps ? timestamp : timestamp - timelineStartPts);\r\n  };\r\n  var clock = {\r\n    ONE_SECOND_IN_TS: ONE_SECOND_IN_TS,\r\n    secondsToVideoTs: secondsToVideoTs,\r\n    secondsToAudioTs: secondsToAudioTs,\r\n    videoTsToSeconds: videoTsToSeconds,\r\n    audioTsToSeconds: audioTsToSeconds,\r\n    audioTsToVideoTs: audioTsToVideoTs,\r\n    videoTsToAudioTs: videoTsToAudioTs,\r\n    metadataTsToSeconds: metadataTsToSeconds\r\n  };\r\n  var clock_1 = clock.ONE_SECOND_IN_TS;\r\n\r\n  /*! @name @videojs/http-streaming @version 3.16.2 @license Apache-2.0 */\r\n\r\n  /**\r\n   * @file resolve-url.js - Handling how URLs are resolved and manipulated\r\n   */\r\n  const resolveUrl = resolveUrl$1;\r\n  /**\r\n   * If the xhr request was redirected, return the responseURL, otherwise,\r\n   * return the original url.\r\n   *\r\n   * @api private\r\n   *\r\n   * @param  {string} url - an url being requested\r\n   * @param  {XMLHttpRequest} req - xhr request result\r\n   *\r\n   * @return {string}\r\n   */\r\n\r\n  const resolveManifestRedirect = (url, req) => {\r\n    // To understand how the responseURL below is set and generated:\r\n    // - https://fetch.spec.whatwg.org/#concept-response-url\r\n    // - https://fetch.spec.whatwg.org/#atomic-http-redirect-handling\r\n    if (req && req.responseURL && url !== req.responseURL) {\r\n      return req.responseURL;\r\n    }\r\n    return url;\r\n  };\r\n  const logger = source => {\r\n    if (videojs.log.debug) {\r\n      return videojs.log.debug.bind(videojs, 'VHS:', `${source} >`);\r\n    }\r\n    return function () {};\r\n  };\r\n\r\n  /**\r\n   * Provides a compatibility layer between Video.js 7 and 8 API changes for VHS.\r\n   */\r\n  /**\r\n   * Delegates to videojs.obj.merge (Video.js 8) or\r\n   * videojs.mergeOptions (Video.js 7).\r\n   */\r\n\r\n  function merge(...args) {\r\n    const context = videojs.obj || videojs;\r\n    const fn = context.merge || context.mergeOptions;\r\n    return fn.apply(context, args);\r\n  }\r\n  /**\r\n   * Delegates to videojs.time.createTimeRanges (Video.js 8) or\r\n   * videojs.createTimeRanges (Video.js 7).\r\n   */\r\n\r\n  function createTimeRanges(...args) {\r\n    const context = videojs.time || videojs;\r\n    const fn = context.createTimeRanges || context.createTimeRanges;\r\n    return fn.apply(context, args);\r\n  }\r\n  /**\r\n   * Converts provided buffered ranges to a descriptive string\r\n   *\r\n   * @param {TimeRanges} buffered - received buffered time ranges\r\n   *\r\n   * @return {string} - descriptive string\r\n   */\r\n\r\n  function bufferedRangesToString(buffered) {\r\n    if (buffered.length === 0) {\r\n      return 'Buffered Ranges are empty';\r\n    }\r\n    let bufferedRangesStr = 'Buffered Ranges: \\n';\r\n    for (let i = 0; i < buffered.length; i++) {\r\n      const start = buffered.start(i);\r\n      const end = buffered.end(i);\r\n      bufferedRangesStr += `${start} --> ${end}. Duration (${end - start})\\n`;\r\n    }\r\n    return bufferedRangesStr;\r\n  }\r\n\r\n  /**\r\n   * ranges\r\n   *\r\n   * Utilities for working with TimeRanges.\r\n   *\r\n   */\r\n\r\n  const TIME_FUDGE_FACTOR = 1 / 30; // Comparisons between time values such as current time and the end of the buffered range\r\n  // can be misleading because of precision differences or when the current media has poorly\r\n  // aligned audio and video, which can cause values to be slightly off from what you would\r\n  // expect. This value is what we consider to be safe to use in such comparisons to account\r\n  // for these scenarios.\r\n\r\n  const SAFE_TIME_DELTA = TIME_FUDGE_FACTOR * 3;\r\n  const filterRanges = function (timeRanges, predicate) {\r\n    const results = [];\r\n    let i;\r\n    if (timeRanges && timeRanges.length) {\r\n      // Search for ranges that match the predicate\r\n      for (i = 0; i < timeRanges.length; i++) {\r\n        if (predicate(timeRanges.start(i), timeRanges.end(i))) {\r\n          results.push([timeRanges.start(i), timeRanges.end(i)]);\r\n        }\r\n      }\r\n    }\r\n    return createTimeRanges(results);\r\n  };\r\n  /**\r\n   * Attempts to find the buffered TimeRange that contains the specified\r\n   * time.\r\n   *\r\n   * @param {TimeRanges} buffered - the TimeRanges object to query\r\n   * @param {number} time  - the time to filter on.\r\n   * @return {TimeRanges} a new TimeRanges object\r\n   */\r\n\r\n  const findRange = function (buffered, time) {\r\n    return filterRanges(buffered, function (start, end) {\r\n      return start - SAFE_TIME_DELTA <= time && end + SAFE_TIME_DELTA >= time;\r\n    });\r\n  };\r\n  /**\r\n   * Returns the TimeRanges that begin later than the specified time.\r\n   *\r\n   * @param {TimeRanges} timeRanges - the TimeRanges object to query\r\n   * @param {number} time - the time to filter on.\r\n   * @return {TimeRanges} a new TimeRanges object.\r\n   */\r\n\r\n  const findNextRange = function (timeRanges, time) {\r\n    return filterRanges(timeRanges, function (start) {\r\n      return start - TIME_FUDGE_FACTOR >= time;\r\n    });\r\n  };\r\n  /**\r\n   * Returns gaps within a list of TimeRanges\r\n   *\r\n   * @param {TimeRanges} buffered - the TimeRanges object\r\n   * @return {TimeRanges} a TimeRanges object of gaps\r\n   */\r\n\r\n  const findGaps = function (buffered) {\r\n    if (buffered.length < 2) {\r\n      return createTimeRanges();\r\n    }\r\n    const ranges = [];\r\n    for (let i = 1; i < buffered.length; i++) {\r\n      const start = buffered.end(i - 1);\r\n      const end = buffered.start(i);\r\n      ranges.push([start, end]);\r\n    }\r\n    return createTimeRanges(ranges);\r\n  };\r\n  /**\r\n   * Calculate the intersection of two TimeRanges\r\n   *\r\n   * @param {TimeRanges} bufferA\r\n   * @param {TimeRanges} bufferB\r\n   * @return {TimeRanges} The interesection of `bufferA` with `bufferB`\r\n   */\r\n\r\n  const bufferIntersection = function (bufferA, bufferB) {\r\n    let start = null;\r\n    let end = null;\r\n    let arity = 0;\r\n    const extents = [];\r\n    const ranges = [];\r\n    if (!bufferA || !bufferA.length || !bufferB || !bufferB.length) {\r\n      return createTimeRanges();\r\n    } // Handle the case where we have both buffers and create an\r\n    // intersection of the two\r\n\r\n    let count = bufferA.length; // A) Gather up all start and end times\r\n\r\n    while (count--) {\r\n      extents.push({\r\n        time: bufferA.start(count),\r\n        type: 'start'\r\n      });\r\n      extents.push({\r\n        time: bufferA.end(count),\r\n        type: 'end'\r\n      });\r\n    }\r\n    count = bufferB.length;\r\n    while (count--) {\r\n      extents.push({\r\n        time: bufferB.start(count),\r\n        type: 'start'\r\n      });\r\n      extents.push({\r\n        time: bufferB.end(count),\r\n        type: 'end'\r\n      });\r\n    } // B) Sort them by time\r\n\r\n    extents.sort(function (a, b) {\r\n      return a.time - b.time;\r\n    }); // C) Go along one by one incrementing arity for start and decrementing\r\n    //    arity for ends\r\n\r\n    for (count = 0; count < extents.length; count++) {\r\n      if (extents[count].type === 'start') {\r\n        arity++; // D) If arity is ever incremented to 2 we are entering an\r\n        //    overlapping range\r\n\r\n        if (arity === 2) {\r\n          start = extents[count].time;\r\n        }\r\n      } else if (extents[count].type === 'end') {\r\n        arity--; // E) If arity is ever decremented to 1 we leaving an\r\n        //    overlapping range\r\n\r\n        if (arity === 1) {\r\n          end = extents[count].time;\r\n        }\r\n      } // F) Record overlapping ranges\r\n\r\n      if (start !== null && end !== null) {\r\n        ranges.push([start, end]);\r\n        start = null;\r\n        end = null;\r\n      }\r\n    }\r\n    return createTimeRanges(ranges);\r\n  };\r\n  /**\r\n   * Gets a human readable string for a TimeRange\r\n   *\r\n   * @param {TimeRange} range\r\n   * @return {string} a human readable string\r\n   */\r\n\r\n  const printableRange = range => {\r\n    const strArr = [];\r\n    if (!range || !range.length) {\r\n      return '';\r\n    }\r\n    for (let i = 0; i < range.length; i++) {\r\n      strArr.push(range.start(i) + ' => ' + range.end(i));\r\n    }\r\n    return strArr.join(', ');\r\n  };\r\n  /**\r\n   * Calculates the amount of time left in seconds until the player hits the end of the\r\n   * buffer and causes a rebuffer\r\n   *\r\n   * @param {TimeRange} buffered\r\n   *        The state of the buffer\r\n   * @param {Numnber} currentTime\r\n   *        The current time of the player\r\n   * @param {number} playbackRate\r\n   *        The current playback rate of the player. Defaults to 1.\r\n   * @return {number}\r\n   *         Time until the player has to start rebuffering in seconds.\r\n   * @function timeUntilRebuffer\r\n   */\r\n\r\n  const timeUntilRebuffer = function (buffered, currentTime, playbackRate = 1) {\r\n    const bufferedEnd = buffered.length ? buffered.end(buffered.length - 1) : 0;\r\n    return (bufferedEnd - currentTime) / playbackRate;\r\n  };\r\n  /**\r\n   * Converts a TimeRanges object into an array representation\r\n   *\r\n   * @param {TimeRanges} timeRanges\r\n   * @return {Array}\r\n   */\r\n\r\n  const timeRangesToArray = timeRanges => {\r\n    const timeRangesList = [];\r\n    for (let i = 0; i < timeRanges.length; i++) {\r\n      timeRangesList.push({\r\n        start: timeRanges.start(i),\r\n        end: timeRanges.end(i)\r\n      });\r\n    }\r\n    return timeRangesList;\r\n  };\r\n  /**\r\n   * Determines if two time range objects are different.\r\n   *\r\n   * @param {TimeRange} a\r\n   *        the first time range object to check\r\n   *\r\n   * @param {TimeRange} b\r\n   *        the second time range object to check\r\n   *\r\n   * @return {Boolean}\r\n   *         Whether the time range objects differ\r\n   */\r\n\r\n  const isRangeDifferent = function (a, b) {\r\n    // same object\r\n    if (a === b) {\r\n      return false;\r\n    } // one or the other is undefined\r\n\r\n    if (!a && b || !b && a) {\r\n      return true;\r\n    } // length is different\r\n\r\n    if (a.length !== b.length) {\r\n      return true;\r\n    } // see if any start/end pair is different\r\n\r\n    for (let i = 0; i < a.length; i++) {\r\n      if (a.start(i) !== b.start(i) || a.end(i) !== b.end(i)) {\r\n        return true;\r\n      }\r\n    } // if the length and every pair is the same\r\n    // this is the same time range\r\n\r\n    return false;\r\n  };\r\n  const lastBufferedEnd = function (a) {\r\n    if (!a || !a.length || !a.end) {\r\n      return;\r\n    }\r\n    return a.end(a.length - 1);\r\n  };\r\n  /**\r\n   * A utility function to add up the amount of time in a timeRange\r\n   * after a specified startTime.\r\n   * ie:[[0, 10], [20, 40], [50, 60]] with a startTime 0\r\n   *     would return 40 as there are 40s seconds after 0 in the timeRange\r\n   *\r\n   * @param {TimeRange} range\r\n   *        The range to check against\r\n   * @param {number} startTime\r\n   *        The time in the time range that you should start counting from\r\n   *\r\n   * @return {number}\r\n   *          The number of seconds in the buffer passed the specified time.\r\n   */\r\n\r\n  const timeAheadOf = function (range, startTime) {\r\n    let time = 0;\r\n    if (!range || !range.length) {\r\n      return time;\r\n    }\r\n    for (let i = 0; i < range.length; i++) {\r\n      const start = range.start(i);\r\n      const end = range.end(i); // startTime is after this range entirely\r\n\r\n      if (startTime > end) {\r\n        continue;\r\n      } // startTime is within this range\r\n\r\n      if (startTime > start && startTime <= end) {\r\n        time += end - startTime;\r\n        continue;\r\n      } // startTime is before this range.\r\n\r\n      time += end - start;\r\n    }\r\n    return time;\r\n  };\r\n\r\n  /**\r\n   * @file playlist.js\r\n   *\r\n   * Playlist related utilities.\r\n   */\r\n  /**\r\n   * Get the duration of a segment, with special cases for\r\n   * llhls segments that do not have a duration yet.\r\n   *\r\n   * @param {Object} playlist\r\n   *        the playlist that the segment belongs to.\r\n   * @param {Object} segment\r\n   *        the segment to get a duration for.\r\n   *\r\n   * @return {number}\r\n   *          the segment duration\r\n   */\r\n\r\n  const segmentDurationWithParts = (playlist, segment) => {\r\n    // if this isn't a preload segment\r\n    // then we will have a segment duration that is accurate.\r\n    if (!segment.preload) {\r\n      return segment.duration;\r\n    } // otherwise we have to add up parts and preload hints\r\n    // to get an up to date duration.\r\n\r\n    let result = 0;\r\n    (segment.parts || []).forEach(function (p) {\r\n      result += p.duration;\r\n    }); // for preload hints we have to use partTargetDuration\r\n    // as they won't even have a duration yet.\r\n\r\n    (segment.preloadHints || []).forEach(function (p) {\r\n      if (p.type === 'PART') {\r\n        result += playlist.partTargetDuration;\r\n      }\r\n    });\r\n    return result;\r\n  };\r\n  /**\r\n   * A function to get a combined list of parts and segments with durations\r\n   * and indexes.\r\n   *\r\n   * @param {Playlist} playlist the playlist to get the list for.\r\n   *\r\n   * @return {Array} The part/segment list.\r\n   */\r\n\r\n  const getPartsAndSegments = playlist => (playlist.segments || []).reduce((acc, segment, si) => {\r\n    if (segment.parts) {\r\n      segment.parts.forEach(function (part, pi) {\r\n        acc.push({\r\n          duration: part.duration,\r\n          segmentIndex: si,\r\n          partIndex: pi,\r\n          part,\r\n          segment\r\n        });\r\n      });\r\n    } else {\r\n      acc.push({\r\n        duration: segment.duration,\r\n        segmentIndex: si,\r\n        partIndex: null,\r\n        segment,\r\n        part: null\r\n      });\r\n    }\r\n    return acc;\r\n  }, []);\r\n  const getLastParts = media => {\r\n    const lastSegment = media.segments && media.segments.length && media.segments[media.segments.length - 1];\r\n    return lastSegment && lastSegment.parts || [];\r\n  };\r\n  const getKnownPartCount = ({\r\n    preloadSegment\r\n  }) => {\r\n    if (!preloadSegment) {\r\n      return;\r\n    }\r\n    const {\r\n      parts,\r\n      preloadHints\r\n    } = preloadSegment;\r\n    let partCount = (preloadHints || []).reduce((count, hint) => count + (hint.type === 'PART' ? 1 : 0), 0);\r\n    partCount += parts && parts.length ? parts.length : 0;\r\n    return partCount;\r\n  };\r\n  /**\r\n   * Get the number of seconds to delay from the end of a\r\n   * live playlist.\r\n   *\r\n   * @param {Playlist} main the main playlist\r\n   * @param {Playlist} media the media playlist\r\n   * @return {number} the hold back in seconds.\r\n   */\r\n\r\n  const liveEdgeDelay = (main, media) => {\r\n    if (media.endList) {\r\n      return 0;\r\n    } // dash suggestedPresentationDelay trumps everything\r\n\r\n    if (main && main.suggestedPresentationDelay) {\r\n      return main.suggestedPresentationDelay;\r\n    }\r\n    const hasParts = getLastParts(media).length > 0; // look for \"part\" delays from ll-hls first\r\n\r\n    if (hasParts && media.serverControl && media.serverControl.partHoldBack) {\r\n      return media.serverControl.partHoldBack;\r\n    } else if (hasParts && media.partTargetDuration) {\r\n      return media.partTargetDuration * 3; // finally look for full segment delays\r\n    } else if (media.serverControl && media.serverControl.holdBack) {\r\n      return media.serverControl.holdBack;\r\n    } else if (media.targetDuration) {\r\n      return media.targetDuration * 3;\r\n    }\r\n    return 0;\r\n  };\r\n  /**\r\n   * walk backward until we find a duration we can use\r\n   * or return a failure\r\n   *\r\n   * @param {Playlist} playlist the playlist to walk through\r\n   * @param {Number} endSequence the mediaSequence to stop walking on\r\n   */\r\n\r\n  const backwardDuration = function (playlist, endSequence) {\r\n    let result = 0;\r\n    let i = endSequence - playlist.mediaSequence; // if a start time is available for segment immediately following\r\n    // the interval, use it\r\n\r\n    let segment = playlist.segments[i]; // Walk backward until we find the latest segment with timeline\r\n    // information that is earlier than endSequence\r\n\r\n    if (segment) {\r\n      if (typeof segment.start !== 'undefined') {\r\n        return {\r\n          result: segment.start,\r\n          precise: true\r\n        };\r\n      }\r\n      if (typeof segment.end !== 'undefined') {\r\n        return {\r\n          result: segment.end - segment.duration,\r\n          precise: true\r\n        };\r\n      }\r\n    }\r\n    while (i--) {\r\n      segment = playlist.segments[i];\r\n      if (typeof segment.end !== 'undefined') {\r\n        return {\r\n          result: result + segment.end,\r\n          precise: true\r\n        };\r\n      }\r\n      result += segmentDurationWithParts(playlist, segment);\r\n      if (typeof segment.start !== 'undefined') {\r\n        return {\r\n          result: result + segment.start,\r\n          precise: true\r\n        };\r\n      }\r\n    }\r\n    return {\r\n      result,\r\n      precise: false\r\n    };\r\n  };\r\n  /**\r\n   * walk forward until we find a duration we can use\r\n   * or return a failure\r\n   *\r\n   * @param {Playlist} playlist the playlist to walk through\r\n   * @param {number} endSequence the mediaSequence to stop walking on\r\n   */\r\n\r\n  const forwardDuration = function (playlist, endSequence) {\r\n    let result = 0;\r\n    let segment;\r\n    let i = endSequence - playlist.mediaSequence; // Walk forward until we find the earliest segment with timeline\r\n    // information\r\n\r\n    for (; i < playlist.segments.length; i++) {\r\n      segment = playlist.segments[i];\r\n      if (typeof segment.start !== 'undefined') {\r\n        return {\r\n          result: segment.start - result,\r\n          precise: true\r\n        };\r\n      }\r\n      result += segmentDurationWithParts(playlist, segment);\r\n      if (typeof segment.end !== 'undefined') {\r\n        return {\r\n          result: segment.end - result,\r\n          precise: true\r\n        };\r\n      }\r\n    } // indicate we didn't find a useful duration estimate\r\n\r\n    return {\r\n      result: -1,\r\n      precise: false\r\n    };\r\n  };\r\n  /**\r\n    * Calculate the media duration from the segments associated with a\r\n    * playlist. The duration of a subinterval of the available segments\r\n    * may be calculated by specifying an end index.\r\n    *\r\n    * @param {Object} playlist a media playlist object\r\n    * @param {number=} endSequence an exclusive upper boundary\r\n    * for the playlist.  Defaults to playlist length.\r\n    * @param {number} expired the amount of time that has dropped\r\n    * off the front of the playlist in a live scenario\r\n    * @return {number} the duration between the first available segment\r\n    * and end index.\r\n    */\r\n\r\n  const intervalDuration = function (playlist, endSequence, expired) {\r\n    if (typeof endSequence === 'undefined') {\r\n      endSequence = playlist.mediaSequence + playlist.segments.length;\r\n    }\r\n    if (endSequence < playlist.mediaSequence) {\r\n      return 0;\r\n    } // do a backward walk to estimate the duration\r\n\r\n    const backward = backwardDuration(playlist, endSequence);\r\n    if (backward.precise) {\r\n      // if we were able to base our duration estimate on timing\r\n      // information provided directly from the Media Source, return\r\n      // it\r\n      return backward.result;\r\n    } // walk forward to see if a precise duration estimate can be made\r\n    // that way\r\n\r\n    const forward = forwardDuration(playlist, endSequence);\r\n    if (forward.precise) {\r\n      // we found a segment that has been buffered and so it's\r\n      // position is known precisely\r\n      return forward.result;\r\n    } // return the less-precise, playlist-based duration estimate\r\n\r\n    return backward.result + expired;\r\n  };\r\n  /**\r\n    * Calculates the duration of a playlist. If a start and end index\r\n    * are specified, the duration will be for the subset of the media\r\n    * timeline between those two indices. The total duration for live\r\n    * playlists is always Infinity.\r\n    *\r\n    * @param {Object} playlist a media playlist object\r\n    * @param {number=} endSequence an exclusive upper\r\n    * boundary for the playlist. Defaults to the playlist media\r\n    * sequence number plus its length.\r\n    * @param {number=} expired the amount of time that has\r\n    * dropped off the front of the playlist in a live scenario\r\n    * @return {number} the duration between the start index and end\r\n    * index.\r\n    */\r\n\r\n  const duration = function (playlist, endSequence, expired) {\r\n    if (!playlist) {\r\n      return 0;\r\n    }\r\n    if (typeof expired !== 'number') {\r\n      expired = 0;\r\n    } // if a slice of the total duration is not requested, use\r\n    // playlist-level duration indicators when they're present\r\n\r\n    if (typeof endSequence === 'undefined') {\r\n      // if present, use the duration specified in the playlist\r\n      if (playlist.totalDuration) {\r\n        return playlist.totalDuration;\r\n      } // duration should be Infinity for live playlists\r\n\r\n      if (!playlist.endList) {\r\n        return window.Infinity;\r\n      }\r\n    } // calculate the total duration based on the segment durations\r\n\r\n    return intervalDuration(playlist, endSequence, expired);\r\n  };\r\n  /**\r\n    * Calculate the time between two indexes in the current playlist\r\n    * neight the start- nor the end-index need to be within the current\r\n    * playlist in which case, the targetDuration of the playlist is used\r\n    * to approximate the durations of the segments\r\n    *\r\n    * @param {Array} options.durationList list to iterate over for durations.\r\n    * @param {number} options.defaultDuration duration to use for elements before or after the durationList\r\n    * @param {number} options.startIndex partsAndSegments index to start\r\n    * @param {number} options.endIndex partsAndSegments index to end.\r\n    * @return {number} the number of seconds between startIndex and endIndex\r\n    */\r\n\r\n  const sumDurations = function ({\r\n    defaultDuration,\r\n    durationList,\r\n    startIndex,\r\n    endIndex\r\n  }) {\r\n    let durations = 0;\r\n    if (startIndex > endIndex) {\r\n      [startIndex, endIndex] = [endIndex, startIndex];\r\n    }\r\n    if (startIndex < 0) {\r\n      for (let i = startIndex; i < Math.min(0, endIndex); i++) {\r\n        durations += defaultDuration;\r\n      }\r\n      startIndex = 0;\r\n    }\r\n    for (let i = startIndex; i < endIndex; i++) {\r\n      durations += durationList[i].duration;\r\n    }\r\n    return durations;\r\n  };\r\n  /**\r\n   * Calculates the playlist end time\r\n   *\r\n   * @param {Object} playlist a media playlist object\r\n   * @param {number=} expired the amount of time that has\r\n   *                  dropped off the front of the playlist in a live scenario\r\n   * @param {boolean|false} useSafeLiveEnd a boolean value indicating whether or not the\r\n   *                        playlist end calculation should consider the safe live end\r\n   *                        (truncate the playlist end by three segments). This is normally\r\n   *                        used for calculating the end of the playlist's seekable range.\r\n   *                        This takes into account the value of liveEdgePadding.\r\n   *                        Setting liveEdgePadding to 0 is equivalent to setting this to false.\r\n   * @param {number} liveEdgePadding a number indicating how far from the end of the playlist we should be in seconds.\r\n   *                 If this is provided, it is used in the safe live end calculation.\r\n   *                 Setting useSafeLiveEnd=false or liveEdgePadding=0 are equivalent.\r\n   *                 Corresponds to suggestedPresentationDelay in DASH manifests.\r\n   * @return {number} the end time of playlist\r\n   * @function playlistEnd\r\n   */\r\n\r\n  const playlistEnd = function (playlist, expired, useSafeLiveEnd, liveEdgePadding) {\r\n    if (!playlist || !playlist.segments) {\r\n      return null;\r\n    }\r\n    if (playlist.endList) {\r\n      return duration(playlist);\r\n    }\r\n    if (expired === null) {\r\n      return null;\r\n    }\r\n    expired = expired || 0;\r\n    let lastSegmentEndTime = intervalDuration(playlist, playlist.mediaSequence + playlist.segments.length, expired);\r\n    if (useSafeLiveEnd) {\r\n      liveEdgePadding = typeof liveEdgePadding === 'number' ? liveEdgePadding : liveEdgeDelay(null, playlist);\r\n      lastSegmentEndTime -= liveEdgePadding;\r\n    } // don't return a time less than zero\r\n\r\n    return Math.max(0, lastSegmentEndTime);\r\n  };\r\n  /**\r\n    * Calculates the interval of time that is currently seekable in a\r\n    * playlist. The returned time ranges are relative to the earliest\r\n    * moment in the specified playlist that is still available. A full\r\n    * seekable implementation for live streams would need to offset\r\n    * these values by the duration of content that has expired from the\r\n    * stream.\r\n    *\r\n    * @param {Object} playlist a media playlist object\r\n    * dropped off the front of the playlist in a live scenario\r\n    * @param {number=} expired the amount of time that has\r\n    * dropped off the front of the playlist in a live scenario\r\n    * @param {number} liveEdgePadding how far from the end of the playlist we should be in seconds.\r\n    *        Corresponds to suggestedPresentationDelay in DASH manifests.\r\n    * @return {TimeRanges} the periods of time that are valid targets\r\n    * for seeking\r\n    */\r\n\r\n  const seekable = function (playlist, expired, liveEdgePadding) {\r\n    const useSafeLiveEnd = true;\r\n    const seekableStart = expired || 0;\r\n    let seekableEnd = playlistEnd(playlist, expired, useSafeLiveEnd, liveEdgePadding);\r\n    if (seekableEnd === null) {\r\n      return createTimeRanges();\r\n    } // Clamp seekable end since it can not be less than the seekable start\r\n\r\n    if (seekableEnd < seekableStart) {\r\n      seekableEnd = seekableStart;\r\n    }\r\n    return createTimeRanges(seekableStart, seekableEnd);\r\n  };\r\n  /**\r\n   * Determine the index and estimated starting time of the segment that\r\n   * contains a specified playback position in a media playlist.\r\n   *\r\n   * @param {Object} options.playlist the media playlist to query\r\n   * @param {number} options.currentTime The number of seconds since the earliest\r\n   * possible position to determine the containing segment for\r\n   * @param {number} options.startTime the time when the segment/part starts\r\n   * @param {number} options.startingSegmentIndex the segment index to start looking at.\r\n   * @param {number?} [options.startingPartIndex] the part index to look at within the segment.\r\n   *\r\n   * @return {Object} an object with partIndex, segmentIndex, and startTime.\r\n   */\r\n\r\n  const getMediaInfoForTime = function ({\r\n    playlist,\r\n    currentTime,\r\n    startingSegmentIndex,\r\n    startingPartIndex,\r\n    startTime,\r\n    exactManifestTimings\r\n  }) {\r\n    let time = currentTime - startTime;\r\n    const partsAndSegments = getPartsAndSegments(playlist);\r\n    let startIndex = 0;\r\n    for (let i = 0; i < partsAndSegments.length; i++) {\r\n      const partAndSegment = partsAndSegments[i];\r\n      if (startingSegmentIndex !== partAndSegment.segmentIndex) {\r\n        continue;\r\n      } // skip this if part index does not match.\r\n\r\n      if (typeof startingPartIndex === 'number' && typeof partAndSegment.partIndex === 'number' && startingPartIndex !== partAndSegment.partIndex) {\r\n        continue;\r\n      }\r\n      startIndex = i;\r\n      break;\r\n    }\r\n    if (time < 0) {\r\n      // Walk backward from startIndex in the playlist, adding durations\r\n      // until we find a segment that contains `time` and return it\r\n      if (startIndex > 0) {\r\n        for (let i = startIndex - 1; i >= 0; i--) {\r\n          const partAndSegment = partsAndSegments[i];\r\n          time += partAndSegment.duration;\r\n          if (exactManifestTimings) {\r\n            if (time < 0) {\r\n              continue;\r\n            }\r\n          } else if (time + TIME_FUDGE_FACTOR <= 0) {\r\n            continue;\r\n          }\r\n          return {\r\n            partIndex: partAndSegment.partIndex,\r\n            segmentIndex: partAndSegment.segmentIndex,\r\n            startTime: startTime - sumDurations({\r\n              defaultDuration: playlist.targetDuration,\r\n              durationList: partsAndSegments,\r\n              startIndex,\r\n              endIndex: i\r\n            })\r\n          };\r\n        }\r\n      } // We were unable to find a good segment within the playlist\r\n      // so select the first segment\r\n\r\n      return {\r\n        partIndex: partsAndSegments[0] && partsAndSegments[0].partIndex || null,\r\n        segmentIndex: partsAndSegments[0] && partsAndSegments[0].segmentIndex || 0,\r\n        startTime: currentTime\r\n      };\r\n    } // When startIndex is negative, we first walk forward to first segment\r\n    // adding target durations. If we \"run out of time\" before getting to\r\n    // the first segment, return the first segment\r\n\r\n    if (startIndex < 0) {\r\n      for (let i = startIndex; i < 0; i++) {\r\n        time -= playlist.targetDuration;\r\n        if (time < 0) {\r\n          return {\r\n            partIndex: partsAndSegments[0] && partsAndSegments[0].partIndex || null,\r\n            segmentIndex: partsAndSegments[0] && partsAndSegments[0].segmentIndex || 0,\r\n            startTime: currentTime\r\n          };\r\n        }\r\n      }\r\n      startIndex = 0;\r\n    } // Walk forward from startIndex in the playlist, subtracting durations\r\n    // until we find a segment that contains `time` and return it\r\n\r\n    for (let i = startIndex; i < partsAndSegments.length; i++) {\r\n      const partAndSegment = partsAndSegments[i];\r\n      time -= partAndSegment.duration;\r\n      const canUseFudgeFactor = partAndSegment.duration > TIME_FUDGE_FACTOR;\r\n      const isExactlyAtTheEnd = time === 0;\r\n      const isExtremelyCloseToTheEnd = canUseFudgeFactor && time + TIME_FUDGE_FACTOR >= 0;\r\n      if (isExactlyAtTheEnd || isExtremelyCloseToTheEnd) {\r\n        // 1) We are exactly at the end of the current segment.\r\n        // 2) We are extremely close to the end of the current segment (The difference is less than  1 / 30).\r\n        //    We may encounter this situation when\r\n        //    we don't have exact match between segment duration info in the manifest and the actual duration of the segment\r\n        //    For example:\r\n        //    We appended 3 segments 10 seconds each, meaning we should have 30 sec buffered,\r\n        //    but we the actual buffered is 29.99999\r\n        //\r\n        // In both cases:\r\n        // if we passed current time -> it means that we already played current segment\r\n        // if we passed buffered.end -> it means that this segment is already loaded and buffered\r\n        // we should select the next segment if we have one:\r\n        if (i !== partsAndSegments.length - 1) {\r\n          continue;\r\n        }\r\n      }\r\n      if (exactManifestTimings) {\r\n        if (time > 0) {\r\n          continue;\r\n        }\r\n      } else if (time - TIME_FUDGE_FACTOR >= 0) {\r\n        continue;\r\n      }\r\n      return {\r\n        partIndex: partAndSegment.partIndex,\r\n        segmentIndex: partAndSegment.segmentIndex,\r\n        startTime: startTime + sumDurations({\r\n          defaultDuration: playlist.targetDuration,\r\n          durationList: partsAndSegments,\r\n          startIndex,\r\n          endIndex: i\r\n        })\r\n      };\r\n    } // We are out of possible candidates so load the last one...\r\n\r\n    return {\r\n      segmentIndex: partsAndSegments[partsAndSegments.length - 1].segmentIndex,\r\n      partIndex: partsAndSegments[partsAndSegments.length - 1].partIndex,\r\n      startTime: currentTime\r\n    };\r\n  };\r\n  /**\r\n   * Check whether the playlist is excluded or not.\r\n   *\r\n   * @param {Object} playlist the media playlist object\r\n   * @return {boolean} whether the playlist is excluded or not\r\n   * @function isExcluded\r\n   */\r\n\r\n  const isExcluded = function (playlist) {\r\n    return playlist.excludeUntil && playlist.excludeUntil > Date.now();\r\n  };\r\n  /**\r\n   * Check whether the playlist is compatible with current playback configuration or has\r\n   * been excluded permanently for being incompatible.\r\n   *\r\n   * @param {Object} playlist the media playlist object\r\n   * @return {boolean} whether the playlist is incompatible or not\r\n   * @function isIncompatible\r\n   */\r\n\r\n  const isIncompatible = function (playlist) {\r\n    return playlist.excludeUntil && playlist.excludeUntil === Infinity;\r\n  };\r\n  /**\r\n   * Check whether the playlist is enabled or not.\r\n   *\r\n   * @param {Object} playlist the media playlist object\r\n   * @return {boolean} whether the playlist is enabled or not\r\n   * @function isEnabled\r\n   */\r\n\r\n  const isEnabled = function (playlist) {\r\n    const excluded = isExcluded(playlist);\r\n    return !playlist.disabled && !excluded;\r\n  };\r\n  /**\r\n   * Check whether the playlist has been manually disabled through the representations api.\r\n   *\r\n   * @param {Object} playlist the media playlist object\r\n   * @return {boolean} whether the playlist is disabled manually or not\r\n   * @function isDisabled\r\n   */\r\n\r\n  const isDisabled = function (playlist) {\r\n    return playlist.disabled;\r\n  };\r\n  /**\r\n   * Returns whether the current playlist is an AES encrypted HLS stream\r\n   *\r\n   * @return {boolean} true if it's an AES encrypted HLS stream\r\n   */\r\n\r\n  const isAes = function (media) {\r\n    for (let i = 0; i < media.segments.length; i++) {\r\n      if (media.segments[i].key) {\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  };\r\n  /**\r\n   * Checks if the playlist has a value for the specified attribute\r\n   *\r\n   * @param {string} attr\r\n   *        Attribute to check for\r\n   * @param {Object} playlist\r\n   *        The media playlist object\r\n   * @return {boolean}\r\n   *         Whether the playlist contains a value for the attribute or not\r\n   * @function hasAttribute\r\n   */\r\n\r\n  const hasAttribute = function (attr, playlist) {\r\n    return playlist.attributes && playlist.attributes[attr];\r\n  };\r\n  /**\r\n   * Estimates the time required to complete a segment download from the specified playlist\r\n   *\r\n   * @param {number} segmentDuration\r\n   *        Duration of requested segment\r\n   * @param {number} bandwidth\r\n   *        Current measured bandwidth of the player\r\n   * @param {Object} playlist\r\n   *        The media playlist object\r\n   * @param {number=} bytesReceived\r\n   *        Number of bytes already received for the request. Defaults to 0\r\n   * @return {number|NaN}\r\n   *         The estimated time to request the segment. NaN if bandwidth information for\r\n   *         the given playlist is unavailable\r\n   * @function estimateSegmentRequestTime\r\n   */\r\n\r\n  const estimateSegmentRequestTime = function (segmentDuration, bandwidth, playlist, bytesReceived = 0) {\r\n    if (!hasAttribute('BANDWIDTH', playlist)) {\r\n      return NaN;\r\n    }\r\n    const size = segmentDuration * playlist.attributes.BANDWIDTH;\r\n    return (size - bytesReceived * 8) / bandwidth;\r\n  };\r\n  /*\r\n   * Returns whether the current playlist is the lowest rendition\r\n   *\r\n   * @return {Boolean} true if on lowest rendition\r\n   */\r\n\r\n  const isLowestEnabledRendition = (main, media) => {\r\n    if (main.playlists.length === 1) {\r\n      return true;\r\n    }\r\n    const currentBandwidth = media.attributes.BANDWIDTH || Number.MAX_VALUE;\r\n    return main.playlists.filter(playlist => {\r\n      if (!isEnabled(playlist)) {\r\n        return false;\r\n      }\r\n      return (playlist.attributes.BANDWIDTH || 0) < currentBandwidth;\r\n    }).length === 0;\r\n  };\r\n  const playlistMatch = (a, b) => {\r\n    // both playlits are null\r\n    // or only one playlist is non-null\r\n    // no match\r\n    if (!a && !b || !a && b || a && !b) {\r\n      return false;\r\n    } // playlist objects are the same, match\r\n\r\n    if (a === b) {\r\n      return true;\r\n    } // first try to use id as it should be the most\r\n    // accurate\r\n\r\n    if (a.id && b.id && a.id === b.id) {\r\n      return true;\r\n    } // next try to use reslovedUri as it should be the\r\n    // second most accurate.\r\n\r\n    if (a.resolvedUri && b.resolvedUri && a.resolvedUri === b.resolvedUri) {\r\n      return true;\r\n    } // finally try to use uri as it should be accurate\r\n    // but might miss a few cases for relative uris\r\n\r\n    if (a.uri && b.uri && a.uri === b.uri) {\r\n      return true;\r\n    }\r\n    return false;\r\n  };\r\n  const someAudioVariant = function (main, callback) {\r\n    const AUDIO = main && main.mediaGroups && main.mediaGroups.AUDIO || {};\r\n    let found = false;\r\n    for (const groupName in AUDIO) {\r\n      for (const label in AUDIO[groupName]) {\r\n        found = callback(AUDIO[groupName][label]);\r\n        if (found) {\r\n          break;\r\n        }\r\n      }\r\n      if (found) {\r\n        break;\r\n      }\r\n    }\r\n    return !!found;\r\n  };\r\n  const isAudioOnly = main => {\r\n    // we are audio only if we have no main playlists but do\r\n    // have media group playlists.\r\n    if (!main || !main.playlists || !main.playlists.length) {\r\n      // without audio variants or playlists this\r\n      // is not an audio only main.\r\n      const found = someAudioVariant(main, variant => variant.playlists && variant.playlists.length || variant.uri);\r\n      return found;\r\n    } // if every playlist has only an audio codec it is audio only\r\n\r\n    for (let i = 0; i < main.playlists.length; i++) {\r\n      const playlist = main.playlists[i];\r\n      const CODECS = playlist.attributes && playlist.attributes.CODECS; // all codecs are audio, this is an audio playlist.\r\n\r\n      if (CODECS && CODECS.split(',').every(c => isAudioCodec(c))) {\r\n        continue;\r\n      } // playlist is in an audio group it is audio only\r\n\r\n      const found = someAudioVariant(main, variant => playlistMatch(playlist, variant));\r\n      if (found) {\r\n        continue;\r\n      } // if we make it here this playlist isn't audio and we\r\n      // are not audio only\r\n\r\n      return false;\r\n    } // if we make it past every playlist without returning, then\r\n    // this is an audio only playlist.\r\n\r\n    return true;\r\n  }; // exports\r\n\r\n  var Playlist = {\r\n    liveEdgeDelay,\r\n    duration,\r\n    seekable,\r\n    getMediaInfoForTime,\r\n    isEnabled,\r\n    isDisabled,\r\n    isExcluded,\r\n    isIncompatible,\r\n    playlistEnd,\r\n    isAes,\r\n    hasAttribute,\r\n    estimateSegmentRequestTime,\r\n    isLowestEnabledRendition,\r\n    isAudioOnly,\r\n    playlistMatch,\r\n    segmentDurationWithParts\r\n  };\r\n  const {\r\n    log\r\n  } = videojs;\r\n  const createPlaylistID = (index, uri) => {\r\n    return `${index}-${uri}`;\r\n  }; // default function for creating a group id\r\n\r\n  const groupID = (type, group, label) => {\r\n    return `placeholder-uri-${type}-${group}-${label}`;\r\n  };\r\n  /**\r\n   * Parses a given m3u8 playlist\r\n   *\r\n   * @param {Function} [onwarn]\r\n   *        a function to call when the parser triggers a warning event.\r\n   * @param {Function} [oninfo]\r\n   *        a function to call when the parser triggers an info event.\r\n   * @param {string} manifestString\r\n   *        The downloaded manifest string\r\n   * @param {Object[]} [customTagParsers]\r\n   *        An array of custom tag parsers for the m3u8-parser instance\r\n   * @param {Object[]} [customTagMappers]\r\n   *        An array of custom tag mappers for the m3u8-parser instance\r\n   * @param {boolean} [llhls]\r\n   *        Whether to keep ll-hls features in the manifest after parsing.\r\n   * @return {Object}\r\n   *         The manifest object\r\n   */\r\n\r\n  const parseManifest = ({\r\n    onwarn,\r\n    oninfo,\r\n    manifestString,\r\n    customTagParsers = [],\r\n    customTagMappers = [],\r\n    llhls\r\n  }) => {\r\n    const parser = new Parser();\r\n    if (onwarn) {\r\n      parser.on('warn', onwarn);\r\n    }\r\n    if (oninfo) {\r\n      parser.on('info', oninfo);\r\n    }\r\n    customTagParsers.forEach(customParser => parser.addParser(customParser));\r\n    customTagMappers.forEach(mapper => parser.addTagMapper(mapper));\r\n    parser.push(manifestString);\r\n    parser.end();\r\n    const manifest = parser.manifest; // remove llhls features from the parsed manifest\r\n    // if we don't want llhls support.\r\n\r\n    if (!llhls) {\r\n      ['preloadSegment', 'skip', 'serverControl', 'renditionReports', 'partInf', 'partTargetDuration'].forEach(function (k) {\r\n        if (manifest.hasOwnProperty(k)) {\r\n          delete manifest[k];\r\n        }\r\n      });\r\n      if (manifest.segments) {\r\n        manifest.segments.forEach(function (segment) {\r\n          ['parts', 'preloadHints'].forEach(function (k) {\r\n            if (segment.hasOwnProperty(k)) {\r\n              delete segment[k];\r\n            }\r\n          });\r\n        });\r\n      }\r\n    }\r\n    if (!manifest.targetDuration) {\r\n      let targetDuration = 10;\r\n      if (manifest.segments && manifest.segments.length) {\r\n        targetDuration = manifest.segments.reduce((acc, s) => Math.max(acc, s.duration), 0);\r\n      }\r\n      if (onwarn) {\r\n        onwarn({\r\n          message: `manifest has no targetDuration defaulting to ${targetDuration}`\r\n        });\r\n      }\r\n      manifest.targetDuration = targetDuration;\r\n    }\r\n    const parts = getLastParts(manifest);\r\n    if (parts.length && !manifest.partTargetDuration) {\r\n      const partTargetDuration = parts.reduce((acc, p) => Math.max(acc, p.duration), 0);\r\n      if (onwarn) {\r\n        onwarn({\r\n          message: `manifest has no partTargetDuration defaulting to ${partTargetDuration}`\r\n        });\r\n        log.error('LL-HLS manifest has parts but lacks required #EXT-X-PART-INF:PART-TARGET value. See https://datatracker.ietf.org/doc/html/draft-pantos-hls-rfc8216bis-09#section-4.4.3.7. Playback is not guaranteed.');\r\n      }\r\n      manifest.partTargetDuration = partTargetDuration;\r\n    }\r\n    return manifest;\r\n  };\r\n  /**\r\n   * Loops through all supported media groups in main and calls the provided\r\n   * callback for each group\r\n   *\r\n   * @param {Object} main\r\n   *        The parsed main manifest object\r\n   * @param {Function} callback\r\n   *        Callback to call for each media group\r\n   */\r\n\r\n  const forEachMediaGroup = (main, callback) => {\r\n    if (!main.mediaGroups) {\r\n      return;\r\n    }\r\n    ['AUDIO', 'SUBTITLES'].forEach(mediaType => {\r\n      if (!main.mediaGroups[mediaType]) {\r\n        return;\r\n      }\r\n      for (const groupKey in main.mediaGroups[mediaType]) {\r\n        for (const labelKey in main.mediaGroups[mediaType][groupKey]) {\r\n          const mediaProperties = main.mediaGroups[mediaType][groupKey][labelKey];\r\n          callback(mediaProperties, mediaType, groupKey, labelKey);\r\n        }\r\n      }\r\n    });\r\n  };\r\n  /**\r\n   * Adds properties and attributes to the playlist to keep consistent functionality for\r\n   * playlists throughout VHS.\r\n   *\r\n   * @param {Object} config\r\n   *        Arguments object\r\n   * @param {Object} config.playlist\r\n   *        The media playlist\r\n   * @param {string} [config.uri]\r\n   *        The uri to the media playlist (if media playlist is not from within a main\r\n   *        playlist)\r\n   * @param {string} id\r\n   *        ID to use for the playlist\r\n   */\r\n\r\n  const setupMediaPlaylist = ({\r\n    playlist,\r\n    uri,\r\n    id\r\n  }) => {\r\n    playlist.id = id;\r\n    playlist.playlistErrors_ = 0;\r\n    if (uri) {\r\n      // For media playlists, m3u8-parser does not have access to a URI, as HLS media\r\n      // playlists do not contain their own source URI, but one is needed for consistency in\r\n      // VHS.\r\n      playlist.uri = uri;\r\n    } // For HLS main playlists, even though certain attributes MUST be defined, the\r\n    // stream may still be played without them.\r\n    // For HLS media playlists, m3u8-parser does not attach an attributes object to the\r\n    // manifest.\r\n    //\r\n    // To avoid undefined reference errors through the project, and make the code easier\r\n    // to write/read, add an empty attributes object for these cases.\r\n\r\n    playlist.attributes = playlist.attributes || {};\r\n  };\r\n  /**\r\n   * Adds ID, resolvedUri, and attributes properties to each playlist of the main, where\r\n   * necessary. In addition, creates playlist IDs for each playlist and adds playlist ID to\r\n   * playlist references to the playlists array.\r\n   *\r\n   * @param {Object} main\r\n   *        The main playlist\r\n   */\r\n\r\n  const setupMediaPlaylists = main => {\r\n    let i = main.playlists.length;\r\n    while (i--) {\r\n      const playlist = main.playlists[i];\r\n      setupMediaPlaylist({\r\n        playlist,\r\n        id: createPlaylistID(i, playlist.uri)\r\n      });\r\n      playlist.resolvedUri = resolveUrl(main.uri, playlist.uri);\r\n      main.playlists[playlist.id] = playlist; // URI reference added for backwards compatibility\r\n\r\n      main.playlists[playlist.uri] = playlist; // Although the spec states an #EXT-X-STREAM-INF tag MUST have a BANDWIDTH attribute,\r\n      // the stream can be played without it. Although an attributes property may have been\r\n      // added to the playlist to prevent undefined references, issue a warning to fix the\r\n      // manifest.\r\n\r\n      if (!playlist.attributes.BANDWIDTH) {\r\n        log.warn('Invalid playlist STREAM-INF detected. Missing BANDWIDTH attribute.');\r\n      }\r\n    }\r\n  };\r\n  /**\r\n   * Adds resolvedUri properties to each media group.\r\n   *\r\n   * @param {Object} main\r\n   *        The main playlist\r\n   */\r\n\r\n  const resolveMediaGroupUris = main => {\r\n    forEachMediaGroup(main, properties => {\r\n      if (properties.uri) {\r\n        properties.resolvedUri = resolveUrl(main.uri, properties.uri);\r\n      }\r\n    });\r\n  };\r\n  /**\r\n   * Creates a main playlist wrapper to insert a sole media playlist into.\r\n   *\r\n   * @param {Object} media\r\n   *        Media playlist\r\n   * @param {string} uri\r\n   *        The media URI\r\n   *\r\n   * @return {Object}\r\n   *         main playlist\r\n   */\r\n\r\n  const mainForMedia = (media, uri) => {\r\n    const id = createPlaylistID(0, uri);\r\n    const main = {\r\n      mediaGroups: {\r\n        'AUDIO': {},\r\n        'VIDEO': {},\r\n        'CLOSED-CAPTIONS': {},\r\n        'SUBTITLES': {}\r\n      },\r\n      uri: window.location.href,\r\n      resolvedUri: window.location.href,\r\n      playlists: [{\r\n        uri,\r\n        id,\r\n        resolvedUri: uri,\r\n        // m3u8-parser does not attach an attributes property to media playlists so make\r\n        // sure that the property is attached to avoid undefined reference errors\r\n        attributes: {}\r\n      }]\r\n    }; // set up ID reference\r\n\r\n    main.playlists[id] = main.playlists[0]; // URI reference added for backwards compatibility\r\n\r\n    main.playlists[uri] = main.playlists[0];\r\n    return main;\r\n  };\r\n  /**\r\n   * Does an in-place update of the main manifest to add updated playlist URI references\r\n   * as well as other properties needed by VHS that aren't included by the parser.\r\n   *\r\n   * @param {Object} main\r\n   *        main manifest object\r\n   * @param {string} uri\r\n   *        The source URI\r\n   * @param {function} createGroupID\r\n   *        A function to determine how to create the groupID for mediaGroups\r\n   */\r\n\r\n  const addPropertiesToMain = (main, uri, createGroupID = groupID) => {\r\n    main.uri = uri;\r\n    for (let i = 0; i < main.playlists.length; i++) {\r\n      if (!main.playlists[i].uri) {\r\n        // Set up phony URIs for the playlists since playlists are referenced by their URIs\r\n        // throughout VHS, but some formats (e.g., DASH) don't have external URIs\r\n        // TODO: consider adding dummy URIs in mpd-parser\r\n        const phonyUri = `placeholder-uri-${i}`;\r\n        main.playlists[i].uri = phonyUri;\r\n      }\r\n    }\r\n    const audioOnlyMain = isAudioOnly(main);\r\n    forEachMediaGroup(main, (properties, mediaType, groupKey, labelKey) => {\r\n      // add a playlist array under properties\r\n      if (!properties.playlists || !properties.playlists.length) {\r\n        // If the manifest is audio only and this media group does not have a uri, check\r\n        // if the media group is located in the main list of playlists. If it is, don't add\r\n        // placeholder properties as it shouldn't be considered an alternate audio track.\r\n        if (audioOnlyMain && mediaType === 'AUDIO' && !properties.uri) {\r\n          for (let i = 0; i < main.playlists.length; i++) {\r\n            const p = main.playlists[i];\r\n            if (p.attributes && p.attributes.AUDIO && p.attributes.AUDIO === groupKey) {\r\n              return;\r\n            }\r\n          }\r\n        }\r\n        properties.playlists = [_extends$1({}, properties)];\r\n      }\r\n      properties.playlists.forEach(function (p, i) {\r\n        const groupId = createGroupID(mediaType, groupKey, labelKey, p);\r\n        const id = createPlaylistID(i, groupId);\r\n        if (p.uri) {\r\n          p.resolvedUri = p.resolvedUri || resolveUrl(main.uri, p.uri);\r\n        } else {\r\n          // DEPRECATED, this has been added to prevent a breaking change.\r\n          // previously we only ever had a single media group playlist, so\r\n          // we mark the first playlist uri without prepending the index as we used to\r\n          // ideally we would do all of the playlists the same way.\r\n          p.uri = i === 0 ? groupId : id; // don't resolve a placeholder uri to an absolute url, just use\r\n          // the placeholder again\r\n\r\n          p.resolvedUri = p.uri;\r\n        }\r\n        p.id = p.id || id; // add an empty attributes object, all playlists are\r\n        // expected to have this.\r\n\r\n        p.attributes = p.attributes || {}; // setup ID and URI references (URI for backwards compatibility)\r\n\r\n        main.playlists[p.id] = p;\r\n        main.playlists[p.uri] = p;\r\n      });\r\n    });\r\n    setupMediaPlaylists(main);\r\n    resolveMediaGroupUris(main);\r\n  };\r\n  class DateRangesStorage {\r\n    constructor() {\r\n      this.offset_ = null;\r\n      this.pendingDateRanges_ = new Map();\r\n      this.processedDateRanges_ = new Map();\r\n    }\r\n    setOffset(segments = []) {\r\n      // already set\r\n      if (this.offset_ !== null) {\r\n        return;\r\n      } // no segment to process\r\n\r\n      if (!segments.length) {\r\n        return;\r\n      }\r\n      const [firstSegment] = segments; // no program date time\r\n\r\n      if (firstSegment.programDateTime === undefined) {\r\n        return;\r\n      } // Set offset as ProgramDateTime for the very first segment of the very first playlist load:\r\n\r\n      this.offset_ = firstSegment.programDateTime / 1000;\r\n    }\r\n    setPendingDateRanges(dateRanges = []) {\r\n      if (!dateRanges.length) {\r\n        return;\r\n      }\r\n      const [dateRange] = dateRanges;\r\n      const startTime = dateRange.startDate.getTime();\r\n      this.trimProcessedDateRanges_(startTime);\r\n      this.pendingDateRanges_ = dateRanges.reduce((map, pendingDateRange) => {\r\n        map.set(pendingDateRange.id, pendingDateRange);\r\n        return map;\r\n      }, new Map());\r\n    }\r\n    processDateRange(dateRange) {\r\n      this.pendingDateRanges_.delete(dateRange.id);\r\n      this.processedDateRanges_.set(dateRange.id, dateRange);\r\n    }\r\n    getDateRangesToProcess() {\r\n      if (this.offset_ === null) {\r\n        return [];\r\n      }\r\n      const dateRangeClasses = {};\r\n      const dateRangesToProcess = [];\r\n      this.pendingDateRanges_.forEach((dateRange, id) => {\r\n        if (this.processedDateRanges_.has(id)) {\r\n          return;\r\n        }\r\n        dateRange.startTime = dateRange.startDate.getTime() / 1000 - this.offset_;\r\n        dateRange.processDateRange = () => this.processDateRange(dateRange);\r\n        dateRangesToProcess.push(dateRange);\r\n        if (!dateRange.class) {\r\n          return;\r\n        }\r\n        if (dateRangeClasses[dateRange.class]) {\r\n          const length = dateRangeClasses[dateRange.class].push(dateRange);\r\n          dateRange.classListIndex = length - 1;\r\n        } else {\r\n          dateRangeClasses[dateRange.class] = [dateRange];\r\n          dateRange.classListIndex = 0;\r\n        }\r\n      });\r\n      for (const dateRange of dateRangesToProcess) {\r\n        const classList = dateRangeClasses[dateRange.class] || [];\r\n        if (dateRange.endDate) {\r\n          dateRange.endTime = dateRange.endDate.getTime() / 1000 - this.offset_;\r\n        } else if (dateRange.endOnNext && classList[dateRange.classListIndex + 1]) {\r\n          dateRange.endTime = classList[dateRange.classListIndex + 1].startTime;\r\n        } else if (dateRange.duration) {\r\n          dateRange.endTime = dateRange.startTime + dateRange.duration;\r\n        } else if (dateRange.plannedDuration) {\r\n          dateRange.endTime = dateRange.startTime + dateRange.plannedDuration;\r\n        } else {\r\n          dateRange.endTime = dateRange.startTime;\r\n        }\r\n      }\r\n      return dateRangesToProcess;\r\n    }\r\n    trimProcessedDateRanges_(startTime) {\r\n      const copy = new Map(this.processedDateRanges_);\r\n      copy.forEach((dateRange, id) => {\r\n        if (dateRange.startDate.getTime() < startTime) {\r\n          this.processedDateRanges_.delete(id);\r\n        }\r\n      });\r\n    }\r\n  }\r\n  const QUOTA_EXCEEDED_ERR = 22;\r\n  const getStreamingNetworkErrorMetadata = ({\r\n    requestType,\r\n    request,\r\n    error,\r\n    parseFailure\r\n  }) => {\r\n    const isBadStatus = request.status < 200 || request.status > 299;\r\n    const isFailure = request.status >= 400 && request.status <= 499;\r\n    const errorMetadata = {\r\n      uri: request.uri,\r\n      requestType\r\n    };\r\n    const isBadStatusOrParseFailure = isBadStatus && !isFailure || parseFailure;\r\n    if (error && isFailure) {\r\n      // copy original error and add to the metadata.\r\n      errorMetadata.error = _extends$1({}, error);\r\n      errorMetadata.errorType = videojs.Error.NetworkRequestFailed;\r\n    } else if (request.aborted) {\r\n      errorMetadata.errorType = videojs.Error.NetworkRequestAborted;\r\n    } else if (request.timedout) {\r\n      errorMetadata.erroType = videojs.Error.NetworkRequestTimeout;\r\n    } else if (isBadStatusOrParseFailure) {\r\n      const errorType = parseFailure ? videojs.Error.NetworkBodyParserFailed : videojs.Error.NetworkBadStatus;\r\n      errorMetadata.errorType = errorType;\r\n      errorMetadata.status = request.status;\r\n      errorMetadata.headers = request.headers;\r\n    }\r\n    return errorMetadata;\r\n  };\r\n  const {\r\n    EventTarget: EventTarget$1\r\n  } = videojs;\r\n  const addLLHLSQueryDirectives = (uri, media) => {\r\n    if (media.endList || !media.serverControl) {\r\n      return uri;\r\n    }\r\n    const parameters = {};\r\n    if (media.serverControl.canBlockReload) {\r\n      const {\r\n        preloadSegment\r\n      } = media; // next msn is a zero based value, length is not.\r\n\r\n      let nextMSN = media.mediaSequence + media.segments.length; // If preload segment has parts then it is likely\r\n      // that we are going to request a part of that preload segment.\r\n      // the logic below is used to determine that.\r\n\r\n      if (preloadSegment) {\r\n        const parts = preloadSegment.parts || []; // _HLS_part is a zero based index\r\n\r\n        const nextPart = getKnownPartCount(media) - 1; // if nextPart is > -1 and not equal to just the\r\n        // length of parts, then we know we had part preload hints\r\n        // and we need to add the _HLS_part= query\r\n\r\n        if (nextPart > -1 && nextPart !== parts.length - 1) {\r\n          // add existing parts to our preload hints\r\n          // eslint-disable-next-line\r\n          parameters._HLS_part = nextPart;\r\n        } // this if statement makes sure that we request the msn\r\n        // of the preload segment if:\r\n        // 1. the preload segment had parts (and was not yet a full segment)\r\n        //    but was added to our segments array\r\n        // 2. the preload segment had preload hints for parts that are not in\r\n        //    the manifest yet.\r\n        // in all other cases we want the segment after the preload segment\r\n        // which will be given by using media.segments.length because it is 1 based\r\n        // rather than 0 based.\r\n\r\n        if (nextPart > -1 || parts.length) {\r\n          nextMSN--;\r\n        }\r\n      } // add _HLS_msn= in front of any _HLS_part query\r\n      // eslint-disable-next-line\r\n\r\n      parameters._HLS_msn = nextMSN;\r\n    }\r\n    if (media.serverControl && media.serverControl.canSkipUntil) {\r\n      // add _HLS_skip= infront of all other queries.\r\n      // eslint-disable-next-line\r\n      parameters._HLS_skip = media.serverControl.canSkipDateranges ? 'v2' : 'YES';\r\n    }\r\n    if (Object.keys(parameters).length) {\r\n      const parsedUri = new window.URL(uri);\r\n      ['_HLS_skip', '_HLS_msn', '_HLS_part'].forEach(function (name) {\r\n        if (!parameters.hasOwnProperty(name)) {\r\n          return;\r\n        }\r\n        parsedUri.searchParams.set(name, parameters[name]);\r\n      });\r\n      uri = parsedUri.toString();\r\n    }\r\n    return uri;\r\n  };\r\n  /**\r\n   * Returns a new segment object with properties and\r\n   * the parts array merged.\r\n   *\r\n   * @param {Object} a the old segment\r\n   * @param {Object} b the new segment\r\n   *\r\n   * @return {Object} the merged segment\r\n   */\r\n\r\n  const updateSegment = (a, b) => {\r\n    if (!a) {\r\n      return b;\r\n    }\r\n    const result = merge(a, b); // if only the old segment has preload hints\r\n    // and the new one does not, remove preload hints.\r\n\r\n    if (a.preloadHints && !b.preloadHints) {\r\n      delete result.preloadHints;\r\n    } // if only the old segment has parts\r\n    // then the parts are no longer valid\r\n\r\n    if (a.parts && !b.parts) {\r\n      delete result.parts; // if both segments have parts\r\n      // copy part propeties from the old segment\r\n      // to the new one.\r\n    } else if (a.parts && b.parts) {\r\n      for (let i = 0; i < b.parts.length; i++) {\r\n        if (a.parts && a.parts[i]) {\r\n          result.parts[i] = merge(a.parts[i], b.parts[i]);\r\n        }\r\n      }\r\n    } // set skipped to false for segments that have\r\n    // have had information merged from the old segment.\r\n\r\n    if (!a.skipped && b.skipped) {\r\n      result.skipped = false;\r\n    } // set preload to false for segments that have\r\n    // had information added in the new segment.\r\n\r\n    if (a.preload && !b.preload) {\r\n      result.preload = false;\r\n    }\r\n    return result;\r\n  };\r\n  /**\r\n   * Returns a new array of segments that is the result of merging\r\n   * properties from an older list of segments onto an updated\r\n   * list. No properties on the updated playlist will be ovewritten.\r\n   *\r\n   * @param {Array} original the outdated list of segments\r\n   * @param {Array} update the updated list of segments\r\n   * @param {number=} offset the index of the first update\r\n   * segment in the original segment list. For non-live playlists,\r\n   * this should always be zero and does not need to be\r\n   * specified. For live playlists, it should be the difference\r\n   * between the media sequence numbers in the original and updated\r\n   * playlists.\r\n   * @return {Array} a list of merged segment objects\r\n   */\r\n\r\n  const updateSegments = (original, update, offset) => {\r\n    const oldSegments = original.slice();\r\n    const newSegments = update.slice();\r\n    offset = offset || 0;\r\n    const result = [];\r\n    let currentMap;\r\n    for (let newIndex = 0; newIndex < newSegments.length; newIndex++) {\r\n      const oldSegment = oldSegments[newIndex + offset];\r\n      const newSegment = newSegments[newIndex];\r\n      if (oldSegment) {\r\n        currentMap = oldSegment.map || currentMap;\r\n        result.push(updateSegment(oldSegment, newSegment));\r\n      } else {\r\n        // carry over map to new segment if it is missing\r\n        if (currentMap && !newSegment.map) {\r\n          newSegment.map = currentMap;\r\n        }\r\n        result.push(newSegment);\r\n      }\r\n    }\r\n    return result;\r\n  };\r\n  const resolveSegmentUris = (segment, baseUri) => {\r\n    // preloadSegment will not have a uri at all\r\n    // as the segment isn't actually in the manifest yet, only parts\r\n    if (!segment.resolvedUri && segment.uri) {\r\n      segment.resolvedUri = resolveUrl(baseUri, segment.uri);\r\n    }\r\n    if (segment.key && !segment.key.resolvedUri) {\r\n      segment.key.resolvedUri = resolveUrl(baseUri, segment.key.uri);\r\n    }\r\n    if (segment.map && !segment.map.resolvedUri) {\r\n      segment.map.resolvedUri = resolveUrl(baseUri, segment.map.uri);\r\n    }\r\n    if (segment.map && segment.map.key && !segment.map.key.resolvedUri) {\r\n      segment.map.key.resolvedUri = resolveUrl(baseUri, segment.map.key.uri);\r\n    }\r\n    if (segment.parts && segment.parts.length) {\r\n      segment.parts.forEach(p => {\r\n        if (p.resolvedUri) {\r\n          return;\r\n        }\r\n        p.resolvedUri = resolveUrl(baseUri, p.uri);\r\n      });\r\n    }\r\n    if (segment.preloadHints && segment.preloadHints.length) {\r\n      segment.preloadHints.forEach(p => {\r\n        if (p.resolvedUri) {\r\n          return;\r\n        }\r\n        p.resolvedUri = resolveUrl(baseUri, p.uri);\r\n      });\r\n    }\r\n  };\r\n  const getAllSegments = function (media) {\r\n    const segments = media.segments || [];\r\n    const preloadSegment = media.preloadSegment; // a preloadSegment with only preloadHints is not currently\r\n    // a usable segment, only include a preloadSegment that has\r\n    // parts.\r\n\r\n    if (preloadSegment && preloadSegment.parts && preloadSegment.parts.length) {\r\n      // if preloadHints has a MAP that means that the\r\n      // init segment is going to change. We cannot use any of the parts\r\n      // from this preload segment.\r\n      if (preloadSegment.preloadHints) {\r\n        for (let i = 0; i < preloadSegment.preloadHints.length; i++) {\r\n          if (preloadSegment.preloadHints[i].type === 'MAP') {\r\n            return segments;\r\n          }\r\n        }\r\n      } // set the duration for our preload segment to target duration.\r\n\r\n      preloadSegment.duration = media.targetDuration;\r\n      preloadSegment.preload = true;\r\n      segments.push(preloadSegment);\r\n    }\r\n    return segments;\r\n  }; // consider the playlist unchanged if the playlist object is the same or\r\n  // the number of segments is equal, the media sequence number is unchanged,\r\n  // and this playlist hasn't become the end of the playlist\r\n\r\n  const isPlaylistUnchanged = (a, b) => a === b || a.segments && b.segments && a.segments.length === b.segments.length && a.endList === b.endList && a.mediaSequence === b.mediaSequence && a.preloadSegment === b.preloadSegment;\r\n  /**\r\n    * Returns a new main playlist that is the result of merging an\r\n    * updated media playlist into the original version. If the\r\n    * updated media playlist does not match any of the playlist\r\n    * entries in the original main playlist, null is returned.\r\n    *\r\n    * @param {Object} main a parsed main M3U8 object\r\n    * @param {Object} media a parsed media M3U8 object\r\n    * @return {Object} a new object that represents the original\r\n    * main playlist with the updated media playlist merged in, or\r\n    * null if the merge produced no change.\r\n    */\r\n\r\n  const updateMain$1 = (main, newMedia, unchangedCheck = isPlaylistUnchanged) => {\r\n    const result = merge(main, {});\r\n    const oldMedia = result.playlists[newMedia.id];\r\n    if (!oldMedia) {\r\n      return null;\r\n    }\r\n    if (unchangedCheck(oldMedia, newMedia)) {\r\n      return null;\r\n    }\r\n    newMedia.segments = getAllSegments(newMedia);\r\n    const mergedPlaylist = merge(oldMedia, newMedia); // always use the new media's preload segment\r\n\r\n    if (mergedPlaylist.preloadSegment && !newMedia.preloadSegment) {\r\n      delete mergedPlaylist.preloadSegment;\r\n    } // if the update could overlap existing segment information, merge the two segment lists\r\n\r\n    if (oldMedia.segments) {\r\n      if (newMedia.skip) {\r\n        newMedia.segments = newMedia.segments || []; // add back in objects for skipped segments, so that we merge\r\n        // old properties into the new segments\r\n\r\n        for (let i = 0; i < newMedia.skip.skippedSegments; i++) {\r\n          newMedia.segments.unshift({\r\n            skipped: true\r\n          });\r\n        }\r\n      }\r\n      mergedPlaylist.segments = updateSegments(oldMedia.segments, newMedia.segments, newMedia.mediaSequence - oldMedia.mediaSequence);\r\n    } // resolve any segment URIs to prevent us from having to do it later\r\n\r\n    mergedPlaylist.segments.forEach(segment => {\r\n      resolveSegmentUris(segment, mergedPlaylist.resolvedUri);\r\n    }); // TODO Right now in the playlists array there are two references to each playlist, one\r\n    // that is referenced by index, and one by URI. The index reference may no longer be\r\n    // necessary.\r\n\r\n    for (let i = 0; i < result.playlists.length; i++) {\r\n      if (result.playlists[i].id === newMedia.id) {\r\n        result.playlists[i] = mergedPlaylist;\r\n      }\r\n    }\r\n    result.playlists[newMedia.id] = mergedPlaylist; // URI reference added for backwards compatibility\r\n\r\n    result.playlists[newMedia.uri] = mergedPlaylist; // update media group playlist references.\r\n\r\n    forEachMediaGroup(main, (properties, mediaType, groupKey, labelKey) => {\r\n      if (!properties.playlists) {\r\n        return;\r\n      }\r\n      for (let i = 0; i < properties.playlists.length; i++) {\r\n        if (newMedia.id === properties.playlists[i].id) {\r\n          properties.playlists[i] = mergedPlaylist;\r\n        }\r\n      }\r\n    });\r\n    return result;\r\n  };\r\n  /**\r\n   * Calculates the time to wait before refreshing a live playlist\r\n   *\r\n   * @param {Object} media\r\n   *        The current media\r\n   * @param {boolean} update\r\n   *        True if there were any updates from the last refresh, false otherwise\r\n   * @return {number}\r\n   *         The time in ms to wait before refreshing the live playlist\r\n   */\r\n\r\n  const refreshDelay = (media, update) => {\r\n    const segments = media.segments || [];\r\n    const lastSegment = segments[segments.length - 1];\r\n    const lastPart = lastSegment && lastSegment.parts && lastSegment.parts[lastSegment.parts.length - 1];\r\n    const lastDuration = lastPart && lastPart.duration || lastSegment && lastSegment.duration;\r\n    if (update && lastDuration) {\r\n      return lastDuration * 1000;\r\n    } // if the playlist is unchanged since the last reload or last segment duration\r\n    // cannot be determined, try again after half the target duration\r\n\r\n    return (media.partTargetDuration || media.targetDuration || 10) * 500;\r\n  };\r\n  const playlistMetadataPayload = (playlists, type, isLive) => {\r\n    if (!playlists) {\r\n      return;\r\n    }\r\n    const renditions = [];\r\n    playlists.forEach(playlist => {\r\n      // we need attributes to populate rendition data.\r\n      if (!playlist.attributes) {\r\n        return;\r\n      }\r\n      const {\r\n        BANDWIDTH,\r\n        RESOLUTION,\r\n        CODECS\r\n      } = playlist.attributes;\r\n      renditions.push({\r\n        id: playlist.id,\r\n        bandwidth: BANDWIDTH,\r\n        resolution: RESOLUTION,\r\n        codecs: CODECS\r\n      });\r\n    });\r\n    return {\r\n      type,\r\n      isLive,\r\n      renditions\r\n    };\r\n  };\r\n  /**\r\n   * Load a playlist from a remote location\r\n   *\r\n   * @class PlaylistLoader\r\n   * @extends Stream\r\n   * @param {string|Object} src url or object of manifest\r\n   * @param {boolean} withCredentials the withCredentials xhr option\r\n   * @class\r\n   */\r\n\r\n  class PlaylistLoader extends EventTarget$1 {\r\n    constructor(src, vhs, options = {}) {\r\n      super();\r\n      if (!src) {\r\n        throw new Error('A non-empty playlist URL or object is required');\r\n      }\r\n      this.logger_ = logger('PlaylistLoader');\r\n      const {\r\n        withCredentials = false\r\n      } = options;\r\n      this.src = src;\r\n      this.vhs_ = vhs;\r\n      this.withCredentials = withCredentials;\r\n      this.addDateRangesToTextTrack_ = options.addDateRangesToTextTrack;\r\n      const vhsOptions = vhs.options_;\r\n      this.customTagParsers = vhsOptions && vhsOptions.customTagParsers || [];\r\n      this.customTagMappers = vhsOptions && vhsOptions.customTagMappers || [];\r\n      this.llhls = vhsOptions && vhsOptions.llhls;\r\n      this.dateRangesStorage_ = new DateRangesStorage(); // initialize the loader state\r\n\r\n      this.state = 'HAVE_NOTHING'; // live playlist staleness timeout\r\n\r\n      this.handleMediaupdatetimeout_ = this.handleMediaupdatetimeout_.bind(this);\r\n      this.on('mediaupdatetimeout', this.handleMediaupdatetimeout_);\r\n      this.on('loadedplaylist', this.handleLoadedPlaylist_.bind(this));\r\n    }\r\n    handleLoadedPlaylist_() {\r\n      const mediaPlaylist = this.media();\r\n      if (!mediaPlaylist) {\r\n        return;\r\n      }\r\n      this.dateRangesStorage_.setOffset(mediaPlaylist.segments);\r\n      this.dateRangesStorage_.setPendingDateRanges(mediaPlaylist.dateRanges);\r\n      const availableDateRanges = this.dateRangesStorage_.getDateRangesToProcess();\r\n      if (!availableDateRanges.length || !this.addDateRangesToTextTrack_) {\r\n        return;\r\n      }\r\n      this.addDateRangesToTextTrack_(availableDateRanges);\r\n    }\r\n    handleMediaupdatetimeout_() {\r\n      if (this.state !== 'HAVE_METADATA') {\r\n        // only refresh the media playlist if no other activity is going on\r\n        return;\r\n      }\r\n      const media = this.media();\r\n      let uri = resolveUrl(this.main.uri, media.uri);\r\n      if (this.llhls) {\r\n        uri = addLLHLSQueryDirectives(uri, media);\r\n      }\r\n      this.state = 'HAVE_CURRENT_METADATA';\r\n      this.request = this.vhs_.xhr({\r\n        uri,\r\n        withCredentials: this.withCredentials,\r\n        requestType: 'hls-playlist'\r\n      }, (error, req) => {\r\n        // disposed\r\n        if (!this.request) {\r\n          return;\r\n        }\r\n        if (error) {\r\n          return this.playlistRequestError(this.request, this.media(), 'HAVE_METADATA');\r\n        }\r\n        this.haveMetadata({\r\n          playlistString: this.request.responseText,\r\n          url: this.media().uri,\r\n          id: this.media().id\r\n        });\r\n      });\r\n    }\r\n    playlistRequestError(xhr, playlist, startingState) {\r\n      const {\r\n        uri,\r\n        id\r\n      } = playlist; // any in-flight request is now finished\r\n\r\n      this.request = null;\r\n      if (startingState) {\r\n        this.state = startingState;\r\n      }\r\n      this.error = {\r\n        playlist: this.main.playlists[id],\r\n        status: xhr.status,\r\n        message: `HLS playlist request error at URL: ${uri}.`,\r\n        responseText: xhr.responseText,\r\n        code: xhr.status >= 500 ? 4 : 2,\r\n        metadata: getStreamingNetworkErrorMetadata({\r\n          requestType: xhr.requestType,\r\n          request: xhr,\r\n          error: xhr.error\r\n        })\r\n      };\r\n      this.trigger('error');\r\n    }\r\n    parseManifest_({\r\n      url,\r\n      manifestString\r\n    }) {\r\n      try {\r\n        return parseManifest({\r\n          onwarn: ({\r\n            message\r\n          }) => this.logger_(`m3u8-parser warn for ${url}: ${message}`),\r\n          oninfo: ({\r\n            message\r\n          }) => this.logger_(`m3u8-parser info for ${url}: ${message}`),\r\n          manifestString,\r\n          customTagParsers: this.customTagParsers,\r\n          customTagMappers: this.customTagMappers,\r\n          llhls: this.llhls\r\n        });\r\n      } catch (error) {\r\n        this.error = error;\r\n        this.error.metadata = {\r\n          errorType: videojs.Error.StreamingHlsPlaylistParserError,\r\n          error\r\n        };\r\n      }\r\n    }\r\n    /**\r\n     * Update the playlist loader's state in response to a new or updated playlist.\r\n     *\r\n     * @param {string} [playlistString]\r\n     *        Playlist string (if playlistObject is not provided)\r\n     * @param {Object} [playlistObject]\r\n     *        Playlist object (if playlistString is not provided)\r\n     * @param {string} url\r\n     *        URL of playlist\r\n     * @param {string} id\r\n     *        ID to use for playlist\r\n     */\r\n\r\n    haveMetadata({\r\n      playlistString,\r\n      playlistObject,\r\n      url,\r\n      id\r\n    }) {\r\n      // any in-flight request is now finished\r\n      this.request = null;\r\n      this.state = 'HAVE_METADATA';\r\n      const metadata = {\r\n        playlistInfo: {\r\n          type: 'media',\r\n          uri: url\r\n        }\r\n      };\r\n      this.trigger({\r\n        type: 'playlistparsestart',\r\n        metadata\r\n      });\r\n      const playlist = playlistObject || this.parseManifest_({\r\n        url,\r\n        manifestString: playlistString\r\n      });\r\n      playlist.lastRequest = Date.now();\r\n      setupMediaPlaylist({\r\n        playlist,\r\n        uri: url,\r\n        id\r\n      }); // merge this playlist into the main manifest\r\n\r\n      const update = updateMain$1(this.main, playlist);\r\n      this.targetDuration = playlist.partTargetDuration || playlist.targetDuration;\r\n      this.pendingMedia_ = null;\r\n      if (update) {\r\n        this.main = update;\r\n        this.media_ = this.main.playlists[id];\r\n      } else {\r\n        this.trigger('playlistunchanged');\r\n      }\r\n      this.updateMediaUpdateTimeout_(refreshDelay(this.media(), !!update));\r\n      metadata.parsedPlaylist = playlistMetadataPayload(this.main.playlists, metadata.playlistInfo.type, !this.media_.endList);\r\n      this.trigger({\r\n        type: 'playlistparsecomplete',\r\n        metadata\r\n      });\r\n      this.trigger('loadedplaylist');\r\n    }\r\n    /**\r\n      * Abort any outstanding work and clean up.\r\n      */\r\n\r\n    dispose() {\r\n      this.trigger('dispose');\r\n      this.stopRequest();\r\n      window.clearTimeout(this.mediaUpdateTimeout);\r\n      window.clearTimeout(this.finalRenditionTimeout);\r\n      this.dateRangesStorage_ = new DateRangesStorage();\r\n      this.off();\r\n    }\r\n    stopRequest() {\r\n      if (this.request) {\r\n        const oldRequest = this.request;\r\n        this.request = null;\r\n        oldRequest.onreadystatechange = null;\r\n        oldRequest.abort();\r\n      }\r\n    }\r\n    /**\r\n      * When called without any arguments, returns the currently\r\n      * active media playlist. When called with a single argument,\r\n      * triggers the playlist loader to asynchronously switch to the\r\n      * specified media playlist. Calling this method while the\r\n      * loader is in the HAVE_NOTHING causes an error to be emitted\r\n      * but otherwise has no effect.\r\n      *\r\n      * @param {Object=} playlist the parsed media playlist\r\n      * object to switch to\r\n      * @param {boolean=} shouldDelay whether we should delay the request by half target duration\r\n      *\r\n      * @return {Playlist} the current loaded media\r\n      */\r\n\r\n    media(playlist, shouldDelay) {\r\n      // getter\r\n      if (!playlist) {\r\n        return this.media_;\r\n      } // setter\r\n\r\n      if (this.state === 'HAVE_NOTHING') {\r\n        throw new Error('Cannot switch media playlist from ' + this.state);\r\n      } // find the playlist object if the target playlist has been\r\n      // specified by URI\r\n\r\n      if (typeof playlist === 'string') {\r\n        if (!this.main.playlists[playlist]) {\r\n          throw new Error('Unknown playlist URI: ' + playlist);\r\n        }\r\n        playlist = this.main.playlists[playlist];\r\n      }\r\n      window.clearTimeout(this.finalRenditionTimeout);\r\n      if (shouldDelay) {\r\n        const delay = (playlist.partTargetDuration || playlist.targetDuration) / 2 * 1000 || 5 * 1000;\r\n        this.finalRenditionTimeout = window.setTimeout(this.media.bind(this, playlist, false), delay);\r\n        return;\r\n      }\r\n      const startingState = this.state;\r\n      const mediaChange = !this.media_ || playlist.id !== this.media_.id;\r\n      const mainPlaylistRef = this.main.playlists[playlist.id]; // switch to fully loaded playlists immediately\r\n\r\n      if (mainPlaylistRef && mainPlaylistRef.endList ||\r\n      // handle the case of a playlist object (e.g., if using vhs-json with a resolved\r\n      // media playlist or, for the case of demuxed audio, a resolved audio media group)\r\n      playlist.endList && playlist.segments.length) {\r\n        // abort outstanding playlist requests\r\n        if (this.request) {\r\n          this.request.onreadystatechange = null;\r\n          this.request.abort();\r\n          this.request = null;\r\n        }\r\n        this.state = 'HAVE_METADATA';\r\n        this.media_ = playlist; // trigger media change if the active media has been updated\r\n\r\n        if (mediaChange) {\r\n          this.trigger('mediachanging');\r\n          if (startingState === 'HAVE_MAIN_MANIFEST') {\r\n            // The initial playlist was a main manifest, and the first media selected was\r\n            // also provided (in the form of a resolved playlist object) as part of the\r\n            // source object (rather than just a URL). Therefore, since the media playlist\r\n            // doesn't need to be requested, loadedmetadata won't trigger as part of the\r\n            // normal flow, and needs an explicit trigger here.\r\n            this.trigger('loadedmetadata');\r\n          } else {\r\n            this.trigger('mediachange');\r\n          }\r\n        }\r\n        return;\r\n      } // We update/set the timeout here so that live playlists\r\n      // that are not a media change will \"start\" the loader as expected.\r\n      // We expect that this function will start the media update timeout\r\n      // cycle again. This also prevents a playlist switch failure from\r\n      // causing us to stall during live.\r\n\r\n      this.updateMediaUpdateTimeout_(refreshDelay(playlist, true)); // switching to the active playlist is a no-op\r\n\r\n      if (!mediaChange) {\r\n        return;\r\n      }\r\n      this.state = 'SWITCHING_MEDIA'; // there is already an outstanding playlist request\r\n\r\n      if (this.request) {\r\n        if (playlist.resolvedUri === this.request.url) {\r\n          // requesting to switch to the same playlist multiple times\r\n          // has no effect after the first\r\n          return;\r\n        }\r\n        this.request.onreadystatechange = null;\r\n        this.request.abort();\r\n        this.request = null;\r\n      } // request the new playlist\r\n\r\n      if (this.media_) {\r\n        this.trigger('mediachanging');\r\n      }\r\n      this.pendingMedia_ = playlist;\r\n      const metadata = {\r\n        playlistInfo: {\r\n          type: 'media',\r\n          uri: playlist.uri\r\n        }\r\n      };\r\n      this.trigger({\r\n        type: 'playlistrequeststart',\r\n        metadata\r\n      });\r\n      this.request = this.vhs_.xhr({\r\n        uri: playlist.resolvedUri,\r\n        withCredentials: this.withCredentials,\r\n        requestType: 'hls-playlist'\r\n      }, (error, req) => {\r\n        // disposed\r\n        if (!this.request) {\r\n          return;\r\n        }\r\n        playlist.lastRequest = Date.now();\r\n        playlist.resolvedUri = resolveManifestRedirect(playlist.resolvedUri, req);\r\n        if (error) {\r\n          return this.playlistRequestError(this.request, playlist, startingState);\r\n        }\r\n        this.trigger({\r\n          type: 'playlistrequestcomplete',\r\n          metadata\r\n        });\r\n        this.haveMetadata({\r\n          playlistString: req.responseText,\r\n          url: playlist.uri,\r\n          id: playlist.id\r\n        }); // fire loadedmetadata the first time a media playlist is loaded\r\n\r\n        if (startingState === 'HAVE_MAIN_MANIFEST') {\r\n          this.trigger('loadedmetadata');\r\n        } else {\r\n          this.trigger('mediachange');\r\n        }\r\n      });\r\n    }\r\n    /**\r\n     * pause loading of the playlist\r\n     */\r\n\r\n    pause() {\r\n      if (this.mediaUpdateTimeout) {\r\n        window.clearTimeout(this.mediaUpdateTimeout);\r\n        this.mediaUpdateTimeout = null;\r\n      }\r\n      this.stopRequest();\r\n      if (this.state === 'HAVE_NOTHING') {\r\n        // If we pause the loader before any data has been retrieved, its as if we never\r\n        // started, so reset to an unstarted state.\r\n        this.started = false;\r\n      } // Need to restore state now that no activity is happening\r\n\r\n      if (this.state === 'SWITCHING_MEDIA') {\r\n        // if the loader was in the process of switching media, it should either return to\r\n        // HAVE_MAIN_MANIFEST or HAVE_METADATA depending on if the loader has loaded a media\r\n        // playlist yet. This is determined by the existence of loader.media_\r\n        if (this.media_) {\r\n          this.state = 'HAVE_METADATA';\r\n        } else {\r\n          this.state = 'HAVE_MAIN_MANIFEST';\r\n        }\r\n      } else if (this.state === 'HAVE_CURRENT_METADATA') {\r\n        this.state = 'HAVE_METADATA';\r\n      }\r\n    }\r\n    /**\r\n     * start loading of the playlist\r\n     */\r\n\r\n    load(shouldDelay) {\r\n      if (this.mediaUpdateTimeout) {\r\n        window.clearTimeout(this.mediaUpdateTimeout);\r\n        this.mediaUpdateTimeout = null;\r\n      }\r\n      const media = this.media();\r\n      if (shouldDelay) {\r\n        const delay = media ? (media.partTargetDuration || media.targetDuration) / 2 * 1000 : 5 * 1000;\r\n        this.mediaUpdateTimeout = window.setTimeout(() => {\r\n          this.mediaUpdateTimeout = null;\r\n          this.load();\r\n        }, delay);\r\n        return;\r\n      }\r\n      if (!this.started) {\r\n        this.start();\r\n        return;\r\n      }\r\n      if (media && !media.endList) {\r\n        this.trigger('mediaupdatetimeout');\r\n      } else {\r\n        this.trigger('loadedplaylist');\r\n      }\r\n    }\r\n    updateMediaUpdateTimeout_(delay) {\r\n      if (this.mediaUpdateTimeout) {\r\n        window.clearTimeout(this.mediaUpdateTimeout);\r\n        this.mediaUpdateTimeout = null;\r\n      } // we only have use mediaupdatetimeout for live playlists.\r\n\r\n      if (!this.media() || this.media().endList) {\r\n        return;\r\n      }\r\n      this.mediaUpdateTimeout = window.setTimeout(() => {\r\n        this.mediaUpdateTimeout = null;\r\n        this.trigger('mediaupdatetimeout');\r\n        this.updateMediaUpdateTimeout_(delay);\r\n      }, delay);\r\n    }\r\n    /**\r\n     * start loading of the playlist\r\n     */\r\n\r\n    start() {\r\n      this.started = true;\r\n      if (typeof this.src === 'object') {\r\n        // in the case of an entirely constructed manifest object (meaning there's no actual\r\n        // manifest on a server), default the uri to the page's href\r\n        if (!this.src.uri) {\r\n          this.src.uri = window.location.href;\r\n        } // resolvedUri is added on internally after the initial request. Since there's no\r\n        // request for pre-resolved manifests, add on resolvedUri here.\r\n\r\n        this.src.resolvedUri = this.src.uri; // Since a manifest object was passed in as the source (instead of a URL), the first\r\n        // request can be skipped (since the top level of the manifest, at a minimum, is\r\n        // already available as a parsed manifest object). However, if the manifest object\r\n        // represents a main playlist, some media playlists may need to be resolved before\r\n        // the starting segment list is available. Therefore, go directly to setup of the\r\n        // initial playlist, and let the normal flow continue from there.\r\n        //\r\n        // Note that the call to setup is asynchronous, as other sections of VHS may assume\r\n        // that the first request is asynchronous.\r\n\r\n        setTimeout(() => {\r\n          this.setupInitialPlaylist(this.src);\r\n        }, 0);\r\n        return;\r\n      }\r\n      const metadata = {\r\n        playlistInfo: {\r\n          type: 'multivariant',\r\n          uri: this.src\r\n        }\r\n      };\r\n      this.trigger({\r\n        type: 'playlistrequeststart',\r\n        metadata\r\n      }); // request the specified URL\r\n\r\n      this.request = this.vhs_.xhr({\r\n        uri: this.src,\r\n        withCredentials: this.withCredentials,\r\n        requestType: 'hls-playlist'\r\n      }, (error, req) => {\r\n        // disposed\r\n        if (!this.request) {\r\n          return;\r\n        } // clear the loader's request reference\r\n\r\n        this.request = null;\r\n        if (error) {\r\n          this.error = {\r\n            status: req.status,\r\n            message: `HLS playlist request error at URL: ${this.src}.`,\r\n            responseText: req.responseText,\r\n            // MEDIA_ERR_NETWORK\r\n            code: 2,\r\n            metadata: getStreamingNetworkErrorMetadata({\r\n              requestType: req.requestType,\r\n              request: req,\r\n              error\r\n            })\r\n          };\r\n          if (this.state === 'HAVE_NOTHING') {\r\n            this.started = false;\r\n          }\r\n          return this.trigger('error');\r\n        }\r\n        this.trigger({\r\n          type: 'playlistrequestcomplete',\r\n          metadata\r\n        });\r\n        this.src = resolveManifestRedirect(this.src, req);\r\n        this.trigger({\r\n          type: 'playlistparsestart',\r\n          metadata\r\n        });\r\n        const manifest = this.parseManifest_({\r\n          manifestString: req.responseText,\r\n          url: this.src\r\n        }); // we haven't loaded any variant playlists here so we default to false for isLive.\r\n\r\n        metadata.parsedPlaylist = playlistMetadataPayload(manifest.playlists, metadata.playlistInfo.type, false);\r\n        this.trigger({\r\n          type: 'playlistparsecomplete',\r\n          metadata\r\n        });\r\n        this.setupInitialPlaylist(manifest);\r\n      });\r\n    }\r\n    srcUri() {\r\n      return typeof this.src === 'string' ? this.src : this.src.uri;\r\n    }\r\n    /**\r\n     * Given a manifest object that's either a main or media playlist, trigger the proper\r\n     * events and set the state of the playlist loader.\r\n     *\r\n     * If the manifest object represents a main playlist, `loadedplaylist` will be\r\n     * triggered to allow listeners to select a playlist. If none is selected, the loader\r\n     * will default to the first one in the playlists array.\r\n     *\r\n     * If the manifest object represents a media playlist, `loadedplaylist` will be\r\n     * triggered followed by `loadedmetadata`, as the only available playlist is loaded.\r\n     *\r\n     * In the case of a media playlist, a main playlist object wrapper with one playlist\r\n     * will be created so that all logic can handle playlists in the same fashion (as an\r\n     * assumed manifest object schema).\r\n     *\r\n     * @param {Object} manifest\r\n     *        The parsed manifest object\r\n     */\r\n\r\n    setupInitialPlaylist(manifest) {\r\n      this.state = 'HAVE_MAIN_MANIFEST';\r\n      if (manifest.playlists) {\r\n        this.main = manifest;\r\n        addPropertiesToMain(this.main, this.srcUri()); // If the initial main playlist has playlists wtih segments already resolved,\r\n        // then resolve URIs in advance, as they are usually done after a playlist request,\r\n        // which may not happen if the playlist is resolved.\r\n\r\n        manifest.playlists.forEach(playlist => {\r\n          playlist.segments = getAllSegments(playlist);\r\n          playlist.segments.forEach(segment => {\r\n            resolveSegmentUris(segment, playlist.resolvedUri);\r\n          });\r\n        });\r\n        this.trigger('loadedplaylist');\r\n        if (!this.request) {\r\n          // no media playlist was specifically selected so start\r\n          // from the first listed one\r\n          this.media(this.main.playlists[0]);\r\n        }\r\n        return;\r\n      } // In order to support media playlists passed in as vhs-json, the case where the uri\r\n      // is not provided as part of the manifest should be considered, and an appropriate\r\n      // default used.\r\n\r\n      const uri = this.srcUri() || window.location.href;\r\n      this.main = mainForMedia(manifest, uri);\r\n      this.haveMetadata({\r\n        playlistObject: manifest,\r\n        url: uri,\r\n        id: this.main.playlists[0].id\r\n      });\r\n      this.trigger('loadedmetadata');\r\n    }\r\n    /**\r\n     * Updates or deletes a preexisting pathway clone.\r\n     * Ensures that all playlists related to the old pathway clone are\r\n     * either updated or deleted.\r\n     *\r\n     * @param {Object} clone On update, the pathway clone object for the newly updated pathway clone.\r\n     *        On delete, the old pathway clone object to be deleted.\r\n     * @param {boolean} isUpdate True if the pathway is to be updated,\r\n     *        false if it is meant to be deleted.\r\n     */\r\n\r\n    updateOrDeleteClone(clone, isUpdate) {\r\n      const main = this.main;\r\n      const pathway = clone.ID;\r\n      let i = main.playlists.length; // Iterate backwards through the playlist so we can remove playlists if necessary.\r\n\r\n      while (i--) {\r\n        const p = main.playlists[i];\r\n        if (p.attributes['PATHWAY-ID'] === pathway) {\r\n          const oldPlaylistUri = p.resolvedUri;\r\n          const oldPlaylistId = p.id; // update the indexed playlist and add new playlists by ID and URI\r\n\r\n          if (isUpdate) {\r\n            const newPlaylistUri = this.createCloneURI_(p.resolvedUri, clone);\r\n            const newPlaylistId = createPlaylistID(pathway, newPlaylistUri);\r\n            const attributes = this.createCloneAttributes_(pathway, p.attributes);\r\n            const updatedPlaylist = this.createClonePlaylist_(p, newPlaylistId, clone, attributes);\r\n            main.playlists[i] = updatedPlaylist;\r\n            main.playlists[newPlaylistId] = updatedPlaylist;\r\n            main.playlists[newPlaylistUri] = updatedPlaylist;\r\n          } else {\r\n            // Remove the indexed playlist.\r\n            main.playlists.splice(i, 1);\r\n          } // Remove playlists by the old ID and URI.\r\n\r\n          delete main.playlists[oldPlaylistId];\r\n          delete main.playlists[oldPlaylistUri];\r\n        }\r\n      }\r\n      this.updateOrDeleteCloneMedia(clone, isUpdate);\r\n    }\r\n    /**\r\n     * Updates or deletes media data based on the pathway clone object.\r\n     * Due to the complexity of the media groups and playlists, in all cases\r\n     * we remove all of the old media groups and playlists.\r\n     * On updates, we then create new media groups and playlists based on the\r\n     * new pathway clone object.\r\n     *\r\n     * @param {Object} clone The pathway clone object for the newly updated pathway clone.\r\n     * @param {boolean} isUpdate True if the pathway is to be updated,\r\n     *        false if it is meant to be deleted.\r\n     */\r\n\r\n    updateOrDeleteCloneMedia(clone, isUpdate) {\r\n      const main = this.main;\r\n      const id = clone.ID;\r\n      ['AUDIO', 'SUBTITLES', 'CLOSED-CAPTIONS'].forEach(mediaType => {\r\n        if (!main.mediaGroups[mediaType] || !main.mediaGroups[mediaType][id]) {\r\n          return;\r\n        }\r\n        for (const groupKey in main.mediaGroups[mediaType]) {\r\n          // Remove all media playlists for the media group for this pathway clone.\r\n          if (groupKey === id) {\r\n            for (const labelKey in main.mediaGroups[mediaType][groupKey]) {\r\n              const oldMedia = main.mediaGroups[mediaType][groupKey][labelKey];\r\n              oldMedia.playlists.forEach((p, i) => {\r\n                const oldMediaPlaylist = main.playlists[p.id];\r\n                const oldPlaylistId = oldMediaPlaylist.id;\r\n                const oldPlaylistUri = oldMediaPlaylist.resolvedUri;\r\n                delete main.playlists[oldPlaylistId];\r\n                delete main.playlists[oldPlaylistUri];\r\n              });\r\n            } // Delete the old media group.\r\n\r\n            delete main.mediaGroups[mediaType][groupKey];\r\n          }\r\n        }\r\n      }); // Create the new media groups and playlists if there is an update.\r\n\r\n      if (isUpdate) {\r\n        this.createClonedMediaGroups_(clone);\r\n      }\r\n    }\r\n    /**\r\n     * Given a pathway clone object, clones all necessary playlists.\r\n     *\r\n     * @param {Object} clone The pathway clone object.\r\n     * @param {Object} basePlaylist The original playlist to clone from.\r\n     */\r\n\r\n    addClonePathway(clone, basePlaylist = {}) {\r\n      const main = this.main;\r\n      const index = main.playlists.length;\r\n      const uri = this.createCloneURI_(basePlaylist.resolvedUri, clone);\r\n      const playlistId = createPlaylistID(clone.ID, uri);\r\n      const attributes = this.createCloneAttributes_(clone.ID, basePlaylist.attributes);\r\n      const playlist = this.createClonePlaylist_(basePlaylist, playlistId, clone, attributes);\r\n      main.playlists[index] = playlist; // add playlist by ID and URI\r\n\r\n      main.playlists[playlistId] = playlist;\r\n      main.playlists[uri] = playlist;\r\n      this.createClonedMediaGroups_(clone);\r\n    }\r\n    /**\r\n     * Given a pathway clone object we create clones of all media.\r\n     * In this function, all necessary information and updated playlists\r\n     * are added to the `mediaGroup` object.\r\n     * Playlists are also added to the `playlists` array so the media groups\r\n     * will be properly linked.\r\n     *\r\n     * @param {Object} clone The pathway clone object.\r\n     */\r\n\r\n    createClonedMediaGroups_(clone) {\r\n      const id = clone.ID;\r\n      const baseID = clone['BASE-ID'];\r\n      const main = this.main;\r\n      ['AUDIO', 'SUBTITLES', 'CLOSED-CAPTIONS'].forEach(mediaType => {\r\n        // If the media type doesn't exist, or there is already a clone, skip\r\n        // to the next media type.\r\n        if (!main.mediaGroups[mediaType] || main.mediaGroups[mediaType][id]) {\r\n          return;\r\n        }\r\n        for (const groupKey in main.mediaGroups[mediaType]) {\r\n          if (groupKey === baseID) {\r\n            // Create the group.\r\n            main.mediaGroups[mediaType][id] = {};\r\n          } else {\r\n            // There is no need to iterate over label keys in this case.\r\n            continue;\r\n          }\r\n          for (const labelKey in main.mediaGroups[mediaType][groupKey]) {\r\n            const oldMedia = main.mediaGroups[mediaType][groupKey][labelKey];\r\n            main.mediaGroups[mediaType][id][labelKey] = _extends$1({}, oldMedia);\r\n            const newMedia = main.mediaGroups[mediaType][id][labelKey]; // update URIs on the media\r\n\r\n            const newUri = this.createCloneURI_(oldMedia.resolvedUri, clone);\r\n            newMedia.resolvedUri = newUri;\r\n            newMedia.uri = newUri; // Reset playlists in the new media group.\r\n\r\n            newMedia.playlists = []; // Create new playlists in the newly cloned media group.\r\n\r\n            oldMedia.playlists.forEach((p, i) => {\r\n              const oldMediaPlaylist = main.playlists[p.id];\r\n              const group = groupID(mediaType, id, labelKey);\r\n              const newPlaylistID = createPlaylistID(id, group); // Check to see if it already exists\r\n\r\n              if (oldMediaPlaylist && !main.playlists[newPlaylistID]) {\r\n                const newMediaPlaylist = this.createClonePlaylist_(oldMediaPlaylist, newPlaylistID, clone);\r\n                const newPlaylistUri = newMediaPlaylist.resolvedUri;\r\n                main.playlists[newPlaylistID] = newMediaPlaylist;\r\n                main.playlists[newPlaylistUri] = newMediaPlaylist;\r\n              }\r\n              newMedia.playlists[i] = this.createClonePlaylist_(p, newPlaylistID, clone);\r\n            });\r\n          }\r\n        }\r\n      });\r\n    }\r\n    /**\r\n     * Using the original playlist to be cloned, and the pathway clone object\r\n     * information, we create a new playlist.\r\n     *\r\n     * @param {Object} basePlaylist  The original playlist to be cloned from.\r\n     * @param {string} id The desired id of the newly cloned playlist.\r\n     * @param {Object} clone The pathway clone object.\r\n     * @param {Object} attributes An optional object to populate the `attributes` property in the playlist.\r\n     *\r\n     * @return {Object} The combined cloned playlist.\r\n     */\r\n\r\n    createClonePlaylist_(basePlaylist, id, clone, attributes) {\r\n      const uri = this.createCloneURI_(basePlaylist.resolvedUri, clone);\r\n      const newProps = {\r\n        resolvedUri: uri,\r\n        uri,\r\n        id\r\n      }; // Remove all segments from previous playlist in the clone.\r\n\r\n      if (basePlaylist.segments) {\r\n        newProps.segments = [];\r\n      }\r\n      if (attributes) {\r\n        newProps.attributes = attributes;\r\n      }\r\n      return merge(basePlaylist, newProps);\r\n    }\r\n    /**\r\n     * Generates an updated URI for a cloned pathway based on the original\r\n     * pathway's URI and the paramaters from the pathway clone object in the\r\n     * content steering server response.\r\n     *\r\n     * @param {string} baseUri URI to be updated in the cloned pathway.\r\n     * @param {Object} clone The pathway clone object.\r\n     *\r\n     * @return {string} The updated URI for the cloned pathway.\r\n     */\r\n\r\n    createCloneURI_(baseURI, clone) {\r\n      const uri = new URL(baseURI);\r\n      uri.hostname = clone['URI-REPLACEMENT'].HOST;\r\n      const params = clone['URI-REPLACEMENT'].PARAMS; // Add params to the cloned URL.\r\n\r\n      for (const key of Object.keys(params)) {\r\n        uri.searchParams.set(key, params[key]);\r\n      }\r\n      return uri.href;\r\n    }\r\n    /**\r\n     * Helper function to create the attributes needed for the new clone.\r\n     * This mainly adds the necessary media attributes.\r\n     *\r\n     * @param {string} id The pathway clone object ID.\r\n     * @param {Object} oldAttributes The old attributes to compare to.\r\n     * @return {Object} The new attributes to add to the playlist.\r\n     */\r\n\r\n    createCloneAttributes_(id, oldAttributes) {\r\n      const attributes = {\r\n        ['PATHWAY-ID']: id\r\n      };\r\n      ['AUDIO', 'SUBTITLES', 'CLOSED-CAPTIONS'].forEach(mediaType => {\r\n        if (oldAttributes[mediaType]) {\r\n          attributes[mediaType] = id;\r\n        }\r\n      });\r\n      return attributes;\r\n    }\r\n    /**\r\n     * Returns the key ID set from a playlist\r\n     *\r\n     * @param {playlist} playlist to fetch the key ID set from.\r\n     * @return a Set of 32 digit hex strings that represent the unique keyIds for that playlist.\r\n     */\r\n\r\n    getKeyIdSet(playlist) {\r\n      if (playlist.contentProtection) {\r\n        const keyIds = new Set();\r\n        for (const keysystem in playlist.contentProtection) {\r\n          const keyId = playlist.contentProtection[keysystem].attributes.keyId;\r\n          if (keyId) {\r\n            keyIds.add(keyId.toLowerCase());\r\n          }\r\n        }\r\n        return keyIds;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @file xhr.js\r\n   */\r\n\r\n  const callbackWrapper = function (request, error, response, callback) {\r\n    const reqResponse = request.responseType === 'arraybuffer' ? request.response : request.responseText;\r\n    if (!error && reqResponse) {\r\n      request.responseTime = Date.now();\r\n      request.roundTripTime = request.responseTime - request.requestTime;\r\n      request.bytesReceived = reqResponse.byteLength || reqResponse.length;\r\n      if (!request.bandwidth) {\r\n        request.bandwidth = Math.floor(request.bytesReceived / request.roundTripTime * 8 * 1000);\r\n      }\r\n    }\r\n    if (response.headers) {\r\n      request.responseHeaders = response.headers;\r\n    } // videojs.xhr now uses a specific code on the error\r\n    // object to signal that a request has timed out instead\r\n    // of setting a boolean on the request object\r\n\r\n    if (error && error.code === 'ETIMEDOUT') {\r\n      request.timedout = true;\r\n    } // videojs.xhr no longer considers status codes outside of 200 and 0\r\n    // (for file uris) to be errors, but the old XHR did, so emulate that\r\n    // behavior. Status 206 may be used in response to byterange requests.\r\n\r\n    if (!error && !request.aborted && response.statusCode !== 200 && response.statusCode !== 206 && response.statusCode !== 0) {\r\n      error = new Error('XHR Failed with a response of: ' + (request && (reqResponse || request.responseText)));\r\n    }\r\n    callback(error, request);\r\n  };\r\n  /**\r\n   * Iterates over the request hooks Set and calls them in order\r\n   *\r\n   * @param {Set} hooks the hook Set to iterate over\r\n   * @param {Object} options the request options to pass to the xhr wrapper\r\n   * @return the callback hook function return value, the modified or new options Object.\r\n   */\r\n\r\n  const callAllRequestHooks = (requestSet, options) => {\r\n    if (!requestSet || !requestSet.size) {\r\n      return;\r\n    }\r\n    let newOptions = options;\r\n    requestSet.forEach(requestCallback => {\r\n      newOptions = requestCallback(newOptions);\r\n    });\r\n    return newOptions;\r\n  };\r\n  /**\r\n   * Iterates over the response hooks Set and calls them in order.\r\n   *\r\n   * @param {Set} hooks the hook Set to iterate over\r\n   * @param {Object} request the xhr request object\r\n   * @param {Object} error the xhr error object\r\n   * @param {Object} response the xhr response object\r\n   */\r\n\r\n  const callAllResponseHooks = (responseSet, request, error, response) => {\r\n    if (!responseSet || !responseSet.size) {\r\n      return;\r\n    }\r\n    responseSet.forEach(responseCallback => {\r\n      responseCallback(request, error, response);\r\n    });\r\n  };\r\n  const xhrFactory = function () {\r\n    const xhr = function XhrFunction(options, callback) {\r\n      // Add a default timeout\r\n      options = merge({\r\n        timeout: 45e3\r\n      }, options); // Allow an optional user-specified function to modify the option\r\n      // object before we construct the xhr request\r\n      // TODO: Remove beforeRequest in the next major release.\r\n\r\n      const beforeRequest = XhrFunction.beforeRequest || videojs.Vhs.xhr.beforeRequest; // onRequest and onResponse hooks as a Set, at either the player or global level.\r\n      // TODO: new Set added here for beforeRequest alias. Remove this when beforeRequest is removed.\r\n\r\n      const _requestCallbackSet = XhrFunction._requestCallbackSet || videojs.Vhs.xhr._requestCallbackSet || new Set();\r\n      const _responseCallbackSet = XhrFunction._responseCallbackSet || videojs.Vhs.xhr._responseCallbackSet;\r\n      if (beforeRequest && typeof beforeRequest === 'function') {\r\n        videojs.log.warn('beforeRequest is deprecated, use onRequest instead.');\r\n        _requestCallbackSet.add(beforeRequest);\r\n      } // Use the standard videojs.xhr() method unless `videojs.Vhs.xhr` has been overriden\r\n      // TODO: switch back to videojs.Vhs.xhr.name === 'XhrFunction' when we drop IE11\r\n\r\n      const xhrMethod = videojs.Vhs.xhr.original === true ? videojs.xhr : videojs.Vhs.xhr; // call all registered onRequest hooks, assign new options.\r\n\r\n      const beforeRequestOptions = callAllRequestHooks(_requestCallbackSet, options); // Remove the beforeRequest function from the hooks set so stale beforeRequest functions are not called.\r\n\r\n      _requestCallbackSet.delete(beforeRequest); // xhrMethod will call XMLHttpRequest.open and XMLHttpRequest.send\r\n\r\n      const request = xhrMethod(beforeRequestOptions || options, function (error, response) {\r\n        // call all registered onResponse hooks\r\n        callAllResponseHooks(_responseCallbackSet, request, error, response);\r\n        return callbackWrapper(request, error, response, callback);\r\n      });\r\n      const originalAbort = request.abort;\r\n      request.abort = function () {\r\n        request.aborted = true;\r\n        return originalAbort.apply(request, arguments);\r\n      };\r\n      request.uri = options.uri;\r\n      request.requestType = options.requestType;\r\n      request.requestTime = Date.now();\r\n      return request;\r\n    };\r\n    xhr.original = true;\r\n    return xhr;\r\n  };\r\n  /**\r\n   * Turns segment byterange into a string suitable for use in\r\n   * HTTP Range requests\r\n   *\r\n   * @param {Object} byterange - an object with two values defining the start and end\r\n   *                             of a byte-range\r\n   */\r\n\r\n  const byterangeStr = function (byterange) {\r\n    // `byterangeEnd` is one less than `offset + length` because the HTTP range\r\n    // header uses inclusive ranges\r\n    let byterangeEnd;\r\n    const byterangeStart = byterange.offset;\r\n    if (typeof byterange.offset === 'bigint' || typeof byterange.length === 'bigint') {\r\n      byterangeEnd = window.BigInt(byterange.offset) + window.BigInt(byterange.length) - window.BigInt(1);\r\n    } else {\r\n      byterangeEnd = byterange.offset + byterange.length - 1;\r\n    }\r\n    return 'bytes=' + byterangeStart + '-' + byterangeEnd;\r\n  };\r\n  /**\r\n   * Defines headers for use in the xhr request for a particular segment.\r\n   *\r\n   * @param {Object} segment - a simplified copy of the segmentInfo object\r\n   *                           from SegmentLoader\r\n   */\r\n\r\n  const segmentXhrHeaders = function (segment) {\r\n    const headers = {};\r\n    if (segment.byterange) {\r\n      headers.Range = byterangeStr(segment.byterange);\r\n    }\r\n    return headers;\r\n  };\r\n\r\n  /**\r\n   * @file bin-utils.js\r\n   */\r\n\r\n  /**\r\n   * convert a TimeRange to text\r\n   *\r\n   * @param {TimeRange} range the timerange to use for conversion\r\n   * @param {number} i the iterator on the range to convert\r\n   * @return {string} the range in string format\r\n   */\r\n\r\n  const textRange = function (range, i) {\r\n    return range.start(i) + '-' + range.end(i);\r\n  };\r\n  /**\r\n   * format a number as hex string\r\n   *\r\n   * @param {number} e The number\r\n   * @param {number} i the iterator\r\n   * @return {string} the hex formatted number as a string\r\n   */\r\n\r\n  const formatHexString = function (e, i) {\r\n    const value = e.toString(16);\r\n    return '00'.substring(0, 2 - value.length) + value + (i % 2 ? ' ' : '');\r\n  };\r\n  const formatAsciiString = function (e) {\r\n    if (e >= 0x20 && e < 0x7e) {\r\n      return String.fromCharCode(e);\r\n    }\r\n    return '.';\r\n  };\r\n  /**\r\n   * Creates an object for sending to a web worker modifying properties that are TypedArrays\r\n   * into a new object with seperated properties for the buffer, byteOffset, and byteLength.\r\n   *\r\n   * @param {Object} message\r\n   *        Object of properties and values to send to the web worker\r\n   * @return {Object}\r\n   *         Modified message with TypedArray values expanded\r\n   * @function createTransferableMessage\r\n   */\r\n\r\n  const createTransferableMessage = function (message) {\r\n    const transferable = {};\r\n    Object.keys(message).forEach(key => {\r\n      const value = message[key];\r\n      if (isArrayBufferView(value)) {\r\n        transferable[key] = {\r\n          bytes: value.buffer,\r\n          byteOffset: value.byteOffset,\r\n          byteLength: value.byteLength\r\n        };\r\n      } else {\r\n        transferable[key] = value;\r\n      }\r\n    });\r\n    return transferable;\r\n  };\r\n  /**\r\n   * Returns a unique string identifier for a media initialization\r\n   * segment.\r\n   *\r\n   * @param {Object} initSegment\r\n   *        the init segment object.\r\n   *\r\n   * @return {string} the generated init segment id\r\n   */\r\n\r\n  const initSegmentId = function (initSegment) {\r\n    const byterange = initSegment.byterange || {\r\n      length: Infinity,\r\n      offset: 0\r\n    };\r\n    return [byterange.length, byterange.offset, initSegment.resolvedUri].join(',');\r\n  };\r\n  /**\r\n   * Returns a unique string identifier for a media segment key.\r\n   *\r\n   * @param {Object} key the encryption key\r\n   * @return {string} the unique id for the media segment key.\r\n   */\r\n\r\n  const segmentKeyId = function (key) {\r\n    return key.resolvedUri;\r\n  };\r\n  /**\r\n   * utils to help dump binary data to the console\r\n   *\r\n   * @param {Array|TypedArray} data\r\n   *        data to dump to a string\r\n   *\r\n   * @return {string} the data as a hex string.\r\n   */\r\n\r\n  const hexDump = data => {\r\n    const bytes = Array.prototype.slice.call(data);\r\n    const step = 16;\r\n    let result = '';\r\n    let hex;\r\n    let ascii;\r\n    for (let j = 0; j < bytes.length / step; j++) {\r\n      hex = bytes.slice(j * step, j * step + step).map(formatHexString).join('');\r\n      ascii = bytes.slice(j * step, j * step + step).map(formatAsciiString).join('');\r\n      result += hex + ' ' + ascii + '\\n';\r\n    }\r\n    return result;\r\n  };\r\n  const tagDump = ({\r\n    bytes\r\n  }) => hexDump(bytes);\r\n  const textRanges = ranges => {\r\n    let result = '';\r\n    let i;\r\n    for (i = 0; i < ranges.length; i++) {\r\n      result += textRange(ranges, i) + ' ';\r\n    }\r\n    return result;\r\n  };\r\n  var utils = /*#__PURE__*/Object.freeze({\r\n    __proto__: null,\r\n    createTransferableMessage: createTransferableMessage,\r\n    initSegmentId: initSegmentId,\r\n    segmentKeyId: segmentKeyId,\r\n    hexDump: hexDump,\r\n    tagDump: tagDump,\r\n    textRanges: textRanges\r\n  });\r\n\r\n  // TODO handle fmp4 case where the timing info is accurate and doesn't involve transmux\r\n  // 25% was arbitrarily chosen, and may need to be refined over time.\r\n\r\n  const SEGMENT_END_FUDGE_PERCENT = 0.25;\r\n  /**\r\n   * Converts a player time (any time that can be gotten/set from player.currentTime(),\r\n   * e.g., any time within player.seekable().start(0) to player.seekable().end(0)) to a\r\n   * program time (any time referencing the real world (e.g., EXT-X-PROGRAM-DATE-TIME)).\r\n   *\r\n   * The containing segment is required as the EXT-X-PROGRAM-DATE-TIME serves as an \"anchor\r\n   * point\" (a point where we have a mapping from program time to player time, with player\r\n   * time being the post transmux start of the segment).\r\n   *\r\n   * For more details, see [this doc](../../docs/program-time-from-player-time.md).\r\n   *\r\n   * @param {number} playerTime the player time\r\n   * @param {Object} segment the segment which contains the player time\r\n   * @return {Date} program time\r\n   */\r\n\r\n  const playerTimeToProgramTime = (playerTime, segment) => {\r\n    if (!segment.dateTimeObject) {\r\n      // Can't convert without an \"anchor point\" for the program time (i.e., a time that can\r\n      // be used to map the start of a segment with a real world time).\r\n      return null;\r\n    }\r\n    const transmuxerPrependedSeconds = segment.videoTimingInfo.transmuxerPrependedSeconds;\r\n    const transmuxedStart = segment.videoTimingInfo.transmuxedPresentationStart; // get the start of the content from before old content is prepended\r\n\r\n    const startOfSegment = transmuxedStart + transmuxerPrependedSeconds;\r\n    const offsetFromSegmentStart = playerTime - startOfSegment;\r\n    return new Date(segment.dateTimeObject.getTime() + offsetFromSegmentStart * 1000);\r\n  };\r\n  const originalSegmentVideoDuration = videoTimingInfo => {\r\n    return videoTimingInfo.transmuxedPresentationEnd - videoTimingInfo.transmuxedPresentationStart - videoTimingInfo.transmuxerPrependedSeconds;\r\n  };\r\n  /**\r\n   * Finds a segment that contains the time requested given as an ISO-8601 string. The\r\n   * returned segment might be an estimate or an accurate match.\r\n   *\r\n   * @param {string} programTime The ISO-8601 programTime to find a match for\r\n   * @param {Object} playlist A playlist object to search within\r\n   */\r\n\r\n  const findSegmentForProgramTime = (programTime, playlist) => {\r\n    // Assumptions:\r\n    //  - verifyProgramDateTimeTags has already been run\r\n    //  - live streams have been started\r\n    let dateTimeObject;\r\n    try {\r\n      dateTimeObject = new Date(programTime);\r\n    } catch (e) {\r\n      return null;\r\n    }\r\n    if (!playlist || !playlist.segments || playlist.segments.length === 0) {\r\n      return null;\r\n    }\r\n    let segment = playlist.segments[0];\r\n    if (dateTimeObject < new Date(segment.dateTimeObject)) {\r\n      // Requested time is before stream start.\r\n      return null;\r\n    }\r\n    for (let i = 0; i < playlist.segments.length - 1; i++) {\r\n      segment = playlist.segments[i];\r\n      const nextSegmentStart = new Date(playlist.segments[i + 1].dateTimeObject);\r\n      if (dateTimeObject < nextSegmentStart) {\r\n        break;\r\n      }\r\n    }\r\n    const lastSegment = playlist.segments[playlist.segments.length - 1];\r\n    const lastSegmentStart = lastSegment.dateTimeObject;\r\n    const lastSegmentDuration = lastSegment.videoTimingInfo ? originalSegmentVideoDuration(lastSegment.videoTimingInfo) : lastSegment.duration + lastSegment.duration * SEGMENT_END_FUDGE_PERCENT;\r\n    const lastSegmentEnd = new Date(lastSegmentStart.getTime() + lastSegmentDuration * 1000);\r\n    if (dateTimeObject > lastSegmentEnd) {\r\n      // Beyond the end of the stream, or our best guess of the end of the stream.\r\n      return null;\r\n    }\r\n    if (dateTimeObject > new Date(lastSegmentStart)) {\r\n      segment = lastSegment;\r\n    }\r\n    return {\r\n      segment,\r\n      estimatedStart: segment.videoTimingInfo ? segment.videoTimingInfo.transmuxedPresentationStart : Playlist.duration(playlist, playlist.mediaSequence + playlist.segments.indexOf(segment)),\r\n      // Although, given that all segments have accurate date time objects, the segment\r\n      // selected should be accurate, unless the video has been transmuxed at some point\r\n      // (determined by the presence of the videoTimingInfo object), the segment's \"player\r\n      // time\" (the start time in the player) can't be considered accurate.\r\n      type: segment.videoTimingInfo ? 'accurate' : 'estimate'\r\n    };\r\n  };\r\n  /**\r\n   * Finds a segment that contains the given player time(in seconds).\r\n   *\r\n   * @param {number} time The player time to find a match for\r\n   * @param {Object} playlist A playlist object to search within\r\n   */\r\n\r\n  const findSegmentForPlayerTime = (time, playlist) => {\r\n    // Assumptions:\r\n    // - there will always be a segment.duration\r\n    // - we can start from zero\r\n    // - segments are in time order\r\n    if (!playlist || !playlist.segments || playlist.segments.length === 0) {\r\n      return null;\r\n    }\r\n    let segmentEnd = 0;\r\n    let segment;\r\n    for (let i = 0; i < playlist.segments.length; i++) {\r\n      segment = playlist.segments[i]; // videoTimingInfo is set after the segment is downloaded and transmuxed, and\r\n      // should contain the most accurate values we have for the segment's player times.\r\n      //\r\n      // Use the accurate transmuxedPresentationEnd value if it is available, otherwise fall\r\n      // back to an estimate based on the manifest derived (inaccurate) segment.duration, to\r\n      // calculate an end value.\r\n\r\n      segmentEnd = segment.videoTimingInfo ? segment.videoTimingInfo.transmuxedPresentationEnd : segmentEnd + segment.duration;\r\n      if (time <= segmentEnd) {\r\n        break;\r\n      }\r\n    }\r\n    const lastSegment = playlist.segments[playlist.segments.length - 1];\r\n    if (lastSegment.videoTimingInfo && lastSegment.videoTimingInfo.transmuxedPresentationEnd < time) {\r\n      // The time requested is beyond the stream end.\r\n      return null;\r\n    }\r\n    if (time > segmentEnd) {\r\n      // The time is within or beyond the last segment.\r\n      //\r\n      // Check to see if the time is beyond a reasonable guess of the end of the stream.\r\n      if (time > segmentEnd + lastSegment.duration * SEGMENT_END_FUDGE_PERCENT) {\r\n        // Technically, because the duration value is only an estimate, the time may still\r\n        // exist in the last segment, however, there isn't enough information to make even\r\n        // a reasonable estimate.\r\n        return null;\r\n      }\r\n      segment = lastSegment;\r\n    }\r\n    return {\r\n      segment,\r\n      estimatedStart: segment.videoTimingInfo ? segment.videoTimingInfo.transmuxedPresentationStart : segmentEnd - segment.duration,\r\n      // Because videoTimingInfo is only set after transmux, it is the only way to get\r\n      // accurate timing values.\r\n      type: segment.videoTimingInfo ? 'accurate' : 'estimate'\r\n    };\r\n  };\r\n  /**\r\n   * Gives the offset of the comparisonTimestamp from the programTime timestamp in seconds.\r\n   * If the offset returned is positive, the programTime occurs after the\r\n   * comparisonTimestamp.\r\n   * If the offset is negative, the programTime occurs before the comparisonTimestamp.\r\n   *\r\n   * @param {string} comparisonTimeStamp An ISO-8601 timestamp to compare against\r\n   * @param {string} programTime The programTime as an ISO-8601 string\r\n   * @return {number} offset\r\n   */\r\n\r\n  const getOffsetFromTimestamp = (comparisonTimeStamp, programTime) => {\r\n    let segmentDateTime;\r\n    let programDateTime;\r\n    try {\r\n      segmentDateTime = new Date(comparisonTimeStamp);\r\n      programDateTime = new Date(programTime);\r\n    } catch (e) {// TODO handle error\r\n    }\r\n    const segmentTimeEpoch = segmentDateTime.getTime();\r\n    const programTimeEpoch = programDateTime.getTime();\r\n    return (programTimeEpoch - segmentTimeEpoch) / 1000;\r\n  };\r\n  /**\r\n   * Checks that all segments in this playlist have programDateTime tags.\r\n   *\r\n   * @param {Object} playlist A playlist object\r\n   */\r\n\r\n  const verifyProgramDateTimeTags = playlist => {\r\n    if (!playlist.segments || playlist.segments.length === 0) {\r\n      return false;\r\n    }\r\n    for (let i = 0; i < playlist.segments.length; i++) {\r\n      const segment = playlist.segments[i];\r\n      if (!segment.dateTimeObject) {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  };\r\n  /**\r\n   * Returns the programTime of the media given a playlist and a playerTime.\r\n   * The playlist must have programDateTime tags for a programDateTime tag to be returned.\r\n   * If the segments containing the time requested have not been buffered yet, an estimate\r\n   * may be returned to the callback.\r\n   *\r\n   * @param {Object} args\r\n   * @param {Object} args.playlist A playlist object to search within\r\n   * @param {number} time A playerTime in seconds\r\n   * @param {Function} callback(err, programTime)\r\n   * @return {string} err.message A detailed error message\r\n   * @return {Object} programTime\r\n   * @return {number} programTime.mediaSeconds The streamTime in seconds\r\n   * @return {string} programTime.programDateTime The programTime as an ISO-8601 String\r\n   */\r\n\r\n  const getProgramTime = ({\r\n    playlist,\r\n    time = undefined,\r\n    callback\r\n  }) => {\r\n    if (!callback) {\r\n      throw new Error('getProgramTime: callback must be provided');\r\n    }\r\n    if (!playlist || time === undefined) {\r\n      return callback({\r\n        message: 'getProgramTime: playlist and time must be provided'\r\n      });\r\n    }\r\n    const matchedSegment = findSegmentForPlayerTime(time, playlist);\r\n    if (!matchedSegment) {\r\n      return callback({\r\n        message: 'valid programTime was not found'\r\n      });\r\n    }\r\n    if (matchedSegment.type === 'estimate') {\r\n      return callback({\r\n        message: 'Accurate programTime could not be determined.' + ' Please seek to e.seekTime and try again',\r\n        seekTime: matchedSegment.estimatedStart\r\n      });\r\n    }\r\n    const programTimeObject = {\r\n      mediaSeconds: time\r\n    };\r\n    const programTime = playerTimeToProgramTime(time, matchedSegment.segment);\r\n    if (programTime) {\r\n      programTimeObject.programDateTime = programTime.toISOString();\r\n    }\r\n    return callback(null, programTimeObject);\r\n  };\r\n  /**\r\n   * Seeks in the player to a time that matches the given programTime ISO-8601 string.\r\n   *\r\n   * @param {Object} args\r\n   * @param {string} args.programTime A programTime to seek to as an ISO-8601 String\r\n   * @param {Object} args.playlist A playlist to look within\r\n   * @param {number} args.retryCount The number of times to try for an accurate seek. Default is 2.\r\n   * @param {Function} args.seekTo A method to perform a seek\r\n   * @param {boolean} args.pauseAfterSeek Whether to end in a paused state after seeking. Default is true.\r\n   * @param {Object} args.tech The tech to seek on\r\n   * @param {Function} args.callback(err, newTime) A callback to return the new time to\r\n   * @return {string} err.message A detailed error message\r\n   * @return {number} newTime The exact time that was seeked to in seconds\r\n   */\r\n\r\n  const seekToProgramTime = ({\r\n    programTime,\r\n    playlist,\r\n    retryCount = 2,\r\n    seekTo,\r\n    pauseAfterSeek = true,\r\n    tech,\r\n    callback\r\n  }) => {\r\n    if (!callback) {\r\n      throw new Error('seekToProgramTime: callback must be provided');\r\n    }\r\n    if (typeof programTime === 'undefined' || !playlist || !seekTo) {\r\n      return callback({\r\n        message: 'seekToProgramTime: programTime, seekTo and playlist must be provided'\r\n      });\r\n    }\r\n    if (!playlist.endList && !tech.hasStarted_) {\r\n      return callback({\r\n        message: 'player must be playing a live stream to start buffering'\r\n      });\r\n    }\r\n    if (!verifyProgramDateTimeTags(playlist)) {\r\n      return callback({\r\n        message: 'programDateTime tags must be provided in the manifest ' + playlist.resolvedUri\r\n      });\r\n    }\r\n    const matchedSegment = findSegmentForProgramTime(programTime, playlist); // no match\r\n\r\n    if (!matchedSegment) {\r\n      return callback({\r\n        message: `${programTime} was not found in the stream`\r\n      });\r\n    }\r\n    const segment = matchedSegment.segment;\r\n    const mediaOffset = getOffsetFromTimestamp(segment.dateTimeObject, programTime);\r\n    if (matchedSegment.type === 'estimate') {\r\n      // we've run out of retries\r\n      if (retryCount === 0) {\r\n        return callback({\r\n          message: `${programTime} is not buffered yet. Try again`\r\n        });\r\n      }\r\n      seekTo(matchedSegment.estimatedStart + mediaOffset);\r\n      tech.one('seeked', () => {\r\n        seekToProgramTime({\r\n          programTime,\r\n          playlist,\r\n          retryCount: retryCount - 1,\r\n          seekTo,\r\n          pauseAfterSeek,\r\n          tech,\r\n          callback\r\n        });\r\n      });\r\n      return;\r\n    } // Since the segment.start value is determined from the buffered end or ending time\r\n    // of the prior segment, the seekToTime doesn't need to account for any transmuxer\r\n    // modifications.\r\n\r\n    const seekToTime = segment.start + mediaOffset;\r\n    const seekedCallback = () => {\r\n      return callback(null, tech.currentTime());\r\n    }; // listen for seeked event\r\n\r\n    tech.one('seeked', seekedCallback); // pause before seeking as video.js will restore this state\r\n\r\n    if (pauseAfterSeek) {\r\n      tech.pause();\r\n    }\r\n    seekTo(seekToTime);\r\n  };\r\n\r\n  // which will only happen if the request is complete.\r\n\r\n  const callbackOnCompleted = (request, cb) => {\r\n    if (request.readyState === 4) {\r\n      return cb();\r\n    }\r\n    return;\r\n  };\r\n  const containerRequest = (uri, xhr, cb, requestType) => {\r\n    let bytes = [];\r\n    let id3Offset;\r\n    let finished = false;\r\n    const endRequestAndCallback = function (err, req, type, _bytes) {\r\n      req.abort();\r\n      finished = true;\r\n      return cb(err, req, type, _bytes);\r\n    };\r\n    const progressListener = function (error, request) {\r\n      if (finished) {\r\n        return;\r\n      }\r\n      if (error) {\r\n        error.metadata = getStreamingNetworkErrorMetadata({\r\n          requestType,\r\n          request,\r\n          error\r\n        });\r\n        return endRequestAndCallback(error, request, '', bytes);\r\n      } // grap the new part of content that was just downloaded\r\n\r\n      const newPart = request.responseText.substring(bytes && bytes.byteLength || 0, request.responseText.length); // add that onto bytes\r\n\r\n      bytes = concatTypedArrays(bytes, stringToBytes(newPart, true));\r\n      id3Offset = id3Offset || getId3Offset(bytes); // we need at least 10 bytes to determine a type\r\n      // or we need at least two bytes after an id3Offset\r\n\r\n      if (bytes.length < 10 || id3Offset && bytes.length < id3Offset + 2) {\r\n        return callbackOnCompleted(request, () => endRequestAndCallback(error, request, '', bytes));\r\n      }\r\n      const type = detectContainerForBytes(bytes); // if this looks like a ts segment but we don't have enough data\r\n      // to see the second sync byte, wait until we have enough data\r\n      // before declaring it ts\r\n\r\n      if (type === 'ts' && bytes.length < 188) {\r\n        return callbackOnCompleted(request, () => endRequestAndCallback(error, request, '', bytes));\r\n      } // this may be an unsynced ts segment\r\n      // wait for 376 bytes before detecting no container\r\n\r\n      if (!type && bytes.length < 376) {\r\n        return callbackOnCompleted(request, () => endRequestAndCallback(error, request, '', bytes));\r\n      }\r\n      return endRequestAndCallback(null, request, type, bytes);\r\n    };\r\n    const options = {\r\n      uri,\r\n      beforeSend(request) {\r\n        // this forces the browser to pass the bytes to us unprocessed\r\n        request.overrideMimeType('text/plain; charset=x-user-defined');\r\n        request.addEventListener('progress', function ({\r\n          total,\r\n          loaded\r\n        }) {\r\n          return callbackWrapper(request, null, {\r\n            statusCode: request.status\r\n          }, progressListener);\r\n        });\r\n      }\r\n    };\r\n    const request = xhr(options, function (error, response) {\r\n      return callbackWrapper(request, error, response, progressListener);\r\n    });\r\n    return request;\r\n  };\r\n  const {\r\n    EventTarget\r\n  } = videojs;\r\n  const dashPlaylistUnchanged = function (a, b) {\r\n    if (!isPlaylistUnchanged(a, b)) {\r\n      return false;\r\n    } // for dash the above check will often return true in scenarios where\r\n    // the playlist actually has changed because mediaSequence isn't a\r\n    // dash thing, and we often set it to 1. So if the playlists have the same amount\r\n    // of segments we return true.\r\n    // So for dash we need to make sure that the underlying segments are different.\r\n    // if sidx changed then the playlists are different.\r\n\r\n    if (a.sidx && b.sidx && (a.sidx.offset !== b.sidx.offset || a.sidx.length !== b.sidx.length)) {\r\n      return false;\r\n    } else if (!a.sidx && b.sidx || a.sidx && !b.sidx) {\r\n      return false;\r\n    } // one or the other does not have segments\r\n    // there was a change.\r\n\r\n    if (a.segments && !b.segments || !a.segments && b.segments) {\r\n      return false;\r\n    } // neither has segments nothing changed\r\n\r\n    if (!a.segments && !b.segments) {\r\n      return true;\r\n    } // check segments themselves\r\n\r\n    for (let i = 0; i < a.segments.length; i++) {\r\n      const aSegment = a.segments[i];\r\n      const bSegment = b.segments[i]; // if uris are different between segments there was a change\r\n\r\n      if (aSegment.uri !== bSegment.uri) {\r\n        return false;\r\n      } // neither segment has a byterange, there will be no byterange change.\r\n\r\n      if (!aSegment.byterange && !bSegment.byterange) {\r\n        continue;\r\n      }\r\n      const aByterange = aSegment.byterange;\r\n      const bByterange = bSegment.byterange; // if byterange only exists on one of the segments, there was a change.\r\n\r\n      if (aByterange && !bByterange || !aByterange && bByterange) {\r\n        return false;\r\n      } // if both segments have byterange with different offsets, there was a change.\r\n\r\n      if (aByterange.offset !== bByterange.offset || aByterange.length !== bByterange.length) {\r\n        return false;\r\n      }\r\n    } // if everything was the same with segments, this is the same playlist.\r\n\r\n    return true;\r\n  };\r\n  /**\r\n   * Use the representation IDs from the mpd object to create groupIDs, the NAME is set to mandatory representation\r\n   * ID in the parser. This allows for continuous playout across periods with the same representation IDs\r\n   * (continuous periods as defined in DASH-IF 3.2.12). This is assumed in the mpd-parser as well. If we want to support\r\n   * periods without continuous playback this function may need modification as well as the parser.\r\n   */\r\n\r\n  const dashGroupId = (type, group, label, playlist) => {\r\n    // If the manifest somehow does not have an ID (non-dash compliant), use the label.\r\n    const playlistId = playlist.attributes.NAME || label;\r\n    return `placeholder-uri-${type}-${group}-${playlistId}`;\r\n  };\r\n  /**\r\n   * Parses the main XML string and updates playlist URI references.\r\n   *\r\n   * @param {Object} config\r\n   *        Object of arguments\r\n   * @param {string} config.mainXml\r\n   *        The mpd XML\r\n   * @param {string} config.srcUrl\r\n   *        The mpd URL\r\n   * @param {Date} config.clientOffset\r\n   *         A time difference between server and client\r\n   * @param {Object} config.sidxMapping\r\n   *        SIDX mappings for moof/mdat URIs and byte ranges\r\n   * @return {Object}\r\n   *         The parsed mpd manifest object\r\n   */\r\n\r\n  const parseMainXml = ({\r\n    mainXml,\r\n    srcUrl,\r\n    clientOffset,\r\n    sidxMapping,\r\n    previousManifest\r\n  }) => {\r\n    const manifest = parse(mainXml, {\r\n      manifestUri: srcUrl,\r\n      clientOffset,\r\n      sidxMapping,\r\n      previousManifest\r\n    });\r\n    addPropertiesToMain(manifest, srcUrl, dashGroupId);\r\n    return manifest;\r\n  };\r\n  /**\r\n   * Removes any mediaGroup labels that no longer exist in the newMain\r\n   *\r\n   * @param {Object} update\r\n   *         The previous mpd object being updated\r\n   * @param {Object} newMain\r\n   *         The new mpd object\r\n   */\r\n\r\n  const removeOldMediaGroupLabels = (update, newMain) => {\r\n    forEachMediaGroup(update, (properties, type, group, label) => {\r\n      if (!newMain.mediaGroups[type][group] || !(label in newMain.mediaGroups[type][group])) {\r\n        delete update.mediaGroups[type][group][label];\r\n      }\r\n    });\r\n  };\r\n  /**\r\n   * Returns a new main manifest that is the result of merging an updated main manifest\r\n   * into the original version.\r\n   *\r\n   * @param {Object} oldMain\r\n   *        The old parsed mpd object\r\n   * @param {Object} newMain\r\n   *        The updated parsed mpd object\r\n   * @return {Object}\r\n   *         A new object representing the original main manifest with the updated media\r\n   *         playlists merged in\r\n   */\r\n\r\n  const updateMain = (oldMain, newMain, sidxMapping) => {\r\n    let noChanges = true;\r\n    let update = merge(oldMain, {\r\n      // These are top level properties that can be updated\r\n      duration: newMain.duration,\r\n      minimumUpdatePeriod: newMain.minimumUpdatePeriod,\r\n      timelineStarts: newMain.timelineStarts\r\n    }); // First update the playlists in playlist list\r\n\r\n    for (let i = 0; i < newMain.playlists.length; i++) {\r\n      const playlist = newMain.playlists[i];\r\n      if (playlist.sidx) {\r\n        const sidxKey = generateSidxKey(playlist.sidx); // add sidx segments to the playlist if we have all the sidx info already\r\n\r\n        if (sidxMapping && sidxMapping[sidxKey] && sidxMapping[sidxKey].sidx) {\r\n          addSidxSegmentsToPlaylist$1(playlist, sidxMapping[sidxKey].sidx, playlist.sidx.resolvedUri);\r\n        }\r\n      }\r\n      const playlistUpdate = updateMain$1(update, playlist, dashPlaylistUnchanged);\r\n      if (playlistUpdate) {\r\n        update = playlistUpdate;\r\n        noChanges = false;\r\n      }\r\n    } // Then update media group playlists\r\n\r\n    forEachMediaGroup(newMain, (properties, type, group, label) => {\r\n      if (properties.playlists && properties.playlists.length) {\r\n        const id = properties.playlists[0].id;\r\n        const playlistUpdate = updateMain$1(update, properties.playlists[0], dashPlaylistUnchanged);\r\n        if (playlistUpdate) {\r\n          update = playlistUpdate; // add new mediaGroup label if it doesn't exist and assign the new mediaGroup.\r\n\r\n          if (!(label in update.mediaGroups[type][group])) {\r\n            update.mediaGroups[type][group][label] = properties;\r\n          } // update the playlist reference within media groups\r\n\r\n          update.mediaGroups[type][group][label].playlists[0] = update.playlists[id];\r\n          noChanges = false;\r\n        }\r\n      }\r\n    }); // remove mediaGroup labels and references that no longer exist in the newMain\r\n\r\n    removeOldMediaGroupLabels(update, newMain);\r\n    if (newMain.minimumUpdatePeriod !== oldMain.minimumUpdatePeriod) {\r\n      noChanges = false;\r\n    }\r\n    if (noChanges) {\r\n      return null;\r\n    }\r\n    return update;\r\n  }; // SIDX should be equivalent if the URI and byteranges of the SIDX match.\r\n  // If the SIDXs have maps, the two maps should match,\r\n  // both `a` and `b` missing SIDXs is considered matching.\r\n  // If `a` or `b` but not both have a map, they aren't matching.\r\n\r\n  const equivalentSidx = (a, b) => {\r\n    const neitherMap = Boolean(!a.map && !b.map);\r\n    const equivalentMap = neitherMap || Boolean(a.map && b.map && a.map.byterange.offset === b.map.byterange.offset && a.map.byterange.length === b.map.byterange.length);\r\n    return equivalentMap && a.uri === b.uri && a.byterange.offset === b.byterange.offset && a.byterange.length === b.byterange.length;\r\n  }; // exported for testing\r\n\r\n  const compareSidxEntry = (playlists, oldSidxMapping) => {\r\n    const newSidxMapping = {};\r\n    for (const id in playlists) {\r\n      const playlist = playlists[id];\r\n      const currentSidxInfo = playlist.sidx;\r\n      if (currentSidxInfo) {\r\n        const key = generateSidxKey(currentSidxInfo);\r\n        if (!oldSidxMapping[key]) {\r\n          break;\r\n        }\r\n        const savedSidxInfo = oldSidxMapping[key].sidxInfo;\r\n        if (equivalentSidx(savedSidxInfo, currentSidxInfo)) {\r\n          newSidxMapping[key] = oldSidxMapping[key];\r\n        }\r\n      }\r\n    }\r\n    return newSidxMapping;\r\n  };\r\n  /**\r\n   *  A function that filters out changed items as they need to be requested separately.\r\n   *\r\n   *  The method is exported for testing\r\n   *\r\n   *  @param {Object} main the parsed mpd XML returned via mpd-parser\r\n   *  @param {Object} oldSidxMapping the SIDX to compare against\r\n   */\r\n\r\n  const filterChangedSidxMappings = (main, oldSidxMapping) => {\r\n    const videoSidx = compareSidxEntry(main.playlists, oldSidxMapping);\r\n    let mediaGroupSidx = videoSidx;\r\n    forEachMediaGroup(main, (properties, mediaType, groupKey, labelKey) => {\r\n      if (properties.playlists && properties.playlists.length) {\r\n        const playlists = properties.playlists;\r\n        mediaGroupSidx = merge(mediaGroupSidx, compareSidxEntry(playlists, oldSidxMapping));\r\n      }\r\n    });\r\n    return mediaGroupSidx;\r\n  };\r\n  class DashPlaylistLoader extends EventTarget {\r\n    // DashPlaylistLoader must accept either a src url or a playlist because subsequent\r\n    // playlist loader setups from media groups will expect to be able to pass a playlist\r\n    // (since there aren't external URLs to media playlists with DASH)\r\n    constructor(srcUrlOrPlaylist, vhs, options = {}, mainPlaylistLoader) {\r\n      super();\r\n      this.isPaused_ = true;\r\n      this.mainPlaylistLoader_ = mainPlaylistLoader || this;\r\n      if (!mainPlaylistLoader) {\r\n        this.isMain_ = true;\r\n      }\r\n      const {\r\n        withCredentials = false\r\n      } = options;\r\n      this.vhs_ = vhs;\r\n      this.withCredentials = withCredentials;\r\n      this.addMetadataToTextTrack = options.addMetadataToTextTrack;\r\n      if (!srcUrlOrPlaylist) {\r\n        throw new Error('A non-empty playlist URL or object is required');\r\n      } // event naming?\r\n\r\n      this.on('minimumUpdatePeriod', () => {\r\n        this.refreshXml_();\r\n      }); // live playlist staleness timeout\r\n\r\n      this.on('mediaupdatetimeout', () => {\r\n        this.refreshMedia_(this.media().id);\r\n      });\r\n      this.state = 'HAVE_NOTHING';\r\n      this.loadedPlaylists_ = {};\r\n      this.logger_ = logger('DashPlaylistLoader'); // initialize the loader state\r\n      // The mainPlaylistLoader will be created with a string\r\n\r\n      if (this.isMain_) {\r\n        this.mainPlaylistLoader_.srcUrl = srcUrlOrPlaylist; // TODO: reset sidxMapping between period changes\r\n        // once multi-period is refactored\r\n\r\n        this.mainPlaylistLoader_.sidxMapping_ = {};\r\n      } else {\r\n        this.childPlaylist_ = srcUrlOrPlaylist;\r\n      }\r\n    }\r\n    get isPaused() {\r\n      return this.isPaused_;\r\n    }\r\n    requestErrored_(err, request, startingState) {\r\n      // disposed\r\n      if (!this.request) {\r\n        return true;\r\n      } // pending request is cleared\r\n\r\n      this.request = null;\r\n      if (err) {\r\n        // use the provided error object or create one\r\n        // based on the request/response\r\n        this.error = typeof err === 'object' && !(err instanceof Error) ? err : {\r\n          status: request.status,\r\n          message: 'DASH request error at URL: ' + request.uri,\r\n          response: request.response,\r\n          // MEDIA_ERR_NETWORK\r\n          code: 2,\r\n          metadata: err.metadata\r\n        };\r\n        if (startingState) {\r\n          this.state = startingState;\r\n        }\r\n        this.trigger('error');\r\n        return true;\r\n      }\r\n    }\r\n    /**\r\n     * Verify that the container of the sidx segment can be parsed\r\n     * and if it can, get and parse that segment.\r\n     */\r\n\r\n    addSidxSegments_(playlist, startingState, cb) {\r\n      const sidxKey = playlist.sidx && generateSidxKey(playlist.sidx); // playlist lacks sidx or sidx segments were added to this playlist already.\r\n\r\n      if (!playlist.sidx || !sidxKey || this.mainPlaylistLoader_.sidxMapping_[sidxKey]) {\r\n        // keep this function async\r\n        window.clearTimeout(this.mediaRequest_);\r\n        this.mediaRequest_ = window.setTimeout(() => cb(false), 0);\r\n        return;\r\n      } // resolve the segment URL relative to the playlist\r\n\r\n      const uri = resolveManifestRedirect(playlist.sidx.resolvedUri);\r\n      const fin = (err, request) => {\r\n        if (this.requestErrored_(err, request, startingState)) {\r\n          return;\r\n        }\r\n        const sidxMapping = this.mainPlaylistLoader_.sidxMapping_;\r\n        const {\r\n          requestType\r\n        } = request;\r\n        let sidx;\r\n        try {\r\n          sidx = parseSidx_1(toUint8(request.response).subarray(8));\r\n        } catch (e) {\r\n          e.metadata = getStreamingNetworkErrorMetadata({\r\n            requestType,\r\n            request,\r\n            parseFailure: true\r\n          }); // sidx parsing failed.\r\n\r\n          this.requestErrored_(e, request, startingState);\r\n          return;\r\n        }\r\n        sidxMapping[sidxKey] = {\r\n          sidxInfo: playlist.sidx,\r\n          sidx\r\n        };\r\n        addSidxSegmentsToPlaylist$1(playlist, sidx, playlist.sidx.resolvedUri);\r\n        return cb(true);\r\n      };\r\n      const REQUEST_TYPE = 'dash-sidx';\r\n      this.request = containerRequest(uri, this.vhs_.xhr, (err, request, container, bytes) => {\r\n        if (err) {\r\n          return fin(err, request);\r\n        }\r\n        if (!container || container !== 'mp4') {\r\n          const sidxContainer = container || 'unknown';\r\n          return fin({\r\n            status: request.status,\r\n            message: `Unsupported ${sidxContainer} container type for sidx segment at URL: ${uri}`,\r\n            // response is just bytes in this case\r\n            // but we really don't want to return that.\r\n            response: '',\r\n            playlist,\r\n            internal: true,\r\n            playlistExclusionDuration: Infinity,\r\n            // MEDIA_ERR_NETWORK\r\n            code: 2\r\n          }, request);\r\n        } // if we already downloaded the sidx bytes in the container request, use them\r\n\r\n        const {\r\n          offset,\r\n          length\r\n        } = playlist.sidx.byterange;\r\n        if (bytes.length >= length + offset) {\r\n          return fin(err, {\r\n            response: bytes.subarray(offset, offset + length),\r\n            status: request.status,\r\n            uri: request.uri\r\n          });\r\n        } // otherwise request sidx bytes\r\n\r\n        this.request = this.vhs_.xhr({\r\n          uri,\r\n          responseType: 'arraybuffer',\r\n          requestType: 'dash-sidx',\r\n          headers: segmentXhrHeaders({\r\n            byterange: playlist.sidx.byterange\r\n          })\r\n        }, fin);\r\n      }, REQUEST_TYPE);\r\n    }\r\n    dispose() {\r\n      this.isPaused_ = true;\r\n      this.trigger('dispose');\r\n      this.stopRequest();\r\n      this.loadedPlaylists_ = {};\r\n      window.clearTimeout(this.minimumUpdatePeriodTimeout_);\r\n      window.clearTimeout(this.mediaRequest_);\r\n      window.clearTimeout(this.mediaUpdateTimeout);\r\n      this.mediaUpdateTimeout = null;\r\n      this.mediaRequest_ = null;\r\n      this.minimumUpdatePeriodTimeout_ = null;\r\n      if (this.mainPlaylistLoader_.createMupOnMedia_) {\r\n        this.off('loadedmetadata', this.mainPlaylistLoader_.createMupOnMedia_);\r\n        this.mainPlaylistLoader_.createMupOnMedia_ = null;\r\n      }\r\n      this.off();\r\n    }\r\n    hasPendingRequest() {\r\n      return this.request || this.mediaRequest_;\r\n    }\r\n    stopRequest() {\r\n      if (this.request) {\r\n        const oldRequest = this.request;\r\n        this.request = null;\r\n        oldRequest.onreadystatechange = null;\r\n        oldRequest.abort();\r\n      }\r\n    }\r\n    media(playlist) {\r\n      // getter\r\n      if (!playlist) {\r\n        return this.media_;\r\n      } // setter\r\n\r\n      if (this.state === 'HAVE_NOTHING') {\r\n        throw new Error('Cannot switch media playlist from ' + this.state);\r\n      }\r\n      const startingState = this.state; // find the playlist object if the target playlist has been specified by URI\r\n\r\n      if (typeof playlist === 'string') {\r\n        if (!this.mainPlaylistLoader_.main.playlists[playlist]) {\r\n          throw new Error('Unknown playlist URI: ' + playlist);\r\n        }\r\n        playlist = this.mainPlaylistLoader_.main.playlists[playlist];\r\n      }\r\n      const mediaChange = !this.media_ || playlist.id !== this.media_.id; // switch to previously loaded playlists immediately\r\n\r\n      if (mediaChange && this.loadedPlaylists_[playlist.id] && this.loadedPlaylists_[playlist.id].endList) {\r\n        this.state = 'HAVE_METADATA';\r\n        this.media_ = playlist; // trigger media change if the active media has been updated\r\n\r\n        if (mediaChange) {\r\n          this.trigger('mediachanging');\r\n          this.trigger('mediachange');\r\n        }\r\n        return;\r\n      } // switching to the active playlist is a no-op\r\n\r\n      if (!mediaChange) {\r\n        return;\r\n      } // switching from an already loaded playlist\r\n\r\n      if (this.media_) {\r\n        this.trigger('mediachanging');\r\n      }\r\n      this.addSidxSegments_(playlist, startingState, sidxChanged => {\r\n        // everything is ready just continue to haveMetadata\r\n        this.haveMetadata({\r\n          startingState,\r\n          playlist\r\n        });\r\n      });\r\n    }\r\n    haveMetadata({\r\n      startingState,\r\n      playlist\r\n    }) {\r\n      this.state = 'HAVE_METADATA';\r\n      this.loadedPlaylists_[playlist.id] = playlist;\r\n      window.clearTimeout(this.mediaRequest_);\r\n      this.mediaRequest_ = null; // This will trigger loadedplaylist\r\n\r\n      this.refreshMedia_(playlist.id); // fire loadedmetadata the first time a media playlist is loaded\r\n      // to resolve setup of media groups\r\n\r\n      if (startingState === 'HAVE_MAIN_MANIFEST') {\r\n        this.trigger('loadedmetadata');\r\n      } else {\r\n        // trigger media change if the active media has been updated\r\n        this.trigger('mediachange');\r\n      }\r\n    }\r\n    pause() {\r\n      this.isPaused_ = true;\r\n      if (this.mainPlaylistLoader_.createMupOnMedia_) {\r\n        this.off('loadedmetadata', this.mainPlaylistLoader_.createMupOnMedia_);\r\n        this.mainPlaylistLoader_.createMupOnMedia_ = null;\r\n      }\r\n      this.stopRequest();\r\n      window.clearTimeout(this.mediaUpdateTimeout);\r\n      this.mediaUpdateTimeout = null;\r\n      if (this.isMain_) {\r\n        window.clearTimeout(this.mainPlaylistLoader_.minimumUpdatePeriodTimeout_);\r\n        this.mainPlaylistLoader_.minimumUpdatePeriodTimeout_ = null;\r\n      }\r\n      if (this.state === 'HAVE_NOTHING') {\r\n        // If we pause the loader before any data has been retrieved, its as if we never\r\n        // started, so reset to an unstarted state.\r\n        this.started = false;\r\n      }\r\n    }\r\n    load(isFinalRendition) {\r\n      this.isPaused_ = false;\r\n      window.clearTimeout(this.mediaUpdateTimeout);\r\n      this.mediaUpdateTimeout = null;\r\n      const media = this.media();\r\n      if (isFinalRendition) {\r\n        const delay = media ? media.targetDuration / 2 * 1000 : 5 * 1000;\r\n        this.mediaUpdateTimeout = window.setTimeout(() => this.load(), delay);\r\n        return;\r\n      } // because the playlists are internal to the manifest, load should either load the\r\n      // main manifest, or do nothing but trigger an event\r\n\r\n      if (!this.started) {\r\n        this.start();\r\n        return;\r\n      }\r\n      if (media && !media.endList) {\r\n        // Check to see if this is the main loader and the MUP was cleared (this happens\r\n        // when the loader was paused). `media` should be set at this point since one is always\r\n        // set during `start()`.\r\n        if (this.isMain_ && !this.minimumUpdatePeriodTimeout_) {\r\n          // Trigger minimumUpdatePeriod to refresh the main manifest\r\n          this.trigger('minimumUpdatePeriod'); // Since there was no prior minimumUpdatePeriodTimeout it should be recreated\r\n\r\n          this.updateMinimumUpdatePeriodTimeout_();\r\n        }\r\n        this.trigger('mediaupdatetimeout');\r\n      } else {\r\n        this.trigger('loadedplaylist');\r\n      }\r\n    }\r\n    start() {\r\n      this.started = true; // We don't need to request the main manifest again\r\n      // Call this asynchronously to match the xhr request behavior below\r\n\r\n      if (!this.isMain_) {\r\n        window.clearTimeout(this.mediaRequest_);\r\n        this.mediaRequest_ = window.setTimeout(() => this.haveMain_(), 0);\r\n        return;\r\n      }\r\n      this.requestMain_((req, mainChanged) => {\r\n        this.haveMain_();\r\n        if (!this.hasPendingRequest() && !this.media_) {\r\n          this.media(this.mainPlaylistLoader_.main.playlists[0]);\r\n        }\r\n      });\r\n    }\r\n    requestMain_(cb) {\r\n      const metadata = {\r\n        manifestInfo: {\r\n          uri: this.mainPlaylistLoader_.srcUrl\r\n        }\r\n      };\r\n      this.trigger({\r\n        type: 'manifestrequeststart',\r\n        metadata\r\n      });\r\n      this.request = this.vhs_.xhr({\r\n        uri: this.mainPlaylistLoader_.srcUrl,\r\n        withCredentials: this.withCredentials,\r\n        requestType: 'dash-manifest'\r\n      }, (error, req) => {\r\n        if (error) {\r\n          const {\r\n            requestType\r\n          } = req;\r\n          error.metadata = getStreamingNetworkErrorMetadata({\r\n            requestType,\r\n            request: req,\r\n            error\r\n          });\r\n        }\r\n        if (this.requestErrored_(error, req)) {\r\n          if (this.state === 'HAVE_NOTHING') {\r\n            this.started = false;\r\n          }\r\n          return;\r\n        }\r\n        this.trigger({\r\n          type: 'manifestrequestcomplete',\r\n          metadata\r\n        });\r\n        const mainChanged = req.responseText !== this.mainPlaylistLoader_.mainXml_;\r\n        this.mainPlaylistLoader_.mainXml_ = req.responseText;\r\n        if (req.responseHeaders && req.responseHeaders.date) {\r\n          this.mainLoaded_ = Date.parse(req.responseHeaders.date);\r\n        } else {\r\n          this.mainLoaded_ = Date.now();\r\n        }\r\n        this.mainPlaylistLoader_.srcUrl = resolveManifestRedirect(this.mainPlaylistLoader_.srcUrl, req);\r\n        if (mainChanged) {\r\n          this.handleMain_();\r\n          this.syncClientServerClock_(() => {\r\n            return cb(req, mainChanged);\r\n          });\r\n          return;\r\n        }\r\n        return cb(req, mainChanged);\r\n      });\r\n    }\r\n    /**\r\n     * Parses the main xml for UTCTiming node to sync the client clock to the server\r\n     * clock. If the UTCTiming node requires a HEAD or GET request, that request is made.\r\n     *\r\n     * @param {Function} done\r\n     *        Function to call when clock sync has completed\r\n     */\r\n\r\n    syncClientServerClock_(done) {\r\n      const utcTiming = parseUTCTiming(this.mainPlaylistLoader_.mainXml_); // No UTCTiming element found in the mpd. Use Date header from mpd request as the\r\n      // server clock\r\n\r\n      if (utcTiming === null) {\r\n        this.mainPlaylistLoader_.clientOffset_ = this.mainLoaded_ - Date.now();\r\n        return done();\r\n      }\r\n      if (utcTiming.method === 'DIRECT') {\r\n        this.mainPlaylistLoader_.clientOffset_ = utcTiming.value - Date.now();\r\n        return done();\r\n      }\r\n      this.request = this.vhs_.xhr({\r\n        uri: resolveUrl(this.mainPlaylistLoader_.srcUrl, utcTiming.value),\r\n        method: utcTiming.method,\r\n        withCredentials: this.withCredentials,\r\n        requestType: 'dash-clock-sync'\r\n      }, (error, req) => {\r\n        // disposed\r\n        if (!this.request) {\r\n          return;\r\n        }\r\n        if (error) {\r\n          const {\r\n            requestType\r\n          } = req;\r\n          this.error.metadata = getStreamingNetworkErrorMetadata({\r\n            requestType,\r\n            request: req,\r\n            error\r\n          }); // sync request failed, fall back to using date header from mpd\r\n          // TODO: log warning\r\n\r\n          this.mainPlaylistLoader_.clientOffset_ = this.mainLoaded_ - Date.now();\r\n          return done();\r\n        }\r\n        let serverTime;\r\n        if (utcTiming.method === 'HEAD') {\r\n          if (!req.responseHeaders || !req.responseHeaders.date) {\r\n            // expected date header not preset, fall back to using date header from mpd\r\n            // TODO: log warning\r\n            serverTime = this.mainLoaded_;\r\n          } else {\r\n            serverTime = Date.parse(req.responseHeaders.date);\r\n          }\r\n        } else {\r\n          serverTime = Date.parse(req.responseText);\r\n        }\r\n        this.mainPlaylistLoader_.clientOffset_ = serverTime - Date.now();\r\n        done();\r\n      });\r\n    }\r\n    haveMain_() {\r\n      this.state = 'HAVE_MAIN_MANIFEST';\r\n      if (this.isMain_) {\r\n        // We have the main playlist at this point, so\r\n        // trigger this to allow PlaylistController\r\n        // to make an initial playlist selection\r\n        this.trigger('loadedplaylist');\r\n      } else if (!this.media_) {\r\n        // no media playlist was specifically selected so select\r\n        // the one the child playlist loader was created with\r\n        this.media(this.childPlaylist_);\r\n      }\r\n    }\r\n    handleMain_() {\r\n      // clear media request\r\n      window.clearTimeout(this.mediaRequest_);\r\n      this.mediaRequest_ = null;\r\n      const oldMain = this.mainPlaylistLoader_.main;\r\n      const metadata = {\r\n        manifestInfo: {\r\n          uri: this.mainPlaylistLoader_.srcUrl\r\n        }\r\n      };\r\n      this.trigger({\r\n        type: 'manifestparsestart',\r\n        metadata\r\n      });\r\n      let newMain;\r\n      try {\r\n        newMain = parseMainXml({\r\n          mainXml: this.mainPlaylistLoader_.mainXml_,\r\n          srcUrl: this.mainPlaylistLoader_.srcUrl,\r\n          clientOffset: this.mainPlaylistLoader_.clientOffset_,\r\n          sidxMapping: this.mainPlaylistLoader_.sidxMapping_,\r\n          previousManifest: oldMain\r\n        });\r\n      } catch (error) {\r\n        this.error = error;\r\n        this.error.metadata = {\r\n          errorType: videojs.Error.StreamingDashManifestParserError,\r\n          error\r\n        };\r\n        this.trigger('error');\r\n      } // if we have an old main to compare the new main against\r\n\r\n      if (oldMain) {\r\n        newMain = updateMain(oldMain, newMain, this.mainPlaylistLoader_.sidxMapping_);\r\n      } // only update main if we have a new main\r\n\r\n      this.mainPlaylistLoader_.main = newMain ? newMain : oldMain;\r\n      const location = this.mainPlaylistLoader_.main.locations && this.mainPlaylistLoader_.main.locations[0];\r\n      if (location && location !== this.mainPlaylistLoader_.srcUrl) {\r\n        this.mainPlaylistLoader_.srcUrl = location;\r\n      }\r\n      if (!oldMain || newMain && newMain.minimumUpdatePeriod !== oldMain.minimumUpdatePeriod) {\r\n        this.updateMinimumUpdatePeriodTimeout_();\r\n      }\r\n      this.addEventStreamToMetadataTrack_(newMain);\r\n      if (newMain) {\r\n        const {\r\n          duration,\r\n          endList\r\n        } = newMain;\r\n        const renditions = [];\r\n        newMain.playlists.forEach(playlist => {\r\n          renditions.push({\r\n            id: playlist.id,\r\n            bandwidth: playlist.attributes.BANDWIDTH,\r\n            resolution: playlist.attributes.RESOLUTION,\r\n            codecs: playlist.attributes.CODECS\r\n          });\r\n        });\r\n        const parsedManifest = {\r\n          duration,\r\n          isLive: !endList,\r\n          renditions\r\n        };\r\n        metadata.parsedManifest = parsedManifest;\r\n        this.trigger({\r\n          type: 'manifestparsecomplete',\r\n          metadata\r\n        });\r\n      }\r\n      return Boolean(newMain);\r\n    }\r\n    updateMinimumUpdatePeriodTimeout_() {\r\n      const mpl = this.mainPlaylistLoader_; // cancel any pending creation of mup on media\r\n      // a new one will be added if needed.\r\n\r\n      if (mpl.createMupOnMedia_) {\r\n        mpl.off('loadedmetadata', mpl.createMupOnMedia_);\r\n        mpl.createMupOnMedia_ = null;\r\n      } // clear any pending timeouts\r\n\r\n      if (mpl.minimumUpdatePeriodTimeout_) {\r\n        window.clearTimeout(mpl.minimumUpdatePeriodTimeout_);\r\n        mpl.minimumUpdatePeriodTimeout_ = null;\r\n      }\r\n      let mup = mpl.main && mpl.main.minimumUpdatePeriod; // If the minimumUpdatePeriod has a value of 0, that indicates that the current\r\n      // MPD has no future validity, so a new one will need to be acquired when new\r\n      // media segments are to be made available. Thus, we use the target duration\r\n      // in this case\r\n\r\n      if (mup === 0) {\r\n        if (mpl.media()) {\r\n          mup = mpl.media().targetDuration * 1000;\r\n        } else {\r\n          mpl.createMupOnMedia_ = mpl.updateMinimumUpdatePeriodTimeout_;\r\n          mpl.one('loadedmetadata', mpl.createMupOnMedia_);\r\n        }\r\n      } // if minimumUpdatePeriod is invalid or <= zero, which\r\n      // can happen when a live video becomes VOD. skip timeout\r\n      // creation.\r\n\r\n      if (typeof mup !== 'number' || mup <= 0) {\r\n        if (mup < 0) {\r\n          this.logger_(`found invalid minimumUpdatePeriod of ${mup}, not setting a timeout`);\r\n        }\r\n        return;\r\n      }\r\n      this.createMUPTimeout_(mup);\r\n    }\r\n    createMUPTimeout_(mup) {\r\n      const mpl = this.mainPlaylistLoader_;\r\n      mpl.minimumUpdatePeriodTimeout_ = window.setTimeout(() => {\r\n        mpl.minimumUpdatePeriodTimeout_ = null;\r\n        mpl.trigger('minimumUpdatePeriod');\r\n        mpl.createMUPTimeout_(mup);\r\n      }, mup);\r\n    }\r\n    /**\r\n     * Sends request to refresh the main xml and updates the parsed main manifest\r\n     */\r\n\r\n    refreshXml_() {\r\n      this.requestMain_((req, mainChanged) => {\r\n        if (!mainChanged) {\r\n          return;\r\n        }\r\n        if (this.media_) {\r\n          this.media_ = this.mainPlaylistLoader_.main.playlists[this.media_.id];\r\n        } // This will filter out updated sidx info from the mapping\r\n\r\n        this.mainPlaylistLoader_.sidxMapping_ = filterChangedSidxMappings(this.mainPlaylistLoader_.main, this.mainPlaylistLoader_.sidxMapping_);\r\n        this.addSidxSegments_(this.media(), this.state, sidxChanged => {\r\n          // TODO: do we need to reload the current playlist?\r\n          this.refreshMedia_(this.media().id);\r\n        });\r\n      });\r\n    }\r\n    /**\r\n     * Refreshes the media playlist by re-parsing the main xml and updating playlist\r\n     * references. If this is an alternate loader, the updated parsed manifest is retrieved\r\n     * from the main loader.\r\n     */\r\n\r\n    refreshMedia_(mediaID) {\r\n      if (!mediaID) {\r\n        throw new Error('refreshMedia_ must take a media id');\r\n      } // for main we have to reparse the main xml\r\n      // to re-create segments based on current timing values\r\n      // which may change media. We only skip updating the main manifest\r\n      // if this is the first time this.media_ is being set.\r\n      // as main was just parsed in that case.\r\n\r\n      if (this.media_ && this.isMain_) {\r\n        this.handleMain_();\r\n      }\r\n      const playlists = this.mainPlaylistLoader_.main.playlists;\r\n      const mediaChanged = !this.media_ || this.media_ !== playlists[mediaID];\r\n      if (mediaChanged) {\r\n        this.media_ = playlists[mediaID];\r\n      } else {\r\n        this.trigger('playlistunchanged');\r\n      }\r\n      if (!this.mediaUpdateTimeout) {\r\n        const createMediaUpdateTimeout = () => {\r\n          if (this.media().endList) {\r\n            return;\r\n          }\r\n          this.mediaUpdateTimeout = window.setTimeout(() => {\r\n            this.trigger('mediaupdatetimeout');\r\n            createMediaUpdateTimeout();\r\n          }, refreshDelay(this.media(), Boolean(mediaChanged)));\r\n        };\r\n        createMediaUpdateTimeout();\r\n      }\r\n      this.trigger('loadedplaylist');\r\n    }\r\n    /**\r\n     * Takes eventstream data from a parsed DASH manifest and adds it to the metadata text track.\r\n     *\r\n     * @param {manifest} newMain the newly parsed manifest\r\n     */\r\n\r\n    addEventStreamToMetadataTrack_(newMain) {\r\n      // Only add new event stream metadata if we have a new manifest.\r\n      if (newMain && this.mainPlaylistLoader_.main.eventStream) {\r\n        // convert EventStream to ID3-like data.\r\n        const metadataArray = this.mainPlaylistLoader_.main.eventStream.map(eventStreamNode => {\r\n          return {\r\n            cueTime: eventStreamNode.start,\r\n            frames: [{\r\n              data: eventStreamNode.messageData\r\n            }]\r\n          };\r\n        });\r\n        this.addMetadataToTextTrack('EventStream', metadataArray, this.mainPlaylistLoader_.main.duration);\r\n      }\r\n    }\r\n    /**\r\n     * Returns the key ID set from a playlist\r\n     *\r\n     * @param {playlist} playlist to fetch the key ID set from.\r\n     * @return a Set of 32 digit hex strings that represent the unique keyIds for that playlist.\r\n     */\r\n\r\n    getKeyIdSet(playlist) {\r\n      if (playlist.contentProtection) {\r\n        const keyIds = new Set();\r\n        for (const keysystem in playlist.contentProtection) {\r\n          const defaultKID = playlist.contentProtection[keysystem].attributes['cenc:default_KID'];\r\n          if (defaultKID) {\r\n            // DASH keyIds are separated by dashes.\r\n            keyIds.add(defaultKID.replace(/-/g, '').toLowerCase());\r\n          }\r\n        }\r\n        return keyIds;\r\n      }\r\n    }\r\n  }\r\n  var Config = {\r\n    GOAL_BUFFER_LENGTH: 30,\r\n    MAX_GOAL_BUFFER_LENGTH: 60,\r\n    BACK_BUFFER_LENGTH: 30,\r\n    GOAL_BUFFER_LENGTH_RATE: 1,\r\n    // 0.5 MB/s\r\n    INITIAL_BANDWIDTH: 4194304,\r\n    // A fudge factor to apply to advertised playlist bitrates to account for\r\n    // temporary flucations in client bandwidth\r\n    BANDWIDTH_VARIANCE: 1.2,\r\n    // How much of the buffer must be filled before we consider upswitching\r\n    BUFFER_LOW_WATER_LINE: 0,\r\n    MAX_BUFFER_LOW_WATER_LINE: 30,\r\n    // TODO: Remove this when experimentalBufferBasedABR is removed\r\n    EXPERIMENTAL_MAX_BUFFER_LOW_WATER_LINE: 16,\r\n    BUFFER_LOW_WATER_LINE_RATE: 1,\r\n    // If the buffer is greater than the high water line, we won't switch down\r\n    BUFFER_HIGH_WATER_LINE: 30\r\n  };\r\n  const stringToArrayBuffer = string => {\r\n    const view = new Uint8Array(new ArrayBuffer(string.length));\r\n    for (let i = 0; i < string.length; i++) {\r\n      view[i] = string.charCodeAt(i);\r\n    }\r\n    return view.buffer;\r\n  };\r\n\r\n  /* global Blob, BlobBuilder, Worker */\r\n  // unify worker interface\r\n  const browserWorkerPolyFill = function (workerObj) {\r\n    // node only supports on/off\r\n    workerObj.on = workerObj.addEventListener;\r\n    workerObj.off = workerObj.removeEventListener;\r\n    return workerObj;\r\n  };\r\n  const createObjectURL = function (str) {\r\n    try {\r\n      return URL.createObjectURL(new Blob([str], {\r\n        type: 'application/javascript'\r\n      }));\r\n    } catch (e) {\r\n      const blob = new BlobBuilder();\r\n      blob.append(str);\r\n      return URL.createObjectURL(blob.getBlob());\r\n    }\r\n  };\r\n  const factory = function (code) {\r\n    return function () {\r\n      const objectUrl = createObjectURL(code);\r\n      const worker = browserWorkerPolyFill(new Worker(objectUrl));\r\n      worker.objURL = objectUrl;\r\n      const terminate = worker.terminate;\r\n      worker.on = worker.addEventListener;\r\n      worker.off = worker.removeEventListener;\r\n      worker.terminate = function () {\r\n        URL.revokeObjectURL(objectUrl);\r\n        return terminate.call(this);\r\n      };\r\n      return worker;\r\n    };\r\n  };\r\n  const transform = function (code) {\r\n    return `var browserWorkerPolyFill = ${browserWorkerPolyFill.toString()};\\n` + 'browserWorkerPolyFill(self);\\n' + code;\r\n  };\r\n  const getWorkerString = function (fn) {\r\n    return fn.toString().replace(/^function.+?{/, '').slice(0, -1);\r\n  };\r\n\r\n  /* rollup-plugin-worker-factory start for worker!/home/runner/work/http-streaming/http-streaming/src/transmuxer-worker.js */\r\n  const workerCode$1 = transform(getWorkerString(function () {\r\n    var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};\r\n    /**\r\n     * mux.js\r\n     *\r\n     * Copyright (c) Brightcove\r\n     * Licensed Apache-2.0 https://github.com/videojs/mux.js/blob/master/LICENSE\r\n     *\r\n     * A lightweight readable stream implemention that handles event dispatching.\r\n     * Objects that inherit from streams should call init in their constructors.\r\n     */\r\n\r\n    var Stream$8 = function () {\r\n      this.init = function () {\r\n        var listeners = {};\r\n        /**\r\n         * Add a listener for a specified event type.\r\n         * @param type {string} the event name\r\n         * @param listener {function} the callback to be invoked when an event of\r\n         * the specified type occurs\r\n         */\r\n\r\n        this.on = function (type, listener) {\r\n          if (!listeners[type]) {\r\n            listeners[type] = [];\r\n          }\r\n          listeners[type] = listeners[type].concat(listener);\r\n        };\r\n        /**\r\n         * Remove a listener for a specified event type.\r\n         * @param type {string} the event name\r\n         * @param listener {function} a function previously registered for this\r\n         * type of event through `on`\r\n         */\r\n\r\n        this.off = function (type, listener) {\r\n          var index;\r\n          if (!listeners[type]) {\r\n            return false;\r\n          }\r\n          index = listeners[type].indexOf(listener);\r\n          listeners[type] = listeners[type].slice();\r\n          listeners[type].splice(index, 1);\r\n          return index > -1;\r\n        };\r\n        /**\r\n         * Trigger an event of the specified type on this stream. Any additional\r\n         * arguments to this function are passed as parameters to event listeners.\r\n         * @param type {string} the event name\r\n         */\r\n\r\n        this.trigger = function (type) {\r\n          var callbacks, i, length, args;\r\n          callbacks = listeners[type];\r\n          if (!callbacks) {\r\n            return;\r\n          } // Slicing the arguments on every invocation of this method\r\n          // can add a significant amount of overhead. Avoid the\r\n          // intermediate object creation for the common case of a\r\n          // single callback argument\r\n\r\n          if (arguments.length === 2) {\r\n            length = callbacks.length;\r\n            for (i = 0; i < length; ++i) {\r\n              callbacks[i].call(this, arguments[1]);\r\n            }\r\n          } else {\r\n            args = [];\r\n            i = arguments.length;\r\n            for (i = 1; i < arguments.length; ++i) {\r\n              args.push(arguments[i]);\r\n            }\r\n            length = callbacks.length;\r\n            for (i = 0; i < length; ++i) {\r\n              callbacks[i].apply(this, args);\r\n            }\r\n          }\r\n        };\r\n        /**\r\n         * Destroys the stream and cleans up.\r\n         */\r\n\r\n        this.dispose = function () {\r\n          listeners = {};\r\n        };\r\n      };\r\n    };\r\n    /**\r\n     * Forwards all `data` events on this stream to the destination stream. The\r\n     * destination stream should provide a method `push` to receive the data\r\n     * events as they arrive.\r\n     * @param destination {stream} the stream that will receive all `data` events\r\n     * @param autoFlush {boolean} if false, we will not call `flush` on the destination\r\n     *                            when the current stream emits a 'done' event\r\n     * @see http://nodejs.org/api/stream.html#stream_readable_pipe_destination_options\r\n     */\r\n\r\n    Stream$8.prototype.pipe = function (destination) {\r\n      this.on('data', function (data) {\r\n        destination.push(data);\r\n      });\r\n      this.on('done', function (flushSource) {\r\n        destination.flush(flushSource);\r\n      });\r\n      this.on('partialdone', function (flushSource) {\r\n        destination.partialFlush(flushSource);\r\n      });\r\n      this.on('endedtimeline', function (flushSource) {\r\n        destination.endTimeline(flushSource);\r\n      });\r\n      this.on('reset', function (flushSource) {\r\n        destination.reset(flushSource);\r\n      });\r\n      return destination;\r\n    }; // Default stream functions that are expected to be overridden to perform\r\n    // actual work. These are provided by the prototype as a sort of no-op\r\n    // implementation so that we don't have to check for their existence in the\r\n    // `pipe` function above.\r\n\r\n    Stream$8.prototype.push = function (data) {\r\n      this.trigger('data', data);\r\n    };\r\n    Stream$8.prototype.flush = function (flushSource) {\r\n      this.trigger('done', flushSource);\r\n    };\r\n    Stream$8.prototype.partialFlush = function (flushSource) {\r\n      this.trigger('partialdone', flushSource);\r\n    };\r\n    Stream$8.prototype.endTimeline = function (flushSource) {\r\n      this.trigger('endedtimeline', flushSource);\r\n    };\r\n    Stream$8.prototype.reset = function (flushSource) {\r\n      this.trigger('reset', flushSource);\r\n    };\r\n    var stream = Stream$8;\r\n    var MAX_UINT32$1 = Math.pow(2, 32);\r\n    var getUint64$5 = function (uint8) {\r\n      var dv = new DataView(uint8.buffer, uint8.byteOffset, uint8.byteLength);\r\n      var value;\r\n      if (dv.getBigUint64) {\r\n        value = dv.getBigUint64(0);\r\n        if (value < Number.MAX_SAFE_INTEGER) {\r\n          return Number(value);\r\n        }\r\n        return value;\r\n      }\r\n      return dv.getUint32(0) * MAX_UINT32$1 + dv.getUint32(4);\r\n    };\r\n    var numbers = {\r\n      getUint64: getUint64$5,\r\n      MAX_UINT32: MAX_UINT32$1\r\n    };\r\n    /**\r\n     * mux.js\r\n     *\r\n     * Copyright (c) Brightcove\r\n     * Licensed Apache-2.0 https://github.com/videojs/mux.js/blob/master/LICENSE\r\n     *\r\n     * Functions that generate fragmented MP4s suitable for use with Media\r\n     * Source Extensions.\r\n     */\r\n\r\n    var MAX_UINT32 = numbers.MAX_UINT32;\r\n    var box, dinf, esds, ftyp, mdat, mfhd, minf, moof, moov, mvex, mvhd, trak, tkhd, mdia, mdhd, hdlr, sdtp, stbl, stsd, traf, trex, trun$1, types, MAJOR_BRAND, MINOR_VERSION, AVC1_BRAND, VIDEO_HDLR, AUDIO_HDLR, HDLR_TYPES, VMHD, SMHD, DREF, STCO, STSC, STSZ, STTS; // pre-calculate constants\r\n\r\n    (function () {\r\n      var i;\r\n      types = {\r\n        avc1: [],\r\n        // codingname\r\n        avcC: [],\r\n        btrt: [],\r\n        dinf: [],\r\n        dref: [],\r\n        esds: [],\r\n        ftyp: [],\r\n        hdlr: [],\r\n        mdat: [],\r\n        mdhd: [],\r\n        mdia: [],\r\n        mfhd: [],\r\n        minf: [],\r\n        moof: [],\r\n        moov: [],\r\n        mp4a: [],\r\n        // codingname\r\n        mvex: [],\r\n        mvhd: [],\r\n        pasp: [],\r\n        sdtp: [],\r\n        smhd: [],\r\n        stbl: [],\r\n        stco: [],\r\n        stsc: [],\r\n        stsd: [],\r\n        stsz: [],\r\n        stts: [],\r\n        styp: [],\r\n        tfdt: [],\r\n        tfhd: [],\r\n        traf: [],\r\n        trak: [],\r\n        trun: [],\r\n        trex: [],\r\n        tkhd: [],\r\n        vmhd: []\r\n      }; // In environments where Uint8Array is undefined (e.g., IE8), skip set up so that we\r\n      // don't throw an error\r\n\r\n      if (typeof Uint8Array === 'undefined') {\r\n        return;\r\n      }\r\n      for (i in types) {\r\n        if (types.hasOwnProperty(i)) {\r\n          types[i] = [i.charCodeAt(0), i.charCodeAt(1), i.charCodeAt(2), i.charCodeAt(3)];\r\n        }\r\n      }\r\n      MAJOR_BRAND = new Uint8Array(['i'.charCodeAt(0), 's'.charCodeAt(0), 'o'.charCodeAt(0), 'm'.charCodeAt(0)]);\r\n      AVC1_BRAND = new Uint8Array(['a'.charCodeAt(0), 'v'.charCodeAt(0), 'c'.charCodeAt(0), '1'.charCodeAt(0)]);\r\n      MINOR_VERSION = new Uint8Array([0, 0, 0, 1]);\r\n      VIDEO_HDLR = new Uint8Array([0x00,\r\n      // version 0\r\n      0x00, 0x00, 0x00,\r\n      // flags\r\n      0x00, 0x00, 0x00, 0x00,\r\n      // pre_defined\r\n      0x76, 0x69, 0x64, 0x65,\r\n      // handler_type: 'vide'\r\n      0x00, 0x00, 0x00, 0x00,\r\n      // reserved\r\n      0x00, 0x00, 0x00, 0x00,\r\n      // reserved\r\n      0x00, 0x00, 0x00, 0x00,\r\n      // reserved\r\n      0x56, 0x69, 0x64, 0x65, 0x6f, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x00 // name: 'VideoHandler'\r\n      ]);\r\n      AUDIO_HDLR = new Uint8Array([0x00,\r\n      // version 0\r\n      0x00, 0x00, 0x00,\r\n      // flags\r\n      0x00, 0x00, 0x00, 0x00,\r\n      // pre_defined\r\n      0x73, 0x6f, 0x75, 0x6e,\r\n      // handler_type: 'soun'\r\n      0x00, 0x00, 0x00, 0x00,\r\n      // reserved\r\n      0x00, 0x00, 0x00, 0x00,\r\n      // reserved\r\n      0x00, 0x00, 0x00, 0x00,\r\n      // reserved\r\n      0x53, 0x6f, 0x75, 0x6e, 0x64, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x00 // name: 'SoundHandler'\r\n      ]);\r\n      HDLR_TYPES = {\r\n        video: VIDEO_HDLR,\r\n        audio: AUDIO_HDLR\r\n      };\r\n      DREF = new Uint8Array([0x00,\r\n      // version 0\r\n      0x00, 0x00, 0x00,\r\n      // flags\r\n      0x00, 0x00, 0x00, 0x01,\r\n      // entry_count\r\n      0x00, 0x00, 0x00, 0x0c,\r\n      // entry_size\r\n      0x75, 0x72, 0x6c, 0x20,\r\n      // 'url' type\r\n      0x00,\r\n      // version 0\r\n      0x00, 0x00, 0x01 // entry_flags\r\n      ]);\r\n      SMHD = new Uint8Array([0x00,\r\n      // version\r\n      0x00, 0x00, 0x00,\r\n      // flags\r\n      0x00, 0x00,\r\n      // balance, 0 means centered\r\n      0x00, 0x00 // reserved\r\n      ]);\r\n      STCO = new Uint8Array([0x00,\r\n      // version\r\n      0x00, 0x00, 0x00,\r\n      // flags\r\n      0x00, 0x00, 0x00, 0x00 // entry_count\r\n      ]);\r\n      STSC = STCO;\r\n      STSZ = new Uint8Array([0x00,\r\n      // version\r\n      0x00, 0x00, 0x00,\r\n      // flags\r\n      0x00, 0x00, 0x00, 0x00,\r\n      // sample_size\r\n      0x00, 0x00, 0x00, 0x00 // sample_count\r\n      ]);\r\n      STTS = STCO;\r\n      VMHD = new Uint8Array([0x00,\r\n      // version\r\n      0x00, 0x00, 0x01,\r\n      // flags\r\n      0x00, 0x00,\r\n      // graphicsmode\r\n      0x00, 0x00, 0x00, 0x00, 0x00, 0x00 // opcolor\r\n      ]);\r\n    })();\r\n    box = function (type) {\r\n      var payload = [],\r\n        size = 0,\r\n        i,\r\n        result,\r\n        view;\r\n      for (i = 1; i < arguments.length; i++) {\r\n        payload.push(arguments[i]);\r\n      }\r\n      i = payload.length; // calculate the total size we need to allocate\r\n\r\n      while (i--) {\r\n        size += payload[i].byteLength;\r\n      }\r\n      result = new Uint8Array(size + 8);\r\n      view = new DataView(result.buffer, result.byteOffset, result.byteLength);\r\n      view.setUint32(0, result.byteLength);\r\n      result.set(type, 4); // copy the payload into the result\r\n\r\n      for (i = 0, size = 8; i < payload.length; i++) {\r\n        result.set(payload[i], size);\r\n        size += payload[i].byteLength;\r\n      }\r\n      return result;\r\n    };\r\n    dinf = function () {\r\n      return box(types.dinf, box(types.dref, DREF));\r\n    };\r\n    esds = function (track) {\r\n      return box(types.esds, new Uint8Array([0x00,\r\n      // version\r\n      0x00, 0x00, 0x00,\r\n      // flags\r\n      // ES_Descriptor\r\n      0x03,\r\n      // tag, ES_DescrTag\r\n      0x19,\r\n      // length\r\n      0x00, 0x00,\r\n      // ES_ID\r\n      0x00,\r\n      // streamDependenceFlag, URL_flag, reserved, streamPriority\r\n      // DecoderConfigDescriptor\r\n      0x04,\r\n      // tag, DecoderConfigDescrTag\r\n      0x11,\r\n      // length\r\n      0x40,\r\n      // object type\r\n      0x15,\r\n      // streamType\r\n      0x00, 0x06, 0x00,\r\n      // bufferSizeDB\r\n      0x00, 0x00, 0xda, 0xc0,\r\n      // maxBitrate\r\n      0x00, 0x00, 0xda, 0xc0,\r\n      // avgBitrate\r\n      // DecoderSpecificInfo\r\n      0x05,\r\n      // tag, DecoderSpecificInfoTag\r\n      0x02,\r\n      // length\r\n      // ISO/IEC 14496-3, AudioSpecificConfig\r\n      // for samplingFrequencyIndex see ISO/IEC 13818-7:2006, 8.1.3.2.2, Table 35\r\n      track.audioobjecttype << 3 | track.samplingfrequencyindex >>> 1, track.samplingfrequencyindex << 7 | track.channelcount << 3, 0x06, 0x01, 0x02 // GASpecificConfig\r\n      ]));\r\n    };\r\n    ftyp = function () {\r\n      return box(types.ftyp, MAJOR_BRAND, MINOR_VERSION, MAJOR_BRAND, AVC1_BRAND);\r\n    };\r\n    hdlr = function (type) {\r\n      return box(types.hdlr, HDLR_TYPES[type]);\r\n    };\r\n    mdat = function (data) {\r\n      return box(types.mdat, data);\r\n    };\r\n    mdhd = function (track) {\r\n      var result = new Uint8Array([0x00,\r\n      // version 0\r\n      0x00, 0x00, 0x00,\r\n      // flags\r\n      0x00, 0x00, 0x00, 0x02,\r\n      // creation_time\r\n      0x00, 0x00, 0x00, 0x03,\r\n      // modification_time\r\n      0x00, 0x01, 0x5f, 0x90,\r\n      // timescale, 90,000 \"ticks\" per second\r\n      track.duration >>> 24 & 0xFF, track.duration >>> 16 & 0xFF, track.duration >>> 8 & 0xFF, track.duration & 0xFF,\r\n      // duration\r\n      0x55, 0xc4,\r\n      // 'und' language (undetermined)\r\n      0x00, 0x00]); // Use the sample rate from the track metadata, when it is\r\n      // defined. The sample rate can be parsed out of an ADTS header, for\r\n      // instance.\r\n\r\n      if (track.samplerate) {\r\n        result[12] = track.samplerate >>> 24 & 0xFF;\r\n        result[13] = track.samplerate >>> 16 & 0xFF;\r\n        result[14] = track.samplerate >>> 8 & 0xFF;\r\n        result[15] = track.samplerate & 0xFF;\r\n      }\r\n      return box(types.mdhd, result);\r\n    };\r\n    mdia = function (track) {\r\n      return box(types.mdia, mdhd(track), hdlr(track.type), minf(track));\r\n    };\r\n    mfhd = function (sequenceNumber) {\r\n      return box(types.mfhd, new Uint8Array([0x00, 0x00, 0x00, 0x00,\r\n      // flags\r\n      (sequenceNumber & 0xFF000000) >> 24, (sequenceNumber & 0xFF0000) >> 16, (sequenceNumber & 0xFF00) >> 8, sequenceNumber & 0xFF // sequence_number\r\n      ]));\r\n    };\r\n    minf = function (track) {\r\n      return box(types.minf, track.type === 'video' ? box(types.vmhd, VMHD) : box(types.smhd, SMHD), dinf(), stbl(track));\r\n    };\r\n    moof = function (sequenceNumber, tracks) {\r\n      var trackFragments = [],\r\n        i = tracks.length; // build traf boxes for each track fragment\r\n\r\n      while (i--) {\r\n        trackFragments[i] = traf(tracks[i]);\r\n      }\r\n      return box.apply(null, [types.moof, mfhd(sequenceNumber)].concat(trackFragments));\r\n    };\r\n    /**\r\n     * Returns a movie box.\r\n     * @param tracks {array} the tracks associated with this movie\r\n     * @see ISO/IEC 14496-12:2012(E), section 8.2.1\r\n     */\r\n\r\n    moov = function (tracks) {\r\n      var i = tracks.length,\r\n        boxes = [];\r\n      while (i--) {\r\n        boxes[i] = trak(tracks[i]);\r\n      }\r\n      return box.apply(null, [types.moov, mvhd(0xffffffff)].concat(boxes).concat(mvex(tracks)));\r\n    };\r\n    mvex = function (tracks) {\r\n      var i = tracks.length,\r\n        boxes = [];\r\n      while (i--) {\r\n        boxes[i] = trex(tracks[i]);\r\n      }\r\n      return box.apply(null, [types.mvex].concat(boxes));\r\n    };\r\n    mvhd = function (duration) {\r\n      var bytes = new Uint8Array([0x00,\r\n      // version 0\r\n      0x00, 0x00, 0x00,\r\n      // flags\r\n      0x00, 0x00, 0x00, 0x01,\r\n      // creation_time\r\n      0x00, 0x00, 0x00, 0x02,\r\n      // modification_time\r\n      0x00, 0x01, 0x5f, 0x90,\r\n      // timescale, 90,000 \"ticks\" per second\r\n      (duration & 0xFF000000) >> 24, (duration & 0xFF0000) >> 16, (duration & 0xFF00) >> 8, duration & 0xFF,\r\n      // duration\r\n      0x00, 0x01, 0x00, 0x00,\r\n      // 1.0 rate\r\n      0x01, 0x00,\r\n      // 1.0 volume\r\n      0x00, 0x00,\r\n      // reserved\r\n      0x00, 0x00, 0x00, 0x00,\r\n      // reserved\r\n      0x00, 0x00, 0x00, 0x00,\r\n      // reserved\r\n      0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00,\r\n      // transformation: unity matrix\r\n      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\r\n      // pre_defined\r\n      0xff, 0xff, 0xff, 0xff // next_track_ID\r\n      ]);\r\n      return box(types.mvhd, bytes);\r\n    };\r\n    sdtp = function (track) {\r\n      var samples = track.samples || [],\r\n        bytes = new Uint8Array(4 + samples.length),\r\n        flags,\r\n        i; // leave the full box header (4 bytes) all zero\r\n      // write the sample table\r\n\r\n      for (i = 0; i < samples.length; i++) {\r\n        flags = samples[i].flags;\r\n        bytes[i + 4] = flags.dependsOn << 4 | flags.isDependedOn << 2 | flags.hasRedundancy;\r\n      }\r\n      return box(types.sdtp, bytes);\r\n    };\r\n    stbl = function (track) {\r\n      return box(types.stbl, stsd(track), box(types.stts, STTS), box(types.stsc, STSC), box(types.stsz, STSZ), box(types.stco, STCO));\r\n    };\r\n    (function () {\r\n      var videoSample, audioSample;\r\n      stsd = function (track) {\r\n        return box(types.stsd, new Uint8Array([0x00,\r\n        // version 0\r\n        0x00, 0x00, 0x00,\r\n        // flags\r\n        0x00, 0x00, 0x00, 0x01]), track.type === 'video' ? videoSample(track) : audioSample(track));\r\n      };\r\n      videoSample = function (track) {\r\n        var sps = track.sps || [],\r\n          pps = track.pps || [],\r\n          sequenceParameterSets = [],\r\n          pictureParameterSets = [],\r\n          i,\r\n          avc1Box; // assemble the SPSs\r\n\r\n        for (i = 0; i < sps.length; i++) {\r\n          sequenceParameterSets.push((sps[i].byteLength & 0xFF00) >>> 8);\r\n          sequenceParameterSets.push(sps[i].byteLength & 0xFF); // sequenceParameterSetLength\r\n\r\n          sequenceParameterSets = sequenceParameterSets.concat(Array.prototype.slice.call(sps[i])); // SPS\r\n        } // assemble the PPSs\r\n\r\n        for (i = 0; i < pps.length; i++) {\r\n          pictureParameterSets.push((pps[i].byteLength & 0xFF00) >>> 8);\r\n          pictureParameterSets.push(pps[i].byteLength & 0xFF);\r\n          pictureParameterSets = pictureParameterSets.concat(Array.prototype.slice.call(pps[i]));\r\n        }\r\n        avc1Box = [types.avc1, new Uint8Array([0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\r\n        // reserved\r\n        0x00, 0x01,\r\n        // data_reference_index\r\n        0x00, 0x00,\r\n        // pre_defined\r\n        0x00, 0x00,\r\n        // reserved\r\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\r\n        // pre_defined\r\n        (track.width & 0xff00) >> 8, track.width & 0xff,\r\n        // width\r\n        (track.height & 0xff00) >> 8, track.height & 0xff,\r\n        // height\r\n        0x00, 0x48, 0x00, 0x00,\r\n        // horizresolution\r\n        0x00, 0x48, 0x00, 0x00,\r\n        // vertresolution\r\n        0x00, 0x00, 0x00, 0x00,\r\n        // reserved\r\n        0x00, 0x01,\r\n        // frame_count\r\n        0x13, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x6a, 0x73, 0x2d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x2d, 0x68, 0x6c, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\r\n        // compressorname\r\n        0x00, 0x18,\r\n        // depth = 24\r\n        0x11, 0x11 // pre_defined = -1\r\n        ]), box(types.avcC, new Uint8Array([0x01,\r\n        // configurationVersion\r\n        track.profileIdc,\r\n        // AVCProfileIndication\r\n        track.profileCompatibility,\r\n        // profile_compatibility\r\n        track.levelIdc,\r\n        // AVCLevelIndication\r\n        0xff // lengthSizeMinusOne, hard-coded to 4 bytes\r\n        ].concat([sps.length],\r\n        // numOfSequenceParameterSets\r\n        sequenceParameterSets,\r\n        // \"SPS\"\r\n        [pps.length],\r\n        // numOfPictureParameterSets\r\n        pictureParameterSets // \"PPS\"\r\n        ))), box(types.btrt, new Uint8Array([0x00, 0x1c, 0x9c, 0x80,\r\n        // bufferSizeDB\r\n        0x00, 0x2d, 0xc6, 0xc0,\r\n        // maxBitrate\r\n        0x00, 0x2d, 0xc6, 0xc0 // avgBitrate\r\n        ]))];\r\n        if (track.sarRatio) {\r\n          var hSpacing = track.sarRatio[0],\r\n            vSpacing = track.sarRatio[1];\r\n          avc1Box.push(box(types.pasp, new Uint8Array([(hSpacing & 0xFF000000) >> 24, (hSpacing & 0xFF0000) >> 16, (hSpacing & 0xFF00) >> 8, hSpacing & 0xFF, (vSpacing & 0xFF000000) >> 24, (vSpacing & 0xFF0000) >> 16, (vSpacing & 0xFF00) >> 8, vSpacing & 0xFF])));\r\n        }\r\n        return box.apply(null, avc1Box);\r\n      };\r\n      audioSample = function (track) {\r\n        return box(types.mp4a, new Uint8Array([\r\n        // SampleEntry, ISO/IEC 14496-12\r\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\r\n        // reserved\r\n        0x00, 0x01,\r\n        // data_reference_index\r\n        // AudioSampleEntry, ISO/IEC 14496-12\r\n        0x00, 0x00, 0x00, 0x00,\r\n        // reserved\r\n        0x00, 0x00, 0x00, 0x00,\r\n        // reserved\r\n        (track.channelcount & 0xff00) >> 8, track.channelcount & 0xff,\r\n        // channelcount\r\n        (track.samplesize & 0xff00) >> 8, track.samplesize & 0xff,\r\n        // samplesize\r\n        0x00, 0x00,\r\n        // pre_defined\r\n        0x00, 0x00,\r\n        // reserved\r\n        (track.samplerate & 0xff00) >> 8, track.samplerate & 0xff, 0x00, 0x00 // samplerate, 16.16\r\n        // MP4AudioSampleEntry, ISO/IEC 14496-14\r\n        ]), esds(track));\r\n      };\r\n    })();\r\n    tkhd = function (track) {\r\n      var result = new Uint8Array([0x00,\r\n      // version 0\r\n      0x00, 0x00, 0x07,\r\n      // flags\r\n      0x00, 0x00, 0x00, 0x00,\r\n      // creation_time\r\n      0x00, 0x00, 0x00, 0x00,\r\n      // modification_time\r\n      (track.id & 0xFF000000) >> 24, (track.id & 0xFF0000) >> 16, (track.id & 0xFF00) >> 8, track.id & 0xFF,\r\n      // track_ID\r\n      0x00, 0x00, 0x00, 0x00,\r\n      // reserved\r\n      (track.duration & 0xFF000000) >> 24, (track.duration & 0xFF0000) >> 16, (track.duration & 0xFF00) >> 8, track.duration & 0xFF,\r\n      // duration\r\n      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\r\n      // reserved\r\n      0x00, 0x00,\r\n      // layer\r\n      0x00, 0x00,\r\n      // alternate_group\r\n      0x01, 0x00,\r\n      // non-audio track volume\r\n      0x00, 0x00,\r\n      // reserved\r\n      0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00,\r\n      // transformation: unity matrix\r\n      (track.width & 0xFF00) >> 8, track.width & 0xFF, 0x00, 0x00,\r\n      // width\r\n      (track.height & 0xFF00) >> 8, track.height & 0xFF, 0x00, 0x00 // height\r\n      ]);\r\n      return box(types.tkhd, result);\r\n    };\r\n    /**\r\n     * Generate a track fragment (traf) box. A traf box collects metadata\r\n     * about tracks in a movie fragment (moof) box.\r\n     */\r\n\r\n    traf = function (track) {\r\n      var trackFragmentHeader, trackFragmentDecodeTime, trackFragmentRun, sampleDependencyTable, dataOffset, upperWordBaseMediaDecodeTime, lowerWordBaseMediaDecodeTime;\r\n      trackFragmentHeader = box(types.tfhd, new Uint8Array([0x00,\r\n      // version 0\r\n      0x00, 0x00, 0x3a,\r\n      // flags\r\n      (track.id & 0xFF000000) >> 24, (track.id & 0xFF0000) >> 16, (track.id & 0xFF00) >> 8, track.id & 0xFF,\r\n      // track_ID\r\n      0x00, 0x00, 0x00, 0x01,\r\n      // sample_description_index\r\n      0x00, 0x00, 0x00, 0x00,\r\n      // default_sample_duration\r\n      0x00, 0x00, 0x00, 0x00,\r\n      // default_sample_size\r\n      0x00, 0x00, 0x00, 0x00 // default_sample_flags\r\n      ]));\r\n      upperWordBaseMediaDecodeTime = Math.floor(track.baseMediaDecodeTime / MAX_UINT32);\r\n      lowerWordBaseMediaDecodeTime = Math.floor(track.baseMediaDecodeTime % MAX_UINT32);\r\n      trackFragmentDecodeTime = box(types.tfdt, new Uint8Array([0x01,\r\n      // version 1\r\n      0x00, 0x00, 0x00,\r\n      // flags\r\n      // baseMediaDecodeTime\r\n      upperWordBaseMediaDecodeTime >>> 24 & 0xFF, upperWordBaseMediaDecodeTime >>> 16 & 0xFF, upperWordBaseMediaDecodeTime >>> 8 & 0xFF, upperWordBaseMediaDecodeTime & 0xFF, lowerWordBaseMediaDecodeTime >>> 24 & 0xFF, lowerWordBaseMediaDecodeTime >>> 16 & 0xFF, lowerWordBaseMediaDecodeTime >>> 8 & 0xFF, lowerWordBaseMediaDecodeTime & 0xFF])); // the data offset specifies the number of bytes from the start of\r\n      // the containing moof to the first payload byte of the associated\r\n      // mdat\r\n\r\n      dataOffset = 32 +\r\n      // tfhd\r\n      20 +\r\n      // tfdt\r\n      8 +\r\n      // traf header\r\n      16 +\r\n      // mfhd\r\n      8 +\r\n      // moof header\r\n      8; // mdat header\r\n      // audio tracks require less metadata\r\n\r\n      if (track.type === 'audio') {\r\n        trackFragmentRun = trun$1(track, dataOffset);\r\n        return box(types.traf, trackFragmentHeader, trackFragmentDecodeTime, trackFragmentRun);\r\n      } // video tracks should contain an independent and disposable samples\r\n      // box (sdtp)\r\n      // generate one and adjust offsets to match\r\n\r\n      sampleDependencyTable = sdtp(track);\r\n      trackFragmentRun = trun$1(track, sampleDependencyTable.length + dataOffset);\r\n      return box(types.traf, trackFragmentHeader, trackFragmentDecodeTime, trackFragmentRun, sampleDependencyTable);\r\n    };\r\n    /**\r\n     * Generate a track box.\r\n     * @param track {object} a track definition\r\n     * @return {Uint8Array} the track box\r\n     */\r\n\r\n    trak = function (track) {\r\n      track.duration = track.duration || 0xffffffff;\r\n      return box(types.trak, tkhd(track), mdia(track));\r\n    };\r\n    trex = function (track) {\r\n      var result = new Uint8Array([0x00,\r\n      // version 0\r\n      0x00, 0x00, 0x00,\r\n      // flags\r\n      (track.id & 0xFF000000) >> 24, (track.id & 0xFF0000) >> 16, (track.id & 0xFF00) >> 8, track.id & 0xFF,\r\n      // track_ID\r\n      0x00, 0x00, 0x00, 0x01,\r\n      // default_sample_description_index\r\n      0x00, 0x00, 0x00, 0x00,\r\n      // default_sample_duration\r\n      0x00, 0x00, 0x00, 0x00,\r\n      // default_sample_size\r\n      0x00, 0x01, 0x00, 0x01 // default_sample_flags\r\n      ]); // the last two bytes of default_sample_flags is the sample\r\n      // degradation priority, a hint about the importance of this sample\r\n      // relative to others. Lower the degradation priority for all sample\r\n      // types other than video.\r\n\r\n      if (track.type !== 'video') {\r\n        result[result.length - 1] = 0x00;\r\n      }\r\n      return box(types.trex, result);\r\n    };\r\n    (function () {\r\n      var audioTrun, videoTrun, trunHeader; // This method assumes all samples are uniform. That is, if a\r\n      // duration is present for the first sample, it will be present for\r\n      // all subsequent samples.\r\n      // see ISO/IEC 14496-12:2012, Section 8.8.8.1\r\n\r\n      trunHeader = function (samples, offset) {\r\n        var durationPresent = 0,\r\n          sizePresent = 0,\r\n          flagsPresent = 0,\r\n          compositionTimeOffset = 0; // trun flag constants\r\n\r\n        if (samples.length) {\r\n          if (samples[0].duration !== undefined) {\r\n            durationPresent = 0x1;\r\n          }\r\n          if (samples[0].size !== undefined) {\r\n            sizePresent = 0x2;\r\n          }\r\n          if (samples[0].flags !== undefined) {\r\n            flagsPresent = 0x4;\r\n          }\r\n          if (samples[0].compositionTimeOffset !== undefined) {\r\n            compositionTimeOffset = 0x8;\r\n          }\r\n        }\r\n        return [0x00,\r\n        // version 0\r\n        0x00, durationPresent | sizePresent | flagsPresent | compositionTimeOffset, 0x01,\r\n        // flags\r\n        (samples.length & 0xFF000000) >>> 24, (samples.length & 0xFF0000) >>> 16, (samples.length & 0xFF00) >>> 8, samples.length & 0xFF,\r\n        // sample_count\r\n        (offset & 0xFF000000) >>> 24, (offset & 0xFF0000) >>> 16, (offset & 0xFF00) >>> 8, offset & 0xFF // data_offset\r\n        ];\r\n      };\r\n      videoTrun = function (track, offset) {\r\n        var bytesOffest, bytes, header, samples, sample, i;\r\n        samples = track.samples || [];\r\n        offset += 8 + 12 + 16 * samples.length;\r\n        header = trunHeader(samples, offset);\r\n        bytes = new Uint8Array(header.length + samples.length * 16);\r\n        bytes.set(header);\r\n        bytesOffest = header.length;\r\n        for (i = 0; i < samples.length; i++) {\r\n          sample = samples[i];\r\n          bytes[bytesOffest++] = (sample.duration & 0xFF000000) >>> 24;\r\n          bytes[bytesOffest++] = (sample.duration & 0xFF0000) >>> 16;\r\n          bytes[bytesOffest++] = (sample.duration & 0xFF00) >>> 8;\r\n          bytes[bytesOffest++] = sample.duration & 0xFF; // sample_duration\r\n\r\n          bytes[bytesOffest++] = (sample.size & 0xFF000000) >>> 24;\r\n          bytes[bytesOffest++] = (sample.size & 0xFF0000) >>> 16;\r\n          bytes[bytesOffest++] = (sample.size & 0xFF00) >>> 8;\r\n          bytes[bytesOffest++] = sample.size & 0xFF; // sample_size\r\n\r\n          bytes[bytesOffest++] = sample.flags.isLeading << 2 | sample.flags.dependsOn;\r\n          bytes[bytesOffest++] = sample.flags.isDependedOn << 6 | sample.flags.hasRedundancy << 4 | sample.flags.paddingValue << 1 | sample.flags.isNonSyncSample;\r\n          bytes[bytesOffest++] = sample.flags.degradationPriority & 0xF0 << 8;\r\n          bytes[bytesOffest++] = sample.flags.degradationPriority & 0x0F; // sample_flags\r\n\r\n          bytes[bytesOffest++] = (sample.compositionTimeOffset & 0xFF000000) >>> 24;\r\n          bytes[bytesOffest++] = (sample.compositionTimeOffset & 0xFF0000) >>> 16;\r\n          bytes[bytesOffest++] = (sample.compositionTimeOffset & 0xFF00) >>> 8;\r\n          bytes[bytesOffest++] = sample.compositionTimeOffset & 0xFF; // sample_composition_time_offset\r\n        }\r\n        return box(types.trun, bytes);\r\n      };\r\n      audioTrun = function (track, offset) {\r\n        var bytes, bytesOffest, header, samples, sample, i;\r\n        samples = track.samples || [];\r\n        offset += 8 + 12 + 8 * samples.length;\r\n        header = trunHeader(samples, offset);\r\n        bytes = new Uint8Array(header.length + samples.length * 8);\r\n        bytes.set(header);\r\n        bytesOffest = header.length;\r\n        for (i = 0; i < samples.length; i++) {\r\n          sample = samples[i];\r\n          bytes[bytesOffest++] = (sample.duration & 0xFF000000) >>> 24;\r\n          bytes[bytesOffest++] = (sample.duration & 0xFF0000) >>> 16;\r\n          bytes[bytesOffest++] = (sample.duration & 0xFF00) >>> 8;\r\n          bytes[bytesOffest++] = sample.duration & 0xFF; // sample_duration\r\n\r\n          bytes[bytesOffest++] = (sample.size & 0xFF000000) >>> 24;\r\n          bytes[bytesOffest++] = (sample.size & 0xFF0000) >>> 16;\r\n          bytes[bytesOffest++] = (sample.size & 0xFF00) >>> 8;\r\n          bytes[bytesOffest++] = sample.size & 0xFF; // sample_size\r\n        }\r\n        return box(types.trun, bytes);\r\n      };\r\n      trun$1 = function (track, offset) {\r\n        if (track.type === 'audio') {\r\n          return audioTrun(track, offset);\r\n        }\r\n        return videoTrun(track, offset);\r\n      };\r\n    })();\r\n    var mp4Generator = {\r\n      ftyp: ftyp,\r\n      mdat: mdat,\r\n      moof: moof,\r\n      moov: moov,\r\n      initSegment: function (tracks) {\r\n        var fileType = ftyp(),\r\n          movie = moov(tracks),\r\n          result;\r\n        result = new Uint8Array(fileType.byteLength + movie.byteLength);\r\n        result.set(fileType);\r\n        result.set(movie, fileType.byteLength);\r\n        return result;\r\n      }\r\n    };\r\n    /**\r\n     * mux.js\r\n     *\r\n     * Copyright (c) Brightcove\r\n     * Licensed Apache-2.0 https://github.com/videojs/mux.js/blob/master/LICENSE\r\n     */\r\n    // composed of the nal units that make up that frame\r\n    // Also keep track of cummulative data about the frame from the nal units such\r\n    // as the frame duration, starting pts, etc.\r\n\r\n    var groupNalsIntoFrames = function (nalUnits) {\r\n      var i,\r\n        currentNal,\r\n        currentFrame = [],\r\n        frames = []; // TODO added for LHLS, make sure this is OK\r\n\r\n      frames.byteLength = 0;\r\n      frames.nalCount = 0;\r\n      frames.duration = 0;\r\n      currentFrame.byteLength = 0;\r\n      for (i = 0; i < nalUnits.length; i++) {\r\n        currentNal = nalUnits[i]; // Split on 'aud'-type nal units\r\n\r\n        if (currentNal.nalUnitType === 'access_unit_delimiter_rbsp') {\r\n          // Since the very first nal unit is expected to be an AUD\r\n          // only push to the frames array when currentFrame is not empty\r\n          if (currentFrame.length) {\r\n            currentFrame.duration = currentNal.dts - currentFrame.dts; // TODO added for LHLS, make sure this is OK\r\n\r\n            frames.byteLength += currentFrame.byteLength;\r\n            frames.nalCount += currentFrame.length;\r\n            frames.duration += currentFrame.duration;\r\n            frames.push(currentFrame);\r\n          }\r\n          currentFrame = [currentNal];\r\n          currentFrame.byteLength = currentNal.data.byteLength;\r\n          currentFrame.pts = currentNal.pts;\r\n          currentFrame.dts = currentNal.dts;\r\n        } else {\r\n          // Specifically flag key frames for ease of use later\r\n          if (currentNal.nalUnitType === 'slice_layer_without_partitioning_rbsp_idr') {\r\n            currentFrame.keyFrame = true;\r\n          }\r\n          currentFrame.duration = currentNal.dts - currentFrame.dts;\r\n          currentFrame.byteLength += currentNal.data.byteLength;\r\n          currentFrame.push(currentNal);\r\n        }\r\n      } // For the last frame, use the duration of the previous frame if we\r\n      // have nothing better to go on\r\n\r\n      if (frames.length && (!currentFrame.duration || currentFrame.duration <= 0)) {\r\n        currentFrame.duration = frames[frames.length - 1].duration;\r\n      } // Push the final frame\r\n      // TODO added for LHLS, make sure this is OK\r\n\r\n      frames.byteLength += currentFrame.byteLength;\r\n      frames.nalCount += currentFrame.length;\r\n      frames.duration += currentFrame.duration;\r\n      frames.push(currentFrame);\r\n      return frames;\r\n    }; // Convert an array of frames into an array of Gop with each Gop being composed\r\n    // of the frames that make up that Gop\r\n    // Also keep track of cummulative data about the Gop from the frames such as the\r\n    // Gop duration, starting pts, etc.\r\n\r\n    var groupFramesIntoGops = function (frames) {\r\n      var i,\r\n        currentFrame,\r\n        currentGop = [],\r\n        gops = []; // We must pre-set some of the values on the Gop since we\r\n      // keep running totals of these values\r\n\r\n      currentGop.byteLength = 0;\r\n      currentGop.nalCount = 0;\r\n      currentGop.duration = 0;\r\n      currentGop.pts = frames[0].pts;\r\n      currentGop.dts = frames[0].dts; // store some metadata about all the Gops\r\n\r\n      gops.byteLength = 0;\r\n      gops.nalCount = 0;\r\n      gops.duration = 0;\r\n      gops.pts = frames[0].pts;\r\n      gops.dts = frames[0].dts;\r\n      for (i = 0; i < frames.length; i++) {\r\n        currentFrame = frames[i];\r\n        if (currentFrame.keyFrame) {\r\n          // Since the very first frame is expected to be an keyframe\r\n          // only push to the gops array when currentGop is not empty\r\n          if (currentGop.length) {\r\n            gops.push(currentGop);\r\n            gops.byteLength += currentGop.byteLength;\r\n            gops.nalCount += currentGop.nalCount;\r\n            gops.duration += currentGop.duration;\r\n          }\r\n          currentGop = [currentFrame];\r\n          currentGop.nalCount = currentFrame.length;\r\n          currentGop.byteLength = currentFrame.byteLength;\r\n          currentGop.pts = currentFrame.pts;\r\n          currentGop.dts = currentFrame.dts;\r\n          currentGop.duration = currentFrame.duration;\r\n        } else {\r\n          currentGop.duration += currentFrame.duration;\r\n          currentGop.nalCount += currentFrame.length;\r\n          currentGop.byteLength += currentFrame.byteLength;\r\n          currentGop.push(currentFrame);\r\n        }\r\n      }\r\n      if (gops.length && currentGop.duration <= 0) {\r\n        currentGop.duration = gops[gops.length - 1].duration;\r\n      }\r\n      gops.byteLength += currentGop.byteLength;\r\n      gops.nalCount += currentGop.nalCount;\r\n      gops.duration += currentGop.duration; // push the final Gop\r\n\r\n      gops.push(currentGop);\r\n      return gops;\r\n    };\r\n    /*\r\n     * Search for the first keyframe in the GOPs and throw away all frames\r\n     * until that keyframe. Then extend the duration of the pulled keyframe\r\n     * and pull the PTS and DTS of the keyframe so that it covers the time\r\n     * range of the frames that were disposed.\r\n     *\r\n     * @param {Array} gops video GOPs\r\n     * @returns {Array} modified video GOPs\r\n     */\r\n\r\n    var extendFirstKeyFrame = function (gops) {\r\n      var currentGop;\r\n      if (!gops[0][0].keyFrame && gops.length > 1) {\r\n        // Remove the first GOP\r\n        currentGop = gops.shift();\r\n        gops.byteLength -= currentGop.byteLength;\r\n        gops.nalCount -= currentGop.nalCount; // Extend the first frame of what is now the\r\n        // first gop to cover the time period of the\r\n        // frames we just removed\r\n\r\n        gops[0][0].dts = currentGop.dts;\r\n        gops[0][0].pts = currentGop.pts;\r\n        gops[0][0].duration += currentGop.duration;\r\n      }\r\n      return gops;\r\n    };\r\n    /**\r\n     * Default sample object\r\n     * see ISO/IEC 14496-12:2012, section 8.6.4.3\r\n     */\r\n\r\n    var createDefaultSample = function () {\r\n      return {\r\n        size: 0,\r\n        flags: {\r\n          isLeading: 0,\r\n          dependsOn: 1,\r\n          isDependedOn: 0,\r\n          hasRedundancy: 0,\r\n          degradationPriority: 0,\r\n          isNonSyncSample: 1\r\n        }\r\n      };\r\n    };\r\n    /*\r\n     * Collates information from a video frame into an object for eventual\r\n     * entry into an MP4 sample table.\r\n     *\r\n     * @param {Object} frame the video frame\r\n     * @param {Number} dataOffset the byte offset to position the sample\r\n     * @return {Object} object containing sample table info for a frame\r\n     */\r\n\r\n    var sampleForFrame = function (frame, dataOffset) {\r\n      var sample = createDefaultSample();\r\n      sample.dataOffset = dataOffset;\r\n      sample.compositionTimeOffset = frame.pts - frame.dts;\r\n      sample.duration = frame.duration;\r\n      sample.size = 4 * frame.length; // Space for nal unit size\r\n\r\n      sample.size += frame.byteLength;\r\n      if (frame.keyFrame) {\r\n        sample.flags.dependsOn = 2;\r\n        sample.flags.isNonSyncSample = 0;\r\n      }\r\n      return sample;\r\n    }; // generate the track's sample table from an array of gops\r\n\r\n    var generateSampleTable$1 = function (gops, baseDataOffset) {\r\n      var h,\r\n        i,\r\n        sample,\r\n        currentGop,\r\n        currentFrame,\r\n        dataOffset = baseDataOffset || 0,\r\n        samples = [];\r\n      for (h = 0; h < gops.length; h++) {\r\n        currentGop = gops[h];\r\n        for (i = 0; i < currentGop.length; i++) {\r\n          currentFrame = currentGop[i];\r\n          sample = sampleForFrame(currentFrame, dataOffset);\r\n          dataOffset += sample.size;\r\n          samples.push(sample);\r\n        }\r\n      }\r\n      return samples;\r\n    }; // generate the track's raw mdat data from an array of gops\r\n\r\n    var concatenateNalData = function (gops) {\r\n      var h,\r\n        i,\r\n        j,\r\n        currentGop,\r\n        currentFrame,\r\n        currentNal,\r\n        dataOffset = 0,\r\n        nalsByteLength = gops.byteLength,\r\n        numberOfNals = gops.nalCount,\r\n        totalByteLength = nalsByteLength + 4 * numberOfNals,\r\n        data = new Uint8Array(totalByteLength),\r\n        view = new DataView(data.buffer); // For each Gop..\r\n\r\n      for (h = 0; h < gops.length; h++) {\r\n        currentGop = gops[h]; // For each Frame..\r\n\r\n        for (i = 0; i < currentGop.length; i++) {\r\n          currentFrame = currentGop[i]; // For each NAL..\r\n\r\n          for (j = 0; j < currentFrame.length; j++) {\r\n            currentNal = currentFrame[j];\r\n            view.setUint32(dataOffset, currentNal.data.byteLength);\r\n            dataOffset += 4;\r\n            data.set(currentNal.data, dataOffset);\r\n            dataOffset += currentNal.data.byteLength;\r\n          }\r\n        }\r\n      }\r\n      return data;\r\n    }; // generate the track's sample table from a frame\r\n\r\n    var generateSampleTableForFrame = function (frame, baseDataOffset) {\r\n      var sample,\r\n        dataOffset = baseDataOffset || 0,\r\n        samples = [];\r\n      sample = sampleForFrame(frame, dataOffset);\r\n      samples.push(sample);\r\n      return samples;\r\n    }; // generate the track's raw mdat data from a frame\r\n\r\n    var concatenateNalDataForFrame = function (frame) {\r\n      var i,\r\n        currentNal,\r\n        dataOffset = 0,\r\n        nalsByteLength = frame.byteLength,\r\n        numberOfNals = frame.length,\r\n        totalByteLength = nalsByteLength + 4 * numberOfNals,\r\n        data = new Uint8Array(totalByteLength),\r\n        view = new DataView(data.buffer); // For each NAL..\r\n\r\n      for (i = 0; i < frame.length; i++) {\r\n        currentNal = frame[i];\r\n        view.setUint32(dataOffset, currentNal.data.byteLength);\r\n        dataOffset += 4;\r\n        data.set(currentNal.data, dataOffset);\r\n        dataOffset += currentNal.data.byteLength;\r\n      }\r\n      return data;\r\n    };\r\n    var frameUtils$1 = {\r\n      groupNalsIntoFrames: groupNalsIntoFrames,\r\n      groupFramesIntoGops: groupFramesIntoGops,\r\n      extendFirstKeyFrame: extendFirstKeyFrame,\r\n      generateSampleTable: generateSampleTable$1,\r\n      concatenateNalData: concatenateNalData,\r\n      generateSampleTableForFrame: generateSampleTableForFrame,\r\n      concatenateNalDataForFrame: concatenateNalDataForFrame\r\n    };\r\n    /**\r\n     * mux.js\r\n     *\r\n     * Copyright (c) Brightcove\r\n     * Licensed Apache-2.0 https://github.com/videojs/mux.js/blob/master/LICENSE\r\n     */\r\n\r\n    var highPrefix = [33, 16, 5, 32, 164, 27];\r\n    var lowPrefix = [33, 65, 108, 84, 1, 2, 4, 8, 168, 2, 4, 8, 17, 191, 252];\r\n    var zeroFill = function (count) {\r\n      var a = [];\r\n      while (count--) {\r\n        a.push(0);\r\n      }\r\n      return a;\r\n    };\r\n    var makeTable = function (metaTable) {\r\n      return Object.keys(metaTable).reduce(function (obj, key) {\r\n        obj[key] = new Uint8Array(metaTable[key].reduce(function (arr, part) {\r\n          return arr.concat(part);\r\n        }, []));\r\n        return obj;\r\n      }, {});\r\n    };\r\n    var silence;\r\n    var silence_1 = function () {\r\n      if (!silence) {\r\n        // Frames-of-silence to use for filling in missing AAC frames\r\n        var coneOfSilence = {\r\n          96000: [highPrefix, [227, 64], zeroFill(154), [56]],\r\n          88200: [highPrefix, [231], zeroFill(170), [56]],\r\n          64000: [highPrefix, [248, 192], zeroFill(240), [56]],\r\n          48000: [highPrefix, [255, 192], zeroFill(268), [55, 148, 128], zeroFill(54), [112]],\r\n          44100: [highPrefix, [255, 192], zeroFill(268), [55, 163, 128], zeroFill(84), [112]],\r\n          32000: [highPrefix, [255, 192], zeroFill(268), [55, 234], zeroFill(226), [112]],\r\n          24000: [highPrefix, [255, 192], zeroFill(268), [55, 255, 128], zeroFill(268), [111, 112], zeroFill(126), [224]],\r\n          16000: [highPrefix, [255, 192], zeroFill(268), [55, 255, 128], zeroFill(268), [111, 255], zeroFill(269), [223, 108], zeroFill(195), [1, 192]],\r\n          12000: [lowPrefix, zeroFill(268), [3, 127, 248], zeroFill(268), [6, 255, 240], zeroFill(268), [13, 255, 224], zeroFill(268), [27, 253, 128], zeroFill(259), [56]],\r\n          11025: [lowPrefix, zeroFill(268), [3, 127, 248], zeroFill(268), [6, 255, 240], zeroFill(268), [13, 255, 224], zeroFill(268), [27, 255, 192], zeroFill(268), [55, 175, 128], zeroFill(108), [112]],\r\n          8000: [lowPrefix, zeroFill(268), [3, 121, 16], zeroFill(47), [7]]\r\n        };\r\n        silence = makeTable(coneOfSilence);\r\n      }\r\n      return silence;\r\n    };\r\n    /**\r\n     * mux.js\r\n     *\r\n     * Copyright (c) Brightcove\r\n     * Licensed Apache-2.0 https://github.com/videojs/mux.js/blob/master/LICENSE\r\n     */\r\n\r\n    var ONE_SECOND_IN_TS$4 = 90000,\r\n      // 90kHz clock\r\n      secondsToVideoTs,\r\n      secondsToAudioTs,\r\n      videoTsToSeconds,\r\n      audioTsToSeconds,\r\n      audioTsToVideoTs,\r\n      videoTsToAudioTs,\r\n      metadataTsToSeconds;\r\n    secondsToVideoTs = function (seconds) {\r\n      return seconds * ONE_SECOND_IN_TS$4;\r\n    };\r\n    secondsToAudioTs = function (seconds, sampleRate) {\r\n      return seconds * sampleRate;\r\n    };\r\n    videoTsToSeconds = function (timestamp) {\r\n      return timestamp / ONE_SECOND_IN_TS$4;\r\n    };\r\n    audioTsToSeconds = function (timestamp, sampleRate) {\r\n      return timestamp / sampleRate;\r\n    };\r\n    audioTsToVideoTs = function (timestamp, sampleRate) {\r\n      return secondsToVideoTs(audioTsToSeconds(timestamp, sampleRate));\r\n    };\r\n    videoTsToAudioTs = function (timestamp, sampleRate) {\r\n      return secondsToAudioTs(videoTsToSeconds(timestamp), sampleRate);\r\n    };\r\n    /**\r\n     * Adjust ID3 tag or caption timing information by the timeline pts values\r\n     * (if keepOriginalTimestamps is false) and convert to seconds\r\n     */\r\n\r\n    metadataTsToSeconds = function (timestamp, timelineStartPts, keepOriginalTimestamps) {\r\n      return videoTsToSeconds(keepOriginalTimestamps ? timestamp : timestamp - timelineStartPts);\r\n    };\r\n    var clock$2 = {\r\n      ONE_SECOND_IN_TS: ONE_SECOND_IN_TS$4,\r\n      secondsToVideoTs: secondsToVideoTs,\r\n      secondsToAudioTs: secondsToAudioTs,\r\n      videoTsToSeconds: videoTsToSeconds,\r\n      audioTsToSeconds: audioTsToSeconds,\r\n      audioTsToVideoTs: audioTsToVideoTs,\r\n      videoTsToAudioTs: videoTsToAudioTs,\r\n      metadataTsToSeconds: metadataTsToSeconds\r\n    };\r\n    /**\r\n     * mux.js\r\n     *\r\n     * Copyright (c) Brightcove\r\n     * Licensed Apache-2.0 https://github.com/videojs/mux.js/blob/master/LICENSE\r\n     */\r\n\r\n    var coneOfSilence = silence_1;\r\n    var clock$1 = clock$2;\r\n    /**\r\n     * Sum the `byteLength` properties of the data in each AAC frame\r\n     */\r\n\r\n    var sumFrameByteLengths = function (array) {\r\n      var i,\r\n        currentObj,\r\n        sum = 0; // sum the byteLength's all each nal unit in the frame\r\n\r\n      for (i = 0; i < array.length; i++) {\r\n        currentObj = array[i];\r\n        sum += currentObj.data.byteLength;\r\n      }\r\n      return sum;\r\n    }; // Possibly pad (prefix) the audio track with silence if appending this track\r\n    // would lead to the introduction of a gap in the audio buffer\r\n\r\n    var prefixWithSilence = function (track, frames, audioAppendStartTs, videoBaseMediaDecodeTime) {\r\n      var baseMediaDecodeTimeTs,\r\n        frameDuration = 0,\r\n        audioGapDuration = 0,\r\n        audioFillFrameCount = 0,\r\n        audioFillDuration = 0,\r\n        silentFrame,\r\n        i,\r\n        firstFrame;\r\n      if (!frames.length) {\r\n        return;\r\n      }\r\n      baseMediaDecodeTimeTs = clock$1.audioTsToVideoTs(track.baseMediaDecodeTime, track.samplerate); // determine frame clock duration based on sample rate, round up to avoid overfills\r\n\r\n      frameDuration = Math.ceil(clock$1.ONE_SECOND_IN_TS / (track.samplerate / 1024));\r\n      if (audioAppendStartTs && videoBaseMediaDecodeTime) {\r\n        // insert the shortest possible amount (audio gap or audio to video gap)\r\n        audioGapDuration = baseMediaDecodeTimeTs - Math.max(audioAppendStartTs, videoBaseMediaDecodeTime); // number of full frames in the audio gap\r\n\r\n        audioFillFrameCount = Math.floor(audioGapDuration / frameDuration);\r\n        audioFillDuration = audioFillFrameCount * frameDuration;\r\n      } // don't attempt to fill gaps smaller than a single frame or larger\r\n      // than a half second\r\n\r\n      if (audioFillFrameCount < 1 || audioFillDuration > clock$1.ONE_SECOND_IN_TS / 2) {\r\n        return;\r\n      }\r\n      silentFrame = coneOfSilence()[track.samplerate];\r\n      if (!silentFrame) {\r\n        // we don't have a silent frame pregenerated for the sample rate, so use a frame\r\n        // from the content instead\r\n        silentFrame = frames[0].data;\r\n      }\r\n      for (i = 0; i < audioFillFrameCount; i++) {\r\n        firstFrame = frames[0];\r\n        frames.splice(0, 0, {\r\n          data: silentFrame,\r\n          dts: firstFrame.dts - frameDuration,\r\n          pts: firstFrame.pts - frameDuration\r\n        });\r\n      }\r\n      track.baseMediaDecodeTime -= Math.floor(clock$1.videoTsToAudioTs(audioFillDuration, track.samplerate));\r\n      return audioFillDuration;\r\n    }; // If the audio segment extends before the earliest allowed dts\r\n    // value, remove AAC frames until starts at or after the earliest\r\n    // allowed DTS so that we don't end up with a negative baseMedia-\r\n    // DecodeTime for the audio track\r\n\r\n    var trimAdtsFramesByEarliestDts = function (adtsFrames, track, earliestAllowedDts) {\r\n      if (track.minSegmentDts >= earliestAllowedDts) {\r\n        return adtsFrames;\r\n      } // We will need to recalculate the earliest segment Dts\r\n\r\n      track.minSegmentDts = Infinity;\r\n      return adtsFrames.filter(function (currentFrame) {\r\n        // If this is an allowed frame, keep it and record it's Dts\r\n        if (currentFrame.dts >= earliestAllowedDts) {\r\n          track.minSegmentDts = Math.min(track.minSegmentDts, currentFrame.dts);\r\n          track.minSegmentPts = track.minSegmentDts;\r\n          return true;\r\n        } // Otherwise, discard it\r\n\r\n        return false;\r\n      });\r\n    }; // generate the track's raw mdat data from an array of frames\r\n\r\n    var generateSampleTable = function (frames) {\r\n      var i,\r\n        currentFrame,\r\n        samples = [];\r\n      for (i = 0; i < frames.length; i++) {\r\n        currentFrame = frames[i];\r\n        samples.push({\r\n          size: currentFrame.data.byteLength,\r\n          duration: 1024 // For AAC audio, all samples contain 1024 samples\r\n        });\r\n      }\r\n      return samples;\r\n    }; // generate the track's sample table from an array of frames\r\n\r\n    var concatenateFrameData = function (frames) {\r\n      var i,\r\n        currentFrame,\r\n        dataOffset = 0,\r\n        data = new Uint8Array(sumFrameByteLengths(frames));\r\n      for (i = 0; i < frames.length; i++) {\r\n        currentFrame = frames[i];\r\n        data.set(currentFrame.data, dataOffset);\r\n        dataOffset += currentFrame.data.byteLength;\r\n      }\r\n      return data;\r\n    };\r\n    var audioFrameUtils$1 = {\r\n      prefixWithSilence: prefixWithSilence,\r\n      trimAdtsFramesByEarliestDts: trimAdtsFramesByEarliestDts,\r\n      generateSampleTable: generateSampleTable,\r\n      concatenateFrameData: concatenateFrameData\r\n    };\r\n    /**\r\n     * mux.js\r\n     *\r\n     * Copyright (c) Brightcove\r\n     * Licensed Apache-2.0 https://github.com/videojs/mux.js/blob/master/LICENSE\r\n     */\r\n\r\n    var ONE_SECOND_IN_TS$3 = clock$2.ONE_SECOND_IN_TS;\r\n    /**\r\n     * Store information about the start and end of the track and the\r\n     * duration for each frame/sample we process in order to calculate\r\n     * the baseMediaDecodeTime\r\n     */\r\n\r\n    var collectDtsInfo = function (track, data) {\r\n      if (typeof data.pts === 'number') {\r\n        if (track.timelineStartInfo.pts === undefined) {\r\n          track.timelineStartInfo.pts = data.pts;\r\n        }\r\n        if (track.minSegmentPts === undefined) {\r\n          track.minSegmentPts = data.pts;\r\n        } else {\r\n          track.minSegmentPts = Math.min(track.minSegmentPts, data.pts);\r\n        }\r\n        if (track.maxSegmentPts === undefined) {\r\n          track.maxSegmentPts = data.pts;\r\n        } else {\r\n          track.maxSegmentPts = Math.max(track.maxSegmentPts, data.pts);\r\n        }\r\n      }\r\n      if (typeof data.dts === 'number') {\r\n        if (track.timelineStartInfo.dts === undefined) {\r\n          track.timelineStartInfo.dts = data.dts;\r\n        }\r\n        if (track.minSegmentDts === undefined) {\r\n          track.minSegmentDts = data.dts;\r\n        } else {\r\n          track.minSegmentDts = Math.min(track.minSegmentDts, data.dts);\r\n        }\r\n        if (track.maxSegmentDts === undefined) {\r\n          track.maxSegmentDts = data.dts;\r\n        } else {\r\n          track.maxSegmentDts = Math.max(track.maxSegmentDts, data.dts);\r\n        }\r\n      }\r\n    };\r\n    /**\r\n     * Clear values used to calculate the baseMediaDecodeTime between\r\n     * tracks\r\n     */\r\n\r\n    var clearDtsInfo = function (track) {\r\n      delete track.minSegmentDts;\r\n      delete track.maxSegmentDts;\r\n      delete track.minSegmentPts;\r\n      delete track.maxSegmentPts;\r\n    };\r\n    /**\r\n     * Calculate the track's baseMediaDecodeTime based on the earliest\r\n     * DTS the transmuxer has ever seen and the minimum DTS for the\r\n     * current track\r\n     * @param track {object} track metadata configuration\r\n     * @param keepOriginalTimestamps {boolean} If true, keep the timestamps\r\n     *        in the source; false to adjust the first segment to start at 0.\r\n     */\r\n\r\n    var calculateTrackBaseMediaDecodeTime = function (track, keepOriginalTimestamps) {\r\n      var baseMediaDecodeTime,\r\n        scale,\r\n        minSegmentDts = track.minSegmentDts; // Optionally adjust the time so the first segment starts at zero.\r\n\r\n      if (!keepOriginalTimestamps) {\r\n        minSegmentDts -= track.timelineStartInfo.dts;\r\n      } // track.timelineStartInfo.baseMediaDecodeTime is the location, in time, where\r\n      // we want the start of the first segment to be placed\r\n\r\n      baseMediaDecodeTime = track.timelineStartInfo.baseMediaDecodeTime; // Add to that the distance this segment is from the very first\r\n\r\n      baseMediaDecodeTime += minSegmentDts; // baseMediaDecodeTime must not become negative\r\n\r\n      baseMediaDecodeTime = Math.max(0, baseMediaDecodeTime);\r\n      if (track.type === 'audio') {\r\n        // Audio has a different clock equal to the sampling_rate so we need to\r\n        // scale the PTS values into the clock rate of the track\r\n        scale = track.samplerate / ONE_SECOND_IN_TS$3;\r\n        baseMediaDecodeTime *= scale;\r\n        baseMediaDecodeTime = Math.floor(baseMediaDecodeTime);\r\n      }\r\n      return baseMediaDecodeTime;\r\n    };\r\n    var trackDecodeInfo$1 = {\r\n      clearDtsInfo: clearDtsInfo,\r\n      calculateTrackBaseMediaDecodeTime: calculateTrackBaseMediaDecodeTime,\r\n      collectDtsInfo: collectDtsInfo\r\n    };\r\n    /**\r\n     * mux.js\r\n     *\r\n     * Copyright (c) Brightcove\r\n     * Licensed Apache-2.0 https://github.com/videojs/mux.js/blob/master/LICENSE\r\n     *\r\n     * Reads in-band caption information from a video elementary\r\n     * stream. Captions must follow the CEA-708 standard for injection\r\n     * into an MPEG-2 transport streams.\r\n     * @see https://en.wikipedia.org/wiki/CEA-708\r\n     * @see https://www.gpo.gov/fdsys/pkg/CFR-2007-title47-vol1/pdf/CFR-2007-title47-vol1-sec15-119.pdf\r\n     */\r\n    // payload type field to indicate how they are to be\r\n    // interpreted. CEAS-708 caption content is always transmitted with\r\n    // payload type 0x04.\r\n\r\n    var USER_DATA_REGISTERED_ITU_T_T35 = 4,\r\n      RBSP_TRAILING_BITS = 128;\r\n    /**\r\n      * Parse a supplemental enhancement information (SEI) NAL unit.\r\n      * Stops parsing once a message of type ITU T T35 has been found.\r\n      *\r\n      * @param bytes {Uint8Array} the bytes of a SEI NAL unit\r\n      * @return {object} the parsed SEI payload\r\n      * @see Rec. ITU-T H.264, 7.3.2.3.1\r\n      */\r\n\r\n    var parseSei = function (bytes) {\r\n      var i = 0,\r\n        result = {\r\n          payloadType: -1,\r\n          payloadSize: 0\r\n        },\r\n        payloadType = 0,\r\n        payloadSize = 0; // go through the sei_rbsp parsing each each individual sei_message\r\n\r\n      while (i < bytes.byteLength) {\r\n        // stop once we have hit the end of the sei_rbsp\r\n        if (bytes[i] === RBSP_TRAILING_BITS) {\r\n          break;\r\n        } // Parse payload type\r\n\r\n        while (bytes[i] === 0xFF) {\r\n          payloadType += 255;\r\n          i++;\r\n        }\r\n        payloadType += bytes[i++]; // Parse payload size\r\n\r\n        while (bytes[i] === 0xFF) {\r\n          payloadSize += 255;\r\n          i++;\r\n        }\r\n        payloadSize += bytes[i++]; // this sei_message is a 608/708 caption so save it and break\r\n        // there can only ever be one caption message in a frame's sei\r\n\r\n        if (!result.payload && payloadType === USER_DATA_REGISTERED_ITU_T_T35) {\r\n          var userIdentifier = String.fromCharCode(bytes[i + 3], bytes[i + 4], bytes[i + 5], bytes[i + 6]);\r\n          if (userIdentifier === 'GA94') {\r\n            result.payloadType = payloadType;\r\n            result.payloadSize = payloadSize;\r\n            result.payload = bytes.subarray(i, i + payloadSize);\r\n            break;\r\n          } else {\r\n            result.payload = void 0;\r\n          }\r\n        } // skip the payload and parse the next message\r\n\r\n        i += payloadSize;\r\n        payloadType = 0;\r\n        payloadSize = 0;\r\n      }\r\n      return result;\r\n    }; // see ANSI/SCTE 128-1 (2013), section 8.1\r\n\r\n    var parseUserData = function (sei) {\r\n      // itu_t_t35_contry_code must be 181 (United States) for\r\n      // captions\r\n      if (sei.payload[0] !== 181) {\r\n        return null;\r\n      } // itu_t_t35_provider_code should be 49 (ATSC) for captions\r\n\r\n      if ((sei.payload[1] << 8 | sei.payload[2]) !== 49) {\r\n        return null;\r\n      } // the user_identifier should be \"GA94\" to indicate ATSC1 data\r\n\r\n      if (String.fromCharCode(sei.payload[3], sei.payload[4], sei.payload[5], sei.payload[6]) !== 'GA94') {\r\n        return null;\r\n      } // finally, user_data_type_code should be 0x03 for caption data\r\n\r\n      if (sei.payload[7] !== 0x03) {\r\n        return null;\r\n      } // return the user_data_type_structure and strip the trailing\r\n      // marker bits\r\n\r\n      return sei.payload.subarray(8, sei.payload.length - 1);\r\n    }; // see CEA-708-D, section 4.4\r\n\r\n    var parseCaptionPackets = function (pts, userData) {\r\n      var results = [],\r\n        i,\r\n        count,\r\n        offset,\r\n        data; // if this is just filler, return immediately\r\n\r\n      if (!(userData[0] & 0x40)) {\r\n        return results;\r\n      } // parse out the cc_data_1 and cc_data_2 fields\r\n\r\n      count = userData[0] & 0x1f;\r\n      for (i = 0; i < count; i++) {\r\n        offset = i * 3;\r\n        data = {\r\n          type: userData[offset + 2] & 0x03,\r\n          pts: pts\r\n        }; // capture cc data when cc_valid is 1\r\n\r\n        if (userData[offset + 2] & 0x04) {\r\n          data.ccData = userData[offset + 3] << 8 | userData[offset + 4];\r\n          results.push(data);\r\n        }\r\n      }\r\n      return results;\r\n    };\r\n    var discardEmulationPreventionBytes$1 = function (data) {\r\n      var length = data.byteLength,\r\n        emulationPreventionBytesPositions = [],\r\n        i = 1,\r\n        newLength,\r\n        newData; // Find all `Emulation Prevention Bytes`\r\n\r\n      while (i < length - 2) {\r\n        if (data[i] === 0 && data[i + 1] === 0 && data[i + 2] === 0x03) {\r\n          emulationPreventionBytesPositions.push(i + 2);\r\n          i += 2;\r\n        } else {\r\n          i++;\r\n        }\r\n      } // If no Emulation Prevention Bytes were found just return the original\r\n      // array\r\n\r\n      if (emulationPreventionBytesPositions.length === 0) {\r\n        return data;\r\n      } // Create a new array to hold the NAL unit data\r\n\r\n      newLength = length - emulationPreventionBytesPositions.length;\r\n      newData = new Uint8Array(newLength);\r\n      var sourceIndex = 0;\r\n      for (i = 0; i < newLength; sourceIndex++, i++) {\r\n        if (sourceIndex === emulationPreventionBytesPositions[0]) {\r\n          // Skip this byte\r\n          sourceIndex++; // Remove this position index\r\n\r\n          emulationPreventionBytesPositions.shift();\r\n        }\r\n        newData[i] = data[sourceIndex];\r\n      }\r\n      return newData;\r\n    }; // exports\r\n\r\n    var captionPacketParser = {\r\n      parseSei: parseSei,\r\n      parseUserData: parseUserData,\r\n      parseCaptionPackets: parseCaptionPackets,\r\n      discardEmulationPreventionBytes: discardEmulationPreventionBytes$1,\r\n      USER_DATA_REGISTERED_ITU_T_T35: USER_DATA_REGISTERED_ITU_T_T35\r\n    };\r\n    /**\r\n     * mux.js\r\n     *\r\n     * Copyright (c) Brightcove\r\n     * Licensed Apache-2.0 https://github.com/videojs/mux.js/blob/master/LICENSE\r\n     *\r\n     * Reads in-band caption information from a video elementary\r\n     * stream. Captions must follow the CEA-708 standard for injection\r\n     * into an MPEG-2 transport streams.\r\n     * @see https://en.wikipedia.org/wiki/CEA-708\r\n     * @see https://www.gpo.gov/fdsys/pkg/CFR-2007-title47-vol1/pdf/CFR-2007-title47-vol1-sec15-119.pdf\r\n     */\r\n    // Link To Transport\r\n    // -----------------\r\n\r\n    var Stream$7 = stream;\r\n    var cea708Parser = captionPacketParser;\r\n    var CaptionStream$2 = function (options) {\r\n      options = options || {};\r\n      CaptionStream$2.prototype.init.call(this); // parse708captions flag, default to true\r\n\r\n      this.parse708captions_ = typeof options.parse708captions === 'boolean' ? options.parse708captions : true;\r\n      this.captionPackets_ = [];\r\n      this.ccStreams_ = [new Cea608Stream(0, 0),\r\n      // eslint-disable-line no-use-before-define\r\n      new Cea608Stream(0, 1),\r\n      // eslint-disable-line no-use-before-define\r\n      new Cea608Stream(1, 0),\r\n      // eslint-disable-line no-use-before-define\r\n      new Cea608Stream(1, 1) // eslint-disable-line no-use-before-define\r\n      ];\r\n      if (this.parse708captions_) {\r\n        this.cc708Stream_ = new Cea708Stream({\r\n          captionServices: options.captionServices\r\n        }); // eslint-disable-line no-use-before-define\r\n      }\r\n      this.reset(); // forward data and done events from CCs to this CaptionStream\r\n\r\n      this.ccStreams_.forEach(function (cc) {\r\n        cc.on('data', this.trigger.bind(this, 'data'));\r\n        cc.on('partialdone', this.trigger.bind(this, 'partialdone'));\r\n        cc.on('done', this.trigger.bind(this, 'done'));\r\n      }, this);\r\n      if (this.parse708captions_) {\r\n        this.cc708Stream_.on('data', this.trigger.bind(this, 'data'));\r\n        this.cc708Stream_.on('partialdone', this.trigger.bind(this, 'partialdone'));\r\n        this.cc708Stream_.on('done', this.trigger.bind(this, 'done'));\r\n      }\r\n    };\r\n    CaptionStream$2.prototype = new Stream$7();\r\n    CaptionStream$2.prototype.push = function (event) {\r\n      var sei, userData, newCaptionPackets; // only examine SEI NALs\r\n\r\n      if (event.nalUnitType !== 'sei_rbsp') {\r\n        return;\r\n      } // parse the sei\r\n\r\n      sei = cea708Parser.parseSei(event.escapedRBSP); // no payload data, skip\r\n\r\n      if (!sei.payload) {\r\n        return;\r\n      } // ignore everything but user_data_registered_itu_t_t35\r\n\r\n      if (sei.payloadType !== cea708Parser.USER_DATA_REGISTERED_ITU_T_T35) {\r\n        return;\r\n      } // parse out the user data payload\r\n\r\n      userData = cea708Parser.parseUserData(sei); // ignore unrecognized userData\r\n\r\n      if (!userData) {\r\n        return;\r\n      } // Sometimes, the same segment # will be downloaded twice. To stop the\r\n      // caption data from being processed twice, we track the latest dts we've\r\n      // received and ignore everything with a dts before that. However, since\r\n      // data for a specific dts can be split across packets on either side of\r\n      // a segment boundary, we need to make sure we *don't* ignore the packets\r\n      // from the *next* segment that have dts === this.latestDts_. By constantly\r\n      // tracking the number of packets received with dts === this.latestDts_, we\r\n      // know how many should be ignored once we start receiving duplicates.\r\n\r\n      if (event.dts < this.latestDts_) {\r\n        // We've started getting older data, so set the flag.\r\n        this.ignoreNextEqualDts_ = true;\r\n        return;\r\n      } else if (event.dts === this.latestDts_ && this.ignoreNextEqualDts_) {\r\n        this.numSameDts_--;\r\n        if (!this.numSameDts_) {\r\n          // We've received the last duplicate packet, time to start processing again\r\n          this.ignoreNextEqualDts_ = false;\r\n        }\r\n        return;\r\n      } // parse out CC data packets and save them for later\r\n\r\n      newCaptionPackets = cea708Parser.parseCaptionPackets(event.pts, userData);\r\n      this.captionPackets_ = this.captionPackets_.concat(newCaptionPackets);\r\n      if (this.latestDts_ !== event.dts) {\r\n        this.numSameDts_ = 0;\r\n      }\r\n      this.numSameDts_++;\r\n      this.latestDts_ = event.dts;\r\n    };\r\n    CaptionStream$2.prototype.flushCCStreams = function (flushType) {\r\n      this.ccStreams_.forEach(function (cc) {\r\n        return flushType === 'flush' ? cc.flush() : cc.partialFlush();\r\n      }, this);\r\n    };\r\n    CaptionStream$2.prototype.flushStream = function (flushType) {\r\n      // make sure we actually parsed captions before proceeding\r\n      if (!this.captionPackets_.length) {\r\n        this.flushCCStreams(flushType);\r\n        return;\r\n      } // In Chrome, the Array#sort function is not stable so add a\r\n      // presortIndex that we can use to ensure we get a stable-sort\r\n\r\n      this.captionPackets_.forEach(function (elem, idx) {\r\n        elem.presortIndex = idx;\r\n      }); // sort caption byte-pairs based on their PTS values\r\n\r\n      this.captionPackets_.sort(function (a, b) {\r\n        if (a.pts === b.pts) {\r\n          return a.presortIndex - b.presortIndex;\r\n        }\r\n        return a.pts - b.pts;\r\n      });\r\n      this.captionPackets_.forEach(function (packet) {\r\n        if (packet.type < 2) {\r\n          // Dispatch packet to the right Cea608Stream\r\n          this.dispatchCea608Packet(packet);\r\n        } else {\r\n          // Dispatch packet to the Cea708Stream\r\n          this.dispatchCea708Packet(packet);\r\n        }\r\n      }, this);\r\n      this.captionPackets_.length = 0;\r\n      this.flushCCStreams(flushType);\r\n    };\r\n    CaptionStream$2.prototype.flush = function () {\r\n      return this.flushStream('flush');\r\n    }; // Only called if handling partial data\r\n\r\n    CaptionStream$2.prototype.partialFlush = function () {\r\n      return this.flushStream('partialFlush');\r\n    };\r\n    CaptionStream$2.prototype.reset = function () {\r\n      this.latestDts_ = null;\r\n      this.ignoreNextEqualDts_ = false;\r\n      this.numSameDts_ = 0;\r\n      this.activeCea608Channel_ = [null, null];\r\n      this.ccStreams_.forEach(function (ccStream) {\r\n        ccStream.reset();\r\n      });\r\n    }; // From the CEA-608 spec:\r\n\r\n    /*\r\n     * When XDS sub-packets are interleaved with other services, the end of each sub-packet shall be followed\r\n     * by a control pair to change to a different service. When any of the control codes from 0x10 to 0x1F is\r\n     * used to begin a control code pair, it indicates the return to captioning or Text data. The control code pair\r\n     * and subsequent data should then be processed according to the FCC rules. It may be necessary for the\r\n     * line 21 data encoder to automatically insert a control code pair (i.e. RCL, RU2, RU3, RU4, RDC, or RTD)\r\n     * to switch to captioning or Text.\r\n    */\r\n    // With that in mind, we ignore any data between an XDS control code and a\r\n    // subsequent closed-captioning control code.\r\n\r\n    CaptionStream$2.prototype.dispatchCea608Packet = function (packet) {\r\n      // NOTE: packet.type is the CEA608 field\r\n      if (this.setsTextOrXDSActive(packet)) {\r\n        this.activeCea608Channel_[packet.type] = null;\r\n      } else if (this.setsChannel1Active(packet)) {\r\n        this.activeCea608Channel_[packet.type] = 0;\r\n      } else if (this.setsChannel2Active(packet)) {\r\n        this.activeCea608Channel_[packet.type] = 1;\r\n      }\r\n      if (this.activeCea608Channel_[packet.type] === null) {\r\n        // If we haven't received anything to set the active channel, or the\r\n        // packets are Text/XDS data, discard the data; we don't want jumbled\r\n        // captions\r\n        return;\r\n      }\r\n      this.ccStreams_[(packet.type << 1) + this.activeCea608Channel_[packet.type]].push(packet);\r\n    };\r\n    CaptionStream$2.prototype.setsChannel1Active = function (packet) {\r\n      return (packet.ccData & 0x7800) === 0x1000;\r\n    };\r\n    CaptionStream$2.prototype.setsChannel2Active = function (packet) {\r\n      return (packet.ccData & 0x7800) === 0x1800;\r\n    };\r\n    CaptionStream$2.prototype.setsTextOrXDSActive = function (packet) {\r\n      return (packet.ccData & 0x7100) === 0x0100 || (packet.ccData & 0x78fe) === 0x102a || (packet.ccData & 0x78fe) === 0x182a;\r\n    };\r\n    CaptionStream$2.prototype.dispatchCea708Packet = function (packet) {\r\n      if (this.parse708captions_) {\r\n        this.cc708Stream_.push(packet);\r\n      }\r\n    }; // ----------------------\r\n    // Session to Application\r\n    // ----------------------\r\n    // This hash maps special and extended character codes to their\r\n    // proper Unicode equivalent. The first one-byte key is just a\r\n    // non-standard character code. The two-byte keys that follow are\r\n    // the extended CEA708 character codes, along with the preceding\r\n    // 0x10 extended character byte to distinguish these codes from\r\n    // non-extended character codes. Every CEA708 character code that\r\n    // is not in this object maps directly to a standard unicode\r\n    // character code.\r\n    // The transparent space and non-breaking transparent space are\r\n    // technically not fully supported since there is no code to\r\n    // make them transparent, so they have normal non-transparent\r\n    // stand-ins.\r\n    // The special closed caption (CC) character isn't a standard\r\n    // unicode character, so a fairly similar unicode character was\r\n    // chosen in it's place.\r\n\r\n    var CHARACTER_TRANSLATION_708 = {\r\n      0x7f: 0x266a,\r\n      // ♪\r\n      0x1020: 0x20,\r\n      // Transparent Space\r\n      0x1021: 0xa0,\r\n      // Nob-breaking Transparent Space\r\n      0x1025: 0x2026,\r\n      // …\r\n      0x102a: 0x0160,\r\n      // Š\r\n      0x102c: 0x0152,\r\n      // Œ\r\n      0x1030: 0x2588,\r\n      // █\r\n      0x1031: 0x2018,\r\n      // ‘\r\n      0x1032: 0x2019,\r\n      // ’\r\n      0x1033: 0x201c,\r\n      // “\r\n      0x1034: 0x201d,\r\n      // ”\r\n      0x1035: 0x2022,\r\n      // •\r\n      0x1039: 0x2122,\r\n      // ™\r\n      0x103a: 0x0161,\r\n      // š\r\n      0x103c: 0x0153,\r\n      // œ\r\n      0x103d: 0x2120,\r\n      // ℠\r\n      0x103f: 0x0178,\r\n      // Ÿ\r\n      0x1076: 0x215b,\r\n      // ⅛\r\n      0x1077: 0x215c,\r\n      // ⅜\r\n      0x1078: 0x215d,\r\n      // ⅝\r\n      0x1079: 0x215e,\r\n      // ⅞\r\n      0x107a: 0x23d0,\r\n      // ⏐\r\n      0x107b: 0x23a4,\r\n      // ⎤\r\n      0x107c: 0x23a3,\r\n      // ⎣\r\n      0x107d: 0x23af,\r\n      // ⎯\r\n      0x107e: 0x23a6,\r\n      // ⎦\r\n      0x107f: 0x23a1,\r\n      // ⎡\r\n      0x10a0: 0x3138 // ㄸ (CC char)\r\n    };\r\n    var get708CharFromCode = function (code) {\r\n      var newCode = CHARACTER_TRANSLATION_708[code] || code;\r\n      if (code & 0x1000 && code === newCode) {\r\n        // Invalid extended code\r\n        return '';\r\n      }\r\n      return String.fromCharCode(newCode);\r\n    };\r\n    var within708TextBlock = function (b) {\r\n      return 0x20 <= b && b <= 0x7f || 0xa0 <= b && b <= 0xff;\r\n    };\r\n    var Cea708Window = function (windowNum) {\r\n      this.windowNum = windowNum;\r\n      this.reset();\r\n    };\r\n    Cea708Window.prototype.reset = function () {\r\n      this.clearText();\r\n      this.pendingNewLine = false;\r\n      this.winAttr = {};\r\n      this.penAttr = {};\r\n      this.penLoc = {};\r\n      this.penColor = {}; // These default values are arbitrary,\r\n      // defineWindow will usually override them\r\n\r\n      this.visible = 0;\r\n      this.rowLock = 0;\r\n      this.columnLock = 0;\r\n      this.priority = 0;\r\n      this.relativePositioning = 0;\r\n      this.anchorVertical = 0;\r\n      this.anchorHorizontal = 0;\r\n      this.anchorPoint = 0;\r\n      this.rowCount = 1;\r\n      this.virtualRowCount = this.rowCount + 1;\r\n      this.columnCount = 41;\r\n      this.windowStyle = 0;\r\n      this.penStyle = 0;\r\n    };\r\n    Cea708Window.prototype.getText = function () {\r\n      return this.rows.join('\\n');\r\n    };\r\n    Cea708Window.prototype.clearText = function () {\r\n      this.rows = [''];\r\n      this.rowIdx = 0;\r\n    };\r\n    Cea708Window.prototype.newLine = function (pts) {\r\n      if (this.rows.length >= this.virtualRowCount && typeof this.beforeRowOverflow === 'function') {\r\n        this.beforeRowOverflow(pts);\r\n      }\r\n      if (this.rows.length > 0) {\r\n        this.rows.push('');\r\n        this.rowIdx++;\r\n      } // Show all virtual rows since there's no visible scrolling\r\n\r\n      while (this.rows.length > this.virtualRowCount) {\r\n        this.rows.shift();\r\n        this.rowIdx--;\r\n      }\r\n    };\r\n    Cea708Window.prototype.isEmpty = function () {\r\n      if (this.rows.length === 0) {\r\n        return true;\r\n      } else if (this.rows.length === 1) {\r\n        return this.rows[0] === '';\r\n      }\r\n      return false;\r\n    };\r\n    Cea708Window.prototype.addText = function (text) {\r\n      this.rows[this.rowIdx] += text;\r\n    };\r\n    Cea708Window.prototype.backspace = function () {\r\n      if (!this.isEmpty()) {\r\n        var row = this.rows[this.rowIdx];\r\n        this.rows[this.rowIdx] = row.substr(0, row.length - 1);\r\n      }\r\n    };\r\n    var Cea708Service = function (serviceNum, encoding, stream) {\r\n      this.serviceNum = serviceNum;\r\n      this.text = '';\r\n      this.currentWindow = new Cea708Window(-1);\r\n      this.windows = [];\r\n      this.stream = stream; // Try to setup a TextDecoder if an `encoding` value was provided\r\n\r\n      if (typeof encoding === 'string') {\r\n        this.createTextDecoder(encoding);\r\n      }\r\n    };\r\n    /**\r\n     * Initialize service windows\r\n     * Must be run before service use\r\n     *\r\n     * @param  {Integer}  pts               PTS value\r\n     * @param  {Function} beforeRowOverflow Function to execute before row overflow of a window\r\n     */\r\n\r\n    Cea708Service.prototype.init = function (pts, beforeRowOverflow) {\r\n      this.startPts = pts;\r\n      for (var win = 0; win < 8; win++) {\r\n        this.windows[win] = new Cea708Window(win);\r\n        if (typeof beforeRowOverflow === 'function') {\r\n          this.windows[win].beforeRowOverflow = beforeRowOverflow;\r\n        }\r\n      }\r\n    };\r\n    /**\r\n     * Set current window of service to be affected by commands\r\n     *\r\n     * @param  {Integer} windowNum Window number\r\n     */\r\n\r\n    Cea708Service.prototype.setCurrentWindow = function (windowNum) {\r\n      this.currentWindow = this.windows[windowNum];\r\n    };\r\n    /**\r\n     * Try to create a TextDecoder if it is natively supported\r\n     */\r\n\r\n    Cea708Service.prototype.createTextDecoder = function (encoding) {\r\n      if (typeof TextDecoder === 'undefined') {\r\n        this.stream.trigger('log', {\r\n          level: 'warn',\r\n          message: 'The `encoding` option is unsupported without TextDecoder support'\r\n        });\r\n      } else {\r\n        try {\r\n          this.textDecoder_ = new TextDecoder(encoding);\r\n        } catch (error) {\r\n          this.stream.trigger('log', {\r\n            level: 'warn',\r\n            message: 'TextDecoder could not be created with ' + encoding + ' encoding. ' + error\r\n          });\r\n        }\r\n      }\r\n    };\r\n    var Cea708Stream = function (options) {\r\n      options = options || {};\r\n      Cea708Stream.prototype.init.call(this);\r\n      var self = this;\r\n      var captionServices = options.captionServices || {};\r\n      var captionServiceEncodings = {};\r\n      var serviceProps; // Get service encodings from captionServices option block\r\n\r\n      Object.keys(captionServices).forEach(serviceName => {\r\n        serviceProps = captionServices[serviceName];\r\n        if (/^SERVICE/.test(serviceName)) {\r\n          captionServiceEncodings[serviceName] = serviceProps.encoding;\r\n        }\r\n      });\r\n      this.serviceEncodings = captionServiceEncodings;\r\n      this.current708Packet = null;\r\n      this.services = {};\r\n      this.push = function (packet) {\r\n        if (packet.type === 3) {\r\n          // 708 packet start\r\n          self.new708Packet();\r\n          self.add708Bytes(packet);\r\n        } else {\r\n          if (self.current708Packet === null) {\r\n            // This should only happen at the start of a file if there's no packet start.\r\n            self.new708Packet();\r\n          }\r\n          self.add708Bytes(packet);\r\n        }\r\n      };\r\n    };\r\n    Cea708Stream.prototype = new Stream$7();\r\n    /**\r\n     * Push current 708 packet, create new 708 packet.\r\n     */\r\n\r\n    Cea708Stream.prototype.new708Packet = function () {\r\n      if (this.current708Packet !== null) {\r\n        this.push708Packet();\r\n      }\r\n      this.current708Packet = {\r\n        data: [],\r\n        ptsVals: []\r\n      };\r\n    };\r\n    /**\r\n     * Add pts and both bytes from packet into current 708 packet.\r\n     */\r\n\r\n    Cea708Stream.prototype.add708Bytes = function (packet) {\r\n      var data = packet.ccData;\r\n      var byte0 = data >>> 8;\r\n      var byte1 = data & 0xff; // I would just keep a list of packets instead of bytes, but it isn't clear in the spec\r\n      // that service blocks will always line up with byte pairs.\r\n\r\n      this.current708Packet.ptsVals.push(packet.pts);\r\n      this.current708Packet.data.push(byte0);\r\n      this.current708Packet.data.push(byte1);\r\n    };\r\n    /**\r\n     * Parse completed 708 packet into service blocks and push each service block.\r\n     */\r\n\r\n    Cea708Stream.prototype.push708Packet = function () {\r\n      var packet708 = this.current708Packet;\r\n      var packetData = packet708.data;\r\n      var serviceNum = null;\r\n      var blockSize = null;\r\n      var i = 0;\r\n      var b = packetData[i++];\r\n      packet708.seq = b >> 6;\r\n      packet708.sizeCode = b & 0x3f; // 0b00111111;\r\n\r\n      for (; i < packetData.length; i++) {\r\n        b = packetData[i++];\r\n        serviceNum = b >> 5;\r\n        blockSize = b & 0x1f; // 0b00011111\r\n\r\n        if (serviceNum === 7 && blockSize > 0) {\r\n          // Extended service num\r\n          b = packetData[i++];\r\n          serviceNum = b;\r\n        }\r\n        this.pushServiceBlock(serviceNum, i, blockSize);\r\n        if (blockSize > 0) {\r\n          i += blockSize - 1;\r\n        }\r\n      }\r\n    };\r\n    /**\r\n     * Parse service block, execute commands, read text.\r\n     *\r\n     * Note: While many of these commands serve important purposes,\r\n     * many others just parse out the parameters or attributes, but\r\n     * nothing is done with them because this is not a full and complete\r\n     * implementation of the entire 708 spec.\r\n     *\r\n     * @param  {Integer} serviceNum Service number\r\n     * @param  {Integer} start      Start index of the 708 packet data\r\n     * @param  {Integer} size       Block size\r\n     */\r\n\r\n    Cea708Stream.prototype.pushServiceBlock = function (serviceNum, start, size) {\r\n      var b;\r\n      var i = start;\r\n      var packetData = this.current708Packet.data;\r\n      var service = this.services[serviceNum];\r\n      if (!service) {\r\n        service = this.initService(serviceNum, i);\r\n      }\r\n      for (; i < start + size && i < packetData.length; i++) {\r\n        b = packetData[i];\r\n        if (within708TextBlock(b)) {\r\n          i = this.handleText(i, service);\r\n        } else if (b === 0x18) {\r\n          i = this.multiByteCharacter(i, service);\r\n        } else if (b === 0x10) {\r\n          i = this.extendedCommands(i, service);\r\n        } else if (0x80 <= b && b <= 0x87) {\r\n          i = this.setCurrentWindow(i, service);\r\n        } else if (0x98 <= b && b <= 0x9f) {\r\n          i = this.defineWindow(i, service);\r\n        } else if (b === 0x88) {\r\n          i = this.clearWindows(i, service);\r\n        } else if (b === 0x8c) {\r\n          i = this.deleteWindows(i, service);\r\n        } else if (b === 0x89) {\r\n          i = this.displayWindows(i, service);\r\n        } else if (b === 0x8a) {\r\n          i = this.hideWindows(i, service);\r\n        } else if (b === 0x8b) {\r\n          i = this.toggleWindows(i, service);\r\n        } else if (b === 0x97) {\r\n          i = this.setWindowAttributes(i, service);\r\n        } else if (b === 0x90) {\r\n          i = this.setPenAttributes(i, service);\r\n        } else if (b === 0x91) {\r\n          i = this.setPenColor(i, service);\r\n        } else if (b === 0x92) {\r\n          i = this.setPenLocation(i, service);\r\n        } else if (b === 0x8f) {\r\n          service = this.reset(i, service);\r\n        } else if (b === 0x08) {\r\n          // BS: Backspace\r\n          service.currentWindow.backspace();\r\n        } else if (b === 0x0c) {\r\n          // FF: Form feed\r\n          service.currentWindow.clearText();\r\n        } else if (b === 0x0d) {\r\n          // CR: Carriage return\r\n          service.currentWindow.pendingNewLine = true;\r\n        } else if (b === 0x0e) {\r\n          // HCR: Horizontal carriage return\r\n          service.currentWindow.clearText();\r\n        } else if (b === 0x8d) {\r\n          // DLY: Delay, nothing to do\r\n          i++;\r\n        } else ;\r\n      }\r\n    };\r\n    /**\r\n     * Execute an extended command\r\n     *\r\n     * @param  {Integer} i        Current index in the 708 packet\r\n     * @param  {Service} service  The service object to be affected\r\n     * @return {Integer}          New index after parsing\r\n     */\r\n\r\n    Cea708Stream.prototype.extendedCommands = function (i, service) {\r\n      var packetData = this.current708Packet.data;\r\n      var b = packetData[++i];\r\n      if (within708TextBlock(b)) {\r\n        i = this.handleText(i, service, {\r\n          isExtended: true\r\n        });\r\n      }\r\n      return i;\r\n    };\r\n    /**\r\n     * Get PTS value of a given byte index\r\n     *\r\n     * @param  {Integer} byteIndex  Index of the byte\r\n     * @return {Integer}            PTS\r\n     */\r\n\r\n    Cea708Stream.prototype.getPts = function (byteIndex) {\r\n      // There's 1 pts value per 2 bytes\r\n      return this.current708Packet.ptsVals[Math.floor(byteIndex / 2)];\r\n    };\r\n    /**\r\n     * Initializes a service\r\n     *\r\n     * @param  {Integer} serviceNum Service number\r\n     * @return {Service}            Initialized service object\r\n     */\r\n\r\n    Cea708Stream.prototype.initService = function (serviceNum, i) {\r\n      var serviceName = 'SERVICE' + serviceNum;\r\n      var self = this;\r\n      var serviceName;\r\n      var encoding;\r\n      if (serviceName in this.serviceEncodings) {\r\n        encoding = this.serviceEncodings[serviceName];\r\n      }\r\n      this.services[serviceNum] = new Cea708Service(serviceNum, encoding, self);\r\n      this.services[serviceNum].init(this.getPts(i), function (pts) {\r\n        self.flushDisplayed(pts, self.services[serviceNum]);\r\n      });\r\n      return this.services[serviceNum];\r\n    };\r\n    /**\r\n     * Execute text writing to current window\r\n     *\r\n     * @param  {Integer} i        Current index in the 708 packet\r\n     * @param  {Service} service  The service object to be affected\r\n     * @return {Integer}          New index after parsing\r\n     */\r\n\r\n    Cea708Stream.prototype.handleText = function (i, service, options) {\r\n      var isExtended = options && options.isExtended;\r\n      var isMultiByte = options && options.isMultiByte;\r\n      var packetData = this.current708Packet.data;\r\n      var extended = isExtended ? 0x1000 : 0x0000;\r\n      var currentByte = packetData[i];\r\n      var nextByte = packetData[i + 1];\r\n      var win = service.currentWindow;\r\n      var char;\r\n      var charCodeArray; // Converts an array of bytes to a unicode hex string.\r\n\r\n      function toHexString(byteArray) {\r\n        return byteArray.map(byte => {\r\n          return ('0' + (byte & 0xFF).toString(16)).slice(-2);\r\n        }).join('');\r\n      }\r\n      if (isMultiByte) {\r\n        charCodeArray = [currentByte, nextByte];\r\n        i++;\r\n      } else {\r\n        charCodeArray = [currentByte];\r\n      } // Use the TextDecoder if one was created for this service\r\n\r\n      if (service.textDecoder_ && !isExtended) {\r\n        char = service.textDecoder_.decode(new Uint8Array(charCodeArray));\r\n      } else {\r\n        // We assume any multi-byte char without a decoder is unicode.\r\n        if (isMultiByte) {\r\n          const unicode = toHexString(charCodeArray); // Takes a unicode hex string and creates a single character.\r\n\r\n          char = String.fromCharCode(parseInt(unicode, 16));\r\n        } else {\r\n          char = get708CharFromCode(extended | currentByte);\r\n        }\r\n      }\r\n      if (win.pendingNewLine && !win.isEmpty()) {\r\n        win.newLine(this.getPts(i));\r\n      }\r\n      win.pendingNewLine = false;\r\n      win.addText(char);\r\n      return i;\r\n    };\r\n    /**\r\n     * Handle decoding of multibyte character\r\n     *\r\n     * @param  {Integer} i        Current index in the 708 packet\r\n     * @param  {Service} service  The service object to be affected\r\n     * @return {Integer}          New index after parsing\r\n     */\r\n\r\n    Cea708Stream.prototype.multiByteCharacter = function (i, service) {\r\n      var packetData = this.current708Packet.data;\r\n      var firstByte = packetData[i + 1];\r\n      var secondByte = packetData[i + 2];\r\n      if (within708TextBlock(firstByte) && within708TextBlock(secondByte)) {\r\n        i = this.handleText(++i, service, {\r\n          isMultiByte: true\r\n        });\r\n      }\r\n      return i;\r\n    };\r\n    /**\r\n     * Parse and execute the CW# command.\r\n     *\r\n     * Set the current window.\r\n     *\r\n     * @param  {Integer} i        Current index in the 708 packet\r\n     * @param  {Service} service  The service object to be affected\r\n     * @return {Integer}          New index after parsing\r\n     */\r\n\r\n    Cea708Stream.prototype.setCurrentWindow = function (i, service) {\r\n      var packetData = this.current708Packet.data;\r\n      var b = packetData[i];\r\n      var windowNum = b & 0x07;\r\n      service.setCurrentWindow(windowNum);\r\n      return i;\r\n    };\r\n    /**\r\n     * Parse and execute the DF# command.\r\n     *\r\n     * Define a window and set it as the current window.\r\n     *\r\n     * @param  {Integer} i        Current index in the 708 packet\r\n     * @param  {Service} service  The service object to be affected\r\n     * @return {Integer}          New index after parsing\r\n     */\r\n\r\n    Cea708Stream.prototype.defineWindow = function (i, service) {\r\n      var packetData = this.current708Packet.data;\r\n      var b = packetData[i];\r\n      var windowNum = b & 0x07;\r\n      service.setCurrentWindow(windowNum);\r\n      var win = service.currentWindow;\r\n      b = packetData[++i];\r\n      win.visible = (b & 0x20) >> 5; // v\r\n\r\n      win.rowLock = (b & 0x10) >> 4; // rl\r\n\r\n      win.columnLock = (b & 0x08) >> 3; // cl\r\n\r\n      win.priority = b & 0x07; // p\r\n\r\n      b = packetData[++i];\r\n      win.relativePositioning = (b & 0x80) >> 7; // rp\r\n\r\n      win.anchorVertical = b & 0x7f; // av\r\n\r\n      b = packetData[++i];\r\n      win.anchorHorizontal = b; // ah\r\n\r\n      b = packetData[++i];\r\n      win.anchorPoint = (b & 0xf0) >> 4; // ap\r\n\r\n      win.rowCount = b & 0x0f; // rc\r\n\r\n      b = packetData[++i];\r\n      win.columnCount = b & 0x3f; // cc\r\n\r\n      b = packetData[++i];\r\n      win.windowStyle = (b & 0x38) >> 3; // ws\r\n\r\n      win.penStyle = b & 0x07; // ps\r\n      // The spec says there are (rowCount+1) \"virtual rows\"\r\n\r\n      win.virtualRowCount = win.rowCount + 1;\r\n      return i;\r\n    };\r\n    /**\r\n     * Parse and execute the SWA command.\r\n     *\r\n     * Set attributes of the current window.\r\n     *\r\n     * @param  {Integer} i        Current index in the 708 packet\r\n     * @param  {Service} service  The service object to be affected\r\n     * @return {Integer}          New index after parsing\r\n     */\r\n\r\n    Cea708Stream.prototype.setWindowAttributes = function (i, service) {\r\n      var packetData = this.current708Packet.data;\r\n      var b = packetData[i];\r\n      var winAttr = service.currentWindow.winAttr;\r\n      b = packetData[++i];\r\n      winAttr.fillOpacity = (b & 0xc0) >> 6; // fo\r\n\r\n      winAttr.fillRed = (b & 0x30) >> 4; // fr\r\n\r\n      winAttr.fillGreen = (b & 0x0c) >> 2; // fg\r\n\r\n      winAttr.fillBlue = b & 0x03; // fb\r\n\r\n      b = packetData[++i];\r\n      winAttr.borderType = (b & 0xc0) >> 6; // bt\r\n\r\n      winAttr.borderRed = (b & 0x30) >> 4; // br\r\n\r\n      winAttr.borderGreen = (b & 0x0c) >> 2; // bg\r\n\r\n      winAttr.borderBlue = b & 0x03; // bb\r\n\r\n      b = packetData[++i];\r\n      winAttr.borderType += (b & 0x80) >> 5; // bt\r\n\r\n      winAttr.wordWrap = (b & 0x40) >> 6; // ww\r\n\r\n      winAttr.printDirection = (b & 0x30) >> 4; // pd\r\n\r\n      winAttr.scrollDirection = (b & 0x0c) >> 2; // sd\r\n\r\n      winAttr.justify = b & 0x03; // j\r\n\r\n      b = packetData[++i];\r\n      winAttr.effectSpeed = (b & 0xf0) >> 4; // es\r\n\r\n      winAttr.effectDirection = (b & 0x0c) >> 2; // ed\r\n\r\n      winAttr.displayEffect = b & 0x03; // de\r\n\r\n      return i;\r\n    };\r\n    /**\r\n     * Gather text from all displayed windows and push a caption to output.\r\n     *\r\n     * @param  {Integer} i        Current index in the 708 packet\r\n     * @param  {Service} service  The service object to be affected\r\n     */\r\n\r\n    Cea708Stream.prototype.flushDisplayed = function (pts, service) {\r\n      var displayedText = []; // TODO: Positioning not supported, displaying multiple windows will not necessarily\r\n      // display text in the correct order, but sample files so far have not shown any issue.\r\n\r\n      for (var winId = 0; winId < 8; winId++) {\r\n        if (service.windows[winId].visible && !service.windows[winId].isEmpty()) {\r\n          displayedText.push(service.windows[winId].getText());\r\n        }\r\n      }\r\n      service.endPts = pts;\r\n      service.text = displayedText.join('\\n\\n');\r\n      this.pushCaption(service);\r\n      service.startPts = pts;\r\n    };\r\n    /**\r\n     * Push a caption to output if the caption contains text.\r\n     *\r\n     * @param  {Service} service  The service object to be affected\r\n     */\r\n\r\n    Cea708Stream.prototype.pushCaption = function (service) {\r\n      if (service.text !== '') {\r\n        this.trigger('data', {\r\n          startPts: service.startPts,\r\n          endPts: service.endPts,\r\n          text: service.text,\r\n          stream: 'cc708_' + service.serviceNum\r\n        });\r\n        service.text = '';\r\n        service.startPts = service.endPts;\r\n      }\r\n    };\r\n    /**\r\n     * Parse and execute the DSW command.\r\n     *\r\n     * Set visible property of windows based on the parsed bitmask.\r\n     *\r\n     * @param  {Integer} i        Current index in the 708 packet\r\n     * @param  {Service} service  The service object to be affected\r\n     * @return {Integer}          New index after parsing\r\n     */\r\n\r\n    Cea708Stream.prototype.displayWindows = function (i, service) {\r\n      var packetData = this.current708Packet.data;\r\n      var b = packetData[++i];\r\n      var pts = this.getPts(i);\r\n      this.flushDisplayed(pts, service);\r\n      for (var winId = 0; winId < 8; winId++) {\r\n        if (b & 0x01 << winId) {\r\n          service.windows[winId].visible = 1;\r\n        }\r\n      }\r\n      return i;\r\n    };\r\n    /**\r\n     * Parse and execute the HDW command.\r\n     *\r\n     * Set visible property of windows based on the parsed bitmask.\r\n     *\r\n     * @param  {Integer} i        Current index in the 708 packet\r\n     * @param  {Service} service  The service object to be affected\r\n     * @return {Integer}          New index after parsing\r\n     */\r\n\r\n    Cea708Stream.prototype.hideWindows = function (i, service) {\r\n      var packetData = this.current708Packet.data;\r\n      var b = packetData[++i];\r\n      var pts = this.getPts(i);\r\n      this.flushDisplayed(pts, service);\r\n      for (var winId = 0; winId < 8; winId++) {\r\n        if (b & 0x01 << winId) {\r\n          service.windows[winId].visible = 0;\r\n        }\r\n      }\r\n      return i;\r\n    };\r\n    /**\r\n     * Parse and execute the TGW command.\r\n     *\r\n     * Set visible property of windows based on the parsed bitmask.\r\n     *\r\n     * @param  {Integer} i        Current index in the 708 packet\r\n     * @param  {Service} service  The service object to be affected\r\n     * @return {Integer}          New index after parsing\r\n     */\r\n\r\n    Cea708Stream.prototype.toggleWindows = function (i, service) {\r\n      var packetData = this.current708Packet.data;\r\n      var b = packetData[++i];\r\n      var pts = this.getPts(i);\r\n      this.flushDisplayed(pts, service);\r\n      for (var winId = 0; winId < 8; winId++) {\r\n        if (b & 0x01 << winId) {\r\n          service.windows[winId].visible ^= 1;\r\n        }\r\n      }\r\n      return i;\r\n    };\r\n    /**\r\n     * Parse and execute the CLW command.\r\n     *\r\n     * Clear text of windows based on the parsed bitmask.\r\n     *\r\n     * @param  {Integer} i        Current index in the 708 packet\r\n     * @param  {Service} service  The service object to be affected\r\n     * @return {Integer}          New index after parsing\r\n     */\r\n\r\n    Cea708Stream.prototype.clearWindows = function (i, service) {\r\n      var packetData = this.current708Packet.data;\r\n      var b = packetData[++i];\r\n      var pts = this.getPts(i);\r\n      this.flushDisplayed(pts, service);\r\n      for (var winId = 0; winId < 8; winId++) {\r\n        if (b & 0x01 << winId) {\r\n          service.windows[winId].clearText();\r\n        }\r\n      }\r\n      return i;\r\n    };\r\n    /**\r\n     * Parse and execute the DLW command.\r\n     *\r\n     * Re-initialize windows based on the parsed bitmask.\r\n     *\r\n     * @param  {Integer} i        Current index in the 708 packet\r\n     * @param  {Service} service  The service object to be affected\r\n     * @return {Integer}          New index after parsing\r\n     */\r\n\r\n    Cea708Stream.prototype.deleteWindows = function (i, service) {\r\n      var packetData = this.current708Packet.data;\r\n      var b = packetData[++i];\r\n      var pts = this.getPts(i);\r\n      this.flushDisplayed(pts, service);\r\n      for (var winId = 0; winId < 8; winId++) {\r\n        if (b & 0x01 << winId) {\r\n          service.windows[winId].reset();\r\n        }\r\n      }\r\n      return i;\r\n    };\r\n    /**\r\n     * Parse and execute the SPA command.\r\n     *\r\n     * Set pen attributes of the current window.\r\n     *\r\n     * @param  {Integer} i        Current index in the 708 packet\r\n     * @param  {Service} service  The service object to be affected\r\n     * @return {Integer}          New index after parsing\r\n     */\r\n\r\n    Cea708Stream.prototype.setPenAttributes = function (i, service) {\r\n      var packetData = this.current708Packet.data;\r\n      var b = packetData[i];\r\n      var penAttr = service.currentWindow.penAttr;\r\n      b = packetData[++i];\r\n      penAttr.textTag = (b & 0xf0) >> 4; // tt\r\n\r\n      penAttr.offset = (b & 0x0c) >> 2; // o\r\n\r\n      penAttr.penSize = b & 0x03; // s\r\n\r\n      b = packetData[++i];\r\n      penAttr.italics = (b & 0x80) >> 7; // i\r\n\r\n      penAttr.underline = (b & 0x40) >> 6; // u\r\n\r\n      penAttr.edgeType = (b & 0x38) >> 3; // et\r\n\r\n      penAttr.fontStyle = b & 0x07; // fs\r\n\r\n      return i;\r\n    };\r\n    /**\r\n     * Parse and execute the SPC command.\r\n     *\r\n     * Set pen color of the current window.\r\n     *\r\n     * @param  {Integer} i        Current index in the 708 packet\r\n     * @param  {Service} service  The service object to be affected\r\n     * @return {Integer}          New index after parsing\r\n     */\r\n\r\n    Cea708Stream.prototype.setPenColor = function (i, service) {\r\n      var packetData = this.current708Packet.data;\r\n      var b = packetData[i];\r\n      var penColor = service.currentWindow.penColor;\r\n      b = packetData[++i];\r\n      penColor.fgOpacity = (b & 0xc0) >> 6; // fo\r\n\r\n      penColor.fgRed = (b & 0x30) >> 4; // fr\r\n\r\n      penColor.fgGreen = (b & 0x0c) >> 2; // fg\r\n\r\n      penColor.fgBlue = b & 0x03; // fb\r\n\r\n      b = packetData[++i];\r\n      penColor.bgOpacity = (b & 0xc0) >> 6; // bo\r\n\r\n      penColor.bgRed = (b & 0x30) >> 4; // br\r\n\r\n      penColor.bgGreen = (b & 0x0c) >> 2; // bg\r\n\r\n      penColor.bgBlue = b & 0x03; // bb\r\n\r\n      b = packetData[++i];\r\n      penColor.edgeRed = (b & 0x30) >> 4; // er\r\n\r\n      penColor.edgeGreen = (b & 0x0c) >> 2; // eg\r\n\r\n      penColor.edgeBlue = b & 0x03; // eb\r\n\r\n      return i;\r\n    };\r\n    /**\r\n     * Parse and execute the SPL command.\r\n     *\r\n     * Set pen location of the current window.\r\n     *\r\n     * @param  {Integer} i        Current index in the 708 packet\r\n     * @param  {Service} service  The service object to be affected\r\n     * @return {Integer}          New index after parsing\r\n     */\r\n\r\n    Cea708Stream.prototype.setPenLocation = function (i, service) {\r\n      var packetData = this.current708Packet.data;\r\n      var b = packetData[i];\r\n      var penLoc = service.currentWindow.penLoc; // Positioning isn't really supported at the moment, so this essentially just inserts a linebreak\r\n\r\n      service.currentWindow.pendingNewLine = true;\r\n      b = packetData[++i];\r\n      penLoc.row = b & 0x0f; // r\r\n\r\n      b = packetData[++i];\r\n      penLoc.column = b & 0x3f; // c\r\n\r\n      return i;\r\n    };\r\n    /**\r\n     * Execute the RST command.\r\n     *\r\n     * Reset service to a clean slate. Re-initialize.\r\n     *\r\n     * @param  {Integer} i        Current index in the 708 packet\r\n     * @param  {Service} service  The service object to be affected\r\n     * @return {Service}          Re-initialized service\r\n     */\r\n\r\n    Cea708Stream.prototype.reset = function (i, service) {\r\n      var pts = this.getPts(i);\r\n      this.flushDisplayed(pts, service);\r\n      return this.initService(service.serviceNum, i);\r\n    }; // This hash maps non-ASCII, special, and extended character codes to their\r\n    // proper Unicode equivalent. The first keys that are only a single byte\r\n    // are the non-standard ASCII characters, which simply map the CEA608 byte\r\n    // to the standard ASCII/Unicode. The two-byte keys that follow are the CEA608\r\n    // character codes, but have their MSB bitmasked with 0x03 so that a lookup\r\n    // can be performed regardless of the field and data channel on which the\r\n    // character code was received.\r\n\r\n    var CHARACTER_TRANSLATION = {\r\n      0x2a: 0xe1,\r\n      // á\r\n      0x5c: 0xe9,\r\n      // é\r\n      0x5e: 0xed,\r\n      // í\r\n      0x5f: 0xf3,\r\n      // ó\r\n      0x60: 0xfa,\r\n      // ú\r\n      0x7b: 0xe7,\r\n      // ç\r\n      0x7c: 0xf7,\r\n      // ÷\r\n      0x7d: 0xd1,\r\n      // Ñ\r\n      0x7e: 0xf1,\r\n      // ñ\r\n      0x7f: 0x2588,\r\n      // █\r\n      0x0130: 0xae,\r\n      // ®\r\n      0x0131: 0xb0,\r\n      // °\r\n      0x0132: 0xbd,\r\n      // ½\r\n      0x0133: 0xbf,\r\n      // ¿\r\n      0x0134: 0x2122,\r\n      // ™\r\n      0x0135: 0xa2,\r\n      // ¢\r\n      0x0136: 0xa3,\r\n      // £\r\n      0x0137: 0x266a,\r\n      // ♪\r\n      0x0138: 0xe0,\r\n      // à\r\n      0x0139: 0xa0,\r\n      //\r\n      0x013a: 0xe8,\r\n      // è\r\n      0x013b: 0xe2,\r\n      // â\r\n      0x013c: 0xea,\r\n      // ê\r\n      0x013d: 0xee,\r\n      // î\r\n      0x013e: 0xf4,\r\n      // ô\r\n      0x013f: 0xfb,\r\n      // û\r\n      0x0220: 0xc1,\r\n      // Á\r\n      0x0221: 0xc9,\r\n      // É\r\n      0x0222: 0xd3,\r\n      // Ó\r\n      0x0223: 0xda,\r\n      // Ú\r\n      0x0224: 0xdc,\r\n      // Ü\r\n      0x0225: 0xfc,\r\n      // ü\r\n      0x0226: 0x2018,\r\n      // ‘\r\n      0x0227: 0xa1,\r\n      // ¡\r\n      0x0228: 0x2a,\r\n      // *\r\n      0x0229: 0x27,\r\n      // '\r\n      0x022a: 0x2014,\r\n      // —\r\n      0x022b: 0xa9,\r\n      // ©\r\n      0x022c: 0x2120,\r\n      // ℠\r\n      0x022d: 0x2022,\r\n      // •\r\n      0x022e: 0x201c,\r\n      // “\r\n      0x022f: 0x201d,\r\n      // ”\r\n      0x0230: 0xc0,\r\n      // À\r\n      0x0231: 0xc2,\r\n      // Â\r\n      0x0232: 0xc7,\r\n      // Ç\r\n      0x0233: 0xc8,\r\n      // È\r\n      0x0234: 0xca,\r\n      // Ê\r\n      0x0235: 0xcb,\r\n      // Ë\r\n      0x0236: 0xeb,\r\n      // ë\r\n      0x0237: 0xce,\r\n      // Î\r\n      0x0238: 0xcf,\r\n      // Ï\r\n      0x0239: 0xef,\r\n      // ï\r\n      0x023a: 0xd4,\r\n      // Ô\r\n      0x023b: 0xd9,\r\n      // Ù\r\n      0x023c: 0xf9,\r\n      // ù\r\n      0x023d: 0xdb,\r\n      // Û\r\n      0x023e: 0xab,\r\n      // «\r\n      0x023f: 0xbb,\r\n      // »\r\n      0x0320: 0xc3,\r\n      // Ã\r\n      0x0321: 0xe3,\r\n      // ã\r\n      0x0322: 0xcd,\r\n      // Í\r\n      0x0323: 0xcc,\r\n      // Ì\r\n      0x0324: 0xec,\r\n      // ì\r\n      0x0325: 0xd2,\r\n      // Ò\r\n      0x0326: 0xf2,\r\n      // ò\r\n      0x0327: 0xd5,\r\n      // Õ\r\n      0x0328: 0xf5,\r\n      // õ\r\n      0x0329: 0x7b,\r\n      // {\r\n      0x032a: 0x7d,\r\n      // }\r\n      0x032b: 0x5c,\r\n      // \\\r\n      0x032c: 0x5e,\r\n      // ^\r\n      0x032d: 0x5f,\r\n      // _\r\n      0x032e: 0x7c,\r\n      // |\r\n      0x032f: 0x7e,\r\n      // ~\r\n      0x0330: 0xc4,\r\n      // Ä\r\n      0x0331: 0xe4,\r\n      // ä\r\n      0x0332: 0xd6,\r\n      // Ö\r\n      0x0333: 0xf6,\r\n      // ö\r\n      0x0334: 0xdf,\r\n      // ß\r\n      0x0335: 0xa5,\r\n      // ¥\r\n      0x0336: 0xa4,\r\n      // ¤\r\n      0x0337: 0x2502,\r\n      // │\r\n      0x0338: 0xc5,\r\n      // Å\r\n      0x0339: 0xe5,\r\n      // å\r\n      0x033a: 0xd8,\r\n      // Ø\r\n      0x033b: 0xf8,\r\n      // ø\r\n      0x033c: 0x250c,\r\n      // ┌\r\n      0x033d: 0x2510,\r\n      // ┐\r\n      0x033e: 0x2514,\r\n      // └\r\n      0x033f: 0x2518 // ┘\r\n    };\r\n    var getCharFromCode = function (code) {\r\n      if (code === null) {\r\n        return '';\r\n      }\r\n      code = CHARACTER_TRANSLATION[code] || code;\r\n      return String.fromCharCode(code);\r\n    }; // the index of the last row in a CEA-608 display buffer\r\n\r\n    var BOTTOM_ROW = 14; // This array is used for mapping PACs -> row #, since there's no way of\r\n    // getting it through bit logic.\r\n\r\n    var ROWS = [0x1100, 0x1120, 0x1200, 0x1220, 0x1500, 0x1520, 0x1600, 0x1620, 0x1700, 0x1720, 0x1000, 0x1300, 0x1320, 0x1400, 0x1420]; // CEA-608 captions are rendered onto a 34x15 matrix of character\r\n    // cells. The \"bottom\" row is the last element in the outer array.\r\n    // We keep track of positioning information as we go by storing the\r\n    // number of indentations and the tab offset in this buffer.\r\n\r\n    var createDisplayBuffer = function () {\r\n      var result = [],\r\n        i = BOTTOM_ROW + 1;\r\n      while (i--) {\r\n        result.push({\r\n          text: '',\r\n          indent: 0,\r\n          offset: 0\r\n        });\r\n      }\r\n      return result;\r\n    };\r\n    var Cea608Stream = function (field, dataChannel) {\r\n      Cea608Stream.prototype.init.call(this);\r\n      this.field_ = field || 0;\r\n      this.dataChannel_ = dataChannel || 0;\r\n      this.name_ = 'CC' + ((this.field_ << 1 | this.dataChannel_) + 1);\r\n      this.setConstants();\r\n      this.reset();\r\n      this.push = function (packet) {\r\n        var data, swap, char0, char1, text; // remove the parity bits\r\n\r\n        data = packet.ccData & 0x7f7f; // ignore duplicate control codes; the spec demands they're sent twice\r\n\r\n        if (data === this.lastControlCode_) {\r\n          this.lastControlCode_ = null;\r\n          return;\r\n        } // Store control codes\r\n\r\n        if ((data & 0xf000) === 0x1000) {\r\n          this.lastControlCode_ = data;\r\n        } else if (data !== this.PADDING_) {\r\n          this.lastControlCode_ = null;\r\n        }\r\n        char0 = data >>> 8;\r\n        char1 = data & 0xff;\r\n        if (data === this.PADDING_) {\r\n          return;\r\n        } else if (data === this.RESUME_CAPTION_LOADING_) {\r\n          this.mode_ = 'popOn';\r\n        } else if (data === this.END_OF_CAPTION_) {\r\n          // If an EOC is received while in paint-on mode, the displayed caption\r\n          // text should be swapped to non-displayed memory as if it was a pop-on\r\n          // caption. Because of that, we should explicitly switch back to pop-on\r\n          // mode\r\n          this.mode_ = 'popOn';\r\n          this.clearFormatting(packet.pts); // if a caption was being displayed, it's gone now\r\n\r\n          this.flushDisplayed(packet.pts); // flip memory\r\n\r\n          swap = this.displayed_;\r\n          this.displayed_ = this.nonDisplayed_;\r\n          this.nonDisplayed_ = swap; // start measuring the time to display the caption\r\n\r\n          this.startPts_ = packet.pts;\r\n        } else if (data === this.ROLL_UP_2_ROWS_) {\r\n          this.rollUpRows_ = 2;\r\n          this.setRollUp(packet.pts);\r\n        } else if (data === this.ROLL_UP_3_ROWS_) {\r\n          this.rollUpRows_ = 3;\r\n          this.setRollUp(packet.pts);\r\n        } else if (data === this.ROLL_UP_4_ROWS_) {\r\n          this.rollUpRows_ = 4;\r\n          this.setRollUp(packet.pts);\r\n        } else if (data === this.CARRIAGE_RETURN_) {\r\n          this.clearFormatting(packet.pts);\r\n          this.flushDisplayed(packet.pts);\r\n          this.shiftRowsUp_();\r\n          this.startPts_ = packet.pts;\r\n        } else if (data === this.BACKSPACE_) {\r\n          if (this.mode_ === 'popOn') {\r\n            this.nonDisplayed_[this.row_].text = this.nonDisplayed_[this.row_].text.slice(0, -1);\r\n          } else {\r\n            this.displayed_[this.row_].text = this.displayed_[this.row_].text.slice(0, -1);\r\n          }\r\n        } else if (data === this.ERASE_DISPLAYED_MEMORY_) {\r\n          this.flushDisplayed(packet.pts);\r\n          this.displayed_ = createDisplayBuffer();\r\n        } else if (data === this.ERASE_NON_DISPLAYED_MEMORY_) {\r\n          this.nonDisplayed_ = createDisplayBuffer();\r\n        } else if (data === this.RESUME_DIRECT_CAPTIONING_) {\r\n          if (this.mode_ !== 'paintOn') {\r\n            // NOTE: This should be removed when proper caption positioning is\r\n            // implemented\r\n            this.flushDisplayed(packet.pts);\r\n            this.displayed_ = createDisplayBuffer();\r\n          }\r\n          this.mode_ = 'paintOn';\r\n          this.startPts_ = packet.pts; // Append special characters to caption text\r\n        } else if (this.isSpecialCharacter(char0, char1)) {\r\n          // Bitmask char0 so that we can apply character transformations\r\n          // regardless of field and data channel.\r\n          // Then byte-shift to the left and OR with char1 so we can pass the\r\n          // entire character code to `getCharFromCode`.\r\n          char0 = (char0 & 0x03) << 8;\r\n          text = getCharFromCode(char0 | char1);\r\n          this[this.mode_](packet.pts, text);\r\n          this.column_++; // Append extended characters to caption text\r\n        } else if (this.isExtCharacter(char0, char1)) {\r\n          // Extended characters always follow their \"non-extended\" equivalents.\r\n          // IE if a \"è\" is desired, you'll always receive \"eè\"; non-compliant\r\n          // decoders are supposed to drop the \"è\", while compliant decoders\r\n          // backspace the \"e\" and insert \"è\".\r\n          // Delete the previous character\r\n          if (this.mode_ === 'popOn') {\r\n            this.nonDisplayed_[this.row_].text = this.nonDisplayed_[this.row_].text.slice(0, -1);\r\n          } else {\r\n            this.displayed_[this.row_].text = this.displayed_[this.row_].text.slice(0, -1);\r\n          } // Bitmask char0 so that we can apply character transformations\r\n          // regardless of field and data channel.\r\n          // Then byte-shift to the left and OR with char1 so we can pass the\r\n          // entire character code to `getCharFromCode`.\r\n\r\n          char0 = (char0 & 0x03) << 8;\r\n          text = getCharFromCode(char0 | char1);\r\n          this[this.mode_](packet.pts, text);\r\n          this.column_++; // Process mid-row codes\r\n        } else if (this.isMidRowCode(char0, char1)) {\r\n          // Attributes are not additive, so clear all formatting\r\n          this.clearFormatting(packet.pts); // According to the standard, mid-row codes\r\n          // should be replaced with spaces, so add one now\r\n\r\n          this[this.mode_](packet.pts, ' ');\r\n          this.column_++;\r\n          if ((char1 & 0xe) === 0xe) {\r\n            this.addFormatting(packet.pts, ['i']);\r\n          }\r\n          if ((char1 & 0x1) === 0x1) {\r\n            this.addFormatting(packet.pts, ['u']);\r\n          } // Detect offset control codes and adjust cursor\r\n        } else if (this.isOffsetControlCode(char0, char1)) {\r\n          // Cursor position is set by indent PAC (see below) in 4-column\r\n          // increments, with an additional offset code of 1-3 to reach any\r\n          // of the 32 columns specified by CEA-608. So all we need to do\r\n          // here is increment the column cursor by the given offset.\r\n          const offset = char1 & 0x03; // For an offest value 1-3, set the offset for that caption\r\n          // in the non-displayed array.\r\n\r\n          this.nonDisplayed_[this.row_].offset = offset;\r\n          this.column_ += offset; // Detect PACs (Preamble Address Codes)\r\n        } else if (this.isPAC(char0, char1)) {\r\n          // There's no logic for PAC -> row mapping, so we have to just\r\n          // find the row code in an array and use its index :(\r\n          var row = ROWS.indexOf(data & 0x1f20); // Configure the caption window if we're in roll-up mode\r\n\r\n          if (this.mode_ === 'rollUp') {\r\n            // This implies that the base row is incorrectly set.\r\n            // As per the recommendation in CEA-608(Base Row Implementation), defer to the number\r\n            // of roll-up rows set.\r\n            if (row - this.rollUpRows_ + 1 < 0) {\r\n              row = this.rollUpRows_ - 1;\r\n            }\r\n            this.setRollUp(packet.pts, row);\r\n          } // Ensure the row is between 0 and 14, otherwise use the most\r\n          // recent or default row.\r\n\r\n          if (row !== this.row_ && row >= 0 && row <= 14) {\r\n            // formatting is only persistent for current row\r\n            this.clearFormatting(packet.pts);\r\n            this.row_ = row;\r\n          } // All PACs can apply underline, so detect and apply\r\n          // (All odd-numbered second bytes set underline)\r\n\r\n          if (char1 & 0x1 && this.formatting_.indexOf('u') === -1) {\r\n            this.addFormatting(packet.pts, ['u']);\r\n          }\r\n          if ((data & 0x10) === 0x10) {\r\n            // We've got an indent level code. Each successive even number\r\n            // increments the column cursor by 4, so we can get the desired\r\n            // column position by bit-shifting to the right (to get n/2)\r\n            // and multiplying by 4.\r\n            const indentations = (data & 0xe) >> 1;\r\n            this.column_ = indentations * 4; // add to the number of indentations for positioning\r\n\r\n            this.nonDisplayed_[this.row_].indent += indentations;\r\n          }\r\n          if (this.isColorPAC(char1)) {\r\n            // it's a color code, though we only support white, which\r\n            // can be either normal or italicized. white italics can be\r\n            // either 0x4e or 0x6e depending on the row, so we just\r\n            // bitwise-and with 0xe to see if italics should be turned on\r\n            if ((char1 & 0xe) === 0xe) {\r\n              this.addFormatting(packet.pts, ['i']);\r\n            }\r\n          } // We have a normal character in char0, and possibly one in char1\r\n        } else if (this.isNormalChar(char0)) {\r\n          if (char1 === 0x00) {\r\n            char1 = null;\r\n          }\r\n          text = getCharFromCode(char0);\r\n          text += getCharFromCode(char1);\r\n          this[this.mode_](packet.pts, text);\r\n          this.column_ += text.length;\r\n        } // finish data processing\r\n      };\r\n    };\r\n    Cea608Stream.prototype = new Stream$7(); // Trigger a cue point that captures the current state of the\r\n    // display buffer\r\n\r\n    Cea608Stream.prototype.flushDisplayed = function (pts) {\r\n      const logWarning = index => {\r\n        this.trigger('log', {\r\n          level: 'warn',\r\n          message: 'Skipping a malformed 608 caption at index ' + index + '.'\r\n        });\r\n      };\r\n      const content = [];\r\n      this.displayed_.forEach((row, i) => {\r\n        if (row && row.text && row.text.length) {\r\n          try {\r\n            // remove spaces from the start and end of the string\r\n            row.text = row.text.trim();\r\n          } catch (e) {\r\n            // Ordinarily, this shouldn't happen. However, caption\r\n            // parsing errors should not throw exceptions and\r\n            // break playback.\r\n            logWarning(i);\r\n          } // See the below link for more details on the following fields:\r\n          // https://dvcs.w3.org/hg/text-tracks/raw-file/default/608toVTT/608toVTT.html#positioning-in-cea-608\r\n\r\n          if (row.text.length) {\r\n            content.push({\r\n              // The text to be displayed in the caption from this specific row, with whitespace removed.\r\n              text: row.text,\r\n              // Value between 1 and 15 representing the PAC row used to calculate line height.\r\n              line: i + 1,\r\n              // A number representing the indent position by percentage (CEA-608 PAC indent code).\r\n              // The value will be a number between 10 and 80. Offset is used to add an aditional\r\n              // value to the position if necessary.\r\n              position: 10 + Math.min(70, row.indent * 10) + row.offset * 2.5\r\n            });\r\n          }\r\n        } else if (row === undefined || row === null) {\r\n          logWarning(i);\r\n        }\r\n      });\r\n      if (content.length) {\r\n        this.trigger('data', {\r\n          startPts: this.startPts_,\r\n          endPts: pts,\r\n          content,\r\n          stream: this.name_\r\n        });\r\n      }\r\n    };\r\n    /**\r\n     * Zero out the data, used for startup and on seek\r\n     */\r\n\r\n    Cea608Stream.prototype.reset = function () {\r\n      this.mode_ = 'popOn'; // When in roll-up mode, the index of the last row that will\r\n      // actually display captions. If a caption is shifted to a row\r\n      // with a lower index than this, it is cleared from the display\r\n      // buffer\r\n\r\n      this.topRow_ = 0;\r\n      this.startPts_ = 0;\r\n      this.displayed_ = createDisplayBuffer();\r\n      this.nonDisplayed_ = createDisplayBuffer();\r\n      this.lastControlCode_ = null; // Track row and column for proper line-breaking and spacing\r\n\r\n      this.column_ = 0;\r\n      this.row_ = BOTTOM_ROW;\r\n      this.rollUpRows_ = 2; // This variable holds currently-applied formatting\r\n\r\n      this.formatting_ = [];\r\n    };\r\n    /**\r\n     * Sets up control code and related constants for this instance\r\n     */\r\n\r\n    Cea608Stream.prototype.setConstants = function () {\r\n      // The following attributes have these uses:\r\n      // ext_ :    char0 for mid-row codes, and the base for extended\r\n      //           chars (ext_+0, ext_+1, and ext_+2 are char0s for\r\n      //           extended codes)\r\n      // control_: char0 for control codes, except byte-shifted to the\r\n      //           left so that we can do this.control_ | CONTROL_CODE\r\n      // offset_:  char0 for tab offset codes\r\n      //\r\n      // It's also worth noting that control codes, and _only_ control codes,\r\n      // differ between field 1 and field2. Field 2 control codes are always\r\n      // their field 1 value plus 1. That's why there's the \"| field\" on the\r\n      // control value.\r\n      if (this.dataChannel_ === 0) {\r\n        this.BASE_ = 0x10;\r\n        this.EXT_ = 0x11;\r\n        this.CONTROL_ = (0x14 | this.field_) << 8;\r\n        this.OFFSET_ = 0x17;\r\n      } else if (this.dataChannel_ === 1) {\r\n        this.BASE_ = 0x18;\r\n        this.EXT_ = 0x19;\r\n        this.CONTROL_ = (0x1c | this.field_) << 8;\r\n        this.OFFSET_ = 0x1f;\r\n      } // Constants for the LSByte command codes recognized by Cea608Stream. This\r\n      // list is not exhaustive. For a more comprehensive listing and semantics see\r\n      // http://www.gpo.gov/fdsys/pkg/CFR-2010-title47-vol1/pdf/CFR-2010-title47-vol1-sec15-119.pdf\r\n      // Padding\r\n\r\n      this.PADDING_ = 0x0000; // Pop-on Mode\r\n\r\n      this.RESUME_CAPTION_LOADING_ = this.CONTROL_ | 0x20;\r\n      this.END_OF_CAPTION_ = this.CONTROL_ | 0x2f; // Roll-up Mode\r\n\r\n      this.ROLL_UP_2_ROWS_ = this.CONTROL_ | 0x25;\r\n      this.ROLL_UP_3_ROWS_ = this.CONTROL_ | 0x26;\r\n      this.ROLL_UP_4_ROWS_ = this.CONTROL_ | 0x27;\r\n      this.CARRIAGE_RETURN_ = this.CONTROL_ | 0x2d; // paint-on mode\r\n\r\n      this.RESUME_DIRECT_CAPTIONING_ = this.CONTROL_ | 0x29; // Erasure\r\n\r\n      this.BACKSPACE_ = this.CONTROL_ | 0x21;\r\n      this.ERASE_DISPLAYED_MEMORY_ = this.CONTROL_ | 0x2c;\r\n      this.ERASE_NON_DISPLAYED_MEMORY_ = this.CONTROL_ | 0x2e;\r\n    };\r\n    /**\r\n     * Detects if the 2-byte packet data is a special character\r\n     *\r\n     * Special characters have a second byte in the range 0x30 to 0x3f,\r\n     * with the first byte being 0x11 (for data channel 1) or 0x19 (for\r\n     * data channel 2).\r\n     *\r\n     * @param  {Integer} char0 The first byte\r\n     * @param  {Integer} char1 The second byte\r\n     * @return {Boolean}       Whether the 2 bytes are an special character\r\n     */\r\n\r\n    Cea608Stream.prototype.isSpecialCharacter = function (char0, char1) {\r\n      return char0 === this.EXT_ && char1 >= 0x30 && char1 <= 0x3f;\r\n    };\r\n    /**\r\n     * Detects if the 2-byte packet data is an extended character\r\n     *\r\n     * Extended characters have a second byte in the range 0x20 to 0x3f,\r\n     * with the first byte being 0x12 or 0x13 (for data channel 1) or\r\n     * 0x1a or 0x1b (for data channel 2).\r\n     *\r\n     * @param  {Integer} char0 The first byte\r\n     * @param  {Integer} char1 The second byte\r\n     * @return {Boolean}       Whether the 2 bytes are an extended character\r\n     */\r\n\r\n    Cea608Stream.prototype.isExtCharacter = function (char0, char1) {\r\n      return (char0 === this.EXT_ + 1 || char0 === this.EXT_ + 2) && char1 >= 0x20 && char1 <= 0x3f;\r\n    };\r\n    /**\r\n     * Detects if the 2-byte packet is a mid-row code\r\n     *\r\n     * Mid-row codes have a second byte in the range 0x20 to 0x2f, with\r\n     * the first byte being 0x11 (for data channel 1) or 0x19 (for data\r\n     * channel 2).\r\n     *\r\n     * @param  {Integer} char0 The first byte\r\n     * @param  {Integer} char1 The second byte\r\n     * @return {Boolean}       Whether the 2 bytes are a mid-row code\r\n     */\r\n\r\n    Cea608Stream.prototype.isMidRowCode = function (char0, char1) {\r\n      return char0 === this.EXT_ && char1 >= 0x20 && char1 <= 0x2f;\r\n    };\r\n    /**\r\n     * Detects if the 2-byte packet is an offset control code\r\n     *\r\n     * Offset control codes have a second byte in the range 0x21 to 0x23,\r\n     * with the first byte being 0x17 (for data channel 1) or 0x1f (for\r\n     * data channel 2).\r\n     *\r\n     * @param  {Integer} char0 The first byte\r\n     * @param  {Integer} char1 The second byte\r\n     * @return {Boolean}       Whether the 2 bytes are an offset control code\r\n     */\r\n\r\n    Cea608Stream.prototype.isOffsetControlCode = function (char0, char1) {\r\n      return char0 === this.OFFSET_ && char1 >= 0x21 && char1 <= 0x23;\r\n    };\r\n    /**\r\n     * Detects if the 2-byte packet is a Preamble Address Code\r\n     *\r\n     * PACs have a first byte in the range 0x10 to 0x17 (for data channel 1)\r\n     * or 0x18 to 0x1f (for data channel 2), with the second byte in the\r\n     * range 0x40 to 0x7f.\r\n     *\r\n     * @param  {Integer} char0 The first byte\r\n     * @param  {Integer} char1 The second byte\r\n     * @return {Boolean}       Whether the 2 bytes are a PAC\r\n     */\r\n\r\n    Cea608Stream.prototype.isPAC = function (char0, char1) {\r\n      return char0 >= this.BASE_ && char0 < this.BASE_ + 8 && char1 >= 0x40 && char1 <= 0x7f;\r\n    };\r\n    /**\r\n     * Detects if a packet's second byte is in the range of a PAC color code\r\n     *\r\n     * PAC color codes have the second byte be in the range 0x40 to 0x4f, or\r\n     * 0x60 to 0x6f.\r\n     *\r\n     * @param  {Integer} char1 The second byte\r\n     * @return {Boolean}       Whether the byte is a color PAC\r\n     */\r\n\r\n    Cea608Stream.prototype.isColorPAC = function (char1) {\r\n      return char1 >= 0x40 && char1 <= 0x4f || char1 >= 0x60 && char1 <= 0x7f;\r\n    };\r\n    /**\r\n     * Detects if a single byte is in the range of a normal character\r\n     *\r\n     * Normal text bytes are in the range 0x20 to 0x7f.\r\n     *\r\n     * @param  {Integer} char  The byte\r\n     * @return {Boolean}       Whether the byte is a normal character\r\n     */\r\n\r\n    Cea608Stream.prototype.isNormalChar = function (char) {\r\n      return char >= 0x20 && char <= 0x7f;\r\n    };\r\n    /**\r\n     * Configures roll-up\r\n     *\r\n     * @param  {Integer} pts         Current PTS\r\n     * @param  {Integer} newBaseRow  Used by PACs to slide the current window to\r\n     *                               a new position\r\n     */\r\n\r\n    Cea608Stream.prototype.setRollUp = function (pts, newBaseRow) {\r\n      // Reset the base row to the bottom row when switching modes\r\n      if (this.mode_ !== 'rollUp') {\r\n        this.row_ = BOTTOM_ROW;\r\n        this.mode_ = 'rollUp'; // Spec says to wipe memories when switching to roll-up\r\n\r\n        this.flushDisplayed(pts);\r\n        this.nonDisplayed_ = createDisplayBuffer();\r\n        this.displayed_ = createDisplayBuffer();\r\n      }\r\n      if (newBaseRow !== undefined && newBaseRow !== this.row_) {\r\n        // move currently displayed captions (up or down) to the new base row\r\n        for (var i = 0; i < this.rollUpRows_; i++) {\r\n          this.displayed_[newBaseRow - i] = this.displayed_[this.row_ - i];\r\n          this.displayed_[this.row_ - i] = {\r\n            text: '',\r\n            indent: 0,\r\n            offset: 0\r\n          };\r\n        }\r\n      }\r\n      if (newBaseRow === undefined) {\r\n        newBaseRow = this.row_;\r\n      }\r\n      this.topRow_ = newBaseRow - this.rollUpRows_ + 1;\r\n    }; // Adds the opening HTML tag for the passed character to the caption text,\r\n    // and keeps track of it for later closing\r\n\r\n    Cea608Stream.prototype.addFormatting = function (pts, format) {\r\n      this.formatting_ = this.formatting_.concat(format);\r\n      var text = format.reduce(function (text, format) {\r\n        return text + '<' + format + '>';\r\n      }, '');\r\n      this[this.mode_](pts, text);\r\n    }; // Adds HTML closing tags for current formatting to caption text and\r\n    // clears remembered formatting\r\n\r\n    Cea608Stream.prototype.clearFormatting = function (pts) {\r\n      if (!this.formatting_.length) {\r\n        return;\r\n      }\r\n      var text = this.formatting_.reverse().reduce(function (text, format) {\r\n        return text + '</' + format + '>';\r\n      }, '');\r\n      this.formatting_ = [];\r\n      this[this.mode_](pts, text);\r\n    }; // Mode Implementations\r\n\r\n    Cea608Stream.prototype.popOn = function (pts, text) {\r\n      var baseRow = this.nonDisplayed_[this.row_].text; // buffer characters\r\n\r\n      baseRow += text;\r\n      this.nonDisplayed_[this.row_].text = baseRow;\r\n    };\r\n    Cea608Stream.prototype.rollUp = function (pts, text) {\r\n      var baseRow = this.displayed_[this.row_].text;\r\n      baseRow += text;\r\n      this.displayed_[this.row_].text = baseRow;\r\n    };\r\n    Cea608Stream.prototype.shiftRowsUp_ = function () {\r\n      var i; // clear out inactive rows\r\n\r\n      for (i = 0; i < this.topRow_; i++) {\r\n        this.displayed_[i] = {\r\n          text: '',\r\n          indent: 0,\r\n          offset: 0\r\n        };\r\n      }\r\n      for (i = this.row_ + 1; i < BOTTOM_ROW + 1; i++) {\r\n        this.displayed_[i] = {\r\n          text: '',\r\n          indent: 0,\r\n          offset: 0\r\n        };\r\n      } // shift displayed rows up\r\n\r\n      for (i = this.topRow_; i < this.row_; i++) {\r\n        this.displayed_[i] = this.displayed_[i + 1];\r\n      } // clear out the bottom row\r\n\r\n      this.displayed_[this.row_] = {\r\n        text: '',\r\n        indent: 0,\r\n        offset: 0\r\n      };\r\n    };\r\n    Cea608Stream.prototype.paintOn = function (pts, text) {\r\n      var baseRow = this.displayed_[this.row_].text;\r\n      baseRow += text;\r\n      this.displayed_[this.row_].text = baseRow;\r\n    }; // exports\r\n\r\n    var captionStream = {\r\n      CaptionStream: CaptionStream$2,\r\n      Cea608Stream: Cea608Stream,\r\n      Cea708Stream: Cea708Stream\r\n    };\r\n    /**\r\n     * mux.js\r\n     *\r\n     * Copyright (c) Brightcove\r\n     * Licensed Apache-2.0 https://github.com/videojs/mux.js/blob/master/LICENSE\r\n     */\r\n\r\n    var streamTypes = {\r\n      H264_STREAM_TYPE: 0x1B,\r\n      ADTS_STREAM_TYPE: 0x0F,\r\n      METADATA_STREAM_TYPE: 0x15\r\n    };\r\n    /**\r\n     * mux.js\r\n     *\r\n     * Copyright (c) Brightcove\r\n     * Licensed Apache-2.0 https://github.com/videojs/mux.js/blob/master/LICENSE\r\n     *\r\n     * Accepts program elementary stream (PES) data events and corrects\r\n     * decode and presentation time stamps to account for a rollover\r\n     * of the 33 bit value.\r\n     */\r\n\r\n    var Stream$6 = stream;\r\n    var MAX_TS = 8589934592;\r\n    var RO_THRESH = 4294967296;\r\n    var TYPE_SHARED = 'shared';\r\n    var handleRollover$1 = function (value, reference) {\r\n      var direction = 1;\r\n      if (value > reference) {\r\n        // If the current timestamp value is greater than our reference timestamp and we detect a\r\n        // timestamp rollover, this means the roll over is happening in the opposite direction.\r\n        // Example scenario: Enter a long stream/video just after a rollover occurred. The reference\r\n        // point will be set to a small number, e.g. 1. The user then seeks backwards over the\r\n        // rollover point. In loading this segment, the timestamp values will be very large,\r\n        // e.g. 2^33 - 1. Since this comes before the data we loaded previously, we want to adjust\r\n        // the time stamp to be `value - 2^33`.\r\n        direction = -1;\r\n      } // Note: A seek forwards or back that is greater than the RO_THRESH (2^32, ~13 hours) will\r\n      // cause an incorrect adjustment.\r\n\r\n      while (Math.abs(reference - value) > RO_THRESH) {\r\n        value += direction * MAX_TS;\r\n      }\r\n      return value;\r\n    };\r\n    var TimestampRolloverStream$1 = function (type) {\r\n      var lastDTS, referenceDTS;\r\n      TimestampRolloverStream$1.prototype.init.call(this); // The \"shared\" type is used in cases where a stream will contain muxed\r\n      // video and audio. We could use `undefined` here, but having a string\r\n      // makes debugging a little clearer.\r\n\r\n      this.type_ = type || TYPE_SHARED;\r\n      this.push = function (data) {\r\n        /**\r\n         * Rollover stream expects data from elementary stream.\r\n         * Elementary stream can push forward 2 types of data\r\n         * - Parsed Video/Audio/Timed-metadata PES (packetized elementary stream) packets\r\n         * - Tracks metadata from PMT (Program Map Table)\r\n         * Rollover stream expects pts/dts info to be available, since it stores lastDTS\r\n         * We should ignore non-PES packets since they may override lastDTS to undefined.\r\n         * lastDTS is important to signal the next segments\r\n         * about rollover from the previous segments.\r\n         */\r\n        if (data.type === 'metadata') {\r\n          this.trigger('data', data);\r\n          return;\r\n        } // Any \"shared\" rollover streams will accept _all_ data. Otherwise,\r\n        // streams will only accept data that matches their type.\r\n\r\n        if (this.type_ !== TYPE_SHARED && data.type !== this.type_) {\r\n          return;\r\n        }\r\n        if (referenceDTS === undefined) {\r\n          referenceDTS = data.dts;\r\n        }\r\n        data.dts = handleRollover$1(data.dts, referenceDTS);\r\n        data.pts = handleRollover$1(data.pts, referenceDTS);\r\n        lastDTS = data.dts;\r\n        this.trigger('data', data);\r\n      };\r\n      this.flush = function () {\r\n        referenceDTS = lastDTS;\r\n        this.trigger('done');\r\n      };\r\n      this.endTimeline = function () {\r\n        this.flush();\r\n        this.trigger('endedtimeline');\r\n      };\r\n      this.discontinuity = function () {\r\n        referenceDTS = void 0;\r\n        lastDTS = void 0;\r\n      };\r\n      this.reset = function () {\r\n        this.discontinuity();\r\n        this.trigger('reset');\r\n      };\r\n    };\r\n    TimestampRolloverStream$1.prototype = new Stream$6();\r\n    var timestampRolloverStream = {\r\n      TimestampRolloverStream: TimestampRolloverStream$1,\r\n      handleRollover: handleRollover$1\r\n    }; // Once IE11 support is dropped, this function should be removed.\r\n\r\n    var typedArrayIndexOf$1 = (typedArray, element, fromIndex) => {\r\n      if (!typedArray) {\r\n        return -1;\r\n      }\r\n      var currentIndex = fromIndex;\r\n      for (; currentIndex < typedArray.length; currentIndex++) {\r\n        if (typedArray[currentIndex] === element) {\r\n          return currentIndex;\r\n        }\r\n      }\r\n      return -1;\r\n    };\r\n    var typedArray = {\r\n      typedArrayIndexOf: typedArrayIndexOf$1\r\n    };\r\n    /**\r\n     * mux.js\r\n     *\r\n     * Copyright (c) Brightcove\r\n     * Licensed Apache-2.0 https://github.com/videojs/mux.js/blob/master/LICENSE\r\n     *\r\n     * Tools for parsing ID3 frame data\r\n     * @see http://id3.org/id3v2.3.0\r\n     */\r\n\r\n    var typedArrayIndexOf = typedArray.typedArrayIndexOf,\r\n      // Frames that allow different types of text encoding contain a text\r\n      // encoding description byte [ID3v2.4.0 section 4.]\r\n      textEncodingDescriptionByte = {\r\n        Iso88591: 0x00,\r\n        // ISO-8859-1, terminated with \\0.\r\n        Utf16: 0x01,\r\n        // UTF-16 encoded Unicode BOM, terminated with \\0\\0\r\n        Utf16be: 0x02,\r\n        // UTF-16BE encoded Unicode, without BOM, terminated with \\0\\0\r\n        Utf8: 0x03 // UTF-8 encoded Unicode, terminated with \\0\r\n      },\r\n      // return a percent-encoded representation of the specified byte range\r\n      // @see http://en.wikipedia.org/wiki/Percent-encoding\r\n      percentEncode$1 = function (bytes, start, end) {\r\n        var i,\r\n          result = '';\r\n        for (i = start; i < end; i++) {\r\n          result += '%' + ('00' + bytes[i].toString(16)).slice(-2);\r\n        }\r\n        return result;\r\n      },\r\n      // return the string representation of the specified byte range,\r\n      // interpreted as UTf-8.\r\n      parseUtf8 = function (bytes, start, end) {\r\n        return decodeURIComponent(percentEncode$1(bytes, start, end));\r\n      },\r\n      // return the string representation of the specified byte range,\r\n      // interpreted as ISO-8859-1.\r\n      parseIso88591$1 = function (bytes, start, end) {\r\n        return unescape(percentEncode$1(bytes, start, end)); // jshint ignore:line\r\n      },\r\n      parseSyncSafeInteger$1 = function (data) {\r\n        return data[0] << 21 | data[1] << 14 | data[2] << 7 | data[3];\r\n      },\r\n      frameParsers = {\r\n        'APIC': function (frame) {\r\n          var i = 1,\r\n            mimeTypeEndIndex,\r\n            descriptionEndIndex,\r\n            LINK_MIME_TYPE = '-->';\r\n          if (frame.data[0] !== textEncodingDescriptionByte.Utf8) {\r\n            // ignore frames with unrecognized character encodings\r\n            return;\r\n          } // parsing fields [ID3v2.4.0 section 4.14.]\r\n\r\n          mimeTypeEndIndex = typedArrayIndexOf(frame.data, 0, i);\r\n          if (mimeTypeEndIndex < 0) {\r\n            // malformed frame\r\n            return;\r\n          } // parsing Mime type field (terminated with \\0)\r\n\r\n          frame.mimeType = parseIso88591$1(frame.data, i, mimeTypeEndIndex);\r\n          i = mimeTypeEndIndex + 1; // parsing 1-byte Picture Type field\r\n\r\n          frame.pictureType = frame.data[i];\r\n          i++;\r\n          descriptionEndIndex = typedArrayIndexOf(frame.data, 0, i);\r\n          if (descriptionEndIndex < 0) {\r\n            // malformed frame\r\n            return;\r\n          } // parsing Description field (terminated with \\0)\r\n\r\n          frame.description = parseUtf8(frame.data, i, descriptionEndIndex);\r\n          i = descriptionEndIndex + 1;\r\n          if (frame.mimeType === LINK_MIME_TYPE) {\r\n            // parsing Picture Data field as URL (always represented as ISO-8859-1 [ID3v2.4.0 section 4.])\r\n            frame.url = parseIso88591$1(frame.data, i, frame.data.length);\r\n          } else {\r\n            // parsing Picture Data field as binary data\r\n            frame.pictureData = frame.data.subarray(i, frame.data.length);\r\n          }\r\n        },\r\n        'T*': function (frame) {\r\n          if (frame.data[0] !== textEncodingDescriptionByte.Utf8) {\r\n            // ignore frames with unrecognized character encodings\r\n            return;\r\n          } // parse text field, do not include null terminator in the frame value\r\n          // frames that allow different types of encoding contain terminated text [ID3v2.4.0 section 4.]\r\n\r\n          frame.value = parseUtf8(frame.data, 1, frame.data.length).replace(/\\0*$/, ''); // text information frames supports multiple strings, stored as a terminator separated list [ID3v2.4.0 section 4.2.]\r\n\r\n          frame.values = frame.value.split('\\0');\r\n        },\r\n        'TXXX': function (frame) {\r\n          var descriptionEndIndex;\r\n          if (frame.data[0] !== textEncodingDescriptionByte.Utf8) {\r\n            // ignore frames with unrecognized character encodings\r\n            return;\r\n          }\r\n          descriptionEndIndex = typedArrayIndexOf(frame.data, 0, 1);\r\n          if (descriptionEndIndex === -1) {\r\n            return;\r\n          } // parse the text fields\r\n\r\n          frame.description = parseUtf8(frame.data, 1, descriptionEndIndex); // do not include the null terminator in the tag value\r\n          // frames that allow different types of encoding contain terminated text\r\n          // [ID3v2.4.0 section 4.]\r\n\r\n          frame.value = parseUtf8(frame.data, descriptionEndIndex + 1, frame.data.length).replace(/\\0*$/, '');\r\n          frame.data = frame.value;\r\n        },\r\n        'W*': function (frame) {\r\n          // parse URL field; URL fields are always represented as ISO-8859-1 [ID3v2.4.0 section 4.]\r\n          // if the value is followed by a string termination all the following information should be ignored [ID3v2.4.0 section 4.3]\r\n          frame.url = parseIso88591$1(frame.data, 0, frame.data.length).replace(/\\0.*$/, '');\r\n        },\r\n        'WXXX': function (frame) {\r\n          var descriptionEndIndex;\r\n          if (frame.data[0] !== textEncodingDescriptionByte.Utf8) {\r\n            // ignore frames with unrecognized character encodings\r\n            return;\r\n          }\r\n          descriptionEndIndex = typedArrayIndexOf(frame.data, 0, 1);\r\n          if (descriptionEndIndex === -1) {\r\n            return;\r\n          } // parse the description and URL fields\r\n\r\n          frame.description = parseUtf8(frame.data, 1, descriptionEndIndex); // URL fields are always represented as ISO-8859-1 [ID3v2.4.0 section 4.]\r\n          // if the value is followed by a string termination all the following information\r\n          // should be ignored [ID3v2.4.0 section 4.3]\r\n\r\n          frame.url = parseIso88591$1(frame.data, descriptionEndIndex + 1, frame.data.length).replace(/\\0.*$/, '');\r\n        },\r\n        'PRIV': function (frame) {\r\n          var i;\r\n          for (i = 0; i < frame.data.length; i++) {\r\n            if (frame.data[i] === 0) {\r\n              // parse the description and URL fields\r\n              frame.owner = parseIso88591$1(frame.data, 0, i);\r\n              break;\r\n            }\r\n          }\r\n          frame.privateData = frame.data.subarray(i + 1);\r\n          frame.data = frame.privateData;\r\n        }\r\n      };\r\n    var parseId3Frames$1 = function (data) {\r\n      var frameSize,\r\n        frameHeader,\r\n        frameStart = 10,\r\n        tagSize = 0,\r\n        frames = []; // If we don't have enough data for a header, 10 bytes,\r\n      // or 'ID3' in the first 3 bytes this is not a valid ID3 tag.\r\n\r\n      if (data.length < 10 || data[0] !== 'I'.charCodeAt(0) || data[1] !== 'D'.charCodeAt(0) || data[2] !== '3'.charCodeAt(0)) {\r\n        return;\r\n      } // the frame size is transmitted as a 28-bit integer in the\r\n      // last four bytes of the ID3 header.\r\n      // The most significant bit of each byte is dropped and the\r\n      // results concatenated to recover the actual value.\r\n\r\n      tagSize = parseSyncSafeInteger$1(data.subarray(6, 10)); // ID3 reports the tag size excluding the header but it's more\r\n      // convenient for our comparisons to include it\r\n\r\n      tagSize += 10; // check bit 6 of byte 5 for the extended header flag.\r\n\r\n      var hasExtendedHeader = data[5] & 0x40;\r\n      if (hasExtendedHeader) {\r\n        // advance the frame start past the extended header\r\n        frameStart += 4; // header size field\r\n\r\n        frameStart += parseSyncSafeInteger$1(data.subarray(10, 14));\r\n        tagSize -= parseSyncSafeInteger$1(data.subarray(16, 20)); // clip any padding off the end\r\n      } // parse one or more ID3 frames\r\n      // http://id3.org/id3v2.3.0#ID3v2_frame_overview\r\n\r\n      do {\r\n        // determine the number of bytes in this frame\r\n        frameSize = parseSyncSafeInteger$1(data.subarray(frameStart + 4, frameStart + 8));\r\n        if (frameSize < 1) {\r\n          break;\r\n        }\r\n        frameHeader = String.fromCharCode(data[frameStart], data[frameStart + 1], data[frameStart + 2], data[frameStart + 3]);\r\n        var frame = {\r\n          id: frameHeader,\r\n          data: data.subarray(frameStart + 10, frameStart + frameSize + 10)\r\n        };\r\n        frame.key = frame.id; // parse frame values\r\n\r\n        if (frameParsers[frame.id]) {\r\n          // use frame specific parser\r\n          frameParsers[frame.id](frame);\r\n        } else if (frame.id[0] === 'T') {\r\n          // use text frame generic parser\r\n          frameParsers['T*'](frame);\r\n        } else if (frame.id[0] === 'W') {\r\n          // use URL link frame generic parser\r\n          frameParsers['W*'](frame);\r\n        }\r\n        frames.push(frame);\r\n        frameStart += 10; // advance past the frame header\r\n\r\n        frameStart += frameSize; // advance past the frame body\r\n      } while (frameStart < tagSize);\r\n      return frames;\r\n    };\r\n    var parseId3 = {\r\n      parseId3Frames: parseId3Frames$1,\r\n      parseSyncSafeInteger: parseSyncSafeInteger$1,\r\n      frameParsers: frameParsers\r\n    };\r\n    /**\r\n     * mux.js\r\n     *\r\n     * Copyright (c) Brightcove\r\n     * Licensed Apache-2.0 https://github.com/videojs/mux.js/blob/master/LICENSE\r\n     *\r\n     * Accepts program elementary stream (PES) data events and parses out\r\n     * ID3 metadata from them, if present.\r\n     * @see http://id3.org/id3v2.3.0\r\n     */\r\n\r\n    var Stream$5 = stream,\r\n      StreamTypes$3 = streamTypes,\r\n      id3 = parseId3,\r\n      MetadataStream;\r\n    MetadataStream = function (options) {\r\n      var settings = {\r\n          // the bytes of the program-level descriptor field in MP2T\r\n          // see ISO/IEC 13818-1:2013 (E), section 2.6 \"Program and\r\n          // program element descriptors\"\r\n          descriptor: options && options.descriptor\r\n        },\r\n        // the total size in bytes of the ID3 tag being parsed\r\n        tagSize = 0,\r\n        // tag data that is not complete enough to be parsed\r\n        buffer = [],\r\n        // the total number of bytes currently in the buffer\r\n        bufferSize = 0,\r\n        i;\r\n      MetadataStream.prototype.init.call(this); // calculate the text track in-band metadata track dispatch type\r\n      // https://html.spec.whatwg.org/multipage/embedded-content.html#steps-to-expose-a-media-resource-specific-text-track\r\n\r\n      this.dispatchType = StreamTypes$3.METADATA_STREAM_TYPE.toString(16);\r\n      if (settings.descriptor) {\r\n        for (i = 0; i < settings.descriptor.length; i++) {\r\n          this.dispatchType += ('00' + settings.descriptor[i].toString(16)).slice(-2);\r\n        }\r\n      }\r\n      this.push = function (chunk) {\r\n        var tag, frameStart, frameSize, frame, i, frameHeader;\r\n        if (chunk.type !== 'timed-metadata') {\r\n          return;\r\n        } // if data_alignment_indicator is set in the PES header,\r\n        // we must have the start of a new ID3 tag. Assume anything\r\n        // remaining in the buffer was malformed and throw it out\r\n\r\n        if (chunk.dataAlignmentIndicator) {\r\n          bufferSize = 0;\r\n          buffer.length = 0;\r\n        } // ignore events that don't look like ID3 data\r\n\r\n        if (buffer.length === 0 && (chunk.data.length < 10 || chunk.data[0] !== 'I'.charCodeAt(0) || chunk.data[1] !== 'D'.charCodeAt(0) || chunk.data[2] !== '3'.charCodeAt(0))) {\r\n          this.trigger('log', {\r\n            level: 'warn',\r\n            message: 'Skipping unrecognized metadata packet'\r\n          });\r\n          return;\r\n        } // add this chunk to the data we've collected so far\r\n\r\n        buffer.push(chunk);\r\n        bufferSize += chunk.data.byteLength; // grab the size of the entire frame from the ID3 header\r\n\r\n        if (buffer.length === 1) {\r\n          // the frame size is transmitted as a 28-bit integer in the\r\n          // last four bytes of the ID3 header.\r\n          // The most significant bit of each byte is dropped and the\r\n          // results concatenated to recover the actual value.\r\n          tagSize = id3.parseSyncSafeInteger(chunk.data.subarray(6, 10)); // ID3 reports the tag size excluding the header but it's more\r\n          // convenient for our comparisons to include it\r\n\r\n          tagSize += 10;\r\n        } // if the entire frame has not arrived, wait for more data\r\n\r\n        if (bufferSize < tagSize) {\r\n          return;\r\n        } // collect the entire frame so it can be parsed\r\n\r\n        tag = {\r\n          data: new Uint8Array(tagSize),\r\n          frames: [],\r\n          pts: buffer[0].pts,\r\n          dts: buffer[0].dts\r\n        };\r\n        for (i = 0; i < tagSize;) {\r\n          tag.data.set(buffer[0].data.subarray(0, tagSize - i), i);\r\n          i += buffer[0].data.byteLength;\r\n          bufferSize -= buffer[0].data.byteLength;\r\n          buffer.shift();\r\n        } // find the start of the first frame and the end of the tag\r\n\r\n        frameStart = 10;\r\n        if (tag.data[5] & 0x40) {\r\n          // advance the frame start past the extended header\r\n          frameStart += 4; // header size field\r\n\r\n          frameStart += id3.parseSyncSafeInteger(tag.data.subarray(10, 14)); // clip any padding off the end\r\n\r\n          tagSize -= id3.parseSyncSafeInteger(tag.data.subarray(16, 20));\r\n        } // parse one or more ID3 frames\r\n        // http://id3.org/id3v2.3.0#ID3v2_frame_overview\r\n\r\n        do {\r\n          // determine the number of bytes in this frame\r\n          frameSize = id3.parseSyncSafeInteger(tag.data.subarray(frameStart + 4, frameStart + 8));\r\n          if (frameSize < 1) {\r\n            this.trigger('log', {\r\n              level: 'warn',\r\n              message: 'Malformed ID3 frame encountered. Skipping remaining metadata parsing.'\r\n            }); // If the frame is malformed, don't parse any further frames but allow previous valid parsed frames\r\n            // to be sent along.\r\n\r\n            break;\r\n          }\r\n          frameHeader = String.fromCharCode(tag.data[frameStart], tag.data[frameStart + 1], tag.data[frameStart + 2], tag.data[frameStart + 3]);\r\n          frame = {\r\n            id: frameHeader,\r\n            data: tag.data.subarray(frameStart + 10, frameStart + frameSize + 10)\r\n          };\r\n          frame.key = frame.id; // parse frame values\r\n\r\n          if (id3.frameParsers[frame.id]) {\r\n            // use frame specific parser\r\n            id3.frameParsers[frame.id](frame);\r\n          } else if (frame.id[0] === 'T') {\r\n            // use text frame generic parser\r\n            id3.frameParsers['T*'](frame);\r\n          } else if (frame.id[0] === 'W') {\r\n            // use URL link frame generic parser\r\n            id3.frameParsers['W*'](frame);\r\n          } // handle the special PRIV frame used to indicate the start\r\n          // time for raw AAC data\r\n\r\n          if (frame.owner === 'com.apple.streaming.transportStreamTimestamp') {\r\n            var d = frame.data,\r\n              size = (d[3] & 0x01) << 30 | d[4] << 22 | d[5] << 14 | d[6] << 6 | d[7] >>> 2;\r\n            size *= 4;\r\n            size += d[7] & 0x03;\r\n            frame.timeStamp = size; // in raw AAC, all subsequent data will be timestamped based\r\n            // on the value of this frame\r\n            // we couldn't have known the appropriate pts and dts before\r\n            // parsing this ID3 tag so set those values now\r\n\r\n            if (tag.pts === undefined && tag.dts === undefined) {\r\n              tag.pts = frame.timeStamp;\r\n              tag.dts = frame.timeStamp;\r\n            }\r\n            this.trigger('timestamp', frame);\r\n          }\r\n          tag.frames.push(frame);\r\n          frameStart += 10; // advance past the frame header\r\n\r\n          frameStart += frameSize; // advance past the frame body\r\n        } while (frameStart < tagSize);\r\n        this.trigger('data', tag);\r\n      };\r\n    };\r\n    MetadataStream.prototype = new Stream$5();\r\n    var metadataStream = MetadataStream;\r\n    /**\r\n     * mux.js\r\n     *\r\n     * Copyright (c) Brightcove\r\n     * Licensed Apache-2.0 https://github.com/videojs/mux.js/blob/master/LICENSE\r\n     *\r\n     * A stream-based mp2t to mp4 converter. This utility can be used to\r\n     * deliver mp4s to a SourceBuffer on platforms that support native\r\n     * Media Source Extensions.\r\n     */\r\n\r\n    var Stream$4 = stream,\r\n      CaptionStream$1 = captionStream,\r\n      StreamTypes$2 = streamTypes,\r\n      TimestampRolloverStream = timestampRolloverStream.TimestampRolloverStream; // object types\r\n\r\n    var TransportPacketStream, TransportParseStream, ElementaryStream; // constants\r\n\r\n    var MP2T_PACKET_LENGTH$1 = 188,\r\n      // bytes\r\n      SYNC_BYTE$1 = 0x47;\r\n    /**\r\n     * Splits an incoming stream of binary data into MPEG-2 Transport\r\n     * Stream packets.\r\n     */\r\n\r\n    TransportPacketStream = function () {\r\n      var buffer = new Uint8Array(MP2T_PACKET_LENGTH$1),\r\n        bytesInBuffer = 0;\r\n      TransportPacketStream.prototype.init.call(this); // Deliver new bytes to the stream.\r\n\r\n      /**\r\n       * Split a stream of data into M2TS packets\r\n      **/\r\n\r\n      this.push = function (bytes) {\r\n        var startIndex = 0,\r\n          endIndex = MP2T_PACKET_LENGTH$1,\r\n          everything; // If there are bytes remaining from the last segment, prepend them to the\r\n        // bytes that were pushed in\r\n\r\n        if (bytesInBuffer) {\r\n          everything = new Uint8Array(bytes.byteLength + bytesInBuffer);\r\n          everything.set(buffer.subarray(0, bytesInBuffer));\r\n          everything.set(bytes, bytesInBuffer);\r\n          bytesInBuffer = 0;\r\n        } else {\r\n          everything = bytes;\r\n        } // While we have enough data for a packet\r\n\r\n        while (endIndex < everything.byteLength) {\r\n          // Look for a pair of start and end sync bytes in the data..\r\n          if (everything[startIndex] === SYNC_BYTE$1 && everything[endIndex] === SYNC_BYTE$1) {\r\n            // We found a packet so emit it and jump one whole packet forward in\r\n            // the stream\r\n            this.trigger('data', everything.subarray(startIndex, endIndex));\r\n            startIndex += MP2T_PACKET_LENGTH$1;\r\n            endIndex += MP2T_PACKET_LENGTH$1;\r\n            continue;\r\n          } // If we get here, we have somehow become de-synchronized and we need to step\r\n          // forward one byte at a time until we find a pair of sync bytes that denote\r\n          // a packet\r\n\r\n          startIndex++;\r\n          endIndex++;\r\n        } // If there was some data left over at the end of the segment that couldn't\r\n        // possibly be a whole packet, keep it because it might be the start of a packet\r\n        // that continues in the next segment\r\n\r\n        if (startIndex < everything.byteLength) {\r\n          buffer.set(everything.subarray(startIndex), 0);\r\n          bytesInBuffer = everything.byteLength - startIndex;\r\n        }\r\n      };\r\n      /**\r\n       * Passes identified M2TS packets to the TransportParseStream to be parsed\r\n      **/\r\n\r\n      this.flush = function () {\r\n        // If the buffer contains a whole packet when we are being flushed, emit it\r\n        // and empty the buffer. Otherwise hold onto the data because it may be\r\n        // important for decoding the next segment\r\n        if (bytesInBuffer === MP2T_PACKET_LENGTH$1 && buffer[0] === SYNC_BYTE$1) {\r\n          this.trigger('data', buffer);\r\n          bytesInBuffer = 0;\r\n        }\r\n        this.trigger('done');\r\n      };\r\n      this.endTimeline = function () {\r\n        this.flush();\r\n        this.trigger('endedtimeline');\r\n      };\r\n      this.reset = function () {\r\n        bytesInBuffer = 0;\r\n        this.trigger('reset');\r\n      };\r\n    };\r\n    TransportPacketStream.prototype = new Stream$4();\r\n    /**\r\n     * Accepts an MP2T TransportPacketStream and emits data events with parsed\r\n     * forms of the individual transport stream packets.\r\n     */\r\n\r\n    TransportParseStream = function () {\r\n      var parsePsi, parsePat, parsePmt, self;\r\n      TransportParseStream.prototype.init.call(this);\r\n      self = this;\r\n      this.packetsWaitingForPmt = [];\r\n      this.programMapTable = undefined;\r\n      parsePsi = function (payload, psi) {\r\n        var offset = 0; // PSI packets may be split into multiple sections and those\r\n        // sections may be split into multiple packets. If a PSI\r\n        // section starts in this packet, the payload_unit_start_indicator\r\n        // will be true and the first byte of the payload will indicate\r\n        // the offset from the current position to the start of the\r\n        // section.\r\n\r\n        if (psi.payloadUnitStartIndicator) {\r\n          offset += payload[offset] + 1;\r\n        }\r\n        if (psi.type === 'pat') {\r\n          parsePat(payload.subarray(offset), psi);\r\n        } else {\r\n          parsePmt(payload.subarray(offset), psi);\r\n        }\r\n      };\r\n      parsePat = function (payload, pat) {\r\n        pat.section_number = payload[7]; // eslint-disable-line camelcase\r\n\r\n        pat.last_section_number = payload[8]; // eslint-disable-line camelcase\r\n        // skip the PSI header and parse the first PMT entry\r\n\r\n        self.pmtPid = (payload[10] & 0x1F) << 8 | payload[11];\r\n        pat.pmtPid = self.pmtPid;\r\n      };\r\n      /**\r\n       * Parse out the relevant fields of a Program Map Table (PMT).\r\n       * @param payload {Uint8Array} the PMT-specific portion of an MP2T\r\n       * packet. The first byte in this array should be the table_id\r\n       * field.\r\n       * @param pmt {object} the object that should be decorated with\r\n       * fields parsed from the PMT.\r\n       */\r\n\r\n      parsePmt = function (payload, pmt) {\r\n        var sectionLength, tableEnd, programInfoLength, offset; // PMTs can be sent ahead of the time when they should actually\r\n        // take effect. We don't believe this should ever be the case\r\n        // for HLS but we'll ignore \"forward\" PMT declarations if we see\r\n        // them. Future PMT declarations have the current_next_indicator\r\n        // set to zero.\r\n\r\n        if (!(payload[5] & 0x01)) {\r\n          return;\r\n        } // overwrite any existing program map table\r\n\r\n        self.programMapTable = {\r\n          video: null,\r\n          audio: null,\r\n          'timed-metadata': {}\r\n        }; // the mapping table ends at the end of the current section\r\n\r\n        sectionLength = (payload[1] & 0x0f) << 8 | payload[2];\r\n        tableEnd = 3 + sectionLength - 4; // to determine where the table is, we have to figure out how\r\n        // long the program info descriptors are\r\n\r\n        programInfoLength = (payload[10] & 0x0f) << 8 | payload[11]; // advance the offset to the first entry in the mapping table\r\n\r\n        offset = 12 + programInfoLength;\r\n        while (offset < tableEnd) {\r\n          var streamType = payload[offset];\r\n          var pid = (payload[offset + 1] & 0x1F) << 8 | payload[offset + 2]; // only map a single elementary_pid for audio and video stream types\r\n          // TODO: should this be done for metadata too? for now maintain behavior of\r\n          //       multiple metadata streams\r\n\r\n          if (streamType === StreamTypes$2.H264_STREAM_TYPE && self.programMapTable.video === null) {\r\n            self.programMapTable.video = pid;\r\n          } else if (streamType === StreamTypes$2.ADTS_STREAM_TYPE && self.programMapTable.audio === null) {\r\n            self.programMapTable.audio = pid;\r\n          } else if (streamType === StreamTypes$2.METADATA_STREAM_TYPE) {\r\n            // map pid to stream type for metadata streams\r\n            self.programMapTable['timed-metadata'][pid] = streamType;\r\n          } // move to the next table entry\r\n          // skip past the elementary stream descriptors, if present\r\n\r\n          offset += ((payload[offset + 3] & 0x0F) << 8 | payload[offset + 4]) + 5;\r\n        } // record the map on the packet as well\r\n\r\n        pmt.programMapTable = self.programMapTable;\r\n      };\r\n      /**\r\n       * Deliver a new MP2T packet to the next stream in the pipeline.\r\n       */\r\n\r\n      this.push = function (packet) {\r\n        var result = {},\r\n          offset = 4;\r\n        result.payloadUnitStartIndicator = !!(packet[1] & 0x40); // pid is a 13-bit field starting at the last bit of packet[1]\r\n\r\n        result.pid = packet[1] & 0x1f;\r\n        result.pid <<= 8;\r\n        result.pid |= packet[2]; // if an adaption field is present, its length is specified by the\r\n        // fifth byte of the TS packet header. The adaptation field is\r\n        // used to add stuffing to PES packets that don't fill a complete\r\n        // TS packet, and to specify some forms of timing and control data\r\n        // that we do not currently use.\r\n\r\n        if ((packet[3] & 0x30) >>> 4 > 0x01) {\r\n          offset += packet[offset] + 1;\r\n        } // parse the rest of the packet based on the type\r\n\r\n        if (result.pid === 0) {\r\n          result.type = 'pat';\r\n          parsePsi(packet.subarray(offset), result);\r\n          this.trigger('data', result);\r\n        } else if (result.pid === this.pmtPid) {\r\n          result.type = 'pmt';\r\n          parsePsi(packet.subarray(offset), result);\r\n          this.trigger('data', result); // if there are any packets waiting for a PMT to be found, process them now\r\n\r\n          while (this.packetsWaitingForPmt.length) {\r\n            this.processPes_.apply(this, this.packetsWaitingForPmt.shift());\r\n          }\r\n        } else if (this.programMapTable === undefined) {\r\n          // When we have not seen a PMT yet, defer further processing of\r\n          // PES packets until one has been parsed\r\n          this.packetsWaitingForPmt.push([packet, offset, result]);\r\n        } else {\r\n          this.processPes_(packet, offset, result);\r\n        }\r\n      };\r\n      this.processPes_ = function (packet, offset, result) {\r\n        // set the appropriate stream type\r\n        if (result.pid === this.programMapTable.video) {\r\n          result.streamType = StreamTypes$2.H264_STREAM_TYPE;\r\n        } else if (result.pid === this.programMapTable.audio) {\r\n          result.streamType = StreamTypes$2.ADTS_STREAM_TYPE;\r\n        } else {\r\n          // if not video or audio, it is timed-metadata or unknown\r\n          // if unknown, streamType will be undefined\r\n          result.streamType = this.programMapTable['timed-metadata'][result.pid];\r\n        }\r\n        result.type = 'pes';\r\n        result.data = packet.subarray(offset);\r\n        this.trigger('data', result);\r\n      };\r\n    };\r\n    TransportParseStream.prototype = new Stream$4();\r\n    TransportParseStream.STREAM_TYPES = {\r\n      h264: 0x1b,\r\n      adts: 0x0f\r\n    };\r\n    /**\r\n     * Reconsistutes program elementary stream (PES) packets from parsed\r\n     * transport stream packets. That is, if you pipe an\r\n     * mp2t.TransportParseStream into a mp2t.ElementaryStream, the output\r\n     * events will be events which capture the bytes for individual PES\r\n     * packets plus relevant metadata that has been extracted from the\r\n     * container.\r\n     */\r\n\r\n    ElementaryStream = function () {\r\n      var self = this,\r\n        segmentHadPmt = false,\r\n        // PES packet fragments\r\n        video = {\r\n          data: [],\r\n          size: 0\r\n        },\r\n        audio = {\r\n          data: [],\r\n          size: 0\r\n        },\r\n        timedMetadata = {\r\n          data: [],\r\n          size: 0\r\n        },\r\n        programMapTable,\r\n        parsePes = function (payload, pes) {\r\n          var ptsDtsFlags;\r\n          const startPrefix = payload[0] << 16 | payload[1] << 8 | payload[2]; // default to an empty array\r\n\r\n          pes.data = new Uint8Array(); // In certain live streams, the start of a TS fragment has ts packets\r\n          // that are frame data that is continuing from the previous fragment. This\r\n          // is to check that the pes data is the start of a new pes payload\r\n\r\n          if (startPrefix !== 1) {\r\n            return;\r\n          } // get the packet length, this will be 0 for video\r\n\r\n          pes.packetLength = 6 + (payload[4] << 8 | payload[5]); // find out if this packets starts a new keyframe\r\n\r\n          pes.dataAlignmentIndicator = (payload[6] & 0x04) !== 0; // PES packets may be annotated with a PTS value, or a PTS value\r\n          // and a DTS value. Determine what combination of values is\r\n          // available to work with.\r\n\r\n          ptsDtsFlags = payload[7]; // PTS and DTS are normally stored as a 33-bit number.  Javascript\r\n          // performs all bitwise operations on 32-bit integers but javascript\r\n          // supports a much greater range (52-bits) of integer using standard\r\n          // mathematical operations.\r\n          // We construct a 31-bit value using bitwise operators over the 31\r\n          // most significant bits and then multiply by 4 (equal to a left-shift\r\n          // of 2) before we add the final 2 least significant bits of the\r\n          // timestamp (equal to an OR.)\r\n\r\n          if (ptsDtsFlags & 0xC0) {\r\n            // the PTS and DTS are not written out directly. For information\r\n            // on how they are encoded, see\r\n            // http://dvd.sourceforge.net/dvdinfo/pes-hdr.html\r\n            pes.pts = (payload[9] & 0x0E) << 27 | (payload[10] & 0xFF) << 20 | (payload[11] & 0xFE) << 12 | (payload[12] & 0xFF) << 5 | (payload[13] & 0xFE) >>> 3;\r\n            pes.pts *= 4; // Left shift by 2\r\n\r\n            pes.pts += (payload[13] & 0x06) >>> 1; // OR by the two LSBs\r\n\r\n            pes.dts = pes.pts;\r\n            if (ptsDtsFlags & 0x40) {\r\n              pes.dts = (payload[14] & 0x0E) << 27 | (payload[15] & 0xFF) << 20 | (payload[16] & 0xFE) << 12 | (payload[17] & 0xFF) << 5 | (payload[18] & 0xFE) >>> 3;\r\n              pes.dts *= 4; // Left shift by 2\r\n\r\n              pes.dts += (payload[18] & 0x06) >>> 1; // OR by the two LSBs\r\n            }\r\n          } // the data section starts immediately after the PES header.\r\n          // pes_header_data_length specifies the number of header bytes\r\n          // that follow the last byte of the field.\r\n\r\n          pes.data = payload.subarray(9 + payload[8]);\r\n        },\r\n        /**\r\n          * Pass completely parsed PES packets to the next stream in the pipeline\r\n         **/\r\n        flushStream = function (stream, type, forceFlush) {\r\n          var packetData = new Uint8Array(stream.size),\r\n            event = {\r\n              type: type\r\n            },\r\n            i = 0,\r\n            offset = 0,\r\n            packetFlushable = false,\r\n            fragment; // do nothing if there is not enough buffered data for a complete\r\n          // PES header\r\n\r\n          if (!stream.data.length || stream.size < 9) {\r\n            return;\r\n          }\r\n          event.trackId = stream.data[0].pid; // reassemble the packet\r\n\r\n          for (i = 0; i < stream.data.length; i++) {\r\n            fragment = stream.data[i];\r\n            packetData.set(fragment.data, offset);\r\n            offset += fragment.data.byteLength;\r\n          } // parse assembled packet's PES header\r\n\r\n          parsePes(packetData, event); // non-video PES packets MUST have a non-zero PES_packet_length\r\n          // check that there is enough stream data to fill the packet\r\n\r\n          packetFlushable = type === 'video' || event.packetLength <= stream.size; // flush pending packets if the conditions are right\r\n\r\n          if (forceFlush || packetFlushable) {\r\n            stream.size = 0;\r\n            stream.data.length = 0;\r\n          } // only emit packets that are complete. this is to avoid assembling\r\n          // incomplete PES packets due to poor segmentation\r\n\r\n          if (packetFlushable) {\r\n            self.trigger('data', event);\r\n          }\r\n        };\r\n      ElementaryStream.prototype.init.call(this);\r\n      /**\r\n       * Identifies M2TS packet types and parses PES packets using metadata\r\n       * parsed from the PMT\r\n       **/\r\n\r\n      this.push = function (data) {\r\n        ({\r\n          pat: function () {// we have to wait for the PMT to arrive as well before we\r\n            // have any meaningful metadata\r\n          },\r\n          pes: function () {\r\n            var stream, streamType;\r\n            switch (data.streamType) {\r\n              case StreamTypes$2.H264_STREAM_TYPE:\r\n                stream = video;\r\n                streamType = 'video';\r\n                break;\r\n              case StreamTypes$2.ADTS_STREAM_TYPE:\r\n                stream = audio;\r\n                streamType = 'audio';\r\n                break;\r\n              case StreamTypes$2.METADATA_STREAM_TYPE:\r\n                stream = timedMetadata;\r\n                streamType = 'timed-metadata';\r\n                break;\r\n              default:\r\n                // ignore unknown stream types\r\n                return;\r\n            } // if a new packet is starting, we can flush the completed\r\n            // packet\r\n\r\n            if (data.payloadUnitStartIndicator) {\r\n              flushStream(stream, streamType, true);\r\n            } // buffer this fragment until we are sure we've received the\r\n            // complete payload\r\n\r\n            stream.data.push(data);\r\n            stream.size += data.data.byteLength;\r\n          },\r\n          pmt: function () {\r\n            var event = {\r\n              type: 'metadata',\r\n              tracks: []\r\n            };\r\n            programMapTable = data.programMapTable; // translate audio and video streams to tracks\r\n\r\n            if (programMapTable.video !== null) {\r\n              event.tracks.push({\r\n                timelineStartInfo: {\r\n                  baseMediaDecodeTime: 0\r\n                },\r\n                id: +programMapTable.video,\r\n                codec: 'avc',\r\n                type: 'video'\r\n              });\r\n            }\r\n            if (programMapTable.audio !== null) {\r\n              event.tracks.push({\r\n                timelineStartInfo: {\r\n                  baseMediaDecodeTime: 0\r\n                },\r\n                id: +programMapTable.audio,\r\n                codec: 'adts',\r\n                type: 'audio'\r\n              });\r\n            }\r\n            segmentHadPmt = true;\r\n            self.trigger('data', event);\r\n          }\r\n        })[data.type]();\r\n      };\r\n      this.reset = function () {\r\n        video.size = 0;\r\n        video.data.length = 0;\r\n        audio.size = 0;\r\n        audio.data.length = 0;\r\n        this.trigger('reset');\r\n      };\r\n      /**\r\n       * Flush any remaining input. Video PES packets may be of variable\r\n       * length. Normally, the start of a new video packet can trigger the\r\n       * finalization of the previous packet. That is not possible if no\r\n       * more video is forthcoming, however. In that case, some other\r\n       * mechanism (like the end of the file) has to be employed. When it is\r\n       * clear that no additional data is forthcoming, calling this method\r\n       * will flush the buffered packets.\r\n       */\r\n\r\n      this.flushStreams_ = function () {\r\n        // !!THIS ORDER IS IMPORTANT!!\r\n        // video first then audio\r\n        flushStream(video, 'video');\r\n        flushStream(audio, 'audio');\r\n        flushStream(timedMetadata, 'timed-metadata');\r\n      };\r\n      this.flush = function () {\r\n        // if on flush we haven't had a pmt emitted\r\n        // and we have a pmt to emit. emit the pmt\r\n        // so that we trigger a trackinfo downstream.\r\n        if (!segmentHadPmt && programMapTable) {\r\n          var pmt = {\r\n            type: 'metadata',\r\n            tracks: []\r\n          }; // translate audio and video streams to tracks\r\n\r\n          if (programMapTable.video !== null) {\r\n            pmt.tracks.push({\r\n              timelineStartInfo: {\r\n                baseMediaDecodeTime: 0\r\n              },\r\n              id: +programMapTable.video,\r\n              codec: 'avc',\r\n              type: 'video'\r\n            });\r\n          }\r\n          if (programMapTable.audio !== null) {\r\n            pmt.tracks.push({\r\n              timelineStartInfo: {\r\n                baseMediaDecodeTime: 0\r\n              },\r\n              id: +programMapTable.audio,\r\n              codec: 'adts',\r\n              type: 'audio'\r\n            });\r\n          }\r\n          self.trigger('data', pmt);\r\n        }\r\n        segmentHadPmt = false;\r\n        this.flushStreams_();\r\n        this.trigger('done');\r\n      };\r\n    };\r\n    ElementaryStream.prototype = new Stream$4();\r\n    var m2ts$1 = {\r\n      PAT_PID: 0x0000,\r\n      MP2T_PACKET_LENGTH: MP2T_PACKET_LENGTH$1,\r\n      TransportPacketStream: TransportPacketStream,\r\n      TransportParseStream: TransportParseStream,\r\n      ElementaryStream: ElementaryStream,\r\n      TimestampRolloverStream: TimestampRolloverStream,\r\n      CaptionStream: CaptionStream$1.CaptionStream,\r\n      Cea608Stream: CaptionStream$1.Cea608Stream,\r\n      Cea708Stream: CaptionStream$1.Cea708Stream,\r\n      MetadataStream: metadataStream\r\n    };\r\n    for (var type in StreamTypes$2) {\r\n      if (StreamTypes$2.hasOwnProperty(type)) {\r\n        m2ts$1[type] = StreamTypes$2[type];\r\n      }\r\n    }\r\n    var m2ts_1 = m2ts$1;\r\n    /**\r\n     * mux.js\r\n     *\r\n     * Copyright (c) Brightcove\r\n     * Licensed Apache-2.0 https://github.com/videojs/mux.js/blob/master/LICENSE\r\n     */\r\n\r\n    var Stream$3 = stream;\r\n    var ONE_SECOND_IN_TS$2 = clock$2.ONE_SECOND_IN_TS;\r\n    var AdtsStream$1;\r\n    var ADTS_SAMPLING_FREQUENCIES$1 = [96000, 88200, 64000, 48000, 44100, 32000, 24000, 22050, 16000, 12000, 11025, 8000, 7350];\r\n    /*\r\n     * Accepts a ElementaryStream and emits data events with parsed\r\n     * AAC Audio Frames of the individual packets. Input audio in ADTS\r\n     * format is unpacked and re-emitted as AAC frames.\r\n     *\r\n     * @see http://wiki.multimedia.cx/index.php?title=ADTS\r\n     * @see http://wiki.multimedia.cx/?title=Understanding_AAC\r\n     */\r\n\r\n    AdtsStream$1 = function (handlePartialSegments) {\r\n      var buffer,\r\n        frameNum = 0;\r\n      AdtsStream$1.prototype.init.call(this);\r\n      this.skipWarn_ = function (start, end) {\r\n        this.trigger('log', {\r\n          level: 'warn',\r\n          message: `adts skiping bytes ${start} to ${end} in frame ${frameNum} outside syncword`\r\n        });\r\n      };\r\n      this.push = function (packet) {\r\n        var i = 0,\r\n          frameLength,\r\n          protectionSkipBytes,\r\n          oldBuffer,\r\n          sampleCount,\r\n          adtsFrameDuration;\r\n        if (!handlePartialSegments) {\r\n          frameNum = 0;\r\n        }\r\n        if (packet.type !== 'audio') {\r\n          // ignore non-audio data\r\n          return;\r\n        } // Prepend any data in the buffer to the input data so that we can parse\r\n        // aac frames the cross a PES packet boundary\r\n\r\n        if (buffer && buffer.length) {\r\n          oldBuffer = buffer;\r\n          buffer = new Uint8Array(oldBuffer.byteLength + packet.data.byteLength);\r\n          buffer.set(oldBuffer);\r\n          buffer.set(packet.data, oldBuffer.byteLength);\r\n        } else {\r\n          buffer = packet.data;\r\n        } // unpack any ADTS frames which have been fully received\r\n        // for details on the ADTS header, see http://wiki.multimedia.cx/index.php?title=ADTS\r\n\r\n        var skip; // We use i + 7 here because we want to be able to parse the entire header.\r\n        // If we don't have enough bytes to do that, then we definitely won't have a full frame.\r\n\r\n        while (i + 7 < buffer.length) {\r\n          // Look for the start of an ADTS header..\r\n          if (buffer[i] !== 0xFF || (buffer[i + 1] & 0xF6) !== 0xF0) {\r\n            if (typeof skip !== 'number') {\r\n              skip = i;\r\n            } // If a valid header was not found,  jump one forward and attempt to\r\n            // find a valid ADTS header starting at the next byte\r\n\r\n            i++;\r\n            continue;\r\n          }\r\n          if (typeof skip === 'number') {\r\n            this.skipWarn_(skip, i);\r\n            skip = null;\r\n          } // The protection skip bit tells us if we have 2 bytes of CRC data at the\r\n          // end of the ADTS header\r\n\r\n          protectionSkipBytes = (~buffer[i + 1] & 0x01) * 2; // Frame length is a 13 bit integer starting 16 bits from the\r\n          // end of the sync sequence\r\n          // NOTE: frame length includes the size of the header\r\n\r\n          frameLength = (buffer[i + 3] & 0x03) << 11 | buffer[i + 4] << 3 | (buffer[i + 5] & 0xe0) >> 5;\r\n          sampleCount = ((buffer[i + 6] & 0x03) + 1) * 1024;\r\n          adtsFrameDuration = sampleCount * ONE_SECOND_IN_TS$2 / ADTS_SAMPLING_FREQUENCIES$1[(buffer[i + 2] & 0x3c) >>> 2]; // If we don't have enough data to actually finish this ADTS frame,\r\n          // then we have to wait for more data\r\n\r\n          if (buffer.byteLength - i < frameLength) {\r\n            break;\r\n          } // Otherwise, deliver the complete AAC frame\r\n\r\n          this.trigger('data', {\r\n            pts: packet.pts + frameNum * adtsFrameDuration,\r\n            dts: packet.dts + frameNum * adtsFrameDuration,\r\n            sampleCount: sampleCount,\r\n            audioobjecttype: (buffer[i + 2] >>> 6 & 0x03) + 1,\r\n            channelcount: (buffer[i + 2] & 1) << 2 | (buffer[i + 3] & 0xc0) >>> 6,\r\n            samplerate: ADTS_SAMPLING_FREQUENCIES$1[(buffer[i + 2] & 0x3c) >>> 2],\r\n            samplingfrequencyindex: (buffer[i + 2] & 0x3c) >>> 2,\r\n            // assume ISO/IEC 14496-12 AudioSampleEntry default of 16\r\n            samplesize: 16,\r\n            // data is the frame without it's header\r\n            data: buffer.subarray(i + 7 + protectionSkipBytes, i + frameLength)\r\n          });\r\n          frameNum++;\r\n          i += frameLength;\r\n        }\r\n        if (typeof skip === 'number') {\r\n          this.skipWarn_(skip, i);\r\n          skip = null;\r\n        } // remove processed bytes from the buffer.\r\n\r\n        buffer = buffer.subarray(i);\r\n      };\r\n      this.flush = function () {\r\n        frameNum = 0;\r\n        this.trigger('done');\r\n      };\r\n      this.reset = function () {\r\n        buffer = void 0;\r\n        this.trigger('reset');\r\n      };\r\n      this.endTimeline = function () {\r\n        buffer = void 0;\r\n        this.trigger('endedtimeline');\r\n      };\r\n    };\r\n    AdtsStream$1.prototype = new Stream$3();\r\n    var adts = AdtsStream$1;\r\n    /**\r\n     * mux.js\r\n     *\r\n     * Copyright (c) Brightcove\r\n     * Licensed Apache-2.0 https://github.com/videojs/mux.js/blob/master/LICENSE\r\n     */\r\n\r\n    var ExpGolomb$1;\r\n    /**\r\n     * Parser for exponential Golomb codes, a variable-bitwidth number encoding\r\n     * scheme used by h264.\r\n     */\r\n\r\n    ExpGolomb$1 = function (workingData) {\r\n      var\r\n        // the number of bytes left to examine in workingData\r\n        workingBytesAvailable = workingData.byteLength,\r\n        // the current word being examined\r\n        workingWord = 0,\r\n        // :uint\r\n        // the number of bits left to examine in the current word\r\n        workingBitsAvailable = 0; // :uint;\r\n      // ():uint\r\n\r\n      this.length = function () {\r\n        return 8 * workingBytesAvailable;\r\n      }; // ():uint\r\n\r\n      this.bitsAvailable = function () {\r\n        return 8 * workingBytesAvailable + workingBitsAvailable;\r\n      }; // ():void\r\n\r\n      this.loadWord = function () {\r\n        var position = workingData.byteLength - workingBytesAvailable,\r\n          workingBytes = new Uint8Array(4),\r\n          availableBytes = Math.min(4, workingBytesAvailable);\r\n        if (availableBytes === 0) {\r\n          throw new Error('no bytes available');\r\n        }\r\n        workingBytes.set(workingData.subarray(position, position + availableBytes));\r\n        workingWord = new DataView(workingBytes.buffer).getUint32(0); // track the amount of workingData that has been processed\r\n\r\n        workingBitsAvailable = availableBytes * 8;\r\n        workingBytesAvailable -= availableBytes;\r\n      }; // (count:int):void\r\n\r\n      this.skipBits = function (count) {\r\n        var skipBytes; // :int\r\n\r\n        if (workingBitsAvailable > count) {\r\n          workingWord <<= count;\r\n          workingBitsAvailable -= count;\r\n        } else {\r\n          count -= workingBitsAvailable;\r\n          skipBytes = Math.floor(count / 8);\r\n          count -= skipBytes * 8;\r\n          workingBytesAvailable -= skipBytes;\r\n          this.loadWord();\r\n          workingWord <<= count;\r\n          workingBitsAvailable -= count;\r\n        }\r\n      }; // (size:int):uint\r\n\r\n      this.readBits = function (size) {\r\n        var bits = Math.min(workingBitsAvailable, size),\r\n          // :uint\r\n          valu = workingWord >>> 32 - bits; // :uint\r\n        // if size > 31, handle error\r\n\r\n        workingBitsAvailable -= bits;\r\n        if (workingBitsAvailable > 0) {\r\n          workingWord <<= bits;\r\n        } else if (workingBytesAvailable > 0) {\r\n          this.loadWord();\r\n        }\r\n        bits = size - bits;\r\n        if (bits > 0) {\r\n          return valu << bits | this.readBits(bits);\r\n        }\r\n        return valu;\r\n      }; // ():uint\r\n\r\n      this.skipLeadingZeros = function () {\r\n        var leadingZeroCount; // :uint\r\n\r\n        for (leadingZeroCount = 0; leadingZeroCount < workingBitsAvailable; ++leadingZeroCount) {\r\n          if ((workingWord & 0x80000000 >>> leadingZeroCount) !== 0) {\r\n            // the first bit of working word is 1\r\n            workingWord <<= leadingZeroCount;\r\n            workingBitsAvailable -= leadingZeroCount;\r\n            return leadingZeroCount;\r\n          }\r\n        } // we exhausted workingWord and still have not found a 1\r\n\r\n        this.loadWord();\r\n        return leadingZeroCount + this.skipLeadingZeros();\r\n      }; // ():void\r\n\r\n      this.skipUnsignedExpGolomb = function () {\r\n        this.skipBits(1 + this.skipLeadingZeros());\r\n      }; // ():void\r\n\r\n      this.skipExpGolomb = function () {\r\n        this.skipBits(1 + this.skipLeadingZeros());\r\n      }; // ():uint\r\n\r\n      this.readUnsignedExpGolomb = function () {\r\n        var clz = this.skipLeadingZeros(); // :uint\r\n\r\n        return this.readBits(clz + 1) - 1;\r\n      }; // ():int\r\n\r\n      this.readExpGolomb = function () {\r\n        var valu = this.readUnsignedExpGolomb(); // :int\r\n\r\n        if (0x01 & valu) {\r\n          // the number is odd if the low order bit is set\r\n          return 1 + valu >>> 1; // add 1 to make it even, and divide by 2\r\n        }\r\n        return -1 * (valu >>> 1); // divide by two then make it negative\r\n      }; // Some convenience functions\r\n      // :Boolean\r\n\r\n      this.readBoolean = function () {\r\n        return this.readBits(1) === 1;\r\n      }; // ():int\r\n\r\n      this.readUnsignedByte = function () {\r\n        return this.readBits(8);\r\n      };\r\n      this.loadWord();\r\n    };\r\n    var expGolomb = ExpGolomb$1;\r\n    /**\r\n     * mux.js\r\n     *\r\n     * Copyright (c) Brightcove\r\n     * Licensed Apache-2.0 https://github.com/videojs/mux.js/blob/master/LICENSE\r\n     */\r\n\r\n    var Stream$2 = stream;\r\n    var ExpGolomb = expGolomb;\r\n    var H264Stream$1, NalByteStream;\r\n    var PROFILES_WITH_OPTIONAL_SPS_DATA;\r\n    /**\r\n     * Accepts a NAL unit byte stream and unpacks the embedded NAL units.\r\n     */\r\n\r\n    NalByteStream = function () {\r\n      var syncPoint = 0,\r\n        i,\r\n        buffer;\r\n      NalByteStream.prototype.init.call(this);\r\n      /*\r\n       * Scans a byte stream and triggers a data event with the NAL units found.\r\n       * @param {Object} data Event received from H264Stream\r\n       * @param {Uint8Array} data.data The h264 byte stream to be scanned\r\n       *\r\n       * @see H264Stream.push\r\n       */\r\n\r\n      this.push = function (data) {\r\n        var swapBuffer;\r\n        if (!buffer) {\r\n          buffer = data.data;\r\n        } else {\r\n          swapBuffer = new Uint8Array(buffer.byteLength + data.data.byteLength);\r\n          swapBuffer.set(buffer);\r\n          swapBuffer.set(data.data, buffer.byteLength);\r\n          buffer = swapBuffer;\r\n        }\r\n        var len = buffer.byteLength; // Rec. ITU-T H.264, Annex B\r\n        // scan for NAL unit boundaries\r\n        // a match looks like this:\r\n        // 0 0 1 .. NAL .. 0 0 1\r\n        // ^ sync point        ^ i\r\n        // or this:\r\n        // 0 0 1 .. NAL .. 0 0 0\r\n        // ^ sync point        ^ i\r\n        // advance the sync point to a NAL start, if necessary\r\n\r\n        for (; syncPoint < len - 3; syncPoint++) {\r\n          if (buffer[syncPoint + 2] === 1) {\r\n            // the sync point is properly aligned\r\n            i = syncPoint + 5;\r\n            break;\r\n          }\r\n        }\r\n        while (i < len) {\r\n          // look at the current byte to determine if we've hit the end of\r\n          // a NAL unit boundary\r\n          switch (buffer[i]) {\r\n            case 0:\r\n              // skip past non-sync sequences\r\n              if (buffer[i - 1] !== 0) {\r\n                i += 2;\r\n                break;\r\n              } else if (buffer[i - 2] !== 0) {\r\n                i++;\r\n                break;\r\n              } // deliver the NAL unit if it isn't empty\r\n\r\n              if (syncPoint + 3 !== i - 2) {\r\n                this.trigger('data', buffer.subarray(syncPoint + 3, i - 2));\r\n              } // drop trailing zeroes\r\n\r\n              do {\r\n                i++;\r\n              } while (buffer[i] !== 1 && i < len);\r\n              syncPoint = i - 2;\r\n              i += 3;\r\n              break;\r\n            case 1:\r\n              // skip past non-sync sequences\r\n              if (buffer[i - 1] !== 0 || buffer[i - 2] !== 0) {\r\n                i += 3;\r\n                break;\r\n              } // deliver the NAL unit\r\n\r\n              this.trigger('data', buffer.subarray(syncPoint + 3, i - 2));\r\n              syncPoint = i - 2;\r\n              i += 3;\r\n              break;\r\n            default:\r\n              // the current byte isn't a one or zero, so it cannot be part\r\n              // of a sync sequence\r\n              i += 3;\r\n              break;\r\n          }\r\n        } // filter out the NAL units that were delivered\r\n\r\n        buffer = buffer.subarray(syncPoint);\r\n        i -= syncPoint;\r\n        syncPoint = 0;\r\n      };\r\n      this.reset = function () {\r\n        buffer = null;\r\n        syncPoint = 0;\r\n        this.trigger('reset');\r\n      };\r\n      this.flush = function () {\r\n        // deliver the last buffered NAL unit\r\n        if (buffer && buffer.byteLength > 3) {\r\n          this.trigger('data', buffer.subarray(syncPoint + 3));\r\n        } // reset the stream state\r\n\r\n        buffer = null;\r\n        syncPoint = 0;\r\n        this.trigger('done');\r\n      };\r\n      this.endTimeline = function () {\r\n        this.flush();\r\n        this.trigger('endedtimeline');\r\n      };\r\n    };\r\n    NalByteStream.prototype = new Stream$2(); // values of profile_idc that indicate additional fields are included in the SPS\r\n    // see Recommendation ITU-T H.264 (4/2013),\r\n    // 7.3.2.1.1 Sequence parameter set data syntax\r\n\r\n    PROFILES_WITH_OPTIONAL_SPS_DATA = {\r\n      100: true,\r\n      110: true,\r\n      122: true,\r\n      244: true,\r\n      44: true,\r\n      83: true,\r\n      86: true,\r\n      118: true,\r\n      128: true,\r\n      // TODO: the three profiles below don't\r\n      // appear to have sps data in the specificiation anymore?\r\n      138: true,\r\n      139: true,\r\n      134: true\r\n    };\r\n    /**\r\n     * Accepts input from a ElementaryStream and produces H.264 NAL unit data\r\n     * events.\r\n     */\r\n\r\n    H264Stream$1 = function () {\r\n      var nalByteStream = new NalByteStream(),\r\n        self,\r\n        trackId,\r\n        currentPts,\r\n        currentDts,\r\n        discardEmulationPreventionBytes,\r\n        readSequenceParameterSet,\r\n        skipScalingList;\r\n      H264Stream$1.prototype.init.call(this);\r\n      self = this;\r\n      /*\r\n       * Pushes a packet from a stream onto the NalByteStream\r\n       *\r\n       * @param {Object} packet - A packet received from a stream\r\n       * @param {Uint8Array} packet.data - The raw bytes of the packet\r\n       * @param {Number} packet.dts - Decode timestamp of the packet\r\n       * @param {Number} packet.pts - Presentation timestamp of the packet\r\n       * @param {Number} packet.trackId - The id of the h264 track this packet came from\r\n       * @param {('video'|'audio')} packet.type - The type of packet\r\n       *\r\n       */\r\n\r\n      this.push = function (packet) {\r\n        if (packet.type !== 'video') {\r\n          return;\r\n        }\r\n        trackId = packet.trackId;\r\n        currentPts = packet.pts;\r\n        currentDts = packet.dts;\r\n        nalByteStream.push(packet);\r\n      };\r\n      /*\r\n       * Identify NAL unit types and pass on the NALU, trackId, presentation and decode timestamps\r\n       * for the NALUs to the next stream component.\r\n       * Also, preprocess caption and sequence parameter NALUs.\r\n       *\r\n       * @param {Uint8Array} data - A NAL unit identified by `NalByteStream.push`\r\n       * @see NalByteStream.push\r\n       */\r\n\r\n      nalByteStream.on('data', function (data) {\r\n        var event = {\r\n          trackId: trackId,\r\n          pts: currentPts,\r\n          dts: currentDts,\r\n          data: data,\r\n          nalUnitTypeCode: data[0] & 0x1f\r\n        };\r\n        switch (event.nalUnitTypeCode) {\r\n          case 0x05:\r\n            event.nalUnitType = 'slice_layer_without_partitioning_rbsp_idr';\r\n            break;\r\n          case 0x06:\r\n            event.nalUnitType = 'sei_rbsp';\r\n            event.escapedRBSP = discardEmulationPreventionBytes(data.subarray(1));\r\n            break;\r\n          case 0x07:\r\n            event.nalUnitType = 'seq_parameter_set_rbsp';\r\n            event.escapedRBSP = discardEmulationPreventionBytes(data.subarray(1));\r\n            event.config = readSequenceParameterSet(event.escapedRBSP);\r\n            break;\r\n          case 0x08:\r\n            event.nalUnitType = 'pic_parameter_set_rbsp';\r\n            break;\r\n          case 0x09:\r\n            event.nalUnitType = 'access_unit_delimiter_rbsp';\r\n            break;\r\n        } // This triggers data on the H264Stream\r\n\r\n        self.trigger('data', event);\r\n      });\r\n      nalByteStream.on('done', function () {\r\n        self.trigger('done');\r\n      });\r\n      nalByteStream.on('partialdone', function () {\r\n        self.trigger('partialdone');\r\n      });\r\n      nalByteStream.on('reset', function () {\r\n        self.trigger('reset');\r\n      });\r\n      nalByteStream.on('endedtimeline', function () {\r\n        self.trigger('endedtimeline');\r\n      });\r\n      this.flush = function () {\r\n        nalByteStream.flush();\r\n      };\r\n      this.partialFlush = function () {\r\n        nalByteStream.partialFlush();\r\n      };\r\n      this.reset = function () {\r\n        nalByteStream.reset();\r\n      };\r\n      this.endTimeline = function () {\r\n        nalByteStream.endTimeline();\r\n      };\r\n      /**\r\n       * Advance the ExpGolomb decoder past a scaling list. The scaling\r\n       * list is optionally transmitted as part of a sequence parameter\r\n       * set and is not relevant to transmuxing.\r\n       * @param count {number} the number of entries in this scaling list\r\n       * @param expGolombDecoder {object} an ExpGolomb pointed to the\r\n       * start of a scaling list\r\n       * @see Recommendation ITU-T H.264, Section 7.3.2.1.1.1\r\n       */\r\n\r\n      skipScalingList = function (count, expGolombDecoder) {\r\n        var lastScale = 8,\r\n          nextScale = 8,\r\n          j,\r\n          deltaScale;\r\n        for (j = 0; j < count; j++) {\r\n          if (nextScale !== 0) {\r\n            deltaScale = expGolombDecoder.readExpGolomb();\r\n            nextScale = (lastScale + deltaScale + 256) % 256;\r\n          }\r\n          lastScale = nextScale === 0 ? lastScale : nextScale;\r\n        }\r\n      };\r\n      /**\r\n       * Expunge any \"Emulation Prevention\" bytes from a \"Raw Byte\r\n       * Sequence Payload\"\r\n       * @param data {Uint8Array} the bytes of a RBSP from a NAL\r\n       * unit\r\n       * @return {Uint8Array} the RBSP without any Emulation\r\n       * Prevention Bytes\r\n       */\r\n\r\n      discardEmulationPreventionBytes = function (data) {\r\n        var length = data.byteLength,\r\n          emulationPreventionBytesPositions = [],\r\n          i = 1,\r\n          newLength,\r\n          newData; // Find all `Emulation Prevention Bytes`\r\n\r\n        while (i < length - 2) {\r\n          if (data[i] === 0 && data[i + 1] === 0 && data[i + 2] === 0x03) {\r\n            emulationPreventionBytesPositions.push(i + 2);\r\n            i += 2;\r\n          } else {\r\n            i++;\r\n          }\r\n        } // If no Emulation Prevention Bytes were found just return the original\r\n        // array\r\n\r\n        if (emulationPreventionBytesPositions.length === 0) {\r\n          return data;\r\n        } // Create a new array to hold the NAL unit data\r\n\r\n        newLength = length - emulationPreventionBytesPositions.length;\r\n        newData = new Uint8Array(newLength);\r\n        var sourceIndex = 0;\r\n        for (i = 0; i < newLength; sourceIndex++, i++) {\r\n          if (sourceIndex === emulationPreventionBytesPositions[0]) {\r\n            // Skip this byte\r\n            sourceIndex++; // Remove this position index\r\n\r\n            emulationPreventionBytesPositions.shift();\r\n          }\r\n          newData[i] = data[sourceIndex];\r\n        }\r\n        return newData;\r\n      };\r\n      /**\r\n       * Read a sequence parameter set and return some interesting video\r\n       * properties. A sequence parameter set is the H264 metadata that\r\n       * describes the properties of upcoming video frames.\r\n       * @param data {Uint8Array} the bytes of a sequence parameter set\r\n       * @return {object} an object with configuration parsed from the\r\n       * sequence parameter set, including the dimensions of the\r\n       * associated video frames.\r\n       */\r\n\r\n      readSequenceParameterSet = function (data) {\r\n        var frameCropLeftOffset = 0,\r\n          frameCropRightOffset = 0,\r\n          frameCropTopOffset = 0,\r\n          frameCropBottomOffset = 0,\r\n          expGolombDecoder,\r\n          profileIdc,\r\n          levelIdc,\r\n          profileCompatibility,\r\n          chromaFormatIdc,\r\n          picOrderCntType,\r\n          numRefFramesInPicOrderCntCycle,\r\n          picWidthInMbsMinus1,\r\n          picHeightInMapUnitsMinus1,\r\n          frameMbsOnlyFlag,\r\n          scalingListCount,\r\n          sarRatio = [1, 1],\r\n          aspectRatioIdc,\r\n          i;\r\n        expGolombDecoder = new ExpGolomb(data);\r\n        profileIdc = expGolombDecoder.readUnsignedByte(); // profile_idc\r\n\r\n        profileCompatibility = expGolombDecoder.readUnsignedByte(); // constraint_set[0-5]_flag\r\n\r\n        levelIdc = expGolombDecoder.readUnsignedByte(); // level_idc u(8)\r\n\r\n        expGolombDecoder.skipUnsignedExpGolomb(); // seq_parameter_set_id\r\n        // some profiles have more optional data we don't need\r\n\r\n        if (PROFILES_WITH_OPTIONAL_SPS_DATA[profileIdc]) {\r\n          chromaFormatIdc = expGolombDecoder.readUnsignedExpGolomb();\r\n          if (chromaFormatIdc === 3) {\r\n            expGolombDecoder.skipBits(1); // separate_colour_plane_flag\r\n          }\r\n          expGolombDecoder.skipUnsignedExpGolomb(); // bit_depth_luma_minus8\r\n\r\n          expGolombDecoder.skipUnsignedExpGolomb(); // bit_depth_chroma_minus8\r\n\r\n          expGolombDecoder.skipBits(1); // qpprime_y_zero_transform_bypass_flag\r\n\r\n          if (expGolombDecoder.readBoolean()) {\r\n            // seq_scaling_matrix_present_flag\r\n            scalingListCount = chromaFormatIdc !== 3 ? 8 : 12;\r\n            for (i = 0; i < scalingListCount; i++) {\r\n              if (expGolombDecoder.readBoolean()) {\r\n                // seq_scaling_list_present_flag[ i ]\r\n                if (i < 6) {\r\n                  skipScalingList(16, expGolombDecoder);\r\n                } else {\r\n                  skipScalingList(64, expGolombDecoder);\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n        expGolombDecoder.skipUnsignedExpGolomb(); // log2_max_frame_num_minus4\r\n\r\n        picOrderCntType = expGolombDecoder.readUnsignedExpGolomb();\r\n        if (picOrderCntType === 0) {\r\n          expGolombDecoder.readUnsignedExpGolomb(); // log2_max_pic_order_cnt_lsb_minus4\r\n        } else if (picOrderCntType === 1) {\r\n          expGolombDecoder.skipBits(1); // delta_pic_order_always_zero_flag\r\n\r\n          expGolombDecoder.skipExpGolomb(); // offset_for_non_ref_pic\r\n\r\n          expGolombDecoder.skipExpGolomb(); // offset_for_top_to_bottom_field\r\n\r\n          numRefFramesInPicOrderCntCycle = expGolombDecoder.readUnsignedExpGolomb();\r\n          for (i = 0; i < numRefFramesInPicOrderCntCycle; i++) {\r\n            expGolombDecoder.skipExpGolomb(); // offset_for_ref_frame[ i ]\r\n          }\r\n        }\r\n        expGolombDecoder.skipUnsignedExpGolomb(); // max_num_ref_frames\r\n\r\n        expGolombDecoder.skipBits(1); // gaps_in_frame_num_value_allowed_flag\r\n\r\n        picWidthInMbsMinus1 = expGolombDecoder.readUnsignedExpGolomb();\r\n        picHeightInMapUnitsMinus1 = expGolombDecoder.readUnsignedExpGolomb();\r\n        frameMbsOnlyFlag = expGolombDecoder.readBits(1);\r\n        if (frameMbsOnlyFlag === 0) {\r\n          expGolombDecoder.skipBits(1); // mb_adaptive_frame_field_flag\r\n        }\r\n        expGolombDecoder.skipBits(1); // direct_8x8_inference_flag\r\n\r\n        if (expGolombDecoder.readBoolean()) {\r\n          // frame_cropping_flag\r\n          frameCropLeftOffset = expGolombDecoder.readUnsignedExpGolomb();\r\n          frameCropRightOffset = expGolombDecoder.readUnsignedExpGolomb();\r\n          frameCropTopOffset = expGolombDecoder.readUnsignedExpGolomb();\r\n          frameCropBottomOffset = expGolombDecoder.readUnsignedExpGolomb();\r\n        }\r\n        if (expGolombDecoder.readBoolean()) {\r\n          // vui_parameters_present_flag\r\n          if (expGolombDecoder.readBoolean()) {\r\n            // aspect_ratio_info_present_flag\r\n            aspectRatioIdc = expGolombDecoder.readUnsignedByte();\r\n            switch (aspectRatioIdc) {\r\n              case 1:\r\n                sarRatio = [1, 1];\r\n                break;\r\n              case 2:\r\n                sarRatio = [12, 11];\r\n                break;\r\n              case 3:\r\n                sarRatio = [10, 11];\r\n                break;\r\n              case 4:\r\n                sarRatio = [16, 11];\r\n                break;\r\n              case 5:\r\n                sarRatio = [40, 33];\r\n                break;\r\n              case 6:\r\n                sarRatio = [24, 11];\r\n                break;\r\n              case 7:\r\n                sarRatio = [20, 11];\r\n                break;\r\n              case 8:\r\n                sarRatio = [32, 11];\r\n                break;\r\n              case 9:\r\n                sarRatio = [80, 33];\r\n                break;\r\n              case 10:\r\n                sarRatio = [18, 11];\r\n                break;\r\n              case 11:\r\n                sarRatio = [15, 11];\r\n                break;\r\n              case 12:\r\n                sarRatio = [64, 33];\r\n                break;\r\n              case 13:\r\n                sarRatio = [160, 99];\r\n                break;\r\n              case 14:\r\n                sarRatio = [4, 3];\r\n                break;\r\n              case 15:\r\n                sarRatio = [3, 2];\r\n                break;\r\n              case 16:\r\n                sarRatio = [2, 1];\r\n                break;\r\n              case 255:\r\n                {\r\n                  sarRatio = [expGolombDecoder.readUnsignedByte() << 8 | expGolombDecoder.readUnsignedByte(), expGolombDecoder.readUnsignedByte() << 8 | expGolombDecoder.readUnsignedByte()];\r\n                  break;\r\n                }\r\n            }\r\n            if (sarRatio) {\r\n              sarRatio[0] / sarRatio[1];\r\n            }\r\n          }\r\n        }\r\n        return {\r\n          profileIdc: profileIdc,\r\n          levelIdc: levelIdc,\r\n          profileCompatibility: profileCompatibility,\r\n          width: (picWidthInMbsMinus1 + 1) * 16 - frameCropLeftOffset * 2 - frameCropRightOffset * 2,\r\n          height: (2 - frameMbsOnlyFlag) * (picHeightInMapUnitsMinus1 + 1) * 16 - frameCropTopOffset * 2 - frameCropBottomOffset * 2,\r\n          // sar is sample aspect ratio\r\n          sarRatio: sarRatio\r\n        };\r\n      };\r\n    };\r\n    H264Stream$1.prototype = new Stream$2();\r\n    var h264 = {\r\n      H264Stream: H264Stream$1,\r\n      NalByteStream: NalByteStream\r\n    };\r\n    /**\r\n     * mux.js\r\n     *\r\n     * Copyright (c) Brightcove\r\n     * Licensed Apache-2.0 https://github.com/videojs/mux.js/blob/master/LICENSE\r\n     *\r\n     * Utilities to detect basic properties and metadata about Aac data.\r\n     */\r\n\r\n    var ADTS_SAMPLING_FREQUENCIES = [96000, 88200, 64000, 48000, 44100, 32000, 24000, 22050, 16000, 12000, 11025, 8000, 7350];\r\n    var parseId3TagSize = function (header, byteIndex) {\r\n      var returnSize = header[byteIndex + 6] << 21 | header[byteIndex + 7] << 14 | header[byteIndex + 8] << 7 | header[byteIndex + 9],\r\n        flags = header[byteIndex + 5],\r\n        footerPresent = (flags & 16) >> 4; // if we get a negative returnSize clamp it to 0\r\n\r\n      returnSize = returnSize >= 0 ? returnSize : 0;\r\n      if (footerPresent) {\r\n        return returnSize + 20;\r\n      }\r\n      return returnSize + 10;\r\n    };\r\n    var getId3Offset = function (data, offset) {\r\n      if (data.length - offset < 10 || data[offset] !== 'I'.charCodeAt(0) || data[offset + 1] !== 'D'.charCodeAt(0) || data[offset + 2] !== '3'.charCodeAt(0)) {\r\n        return offset;\r\n      }\r\n      offset += parseId3TagSize(data, offset);\r\n      return getId3Offset(data, offset);\r\n    }; // TODO: use vhs-utils\r\n\r\n    var isLikelyAacData$1 = function (data) {\r\n      var offset = getId3Offset(data, 0);\r\n      return data.length >= offset + 2 && (data[offset] & 0xFF) === 0xFF && (data[offset + 1] & 0xF0) === 0xF0 &&\r\n      // verify that the 2 layer bits are 0, aka this\r\n      // is not mp3 data but aac data.\r\n      (data[offset + 1] & 0x16) === 0x10;\r\n    };\r\n    var parseSyncSafeInteger = function (data) {\r\n      return data[0] << 21 | data[1] << 14 | data[2] << 7 | data[3];\r\n    }; // return a percent-encoded representation of the specified byte range\r\n    // @see http://en.wikipedia.org/wiki/Percent-encoding\r\n\r\n    var percentEncode = function (bytes, start, end) {\r\n      var i,\r\n        result = '';\r\n      for (i = start; i < end; i++) {\r\n        result += '%' + ('00' + bytes[i].toString(16)).slice(-2);\r\n      }\r\n      return result;\r\n    }; // return the string representation of the specified byte range,\r\n    // interpreted as ISO-8859-1.\r\n\r\n    var parseIso88591 = function (bytes, start, end) {\r\n      return unescape(percentEncode(bytes, start, end)); // jshint ignore:line\r\n    };\r\n    var parseAdtsSize = function (header, byteIndex) {\r\n      var lowThree = (header[byteIndex + 5] & 0xE0) >> 5,\r\n        middle = header[byteIndex + 4] << 3,\r\n        highTwo = header[byteIndex + 3] & 0x3 << 11;\r\n      return highTwo | middle | lowThree;\r\n    };\r\n    var parseType$5 = function (header, byteIndex) {\r\n      if (header[byteIndex] === 'I'.charCodeAt(0) && header[byteIndex + 1] === 'D'.charCodeAt(0) && header[byteIndex + 2] === '3'.charCodeAt(0)) {\r\n        return 'timed-metadata';\r\n      } else if (header[byteIndex] & 0xff === 0xff && (header[byteIndex + 1] & 0xf0) === 0xf0) {\r\n        return 'audio';\r\n      }\r\n      return null;\r\n    };\r\n    var parseSampleRate = function (packet) {\r\n      var i = 0;\r\n      while (i + 5 < packet.length) {\r\n        if (packet[i] !== 0xFF || (packet[i + 1] & 0xF6) !== 0xF0) {\r\n          // If a valid header was not found,  jump one forward and attempt to\r\n          // find a valid ADTS header starting at the next byte\r\n          i++;\r\n          continue;\r\n        }\r\n        return ADTS_SAMPLING_FREQUENCIES[(packet[i + 2] & 0x3c) >>> 2];\r\n      }\r\n      return null;\r\n    };\r\n    var parseAacTimestamp = function (packet) {\r\n      var frameStart, frameSize, frame, frameHeader; // find the start of the first frame and the end of the tag\r\n\r\n      frameStart = 10;\r\n      if (packet[5] & 0x40) {\r\n        // advance the frame start past the extended header\r\n        frameStart += 4; // header size field\r\n\r\n        frameStart += parseSyncSafeInteger(packet.subarray(10, 14));\r\n      } // parse one or more ID3 frames\r\n      // http://id3.org/id3v2.3.0#ID3v2_frame_overview\r\n\r\n      do {\r\n        // determine the number of bytes in this frame\r\n        frameSize = parseSyncSafeInteger(packet.subarray(frameStart + 4, frameStart + 8));\r\n        if (frameSize < 1) {\r\n          return null;\r\n        }\r\n        frameHeader = String.fromCharCode(packet[frameStart], packet[frameStart + 1], packet[frameStart + 2], packet[frameStart + 3]);\r\n        if (frameHeader === 'PRIV') {\r\n          frame = packet.subarray(frameStart + 10, frameStart + frameSize + 10);\r\n          for (var i = 0; i < frame.byteLength; i++) {\r\n            if (frame[i] === 0) {\r\n              var owner = parseIso88591(frame, 0, i);\r\n              if (owner === 'com.apple.streaming.transportStreamTimestamp') {\r\n                var d = frame.subarray(i + 1);\r\n                var size = (d[3] & 0x01) << 30 | d[4] << 22 | d[5] << 14 | d[6] << 6 | d[7] >>> 2;\r\n                size *= 4;\r\n                size += d[7] & 0x03;\r\n                return size;\r\n              }\r\n              break;\r\n            }\r\n          }\r\n        }\r\n        frameStart += 10; // advance past the frame header\r\n\r\n        frameStart += frameSize; // advance past the frame body\r\n      } while (frameStart < packet.byteLength);\r\n      return null;\r\n    };\r\n    var utils = {\r\n      isLikelyAacData: isLikelyAacData$1,\r\n      parseId3TagSize: parseId3TagSize,\r\n      parseAdtsSize: parseAdtsSize,\r\n      parseType: parseType$5,\r\n      parseSampleRate: parseSampleRate,\r\n      parseAacTimestamp: parseAacTimestamp\r\n    };\r\n    /**\r\n     * mux.js\r\n     *\r\n     * Copyright (c) Brightcove\r\n     * Licensed Apache-2.0 https://github.com/videojs/mux.js/blob/master/LICENSE\r\n     *\r\n     * A stream-based aac to mp4 converter. This utility can be used to\r\n     * deliver mp4s to a SourceBuffer on platforms that support native\r\n     * Media Source Extensions.\r\n     */\r\n\r\n    var Stream$1 = stream;\r\n    var aacUtils = utils; // Constants\r\n\r\n    var AacStream$1;\r\n    /**\r\n     * Splits an incoming stream of binary data into ADTS and ID3 Frames.\r\n     */\r\n\r\n    AacStream$1 = function () {\r\n      var everything = new Uint8Array(),\r\n        timeStamp = 0;\r\n      AacStream$1.prototype.init.call(this);\r\n      this.setTimestamp = function (timestamp) {\r\n        timeStamp = timestamp;\r\n      };\r\n      this.push = function (bytes) {\r\n        var frameSize = 0,\r\n          byteIndex = 0,\r\n          bytesLeft,\r\n          chunk,\r\n          packet,\r\n          tempLength; // If there are bytes remaining from the last segment, prepend them to the\r\n        // bytes that were pushed in\r\n\r\n        if (everything.length) {\r\n          tempLength = everything.length;\r\n          everything = new Uint8Array(bytes.byteLength + tempLength);\r\n          everything.set(everything.subarray(0, tempLength));\r\n          everything.set(bytes, tempLength);\r\n        } else {\r\n          everything = bytes;\r\n        }\r\n        while (everything.length - byteIndex >= 3) {\r\n          if (everything[byteIndex] === 'I'.charCodeAt(0) && everything[byteIndex + 1] === 'D'.charCodeAt(0) && everything[byteIndex + 2] === '3'.charCodeAt(0)) {\r\n            // Exit early because we don't have enough to parse\r\n            // the ID3 tag header\r\n            if (everything.length - byteIndex < 10) {\r\n              break;\r\n            } // check framesize\r\n\r\n            frameSize = aacUtils.parseId3TagSize(everything, byteIndex); // Exit early if we don't have enough in the buffer\r\n            // to emit a full packet\r\n            // Add to byteIndex to support multiple ID3 tags in sequence\r\n\r\n            if (byteIndex + frameSize > everything.length) {\r\n              break;\r\n            }\r\n            chunk = {\r\n              type: 'timed-metadata',\r\n              data: everything.subarray(byteIndex, byteIndex + frameSize)\r\n            };\r\n            this.trigger('data', chunk);\r\n            byteIndex += frameSize;\r\n            continue;\r\n          } else if ((everything[byteIndex] & 0xff) === 0xff && (everything[byteIndex + 1] & 0xf0) === 0xf0) {\r\n            // Exit early because we don't have enough to parse\r\n            // the ADTS frame header\r\n            if (everything.length - byteIndex < 7) {\r\n              break;\r\n            }\r\n            frameSize = aacUtils.parseAdtsSize(everything, byteIndex); // Exit early if we don't have enough in the buffer\r\n            // to emit a full packet\r\n\r\n            if (byteIndex + frameSize > everything.length) {\r\n              break;\r\n            }\r\n            packet = {\r\n              type: 'audio',\r\n              data: everything.subarray(byteIndex, byteIndex + frameSize),\r\n              pts: timeStamp,\r\n              dts: timeStamp\r\n            };\r\n            this.trigger('data', packet);\r\n            byteIndex += frameSize;\r\n            continue;\r\n          }\r\n          byteIndex++;\r\n        }\r\n        bytesLeft = everything.length - byteIndex;\r\n        if (bytesLeft > 0) {\r\n          everything = everything.subarray(byteIndex);\r\n        } else {\r\n          everything = new Uint8Array();\r\n        }\r\n      };\r\n      this.reset = function () {\r\n        everything = new Uint8Array();\r\n        this.trigger('reset');\r\n      };\r\n      this.endTimeline = function () {\r\n        everything = new Uint8Array();\r\n        this.trigger('endedtimeline');\r\n      };\r\n    };\r\n    AacStream$1.prototype = new Stream$1();\r\n    var aac = AacStream$1;\r\n    var AUDIO_PROPERTIES$1 = ['audioobjecttype', 'channelcount', 'samplerate', 'samplingfrequencyindex', 'samplesize'];\r\n    var audioProperties = AUDIO_PROPERTIES$1;\r\n    var VIDEO_PROPERTIES$1 = ['width', 'height', 'profileIdc', 'levelIdc', 'profileCompatibility', 'sarRatio'];\r\n    var videoProperties = VIDEO_PROPERTIES$1;\r\n    /**\r\n     * mux.js\r\n     *\r\n     * Copyright (c) Brightcove\r\n     * Licensed Apache-2.0 https://github.com/videojs/mux.js/blob/master/LICENSE\r\n     *\r\n     * A stream-based mp2t to mp4 converter. This utility can be used to\r\n     * deliver mp4s to a SourceBuffer on platforms that support native\r\n     * Media Source Extensions.\r\n     */\r\n\r\n    var Stream = stream;\r\n    var mp4 = mp4Generator;\r\n    var frameUtils = frameUtils$1;\r\n    var audioFrameUtils = audioFrameUtils$1;\r\n    var trackDecodeInfo = trackDecodeInfo$1;\r\n    var m2ts = m2ts_1;\r\n    var clock = clock$2;\r\n    var AdtsStream = adts;\r\n    var H264Stream = h264.H264Stream;\r\n    var AacStream = aac;\r\n    var isLikelyAacData = utils.isLikelyAacData;\r\n    var ONE_SECOND_IN_TS$1 = clock$2.ONE_SECOND_IN_TS;\r\n    var AUDIO_PROPERTIES = audioProperties;\r\n    var VIDEO_PROPERTIES = videoProperties; // object types\r\n\r\n    var VideoSegmentStream, AudioSegmentStream, Transmuxer, CoalesceStream;\r\n    var retriggerForStream = function (key, event) {\r\n      event.stream = key;\r\n      this.trigger('log', event);\r\n    };\r\n    var addPipelineLogRetriggers = function (transmuxer, pipeline) {\r\n      var keys = Object.keys(pipeline);\r\n      for (var i = 0; i < keys.length; i++) {\r\n        var key = keys[i]; // skip non-stream keys and headOfPipeline\r\n        // which is just a duplicate\r\n\r\n        if (key === 'headOfPipeline' || !pipeline[key].on) {\r\n          continue;\r\n        }\r\n        pipeline[key].on('log', retriggerForStream.bind(transmuxer, key));\r\n      }\r\n    };\r\n    /**\r\n     * Compare two arrays (even typed) for same-ness\r\n     */\r\n\r\n    var arrayEquals = function (a, b) {\r\n      var i;\r\n      if (a.length !== b.length) {\r\n        return false;\r\n      } // compare the value of each element in the array\r\n\r\n      for (i = 0; i < a.length; i++) {\r\n        if (a[i] !== b[i]) {\r\n          return false;\r\n        }\r\n      }\r\n      return true;\r\n    };\r\n    var generateSegmentTimingInfo = function (baseMediaDecodeTime, startDts, startPts, endDts, endPts, prependedContentDuration) {\r\n      var ptsOffsetFromDts = startPts - startDts,\r\n        decodeDuration = endDts - startDts,\r\n        presentationDuration = endPts - startPts; // The PTS and DTS values are based on the actual stream times from the segment,\r\n      // however, the player time values will reflect a start from the baseMediaDecodeTime.\r\n      // In order to provide relevant values for the player times, base timing info on the\r\n      // baseMediaDecodeTime and the DTS and PTS durations of the segment.\r\n\r\n      return {\r\n        start: {\r\n          dts: baseMediaDecodeTime,\r\n          pts: baseMediaDecodeTime + ptsOffsetFromDts\r\n        },\r\n        end: {\r\n          dts: baseMediaDecodeTime + decodeDuration,\r\n          pts: baseMediaDecodeTime + presentationDuration\r\n        },\r\n        prependedContentDuration: prependedContentDuration,\r\n        baseMediaDecodeTime: baseMediaDecodeTime\r\n      };\r\n    };\r\n    /**\r\n     * Constructs a single-track, ISO BMFF media segment from AAC data\r\n     * events. The output of this stream can be fed to a SourceBuffer\r\n     * configured with a suitable initialization segment.\r\n     * @param track {object} track metadata configuration\r\n     * @param options {object} transmuxer options object\r\n     * @param options.keepOriginalTimestamps {boolean} If true, keep the timestamps\r\n     *        in the source; false to adjust the first segment to start at 0.\r\n     */\r\n\r\n    AudioSegmentStream = function (track, options) {\r\n      var adtsFrames = [],\r\n        sequenceNumber,\r\n        earliestAllowedDts = 0,\r\n        audioAppendStartTs = 0,\r\n        videoBaseMediaDecodeTime = Infinity;\r\n      options = options || {};\r\n      sequenceNumber = options.firstSequenceNumber || 0;\r\n      AudioSegmentStream.prototype.init.call(this);\r\n      this.push = function (data) {\r\n        trackDecodeInfo.collectDtsInfo(track, data);\r\n        if (track) {\r\n          AUDIO_PROPERTIES.forEach(function (prop) {\r\n            track[prop] = data[prop];\r\n          });\r\n        } // buffer audio data until end() is called\r\n\r\n        adtsFrames.push(data);\r\n      };\r\n      this.setEarliestDts = function (earliestDts) {\r\n        earliestAllowedDts = earliestDts;\r\n      };\r\n      this.setVideoBaseMediaDecodeTime = function (baseMediaDecodeTime) {\r\n        videoBaseMediaDecodeTime = baseMediaDecodeTime;\r\n      };\r\n      this.setAudioAppendStart = function (timestamp) {\r\n        audioAppendStartTs = timestamp;\r\n      };\r\n      this.flush = function () {\r\n        var frames, moof, mdat, boxes, frameDuration, segmentDuration, videoClockCyclesOfSilencePrefixed; // return early if no audio data has been observed\r\n\r\n        if (adtsFrames.length === 0) {\r\n          this.trigger('done', 'AudioSegmentStream');\r\n          return;\r\n        }\r\n        frames = audioFrameUtils.trimAdtsFramesByEarliestDts(adtsFrames, track, earliestAllowedDts);\r\n        track.baseMediaDecodeTime = trackDecodeInfo.calculateTrackBaseMediaDecodeTime(track, options.keepOriginalTimestamps); // amount of audio filled but the value is in video clock rather than audio clock\r\n\r\n        videoClockCyclesOfSilencePrefixed = audioFrameUtils.prefixWithSilence(track, frames, audioAppendStartTs, videoBaseMediaDecodeTime); // we have to build the index from byte locations to\r\n        // samples (that is, adts frames) in the audio data\r\n\r\n        track.samples = audioFrameUtils.generateSampleTable(frames); // concatenate the audio data to constuct the mdat\r\n\r\n        mdat = mp4.mdat(audioFrameUtils.concatenateFrameData(frames));\r\n        adtsFrames = [];\r\n        moof = mp4.moof(sequenceNumber, [track]);\r\n        boxes = new Uint8Array(moof.byteLength + mdat.byteLength); // bump the sequence number for next time\r\n\r\n        sequenceNumber++;\r\n        boxes.set(moof);\r\n        boxes.set(mdat, moof.byteLength);\r\n        trackDecodeInfo.clearDtsInfo(track);\r\n        frameDuration = Math.ceil(ONE_SECOND_IN_TS$1 * 1024 / track.samplerate); // TODO this check was added to maintain backwards compatibility (particularly with\r\n        // tests) on adding the timingInfo event. However, it seems unlikely that there's a\r\n        // valid use-case where an init segment/data should be triggered without associated\r\n        // frames. Leaving for now, but should be looked into.\r\n\r\n        if (frames.length) {\r\n          segmentDuration = frames.length * frameDuration;\r\n          this.trigger('segmentTimingInfo', generateSegmentTimingInfo(\r\n          // The audio track's baseMediaDecodeTime is in audio clock cycles, but the\r\n          // frame info is in video clock cycles. Convert to match expectation of\r\n          // listeners (that all timestamps will be based on video clock cycles).\r\n          clock.audioTsToVideoTs(track.baseMediaDecodeTime, track.samplerate),\r\n          // frame times are already in video clock, as is segment duration\r\n          frames[0].dts, frames[0].pts, frames[0].dts + segmentDuration, frames[0].pts + segmentDuration, videoClockCyclesOfSilencePrefixed || 0));\r\n          this.trigger('timingInfo', {\r\n            start: frames[0].pts,\r\n            end: frames[0].pts + segmentDuration\r\n          });\r\n        }\r\n        this.trigger('data', {\r\n          track: track,\r\n          boxes: boxes\r\n        });\r\n        this.trigger('done', 'AudioSegmentStream');\r\n      };\r\n      this.reset = function () {\r\n        trackDecodeInfo.clearDtsInfo(track);\r\n        adtsFrames = [];\r\n        this.trigger('reset');\r\n      };\r\n    };\r\n    AudioSegmentStream.prototype = new Stream();\r\n    /**\r\n     * Constructs a single-track, ISO BMFF media segment from H264 data\r\n     * events. The output of this stream can be fed to a SourceBuffer\r\n     * configured with a suitable initialization segment.\r\n     * @param track {object} track metadata configuration\r\n     * @param options {object} transmuxer options object\r\n     * @param options.alignGopsAtEnd {boolean} If true, start from the end of the\r\n     *        gopsToAlignWith list when attempting to align gop pts\r\n     * @param options.keepOriginalTimestamps {boolean} If true, keep the timestamps\r\n     *        in the source; false to adjust the first segment to start at 0.\r\n     */\r\n\r\n    VideoSegmentStream = function (track, options) {\r\n      var sequenceNumber,\r\n        nalUnits = [],\r\n        gopsToAlignWith = [],\r\n        config,\r\n        pps;\r\n      options = options || {};\r\n      sequenceNumber = options.firstSequenceNumber || 0;\r\n      VideoSegmentStream.prototype.init.call(this);\r\n      delete track.minPTS;\r\n      this.gopCache_ = [];\r\n      /**\r\n        * Constructs a ISO BMFF segment given H264 nalUnits\r\n        * @param {Object} nalUnit A data event representing a nalUnit\r\n        * @param {String} nalUnit.nalUnitType\r\n        * @param {Object} nalUnit.config Properties for a mp4 track\r\n        * @param {Uint8Array} nalUnit.data The nalUnit bytes\r\n        * @see lib/codecs/h264.js\r\n       **/\r\n\r\n      this.push = function (nalUnit) {\r\n        trackDecodeInfo.collectDtsInfo(track, nalUnit); // record the track config\r\n\r\n        if (nalUnit.nalUnitType === 'seq_parameter_set_rbsp' && !config) {\r\n          config = nalUnit.config;\r\n          track.sps = [nalUnit.data];\r\n          VIDEO_PROPERTIES.forEach(function (prop) {\r\n            track[prop] = config[prop];\r\n          }, this);\r\n        }\r\n        if (nalUnit.nalUnitType === 'pic_parameter_set_rbsp' && !pps) {\r\n          pps = nalUnit.data;\r\n          track.pps = [nalUnit.data];\r\n        } // buffer video until flush() is called\r\n\r\n        nalUnits.push(nalUnit);\r\n      };\r\n      /**\r\n        * Pass constructed ISO BMFF track and boxes on to the\r\n        * next stream in the pipeline\r\n       **/\r\n\r\n      this.flush = function () {\r\n        var frames,\r\n          gopForFusion,\r\n          gops,\r\n          moof,\r\n          mdat,\r\n          boxes,\r\n          prependedContentDuration = 0,\r\n          firstGop,\r\n          lastGop; // Throw away nalUnits at the start of the byte stream until\r\n        // we find the first AUD\r\n\r\n        while (nalUnits.length) {\r\n          if (nalUnits[0].nalUnitType === 'access_unit_delimiter_rbsp') {\r\n            break;\r\n          }\r\n          nalUnits.shift();\r\n        } // Return early if no video data has been observed\r\n\r\n        if (nalUnits.length === 0) {\r\n          this.resetStream_();\r\n          this.trigger('done', 'VideoSegmentStream');\r\n          return;\r\n        } // Organize the raw nal-units into arrays that represent\r\n        // higher-level constructs such as frames and gops\r\n        // (group-of-pictures)\r\n\r\n        frames = frameUtils.groupNalsIntoFrames(nalUnits);\r\n        gops = frameUtils.groupFramesIntoGops(frames); // If the first frame of this fragment is not a keyframe we have\r\n        // a problem since MSE (on Chrome) requires a leading keyframe.\r\n        //\r\n        // We have two approaches to repairing this situation:\r\n        // 1) GOP-FUSION:\r\n        //    This is where we keep track of the GOPS (group-of-pictures)\r\n        //    from previous fragments and attempt to find one that we can\r\n        //    prepend to the current fragment in order to create a valid\r\n        //    fragment.\r\n        // 2) KEYFRAME-PULLING:\r\n        //    Here we search for the first keyframe in the fragment and\r\n        //    throw away all the frames between the start of the fragment\r\n        //    and that keyframe. We then extend the duration and pull the\r\n        //    PTS of the keyframe forward so that it covers the time range\r\n        //    of the frames that were disposed of.\r\n        //\r\n        // #1 is far prefereable over #2 which can cause \"stuttering\" but\r\n        // requires more things to be just right.\r\n\r\n        if (!gops[0][0].keyFrame) {\r\n          // Search for a gop for fusion from our gopCache\r\n          gopForFusion = this.getGopForFusion_(nalUnits[0], track);\r\n          if (gopForFusion) {\r\n            // in order to provide more accurate timing information about the segment, save\r\n            // the number of seconds prepended to the original segment due to GOP fusion\r\n            prependedContentDuration = gopForFusion.duration;\r\n            gops.unshift(gopForFusion); // Adjust Gops' metadata to account for the inclusion of the\r\n            // new gop at the beginning\r\n\r\n            gops.byteLength += gopForFusion.byteLength;\r\n            gops.nalCount += gopForFusion.nalCount;\r\n            gops.pts = gopForFusion.pts;\r\n            gops.dts = gopForFusion.dts;\r\n            gops.duration += gopForFusion.duration;\r\n          } else {\r\n            // If we didn't find a candidate gop fall back to keyframe-pulling\r\n            gops = frameUtils.extendFirstKeyFrame(gops);\r\n          }\r\n        } // Trim gops to align with gopsToAlignWith\r\n\r\n        if (gopsToAlignWith.length) {\r\n          var alignedGops;\r\n          if (options.alignGopsAtEnd) {\r\n            alignedGops = this.alignGopsAtEnd_(gops);\r\n          } else {\r\n            alignedGops = this.alignGopsAtStart_(gops);\r\n          }\r\n          if (!alignedGops) {\r\n            // save all the nals in the last GOP into the gop cache\r\n            this.gopCache_.unshift({\r\n              gop: gops.pop(),\r\n              pps: track.pps,\r\n              sps: track.sps\r\n            }); // Keep a maximum of 6 GOPs in the cache\r\n\r\n            this.gopCache_.length = Math.min(6, this.gopCache_.length); // Clear nalUnits\r\n\r\n            nalUnits = []; // return early no gops can be aligned with desired gopsToAlignWith\r\n\r\n            this.resetStream_();\r\n            this.trigger('done', 'VideoSegmentStream');\r\n            return;\r\n          } // Some gops were trimmed. clear dts info so minSegmentDts and pts are correct\r\n          // when recalculated before sending off to CoalesceStream\r\n\r\n          trackDecodeInfo.clearDtsInfo(track);\r\n          gops = alignedGops;\r\n        }\r\n        trackDecodeInfo.collectDtsInfo(track, gops); // First, we have to build the index from byte locations to\r\n        // samples (that is, frames) in the video data\r\n\r\n        track.samples = frameUtils.generateSampleTable(gops); // Concatenate the video data and construct the mdat\r\n\r\n        mdat = mp4.mdat(frameUtils.concatenateNalData(gops));\r\n        track.baseMediaDecodeTime = trackDecodeInfo.calculateTrackBaseMediaDecodeTime(track, options.keepOriginalTimestamps);\r\n        this.trigger('processedGopsInfo', gops.map(function (gop) {\r\n          return {\r\n            pts: gop.pts,\r\n            dts: gop.dts,\r\n            byteLength: gop.byteLength\r\n          };\r\n        }));\r\n        firstGop = gops[0];\r\n        lastGop = gops[gops.length - 1];\r\n        this.trigger('segmentTimingInfo', generateSegmentTimingInfo(track.baseMediaDecodeTime, firstGop.dts, firstGop.pts, lastGop.dts + lastGop.duration, lastGop.pts + lastGop.duration, prependedContentDuration));\r\n        this.trigger('timingInfo', {\r\n          start: gops[0].pts,\r\n          end: gops[gops.length - 1].pts + gops[gops.length - 1].duration\r\n        }); // save all the nals in the last GOP into the gop cache\r\n\r\n        this.gopCache_.unshift({\r\n          gop: gops.pop(),\r\n          pps: track.pps,\r\n          sps: track.sps\r\n        }); // Keep a maximum of 6 GOPs in the cache\r\n\r\n        this.gopCache_.length = Math.min(6, this.gopCache_.length); // Clear nalUnits\r\n\r\n        nalUnits = [];\r\n        this.trigger('baseMediaDecodeTime', track.baseMediaDecodeTime);\r\n        this.trigger('timelineStartInfo', track.timelineStartInfo);\r\n        moof = mp4.moof(sequenceNumber, [track]); // it would be great to allocate this array up front instead of\r\n        // throwing away hundreds of media segment fragments\r\n\r\n        boxes = new Uint8Array(moof.byteLength + mdat.byteLength); // Bump the sequence number for next time\r\n\r\n        sequenceNumber++;\r\n        boxes.set(moof);\r\n        boxes.set(mdat, moof.byteLength);\r\n        this.trigger('data', {\r\n          track: track,\r\n          boxes: boxes\r\n        });\r\n        this.resetStream_(); // Continue with the flush process now\r\n\r\n        this.trigger('done', 'VideoSegmentStream');\r\n      };\r\n      this.reset = function () {\r\n        this.resetStream_();\r\n        nalUnits = [];\r\n        this.gopCache_.length = 0;\r\n        gopsToAlignWith.length = 0;\r\n        this.trigger('reset');\r\n      };\r\n      this.resetStream_ = function () {\r\n        trackDecodeInfo.clearDtsInfo(track); // reset config and pps because they may differ across segments\r\n        // for instance, when we are rendition switching\r\n\r\n        config = undefined;\r\n        pps = undefined;\r\n      }; // Search for a candidate Gop for gop-fusion from the gop cache and\r\n      // return it or return null if no good candidate was found\r\n\r\n      this.getGopForFusion_ = function (nalUnit) {\r\n        var halfSecond = 45000,\r\n          // Half-a-second in a 90khz clock\r\n          allowableOverlap = 10000,\r\n          // About 3 frames @ 30fps\r\n          nearestDistance = Infinity,\r\n          dtsDistance,\r\n          nearestGopObj,\r\n          currentGop,\r\n          currentGopObj,\r\n          i; // Search for the GOP nearest to the beginning of this nal unit\r\n\r\n        for (i = 0; i < this.gopCache_.length; i++) {\r\n          currentGopObj = this.gopCache_[i];\r\n          currentGop = currentGopObj.gop; // Reject Gops with different SPS or PPS\r\n\r\n          if (!(track.pps && arrayEquals(track.pps[0], currentGopObj.pps[0])) || !(track.sps && arrayEquals(track.sps[0], currentGopObj.sps[0]))) {\r\n            continue;\r\n          } // Reject Gops that would require a negative baseMediaDecodeTime\r\n\r\n          if (currentGop.dts < track.timelineStartInfo.dts) {\r\n            continue;\r\n          } // The distance between the end of the gop and the start of the nalUnit\r\n\r\n          dtsDistance = nalUnit.dts - currentGop.dts - currentGop.duration; // Only consider GOPS that start before the nal unit and end within\r\n          // a half-second of the nal unit\r\n\r\n          if (dtsDistance >= -allowableOverlap && dtsDistance <= halfSecond) {\r\n            // Always use the closest GOP we found if there is more than\r\n            // one candidate\r\n            if (!nearestGopObj || nearestDistance > dtsDistance) {\r\n              nearestGopObj = currentGopObj;\r\n              nearestDistance = dtsDistance;\r\n            }\r\n          }\r\n        }\r\n        if (nearestGopObj) {\r\n          return nearestGopObj.gop;\r\n        }\r\n        return null;\r\n      }; // trim gop list to the first gop found that has a matching pts with a gop in the list\r\n      // of gopsToAlignWith starting from the START of the list\r\n\r\n      this.alignGopsAtStart_ = function (gops) {\r\n        var alignIndex, gopIndex, align, gop, byteLength, nalCount, duration, alignedGops;\r\n        byteLength = gops.byteLength;\r\n        nalCount = gops.nalCount;\r\n        duration = gops.duration;\r\n        alignIndex = gopIndex = 0;\r\n        while (alignIndex < gopsToAlignWith.length && gopIndex < gops.length) {\r\n          align = gopsToAlignWith[alignIndex];\r\n          gop = gops[gopIndex];\r\n          if (align.pts === gop.pts) {\r\n            break;\r\n          }\r\n          if (gop.pts > align.pts) {\r\n            // this current gop starts after the current gop we want to align on, so increment\r\n            // align index\r\n            alignIndex++;\r\n            continue;\r\n          } // current gop starts before the current gop we want to align on. so increment gop\r\n          // index\r\n\r\n          gopIndex++;\r\n          byteLength -= gop.byteLength;\r\n          nalCount -= gop.nalCount;\r\n          duration -= gop.duration;\r\n        }\r\n        if (gopIndex === 0) {\r\n          // no gops to trim\r\n          return gops;\r\n        }\r\n        if (gopIndex === gops.length) {\r\n          // all gops trimmed, skip appending all gops\r\n          return null;\r\n        }\r\n        alignedGops = gops.slice(gopIndex);\r\n        alignedGops.byteLength = byteLength;\r\n        alignedGops.duration = duration;\r\n        alignedGops.nalCount = nalCount;\r\n        alignedGops.pts = alignedGops[0].pts;\r\n        alignedGops.dts = alignedGops[0].dts;\r\n        return alignedGops;\r\n      }; // trim gop list to the first gop found that has a matching pts with a gop in the list\r\n      // of gopsToAlignWith starting from the END of the list\r\n\r\n      this.alignGopsAtEnd_ = function (gops) {\r\n        var alignIndex, gopIndex, align, gop, alignEndIndex, matchFound;\r\n        alignIndex = gopsToAlignWith.length - 1;\r\n        gopIndex = gops.length - 1;\r\n        alignEndIndex = null;\r\n        matchFound = false;\r\n        while (alignIndex >= 0 && gopIndex >= 0) {\r\n          align = gopsToAlignWith[alignIndex];\r\n          gop = gops[gopIndex];\r\n          if (align.pts === gop.pts) {\r\n            matchFound = true;\r\n            break;\r\n          }\r\n          if (align.pts > gop.pts) {\r\n            alignIndex--;\r\n            continue;\r\n          }\r\n          if (alignIndex === gopsToAlignWith.length - 1) {\r\n            // gop.pts is greater than the last alignment candidate. If no match is found\r\n            // by the end of this loop, we still want to append gops that come after this\r\n            // point\r\n            alignEndIndex = gopIndex;\r\n          }\r\n          gopIndex--;\r\n        }\r\n        if (!matchFound && alignEndIndex === null) {\r\n          return null;\r\n        }\r\n        var trimIndex;\r\n        if (matchFound) {\r\n          trimIndex = gopIndex;\r\n        } else {\r\n          trimIndex = alignEndIndex;\r\n        }\r\n        if (trimIndex === 0) {\r\n          return gops;\r\n        }\r\n        var alignedGops = gops.slice(trimIndex);\r\n        var metadata = alignedGops.reduce(function (total, gop) {\r\n          total.byteLength += gop.byteLength;\r\n          total.duration += gop.duration;\r\n          total.nalCount += gop.nalCount;\r\n          return total;\r\n        }, {\r\n          byteLength: 0,\r\n          duration: 0,\r\n          nalCount: 0\r\n        });\r\n        alignedGops.byteLength = metadata.byteLength;\r\n        alignedGops.duration = metadata.duration;\r\n        alignedGops.nalCount = metadata.nalCount;\r\n        alignedGops.pts = alignedGops[0].pts;\r\n        alignedGops.dts = alignedGops[0].dts;\r\n        return alignedGops;\r\n      };\r\n      this.alignGopsWith = function (newGopsToAlignWith) {\r\n        gopsToAlignWith = newGopsToAlignWith;\r\n      };\r\n    };\r\n    VideoSegmentStream.prototype = new Stream();\r\n    /**\r\n     * A Stream that can combine multiple streams (ie. audio & video)\r\n     * into a single output segment for MSE. Also supports audio-only\r\n     * and video-only streams.\r\n     * @param options {object} transmuxer options object\r\n     * @param options.keepOriginalTimestamps {boolean} If true, keep the timestamps\r\n     *        in the source; false to adjust the first segment to start at media timeline start.\r\n     */\r\n\r\n    CoalesceStream = function (options, metadataStream) {\r\n      // Number of Tracks per output segment\r\n      // If greater than 1, we combine multiple\r\n      // tracks into a single segment\r\n      this.numberOfTracks = 0;\r\n      this.metadataStream = metadataStream;\r\n      options = options || {};\r\n      if (typeof options.remux !== 'undefined') {\r\n        this.remuxTracks = !!options.remux;\r\n      } else {\r\n        this.remuxTracks = true;\r\n      }\r\n      if (typeof options.keepOriginalTimestamps === 'boolean') {\r\n        this.keepOriginalTimestamps = options.keepOriginalTimestamps;\r\n      } else {\r\n        this.keepOriginalTimestamps = false;\r\n      }\r\n      this.pendingTracks = [];\r\n      this.videoTrack = null;\r\n      this.pendingBoxes = [];\r\n      this.pendingCaptions = [];\r\n      this.pendingMetadata = [];\r\n      this.pendingBytes = 0;\r\n      this.emittedTracks = 0;\r\n      CoalesceStream.prototype.init.call(this); // Take output from multiple\r\n\r\n      this.push = function (output) {\r\n        // buffer incoming captions until the associated video segment\r\n        // finishes\r\n        if (output.content || output.text) {\r\n          return this.pendingCaptions.push(output);\r\n        } // buffer incoming id3 tags until the final flush\r\n\r\n        if (output.frames) {\r\n          return this.pendingMetadata.push(output);\r\n        } // Add this track to the list of pending tracks and store\r\n        // important information required for the construction of\r\n        // the final segment\r\n\r\n        this.pendingTracks.push(output.track);\r\n        this.pendingBytes += output.boxes.byteLength; // TODO: is there an issue for this against chrome?\r\n        // We unshift audio and push video because\r\n        // as of Chrome 75 when switching from\r\n        // one init segment to another if the video\r\n        // mdat does not appear after the audio mdat\r\n        // only audio will play for the duration of our transmux.\r\n\r\n        if (output.track.type === 'video') {\r\n          this.videoTrack = output.track;\r\n          this.pendingBoxes.push(output.boxes);\r\n        }\r\n        if (output.track.type === 'audio') {\r\n          this.audioTrack = output.track;\r\n          this.pendingBoxes.unshift(output.boxes);\r\n        }\r\n      };\r\n    };\r\n    CoalesceStream.prototype = new Stream();\r\n    CoalesceStream.prototype.flush = function (flushSource) {\r\n      var offset = 0,\r\n        event = {\r\n          captions: [],\r\n          captionStreams: {},\r\n          metadata: [],\r\n          info: {}\r\n        },\r\n        caption,\r\n        id3,\r\n        initSegment,\r\n        timelineStartPts = 0,\r\n        i;\r\n      if (this.pendingTracks.length < this.numberOfTracks) {\r\n        if (flushSource !== 'VideoSegmentStream' && flushSource !== 'AudioSegmentStream') {\r\n          // Return because we haven't received a flush from a data-generating\r\n          // portion of the segment (meaning that we have only recieved meta-data\r\n          // or captions.)\r\n          return;\r\n        } else if (this.remuxTracks) {\r\n          // Return until we have enough tracks from the pipeline to remux (if we\r\n          // are remuxing audio and video into a single MP4)\r\n          return;\r\n        } else if (this.pendingTracks.length === 0) {\r\n          // In the case where we receive a flush without any data having been\r\n          // received we consider it an emitted track for the purposes of coalescing\r\n          // `done` events.\r\n          // We do this for the case where there is an audio and video track in the\r\n          // segment but no audio data. (seen in several playlists with alternate\r\n          // audio tracks and no audio present in the main TS segments.)\r\n          this.emittedTracks++;\r\n          if (this.emittedTracks >= this.numberOfTracks) {\r\n            this.trigger('done');\r\n            this.emittedTracks = 0;\r\n          }\r\n          return;\r\n        }\r\n      }\r\n      if (this.videoTrack) {\r\n        timelineStartPts = this.videoTrack.timelineStartInfo.pts;\r\n        VIDEO_PROPERTIES.forEach(function (prop) {\r\n          event.info[prop] = this.videoTrack[prop];\r\n        }, this);\r\n      } else if (this.audioTrack) {\r\n        timelineStartPts = this.audioTrack.timelineStartInfo.pts;\r\n        AUDIO_PROPERTIES.forEach(function (prop) {\r\n          event.info[prop] = this.audioTrack[prop];\r\n        }, this);\r\n      }\r\n      if (this.videoTrack || this.audioTrack) {\r\n        if (this.pendingTracks.length === 1) {\r\n          event.type = this.pendingTracks[0].type;\r\n        } else {\r\n          event.type = 'combined';\r\n        }\r\n        this.emittedTracks += this.pendingTracks.length;\r\n        initSegment = mp4.initSegment(this.pendingTracks); // Create a new typed array to hold the init segment\r\n\r\n        event.initSegment = new Uint8Array(initSegment.byteLength); // Create an init segment containing a moov\r\n        // and track definitions\r\n\r\n        event.initSegment.set(initSegment); // Create a new typed array to hold the moof+mdats\r\n\r\n        event.data = new Uint8Array(this.pendingBytes); // Append each moof+mdat (one per track) together\r\n\r\n        for (i = 0; i < this.pendingBoxes.length; i++) {\r\n          event.data.set(this.pendingBoxes[i], offset);\r\n          offset += this.pendingBoxes[i].byteLength;\r\n        } // Translate caption PTS times into second offsets to match the\r\n        // video timeline for the segment, and add track info\r\n\r\n        for (i = 0; i < this.pendingCaptions.length; i++) {\r\n          caption = this.pendingCaptions[i];\r\n          caption.startTime = clock.metadataTsToSeconds(caption.startPts, timelineStartPts, this.keepOriginalTimestamps);\r\n          caption.endTime = clock.metadataTsToSeconds(caption.endPts, timelineStartPts, this.keepOriginalTimestamps);\r\n          event.captionStreams[caption.stream] = true;\r\n          event.captions.push(caption);\r\n        } // Translate ID3 frame PTS times into second offsets to match the\r\n        // video timeline for the segment\r\n\r\n        for (i = 0; i < this.pendingMetadata.length; i++) {\r\n          id3 = this.pendingMetadata[i];\r\n          id3.cueTime = clock.metadataTsToSeconds(id3.pts, timelineStartPts, this.keepOriginalTimestamps);\r\n          event.metadata.push(id3);\r\n        } // We add this to every single emitted segment even though we only need\r\n        // it for the first\r\n\r\n        event.metadata.dispatchType = this.metadataStream.dispatchType; // Reset stream state\r\n\r\n        this.pendingTracks.length = 0;\r\n        this.videoTrack = null;\r\n        this.pendingBoxes.length = 0;\r\n        this.pendingCaptions.length = 0;\r\n        this.pendingBytes = 0;\r\n        this.pendingMetadata.length = 0; // Emit the built segment\r\n        // We include captions and ID3 tags for backwards compatibility,\r\n        // ideally we should send only video and audio in the data event\r\n\r\n        this.trigger('data', event); // Emit each caption to the outside world\r\n        // Ideally, this would happen immediately on parsing captions,\r\n        // but we need to ensure that video data is sent back first\r\n        // so that caption timing can be adjusted to match video timing\r\n\r\n        for (i = 0; i < event.captions.length; i++) {\r\n          caption = event.captions[i];\r\n          this.trigger('caption', caption);\r\n        } // Emit each id3 tag to the outside world\r\n        // Ideally, this would happen immediately on parsing the tag,\r\n        // but we need to ensure that video data is sent back first\r\n        // so that ID3 frame timing can be adjusted to match video timing\r\n\r\n        for (i = 0; i < event.metadata.length; i++) {\r\n          id3 = event.metadata[i];\r\n          this.trigger('id3Frame', id3);\r\n        }\r\n      } // Only emit `done` if all tracks have been flushed and emitted\r\n\r\n      if (this.emittedTracks >= this.numberOfTracks) {\r\n        this.trigger('done');\r\n        this.emittedTracks = 0;\r\n      }\r\n    };\r\n    CoalesceStream.prototype.setRemux = function (val) {\r\n      this.remuxTracks = val;\r\n    };\r\n    /**\r\n     * A Stream that expects MP2T binary data as input and produces\r\n     * corresponding media segments, suitable for use with Media Source\r\n     * Extension (MSE) implementations that support the ISO BMFF byte\r\n     * stream format, like Chrome.\r\n     */\r\n\r\n    Transmuxer = function (options) {\r\n      var self = this,\r\n        hasFlushed = true,\r\n        videoTrack,\r\n        audioTrack;\r\n      Transmuxer.prototype.init.call(this);\r\n      options = options || {};\r\n      this.baseMediaDecodeTime = options.baseMediaDecodeTime || 0;\r\n      this.transmuxPipeline_ = {};\r\n      this.setupAacPipeline = function () {\r\n        var pipeline = {};\r\n        this.transmuxPipeline_ = pipeline;\r\n        pipeline.type = 'aac';\r\n        pipeline.metadataStream = new m2ts.MetadataStream(); // set up the parsing pipeline\r\n\r\n        pipeline.aacStream = new AacStream();\r\n        pipeline.audioTimestampRolloverStream = new m2ts.TimestampRolloverStream('audio');\r\n        pipeline.timedMetadataTimestampRolloverStream = new m2ts.TimestampRolloverStream('timed-metadata');\r\n        pipeline.adtsStream = new AdtsStream();\r\n        pipeline.coalesceStream = new CoalesceStream(options, pipeline.metadataStream);\r\n        pipeline.headOfPipeline = pipeline.aacStream;\r\n        pipeline.aacStream.pipe(pipeline.audioTimestampRolloverStream).pipe(pipeline.adtsStream);\r\n        pipeline.aacStream.pipe(pipeline.timedMetadataTimestampRolloverStream).pipe(pipeline.metadataStream).pipe(pipeline.coalesceStream);\r\n        pipeline.metadataStream.on('timestamp', function (frame) {\r\n          pipeline.aacStream.setTimestamp(frame.timeStamp);\r\n        });\r\n        pipeline.aacStream.on('data', function (data) {\r\n          if (data.type !== 'timed-metadata' && data.type !== 'audio' || pipeline.audioSegmentStream) {\r\n            return;\r\n          }\r\n          audioTrack = audioTrack || {\r\n            timelineStartInfo: {\r\n              baseMediaDecodeTime: self.baseMediaDecodeTime\r\n            },\r\n            codec: 'adts',\r\n            type: 'audio'\r\n          }; // hook up the audio segment stream to the first track with aac data\r\n\r\n          pipeline.coalesceStream.numberOfTracks++;\r\n          pipeline.audioSegmentStream = new AudioSegmentStream(audioTrack, options);\r\n          pipeline.audioSegmentStream.on('log', self.getLogTrigger_('audioSegmentStream'));\r\n          pipeline.audioSegmentStream.on('timingInfo', self.trigger.bind(self, 'audioTimingInfo')); // Set up the final part of the audio pipeline\r\n\r\n          pipeline.adtsStream.pipe(pipeline.audioSegmentStream).pipe(pipeline.coalesceStream); // emit pmt info\r\n\r\n          self.trigger('trackinfo', {\r\n            hasAudio: !!audioTrack,\r\n            hasVideo: !!videoTrack\r\n          });\r\n        }); // Re-emit any data coming from the coalesce stream to the outside world\r\n\r\n        pipeline.coalesceStream.on('data', this.trigger.bind(this, 'data')); // Let the consumer know we have finished flushing the entire pipeline\r\n\r\n        pipeline.coalesceStream.on('done', this.trigger.bind(this, 'done'));\r\n        addPipelineLogRetriggers(this, pipeline);\r\n      };\r\n      this.setupTsPipeline = function () {\r\n        var pipeline = {};\r\n        this.transmuxPipeline_ = pipeline;\r\n        pipeline.type = 'ts';\r\n        pipeline.metadataStream = new m2ts.MetadataStream(); // set up the parsing pipeline\r\n\r\n        pipeline.packetStream = new m2ts.TransportPacketStream();\r\n        pipeline.parseStream = new m2ts.TransportParseStream();\r\n        pipeline.elementaryStream = new m2ts.ElementaryStream();\r\n        pipeline.timestampRolloverStream = new m2ts.TimestampRolloverStream();\r\n        pipeline.adtsStream = new AdtsStream();\r\n        pipeline.h264Stream = new H264Stream();\r\n        pipeline.captionStream = new m2ts.CaptionStream(options);\r\n        pipeline.coalesceStream = new CoalesceStream(options, pipeline.metadataStream);\r\n        pipeline.headOfPipeline = pipeline.packetStream; // disassemble MPEG2-TS packets into elementary streams\r\n\r\n        pipeline.packetStream.pipe(pipeline.parseStream).pipe(pipeline.elementaryStream).pipe(pipeline.timestampRolloverStream); // !!THIS ORDER IS IMPORTANT!!\r\n        // demux the streams\r\n\r\n        pipeline.timestampRolloverStream.pipe(pipeline.h264Stream);\r\n        pipeline.timestampRolloverStream.pipe(pipeline.adtsStream);\r\n        pipeline.timestampRolloverStream.pipe(pipeline.metadataStream).pipe(pipeline.coalesceStream); // Hook up CEA-608/708 caption stream\r\n\r\n        pipeline.h264Stream.pipe(pipeline.captionStream).pipe(pipeline.coalesceStream);\r\n        pipeline.elementaryStream.on('data', function (data) {\r\n          var i;\r\n          if (data.type === 'metadata') {\r\n            i = data.tracks.length; // scan the tracks listed in the metadata\r\n\r\n            while (i--) {\r\n              if (!videoTrack && data.tracks[i].type === 'video') {\r\n                videoTrack = data.tracks[i];\r\n                videoTrack.timelineStartInfo.baseMediaDecodeTime = self.baseMediaDecodeTime;\r\n              } else if (!audioTrack && data.tracks[i].type === 'audio') {\r\n                audioTrack = data.tracks[i];\r\n                audioTrack.timelineStartInfo.baseMediaDecodeTime = self.baseMediaDecodeTime;\r\n              }\r\n            } // hook up the video segment stream to the first track with h264 data\r\n\r\n            if (videoTrack && !pipeline.videoSegmentStream) {\r\n              pipeline.coalesceStream.numberOfTracks++;\r\n              pipeline.videoSegmentStream = new VideoSegmentStream(videoTrack, options);\r\n              pipeline.videoSegmentStream.on('log', self.getLogTrigger_('videoSegmentStream'));\r\n              pipeline.videoSegmentStream.on('timelineStartInfo', function (timelineStartInfo) {\r\n                // When video emits timelineStartInfo data after a flush, we forward that\r\n                // info to the AudioSegmentStream, if it exists, because video timeline\r\n                // data takes precedence.  Do not do this if keepOriginalTimestamps is set,\r\n                // because this is a particularly subtle form of timestamp alteration.\r\n                if (audioTrack && !options.keepOriginalTimestamps) {\r\n                  audioTrack.timelineStartInfo = timelineStartInfo; // On the first segment we trim AAC frames that exist before the\r\n                  // very earliest DTS we have seen in video because Chrome will\r\n                  // interpret any video track with a baseMediaDecodeTime that is\r\n                  // non-zero as a gap.\r\n\r\n                  pipeline.audioSegmentStream.setEarliestDts(timelineStartInfo.dts - self.baseMediaDecodeTime);\r\n                }\r\n              });\r\n              pipeline.videoSegmentStream.on('processedGopsInfo', self.trigger.bind(self, 'gopInfo'));\r\n              pipeline.videoSegmentStream.on('segmentTimingInfo', self.trigger.bind(self, 'videoSegmentTimingInfo'));\r\n              pipeline.videoSegmentStream.on('baseMediaDecodeTime', function (baseMediaDecodeTime) {\r\n                if (audioTrack) {\r\n                  pipeline.audioSegmentStream.setVideoBaseMediaDecodeTime(baseMediaDecodeTime);\r\n                }\r\n              });\r\n              pipeline.videoSegmentStream.on('timingInfo', self.trigger.bind(self, 'videoTimingInfo')); // Set up the final part of the video pipeline\r\n\r\n              pipeline.h264Stream.pipe(pipeline.videoSegmentStream).pipe(pipeline.coalesceStream);\r\n            }\r\n            if (audioTrack && !pipeline.audioSegmentStream) {\r\n              // hook up the audio segment stream to the first track with aac data\r\n              pipeline.coalesceStream.numberOfTracks++;\r\n              pipeline.audioSegmentStream = new AudioSegmentStream(audioTrack, options);\r\n              pipeline.audioSegmentStream.on('log', self.getLogTrigger_('audioSegmentStream'));\r\n              pipeline.audioSegmentStream.on('timingInfo', self.trigger.bind(self, 'audioTimingInfo'));\r\n              pipeline.audioSegmentStream.on('segmentTimingInfo', self.trigger.bind(self, 'audioSegmentTimingInfo')); // Set up the final part of the audio pipeline\r\n\r\n              pipeline.adtsStream.pipe(pipeline.audioSegmentStream).pipe(pipeline.coalesceStream);\r\n            } // emit pmt info\r\n\r\n            self.trigger('trackinfo', {\r\n              hasAudio: !!audioTrack,\r\n              hasVideo: !!videoTrack\r\n            });\r\n          }\r\n        }); // Re-emit any data coming from the coalesce stream to the outside world\r\n\r\n        pipeline.coalesceStream.on('data', this.trigger.bind(this, 'data'));\r\n        pipeline.coalesceStream.on('id3Frame', function (id3Frame) {\r\n          id3Frame.dispatchType = pipeline.metadataStream.dispatchType;\r\n          self.trigger('id3Frame', id3Frame);\r\n        });\r\n        pipeline.coalesceStream.on('caption', this.trigger.bind(this, 'caption')); // Let the consumer know we have finished flushing the entire pipeline\r\n\r\n        pipeline.coalesceStream.on('done', this.trigger.bind(this, 'done'));\r\n        addPipelineLogRetriggers(this, pipeline);\r\n      }; // hook up the segment streams once track metadata is delivered\r\n\r\n      this.setBaseMediaDecodeTime = function (baseMediaDecodeTime) {\r\n        var pipeline = this.transmuxPipeline_;\r\n        if (!options.keepOriginalTimestamps) {\r\n          this.baseMediaDecodeTime = baseMediaDecodeTime;\r\n        }\r\n        if (audioTrack) {\r\n          audioTrack.timelineStartInfo.dts = undefined;\r\n          audioTrack.timelineStartInfo.pts = undefined;\r\n          trackDecodeInfo.clearDtsInfo(audioTrack);\r\n          if (pipeline.audioTimestampRolloverStream) {\r\n            pipeline.audioTimestampRolloverStream.discontinuity();\r\n          }\r\n        }\r\n        if (videoTrack) {\r\n          if (pipeline.videoSegmentStream) {\r\n            pipeline.videoSegmentStream.gopCache_ = [];\r\n          }\r\n          videoTrack.timelineStartInfo.dts = undefined;\r\n          videoTrack.timelineStartInfo.pts = undefined;\r\n          trackDecodeInfo.clearDtsInfo(videoTrack);\r\n          pipeline.captionStream.reset();\r\n        }\r\n        if (pipeline.timestampRolloverStream) {\r\n          pipeline.timestampRolloverStream.discontinuity();\r\n        }\r\n      };\r\n      this.setAudioAppendStart = function (timestamp) {\r\n        if (audioTrack) {\r\n          this.transmuxPipeline_.audioSegmentStream.setAudioAppendStart(timestamp);\r\n        }\r\n      };\r\n      this.setRemux = function (val) {\r\n        var pipeline = this.transmuxPipeline_;\r\n        options.remux = val;\r\n        if (pipeline && pipeline.coalesceStream) {\r\n          pipeline.coalesceStream.setRemux(val);\r\n        }\r\n      };\r\n      this.alignGopsWith = function (gopsToAlignWith) {\r\n        if (videoTrack && this.transmuxPipeline_.videoSegmentStream) {\r\n          this.transmuxPipeline_.videoSegmentStream.alignGopsWith(gopsToAlignWith);\r\n        }\r\n      };\r\n      this.getLogTrigger_ = function (key) {\r\n        var self = this;\r\n        return function (event) {\r\n          event.stream = key;\r\n          self.trigger('log', event);\r\n        };\r\n      }; // feed incoming data to the front of the parsing pipeline\r\n\r\n      this.push = function (data) {\r\n        if (hasFlushed) {\r\n          var isAac = isLikelyAacData(data);\r\n          if (isAac && this.transmuxPipeline_.type !== 'aac') {\r\n            this.setupAacPipeline();\r\n          } else if (!isAac && this.transmuxPipeline_.type !== 'ts') {\r\n            this.setupTsPipeline();\r\n          }\r\n          hasFlushed = false;\r\n        }\r\n        this.transmuxPipeline_.headOfPipeline.push(data);\r\n      }; // flush any buffered data\r\n\r\n      this.flush = function () {\r\n        hasFlushed = true; // Start at the top of the pipeline and flush all pending work\r\n\r\n        this.transmuxPipeline_.headOfPipeline.flush();\r\n      };\r\n      this.endTimeline = function () {\r\n        this.transmuxPipeline_.headOfPipeline.endTimeline();\r\n      };\r\n      this.reset = function () {\r\n        if (this.transmuxPipeline_.headOfPipeline) {\r\n          this.transmuxPipeline_.headOfPipeline.reset();\r\n        }\r\n      }; // Caption data has to be reset when seeking outside buffered range\r\n\r\n      this.resetCaptions = function () {\r\n        if (this.transmuxPipeline_.captionStream) {\r\n          this.transmuxPipeline_.captionStream.reset();\r\n        }\r\n      };\r\n    };\r\n    Transmuxer.prototype = new Stream();\r\n    var transmuxer = {\r\n      Transmuxer: Transmuxer,\r\n      VideoSegmentStream: VideoSegmentStream,\r\n      AudioSegmentStream: AudioSegmentStream,\r\n      AUDIO_PROPERTIES: AUDIO_PROPERTIES,\r\n      VIDEO_PROPERTIES: VIDEO_PROPERTIES,\r\n      // exported for testing\r\n      generateSegmentTimingInfo: generateSegmentTimingInfo\r\n    };\r\n    /**\r\n     * mux.js\r\n     *\r\n     * Copyright (c) Brightcove\r\n     * Licensed Apache-2.0 https://github.com/videojs/mux.js/blob/master/LICENSE\r\n     */\r\n\r\n    var toUnsigned$3 = function (value) {\r\n      return value >>> 0;\r\n    };\r\n    var toHexString$1 = function (value) {\r\n      return ('00' + value.toString(16)).slice(-2);\r\n    };\r\n    var bin = {\r\n      toUnsigned: toUnsigned$3,\r\n      toHexString: toHexString$1\r\n    };\r\n    var parseType$4 = function (buffer) {\r\n      var result = '';\r\n      result += String.fromCharCode(buffer[0]);\r\n      result += String.fromCharCode(buffer[1]);\r\n      result += String.fromCharCode(buffer[2]);\r\n      result += String.fromCharCode(buffer[3]);\r\n      return result;\r\n    };\r\n    var parseType_1 = parseType$4;\r\n    var toUnsigned$2 = bin.toUnsigned;\r\n    var parseType$3 = parseType_1;\r\n    var findBox$5 = function (data, path) {\r\n      var results = [],\r\n        i,\r\n        size,\r\n        type,\r\n        end,\r\n        subresults;\r\n      if (!path.length) {\r\n        // short-circuit the search for empty paths\r\n        return null;\r\n      }\r\n      for (i = 0; i < data.byteLength;) {\r\n        size = toUnsigned$2(data[i] << 24 | data[i + 1] << 16 | data[i + 2] << 8 | data[i + 3]);\r\n        type = parseType$3(data.subarray(i + 4, i + 8));\r\n        end = size > 1 ? i + size : data.byteLength;\r\n        if (type === path[0]) {\r\n          if (path.length === 1) {\r\n            // this is the end of the path and we've found the box we were\r\n            // looking for\r\n            results.push(data.subarray(i + 8, end));\r\n          } else {\r\n            // recursively search for the next box along the path\r\n            subresults = findBox$5(data.subarray(i + 8, end), path.slice(1));\r\n            if (subresults.length) {\r\n              results = results.concat(subresults);\r\n            }\r\n          }\r\n        }\r\n        i = end;\r\n      } // we've finished searching all of data\r\n\r\n      return results;\r\n    };\r\n    var findBox_1 = findBox$5;\r\n    var toUnsigned$1 = bin.toUnsigned;\r\n    var getUint64$4 = numbers.getUint64;\r\n    var tfdt = function (data) {\r\n      var result = {\r\n        version: data[0],\r\n        flags: new Uint8Array(data.subarray(1, 4))\r\n      };\r\n      if (result.version === 1) {\r\n        result.baseMediaDecodeTime = getUint64$4(data.subarray(4));\r\n      } else {\r\n        result.baseMediaDecodeTime = toUnsigned$1(data[4] << 24 | data[5] << 16 | data[6] << 8 | data[7]);\r\n      }\r\n      return result;\r\n    };\r\n    var parseTfdt$3 = tfdt;\r\n    var tfhd = function (data) {\r\n      var view = new DataView(data.buffer, data.byteOffset, data.byteLength),\r\n        result = {\r\n          version: data[0],\r\n          flags: new Uint8Array(data.subarray(1, 4)),\r\n          trackId: view.getUint32(4)\r\n        },\r\n        baseDataOffsetPresent = result.flags[2] & 0x01,\r\n        sampleDescriptionIndexPresent = result.flags[2] & 0x02,\r\n        defaultSampleDurationPresent = result.flags[2] & 0x08,\r\n        defaultSampleSizePresent = result.flags[2] & 0x10,\r\n        defaultSampleFlagsPresent = result.flags[2] & 0x20,\r\n        durationIsEmpty = result.flags[0] & 0x010000,\r\n        defaultBaseIsMoof = result.flags[0] & 0x020000,\r\n        i;\r\n      i = 8;\r\n      if (baseDataOffsetPresent) {\r\n        i += 4; // truncate top 4 bytes\r\n        // FIXME: should we read the full 64 bits?\r\n\r\n        result.baseDataOffset = view.getUint32(12);\r\n        i += 4;\r\n      }\r\n      if (sampleDescriptionIndexPresent) {\r\n        result.sampleDescriptionIndex = view.getUint32(i);\r\n        i += 4;\r\n      }\r\n      if (defaultSampleDurationPresent) {\r\n        result.defaultSampleDuration = view.getUint32(i);\r\n        i += 4;\r\n      }\r\n      if (defaultSampleSizePresent) {\r\n        result.defaultSampleSize = view.getUint32(i);\r\n        i += 4;\r\n      }\r\n      if (defaultSampleFlagsPresent) {\r\n        result.defaultSampleFlags = view.getUint32(i);\r\n      }\r\n      if (durationIsEmpty) {\r\n        result.durationIsEmpty = true;\r\n      }\r\n      if (!baseDataOffsetPresent && defaultBaseIsMoof) {\r\n        result.baseDataOffsetIsMoof = true;\r\n      }\r\n      return result;\r\n    };\r\n    var parseTfhd$2 = tfhd;\r\n    var getUint64$3 = numbers.getUint64;\r\n    var parseSidx = function (data) {\r\n      var view = new DataView(data.buffer, data.byteOffset, data.byteLength),\r\n        result = {\r\n          version: data[0],\r\n          flags: new Uint8Array(data.subarray(1, 4)),\r\n          references: [],\r\n          referenceId: view.getUint32(4),\r\n          timescale: view.getUint32(8)\r\n        },\r\n        i = 12;\r\n      if (result.version === 0) {\r\n        result.earliestPresentationTime = view.getUint32(i);\r\n        result.firstOffset = view.getUint32(i + 4);\r\n        i += 8;\r\n      } else {\r\n        // read 64 bits\r\n        result.earliestPresentationTime = getUint64$3(data.subarray(i));\r\n        result.firstOffset = getUint64$3(data.subarray(i + 8));\r\n        i += 16;\r\n      }\r\n      i += 2; // reserved\r\n\r\n      var referenceCount = view.getUint16(i);\r\n      i += 2; // start of references\r\n\r\n      for (; referenceCount > 0; i += 12, referenceCount--) {\r\n        result.references.push({\r\n          referenceType: (data[i] & 0x80) >>> 7,\r\n          referencedSize: view.getUint32(i) & 0x7FFFFFFF,\r\n          subsegmentDuration: view.getUint32(i + 4),\r\n          startsWithSap: !!(data[i + 8] & 0x80),\r\n          sapType: (data[i + 8] & 0x70) >>> 4,\r\n          sapDeltaTime: view.getUint32(i + 8) & 0x0FFFFFFF\r\n        });\r\n      }\r\n      return result;\r\n    };\r\n    var parseSidx_1 = parseSidx;\r\n    var parseSampleFlags$1 = function (flags) {\r\n      return {\r\n        isLeading: (flags[0] & 0x0c) >>> 2,\r\n        dependsOn: flags[0] & 0x03,\r\n        isDependedOn: (flags[1] & 0xc0) >>> 6,\r\n        hasRedundancy: (flags[1] & 0x30) >>> 4,\r\n        paddingValue: (flags[1] & 0x0e) >>> 1,\r\n        isNonSyncSample: flags[1] & 0x01,\r\n        degradationPriority: flags[2] << 8 | flags[3]\r\n      };\r\n    };\r\n    var parseSampleFlags_1 = parseSampleFlags$1;\r\n    var parseSampleFlags = parseSampleFlags_1;\r\n    var trun = function (data) {\r\n      var result = {\r\n          version: data[0],\r\n          flags: new Uint8Array(data.subarray(1, 4)),\r\n          samples: []\r\n        },\r\n        view = new DataView(data.buffer, data.byteOffset, data.byteLength),\r\n        // Flag interpretation\r\n        dataOffsetPresent = result.flags[2] & 0x01,\r\n        // compare with 2nd byte of 0x1\r\n        firstSampleFlagsPresent = result.flags[2] & 0x04,\r\n        // compare with 2nd byte of 0x4\r\n        sampleDurationPresent = result.flags[1] & 0x01,\r\n        // compare with 2nd byte of 0x100\r\n        sampleSizePresent = result.flags[1] & 0x02,\r\n        // compare with 2nd byte of 0x200\r\n        sampleFlagsPresent = result.flags[1] & 0x04,\r\n        // compare with 2nd byte of 0x400\r\n        sampleCompositionTimeOffsetPresent = result.flags[1] & 0x08,\r\n        // compare with 2nd byte of 0x800\r\n        sampleCount = view.getUint32(4),\r\n        offset = 8,\r\n        sample;\r\n      if (dataOffsetPresent) {\r\n        // 32 bit signed integer\r\n        result.dataOffset = view.getInt32(offset);\r\n        offset += 4;\r\n      } // Overrides the flags for the first sample only. The order of\r\n      // optional values will be: duration, size, compositionTimeOffset\r\n\r\n      if (firstSampleFlagsPresent && sampleCount) {\r\n        sample = {\r\n          flags: parseSampleFlags(data.subarray(offset, offset + 4))\r\n        };\r\n        offset += 4;\r\n        if (sampleDurationPresent) {\r\n          sample.duration = view.getUint32(offset);\r\n          offset += 4;\r\n        }\r\n        if (sampleSizePresent) {\r\n          sample.size = view.getUint32(offset);\r\n          offset += 4;\r\n        }\r\n        if (sampleCompositionTimeOffsetPresent) {\r\n          if (result.version === 1) {\r\n            sample.compositionTimeOffset = view.getInt32(offset);\r\n          } else {\r\n            sample.compositionTimeOffset = view.getUint32(offset);\r\n          }\r\n          offset += 4;\r\n        }\r\n        result.samples.push(sample);\r\n        sampleCount--;\r\n      }\r\n      while (sampleCount--) {\r\n        sample = {};\r\n        if (sampleDurationPresent) {\r\n          sample.duration = view.getUint32(offset);\r\n          offset += 4;\r\n        }\r\n        if (sampleSizePresent) {\r\n          sample.size = view.getUint32(offset);\r\n          offset += 4;\r\n        }\r\n        if (sampleFlagsPresent) {\r\n          sample.flags = parseSampleFlags(data.subarray(offset, offset + 4));\r\n          offset += 4;\r\n        }\r\n        if (sampleCompositionTimeOffsetPresent) {\r\n          if (result.version === 1) {\r\n            sample.compositionTimeOffset = view.getInt32(offset);\r\n          } else {\r\n            sample.compositionTimeOffset = view.getUint32(offset);\r\n          }\r\n          offset += 4;\r\n        }\r\n        result.samples.push(sample);\r\n      }\r\n      return result;\r\n    };\r\n    var parseTrun$2 = trun;\r\n    /**\r\n     * mux.js\r\n     *\r\n     * Copyright (c) Brightcove\r\n     * Licensed Apache-2.0 https://github.com/videojs/mux.js/blob/master/LICENSE\r\n     *\r\n     * Parse the internal MP4 structure into an equivalent javascript\r\n     * object.\r\n     */\r\n\r\n    var numberHelpers = numbers;\r\n    var getUint64$2 = numberHelpers.getUint64;\r\n    var inspectMp4,\r\n      textifyMp4,\r\n      parseMp4Date = function (seconds) {\r\n        return new Date(seconds * 1000 - 2082844800000);\r\n      },\r\n      parseType$2 = parseType_1,\r\n      findBox$4 = findBox_1,\r\n      nalParse = function (avcStream) {\r\n        var avcView = new DataView(avcStream.buffer, avcStream.byteOffset, avcStream.byteLength),\r\n          result = [],\r\n          i,\r\n          length;\r\n        for (i = 0; i + 4 < avcStream.length; i += length) {\r\n          length = avcView.getUint32(i);\r\n          i += 4; // bail if this doesn't appear to be an H264 stream\r\n\r\n          if (length <= 0) {\r\n            result.push('<span style=\\'color:red;\\'>MALFORMED DATA</span>');\r\n            continue;\r\n          }\r\n          switch (avcStream[i] & 0x1F) {\r\n            case 0x01:\r\n              result.push('slice_layer_without_partitioning_rbsp');\r\n              break;\r\n            case 0x05:\r\n              result.push('slice_layer_without_partitioning_rbsp_idr');\r\n              break;\r\n            case 0x06:\r\n              result.push('sei_rbsp');\r\n              break;\r\n            case 0x07:\r\n              result.push('seq_parameter_set_rbsp');\r\n              break;\r\n            case 0x08:\r\n              result.push('pic_parameter_set_rbsp');\r\n              break;\r\n            case 0x09:\r\n              result.push('access_unit_delimiter_rbsp');\r\n              break;\r\n            default:\r\n              result.push('UNKNOWN NAL - ' + avcStream[i] & 0x1F);\r\n              break;\r\n          }\r\n        }\r\n        return result;\r\n      },\r\n      // registry of handlers for individual mp4 box types\r\n      parse = {\r\n        // codingname, not a first-class box type. stsd entries share the\r\n        // same format as real boxes so the parsing infrastructure can be\r\n        // shared\r\n        avc1: function (data) {\r\n          var view = new DataView(data.buffer, data.byteOffset, data.byteLength);\r\n          return {\r\n            dataReferenceIndex: view.getUint16(6),\r\n            width: view.getUint16(24),\r\n            height: view.getUint16(26),\r\n            horizresolution: view.getUint16(28) + view.getUint16(30) / 16,\r\n            vertresolution: view.getUint16(32) + view.getUint16(34) / 16,\r\n            frameCount: view.getUint16(40),\r\n            depth: view.getUint16(74),\r\n            config: inspectMp4(data.subarray(78, data.byteLength))\r\n          };\r\n        },\r\n        avcC: function (data) {\r\n          var view = new DataView(data.buffer, data.byteOffset, data.byteLength),\r\n            result = {\r\n              configurationVersion: data[0],\r\n              avcProfileIndication: data[1],\r\n              profileCompatibility: data[2],\r\n              avcLevelIndication: data[3],\r\n              lengthSizeMinusOne: data[4] & 0x03,\r\n              sps: [],\r\n              pps: []\r\n            },\r\n            numOfSequenceParameterSets = data[5] & 0x1f,\r\n            numOfPictureParameterSets,\r\n            nalSize,\r\n            offset,\r\n            i; // iterate past any SPSs\r\n\r\n          offset = 6;\r\n          for (i = 0; i < numOfSequenceParameterSets; i++) {\r\n            nalSize = view.getUint16(offset);\r\n            offset += 2;\r\n            result.sps.push(new Uint8Array(data.subarray(offset, offset + nalSize)));\r\n            offset += nalSize;\r\n          } // iterate past any PPSs\r\n\r\n          numOfPictureParameterSets = data[offset];\r\n          offset++;\r\n          for (i = 0; i < numOfPictureParameterSets; i++) {\r\n            nalSize = view.getUint16(offset);\r\n            offset += 2;\r\n            result.pps.push(new Uint8Array(data.subarray(offset, offset + nalSize)));\r\n            offset += nalSize;\r\n          }\r\n          return result;\r\n        },\r\n        btrt: function (data) {\r\n          var view = new DataView(data.buffer, data.byteOffset, data.byteLength);\r\n          return {\r\n            bufferSizeDB: view.getUint32(0),\r\n            maxBitrate: view.getUint32(4),\r\n            avgBitrate: view.getUint32(8)\r\n          };\r\n        },\r\n        edts: function edts(data) {\r\n          return {\r\n            boxes: inspectMp4(data)\r\n          };\r\n        },\r\n        elst: function elst(data) {\r\n          var view = new DataView(data.buffer, data.byteOffset, data.byteLength),\r\n            result = {\r\n              version: view.getUint8(0),\r\n              flags: new Uint8Array(data.subarray(1, 4)),\r\n              edits: []\r\n            },\r\n            entryCount = view.getUint32(4),\r\n            i;\r\n          for (i = 8; entryCount; entryCount--) {\r\n            if (result.version === 0) {\r\n              result.edits.push({\r\n                segmentDuration: view.getUint32(i),\r\n                mediaTime: view.getInt32(i + 4),\r\n                mediaRate: view.getUint16(i + 8) + view.getUint16(i + 10) / (256 * 256)\r\n              });\r\n              i += 12;\r\n            } else {\r\n              result.edits.push({\r\n                segmentDuration: getUint64$2(data.subarray(i)),\r\n                mediaTime: getUint64$2(data.subarray(i + 8)),\r\n                mediaRate: view.getUint16(i + 16) + view.getUint16(i + 18) / (256 * 256)\r\n              });\r\n              i += 20;\r\n            }\r\n          }\r\n          return result;\r\n        },\r\n        esds: function (data) {\r\n          return {\r\n            version: data[0],\r\n            flags: new Uint8Array(data.subarray(1, 4)),\r\n            esId: data[6] << 8 | data[7],\r\n            streamPriority: data[8] & 0x1f,\r\n            decoderConfig: {\r\n              objectProfileIndication: data[11],\r\n              streamType: data[12] >>> 2 & 0x3f,\r\n              bufferSize: data[13] << 16 | data[14] << 8 | data[15],\r\n              maxBitrate: data[16] << 24 | data[17] << 16 | data[18] << 8 | data[19],\r\n              avgBitrate: data[20] << 24 | data[21] << 16 | data[22] << 8 | data[23],\r\n              decoderConfigDescriptor: {\r\n                tag: data[24],\r\n                length: data[25],\r\n                audioObjectType: data[26] >>> 3 & 0x1f,\r\n                samplingFrequencyIndex: (data[26] & 0x07) << 1 | data[27] >>> 7 & 0x01,\r\n                channelConfiguration: data[27] >>> 3 & 0x0f\r\n              }\r\n            }\r\n          };\r\n        },\r\n        ftyp: function (data) {\r\n          var view = new DataView(data.buffer, data.byteOffset, data.byteLength),\r\n            result = {\r\n              majorBrand: parseType$2(data.subarray(0, 4)),\r\n              minorVersion: view.getUint32(4),\r\n              compatibleBrands: []\r\n            },\r\n            i = 8;\r\n          while (i < data.byteLength) {\r\n            result.compatibleBrands.push(parseType$2(data.subarray(i, i + 4)));\r\n            i += 4;\r\n          }\r\n          return result;\r\n        },\r\n        dinf: function (data) {\r\n          return {\r\n            boxes: inspectMp4(data)\r\n          };\r\n        },\r\n        dref: function (data) {\r\n          return {\r\n            version: data[0],\r\n            flags: new Uint8Array(data.subarray(1, 4)),\r\n            dataReferences: inspectMp4(data.subarray(8))\r\n          };\r\n        },\r\n        hdlr: function (data) {\r\n          var view = new DataView(data.buffer, data.byteOffset, data.byteLength),\r\n            result = {\r\n              version: view.getUint8(0),\r\n              flags: new Uint8Array(data.subarray(1, 4)),\r\n              handlerType: parseType$2(data.subarray(8, 12)),\r\n              name: ''\r\n            },\r\n            i = 8; // parse out the name field\r\n\r\n          for (i = 24; i < data.byteLength; i++) {\r\n            if (data[i] === 0x00) {\r\n              // the name field is null-terminated\r\n              i++;\r\n              break;\r\n            }\r\n            result.name += String.fromCharCode(data[i]);\r\n          } // decode UTF-8 to javascript's internal representation\r\n          // see http://ecmanaut.blogspot.com/2006/07/encoding-decoding-utf8-in-javascript.html\r\n\r\n          result.name = decodeURIComponent(escape(result.name));\r\n          return result;\r\n        },\r\n        mdat: function (data) {\r\n          return {\r\n            byteLength: data.byteLength,\r\n            nals: nalParse(data)\r\n          };\r\n        },\r\n        mdhd: function (data) {\r\n          var view = new DataView(data.buffer, data.byteOffset, data.byteLength),\r\n            i = 4,\r\n            language,\r\n            result = {\r\n              version: view.getUint8(0),\r\n              flags: new Uint8Array(data.subarray(1, 4)),\r\n              language: ''\r\n            };\r\n          if (result.version === 1) {\r\n            i += 4;\r\n            result.creationTime = parseMp4Date(view.getUint32(i)); // truncating top 4 bytes\r\n\r\n            i += 8;\r\n            result.modificationTime = parseMp4Date(view.getUint32(i)); // truncating top 4 bytes\r\n\r\n            i += 4;\r\n            result.timescale = view.getUint32(i);\r\n            i += 8;\r\n            result.duration = view.getUint32(i); // truncating top 4 bytes\r\n          } else {\r\n            result.creationTime = parseMp4Date(view.getUint32(i));\r\n            i += 4;\r\n            result.modificationTime = parseMp4Date(view.getUint32(i));\r\n            i += 4;\r\n            result.timescale = view.getUint32(i);\r\n            i += 4;\r\n            result.duration = view.getUint32(i);\r\n          }\r\n          i += 4; // language is stored as an ISO-639-2/T code in an array of three 5-bit fields\r\n          // each field is the packed difference between its ASCII value and 0x60\r\n\r\n          language = view.getUint16(i);\r\n          result.language += String.fromCharCode((language >> 10) + 0x60);\r\n          result.language += String.fromCharCode(((language & 0x03e0) >> 5) + 0x60);\r\n          result.language += String.fromCharCode((language & 0x1f) + 0x60);\r\n          return result;\r\n        },\r\n        mdia: function (data) {\r\n          return {\r\n            boxes: inspectMp4(data)\r\n          };\r\n        },\r\n        mfhd: function (data) {\r\n          return {\r\n            version: data[0],\r\n            flags: new Uint8Array(data.subarray(1, 4)),\r\n            sequenceNumber: data[4] << 24 | data[5] << 16 | data[6] << 8 | data[7]\r\n          };\r\n        },\r\n        minf: function (data) {\r\n          return {\r\n            boxes: inspectMp4(data)\r\n          };\r\n        },\r\n        // codingname, not a first-class box type. stsd entries share the\r\n        // same format as real boxes so the parsing infrastructure can be\r\n        // shared\r\n        mp4a: function (data) {\r\n          var view = new DataView(data.buffer, data.byteOffset, data.byteLength),\r\n            result = {\r\n              // 6 bytes reserved\r\n              dataReferenceIndex: view.getUint16(6),\r\n              // 4 + 4 bytes reserved\r\n              channelcount: view.getUint16(16),\r\n              samplesize: view.getUint16(18),\r\n              // 2 bytes pre_defined\r\n              // 2 bytes reserved\r\n              samplerate: view.getUint16(24) + view.getUint16(26) / 65536\r\n            }; // if there are more bytes to process, assume this is an ISO/IEC\r\n          // 14496-14 MP4AudioSampleEntry and parse the ESDBox\r\n\r\n          if (data.byteLength > 28) {\r\n            result.streamDescriptor = inspectMp4(data.subarray(28))[0];\r\n          }\r\n          return result;\r\n        },\r\n        moof: function (data) {\r\n          return {\r\n            boxes: inspectMp4(data)\r\n          };\r\n        },\r\n        moov: function (data) {\r\n          return {\r\n            boxes: inspectMp4(data)\r\n          };\r\n        },\r\n        mvex: function (data) {\r\n          return {\r\n            boxes: inspectMp4(data)\r\n          };\r\n        },\r\n        mvhd: function (data) {\r\n          var view = new DataView(data.buffer, data.byteOffset, data.byteLength),\r\n            i = 4,\r\n            result = {\r\n              version: view.getUint8(0),\r\n              flags: new Uint8Array(data.subarray(1, 4))\r\n            };\r\n          if (result.version === 1) {\r\n            i += 4;\r\n            result.creationTime = parseMp4Date(view.getUint32(i)); // truncating top 4 bytes\r\n\r\n            i += 8;\r\n            result.modificationTime = parseMp4Date(view.getUint32(i)); // truncating top 4 bytes\r\n\r\n            i += 4;\r\n            result.timescale = view.getUint32(i);\r\n            i += 8;\r\n            result.duration = view.getUint32(i); // truncating top 4 bytes\r\n          } else {\r\n            result.creationTime = parseMp4Date(view.getUint32(i));\r\n            i += 4;\r\n            result.modificationTime = parseMp4Date(view.getUint32(i));\r\n            i += 4;\r\n            result.timescale = view.getUint32(i);\r\n            i += 4;\r\n            result.duration = view.getUint32(i);\r\n          }\r\n          i += 4; // convert fixed-point, base 16 back to a number\r\n\r\n          result.rate = view.getUint16(i) + view.getUint16(i + 2) / 16;\r\n          i += 4;\r\n          result.volume = view.getUint8(i) + view.getUint8(i + 1) / 8;\r\n          i += 2;\r\n          i += 2;\r\n          i += 2 * 4;\r\n          result.matrix = new Uint32Array(data.subarray(i, i + 9 * 4));\r\n          i += 9 * 4;\r\n          i += 6 * 4;\r\n          result.nextTrackId = view.getUint32(i);\r\n          return result;\r\n        },\r\n        pdin: function (data) {\r\n          var view = new DataView(data.buffer, data.byteOffset, data.byteLength);\r\n          return {\r\n            version: view.getUint8(0),\r\n            flags: new Uint8Array(data.subarray(1, 4)),\r\n            rate: view.getUint32(4),\r\n            initialDelay: view.getUint32(8)\r\n          };\r\n        },\r\n        sdtp: function (data) {\r\n          var result = {\r\n              version: data[0],\r\n              flags: new Uint8Array(data.subarray(1, 4)),\r\n              samples: []\r\n            },\r\n            i;\r\n          for (i = 4; i < data.byteLength; i++) {\r\n            result.samples.push({\r\n              dependsOn: (data[i] & 0x30) >> 4,\r\n              isDependedOn: (data[i] & 0x0c) >> 2,\r\n              hasRedundancy: data[i] & 0x03\r\n            });\r\n          }\r\n          return result;\r\n        },\r\n        sidx: parseSidx_1,\r\n        smhd: function (data) {\r\n          return {\r\n            version: data[0],\r\n            flags: new Uint8Array(data.subarray(1, 4)),\r\n            balance: data[4] + data[5] / 256\r\n          };\r\n        },\r\n        stbl: function (data) {\r\n          return {\r\n            boxes: inspectMp4(data)\r\n          };\r\n        },\r\n        ctts: function (data) {\r\n          var view = new DataView(data.buffer, data.byteOffset, data.byteLength),\r\n            result = {\r\n              version: view.getUint8(0),\r\n              flags: new Uint8Array(data.subarray(1, 4)),\r\n              compositionOffsets: []\r\n            },\r\n            entryCount = view.getUint32(4),\r\n            i;\r\n          for (i = 8; entryCount; i += 8, entryCount--) {\r\n            result.compositionOffsets.push({\r\n              sampleCount: view.getUint32(i),\r\n              sampleOffset: view[result.version === 0 ? 'getUint32' : 'getInt32'](i + 4)\r\n            });\r\n          }\r\n          return result;\r\n        },\r\n        stss: function (data) {\r\n          var view = new DataView(data.buffer, data.byteOffset, data.byteLength),\r\n            result = {\r\n              version: view.getUint8(0),\r\n              flags: new Uint8Array(data.subarray(1, 4)),\r\n              syncSamples: []\r\n            },\r\n            entryCount = view.getUint32(4),\r\n            i;\r\n          for (i = 8; entryCount; i += 4, entryCount--) {\r\n            result.syncSamples.push(view.getUint32(i));\r\n          }\r\n          return result;\r\n        },\r\n        stco: function (data) {\r\n          var view = new DataView(data.buffer, data.byteOffset, data.byteLength),\r\n            result = {\r\n              version: data[0],\r\n              flags: new Uint8Array(data.subarray(1, 4)),\r\n              chunkOffsets: []\r\n            },\r\n            entryCount = view.getUint32(4),\r\n            i;\r\n          for (i = 8; entryCount; i += 4, entryCount--) {\r\n            result.chunkOffsets.push(view.getUint32(i));\r\n          }\r\n          return result;\r\n        },\r\n        stsc: function (data) {\r\n          var view = new DataView(data.buffer, data.byteOffset, data.byteLength),\r\n            entryCount = view.getUint32(4),\r\n            result = {\r\n              version: data[0],\r\n              flags: new Uint8Array(data.subarray(1, 4)),\r\n              sampleToChunks: []\r\n            },\r\n            i;\r\n          for (i = 8; entryCount; i += 12, entryCount--) {\r\n            result.sampleToChunks.push({\r\n              firstChunk: view.getUint32(i),\r\n              samplesPerChunk: view.getUint32(i + 4),\r\n              sampleDescriptionIndex: view.getUint32(i + 8)\r\n            });\r\n          }\r\n          return result;\r\n        },\r\n        stsd: function (data) {\r\n          return {\r\n            version: data[0],\r\n            flags: new Uint8Array(data.subarray(1, 4)),\r\n            sampleDescriptions: inspectMp4(data.subarray(8))\r\n          };\r\n        },\r\n        stsz: function (data) {\r\n          var view = new DataView(data.buffer, data.byteOffset, data.byteLength),\r\n            result = {\r\n              version: data[0],\r\n              flags: new Uint8Array(data.subarray(1, 4)),\r\n              sampleSize: view.getUint32(4),\r\n              entries: []\r\n            },\r\n            i;\r\n          for (i = 12; i < data.byteLength; i += 4) {\r\n            result.entries.push(view.getUint32(i));\r\n          }\r\n          return result;\r\n        },\r\n        stts: function (data) {\r\n          var view = new DataView(data.buffer, data.byteOffset, data.byteLength),\r\n            result = {\r\n              version: data[0],\r\n              flags: new Uint8Array(data.subarray(1, 4)),\r\n              timeToSamples: []\r\n            },\r\n            entryCount = view.getUint32(4),\r\n            i;\r\n          for (i = 8; entryCount; i += 8, entryCount--) {\r\n            result.timeToSamples.push({\r\n              sampleCount: view.getUint32(i),\r\n              sampleDelta: view.getUint32(i + 4)\r\n            });\r\n          }\r\n          return result;\r\n        },\r\n        styp: function (data) {\r\n          return parse.ftyp(data);\r\n        },\r\n        tfdt: parseTfdt$3,\r\n        tfhd: parseTfhd$2,\r\n        tkhd: function (data) {\r\n          var view = new DataView(data.buffer, data.byteOffset, data.byteLength),\r\n            i = 4,\r\n            result = {\r\n              version: view.getUint8(0),\r\n              flags: new Uint8Array(data.subarray(1, 4))\r\n            };\r\n          if (result.version === 1) {\r\n            i += 4;\r\n            result.creationTime = parseMp4Date(view.getUint32(i)); // truncating top 4 bytes\r\n\r\n            i += 8;\r\n            result.modificationTime = parseMp4Date(view.getUint32(i)); // truncating top 4 bytes\r\n\r\n            i += 4;\r\n            result.trackId = view.getUint32(i);\r\n            i += 4;\r\n            i += 8;\r\n            result.duration = view.getUint32(i); // truncating top 4 bytes\r\n          } else {\r\n            result.creationTime = parseMp4Date(view.getUint32(i));\r\n            i += 4;\r\n            result.modificationTime = parseMp4Date(view.getUint32(i));\r\n            i += 4;\r\n            result.trackId = view.getUint32(i);\r\n            i += 4;\r\n            i += 4;\r\n            result.duration = view.getUint32(i);\r\n          }\r\n          i += 4;\r\n          i += 2 * 4;\r\n          result.layer = view.getUint16(i);\r\n          i += 2;\r\n          result.alternateGroup = view.getUint16(i);\r\n          i += 2; // convert fixed-point, base 16 back to a number\r\n\r\n          result.volume = view.getUint8(i) + view.getUint8(i + 1) / 8;\r\n          i += 2;\r\n          i += 2;\r\n          result.matrix = new Uint32Array(data.subarray(i, i + 9 * 4));\r\n          i += 9 * 4;\r\n          result.width = view.getUint16(i) + view.getUint16(i + 2) / 65536;\r\n          i += 4;\r\n          result.height = view.getUint16(i) + view.getUint16(i + 2) / 65536;\r\n          return result;\r\n        },\r\n        traf: function (data) {\r\n          return {\r\n            boxes: inspectMp4(data)\r\n          };\r\n        },\r\n        trak: function (data) {\r\n          return {\r\n            boxes: inspectMp4(data)\r\n          };\r\n        },\r\n        trex: function (data) {\r\n          var view = new DataView(data.buffer, data.byteOffset, data.byteLength);\r\n          return {\r\n            version: data[0],\r\n            flags: new Uint8Array(data.subarray(1, 4)),\r\n            trackId: view.getUint32(4),\r\n            defaultSampleDescriptionIndex: view.getUint32(8),\r\n            defaultSampleDuration: view.getUint32(12),\r\n            defaultSampleSize: view.getUint32(16),\r\n            sampleDependsOn: data[20] & 0x03,\r\n            sampleIsDependedOn: (data[21] & 0xc0) >> 6,\r\n            sampleHasRedundancy: (data[21] & 0x30) >> 4,\r\n            samplePaddingValue: (data[21] & 0x0e) >> 1,\r\n            sampleIsDifferenceSample: !!(data[21] & 0x01),\r\n            sampleDegradationPriority: view.getUint16(22)\r\n          };\r\n        },\r\n        trun: parseTrun$2,\r\n        'url ': function (data) {\r\n          return {\r\n            version: data[0],\r\n            flags: new Uint8Array(data.subarray(1, 4))\r\n          };\r\n        },\r\n        vmhd: function (data) {\r\n          var view = new DataView(data.buffer, data.byteOffset, data.byteLength);\r\n          return {\r\n            version: data[0],\r\n            flags: new Uint8Array(data.subarray(1, 4)),\r\n            graphicsmode: view.getUint16(4),\r\n            opcolor: new Uint16Array([view.getUint16(6), view.getUint16(8), view.getUint16(10)])\r\n          };\r\n        }\r\n      };\r\n    /**\r\n     * Return a javascript array of box objects parsed from an ISO base\r\n     * media file.\r\n     * @param data {Uint8Array} the binary data of the media to be inspected\r\n     * @return {array} a javascript array of potentially nested box objects\r\n     */\r\n\r\n    inspectMp4 = function (data) {\r\n      var i = 0,\r\n        result = [],\r\n        view,\r\n        size,\r\n        type,\r\n        end,\r\n        box; // Convert data from Uint8Array to ArrayBuffer, to follow Dataview API\r\n\r\n      var ab = new ArrayBuffer(data.length);\r\n      var v = new Uint8Array(ab);\r\n      for (var z = 0; z < data.length; ++z) {\r\n        v[z] = data[z];\r\n      }\r\n      view = new DataView(ab);\r\n      while (i < data.byteLength) {\r\n        // parse box data\r\n        size = view.getUint32(i);\r\n        type = parseType$2(data.subarray(i + 4, i + 8));\r\n        end = size > 1 ? i + size : data.byteLength; // parse type-specific data\r\n\r\n        box = (parse[type] || function (data) {\r\n          return {\r\n            data: data\r\n          };\r\n        })(data.subarray(i + 8, end));\r\n        box.size = size;\r\n        box.type = type; // store this box and move to the next\r\n\r\n        result.push(box);\r\n        i = end;\r\n      }\r\n      return result;\r\n    };\r\n    /**\r\n     * Returns a textual representation of the javascript represtentation\r\n     * of an MP4 file. You can use it as an alternative to\r\n     * JSON.stringify() to compare inspected MP4s.\r\n     * @param inspectedMp4 {array} the parsed array of boxes in an MP4\r\n     * file\r\n     * @param depth {number} (optional) the number of ancestor boxes of\r\n     * the elements of inspectedMp4. Assumed to be zero if unspecified.\r\n     * @return {string} a text representation of the parsed MP4\r\n     */\r\n\r\n    textifyMp4 = function (inspectedMp4, depth) {\r\n      var indent;\r\n      depth = depth || 0;\r\n      indent = new Array(depth * 2 + 1).join(' '); // iterate over all the boxes\r\n\r\n      return inspectedMp4.map(function (box, index) {\r\n        // list the box type first at the current indentation level\r\n        return indent + box.type + '\\n' +\r\n        // the type is already included and handle child boxes separately\r\n        Object.keys(box).filter(function (key) {\r\n          return key !== 'type' && key !== 'boxes'; // output all the box properties\r\n        }).map(function (key) {\r\n          var prefix = indent + '  ' + key + ': ',\r\n            value = box[key]; // print out raw bytes as hexademical\r\n\r\n          if (value instanceof Uint8Array || value instanceof Uint32Array) {\r\n            var bytes = Array.prototype.slice.call(new Uint8Array(value.buffer, value.byteOffset, value.byteLength)).map(function (byte) {\r\n              return ' ' + ('00' + byte.toString(16)).slice(-2);\r\n            }).join('').match(/.{1,24}/g);\r\n            if (!bytes) {\r\n              return prefix + '<>';\r\n            }\r\n            if (bytes.length === 1) {\r\n              return prefix + '<' + bytes.join('').slice(1) + '>';\r\n            }\r\n            return prefix + '<\\n' + bytes.map(function (line) {\r\n              return indent + '  ' + line;\r\n            }).join('\\n') + '\\n' + indent + '  >';\r\n          } // stringify generic objects\r\n\r\n          return prefix + JSON.stringify(value, null, 2).split('\\n').map(function (line, index) {\r\n            if (index === 0) {\r\n              return line;\r\n            }\r\n            return indent + '  ' + line;\r\n          }).join('\\n');\r\n        }).join('\\n') + (\r\n        // recursively textify the child boxes\r\n        box.boxes ? '\\n' + textifyMp4(box.boxes, depth + 1) : '');\r\n      }).join('\\n');\r\n    };\r\n    var mp4Inspector = {\r\n      inspect: inspectMp4,\r\n      textify: textifyMp4,\r\n      parseType: parseType$2,\r\n      findBox: findBox$4,\r\n      parseTraf: parse.traf,\r\n      parseTfdt: parse.tfdt,\r\n      parseHdlr: parse.hdlr,\r\n      parseTfhd: parse.tfhd,\r\n      parseTrun: parse.trun,\r\n      parseSidx: parse.sidx\r\n    };\r\n    /**\r\n     * Returns the first string in the data array ending with a null char '\\0'\r\n     * @param {UInt8} data\r\n     * @returns the string with the null char\r\n     */\r\n\r\n    var uint8ToCString$1 = function (data) {\r\n      var index = 0;\r\n      var curChar = String.fromCharCode(data[index]);\r\n      var retString = '';\r\n      while (curChar !== '\\0') {\r\n        retString += curChar;\r\n        index++;\r\n        curChar = String.fromCharCode(data[index]);\r\n      } // Add nullChar\r\n\r\n      retString += curChar;\r\n      return retString;\r\n    };\r\n    var string = {\r\n      uint8ToCString: uint8ToCString$1\r\n    };\r\n    var uint8ToCString = string.uint8ToCString;\r\n    var getUint64$1 = numbers.getUint64;\r\n    /**\r\n     * Based on: ISO/IEC 23009 Section: 5.10.3.3\r\n     * References:\r\n     * https://dashif-documents.azurewebsites.net/Events/master/event.html#emsg-format\r\n     * https://aomediacodec.github.io/id3-emsg/\r\n     *\r\n     * Takes emsg box data as a uint8 array and returns a emsg box object\r\n     * @param {UInt8Array} boxData data from emsg box\r\n     * @returns A parsed emsg box object\r\n     */\r\n\r\n    var parseEmsgBox = function (boxData) {\r\n      // version + flags\r\n      var offset = 4;\r\n      var version = boxData[0];\r\n      var scheme_id_uri, value, timescale, presentation_time, presentation_time_delta, event_duration, id, message_data;\r\n      if (version === 0) {\r\n        scheme_id_uri = uint8ToCString(boxData.subarray(offset));\r\n        offset += scheme_id_uri.length;\r\n        value = uint8ToCString(boxData.subarray(offset));\r\n        offset += value.length;\r\n        var dv = new DataView(boxData.buffer);\r\n        timescale = dv.getUint32(offset);\r\n        offset += 4;\r\n        presentation_time_delta = dv.getUint32(offset);\r\n        offset += 4;\r\n        event_duration = dv.getUint32(offset);\r\n        offset += 4;\r\n        id = dv.getUint32(offset);\r\n        offset += 4;\r\n      } else if (version === 1) {\r\n        var dv = new DataView(boxData.buffer);\r\n        timescale = dv.getUint32(offset);\r\n        offset += 4;\r\n        presentation_time = getUint64$1(boxData.subarray(offset));\r\n        offset += 8;\r\n        event_duration = dv.getUint32(offset);\r\n        offset += 4;\r\n        id = dv.getUint32(offset);\r\n        offset += 4;\r\n        scheme_id_uri = uint8ToCString(boxData.subarray(offset));\r\n        offset += scheme_id_uri.length;\r\n        value = uint8ToCString(boxData.subarray(offset));\r\n        offset += value.length;\r\n      }\r\n      message_data = new Uint8Array(boxData.subarray(offset, boxData.byteLength));\r\n      var emsgBox = {\r\n        scheme_id_uri,\r\n        value,\r\n        // if timescale is undefined or 0 set to 1\r\n        timescale: timescale ? timescale : 1,\r\n        presentation_time,\r\n        presentation_time_delta,\r\n        event_duration,\r\n        id,\r\n        message_data\r\n      };\r\n      return isValidEmsgBox(version, emsgBox) ? emsgBox : undefined;\r\n    };\r\n    /**\r\n     * Scales a presentation time or time delta with an offset with a provided timescale\r\n     * @param {number} presentationTime\r\n     * @param {number} timescale\r\n     * @param {number} timeDelta\r\n     * @param {number} offset\r\n     * @returns the scaled time as a number\r\n     */\r\n\r\n    var scaleTime = function (presentationTime, timescale, timeDelta, offset) {\r\n      return presentationTime || presentationTime === 0 ? presentationTime / timescale : offset + timeDelta / timescale;\r\n    };\r\n    /**\r\n     * Checks the emsg box data for validity based on the version\r\n     * @param {number} version of the emsg box to validate\r\n     * @param {Object} emsg the emsg data to validate\r\n     * @returns if the box is valid as a boolean\r\n     */\r\n\r\n    var isValidEmsgBox = function (version, emsg) {\r\n      var hasScheme = emsg.scheme_id_uri !== '\\0';\r\n      var isValidV0Box = version === 0 && isDefined(emsg.presentation_time_delta) && hasScheme;\r\n      var isValidV1Box = version === 1 && isDefined(emsg.presentation_time) && hasScheme; // Only valid versions of emsg are 0 and 1\r\n\r\n      return !(version > 1) && isValidV0Box || isValidV1Box;\r\n    }; // Utility function to check if an object is defined\r\n\r\n    var isDefined = function (data) {\r\n      return data !== undefined || data !== null;\r\n    };\r\n    var emsg$1 = {\r\n      parseEmsgBox: parseEmsgBox,\r\n      scaleTime: scaleTime\r\n    };\r\n    var win;\r\n    if (typeof window !== \"undefined\") {\r\n      win = window;\r\n    } else if (typeof commonjsGlobal !== \"undefined\") {\r\n      win = commonjsGlobal;\r\n    } else if (typeof self !== \"undefined\") {\r\n      win = self;\r\n    } else {\r\n      win = {};\r\n    }\r\n    var window_1 = win;\r\n    /**\r\n     * mux.js\r\n     *\r\n     * Copyright (c) Brightcove\r\n     * Licensed Apache-2.0 https://github.com/videojs/mux.js/blob/master/LICENSE\r\n     *\r\n     * Utilities to detect basic properties and metadata about MP4s.\r\n     */\r\n\r\n    var toUnsigned = bin.toUnsigned;\r\n    var toHexString = bin.toHexString;\r\n    var findBox$3 = findBox_1;\r\n    var parseType$1 = parseType_1;\r\n    var emsg = emsg$1;\r\n    var parseTfhd$1 = parseTfhd$2;\r\n    var parseTrun$1 = parseTrun$2;\r\n    var parseTfdt$2 = parseTfdt$3;\r\n    var getUint64 = numbers.getUint64;\r\n    var timescale, startTime, compositionStartTime, getVideoTrackIds, getTracks, getTimescaleFromMediaHeader$1, getEmsgID3;\r\n    var window$2 = window_1;\r\n    var parseId3Frames = parseId3.parseId3Frames;\r\n    /**\r\n     * Parses an MP4 initialization segment and extracts the timescale\r\n     * values for any declared tracks. Timescale values indicate the\r\n     * number of clock ticks per second to assume for time-based values\r\n     * elsewhere in the MP4.\r\n     *\r\n     * To determine the start time of an MP4, you need two pieces of\r\n     * information: the timescale unit and the earliest base media decode\r\n     * time. Multiple timescales can be specified within an MP4 but the\r\n     * base media decode time is always expressed in the timescale from\r\n     * the media header box for the track:\r\n     * ```\r\n     * moov > trak > mdia > mdhd.timescale\r\n     * ```\r\n     * @param init {Uint8Array} the bytes of the init segment\r\n     * @return {object} a hash of track ids to timescale values or null if\r\n     * the init segment is malformed.\r\n     */\r\n\r\n    timescale = function (init) {\r\n      var result = {},\r\n        traks = findBox$3(init, ['moov', 'trak']); // mdhd timescale\r\n\r\n      return traks.reduce(function (result, trak) {\r\n        var tkhd, version, index, id, mdhd;\r\n        tkhd = findBox$3(trak, ['tkhd'])[0];\r\n        if (!tkhd) {\r\n          return null;\r\n        }\r\n        version = tkhd[0];\r\n        index = version === 0 ? 12 : 20;\r\n        id = toUnsigned(tkhd[index] << 24 | tkhd[index + 1] << 16 | tkhd[index + 2] << 8 | tkhd[index + 3]);\r\n        mdhd = findBox$3(trak, ['mdia', 'mdhd'])[0];\r\n        if (!mdhd) {\r\n          return null;\r\n        }\r\n        version = mdhd[0];\r\n        index = version === 0 ? 12 : 20;\r\n        result[id] = toUnsigned(mdhd[index] << 24 | mdhd[index + 1] << 16 | mdhd[index + 2] << 8 | mdhd[index + 3]);\r\n        return result;\r\n      }, result);\r\n    };\r\n    /**\r\n     * Determine the base media decode start time, in seconds, for an MP4\r\n     * fragment. If multiple fragments are specified, the earliest time is\r\n     * returned.\r\n     *\r\n     * The base media decode time can be parsed from track fragment\r\n     * metadata:\r\n     * ```\r\n     * moof > traf > tfdt.baseMediaDecodeTime\r\n     * ```\r\n     * It requires the timescale value from the mdhd to interpret.\r\n     *\r\n     * @param timescale {object} a hash of track ids to timescale values.\r\n     * @return {number} the earliest base media decode start time for the\r\n     * fragment, in seconds\r\n     */\r\n\r\n    startTime = function (timescale, fragment) {\r\n      var trafs; // we need info from two childrend of each track fragment box\r\n\r\n      trafs = findBox$3(fragment, ['moof', 'traf']); // determine the start times for each track\r\n\r\n      var lowestTime = trafs.reduce(function (acc, traf) {\r\n        var tfhd = findBox$3(traf, ['tfhd'])[0]; // get the track id from the tfhd\r\n\r\n        var id = toUnsigned(tfhd[4] << 24 | tfhd[5] << 16 | tfhd[6] << 8 | tfhd[7]); // assume a 90kHz clock if no timescale was specified\r\n\r\n        var scale = timescale[id] || 90e3; // get the base media decode time from the tfdt\r\n\r\n        var tfdt = findBox$3(traf, ['tfdt'])[0];\r\n        var dv = new DataView(tfdt.buffer, tfdt.byteOffset, tfdt.byteLength);\r\n        var baseTime; // version 1 is 64 bit\r\n\r\n        if (tfdt[0] === 1) {\r\n          baseTime = getUint64(tfdt.subarray(4, 12));\r\n        } else {\r\n          baseTime = dv.getUint32(4);\r\n        } // convert base time to seconds if it is a valid number.\r\n\r\n        let seconds;\r\n        if (typeof baseTime === 'bigint') {\r\n          seconds = baseTime / window$2.BigInt(scale);\r\n        } else if (typeof baseTime === 'number' && !isNaN(baseTime)) {\r\n          seconds = baseTime / scale;\r\n        }\r\n        if (seconds < Number.MAX_SAFE_INTEGER) {\r\n          seconds = Number(seconds);\r\n        }\r\n        if (seconds < acc) {\r\n          acc = seconds;\r\n        }\r\n        return acc;\r\n      }, Infinity);\r\n      return typeof lowestTime === 'bigint' || isFinite(lowestTime) ? lowestTime : 0;\r\n    };\r\n    /**\r\n     * Determine the composition start, in seconds, for an MP4\r\n     * fragment.\r\n     *\r\n     * The composition start time of a fragment can be calculated using the base\r\n     * media decode time, composition time offset, and timescale, as follows:\r\n     *\r\n     * compositionStartTime = (baseMediaDecodeTime + compositionTimeOffset) / timescale\r\n     *\r\n     * All of the aforementioned information is contained within a media fragment's\r\n     * `traf` box, except for timescale info, which comes from the initialization\r\n     * segment, so a track id (also contained within a `traf`) is also necessary to\r\n     * associate it with a timescale\r\n     *\r\n     *\r\n     * @param timescales {object} - a hash of track ids to timescale values.\r\n     * @param fragment {Unit8Array} - the bytes of a media segment\r\n     * @return {number} the composition start time for the fragment, in seconds\r\n     **/\r\n\r\n    compositionStartTime = function (timescales, fragment) {\r\n      var trafBoxes = findBox$3(fragment, ['moof', 'traf']);\r\n      var baseMediaDecodeTime = 0;\r\n      var compositionTimeOffset = 0;\r\n      var trackId;\r\n      if (trafBoxes && trafBoxes.length) {\r\n        // The spec states that track run samples contained within a `traf` box are contiguous, but\r\n        // it does not explicitly state whether the `traf` boxes themselves are contiguous.\r\n        // We will assume that they are, so we only need the first to calculate start time.\r\n        var tfhd = findBox$3(trafBoxes[0], ['tfhd'])[0];\r\n        var trun = findBox$3(trafBoxes[0], ['trun'])[0];\r\n        var tfdt = findBox$3(trafBoxes[0], ['tfdt'])[0];\r\n        if (tfhd) {\r\n          var parsedTfhd = parseTfhd$1(tfhd);\r\n          trackId = parsedTfhd.trackId;\r\n        }\r\n        if (tfdt) {\r\n          var parsedTfdt = parseTfdt$2(tfdt);\r\n          baseMediaDecodeTime = parsedTfdt.baseMediaDecodeTime;\r\n        }\r\n        if (trun) {\r\n          var parsedTrun = parseTrun$1(trun);\r\n          if (parsedTrun.samples && parsedTrun.samples.length) {\r\n            compositionTimeOffset = parsedTrun.samples[0].compositionTimeOffset || 0;\r\n          }\r\n        }\r\n      } // Get timescale for this specific track. Assume a 90kHz clock if no timescale was\r\n      // specified.\r\n\r\n      var timescale = timescales[trackId] || 90e3; // return the composition start time, in seconds\r\n\r\n      if (typeof baseMediaDecodeTime === 'bigint') {\r\n        compositionTimeOffset = window$2.BigInt(compositionTimeOffset);\r\n        timescale = window$2.BigInt(timescale);\r\n      }\r\n      var result = (baseMediaDecodeTime + compositionTimeOffset) / timescale;\r\n      if (typeof result === 'bigint' && result < Number.MAX_SAFE_INTEGER) {\r\n        result = Number(result);\r\n      }\r\n      return result;\r\n    };\r\n    /**\r\n      * Find the trackIds of the video tracks in this source.\r\n      * Found by parsing the Handler Reference and Track Header Boxes:\r\n      *   moov > trak > mdia > hdlr\r\n      *   moov > trak > tkhd\r\n      *\r\n      * @param {Uint8Array} init - The bytes of the init segment for this source\r\n      * @return {Number[]} A list of trackIds\r\n      *\r\n      * @see ISO-BMFF-12/2015, Section 8.4.3\r\n     **/\r\n\r\n    getVideoTrackIds = function (init) {\r\n      var traks = findBox$3(init, ['moov', 'trak']);\r\n      var videoTrackIds = [];\r\n      traks.forEach(function (trak) {\r\n        var hdlrs = findBox$3(trak, ['mdia', 'hdlr']);\r\n        var tkhds = findBox$3(trak, ['tkhd']);\r\n        hdlrs.forEach(function (hdlr, index) {\r\n          var handlerType = parseType$1(hdlr.subarray(8, 12));\r\n          var tkhd = tkhds[index];\r\n          var view;\r\n          var version;\r\n          var trackId;\r\n          if (handlerType === 'vide') {\r\n            view = new DataView(tkhd.buffer, tkhd.byteOffset, tkhd.byteLength);\r\n            version = view.getUint8(0);\r\n            trackId = version === 0 ? view.getUint32(12) : view.getUint32(20);\r\n            videoTrackIds.push(trackId);\r\n          }\r\n        });\r\n      });\r\n      return videoTrackIds;\r\n    };\r\n    getTimescaleFromMediaHeader$1 = function (mdhd) {\r\n      // mdhd is a FullBox, meaning it will have its own version as the first byte\r\n      var version = mdhd[0];\r\n      var index = version === 0 ? 12 : 20;\r\n      return toUnsigned(mdhd[index] << 24 | mdhd[index + 1] << 16 | mdhd[index + 2] << 8 | mdhd[index + 3]);\r\n    };\r\n    /**\r\n     * Get all the video, audio, and hint tracks from a non fragmented\r\n     * mp4 segment\r\n     */\r\n\r\n    getTracks = function (init) {\r\n      var traks = findBox$3(init, ['moov', 'trak']);\r\n      var tracks = [];\r\n      traks.forEach(function (trak) {\r\n        var track = {};\r\n        var tkhd = findBox$3(trak, ['tkhd'])[0];\r\n        var view, tkhdVersion; // id\r\n\r\n        if (tkhd) {\r\n          view = new DataView(tkhd.buffer, tkhd.byteOffset, tkhd.byteLength);\r\n          tkhdVersion = view.getUint8(0);\r\n          track.id = tkhdVersion === 0 ? view.getUint32(12) : view.getUint32(20);\r\n        }\r\n        var hdlr = findBox$3(trak, ['mdia', 'hdlr'])[0]; // type\r\n\r\n        if (hdlr) {\r\n          var type = parseType$1(hdlr.subarray(8, 12));\r\n          if (type === 'vide') {\r\n            track.type = 'video';\r\n          } else if (type === 'soun') {\r\n            track.type = 'audio';\r\n          } else {\r\n            track.type = type;\r\n          }\r\n        } // codec\r\n\r\n        var stsd = findBox$3(trak, ['mdia', 'minf', 'stbl', 'stsd'])[0];\r\n        if (stsd) {\r\n          var sampleDescriptions = stsd.subarray(8); // gives the codec type string\r\n\r\n          track.codec = parseType$1(sampleDescriptions.subarray(4, 8));\r\n          var codecBox = findBox$3(sampleDescriptions, [track.codec])[0];\r\n          var codecConfig, codecConfigType;\r\n          if (codecBox) {\r\n            // https://tools.ietf.org/html/rfc6381#section-3.3\r\n            if (/^[asm]vc[1-9]$/i.test(track.codec)) {\r\n              // we don't need anything but the \"config\" parameter of the\r\n              // avc1 codecBox\r\n              codecConfig = codecBox.subarray(78);\r\n              codecConfigType = parseType$1(codecConfig.subarray(4, 8));\r\n              if (codecConfigType === 'avcC' && codecConfig.length > 11) {\r\n                track.codec += '.'; // left padded with zeroes for single digit hex\r\n                // profile idc\r\n\r\n                track.codec += toHexString(codecConfig[9]); // the byte containing the constraint_set flags\r\n\r\n                track.codec += toHexString(codecConfig[10]); // level idc\r\n\r\n                track.codec += toHexString(codecConfig[11]);\r\n              } else {\r\n                // TODO: show a warning that we couldn't parse the codec\r\n                // and are using the default\r\n                track.codec = 'avc1.4d400d';\r\n              }\r\n            } else if (/^mp4[a,v]$/i.test(track.codec)) {\r\n              // we do not need anything but the streamDescriptor of the mp4a codecBox\r\n              codecConfig = codecBox.subarray(28);\r\n              codecConfigType = parseType$1(codecConfig.subarray(4, 8));\r\n              if (codecConfigType === 'esds' && codecConfig.length > 20 && codecConfig[19] !== 0) {\r\n                track.codec += '.' + toHexString(codecConfig[19]); // this value is only a single digit\r\n\r\n                track.codec += '.' + toHexString(codecConfig[20] >>> 2 & 0x3f).replace(/^0/, '');\r\n              } else {\r\n                // TODO: show a warning that we couldn't parse the codec\r\n                // and are using the default\r\n                track.codec = 'mp4a.40.2';\r\n              }\r\n            } else {\r\n              // flac, opus, etc\r\n              track.codec = track.codec.toLowerCase();\r\n            }\r\n          }\r\n        }\r\n        var mdhd = findBox$3(trak, ['mdia', 'mdhd'])[0];\r\n        if (mdhd) {\r\n          track.timescale = getTimescaleFromMediaHeader$1(mdhd);\r\n        }\r\n        tracks.push(track);\r\n      });\r\n      return tracks;\r\n    };\r\n    /**\r\n     * Returns an array of emsg ID3 data from the provided segmentData.\r\n     * An offset can also be provided as the Latest Arrival Time to calculate\r\n     * the Event Start Time of v0 EMSG boxes.\r\n     * See: https://dashif-documents.azurewebsites.net/Events/master/event.html#Inband-event-timing\r\n     *\r\n     * @param {Uint8Array} segmentData the segment byte array.\r\n     * @param {number} offset the segment start time or Latest Arrival Time,\r\n     * @return {Object[]} an array of ID3 parsed from EMSG boxes\r\n     */\r\n\r\n    getEmsgID3 = function (segmentData, offset = 0) {\r\n      var emsgBoxes = findBox$3(segmentData, ['emsg']);\r\n      return emsgBoxes.map(data => {\r\n        var parsedBox = emsg.parseEmsgBox(new Uint8Array(data));\r\n        var parsedId3Frames = parseId3Frames(parsedBox.message_data);\r\n        return {\r\n          cueTime: emsg.scaleTime(parsedBox.presentation_time, parsedBox.timescale, parsedBox.presentation_time_delta, offset),\r\n          duration: emsg.scaleTime(parsedBox.event_duration, parsedBox.timescale),\r\n          frames: parsedId3Frames\r\n        };\r\n      });\r\n    };\r\n    var probe$2 = {\r\n      // export mp4 inspector's findBox and parseType for backwards compatibility\r\n      findBox: findBox$3,\r\n      parseType: parseType$1,\r\n      timescale: timescale,\r\n      startTime: startTime,\r\n      compositionStartTime: compositionStartTime,\r\n      videoTrackIds: getVideoTrackIds,\r\n      tracks: getTracks,\r\n      getTimescaleFromMediaHeader: getTimescaleFromMediaHeader$1,\r\n      getEmsgID3: getEmsgID3\r\n    };\r\n    const {\r\n      parseTrun\r\n    } = mp4Inspector;\r\n    const {\r\n      findBox: findBox$2\r\n    } = probe$2;\r\n    var window$1 = window_1;\r\n    /**\r\n     * Utility function for parsing data from mdat boxes.\r\n     * @param {Array<Uint8Array>} segment the segment data to create mdat/traf pairs from.\r\n     * @returns mdat and traf boxes paired up for easier parsing.\r\n     */\r\n\r\n    var getMdatTrafPairs$2 = function (segment) {\r\n      var trafs = findBox$2(segment, ['moof', 'traf']);\r\n      var mdats = findBox$2(segment, ['mdat']);\r\n      var mdatTrafPairs = []; // Pair up each traf with a mdat as moofs and mdats are in pairs\r\n\r\n      mdats.forEach(function (mdat, index) {\r\n        var matchingTraf = trafs[index];\r\n        mdatTrafPairs.push({\r\n          mdat: mdat,\r\n          traf: matchingTraf\r\n        });\r\n      });\r\n      return mdatTrafPairs;\r\n    };\r\n    /**\r\n      * Parses sample information out of Track Run Boxes and calculates\r\n      * the absolute presentation and decode timestamps of each sample.\r\n      *\r\n      * @param {Array<Uint8Array>} truns - The Trun Run boxes to be parsed\r\n      * @param {Number|BigInt} baseMediaDecodeTime - base media decode time from tfdt\r\n          @see ISO-BMFF-12/2015, Section 8.8.12\r\n      * @param {Object} tfhd - The parsed Track Fragment Header\r\n      *   @see inspect.parseTfhd\r\n      * @return {Object[]} the parsed samples\r\n      *\r\n      * @see ISO-BMFF-12/2015, Section 8.8.8\r\n     **/\r\n\r\n    var parseSamples$2 = function (truns, baseMediaDecodeTime, tfhd) {\r\n      var currentDts = baseMediaDecodeTime;\r\n      var defaultSampleDuration = tfhd.defaultSampleDuration || 0;\r\n      var defaultSampleSize = tfhd.defaultSampleSize || 0;\r\n      var trackId = tfhd.trackId;\r\n      var allSamples = [];\r\n      truns.forEach(function (trun) {\r\n        // Note: We currently do not parse the sample table as well\r\n        // as the trun. It's possible some sources will require this.\r\n        // moov > trak > mdia > minf > stbl\r\n        var trackRun = parseTrun(trun);\r\n        var samples = trackRun.samples;\r\n        samples.forEach(function (sample) {\r\n          if (sample.duration === undefined) {\r\n            sample.duration = defaultSampleDuration;\r\n          }\r\n          if (sample.size === undefined) {\r\n            sample.size = defaultSampleSize;\r\n          }\r\n          sample.trackId = trackId;\r\n          sample.dts = currentDts;\r\n          if (sample.compositionTimeOffset === undefined) {\r\n            sample.compositionTimeOffset = 0;\r\n          }\r\n          if (typeof currentDts === 'bigint') {\r\n            sample.pts = currentDts + window$1.BigInt(sample.compositionTimeOffset);\r\n            currentDts += window$1.BigInt(sample.duration);\r\n          } else {\r\n            sample.pts = currentDts + sample.compositionTimeOffset;\r\n            currentDts += sample.duration;\r\n          }\r\n        });\r\n        allSamples = allSamples.concat(samples);\r\n      });\r\n      return allSamples;\r\n    };\r\n    var samples = {\r\n      getMdatTrafPairs: getMdatTrafPairs$2,\r\n      parseSamples: parseSamples$2\r\n    };\r\n    /**\r\n     * mux.js\r\n     *\r\n     * Copyright (c) Brightcove\r\n     * Licensed Apache-2.0 https://github.com/videojs/mux.js/blob/master/LICENSE\r\n     *\r\n     * Reads in-band CEA-708 captions out of FMP4 segments.\r\n     * @see https://en.wikipedia.org/wiki/CEA-708\r\n     */\r\n\r\n    var discardEmulationPreventionBytes = captionPacketParser.discardEmulationPreventionBytes;\r\n    var CaptionStream = captionStream.CaptionStream;\r\n    var findBox$1 = findBox_1;\r\n    var parseTfdt$1 = parseTfdt$3;\r\n    var parseTfhd = parseTfhd$2;\r\n    var {\r\n      getMdatTrafPairs: getMdatTrafPairs$1,\r\n      parseSamples: parseSamples$1\r\n    } = samples;\r\n    /**\r\n      * Maps an offset in the mdat to a sample based on the the size of the samples.\r\n      * Assumes that `parseSamples` has been called first.\r\n      *\r\n      * @param {Number} offset - The offset into the mdat\r\n      * @param {Object[]} samples - An array of samples, parsed using `parseSamples`\r\n      * @return {?Object} The matching sample, or null if no match was found.\r\n      *\r\n      * @see ISO-BMFF-12/2015, Section 8.8.8\r\n     **/\r\n\r\n    var mapToSample = function (offset, samples) {\r\n      var approximateOffset = offset;\r\n      for (var i = 0; i < samples.length; i++) {\r\n        var sample = samples[i];\r\n        if (approximateOffset < sample.size) {\r\n          return sample;\r\n        }\r\n        approximateOffset -= sample.size;\r\n      }\r\n      return null;\r\n    };\r\n    /**\r\n      * Finds SEI nal units contained in a Media Data Box.\r\n      * Assumes that `parseSamples` has been called first.\r\n      *\r\n      * @param {Uint8Array} avcStream - The bytes of the mdat\r\n      * @param {Object[]} samples - The samples parsed out by `parseSamples`\r\n      * @param {Number} trackId - The trackId of this video track\r\n      * @return {Object[]} seiNals - the parsed SEI NALUs found.\r\n      *   The contents of the seiNal should match what is expected by\r\n      *   CaptionStream.push (nalUnitType, size, data, escapedRBSP, pts, dts)\r\n      *\r\n      * @see ISO-BMFF-12/2015, Section 8.1.1\r\n      * @see Rec. ITU-T H.264, 7.3.2.3.1\r\n     **/\r\n\r\n    var findSeiNals = function (avcStream, samples, trackId) {\r\n      var avcView = new DataView(avcStream.buffer, avcStream.byteOffset, avcStream.byteLength),\r\n        result = {\r\n          logs: [],\r\n          seiNals: []\r\n        },\r\n        seiNal,\r\n        i,\r\n        length,\r\n        lastMatchedSample;\r\n      for (i = 0; i + 4 < avcStream.length; i += length) {\r\n        length = avcView.getUint32(i);\r\n        i += 4; // Bail if this doesn't appear to be an H264 stream\r\n\r\n        if (length <= 0) {\r\n          continue;\r\n        }\r\n        switch (avcStream[i] & 0x1F) {\r\n          case 0x06:\r\n            var data = avcStream.subarray(i + 1, i + 1 + length);\r\n            var matchingSample = mapToSample(i, samples);\r\n            seiNal = {\r\n              nalUnitType: 'sei_rbsp',\r\n              size: length,\r\n              data: data,\r\n              escapedRBSP: discardEmulationPreventionBytes(data),\r\n              trackId: trackId\r\n            };\r\n            if (matchingSample) {\r\n              seiNal.pts = matchingSample.pts;\r\n              seiNal.dts = matchingSample.dts;\r\n              lastMatchedSample = matchingSample;\r\n            } else if (lastMatchedSample) {\r\n              // If a matching sample cannot be found, use the last\r\n              // sample's values as they should be as close as possible\r\n              seiNal.pts = lastMatchedSample.pts;\r\n              seiNal.dts = lastMatchedSample.dts;\r\n            } else {\r\n              result.logs.push({\r\n                level: 'warn',\r\n                message: 'We\\'ve encountered a nal unit without data at ' + i + ' for trackId ' + trackId + '. See mux.js#223.'\r\n              });\r\n              break;\r\n            }\r\n            result.seiNals.push(seiNal);\r\n            break;\r\n        }\r\n      }\r\n      return result;\r\n    };\r\n    /**\r\n      * Parses out caption nals from an FMP4 segment's video tracks.\r\n      *\r\n      * @param {Uint8Array} segment - The bytes of a single segment\r\n      * @param {Number} videoTrackId - The trackId of a video track in the segment\r\n      * @return {Object.<Number, Object[]>} A mapping of video trackId to\r\n      *   a list of seiNals found in that track\r\n     **/\r\n\r\n    var parseCaptionNals = function (segment, videoTrackId) {\r\n      var captionNals = {};\r\n      var mdatTrafPairs = getMdatTrafPairs$1(segment);\r\n      mdatTrafPairs.forEach(function (pair) {\r\n        var mdat = pair.mdat;\r\n        var traf = pair.traf;\r\n        var tfhd = findBox$1(traf, ['tfhd']); // Exactly 1 tfhd per traf\r\n\r\n        var headerInfo = parseTfhd(tfhd[0]);\r\n        var trackId = headerInfo.trackId;\r\n        var tfdt = findBox$1(traf, ['tfdt']); // Either 0 or 1 tfdt per traf\r\n\r\n        var baseMediaDecodeTime = tfdt.length > 0 ? parseTfdt$1(tfdt[0]).baseMediaDecodeTime : 0;\r\n        var truns = findBox$1(traf, ['trun']);\r\n        var samples;\r\n        var result; // Only parse video data for the chosen video track\r\n\r\n        if (videoTrackId === trackId && truns.length > 0) {\r\n          samples = parseSamples$1(truns, baseMediaDecodeTime, headerInfo);\r\n          result = findSeiNals(mdat, samples, trackId);\r\n          if (!captionNals[trackId]) {\r\n            captionNals[trackId] = {\r\n              seiNals: [],\r\n              logs: []\r\n            };\r\n          }\r\n          captionNals[trackId].seiNals = captionNals[trackId].seiNals.concat(result.seiNals);\r\n          captionNals[trackId].logs = captionNals[trackId].logs.concat(result.logs);\r\n        }\r\n      });\r\n      return captionNals;\r\n    };\r\n    /**\r\n      * Parses out inband captions from an MP4 container and returns\r\n      * caption objects that can be used by WebVTT and the TextTrack API.\r\n      * @see https://developer.mozilla.org/en-US/docs/Web/API/VTTCue\r\n      * @see https://developer.mozilla.org/en-US/docs/Web/API/TextTrack\r\n      * Assumes that `probe.getVideoTrackIds` and `probe.timescale` have been called first\r\n      *\r\n      * @param {Uint8Array} segment - The fmp4 segment containing embedded captions\r\n      * @param {Number} trackId - The id of the video track to parse\r\n      * @param {Number} timescale - The timescale for the video track from the init segment\r\n      *\r\n      * @return {?Object[]} parsedCaptions - A list of captions or null if no video tracks\r\n      * @return {Number} parsedCaptions[].startTime - The time to show the caption in seconds\r\n      * @return {Number} parsedCaptions[].endTime - The time to stop showing the caption in seconds\r\n      * @return {Object[]} parsedCaptions[].content - A list of individual caption segments\r\n      * @return {String} parsedCaptions[].content.text - The visible content of the caption segment\r\n      * @return {Number} parsedCaptions[].content.line - The line height from 1-15 for positioning of the caption segment\r\n      * @return {Number} parsedCaptions[].content.position - The column indent percentage for cue positioning from 10-80\r\n     **/\r\n\r\n    var parseEmbeddedCaptions = function (segment, trackId, timescale) {\r\n      var captionNals; // the ISO-BMFF spec says that trackId can't be zero, but there's some broken content out there\r\n\r\n      if (trackId === null) {\r\n        return null;\r\n      }\r\n      captionNals = parseCaptionNals(segment, trackId);\r\n      var trackNals = captionNals[trackId] || {};\r\n      return {\r\n        seiNals: trackNals.seiNals,\r\n        logs: trackNals.logs,\r\n        timescale: timescale\r\n      };\r\n    };\r\n    /**\r\n      * Converts SEI NALUs into captions that can be used by video.js\r\n     **/\r\n\r\n    var CaptionParser = function () {\r\n      var isInitialized = false;\r\n      var captionStream; // Stores segments seen before trackId and timescale are set\r\n\r\n      var segmentCache; // Stores video track ID of the track being parsed\r\n\r\n      var trackId; // Stores the timescale of the track being parsed\r\n\r\n      var timescale; // Stores captions parsed so far\r\n\r\n      var parsedCaptions; // Stores whether we are receiving partial data or not\r\n\r\n      var parsingPartial;\r\n      /**\r\n        * A method to indicate whether a CaptionParser has been initalized\r\n        * @returns {Boolean}\r\n       **/\r\n\r\n      this.isInitialized = function () {\r\n        return isInitialized;\r\n      };\r\n      /**\r\n        * Initializes the underlying CaptionStream, SEI NAL parsing\r\n        * and management, and caption collection\r\n       **/\r\n\r\n      this.init = function (options) {\r\n        captionStream = new CaptionStream();\r\n        isInitialized = true;\r\n        parsingPartial = options ? options.isPartial : false; // Collect dispatched captions\r\n\r\n        captionStream.on('data', function (event) {\r\n          // Convert to seconds in the source's timescale\r\n          event.startTime = event.startPts / timescale;\r\n          event.endTime = event.endPts / timescale;\r\n          parsedCaptions.captions.push(event);\r\n          parsedCaptions.captionStreams[event.stream] = true;\r\n        });\r\n        captionStream.on('log', function (log) {\r\n          parsedCaptions.logs.push(log);\r\n        });\r\n      };\r\n      /**\r\n        * Determines if a new video track will be selected\r\n        * or if the timescale changed\r\n        * @return {Boolean}\r\n       **/\r\n\r\n      this.isNewInit = function (videoTrackIds, timescales) {\r\n        if (videoTrackIds && videoTrackIds.length === 0 || timescales && typeof timescales === 'object' && Object.keys(timescales).length === 0) {\r\n          return false;\r\n        }\r\n        return trackId !== videoTrackIds[0] || timescale !== timescales[trackId];\r\n      };\r\n      /**\r\n        * Parses out SEI captions and interacts with underlying\r\n        * CaptionStream to return dispatched captions\r\n        *\r\n        * @param {Uint8Array} segment - The fmp4 segment containing embedded captions\r\n        * @param {Number[]} videoTrackIds - A list of video tracks found in the init segment\r\n        * @param {Object.<Number, Number>} timescales - The timescales found in the init segment\r\n        * @see parseEmbeddedCaptions\r\n        * @see m2ts/caption-stream.js\r\n       **/\r\n\r\n      this.parse = function (segment, videoTrackIds, timescales) {\r\n        var parsedData;\r\n        if (!this.isInitialized()) {\r\n          return null; // This is not likely to be a video segment\r\n        } else if (!videoTrackIds || !timescales) {\r\n          return null;\r\n        } else if (this.isNewInit(videoTrackIds, timescales)) {\r\n          // Use the first video track only as there is no\r\n          // mechanism to switch to other video tracks\r\n          trackId = videoTrackIds[0];\r\n          timescale = timescales[trackId]; // If an init segment has not been seen yet, hold onto segment\r\n          // data until we have one.\r\n          // the ISO-BMFF spec says that trackId can't be zero, but there's some broken content out there\r\n        } else if (trackId === null || !timescale) {\r\n          segmentCache.push(segment);\r\n          return null;\r\n        } // Now that a timescale and trackId is set, parse cached segments\r\n\r\n        while (segmentCache.length > 0) {\r\n          var cachedSegment = segmentCache.shift();\r\n          this.parse(cachedSegment, videoTrackIds, timescales);\r\n        }\r\n        parsedData = parseEmbeddedCaptions(segment, trackId, timescale);\r\n        if (parsedData && parsedData.logs) {\r\n          parsedCaptions.logs = parsedCaptions.logs.concat(parsedData.logs);\r\n        }\r\n        if (parsedData === null || !parsedData.seiNals) {\r\n          if (parsedCaptions.logs.length) {\r\n            return {\r\n              logs: parsedCaptions.logs,\r\n              captions: [],\r\n              captionStreams: []\r\n            };\r\n          }\r\n          return null;\r\n        }\r\n        this.pushNals(parsedData.seiNals); // Force the parsed captions to be dispatched\r\n\r\n        this.flushStream();\r\n        return parsedCaptions;\r\n      };\r\n      /**\r\n        * Pushes SEI NALUs onto CaptionStream\r\n        * @param {Object[]} nals - A list of SEI nals parsed using `parseCaptionNals`\r\n        * Assumes that `parseCaptionNals` has been called first\r\n        * @see m2ts/caption-stream.js\r\n        **/\r\n\r\n      this.pushNals = function (nals) {\r\n        if (!this.isInitialized() || !nals || nals.length === 0) {\r\n          return null;\r\n        }\r\n        nals.forEach(function (nal) {\r\n          captionStream.push(nal);\r\n        });\r\n      };\r\n      /**\r\n        * Flushes underlying CaptionStream to dispatch processed, displayable captions\r\n        * @see m2ts/caption-stream.js\r\n       **/\r\n\r\n      this.flushStream = function () {\r\n        if (!this.isInitialized()) {\r\n          return null;\r\n        }\r\n        if (!parsingPartial) {\r\n          captionStream.flush();\r\n        } else {\r\n          captionStream.partialFlush();\r\n        }\r\n      };\r\n      /**\r\n        * Reset caption buckets for new data\r\n       **/\r\n\r\n      this.clearParsedCaptions = function () {\r\n        parsedCaptions.captions = [];\r\n        parsedCaptions.captionStreams = {};\r\n        parsedCaptions.logs = [];\r\n      };\r\n      /**\r\n        * Resets underlying CaptionStream\r\n        * @see m2ts/caption-stream.js\r\n       **/\r\n\r\n      this.resetCaptionStream = function () {\r\n        if (!this.isInitialized()) {\r\n          return null;\r\n        }\r\n        captionStream.reset();\r\n      };\r\n      /**\r\n        * Convenience method to clear all captions flushed from the\r\n        * CaptionStream and still being parsed\r\n        * @see m2ts/caption-stream.js\r\n       **/\r\n\r\n      this.clearAllCaptions = function () {\r\n        this.clearParsedCaptions();\r\n        this.resetCaptionStream();\r\n      };\r\n      /**\r\n        * Reset caption parser\r\n       **/\r\n\r\n      this.reset = function () {\r\n        segmentCache = [];\r\n        trackId = null;\r\n        timescale = null;\r\n        if (!parsedCaptions) {\r\n          parsedCaptions = {\r\n            captions: [],\r\n            // CC1, CC2, CC3, CC4\r\n            captionStreams: {},\r\n            logs: []\r\n          };\r\n        } else {\r\n          this.clearParsedCaptions();\r\n        }\r\n        this.resetCaptionStream();\r\n      };\r\n      this.reset();\r\n    };\r\n    var captionParser = CaptionParser;\r\n    const {\r\n      parseTfdt\r\n    } = mp4Inspector;\r\n    const findBox = findBox_1;\r\n    const {\r\n      getTimescaleFromMediaHeader\r\n    } = probe$2;\r\n    const {\r\n      parseSamples,\r\n      getMdatTrafPairs\r\n    } = samples;\r\n    /**\r\n     * Module for parsing WebVTT text and styles from FMP4 segments.\r\n     * Based on the ISO/IEC 14496-30.\r\n     */\r\n\r\n    const WebVttParser = function () {\r\n      // default timescale to 90k\r\n      let timescale = 90e3;\r\n      /**\r\n       * Parses the timescale from the init segment.\r\n       * @param {Array<Uint8Array>} segment The initialization segment to parse the timescale from.\r\n       */\r\n\r\n      this.init = function (segment) {\r\n        // We just need the timescale from the init segment.\r\n        const mdhd = findBox(segment, ['moov', 'trak', 'mdia', 'mdhd'])[0];\r\n        if (mdhd) {\r\n          timescale = getTimescaleFromMediaHeader(mdhd);\r\n        }\r\n      };\r\n      /**\r\n       * Parses a WebVTT FMP4 segment.\r\n       * @param {Array<Uint8Array>} segment The content segment to parse the WebVTT cues from.\r\n       * @returns The WebVTT cue text, styling, and timing info as an array of cue objects.\r\n       */\r\n\r\n      this.parseSegment = function (segment) {\r\n        const vttCues = [];\r\n        const mdatTrafPairs = getMdatTrafPairs(segment);\r\n        let baseMediaDecodeTime = 0;\r\n        mdatTrafPairs.forEach(function (pair) {\r\n          const mdatBox = pair.mdat;\r\n          const trafBox = pair.traf; // zero or one.\r\n\r\n          const tfdtBox = findBox(trafBox, ['tfdt'])[0]; // zero or one.\r\n\r\n          const tfhdBox = findBox(trafBox, ['tfhd'])[0]; // zero or more.\r\n\r\n          const trunBoxes = findBox(trafBox, ['trun']);\r\n          if (tfdtBox) {\r\n            const tfdt = parseTfdt(tfdtBox);\r\n            baseMediaDecodeTime = tfdt.baseMediaDecodeTime;\r\n          }\r\n          if (trunBoxes.length && tfhdBox) {\r\n            const samples = parseSamples(trunBoxes, baseMediaDecodeTime, tfhdBox);\r\n            let mdatOffset = 0;\r\n            samples.forEach(function (sample) {\r\n              // decode utf8 payload\r\n              const UTF_8 = 'utf-8';\r\n              const textDecoder = new TextDecoder(UTF_8); // extract sample data from the mdat box.\r\n              // WebVTT Sample format:\r\n              // Exactly one VTTEmptyCueBox box\r\n              // OR one or more VTTCueBox boxes.\r\n\r\n              const sampleData = mdatBox.slice(mdatOffset, mdatOffset + sample.size); // single vtte box.\r\n\r\n              const vtteBox = findBox(sampleData, ['vtte'])[0]; // empty box\r\n\r\n              if (vtteBox) {\r\n                mdatOffset += sample.size;\r\n                return;\r\n              } // TODO: Support 'vtta' boxes.\r\n              // VTTAdditionalTextBoxes can be interleaved between VTTCueBoxes.\r\n\r\n              const vttcBoxes = findBox(sampleData, ['vttc']);\r\n              vttcBoxes.forEach(function (vttcBox) {\r\n                // mandatory payload box.\r\n                const paylBox = findBox(vttcBox, ['payl'])[0]; // optional settings box\r\n\r\n                const sttgBox = findBox(vttcBox, ['sttg'])[0];\r\n                const start = sample.pts / timescale;\r\n                const end = (sample.pts + sample.duration) / timescale;\r\n                let cueText, settings; // contains cue text.\r\n\r\n                if (paylBox) {\r\n                  try {\r\n                    cueText = textDecoder.decode(paylBox);\r\n                  } catch (e) {\r\n                    console.error(e);\r\n                  }\r\n                } // settings box contains styling.\r\n\r\n                if (sttgBox) {\r\n                  try {\r\n                    settings = textDecoder.decode(sttgBox);\r\n                  } catch (e) {\r\n                    console.error(e);\r\n                  }\r\n                }\r\n                if (sample.duration && cueText) {\r\n                  vttCues.push({\r\n                    cueText,\r\n                    start,\r\n                    end,\r\n                    settings\r\n                  });\r\n                }\r\n              });\r\n              mdatOffset += sample.size;\r\n            });\r\n          }\r\n        });\r\n        return vttCues;\r\n      };\r\n    };\r\n    var webvttParser = WebVttParser;\r\n    /**\r\n     * mux.js\r\n     *\r\n     * Copyright (c) Brightcove\r\n     * Licensed Apache-2.0 https://github.com/videojs/mux.js/blob/master/LICENSE\r\n     *\r\n     * Utilities to detect basic properties and metadata about TS Segments.\r\n     */\r\n\r\n    var StreamTypes$1 = streamTypes;\r\n    var parsePid = function (packet) {\r\n      var pid = packet[1] & 0x1f;\r\n      pid <<= 8;\r\n      pid |= packet[2];\r\n      return pid;\r\n    };\r\n    var parsePayloadUnitStartIndicator = function (packet) {\r\n      return !!(packet[1] & 0x40);\r\n    };\r\n    var parseAdaptionField = function (packet) {\r\n      var offset = 0; // if an adaption field is present, its length is specified by the\r\n      // fifth byte of the TS packet header. The adaptation field is\r\n      // used to add stuffing to PES packets that don't fill a complete\r\n      // TS packet, and to specify some forms of timing and control data\r\n      // that we do not currently use.\r\n\r\n      if ((packet[3] & 0x30) >>> 4 > 0x01) {\r\n        offset += packet[4] + 1;\r\n      }\r\n      return offset;\r\n    };\r\n    var parseType = function (packet, pmtPid) {\r\n      var pid = parsePid(packet);\r\n      if (pid === 0) {\r\n        return 'pat';\r\n      } else if (pid === pmtPid) {\r\n        return 'pmt';\r\n      } else if (pmtPid) {\r\n        return 'pes';\r\n      }\r\n      return null;\r\n    };\r\n    var parsePat = function (packet) {\r\n      var pusi = parsePayloadUnitStartIndicator(packet);\r\n      var offset = 4 + parseAdaptionField(packet);\r\n      if (pusi) {\r\n        offset += packet[offset] + 1;\r\n      }\r\n      return (packet[offset + 10] & 0x1f) << 8 | packet[offset + 11];\r\n    };\r\n    var parsePmt = function (packet) {\r\n      var programMapTable = {};\r\n      var pusi = parsePayloadUnitStartIndicator(packet);\r\n      var payloadOffset = 4 + parseAdaptionField(packet);\r\n      if (pusi) {\r\n        payloadOffset += packet[payloadOffset] + 1;\r\n      } // PMTs can be sent ahead of the time when they should actually\r\n      // take effect. We don't believe this should ever be the case\r\n      // for HLS but we'll ignore \"forward\" PMT declarations if we see\r\n      // them. Future PMT declarations have the current_next_indicator\r\n      // set to zero.\r\n\r\n      if (!(packet[payloadOffset + 5] & 0x01)) {\r\n        return;\r\n      }\r\n      var sectionLength, tableEnd, programInfoLength; // the mapping table ends at the end of the current section\r\n\r\n      sectionLength = (packet[payloadOffset + 1] & 0x0f) << 8 | packet[payloadOffset + 2];\r\n      tableEnd = 3 + sectionLength - 4; // to determine where the table is, we have to figure out how\r\n      // long the program info descriptors are\r\n\r\n      programInfoLength = (packet[payloadOffset + 10] & 0x0f) << 8 | packet[payloadOffset + 11]; // advance the offset to the first entry in the mapping table\r\n\r\n      var offset = 12 + programInfoLength;\r\n      while (offset < tableEnd) {\r\n        var i = payloadOffset + offset; // add an entry that maps the elementary_pid to the stream_type\r\n\r\n        programMapTable[(packet[i + 1] & 0x1F) << 8 | packet[i + 2]] = packet[i]; // move to the next table entry\r\n        // skip past the elementary stream descriptors, if present\r\n\r\n        offset += ((packet[i + 3] & 0x0F) << 8 | packet[i + 4]) + 5;\r\n      }\r\n      return programMapTable;\r\n    };\r\n    var parsePesType = function (packet, programMapTable) {\r\n      var pid = parsePid(packet);\r\n      var type = programMapTable[pid];\r\n      switch (type) {\r\n        case StreamTypes$1.H264_STREAM_TYPE:\r\n          return 'video';\r\n        case StreamTypes$1.ADTS_STREAM_TYPE:\r\n          return 'audio';\r\n        case StreamTypes$1.METADATA_STREAM_TYPE:\r\n          return 'timed-metadata';\r\n        default:\r\n          return null;\r\n      }\r\n    };\r\n    var parsePesTime = function (packet) {\r\n      var pusi = parsePayloadUnitStartIndicator(packet);\r\n      if (!pusi) {\r\n        return null;\r\n      }\r\n      var offset = 4 + parseAdaptionField(packet);\r\n      if (offset >= packet.byteLength) {\r\n        // From the H 222.0 MPEG-TS spec\r\n        // \"For transport stream packets carrying PES packets, stuffing is needed when there\r\n        //  is insufficient PES packet data to completely fill the transport stream packet\r\n        //  payload bytes. Stuffing is accomplished by defining an adaptation field longer than\r\n        //  the sum of the lengths of the data elements in it, so that the payload bytes\r\n        //  remaining after the adaptation field exactly accommodates the available PES packet\r\n        //  data.\"\r\n        //\r\n        // If the offset is >= the length of the packet, then the packet contains no data\r\n        // and instead is just adaption field stuffing bytes\r\n        return null;\r\n      }\r\n      var pes = null;\r\n      var ptsDtsFlags; // PES packets may be annotated with a PTS value, or a PTS value\r\n      // and a DTS value. Determine what combination of values is\r\n      // available to work with.\r\n\r\n      ptsDtsFlags = packet[offset + 7]; // PTS and DTS are normally stored as a 33-bit number.  Javascript\r\n      // performs all bitwise operations on 32-bit integers but javascript\r\n      // supports a much greater range (52-bits) of integer using standard\r\n      // mathematical operations.\r\n      // We construct a 31-bit value using bitwise operators over the 31\r\n      // most significant bits and then multiply by 4 (equal to a left-shift\r\n      // of 2) before we add the final 2 least significant bits of the\r\n      // timestamp (equal to an OR.)\r\n\r\n      if (ptsDtsFlags & 0xC0) {\r\n        pes = {}; // the PTS and DTS are not written out directly. For information\r\n        // on how they are encoded, see\r\n        // http://dvd.sourceforge.net/dvdinfo/pes-hdr.html\r\n\r\n        pes.pts = (packet[offset + 9] & 0x0E) << 27 | (packet[offset + 10] & 0xFF) << 20 | (packet[offset + 11] & 0xFE) << 12 | (packet[offset + 12] & 0xFF) << 5 | (packet[offset + 13] & 0xFE) >>> 3;\r\n        pes.pts *= 4; // Left shift by 2\r\n\r\n        pes.pts += (packet[offset + 13] & 0x06) >>> 1; // OR by the two LSBs\r\n\r\n        pes.dts = pes.pts;\r\n        if (ptsDtsFlags & 0x40) {\r\n          pes.dts = (packet[offset + 14] & 0x0E) << 27 | (packet[offset + 15] & 0xFF) << 20 | (packet[offset + 16] & 0xFE) << 12 | (packet[offset + 17] & 0xFF) << 5 | (packet[offset + 18] & 0xFE) >>> 3;\r\n          pes.dts *= 4; // Left shift by 2\r\n\r\n          pes.dts += (packet[offset + 18] & 0x06) >>> 1; // OR by the two LSBs\r\n        }\r\n      }\r\n      return pes;\r\n    };\r\n    var parseNalUnitType = function (type) {\r\n      switch (type) {\r\n        case 0x05:\r\n          return 'slice_layer_without_partitioning_rbsp_idr';\r\n        case 0x06:\r\n          return 'sei_rbsp';\r\n        case 0x07:\r\n          return 'seq_parameter_set_rbsp';\r\n        case 0x08:\r\n          return 'pic_parameter_set_rbsp';\r\n        case 0x09:\r\n          return 'access_unit_delimiter_rbsp';\r\n        default:\r\n          return null;\r\n      }\r\n    };\r\n    var videoPacketContainsKeyFrame = function (packet) {\r\n      var offset = 4 + parseAdaptionField(packet);\r\n      var frameBuffer = packet.subarray(offset);\r\n      var frameI = 0;\r\n      var frameSyncPoint = 0;\r\n      var foundKeyFrame = false;\r\n      var nalType; // advance the sync point to a NAL start, if necessary\r\n\r\n      for (; frameSyncPoint < frameBuffer.byteLength - 3; frameSyncPoint++) {\r\n        if (frameBuffer[frameSyncPoint + 2] === 1) {\r\n          // the sync point is properly aligned\r\n          frameI = frameSyncPoint + 5;\r\n          break;\r\n        }\r\n      }\r\n      while (frameI < frameBuffer.byteLength) {\r\n        // look at the current byte to determine if we've hit the end of\r\n        // a NAL unit boundary\r\n        switch (frameBuffer[frameI]) {\r\n          case 0:\r\n            // skip past non-sync sequences\r\n            if (frameBuffer[frameI - 1] !== 0) {\r\n              frameI += 2;\r\n              break;\r\n            } else if (frameBuffer[frameI - 2] !== 0) {\r\n              frameI++;\r\n              break;\r\n            }\r\n            if (frameSyncPoint + 3 !== frameI - 2) {\r\n              nalType = parseNalUnitType(frameBuffer[frameSyncPoint + 3] & 0x1f);\r\n              if (nalType === 'slice_layer_without_partitioning_rbsp_idr') {\r\n                foundKeyFrame = true;\r\n              }\r\n            } // drop trailing zeroes\r\n\r\n            do {\r\n              frameI++;\r\n            } while (frameBuffer[frameI] !== 1 && frameI < frameBuffer.length);\r\n            frameSyncPoint = frameI - 2;\r\n            frameI += 3;\r\n            break;\r\n          case 1:\r\n            // skip past non-sync sequences\r\n            if (frameBuffer[frameI - 1] !== 0 || frameBuffer[frameI - 2] !== 0) {\r\n              frameI += 3;\r\n              break;\r\n            }\r\n            nalType = parseNalUnitType(frameBuffer[frameSyncPoint + 3] & 0x1f);\r\n            if (nalType === 'slice_layer_without_partitioning_rbsp_idr') {\r\n              foundKeyFrame = true;\r\n            }\r\n            frameSyncPoint = frameI - 2;\r\n            frameI += 3;\r\n            break;\r\n          default:\r\n            // the current byte isn't a one or zero, so it cannot be part\r\n            // of a sync sequence\r\n            frameI += 3;\r\n            break;\r\n        }\r\n      }\r\n      frameBuffer = frameBuffer.subarray(frameSyncPoint);\r\n      frameI -= frameSyncPoint;\r\n      frameSyncPoint = 0; // parse the final nal\r\n\r\n      if (frameBuffer && frameBuffer.byteLength > 3) {\r\n        nalType = parseNalUnitType(frameBuffer[frameSyncPoint + 3] & 0x1f);\r\n        if (nalType === 'slice_layer_without_partitioning_rbsp_idr') {\r\n          foundKeyFrame = true;\r\n        }\r\n      }\r\n      return foundKeyFrame;\r\n    };\r\n    var probe$1 = {\r\n      parseType: parseType,\r\n      parsePat: parsePat,\r\n      parsePmt: parsePmt,\r\n      parsePayloadUnitStartIndicator: parsePayloadUnitStartIndicator,\r\n      parsePesType: parsePesType,\r\n      parsePesTime: parsePesTime,\r\n      videoPacketContainsKeyFrame: videoPacketContainsKeyFrame\r\n    };\r\n    /**\r\n     * mux.js\r\n     *\r\n     * Copyright (c) Brightcove\r\n     * Licensed Apache-2.0 https://github.com/videojs/mux.js/blob/master/LICENSE\r\n     *\r\n     * Parse mpeg2 transport stream packets to extract basic timing information\r\n     */\r\n\r\n    var StreamTypes = streamTypes;\r\n    var handleRollover = timestampRolloverStream.handleRollover;\r\n    var probe = {};\r\n    probe.ts = probe$1;\r\n    probe.aac = utils;\r\n    var ONE_SECOND_IN_TS = clock$2.ONE_SECOND_IN_TS;\r\n    var MP2T_PACKET_LENGTH = 188,\r\n      // bytes\r\n      SYNC_BYTE = 0x47;\r\n    /**\r\n     * walks through segment data looking for pat and pmt packets to parse out\r\n     * program map table information\r\n     */\r\n\r\n    var parsePsi_ = function (bytes, pmt) {\r\n      var startIndex = 0,\r\n        endIndex = MP2T_PACKET_LENGTH,\r\n        packet,\r\n        type;\r\n      while (endIndex < bytes.byteLength) {\r\n        // Look for a pair of start and end sync bytes in the data..\r\n        if (bytes[startIndex] === SYNC_BYTE && bytes[endIndex] === SYNC_BYTE) {\r\n          // We found a packet\r\n          packet = bytes.subarray(startIndex, endIndex);\r\n          type = probe.ts.parseType(packet, pmt.pid);\r\n          switch (type) {\r\n            case 'pat':\r\n              pmt.pid = probe.ts.parsePat(packet);\r\n              break;\r\n            case 'pmt':\r\n              var table = probe.ts.parsePmt(packet);\r\n              pmt.table = pmt.table || {};\r\n              Object.keys(table).forEach(function (key) {\r\n                pmt.table[key] = table[key];\r\n              });\r\n              break;\r\n          }\r\n          startIndex += MP2T_PACKET_LENGTH;\r\n          endIndex += MP2T_PACKET_LENGTH;\r\n          continue;\r\n        } // If we get here, we have somehow become de-synchronized and we need to step\r\n        // forward one byte at a time until we find a pair of sync bytes that denote\r\n        // a packet\r\n\r\n        startIndex++;\r\n        endIndex++;\r\n      }\r\n    };\r\n    /**\r\n     * walks through the segment data from the start and end to get timing information\r\n     * for the first and last audio pes packets\r\n     */\r\n\r\n    var parseAudioPes_ = function (bytes, pmt, result) {\r\n      var startIndex = 0,\r\n        endIndex = MP2T_PACKET_LENGTH,\r\n        packet,\r\n        type,\r\n        pesType,\r\n        pusi,\r\n        parsed;\r\n      var endLoop = false; // Start walking from start of segment to get first audio packet\r\n\r\n      while (endIndex <= bytes.byteLength) {\r\n        // Look for a pair of start and end sync bytes in the data..\r\n        if (bytes[startIndex] === SYNC_BYTE && (bytes[endIndex] === SYNC_BYTE || endIndex === bytes.byteLength)) {\r\n          // We found a packet\r\n          packet = bytes.subarray(startIndex, endIndex);\r\n          type = probe.ts.parseType(packet, pmt.pid);\r\n          switch (type) {\r\n            case 'pes':\r\n              pesType = probe.ts.parsePesType(packet, pmt.table);\r\n              pusi = probe.ts.parsePayloadUnitStartIndicator(packet);\r\n              if (pesType === 'audio' && pusi) {\r\n                parsed = probe.ts.parsePesTime(packet);\r\n                if (parsed) {\r\n                  parsed.type = 'audio';\r\n                  result.audio.push(parsed);\r\n                  endLoop = true;\r\n                }\r\n              }\r\n              break;\r\n          }\r\n          if (endLoop) {\r\n            break;\r\n          }\r\n          startIndex += MP2T_PACKET_LENGTH;\r\n          endIndex += MP2T_PACKET_LENGTH;\r\n          continue;\r\n        } // If we get here, we have somehow become de-synchronized and we need to step\r\n        // forward one byte at a time until we find a pair of sync bytes that denote\r\n        // a packet\r\n\r\n        startIndex++;\r\n        endIndex++;\r\n      } // Start walking from end of segment to get last audio packet\r\n\r\n      endIndex = bytes.byteLength;\r\n      startIndex = endIndex - MP2T_PACKET_LENGTH;\r\n      endLoop = false;\r\n      while (startIndex >= 0) {\r\n        // Look for a pair of start and end sync bytes in the data..\r\n        if (bytes[startIndex] === SYNC_BYTE && (bytes[endIndex] === SYNC_BYTE || endIndex === bytes.byteLength)) {\r\n          // We found a packet\r\n          packet = bytes.subarray(startIndex, endIndex);\r\n          type = probe.ts.parseType(packet, pmt.pid);\r\n          switch (type) {\r\n            case 'pes':\r\n              pesType = probe.ts.parsePesType(packet, pmt.table);\r\n              pusi = probe.ts.parsePayloadUnitStartIndicator(packet);\r\n              if (pesType === 'audio' && pusi) {\r\n                parsed = probe.ts.parsePesTime(packet);\r\n                if (parsed) {\r\n                  parsed.type = 'audio';\r\n                  result.audio.push(parsed);\r\n                  endLoop = true;\r\n                }\r\n              }\r\n              break;\r\n          }\r\n          if (endLoop) {\r\n            break;\r\n          }\r\n          startIndex -= MP2T_PACKET_LENGTH;\r\n          endIndex -= MP2T_PACKET_LENGTH;\r\n          continue;\r\n        } // If we get here, we have somehow become de-synchronized and we need to step\r\n        // forward one byte at a time until we find a pair of sync bytes that denote\r\n        // a packet\r\n\r\n        startIndex--;\r\n        endIndex--;\r\n      }\r\n    };\r\n    /**\r\n     * walks through the segment data from the start and end to get timing information\r\n     * for the first and last video pes packets as well as timing information for the first\r\n     * key frame.\r\n     */\r\n\r\n    var parseVideoPes_ = function (bytes, pmt, result) {\r\n      var startIndex = 0,\r\n        endIndex = MP2T_PACKET_LENGTH,\r\n        packet,\r\n        type,\r\n        pesType,\r\n        pusi,\r\n        parsed,\r\n        frame,\r\n        i,\r\n        pes;\r\n      var endLoop = false;\r\n      var currentFrame = {\r\n        data: [],\r\n        size: 0\r\n      }; // Start walking from start of segment to get first video packet\r\n\r\n      while (endIndex < bytes.byteLength) {\r\n        // Look for a pair of start and end sync bytes in the data..\r\n        if (bytes[startIndex] === SYNC_BYTE && bytes[endIndex] === SYNC_BYTE) {\r\n          // We found a packet\r\n          packet = bytes.subarray(startIndex, endIndex);\r\n          type = probe.ts.parseType(packet, pmt.pid);\r\n          switch (type) {\r\n            case 'pes':\r\n              pesType = probe.ts.parsePesType(packet, pmt.table);\r\n              pusi = probe.ts.parsePayloadUnitStartIndicator(packet);\r\n              if (pesType === 'video') {\r\n                if (pusi && !endLoop) {\r\n                  parsed = probe.ts.parsePesTime(packet);\r\n                  if (parsed) {\r\n                    parsed.type = 'video';\r\n                    result.video.push(parsed);\r\n                    endLoop = true;\r\n                  }\r\n                }\r\n                if (!result.firstKeyFrame) {\r\n                  if (pusi) {\r\n                    if (currentFrame.size !== 0) {\r\n                      frame = new Uint8Array(currentFrame.size);\r\n                      i = 0;\r\n                      while (currentFrame.data.length) {\r\n                        pes = currentFrame.data.shift();\r\n                        frame.set(pes, i);\r\n                        i += pes.byteLength;\r\n                      }\r\n                      if (probe.ts.videoPacketContainsKeyFrame(frame)) {\r\n                        var firstKeyFrame = probe.ts.parsePesTime(frame); // PTS/DTS may not be available. Simply *not* setting\r\n                        // the keyframe seems to work fine with HLS playback\r\n                        // and definitely preferable to a crash with TypeError...\r\n\r\n                        if (firstKeyFrame) {\r\n                          result.firstKeyFrame = firstKeyFrame;\r\n                          result.firstKeyFrame.type = 'video';\r\n                        } else {\r\n                          // eslint-disable-next-line\r\n                          console.warn('Failed to extract PTS/DTS from PES at first keyframe. ' + 'This could be an unusual TS segment, or else mux.js did not ' + 'parse your TS segment correctly. If you know your TS ' + 'segments do contain PTS/DTS on keyframes please file a bug ' + 'report! You can try ffprobe to double check for yourself.');\r\n                        }\r\n                      }\r\n                      currentFrame.size = 0;\r\n                    }\r\n                  }\r\n                  currentFrame.data.push(packet);\r\n                  currentFrame.size += packet.byteLength;\r\n                }\r\n              }\r\n              break;\r\n          }\r\n          if (endLoop && result.firstKeyFrame) {\r\n            break;\r\n          }\r\n          startIndex += MP2T_PACKET_LENGTH;\r\n          endIndex += MP2T_PACKET_LENGTH;\r\n          continue;\r\n        } // If we get here, we have somehow become de-synchronized and we need to step\r\n        // forward one byte at a time until we find a pair of sync bytes that denote\r\n        // a packet\r\n\r\n        startIndex++;\r\n        endIndex++;\r\n      } // Start walking from end of segment to get last video packet\r\n\r\n      endIndex = bytes.byteLength;\r\n      startIndex = endIndex - MP2T_PACKET_LENGTH;\r\n      endLoop = false;\r\n      while (startIndex >= 0) {\r\n        // Look for a pair of start and end sync bytes in the data..\r\n        if (bytes[startIndex] === SYNC_BYTE && bytes[endIndex] === SYNC_BYTE) {\r\n          // We found a packet\r\n          packet = bytes.subarray(startIndex, endIndex);\r\n          type = probe.ts.parseType(packet, pmt.pid);\r\n          switch (type) {\r\n            case 'pes':\r\n              pesType = probe.ts.parsePesType(packet, pmt.table);\r\n              pusi = probe.ts.parsePayloadUnitStartIndicator(packet);\r\n              if (pesType === 'video' && pusi) {\r\n                parsed = probe.ts.parsePesTime(packet);\r\n                if (parsed) {\r\n                  parsed.type = 'video';\r\n                  result.video.push(parsed);\r\n                  endLoop = true;\r\n                }\r\n              }\r\n              break;\r\n          }\r\n          if (endLoop) {\r\n            break;\r\n          }\r\n          startIndex -= MP2T_PACKET_LENGTH;\r\n          endIndex -= MP2T_PACKET_LENGTH;\r\n          continue;\r\n        } // If we get here, we have somehow become de-synchronized and we need to step\r\n        // forward one byte at a time until we find a pair of sync bytes that denote\r\n        // a packet\r\n\r\n        startIndex--;\r\n        endIndex--;\r\n      }\r\n    };\r\n    /**\r\n     * Adjusts the timestamp information for the segment to account for\r\n     * rollover and convert to seconds based on pes packet timescale (90khz clock)\r\n     */\r\n\r\n    var adjustTimestamp_ = function (segmentInfo, baseTimestamp) {\r\n      if (segmentInfo.audio && segmentInfo.audio.length) {\r\n        var audioBaseTimestamp = baseTimestamp;\r\n        if (typeof audioBaseTimestamp === 'undefined' || isNaN(audioBaseTimestamp)) {\r\n          audioBaseTimestamp = segmentInfo.audio[0].dts;\r\n        }\r\n        segmentInfo.audio.forEach(function (info) {\r\n          info.dts = handleRollover(info.dts, audioBaseTimestamp);\r\n          info.pts = handleRollover(info.pts, audioBaseTimestamp); // time in seconds\r\n\r\n          info.dtsTime = info.dts / ONE_SECOND_IN_TS;\r\n          info.ptsTime = info.pts / ONE_SECOND_IN_TS;\r\n        });\r\n      }\r\n      if (segmentInfo.video && segmentInfo.video.length) {\r\n        var videoBaseTimestamp = baseTimestamp;\r\n        if (typeof videoBaseTimestamp === 'undefined' || isNaN(videoBaseTimestamp)) {\r\n          videoBaseTimestamp = segmentInfo.video[0].dts;\r\n        }\r\n        segmentInfo.video.forEach(function (info) {\r\n          info.dts = handleRollover(info.dts, videoBaseTimestamp);\r\n          info.pts = handleRollover(info.pts, videoBaseTimestamp); // time in seconds\r\n\r\n          info.dtsTime = info.dts / ONE_SECOND_IN_TS;\r\n          info.ptsTime = info.pts / ONE_SECOND_IN_TS;\r\n        });\r\n        if (segmentInfo.firstKeyFrame) {\r\n          var frame = segmentInfo.firstKeyFrame;\r\n          frame.dts = handleRollover(frame.dts, videoBaseTimestamp);\r\n          frame.pts = handleRollover(frame.pts, videoBaseTimestamp); // time in seconds\r\n\r\n          frame.dtsTime = frame.dts / ONE_SECOND_IN_TS;\r\n          frame.ptsTime = frame.pts / ONE_SECOND_IN_TS;\r\n        }\r\n      }\r\n    };\r\n    /**\r\n     * inspects the aac data stream for start and end time information\r\n     */\r\n\r\n    var inspectAac_ = function (bytes) {\r\n      var endLoop = false,\r\n        audioCount = 0,\r\n        sampleRate = null,\r\n        timestamp = null,\r\n        frameSize = 0,\r\n        byteIndex = 0,\r\n        packet;\r\n      while (bytes.length - byteIndex >= 3) {\r\n        var type = probe.aac.parseType(bytes, byteIndex);\r\n        switch (type) {\r\n          case 'timed-metadata':\r\n            // Exit early because we don't have enough to parse\r\n            // the ID3 tag header\r\n            if (bytes.length - byteIndex < 10) {\r\n              endLoop = true;\r\n              break;\r\n            }\r\n            frameSize = probe.aac.parseId3TagSize(bytes, byteIndex); // Exit early if we don't have enough in the buffer\r\n            // to emit a full packet\r\n\r\n            if (frameSize > bytes.length) {\r\n              endLoop = true;\r\n              break;\r\n            }\r\n            if (timestamp === null) {\r\n              packet = bytes.subarray(byteIndex, byteIndex + frameSize);\r\n              timestamp = probe.aac.parseAacTimestamp(packet);\r\n            }\r\n            byteIndex += frameSize;\r\n            break;\r\n          case 'audio':\r\n            // Exit early because we don't have enough to parse\r\n            // the ADTS frame header\r\n            if (bytes.length - byteIndex < 7) {\r\n              endLoop = true;\r\n              break;\r\n            }\r\n            frameSize = probe.aac.parseAdtsSize(bytes, byteIndex); // Exit early if we don't have enough in the buffer\r\n            // to emit a full packet\r\n\r\n            if (frameSize > bytes.length) {\r\n              endLoop = true;\r\n              break;\r\n            }\r\n            if (sampleRate === null) {\r\n              packet = bytes.subarray(byteIndex, byteIndex + frameSize);\r\n              sampleRate = probe.aac.parseSampleRate(packet);\r\n            }\r\n            audioCount++;\r\n            byteIndex += frameSize;\r\n            break;\r\n          default:\r\n            byteIndex++;\r\n            break;\r\n        }\r\n        if (endLoop) {\r\n          return null;\r\n        }\r\n      }\r\n      if (sampleRate === null || timestamp === null) {\r\n        return null;\r\n      }\r\n      var audioTimescale = ONE_SECOND_IN_TS / sampleRate;\r\n      var result = {\r\n        audio: [{\r\n          type: 'audio',\r\n          dts: timestamp,\r\n          pts: timestamp\r\n        }, {\r\n          type: 'audio',\r\n          dts: timestamp + audioCount * 1024 * audioTimescale,\r\n          pts: timestamp + audioCount * 1024 * audioTimescale\r\n        }]\r\n      };\r\n      return result;\r\n    };\r\n    /**\r\n     * inspects the transport stream segment data for start and end time information\r\n     * of the audio and video tracks (when present) as well as the first key frame's\r\n     * start time.\r\n     */\r\n\r\n    var inspectTs_ = function (bytes) {\r\n      var pmt = {\r\n        pid: null,\r\n        table: null\r\n      };\r\n      var result = {};\r\n      parsePsi_(bytes, pmt);\r\n      for (var pid in pmt.table) {\r\n        if (pmt.table.hasOwnProperty(pid)) {\r\n          var type = pmt.table[pid];\r\n          switch (type) {\r\n            case StreamTypes.H264_STREAM_TYPE:\r\n              result.video = [];\r\n              parseVideoPes_(bytes, pmt, result);\r\n              if (result.video.length === 0) {\r\n                delete result.video;\r\n              }\r\n              break;\r\n            case StreamTypes.ADTS_STREAM_TYPE:\r\n              result.audio = [];\r\n              parseAudioPes_(bytes, pmt, result);\r\n              if (result.audio.length === 0) {\r\n                delete result.audio;\r\n              }\r\n              break;\r\n          }\r\n        }\r\n      }\r\n      return result;\r\n    };\r\n    /**\r\n     * Inspects segment byte data and returns an object with start and end timing information\r\n     *\r\n     * @param {Uint8Array} bytes The segment byte data\r\n     * @param {Number} baseTimestamp Relative reference timestamp used when adjusting frame\r\n     *  timestamps for rollover. This value must be in 90khz clock.\r\n     * @return {Object} Object containing start and end frame timing info of segment.\r\n     */\r\n\r\n    var inspect = function (bytes, baseTimestamp) {\r\n      var isAacData = probe.aac.isLikelyAacData(bytes);\r\n      var result;\r\n      if (isAacData) {\r\n        result = inspectAac_(bytes);\r\n      } else {\r\n        result = inspectTs_(bytes);\r\n      }\r\n      if (!result || !result.audio && !result.video) {\r\n        return null;\r\n      }\r\n      adjustTimestamp_(result, baseTimestamp);\r\n      return result;\r\n    };\r\n    var tsInspector = {\r\n      inspect: inspect,\r\n      parseAudioPes_: parseAudioPes_\r\n    };\r\n    /* global self */\r\n\r\n    /**\r\n     * Re-emits transmuxer events by converting them into messages to the\r\n     * world outside the worker.\r\n     *\r\n     * @param {Object} transmuxer the transmuxer to wire events on\r\n     * @private\r\n     */\r\n\r\n    const wireTransmuxerEvents = function (self, transmuxer) {\r\n      transmuxer.on('data', function (segment) {\r\n        // transfer ownership of the underlying ArrayBuffer\r\n        // instead of doing a copy to save memory\r\n        // ArrayBuffers are transferable but generic TypedArrays are not\r\n        // @link https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Using_web_workers#Passing_data_by_transferring_ownership_(transferable_objects)\r\n        const initArray = segment.initSegment;\r\n        segment.initSegment = {\r\n          data: initArray.buffer,\r\n          byteOffset: initArray.byteOffset,\r\n          byteLength: initArray.byteLength\r\n        };\r\n        const typedArray = segment.data;\r\n        segment.data = typedArray.buffer;\r\n        self.postMessage({\r\n          action: 'data',\r\n          segment,\r\n          byteOffset: typedArray.byteOffset,\r\n          byteLength: typedArray.byteLength\r\n        }, [segment.data]);\r\n      });\r\n      transmuxer.on('done', function (data) {\r\n        self.postMessage({\r\n          action: 'done'\r\n        });\r\n      });\r\n      transmuxer.on('gopInfo', function (gopInfo) {\r\n        self.postMessage({\r\n          action: 'gopInfo',\r\n          gopInfo\r\n        });\r\n      });\r\n      transmuxer.on('videoSegmentTimingInfo', function (timingInfo) {\r\n        const videoSegmentTimingInfo = {\r\n          start: {\r\n            decode: clock$2.videoTsToSeconds(timingInfo.start.dts),\r\n            presentation: clock$2.videoTsToSeconds(timingInfo.start.pts)\r\n          },\r\n          end: {\r\n            decode: clock$2.videoTsToSeconds(timingInfo.end.dts),\r\n            presentation: clock$2.videoTsToSeconds(timingInfo.end.pts)\r\n          },\r\n          baseMediaDecodeTime: clock$2.videoTsToSeconds(timingInfo.baseMediaDecodeTime)\r\n        };\r\n        if (timingInfo.prependedContentDuration) {\r\n          videoSegmentTimingInfo.prependedContentDuration = clock$2.videoTsToSeconds(timingInfo.prependedContentDuration);\r\n        }\r\n        self.postMessage({\r\n          action: 'videoSegmentTimingInfo',\r\n          videoSegmentTimingInfo\r\n        });\r\n      });\r\n      transmuxer.on('audioSegmentTimingInfo', function (timingInfo) {\r\n        // Note that all times for [audio/video]SegmentTimingInfo events are in video clock\r\n        const audioSegmentTimingInfo = {\r\n          start: {\r\n            decode: clock$2.videoTsToSeconds(timingInfo.start.dts),\r\n            presentation: clock$2.videoTsToSeconds(timingInfo.start.pts)\r\n          },\r\n          end: {\r\n            decode: clock$2.videoTsToSeconds(timingInfo.end.dts),\r\n            presentation: clock$2.videoTsToSeconds(timingInfo.end.pts)\r\n          },\r\n          baseMediaDecodeTime: clock$2.videoTsToSeconds(timingInfo.baseMediaDecodeTime)\r\n        };\r\n        if (timingInfo.prependedContentDuration) {\r\n          audioSegmentTimingInfo.prependedContentDuration = clock$2.videoTsToSeconds(timingInfo.prependedContentDuration);\r\n        }\r\n        self.postMessage({\r\n          action: 'audioSegmentTimingInfo',\r\n          audioSegmentTimingInfo\r\n        });\r\n      });\r\n      transmuxer.on('id3Frame', function (id3Frame) {\r\n        self.postMessage({\r\n          action: 'id3Frame',\r\n          id3Frame\r\n        });\r\n      });\r\n      transmuxer.on('caption', function (caption) {\r\n        self.postMessage({\r\n          action: 'caption',\r\n          caption\r\n        });\r\n      });\r\n      transmuxer.on('trackinfo', function (trackInfo) {\r\n        self.postMessage({\r\n          action: 'trackinfo',\r\n          trackInfo\r\n        });\r\n      });\r\n      transmuxer.on('audioTimingInfo', function (audioTimingInfo) {\r\n        // convert to video TS since we prioritize video time over audio\r\n        self.postMessage({\r\n          action: 'audioTimingInfo',\r\n          audioTimingInfo: {\r\n            start: clock$2.videoTsToSeconds(audioTimingInfo.start),\r\n            end: clock$2.videoTsToSeconds(audioTimingInfo.end)\r\n          }\r\n        });\r\n      });\r\n      transmuxer.on('videoTimingInfo', function (videoTimingInfo) {\r\n        self.postMessage({\r\n          action: 'videoTimingInfo',\r\n          videoTimingInfo: {\r\n            start: clock$2.videoTsToSeconds(videoTimingInfo.start),\r\n            end: clock$2.videoTsToSeconds(videoTimingInfo.end)\r\n          }\r\n        });\r\n      });\r\n      transmuxer.on('log', function (log) {\r\n        self.postMessage({\r\n          action: 'log',\r\n          log\r\n        });\r\n      });\r\n    };\r\n    /**\r\n     * All incoming messages route through this hash. If no function exists\r\n     * to handle an incoming message, then we ignore the message.\r\n     *\r\n     * @class MessageHandlers\r\n     * @param {Object} options the options to initialize with\r\n     */\r\n\r\n    class MessageHandlers {\r\n      constructor(self, options) {\r\n        this.options = options || {};\r\n        this.self = self;\r\n        this.init();\r\n      }\r\n      /**\r\n       * initialize our web worker and wire all the events.\r\n       */\r\n\r\n      init() {\r\n        if (this.transmuxer) {\r\n          this.transmuxer.dispose();\r\n        }\r\n        this.transmuxer = new transmuxer.Transmuxer(this.options);\r\n        wireTransmuxerEvents(this.self, this.transmuxer);\r\n      }\r\n      pushMp4Captions(data) {\r\n        if (!this.captionParser) {\r\n          this.captionParser = new captionParser();\r\n          this.captionParser.init();\r\n        }\r\n        const segment = new Uint8Array(data.data, data.byteOffset, data.byteLength);\r\n        const parsed = this.captionParser.parse(segment, data.trackIds, data.timescales);\r\n        this.self.postMessage({\r\n          action: 'mp4Captions',\r\n          captions: parsed && parsed.captions || [],\r\n          logs: parsed && parsed.logs || [],\r\n          data: segment.buffer\r\n        }, [segment.buffer]);\r\n      }\r\n      /**\r\n       * Initializes the WebVttParser and passes the init segment.\r\n       *\r\n       * @param {Uint8Array} data mp4 boxed WebVTT init segment data\r\n       */\r\n\r\n      initMp4WebVttParser(data) {\r\n        if (!this.webVttParser) {\r\n          this.webVttParser = new webvttParser();\r\n        }\r\n        const segment = new Uint8Array(data.data, data.byteOffset, data.byteLength); // Set the timescale for the parser.\r\n        // This can be called repeatedly in order to set and re-set the timescale.\r\n\r\n        this.webVttParser.init(segment);\r\n      }\r\n      /**\r\n       * Parse an mp4 encapsulated WebVTT segment and return an array of cues.\r\n       *\r\n       * @param {Uint8Array} data a text/webvtt segment\r\n       * @return {Object[]} an array of parsed cue objects\r\n       */\r\n\r\n      getMp4WebVttText(data) {\r\n        if (!this.webVttParser) {\r\n          // timescale might not be set yet if the parser is created before an init segment is passed.\r\n          // default timescale is 90k.\r\n          this.webVttParser = new webvttParser();\r\n        }\r\n        const segment = new Uint8Array(data.data, data.byteOffset, data.byteLength);\r\n        const parsed = this.webVttParser.parseSegment(segment);\r\n        this.self.postMessage({\r\n          action: 'getMp4WebVttText',\r\n          mp4VttCues: parsed || [],\r\n          data: segment.buffer\r\n        }, [segment.buffer]);\r\n      }\r\n      probeMp4StartTime({\r\n        timescales,\r\n        data\r\n      }) {\r\n        const startTime = probe$2.startTime(timescales, data);\r\n        this.self.postMessage({\r\n          action: 'probeMp4StartTime',\r\n          startTime,\r\n          data\r\n        }, [data.buffer]);\r\n      }\r\n      probeMp4Tracks({\r\n        data\r\n      }) {\r\n        const tracks = probe$2.tracks(data);\r\n        this.self.postMessage({\r\n          action: 'probeMp4Tracks',\r\n          tracks,\r\n          data\r\n        }, [data.buffer]);\r\n      }\r\n      /**\r\n       * Probes an mp4 segment for EMSG boxes containing ID3 data.\r\n       * https://aomediacodec.github.io/id3-emsg/\r\n       *\r\n       * @param {Uint8Array} data segment data\r\n       * @param {number} offset segment start time\r\n       * @return {Object[]} an array of ID3 frames\r\n       */\r\n\r\n      probeEmsgID3({\r\n        data,\r\n        offset\r\n      }) {\r\n        const id3Frames = probe$2.getEmsgID3(data, offset);\r\n        this.self.postMessage({\r\n          action: 'probeEmsgID3',\r\n          id3Frames,\r\n          emsgData: data\r\n        }, [data.buffer]);\r\n      }\r\n      /**\r\n       * Probe an mpeg2-ts segment to determine the start time of the segment in it's\r\n       * internal \"media time,\" as well as whether it contains video and/or audio.\r\n       *\r\n       * @private\r\n       * @param {Uint8Array} bytes - segment bytes\r\n       * @param {number} baseStartTime\r\n       *        Relative reference timestamp used when adjusting frame timestamps for rollover.\r\n       *        This value should be in seconds, as it's converted to a 90khz clock within the\r\n       *        function body.\r\n       * @return {Object} The start time of the current segment in \"media time\" as well as\r\n       *                  whether it contains video and/or audio\r\n       */\r\n\r\n      probeTs({\r\n        data,\r\n        baseStartTime\r\n      }) {\r\n        const tsStartTime = typeof baseStartTime === 'number' && !isNaN(baseStartTime) ? baseStartTime * clock$2.ONE_SECOND_IN_TS : void 0;\r\n        const timeInfo = tsInspector.inspect(data, tsStartTime);\r\n        let result = null;\r\n        if (timeInfo) {\r\n          result = {\r\n            // each type's time info comes back as an array of 2 times, start and end\r\n            hasVideo: timeInfo.video && timeInfo.video.length === 2 || false,\r\n            hasAudio: timeInfo.audio && timeInfo.audio.length === 2 || false\r\n          };\r\n          if (result.hasVideo) {\r\n            result.videoStart = timeInfo.video[0].ptsTime;\r\n          }\r\n          if (result.hasAudio) {\r\n            result.audioStart = timeInfo.audio[0].ptsTime;\r\n          }\r\n        }\r\n        this.self.postMessage({\r\n          action: 'probeTs',\r\n          result,\r\n          data\r\n        }, [data.buffer]);\r\n      }\r\n      clearAllMp4Captions() {\r\n        if (this.captionParser) {\r\n          this.captionParser.clearAllCaptions();\r\n        }\r\n      }\r\n      clearParsedMp4Captions() {\r\n        if (this.captionParser) {\r\n          this.captionParser.clearParsedCaptions();\r\n        }\r\n      }\r\n      /**\r\n       * Adds data (a ts segment) to the start of the transmuxer pipeline for\r\n       * processing.\r\n       *\r\n       * @param {ArrayBuffer} data data to push into the muxer\r\n       */\r\n\r\n      push(data) {\r\n        // Cast array buffer to correct type for transmuxer\r\n        const segment = new Uint8Array(data.data, data.byteOffset, data.byteLength);\r\n        this.transmuxer.push(segment);\r\n      }\r\n      /**\r\n       * Recreate the transmuxer so that the next segment added via `push`\r\n       * start with a fresh transmuxer.\r\n       */\r\n\r\n      reset() {\r\n        this.transmuxer.reset();\r\n      }\r\n      /**\r\n       * Set the value that will be used as the `baseMediaDecodeTime` time for the\r\n       * next segment pushed in. Subsequent segments will have their `baseMediaDecodeTime`\r\n       * set relative to the first based on the PTS values.\r\n       *\r\n       * @param {Object} data used to set the timestamp offset in the muxer\r\n       */\r\n\r\n      setTimestampOffset(data) {\r\n        const timestampOffset = data.timestampOffset || 0;\r\n        this.transmuxer.setBaseMediaDecodeTime(Math.round(clock$2.secondsToVideoTs(timestampOffset)));\r\n      }\r\n      setAudioAppendStart(data) {\r\n        this.transmuxer.setAudioAppendStart(Math.ceil(clock$2.secondsToVideoTs(data.appendStart)));\r\n      }\r\n      setRemux(data) {\r\n        this.transmuxer.setRemux(data.remux);\r\n      }\r\n      /**\r\n       * Forces the pipeline to finish processing the last segment and emit it's\r\n       * results.\r\n       *\r\n       * @param {Object} data event data, not really used\r\n       */\r\n\r\n      flush(data) {\r\n        this.transmuxer.flush(); // transmuxed done action is fired after both audio/video pipelines are flushed\r\n\r\n        self.postMessage({\r\n          action: 'done',\r\n          type: 'transmuxed'\r\n        });\r\n      }\r\n      endTimeline() {\r\n        this.transmuxer.endTimeline(); // transmuxed endedtimeline action is fired after both audio/video pipelines end their\r\n        // timelines\r\n\r\n        self.postMessage({\r\n          action: 'endedtimeline',\r\n          type: 'transmuxed'\r\n        });\r\n      }\r\n      alignGopsWith(data) {\r\n        this.transmuxer.alignGopsWith(data.gopsToAlignWith.slice());\r\n      }\r\n    }\r\n    /**\r\n     * Our web worker interface so that things can talk to mux.js\r\n     * that will be running in a web worker. the scope is passed to this by\r\n     * webworkify.\r\n     *\r\n     * @param {Object} self the scope for the web worker\r\n     */\r\n\r\n    self.onmessage = function (event) {\r\n      if (event.data.action === 'init' && event.data.options) {\r\n        this.messageHandlers = new MessageHandlers(self, event.data.options);\r\n        return;\r\n      }\r\n      if (!this.messageHandlers) {\r\n        this.messageHandlers = new MessageHandlers(self);\r\n      }\r\n      if (event.data && event.data.action && event.data.action !== 'init') {\r\n        if (this.messageHandlers[event.data.action]) {\r\n          this.messageHandlers[event.data.action](event.data);\r\n        }\r\n      }\r\n    };\r\n  }));\r\n  var TransmuxWorker = factory(workerCode$1);\r\n  /* rollup-plugin-worker-factory end for worker!/home/runner/work/http-streaming/http-streaming/src/transmuxer-worker.js */\r\n\r\n  const handleData_ = (event, transmuxedData, callback) => {\r\n    const {\r\n      type,\r\n      initSegment,\r\n      captions,\r\n      captionStreams,\r\n      metadata,\r\n      videoFrameDtsTime,\r\n      videoFramePtsTime\r\n    } = event.data.segment;\r\n    transmuxedData.buffer.push({\r\n      captions,\r\n      captionStreams,\r\n      metadata\r\n    });\r\n    const boxes = event.data.segment.boxes || {\r\n      data: event.data.segment.data\r\n    };\r\n    const result = {\r\n      type,\r\n      // cast ArrayBuffer to TypedArray\r\n      data: new Uint8Array(boxes.data, boxes.data.byteOffset, boxes.data.byteLength),\r\n      initSegment: new Uint8Array(initSegment.data, initSegment.byteOffset, initSegment.byteLength)\r\n    };\r\n    if (typeof videoFrameDtsTime !== 'undefined') {\r\n      result.videoFrameDtsTime = videoFrameDtsTime;\r\n    }\r\n    if (typeof videoFramePtsTime !== 'undefined') {\r\n      result.videoFramePtsTime = videoFramePtsTime;\r\n    }\r\n    callback(result);\r\n  };\r\n  const handleDone_ = ({\r\n    transmuxedData,\r\n    callback\r\n  }) => {\r\n    // Previously we only returned data on data events,\r\n    // not on done events. Clear out the buffer to keep that consistent.\r\n    transmuxedData.buffer = []; // all buffers should have been flushed from the muxer, so start processing anything we\r\n    // have received\r\n\r\n    callback(transmuxedData);\r\n  };\r\n  const handleGopInfo_ = (event, transmuxedData) => {\r\n    transmuxedData.gopInfo = event.data.gopInfo;\r\n  };\r\n  const processTransmux = options => {\r\n    const {\r\n      transmuxer,\r\n      bytes,\r\n      audioAppendStart,\r\n      gopsToAlignWith,\r\n      remux,\r\n      onData,\r\n      onTrackInfo,\r\n      onAudioTimingInfo,\r\n      onVideoTimingInfo,\r\n      onVideoSegmentTimingInfo,\r\n      onAudioSegmentTimingInfo,\r\n      onId3,\r\n      onCaptions,\r\n      onDone,\r\n      onEndedTimeline,\r\n      onTransmuxerLog,\r\n      isEndOfTimeline,\r\n      segment,\r\n      triggerSegmentEventFn\r\n    } = options;\r\n    const transmuxedData = {\r\n      buffer: []\r\n    };\r\n    let waitForEndedTimelineEvent = isEndOfTimeline;\r\n    const handleMessage = event => {\r\n      if (transmuxer.currentTransmux !== options) {\r\n        // disposed\r\n        return;\r\n      }\r\n      if (event.data.action === 'data') {\r\n        handleData_(event, transmuxedData, onData);\r\n      }\r\n      if (event.data.action === 'trackinfo') {\r\n        onTrackInfo(event.data.trackInfo);\r\n      }\r\n      if (event.data.action === 'gopInfo') {\r\n        handleGopInfo_(event, transmuxedData);\r\n      }\r\n      if (event.data.action === 'audioTimingInfo') {\r\n        onAudioTimingInfo(event.data.audioTimingInfo);\r\n      }\r\n      if (event.data.action === 'videoTimingInfo') {\r\n        onVideoTimingInfo(event.data.videoTimingInfo);\r\n      }\r\n      if (event.data.action === 'videoSegmentTimingInfo') {\r\n        onVideoSegmentTimingInfo(event.data.videoSegmentTimingInfo);\r\n      }\r\n      if (event.data.action === 'audioSegmentTimingInfo') {\r\n        onAudioSegmentTimingInfo(event.data.audioSegmentTimingInfo);\r\n      }\r\n      if (event.data.action === 'id3Frame') {\r\n        onId3([event.data.id3Frame], event.data.id3Frame.dispatchType);\r\n      }\r\n      if (event.data.action === 'caption') {\r\n        onCaptions(event.data.caption);\r\n      }\r\n      if (event.data.action === 'endedtimeline') {\r\n        waitForEndedTimelineEvent = false;\r\n        onEndedTimeline();\r\n      }\r\n      if (event.data.action === 'log') {\r\n        onTransmuxerLog(event.data.log);\r\n      } // wait for the transmuxed event since we may have audio and video\r\n\r\n      if (event.data.type !== 'transmuxed') {\r\n        return;\r\n      } // If the \"endedtimeline\" event has not yet fired, and this segment represents the end\r\n      // of a timeline, that means there may still be data events before the segment\r\n      // processing can be considerred complete. In that case, the final event should be\r\n      // an \"endedtimeline\" event with the type \"transmuxed.\"\r\n\r\n      if (waitForEndedTimelineEvent) {\r\n        return;\r\n      }\r\n      transmuxer.onmessage = null;\r\n      handleDone_({\r\n        transmuxedData,\r\n        callback: onDone\r\n      });\r\n      /* eslint-disable no-use-before-define */\r\n\r\n      dequeue(transmuxer);\r\n      /* eslint-enable */\r\n    };\r\n    const handleError = () => {\r\n      const error = {\r\n        message: 'Received an error message from the transmuxer worker',\r\n        metadata: {\r\n          errorType: videojs.Error.StreamingFailedToTransmuxSegment,\r\n          segmentInfo: segmentInfoPayload({\r\n            segment\r\n          })\r\n        }\r\n      };\r\n      onDone(null, error);\r\n    };\r\n    transmuxer.onmessage = handleMessage;\r\n    transmuxer.onerror = handleError;\r\n    if (audioAppendStart) {\r\n      transmuxer.postMessage({\r\n        action: 'setAudioAppendStart',\r\n        appendStart: audioAppendStart\r\n      });\r\n    } // allow empty arrays to be passed to clear out GOPs\r\n\r\n    if (Array.isArray(gopsToAlignWith)) {\r\n      transmuxer.postMessage({\r\n        action: 'alignGopsWith',\r\n        gopsToAlignWith\r\n      });\r\n    }\r\n    if (typeof remux !== 'undefined') {\r\n      transmuxer.postMessage({\r\n        action: 'setRemux',\r\n        remux\r\n      });\r\n    }\r\n    if (bytes.byteLength) {\r\n      const buffer = bytes instanceof ArrayBuffer ? bytes : bytes.buffer;\r\n      const byteOffset = bytes instanceof ArrayBuffer ? 0 : bytes.byteOffset;\r\n      triggerSegmentEventFn({\r\n        type: 'segmenttransmuxingstart',\r\n        segment\r\n      });\r\n      transmuxer.postMessage({\r\n        action: 'push',\r\n        // Send the typed-array of data as an ArrayBuffer so that\r\n        // it can be sent as a \"Transferable\" and avoid the costly\r\n        // memory copy\r\n        data: buffer,\r\n        // To recreate the original typed-array, we need information\r\n        // about what portion of the ArrayBuffer it was a view into\r\n        byteOffset,\r\n        byteLength: bytes.byteLength\r\n      }, [buffer]);\r\n    }\r\n    if (isEndOfTimeline) {\r\n      transmuxer.postMessage({\r\n        action: 'endTimeline'\r\n      });\r\n    } // even if we didn't push any bytes, we have to make sure we flush in case we reached\r\n    // the end of the segment\r\n\r\n    transmuxer.postMessage({\r\n      action: 'flush'\r\n    });\r\n  };\r\n  const dequeue = transmuxer => {\r\n    transmuxer.currentTransmux = null;\r\n    if (transmuxer.transmuxQueue.length) {\r\n      transmuxer.currentTransmux = transmuxer.transmuxQueue.shift();\r\n      if (typeof transmuxer.currentTransmux === 'function') {\r\n        transmuxer.currentTransmux();\r\n      } else {\r\n        processTransmux(transmuxer.currentTransmux);\r\n      }\r\n    }\r\n  };\r\n  const processAction = (transmuxer, action) => {\r\n    transmuxer.postMessage({\r\n      action\r\n    });\r\n    dequeue(transmuxer);\r\n  };\r\n  const enqueueAction = (action, transmuxer) => {\r\n    if (!transmuxer.currentTransmux) {\r\n      transmuxer.currentTransmux = action;\r\n      processAction(transmuxer, action);\r\n      return;\r\n    }\r\n    transmuxer.transmuxQueue.push(processAction.bind(null, transmuxer, action));\r\n  };\r\n  const reset = transmuxer => {\r\n    enqueueAction('reset', transmuxer);\r\n  };\r\n  const endTimeline = transmuxer => {\r\n    enqueueAction('endTimeline', transmuxer);\r\n  };\r\n  const transmux = options => {\r\n    if (!options.transmuxer.currentTransmux) {\r\n      options.transmuxer.currentTransmux = options;\r\n      processTransmux(options);\r\n      return;\r\n    }\r\n    options.transmuxer.transmuxQueue.push(options);\r\n  };\r\n  const createTransmuxer = options => {\r\n    const transmuxer = new TransmuxWorker();\r\n    transmuxer.currentTransmux = null;\r\n    transmuxer.transmuxQueue = [];\r\n    const term = transmuxer.terminate;\r\n    transmuxer.terminate = () => {\r\n      transmuxer.currentTransmux = null;\r\n      transmuxer.transmuxQueue.length = 0;\r\n      return term.call(transmuxer);\r\n    };\r\n    transmuxer.postMessage({\r\n      action: 'init',\r\n      options\r\n    });\r\n    return transmuxer;\r\n  };\r\n  var segmentTransmuxer = {\r\n    reset,\r\n    endTimeline,\r\n    transmux,\r\n    createTransmuxer\r\n  };\r\n  const workerCallback = function (options) {\r\n    const transmuxer = options.transmuxer;\r\n    const endAction = options.endAction || options.action;\r\n    const callback = options.callback;\r\n    const message = _extends$1({}, options, {\r\n      endAction: null,\r\n      transmuxer: null,\r\n      callback: null\r\n    });\r\n    const listenForEndEvent = event => {\r\n      if (event.data.action !== endAction) {\r\n        return;\r\n      }\r\n      transmuxer.removeEventListener('message', listenForEndEvent); // transfer ownership of bytes back to us.\r\n\r\n      if (event.data.data) {\r\n        event.data.data = new Uint8Array(event.data.data, options.byteOffset || 0, options.byteLength || event.data.data.byteLength);\r\n        if (options.data) {\r\n          options.data = event.data.data;\r\n        }\r\n      }\r\n      callback(event.data);\r\n    };\r\n    transmuxer.addEventListener('message', listenForEndEvent);\r\n    if (options.data) {\r\n      const isArrayBuffer = options.data instanceof ArrayBuffer;\r\n      message.byteOffset = isArrayBuffer ? 0 : options.data.byteOffset;\r\n      message.byteLength = options.data.byteLength;\r\n      const transfers = [isArrayBuffer ? options.data : options.data.buffer];\r\n      transmuxer.postMessage(message, transfers);\r\n    } else {\r\n      transmuxer.postMessage(message);\r\n    }\r\n  };\r\n  const REQUEST_ERRORS = {\r\n    FAILURE: 2,\r\n    TIMEOUT: -101,\r\n    ABORTED: -102\r\n  };\r\n  const WEB_VTT_CODEC = 'wvtt';\r\n  /**\r\n   * Abort all requests\r\n   *\r\n   * @param {Object} activeXhrs - an object that tracks all XHR requests\r\n   */\r\n\r\n  const abortAll = activeXhrs => {\r\n    activeXhrs.forEach(xhr => {\r\n      xhr.abort();\r\n    });\r\n  };\r\n  /**\r\n   * Gather important bandwidth stats once a request has completed\r\n   *\r\n   * @param {Object} request - the XHR request from which to gather stats\r\n   */\r\n\r\n  const getRequestStats = request => {\r\n    return {\r\n      bandwidth: request.bandwidth,\r\n      bytesReceived: request.bytesReceived || 0,\r\n      roundTripTime: request.roundTripTime || 0\r\n    };\r\n  };\r\n  /**\r\n   * If possible gather bandwidth stats as a request is in\r\n   * progress\r\n   *\r\n   * @param {Event} progressEvent - an event object from an XHR's progress event\r\n   */\r\n\r\n  const getProgressStats = progressEvent => {\r\n    const request = progressEvent.target;\r\n    const roundTripTime = Date.now() - request.requestTime;\r\n    const stats = {\r\n      bandwidth: Infinity,\r\n      bytesReceived: 0,\r\n      roundTripTime: roundTripTime || 0\r\n    };\r\n    stats.bytesReceived = progressEvent.loaded; // This can result in Infinity if stats.roundTripTime is 0 but that is ok\r\n    // because we should only use bandwidth stats on progress to determine when\r\n    // abort a request early due to insufficient bandwidth\r\n\r\n    stats.bandwidth = Math.floor(stats.bytesReceived / stats.roundTripTime * 8 * 1000);\r\n    return stats;\r\n  };\r\n  /**\r\n   * Handle all error conditions in one place and return an object\r\n   * with all the information\r\n   *\r\n   * @param {Error|null} error - if non-null signals an error occured with the XHR\r\n   * @param {Object} request -  the XHR request that possibly generated the error\r\n   */\r\n\r\n  const handleErrors = (error, request) => {\r\n    const {\r\n      requestType\r\n    } = request;\r\n    const metadata = getStreamingNetworkErrorMetadata({\r\n      requestType,\r\n      request,\r\n      error\r\n    });\r\n    if (request.timedout) {\r\n      return {\r\n        status: request.status,\r\n        message: 'HLS request timed-out at URL: ' + request.uri,\r\n        code: REQUEST_ERRORS.TIMEOUT,\r\n        xhr: request,\r\n        metadata\r\n      };\r\n    }\r\n    if (request.aborted) {\r\n      return {\r\n        status: request.status,\r\n        message: 'HLS request aborted at URL: ' + request.uri,\r\n        code: REQUEST_ERRORS.ABORTED,\r\n        xhr: request,\r\n        metadata\r\n      };\r\n    }\r\n    if (error) {\r\n      return {\r\n        status: request.status,\r\n        message: 'HLS request errored at URL: ' + request.uri,\r\n        code: REQUEST_ERRORS.FAILURE,\r\n        xhr: request,\r\n        metadata\r\n      };\r\n    }\r\n    if (request.responseType === 'arraybuffer' && request.response.byteLength === 0) {\r\n      return {\r\n        status: request.status,\r\n        message: 'Empty HLS response at URL: ' + request.uri,\r\n        code: REQUEST_ERRORS.FAILURE,\r\n        xhr: request,\r\n        metadata\r\n      };\r\n    }\r\n    return null;\r\n  };\r\n  /**\r\n   * Handle responses for key data and convert the key data to the correct format\r\n   * for the decryption step later\r\n   *\r\n   * @param {Object} segment - a simplified copy of the segmentInfo object\r\n   *                           from SegmentLoader\r\n   * @param {Array} objects - objects to add the key bytes to.\r\n   * @param {Function} finishProcessingFn - a callback to execute to continue processing\r\n   *                                        this request\r\n   */\r\n\r\n  const handleKeyResponse = (segment, objects, finishProcessingFn, triggerSegmentEventFn) => (error, request) => {\r\n    const response = request.response;\r\n    const errorObj = handleErrors(error, request);\r\n    if (errorObj) {\r\n      return finishProcessingFn(errorObj, segment);\r\n    }\r\n    if (response.byteLength !== 16) {\r\n      return finishProcessingFn({\r\n        status: request.status,\r\n        message: 'Invalid HLS key at URL: ' + request.uri,\r\n        code: REQUEST_ERRORS.FAILURE,\r\n        xhr: request\r\n      }, segment);\r\n    }\r\n    const view = new DataView(response);\r\n    const bytes = new Uint32Array([view.getUint32(0), view.getUint32(4), view.getUint32(8), view.getUint32(12)]);\r\n    for (let i = 0; i < objects.length; i++) {\r\n      objects[i].bytes = bytes;\r\n    }\r\n    const keyInfo = {\r\n      uri: request.uri\r\n    };\r\n    triggerSegmentEventFn({\r\n      type: 'segmentkeyloadcomplete',\r\n      segment,\r\n      keyInfo\r\n    });\r\n    return finishProcessingFn(null, segment);\r\n  };\r\n  /**\r\n   * Processes an mp4 init segment depending on the codec through the transmuxer.\r\n   *\r\n   * @param {Object} segment init segment to process\r\n   * @param {string} codec the codec of the text segments\r\n   */\r\n\r\n  const initMp4Text = (segment, codec) => {\r\n    if (codec === WEB_VTT_CODEC) {\r\n      segment.transmuxer.postMessage({\r\n        action: 'initMp4WebVttParser',\r\n        data: segment.map.bytes\r\n      });\r\n    }\r\n  };\r\n  /**\r\n   * Parses an mp4 text segment with the transmuxer and calls the doneFn from\r\n   * the segment loader.\r\n   *\r\n   * @param {Object} segment the text segment to parse\r\n   * @param {string} codec the codec of the text segment\r\n   * @param {Function} doneFn the doneFn passed from the segment loader\r\n   */\r\n\r\n  const parseMp4TextSegment = (segment, codec, doneFn) => {\r\n    if (codec === WEB_VTT_CODEC) {\r\n      workerCallback({\r\n        action: 'getMp4WebVttText',\r\n        data: segment.bytes,\r\n        transmuxer: segment.transmuxer,\r\n        callback: ({\r\n          data,\r\n          mp4VttCues\r\n        }) => {\r\n          segment.bytes = data;\r\n          doneFn(null, segment, {\r\n            mp4VttCues\r\n          });\r\n        }\r\n      });\r\n    }\r\n  };\r\n  const parseInitSegment = (segment, callback) => {\r\n    const type = detectContainerForBytes(segment.map.bytes); // TODO: We should also handle ts init segments here, but we\r\n    // only know how to parse mp4 init segments at the moment\r\n\r\n    if (type !== 'mp4') {\r\n      const uri = segment.map.resolvedUri || segment.map.uri;\r\n      const mediaType = type || 'unknown';\r\n      return callback({\r\n        internal: true,\r\n        message: `Found unsupported ${mediaType} container for initialization segment at URL: ${uri}`,\r\n        code: REQUEST_ERRORS.FAILURE,\r\n        metadata: {\r\n          mediaType\r\n        }\r\n      });\r\n    }\r\n    workerCallback({\r\n      action: 'probeMp4Tracks',\r\n      data: segment.map.bytes,\r\n      transmuxer: segment.transmuxer,\r\n      callback: ({\r\n        tracks,\r\n        data\r\n      }) => {\r\n        // transfer bytes back to us\r\n        segment.map.bytes = data;\r\n        tracks.forEach(function (track) {\r\n          segment.map.tracks = segment.map.tracks || {}; // only support one track of each type for now\r\n\r\n          if (segment.map.tracks[track.type]) {\r\n            return;\r\n          }\r\n          segment.map.tracks[track.type] = track;\r\n          if (typeof track.id === 'number' && track.timescale) {\r\n            segment.map.timescales = segment.map.timescales || {};\r\n            segment.map.timescales[track.id] = track.timescale;\r\n          }\r\n          if (track.type === 'text') {\r\n            initMp4Text(segment, track.codec);\r\n          }\r\n        });\r\n        return callback(null);\r\n      }\r\n    });\r\n  };\r\n  /**\r\n   * Handle init-segment responses\r\n   *\r\n   * @param {Object} segment - a simplified copy of the segmentInfo object\r\n   *                           from SegmentLoader\r\n   * @param {Function} finishProcessingFn - a callback to execute to continue processing\r\n   *                                        this request\r\n   */\r\n\r\n  const handleInitSegmentResponse = ({\r\n    segment,\r\n    finishProcessingFn,\r\n    triggerSegmentEventFn\r\n  }) => (error, request) => {\r\n    const errorObj = handleErrors(error, request);\r\n    if (errorObj) {\r\n      return finishProcessingFn(errorObj, segment);\r\n    }\r\n    const bytes = new Uint8Array(request.response);\r\n    triggerSegmentEventFn({\r\n      type: 'segmentloaded',\r\n      segment\r\n    }); // init segment is encypted, we will have to wait\r\n    // until the key request is done to decrypt.\r\n\r\n    if (segment.map.key) {\r\n      segment.map.encryptedBytes = bytes;\r\n      return finishProcessingFn(null, segment);\r\n    }\r\n    segment.map.bytes = bytes;\r\n    parseInitSegment(segment, function (parseError) {\r\n      if (parseError) {\r\n        parseError.xhr = request;\r\n        parseError.status = request.status;\r\n        return finishProcessingFn(parseError, segment);\r\n      }\r\n      finishProcessingFn(null, segment);\r\n    });\r\n  };\r\n  /**\r\n   * Response handler for segment-requests being sure to set the correct\r\n   * property depending on whether the segment is encryped or not\r\n   * Also records and keeps track of stats that are used for ABR purposes\r\n   *\r\n   * @param {Object} segment - a simplified copy of the segmentInfo object\r\n   *                           from SegmentLoader\r\n   * @param {Function} finishProcessingFn - a callback to execute to continue processing\r\n   *                                        this request\r\n   */\r\n\r\n  const handleSegmentResponse = ({\r\n    segment,\r\n    finishProcessingFn,\r\n    responseType,\r\n    triggerSegmentEventFn\r\n  }) => (error, request) => {\r\n    const errorObj = handleErrors(error, request);\r\n    if (errorObj) {\r\n      return finishProcessingFn(errorObj, segment);\r\n    }\r\n    triggerSegmentEventFn({\r\n      type: 'segmentloaded',\r\n      segment\r\n    });\r\n    const newBytes =\r\n    // although responseText \"should\" exist, this guard serves to prevent an error being\r\n    // thrown for two primary cases:\r\n    // 1. the mime type override stops working, or is not implemented for a specific\r\n    //    browser\r\n    // 2. when using mock XHR libraries like sinon that do not allow the override behavior\r\n    responseType === 'arraybuffer' || !request.responseText ? request.response : stringToArrayBuffer(request.responseText.substring(segment.lastReachedChar || 0));\r\n    segment.stats = getRequestStats(request);\r\n    if (segment.key) {\r\n      segment.encryptedBytes = new Uint8Array(newBytes);\r\n    } else {\r\n      segment.bytes = new Uint8Array(newBytes);\r\n    }\r\n    return finishProcessingFn(null, segment);\r\n  };\r\n  const transmuxAndNotify = ({\r\n    segment,\r\n    bytes,\r\n    trackInfoFn,\r\n    timingInfoFn,\r\n    videoSegmentTimingInfoFn,\r\n    audioSegmentTimingInfoFn,\r\n    id3Fn,\r\n    captionsFn,\r\n    isEndOfTimeline,\r\n    endedTimelineFn,\r\n    dataFn,\r\n    doneFn,\r\n    onTransmuxerLog,\r\n    triggerSegmentEventFn\r\n  }) => {\r\n    const fmp4Tracks = segment.map && segment.map.tracks || {};\r\n    const isMuxed = Boolean(fmp4Tracks.audio && fmp4Tracks.video); // Keep references to each function so we can null them out after we're done with them.\r\n    // One reason for this is that in the case of full segments, we want to trust start\r\n    // times from the probe, rather than the transmuxer.\r\n\r\n    let audioStartFn = timingInfoFn.bind(null, segment, 'audio', 'start');\r\n    const audioEndFn = timingInfoFn.bind(null, segment, 'audio', 'end');\r\n    let videoStartFn = timingInfoFn.bind(null, segment, 'video', 'start');\r\n    const videoEndFn = timingInfoFn.bind(null, segment, 'video', 'end');\r\n    const finish = () => transmux({\r\n      bytes,\r\n      transmuxer: segment.transmuxer,\r\n      audioAppendStart: segment.audioAppendStart,\r\n      gopsToAlignWith: segment.gopsToAlignWith,\r\n      remux: isMuxed,\r\n      onData: result => {\r\n        result.type = result.type === 'combined' ? 'video' : result.type;\r\n        dataFn(segment, result);\r\n      },\r\n      onTrackInfo: trackInfo => {\r\n        if (trackInfoFn) {\r\n          if (isMuxed) {\r\n            trackInfo.isMuxed = true;\r\n          }\r\n          trackInfoFn(segment, trackInfo);\r\n        }\r\n      },\r\n      onAudioTimingInfo: audioTimingInfo => {\r\n        // we only want the first start value we encounter\r\n        if (audioStartFn && typeof audioTimingInfo.start !== 'undefined') {\r\n          audioStartFn(audioTimingInfo.start);\r\n          audioStartFn = null;\r\n        } // we want to continually update the end time\r\n\r\n        if (audioEndFn && typeof audioTimingInfo.end !== 'undefined') {\r\n          audioEndFn(audioTimingInfo.end);\r\n        }\r\n      },\r\n      onVideoTimingInfo: videoTimingInfo => {\r\n        // we only want the first start value we encounter\r\n        if (videoStartFn && typeof videoTimingInfo.start !== 'undefined') {\r\n          videoStartFn(videoTimingInfo.start);\r\n          videoStartFn = null;\r\n        } // we want to continually update the end time\r\n\r\n        if (videoEndFn && typeof videoTimingInfo.end !== 'undefined') {\r\n          videoEndFn(videoTimingInfo.end);\r\n        }\r\n      },\r\n      onVideoSegmentTimingInfo: videoSegmentTimingInfo => {\r\n        const timingInfo = {\r\n          pts: {\r\n            start: videoSegmentTimingInfo.start.presentation,\r\n            end: videoSegmentTimingInfo.end.presentation\r\n          },\r\n          dts: {\r\n            start: videoSegmentTimingInfo.start.decode,\r\n            end: videoSegmentTimingInfo.end.decode\r\n          }\r\n        };\r\n        triggerSegmentEventFn({\r\n          type: 'segmenttransmuxingtiminginfoavailable',\r\n          segment,\r\n          timingInfo\r\n        });\r\n        videoSegmentTimingInfoFn(videoSegmentTimingInfo);\r\n      },\r\n      onAudioSegmentTimingInfo: audioSegmentTimingInfo => {\r\n        const timingInfo = {\r\n          pts: {\r\n            start: audioSegmentTimingInfo.start.pts,\r\n            end: audioSegmentTimingInfo.end.pts\r\n          },\r\n          dts: {\r\n            start: audioSegmentTimingInfo.start.dts,\r\n            end: audioSegmentTimingInfo.end.dts\r\n          }\r\n        };\r\n        triggerSegmentEventFn({\r\n          type: 'segmenttransmuxingtiminginfoavailable',\r\n          segment,\r\n          timingInfo\r\n        });\r\n        audioSegmentTimingInfoFn(audioSegmentTimingInfo);\r\n      },\r\n      onId3: (id3Frames, dispatchType) => {\r\n        id3Fn(segment, id3Frames, dispatchType);\r\n      },\r\n      onCaptions: captions => {\r\n        captionsFn(segment, [captions]);\r\n      },\r\n      isEndOfTimeline,\r\n      onEndedTimeline: () => {\r\n        endedTimelineFn();\r\n      },\r\n      onTransmuxerLog,\r\n      onDone: (result, error) => {\r\n        if (!doneFn) {\r\n          return;\r\n        }\r\n        result.type = result.type === 'combined' ? 'video' : result.type;\r\n        triggerSegmentEventFn({\r\n          type: 'segmenttransmuxingcomplete',\r\n          segment\r\n        });\r\n        doneFn(error, segment, result);\r\n      },\r\n      segment,\r\n      triggerSegmentEventFn\r\n    }); // In the transmuxer, we don't yet have the ability to extract a \"proper\" start time.\r\n    // Meaning cached frame data may corrupt our notion of where this segment\r\n    // really starts. To get around this, probe for the info needed.\r\n\r\n    workerCallback({\r\n      action: 'probeTs',\r\n      transmuxer: segment.transmuxer,\r\n      data: bytes,\r\n      baseStartTime: segment.baseStartTime,\r\n      callback: data => {\r\n        segment.bytes = bytes = data.data;\r\n        const probeResult = data.result;\r\n        if (probeResult) {\r\n          trackInfoFn(segment, {\r\n            hasAudio: probeResult.hasAudio,\r\n            hasVideo: probeResult.hasVideo,\r\n            isMuxed\r\n          });\r\n          trackInfoFn = null;\r\n        }\r\n        finish();\r\n      }\r\n    });\r\n  };\r\n  const handleSegmentBytes = ({\r\n    segment,\r\n    bytes,\r\n    trackInfoFn,\r\n    timingInfoFn,\r\n    videoSegmentTimingInfoFn,\r\n    audioSegmentTimingInfoFn,\r\n    id3Fn,\r\n    captionsFn,\r\n    isEndOfTimeline,\r\n    endedTimelineFn,\r\n    dataFn,\r\n    doneFn,\r\n    onTransmuxerLog,\r\n    triggerSegmentEventFn\r\n  }) => {\r\n    let bytesAsUint8Array = new Uint8Array(bytes); // TODO:\r\n    // We should have a handler that fetches the number of bytes required\r\n    // to check if something is fmp4. This will allow us to save bandwidth\r\n    // because we can only exclude a playlist and abort requests\r\n    // by codec after trackinfo triggers.\r\n\r\n    if (isLikelyFmp4MediaSegment(bytesAsUint8Array)) {\r\n      segment.isFmp4 = true;\r\n      const {\r\n        tracks\r\n      } = segment.map;\r\n      const isMp4TextSegment = tracks.text && (!tracks.audio || !tracks.video);\r\n      if (isMp4TextSegment) {\r\n        dataFn(segment, {\r\n          data: bytesAsUint8Array,\r\n          type: 'text'\r\n        });\r\n        parseMp4TextSegment(segment, tracks.text.codec, doneFn);\r\n        return;\r\n      }\r\n      const trackInfo = {\r\n        isFmp4: true,\r\n        hasVideo: !!tracks.video,\r\n        hasAudio: !!tracks.audio\r\n      }; // if we have a audio track, with a codec that is not set to\r\n      // encrypted audio\r\n\r\n      if (tracks.audio && tracks.audio.codec && tracks.audio.codec !== 'enca') {\r\n        trackInfo.audioCodec = tracks.audio.codec;\r\n      } // if we have a video track, with a codec that is not set to\r\n      // encrypted video\r\n\r\n      if (tracks.video && tracks.video.codec && tracks.video.codec !== 'encv') {\r\n        trackInfo.videoCodec = tracks.video.codec;\r\n      }\r\n      if (tracks.video && tracks.audio) {\r\n        trackInfo.isMuxed = true;\r\n      } // since we don't support appending fmp4 data on progress, we know we have the full\r\n      // segment here\r\n\r\n      trackInfoFn(segment, trackInfo); // The probe doesn't provide the segment end time, so only callback with the start\r\n      // time. The end time can be roughly calculated by the receiver using the duration.\r\n      //\r\n      // Note that the start time returned by the probe reflects the baseMediaDecodeTime, as\r\n      // that is the true start of the segment (where the playback engine should begin\r\n      // decoding).\r\n\r\n      const finishLoading = (captions, id3Frames) => {\r\n        // if the track still has audio at this point it is only possible\r\n        // for it to be audio only. See `tracks.video && tracks.audio` if statement\r\n        // above.\r\n        // we make sure to use segment.bytes here as that\r\n        dataFn(segment, {\r\n          data: bytesAsUint8Array,\r\n          type: trackInfo.hasAudio && !trackInfo.isMuxed ? 'audio' : 'video'\r\n        });\r\n        if (id3Frames && id3Frames.length) {\r\n          id3Fn(segment, id3Frames);\r\n        }\r\n        if (captions && captions.length) {\r\n          captionsFn(segment, captions);\r\n        }\r\n        doneFn(null, segment, {});\r\n      };\r\n      workerCallback({\r\n        action: 'probeMp4StartTime',\r\n        timescales: segment.map.timescales,\r\n        data: bytesAsUint8Array,\r\n        transmuxer: segment.transmuxer,\r\n        callback: ({\r\n          data,\r\n          startTime\r\n        }) => {\r\n          // transfer bytes back to us\r\n          bytes = data.buffer;\r\n          segment.bytes = bytesAsUint8Array = data;\r\n          if (trackInfo.hasAudio && !trackInfo.isMuxed) {\r\n            timingInfoFn(segment, 'audio', 'start', startTime);\r\n          }\r\n          if (trackInfo.hasVideo) {\r\n            timingInfoFn(segment, 'video', 'start', startTime);\r\n          }\r\n          workerCallback({\r\n            action: 'probeEmsgID3',\r\n            data: bytesAsUint8Array,\r\n            transmuxer: segment.transmuxer,\r\n            offset: startTime,\r\n            callback: ({\r\n              emsgData,\r\n              id3Frames\r\n            }) => {\r\n              // transfer bytes back to us\r\n              bytes = emsgData.buffer;\r\n              segment.bytes = bytesAsUint8Array = emsgData; // Run through the CaptionParser in case there are captions.\r\n              // Initialize CaptionParser if it hasn't been yet\r\n\r\n              if (!tracks.video || !emsgData.byteLength || !segment.transmuxer) {\r\n                finishLoading(undefined, id3Frames);\r\n                return;\r\n              }\r\n              workerCallback({\r\n                action: 'pushMp4Captions',\r\n                endAction: 'mp4Captions',\r\n                transmuxer: segment.transmuxer,\r\n                data: bytesAsUint8Array,\r\n                timescales: segment.map.timescales,\r\n                trackIds: [tracks.video.id],\r\n                callback: message => {\r\n                  // transfer bytes back to us\r\n                  bytes = message.data.buffer;\r\n                  segment.bytes = bytesAsUint8Array = message.data;\r\n                  message.logs.forEach(function (log) {\r\n                    onTransmuxerLog(merge(log, {\r\n                      stream: 'mp4CaptionParser'\r\n                    }));\r\n                  });\r\n                  finishLoading(message.captions, id3Frames);\r\n                }\r\n              });\r\n            }\r\n          });\r\n        }\r\n      });\r\n      return;\r\n    } // VTT or other segments that don't need processing\r\n\r\n    if (!segment.transmuxer) {\r\n      doneFn(null, segment, {});\r\n      return;\r\n    }\r\n    if (typeof segment.container === 'undefined') {\r\n      segment.container = detectContainerForBytes(bytesAsUint8Array);\r\n    }\r\n    if (segment.container !== 'ts' && segment.container !== 'aac') {\r\n      trackInfoFn(segment, {\r\n        hasAudio: false,\r\n        hasVideo: false\r\n      });\r\n      doneFn(null, segment, {});\r\n      return;\r\n    } // ts or aac\r\n\r\n    transmuxAndNotify({\r\n      segment,\r\n      bytes,\r\n      trackInfoFn,\r\n      timingInfoFn,\r\n      videoSegmentTimingInfoFn,\r\n      audioSegmentTimingInfoFn,\r\n      id3Fn,\r\n      captionsFn,\r\n      isEndOfTimeline,\r\n      endedTimelineFn,\r\n      dataFn,\r\n      doneFn,\r\n      onTransmuxerLog,\r\n      triggerSegmentEventFn\r\n    });\r\n  };\r\n  const decrypt = function ({\r\n    id,\r\n    key,\r\n    encryptedBytes,\r\n    decryptionWorker,\r\n    segment,\r\n    doneFn\r\n  }, callback) {\r\n    const decryptionHandler = event => {\r\n      if (event.data.source === id) {\r\n        decryptionWorker.removeEventListener('message', decryptionHandler);\r\n        const decrypted = event.data.decrypted;\r\n        callback(new Uint8Array(decrypted.bytes, decrypted.byteOffset, decrypted.byteLength));\r\n      }\r\n    };\r\n    decryptionWorker.onerror = () => {\r\n      const message = 'An error occurred in the decryption worker';\r\n      const segmentInfo = segmentInfoPayload({\r\n        segment\r\n      });\r\n      const decryptError = {\r\n        message,\r\n        metadata: {\r\n          error: new Error(message),\r\n          errorType: videojs.Error.StreamingFailedToDecryptSegment,\r\n          segmentInfo,\r\n          keyInfo: {\r\n            uri: segment.key.resolvedUri || segment.map.key.resolvedUri\r\n          }\r\n        }\r\n      };\r\n      doneFn(decryptError, segment);\r\n    };\r\n    decryptionWorker.addEventListener('message', decryptionHandler);\r\n    let keyBytes;\r\n    if (key.bytes.slice) {\r\n      keyBytes = key.bytes.slice();\r\n    } else {\r\n      keyBytes = new Uint32Array(Array.prototype.slice.call(key.bytes));\r\n    } // incrementally decrypt the bytes\r\n\r\n    decryptionWorker.postMessage(createTransferableMessage({\r\n      source: id,\r\n      encrypted: encryptedBytes,\r\n      key: keyBytes,\r\n      iv: key.iv\r\n    }), [encryptedBytes.buffer, keyBytes.buffer]);\r\n  };\r\n  /**\r\n   * Decrypt the segment via the decryption web worker\r\n   *\r\n   * @param {WebWorker} decryptionWorker - a WebWorker interface to AES-128 decryption\r\n   *                                       routines\r\n   * @param {Object} segment - a simplified copy of the segmentInfo object\r\n   *                           from SegmentLoader\r\n   * @param {Function} trackInfoFn - a callback that receives track info\r\n   * @param {Function} timingInfoFn - a callback that receives timing info\r\n   * @param {Function} videoSegmentTimingInfoFn\r\n   *                   a callback that receives video timing info based on media times and\r\n   *                   any adjustments made by the transmuxer\r\n   * @param {Function} audioSegmentTimingInfoFn\r\n   *                   a callback that receives audio timing info based on media times and\r\n   *                   any adjustments made by the transmuxer\r\n   * @param {boolean}  isEndOfTimeline\r\n   *                   true if this segment represents the last segment in a timeline\r\n   * @param {Function} endedTimelineFn\r\n   *                   a callback made when a timeline is ended, will only be called if\r\n   *                   isEndOfTimeline is true\r\n   * @param {Function} dataFn - a callback that is executed when segment bytes are available\r\n   *                            and ready to use\r\n   * @param {Function} doneFn - a callback that is executed after decryption has completed\r\n   */\r\n\r\n  const decryptSegment = ({\r\n    decryptionWorker,\r\n    segment,\r\n    trackInfoFn,\r\n    timingInfoFn,\r\n    videoSegmentTimingInfoFn,\r\n    audioSegmentTimingInfoFn,\r\n    id3Fn,\r\n    captionsFn,\r\n    isEndOfTimeline,\r\n    endedTimelineFn,\r\n    dataFn,\r\n    doneFn,\r\n    onTransmuxerLog,\r\n    triggerSegmentEventFn\r\n  }) => {\r\n    triggerSegmentEventFn({\r\n      type: 'segmentdecryptionstart'\r\n    });\r\n    decrypt({\r\n      id: segment.requestId,\r\n      key: segment.key,\r\n      encryptedBytes: segment.encryptedBytes,\r\n      decryptionWorker,\r\n      segment,\r\n      doneFn\r\n    }, decryptedBytes => {\r\n      segment.bytes = decryptedBytes;\r\n      triggerSegmentEventFn({\r\n        type: 'segmentdecryptioncomplete',\r\n        segment\r\n      });\r\n      handleSegmentBytes({\r\n        segment,\r\n        bytes: segment.bytes,\r\n        trackInfoFn,\r\n        timingInfoFn,\r\n        videoSegmentTimingInfoFn,\r\n        audioSegmentTimingInfoFn,\r\n        id3Fn,\r\n        captionsFn,\r\n        isEndOfTimeline,\r\n        endedTimelineFn,\r\n        dataFn,\r\n        doneFn,\r\n        onTransmuxerLog,\r\n        triggerSegmentEventFn\r\n      });\r\n    });\r\n  };\r\n  /**\r\n   * This function waits for all XHRs to finish (with either success or failure)\r\n   * before continueing processing via it's callback. The function gathers errors\r\n   * from each request into a single errors array so that the error status for\r\n   * each request can be examined later.\r\n   *\r\n   * @param {Object} activeXhrs - an object that tracks all XHR requests\r\n   * @param {WebWorker} decryptionWorker - a WebWorker interface to AES-128 decryption\r\n   *                                       routines\r\n   * @param {Function} trackInfoFn - a callback that receives track info\r\n   * @param {Function} timingInfoFn - a callback that receives timing info\r\n   * @param {Function} videoSegmentTimingInfoFn\r\n   *                   a callback that receives video timing info based on media times and\r\n   *                   any adjustments made by the transmuxer\r\n   * @param {Function} audioSegmentTimingInfoFn\r\n   *                   a callback that receives audio timing info based on media times and\r\n   *                   any adjustments made by the transmuxer\r\n   * @param {Function} id3Fn - a callback that receives ID3 metadata\r\n   * @param {Function} captionsFn - a callback that receives captions\r\n   * @param {boolean}  isEndOfTimeline\r\n   *                   true if this segment represents the last segment in a timeline\r\n   * @param {Function} endedTimelineFn\r\n   *                   a callback made when a timeline is ended, will only be called if\r\n   *                   isEndOfTimeline is true\r\n   * @param {Function} dataFn - a callback that is executed when segment bytes are available\r\n   *                            and ready to use\r\n   * @param {Function} doneFn - a callback that is executed after all resources have been\r\n   *                            downloaded and any decryption completed\r\n   */\r\n\r\n  const waitForCompletion = ({\r\n    activeXhrs,\r\n    decryptionWorker,\r\n    trackInfoFn,\r\n    timingInfoFn,\r\n    videoSegmentTimingInfoFn,\r\n    audioSegmentTimingInfoFn,\r\n    id3Fn,\r\n    captionsFn,\r\n    isEndOfTimeline,\r\n    endedTimelineFn,\r\n    dataFn,\r\n    doneFn,\r\n    onTransmuxerLog,\r\n    triggerSegmentEventFn\r\n  }) => {\r\n    let count = 0;\r\n    let didError = false;\r\n    return (error, segment) => {\r\n      if (didError) {\r\n        return;\r\n      }\r\n      if (error) {\r\n        didError = true; // If there are errors, we have to abort any outstanding requests\r\n\r\n        abortAll(activeXhrs); // Even though the requests above are aborted, and in theory we could wait until we\r\n        // handle the aborted events from those requests, there are some cases where we may\r\n        // never get an aborted event. For instance, if the network connection is lost and\r\n        // there were two requests, the first may have triggered an error immediately, while\r\n        // the second request remains unsent. In that case, the aborted algorithm will not\r\n        // trigger an abort: see https://xhr.spec.whatwg.org/#the-abort()-method\r\n        //\r\n        // We also can't rely on the ready state of the XHR, since the request that\r\n        // triggered the connection error may also show as a ready state of 0 (unsent).\r\n        // Therefore, we have to finish this group of requests immediately after the first\r\n        // seen error.\r\n\r\n        return doneFn(error, segment);\r\n      }\r\n      count += 1;\r\n      if (count === activeXhrs.length) {\r\n        const segmentFinish = function () {\r\n          if (segment.encryptedBytes) {\r\n            return decryptSegment({\r\n              decryptionWorker,\r\n              segment,\r\n              trackInfoFn,\r\n              timingInfoFn,\r\n              videoSegmentTimingInfoFn,\r\n              audioSegmentTimingInfoFn,\r\n              id3Fn,\r\n              captionsFn,\r\n              isEndOfTimeline,\r\n              endedTimelineFn,\r\n              dataFn,\r\n              doneFn,\r\n              onTransmuxerLog,\r\n              triggerSegmentEventFn\r\n            });\r\n          } // Otherwise, everything is ready just continue\r\n\r\n          handleSegmentBytes({\r\n            segment,\r\n            bytes: segment.bytes,\r\n            trackInfoFn,\r\n            timingInfoFn,\r\n            videoSegmentTimingInfoFn,\r\n            audioSegmentTimingInfoFn,\r\n            id3Fn,\r\n            captionsFn,\r\n            isEndOfTimeline,\r\n            endedTimelineFn,\r\n            dataFn,\r\n            doneFn,\r\n            onTransmuxerLog,\r\n            triggerSegmentEventFn\r\n          });\r\n        }; // Keep track of when *all* of the requests have completed\r\n\r\n        segment.endOfAllRequests = Date.now();\r\n        if (segment.map && segment.map.encryptedBytes && !segment.map.bytes) {\r\n          triggerSegmentEventFn({\r\n            type: 'segmentdecryptionstart',\r\n            segment\r\n          });\r\n          return decrypt({\r\n            decryptionWorker,\r\n            // add -init to the \"id\" to differentiate between segment\r\n            // and init segment decryption, just in case they happen\r\n            // at the same time at some point in the future.\r\n            id: segment.requestId + '-init',\r\n            encryptedBytes: segment.map.encryptedBytes,\r\n            key: segment.map.key,\r\n            segment,\r\n            doneFn\r\n          }, decryptedBytes => {\r\n            segment.map.bytes = decryptedBytes;\r\n            triggerSegmentEventFn({\r\n              type: 'segmentdecryptioncomplete',\r\n              segment\r\n            });\r\n            parseInitSegment(segment, parseError => {\r\n              if (parseError) {\r\n                abortAll(activeXhrs);\r\n                return doneFn(parseError, segment);\r\n              }\r\n              segmentFinish();\r\n            });\r\n          });\r\n        }\r\n        segmentFinish();\r\n      }\r\n    };\r\n  };\r\n  /**\r\n   * Calls the abort callback if any request within the batch was aborted. Will only call\r\n   * the callback once per batch of requests, even if multiple were aborted.\r\n   *\r\n   * @param {Object} loadendState - state to check to see if the abort function was called\r\n   * @param {Function} abortFn - callback to call for abort\r\n   */\r\n\r\n  const handleLoadEnd = ({\r\n    loadendState,\r\n    abortFn\r\n  }) => event => {\r\n    const request = event.target;\r\n    if (request.aborted && abortFn && !loadendState.calledAbortFn) {\r\n      abortFn();\r\n      loadendState.calledAbortFn = true;\r\n    }\r\n  };\r\n  /**\r\n   * Simple progress event callback handler that gathers some stats before\r\n   * executing a provided callback with the `segment` object\r\n   *\r\n   * @param {Object} segment - a simplified copy of the segmentInfo object\r\n   *                           from SegmentLoader\r\n   * @param {Function} progressFn - a callback that is executed each time a progress event\r\n   *                                is received\r\n   * @param {Function} trackInfoFn - a callback that receives track info\r\n   * @param {Function} timingInfoFn - a callback that receives timing info\r\n   * @param {Function} videoSegmentTimingInfoFn\r\n   *                   a callback that receives video timing info based on media times and\r\n   *                   any adjustments made by the transmuxer\r\n   * @param {Function} audioSegmentTimingInfoFn\r\n   *                   a callback that receives audio timing info based on media times and\r\n   *                   any adjustments made by the transmuxer\r\n   * @param {boolean}  isEndOfTimeline\r\n   *                   true if this segment represents the last segment in a timeline\r\n   * @param {Function} endedTimelineFn\r\n   *                   a callback made when a timeline is ended, will only be called if\r\n   *                   isEndOfTimeline is true\r\n   * @param {Function} dataFn - a callback that is executed when segment bytes are available\r\n   *                            and ready to use\r\n   * @param {Event} event - the progress event object from XMLHttpRequest\r\n   */\r\n\r\n  const handleProgress = ({\r\n    segment,\r\n    progressFn,\r\n    trackInfoFn,\r\n    timingInfoFn,\r\n    videoSegmentTimingInfoFn,\r\n    audioSegmentTimingInfoFn,\r\n    id3Fn,\r\n    captionsFn,\r\n    isEndOfTimeline,\r\n    endedTimelineFn,\r\n    dataFn\r\n  }) => event => {\r\n    const request = event.target;\r\n    if (request.aborted) {\r\n      return;\r\n    }\r\n    segment.stats = merge(segment.stats, getProgressStats(event)); // record the time that we receive the first byte of data\r\n\r\n    if (!segment.stats.firstBytesReceivedAt && segment.stats.bytesReceived) {\r\n      segment.stats.firstBytesReceivedAt = Date.now();\r\n    }\r\n    return progressFn(event, segment);\r\n  };\r\n  /**\r\n   * Load all resources and does any processing necessary for a media-segment\r\n   *\r\n   * Features:\r\n   *   decrypts the media-segment if it has a key uri and an iv\r\n   *   aborts *all* requests if *any* one request fails\r\n   *\r\n   * The segment object, at minimum, has the following format:\r\n   * {\r\n   *   resolvedUri: String,\r\n   *   [transmuxer]: Object,\r\n   *   [byterange]: {\r\n   *     offset: Number,\r\n   *     length: Number\r\n   *   },\r\n   *   [key]: {\r\n   *     resolvedUri: String\r\n   *     [byterange]: {\r\n   *       offset: Number,\r\n   *       length: Number\r\n   *     },\r\n   *     iv: {\r\n   *       bytes: Uint32Array\r\n   *     }\r\n   *   },\r\n   *   [map]: {\r\n   *     resolvedUri: String,\r\n   *     [byterange]: {\r\n   *       offset: Number,\r\n   *       length: Number\r\n   *     },\r\n   *     [bytes]: Uint8Array\r\n   *   }\r\n   * }\r\n   * ...where [name] denotes optional properties\r\n   *\r\n   * @param {Function} xhr - an instance of the xhr wrapper in xhr.js\r\n   * @param {Object} xhrOptions - the base options to provide to all xhr requests\r\n   * @param {WebWorker} decryptionWorker - a WebWorker interface to AES-128\r\n   *                                       decryption routines\r\n   * @param {Object} segment - a simplified copy of the segmentInfo object\r\n   *                           from SegmentLoader\r\n   * @param {Function} abortFn - a callback called (only once) if any piece of a request was\r\n   *                             aborted\r\n   * @param {Function} progressFn - a callback that receives progress events from the main\r\n   *                                segment's xhr request\r\n   * @param {Function} trackInfoFn - a callback that receives track info\r\n   * @param {Function} timingInfoFn - a callback that receives timing info\r\n   * @param {Function} videoSegmentTimingInfoFn\r\n   *                   a callback that receives video timing info based on media times and\r\n   *                   any adjustments made by the transmuxer\r\n   * @param {Function} audioSegmentTimingInfoFn\r\n   *                   a callback that receives audio timing info based on media times and\r\n   *                   any adjustments made by the transmuxer\r\n   * @param {Function} id3Fn - a callback that receives ID3 metadata\r\n   * @param {Function} captionsFn - a callback that receives captions\r\n   * @param {boolean}  isEndOfTimeline\r\n   *                   true if this segment represents the last segment in a timeline\r\n   * @param {Function} endedTimelineFn\r\n   *                   a callback made when a timeline is ended, will only be called if\r\n   *                   isEndOfTimeline is true\r\n   * @param {Function} dataFn - a callback that receives data from the main segment's xhr\r\n   *                            request, transmuxed if needed\r\n   * @param {Function} doneFn - a callback that is executed only once all requests have\r\n   *                            succeeded or failed\r\n   * @return {Function} a function that, when invoked, immediately aborts all\r\n   *                     outstanding requests\r\n   */\r\n\r\n  const mediaSegmentRequest = ({\r\n    xhr,\r\n    xhrOptions,\r\n    decryptionWorker,\r\n    segment,\r\n    abortFn,\r\n    progressFn,\r\n    trackInfoFn,\r\n    timingInfoFn,\r\n    videoSegmentTimingInfoFn,\r\n    audioSegmentTimingInfoFn,\r\n    id3Fn,\r\n    captionsFn,\r\n    isEndOfTimeline,\r\n    endedTimelineFn,\r\n    dataFn,\r\n    doneFn,\r\n    onTransmuxerLog,\r\n    triggerSegmentEventFn\r\n  }) => {\r\n    const activeXhrs = [];\r\n    const finishProcessingFn = waitForCompletion({\r\n      activeXhrs,\r\n      decryptionWorker,\r\n      trackInfoFn,\r\n      timingInfoFn,\r\n      videoSegmentTimingInfoFn,\r\n      audioSegmentTimingInfoFn,\r\n      id3Fn,\r\n      captionsFn,\r\n      isEndOfTimeline,\r\n      endedTimelineFn,\r\n      dataFn,\r\n      doneFn,\r\n      onTransmuxerLog,\r\n      triggerSegmentEventFn\r\n    }); // optionally, request the decryption key\r\n\r\n    if (segment.key && !segment.key.bytes) {\r\n      const objects = [segment.key];\r\n      if (segment.map && !segment.map.bytes && segment.map.key && segment.map.key.resolvedUri === segment.key.resolvedUri) {\r\n        objects.push(segment.map.key);\r\n      }\r\n      const keyRequestOptions = merge(xhrOptions, {\r\n        uri: segment.key.resolvedUri,\r\n        responseType: 'arraybuffer',\r\n        requestType: 'segment-key'\r\n      });\r\n      const keyRequestCallback = handleKeyResponse(segment, objects, finishProcessingFn, triggerSegmentEventFn);\r\n      const keyInfo = {\r\n        uri: segment.key.resolvedUri\r\n      };\r\n      triggerSegmentEventFn({\r\n        type: 'segmentkeyloadstart',\r\n        segment,\r\n        keyInfo\r\n      });\r\n      const keyXhr = xhr(keyRequestOptions, keyRequestCallback);\r\n      activeXhrs.push(keyXhr);\r\n    } // optionally, request the associated media init segment\r\n\r\n    if (segment.map && !segment.map.bytes) {\r\n      const differentMapKey = segment.map.key && (!segment.key || segment.key.resolvedUri !== segment.map.key.resolvedUri);\r\n      if (differentMapKey) {\r\n        const mapKeyRequestOptions = merge(xhrOptions, {\r\n          uri: segment.map.key.resolvedUri,\r\n          responseType: 'arraybuffer',\r\n          requestType: 'segment-key'\r\n        });\r\n        const mapKeyRequestCallback = handleKeyResponse(segment, [segment.map.key], finishProcessingFn, triggerSegmentEventFn);\r\n        const keyInfo = {\r\n          uri: segment.map.key.resolvedUri\r\n        };\r\n        triggerSegmentEventFn({\r\n          type: 'segmentkeyloadstart',\r\n          segment,\r\n          keyInfo\r\n        });\r\n        const mapKeyXhr = xhr(mapKeyRequestOptions, mapKeyRequestCallback);\r\n        activeXhrs.push(mapKeyXhr);\r\n      }\r\n      const initSegmentOptions = merge(xhrOptions, {\r\n        uri: segment.map.resolvedUri,\r\n        responseType: 'arraybuffer',\r\n        headers: segmentXhrHeaders(segment.map),\r\n        requestType: 'segment-media-initialization'\r\n      });\r\n      const initSegmentRequestCallback = handleInitSegmentResponse({\r\n        segment,\r\n        finishProcessingFn,\r\n        triggerSegmentEventFn\r\n      });\r\n      triggerSegmentEventFn({\r\n        type: 'segmentloadstart',\r\n        segment\r\n      });\r\n      const initSegmentXhr = xhr(initSegmentOptions, initSegmentRequestCallback);\r\n      activeXhrs.push(initSegmentXhr);\r\n    }\r\n    const segmentRequestOptions = merge(xhrOptions, {\r\n      uri: segment.part && segment.part.resolvedUri || segment.resolvedUri,\r\n      responseType: 'arraybuffer',\r\n      headers: segmentXhrHeaders(segment),\r\n      requestType: 'segment'\r\n    });\r\n    const segmentRequestCallback = handleSegmentResponse({\r\n      segment,\r\n      finishProcessingFn,\r\n      responseType: segmentRequestOptions.responseType,\r\n      triggerSegmentEventFn\r\n    });\r\n    triggerSegmentEventFn({\r\n      type: 'segmentloadstart',\r\n      segment\r\n    });\r\n    const segmentXhr = xhr(segmentRequestOptions, segmentRequestCallback);\r\n    segmentXhr.addEventListener('progress', handleProgress({\r\n      segment,\r\n      progressFn,\r\n      trackInfoFn,\r\n      timingInfoFn,\r\n      videoSegmentTimingInfoFn,\r\n      audioSegmentTimingInfoFn,\r\n      id3Fn,\r\n      captionsFn,\r\n      isEndOfTimeline,\r\n      endedTimelineFn,\r\n      dataFn\r\n    }));\r\n    activeXhrs.push(segmentXhr); // since all parts of the request must be considered, but should not make callbacks\r\n    // multiple times, provide a shared state object\r\n\r\n    const loadendState = {};\r\n    activeXhrs.forEach(activeXhr => {\r\n      activeXhr.addEventListener('loadend', handleLoadEnd({\r\n        loadendState,\r\n        abortFn\r\n      }));\r\n    });\r\n    return () => abortAll(activeXhrs);\r\n  };\r\n\r\n  /**\r\n   * @file - codecs.js - Handles tasks regarding codec strings such as translating them to\r\n   * codec strings, or translating codec strings into objects that can be examined.\r\n   */\r\n  const logFn$1 = logger('CodecUtils');\r\n  /**\r\n   * Returns a set of codec strings parsed from the playlist or the default\r\n   * codec strings if no codecs were specified in the playlist\r\n   *\r\n   * @param {Playlist} media the current media playlist\r\n   * @return {Object} an object with the video and audio codecs\r\n   */\r\n\r\n  const getCodecs = function (media) {\r\n    // if the codecs were explicitly specified, use them instead of the\r\n    // defaults\r\n    const mediaAttributes = media.attributes || {};\r\n    if (mediaAttributes.CODECS) {\r\n      return parseCodecs(mediaAttributes.CODECS);\r\n    }\r\n  };\r\n  const isMaat = (main, media) => {\r\n    const mediaAttributes = media.attributes || {};\r\n    return main && main.mediaGroups && main.mediaGroups.AUDIO && mediaAttributes.AUDIO && main.mediaGroups.AUDIO[mediaAttributes.AUDIO];\r\n  };\r\n  const isMuxed = (main, media) => {\r\n    if (!isMaat(main, media)) {\r\n      return true;\r\n    }\r\n    const mediaAttributes = media.attributes || {};\r\n    const audioGroup = main.mediaGroups.AUDIO[mediaAttributes.AUDIO];\r\n    for (const groupId in audioGroup) {\r\n      // If an audio group has a URI (the case for HLS, as HLS will use external playlists),\r\n      // or there are listed playlists (the case for DASH, as the manifest will have already\r\n      // provided all of the details necessary to generate the audio playlist, as opposed to\r\n      // HLS' externally requested playlists), then the content is demuxed.\r\n      if (!audioGroup[groupId].uri && !audioGroup[groupId].playlists) {\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  };\r\n  const unwrapCodecList = function (codecList) {\r\n    const codecs = {};\r\n    codecList.forEach(({\r\n      mediaType,\r\n      type,\r\n      details\r\n    }) => {\r\n      codecs[mediaType] = codecs[mediaType] || [];\r\n      codecs[mediaType].push(translateLegacyCodec(`${type}${details}`));\r\n    });\r\n    Object.keys(codecs).forEach(function (mediaType) {\r\n      if (codecs[mediaType].length > 1) {\r\n        logFn$1(`multiple ${mediaType} codecs found as attributes: ${codecs[mediaType].join(', ')}. Setting playlist codecs to null so that we wait for mux.js to probe segments for real codecs.`);\r\n        codecs[mediaType] = null;\r\n        return;\r\n      }\r\n      codecs[mediaType] = codecs[mediaType][0];\r\n    });\r\n    return codecs;\r\n  };\r\n  const codecCount = function (codecObj) {\r\n    let count = 0;\r\n    if (codecObj.audio) {\r\n      count++;\r\n    }\r\n    if (codecObj.video) {\r\n      count++;\r\n    }\r\n    return count;\r\n  };\r\n  /**\r\n   * Calculates the codec strings for a working configuration of\r\n   * SourceBuffers to play variant streams in a main playlist. If\r\n   * there is no possible working configuration, an empty object will be\r\n   * returned.\r\n   *\r\n   * @param main {Object} the m3u8 object for the main playlist\r\n   * @param media {Object} the m3u8 object for the variant playlist\r\n   * @return {Object} the codec strings.\r\n   *\r\n   * @private\r\n   */\r\n\r\n  const codecsForPlaylist = function (main, media) {\r\n    const mediaAttributes = media.attributes || {};\r\n    const codecInfo = unwrapCodecList(getCodecs(media) || []); // HLS with multiple-audio tracks must always get an audio codec.\r\n    // Put another way, there is no way to have a video-only multiple-audio HLS!\r\n\r\n    if (isMaat(main, media) && !codecInfo.audio) {\r\n      if (!isMuxed(main, media)) {\r\n        // It is possible for codecs to be specified on the audio media group playlist but\r\n        // not on the rendition playlist. This is mostly the case for DASH, where audio and\r\n        // video are always separate (and separately specified).\r\n        const defaultCodecs = unwrapCodecList(codecsFromDefault(main, mediaAttributes.AUDIO) || []);\r\n        if (defaultCodecs.audio) {\r\n          codecInfo.audio = defaultCodecs.audio;\r\n        }\r\n      }\r\n    }\r\n    return codecInfo;\r\n  };\r\n  const logFn = logger('PlaylistSelector');\r\n  const representationToString = function (representation) {\r\n    if (!representation || !representation.playlist) {\r\n      return;\r\n    }\r\n    const playlist = representation.playlist;\r\n    return JSON.stringify({\r\n      id: playlist.id,\r\n      bandwidth: representation.bandwidth,\r\n      width: representation.width,\r\n      height: representation.height,\r\n      codecs: playlist.attributes && playlist.attributes.CODECS || ''\r\n    });\r\n  }; // Utilities\r\n\r\n  /**\r\n   * Returns the CSS value for the specified property on an element\r\n   * using `getComputedStyle`. Firefox has a long-standing issue where\r\n   * getComputedStyle() may return null when running in an iframe with\r\n   * `display: none`.\r\n   *\r\n   * @see https://bugzilla.mozilla.org/show_bug.cgi?id=548397\r\n   * @param {HTMLElement} el the htmlelement to work on\r\n   * @param {string} the proprety to get the style for\r\n   */\r\n\r\n  const safeGetComputedStyle = function (el, property) {\r\n    if (!el) {\r\n      return '';\r\n    }\r\n    const result = window.getComputedStyle(el);\r\n    if (!result) {\r\n      return '';\r\n    }\r\n    return result[property];\r\n  };\r\n  /**\r\n   * Resuable stable sort function\r\n   *\r\n   * @param {Playlists} array\r\n   * @param {Function} sortFn Different comparators\r\n   * @function stableSort\r\n   */\r\n\r\n  const stableSort = function (array, sortFn) {\r\n    const newArray = array.slice();\r\n    array.sort(function (left, right) {\r\n      const cmp = sortFn(left, right);\r\n      if (cmp === 0) {\r\n        return newArray.indexOf(left) - newArray.indexOf(right);\r\n      }\r\n      return cmp;\r\n    });\r\n  };\r\n  /**\r\n   * A comparator function to sort two playlist object by bandwidth.\r\n   *\r\n   * @param {Object} left a media playlist object\r\n   * @param {Object} right a media playlist object\r\n   * @return {number} Greater than zero if the bandwidth attribute of\r\n   * left is greater than the corresponding attribute of right. Less\r\n   * than zero if the bandwidth of right is greater than left and\r\n   * exactly zero if the two are equal.\r\n   */\r\n\r\n  const comparePlaylistBandwidth = function (left, right) {\r\n    let leftBandwidth;\r\n    let rightBandwidth;\r\n    if (left.attributes.BANDWIDTH) {\r\n      leftBandwidth = left.attributes.BANDWIDTH;\r\n    }\r\n    leftBandwidth = leftBandwidth || window.Number.MAX_VALUE;\r\n    if (right.attributes.BANDWIDTH) {\r\n      rightBandwidth = right.attributes.BANDWIDTH;\r\n    }\r\n    rightBandwidth = rightBandwidth || window.Number.MAX_VALUE;\r\n    return leftBandwidth - rightBandwidth;\r\n  };\r\n  /**\r\n   * A comparator function to sort two playlist object by resolution (width).\r\n   *\r\n   * @param {Object} left a media playlist object\r\n   * @param {Object} right a media playlist object\r\n   * @return {number} Greater than zero if the resolution.width attribute of\r\n   * left is greater than the corresponding attribute of right. Less\r\n   * than zero if the resolution.width of right is greater than left and\r\n   * exactly zero if the two are equal.\r\n   */\r\n\r\n  const comparePlaylistResolution = function (left, right) {\r\n    let leftWidth;\r\n    let rightWidth;\r\n    if (left.attributes.RESOLUTION && left.attributes.RESOLUTION.width) {\r\n      leftWidth = left.attributes.RESOLUTION.width;\r\n    }\r\n    leftWidth = leftWidth || window.Number.MAX_VALUE;\r\n    if (right.attributes.RESOLUTION && right.attributes.RESOLUTION.width) {\r\n      rightWidth = right.attributes.RESOLUTION.width;\r\n    }\r\n    rightWidth = rightWidth || window.Number.MAX_VALUE; // NOTE - Fallback to bandwidth sort as appropriate in cases where multiple renditions\r\n    // have the same media dimensions/ resolution\r\n\r\n    if (leftWidth === rightWidth && left.attributes.BANDWIDTH && right.attributes.BANDWIDTH) {\r\n      return left.attributes.BANDWIDTH - right.attributes.BANDWIDTH;\r\n    }\r\n    return leftWidth - rightWidth;\r\n  };\r\n  /**\r\n   * Chooses the appropriate media playlist based on bandwidth and player size\r\n   *\r\n   * @param {Object} main\r\n   *        Object representation of the main manifest\r\n   * @param {number} playerBandwidth\r\n   *        Current calculated bandwidth of the player\r\n   * @param {number} playerWidth\r\n   *        Current width of the player element (should account for the device pixel ratio)\r\n   * @param {number} playerHeight\r\n   *        Current height of the player element (should account for the device pixel ratio)\r\n   * @param {boolean} limitRenditionByPlayerDimensions\r\n   *        True if the player width and height should be used during the selection, false otherwise\r\n   * @param {Object} playlistController\r\n   *        the current playlistController object\r\n   * @return {Playlist} the highest bitrate playlist less than the\r\n   * currently detected bandwidth, accounting for some amount of\r\n   * bandwidth variance\r\n   */\r\n\r\n  let simpleSelector = function (main, playerBandwidth, playerWidth, playerHeight, limitRenditionByPlayerDimensions, playlistController) {\r\n    // If we end up getting called before `main` is available, exit early\r\n    if (!main) {\r\n      return;\r\n    }\r\n    const options = {\r\n      bandwidth: playerBandwidth,\r\n      width: playerWidth,\r\n      height: playerHeight,\r\n      limitRenditionByPlayerDimensions\r\n    };\r\n    let playlists = main.playlists; // if playlist is audio only, select between currently active audio group playlists.\r\n\r\n    if (Playlist.isAudioOnly(main)) {\r\n      playlists = playlistController.getAudioTrackPlaylists_(); // add audioOnly to options so that we log audioOnly: true\r\n      // at the buttom of this function for debugging.\r\n\r\n      options.audioOnly = true;\r\n    } // convert the playlists to an intermediary representation to make comparisons easier\r\n\r\n    let sortedPlaylistReps = playlists.map(playlist => {\r\n      let bandwidth;\r\n      const width = playlist.attributes && playlist.attributes.RESOLUTION && playlist.attributes.RESOLUTION.width;\r\n      const height = playlist.attributes && playlist.attributes.RESOLUTION && playlist.attributes.RESOLUTION.height;\r\n      bandwidth = playlist.attributes && playlist.attributes.BANDWIDTH;\r\n      bandwidth = bandwidth || window.Number.MAX_VALUE;\r\n      return {\r\n        bandwidth,\r\n        width,\r\n        height,\r\n        playlist\r\n      };\r\n    });\r\n    stableSort(sortedPlaylistReps, (left, right) => left.bandwidth - right.bandwidth); // filter out any playlists that have been excluded due to\r\n    // incompatible configurations\r\n\r\n    sortedPlaylistReps = sortedPlaylistReps.filter(rep => !Playlist.isIncompatible(rep.playlist)); // filter out any playlists that have been disabled manually through the representations\r\n    // api or excluded temporarily due to playback errors.\r\n\r\n    let enabledPlaylistReps = sortedPlaylistReps.filter(rep => Playlist.isEnabled(rep.playlist));\r\n    if (!enabledPlaylistReps.length) {\r\n      // if there are no enabled playlists, then they have all been excluded or disabled\r\n      // by the user through the representations api. In this case, ignore exclusion and\r\n      // fallback to what the user wants by using playlists the user has not disabled.\r\n      enabledPlaylistReps = sortedPlaylistReps.filter(rep => !Playlist.isDisabled(rep.playlist));\r\n    } // filter out any variant that has greater effective bitrate\r\n    // than the current estimated bandwidth\r\n\r\n    const bandwidthPlaylistReps = enabledPlaylistReps.filter(rep => rep.bandwidth * Config.BANDWIDTH_VARIANCE < playerBandwidth);\r\n    let highestRemainingBandwidthRep = bandwidthPlaylistReps[bandwidthPlaylistReps.length - 1]; // get all of the renditions with the same (highest) bandwidth\r\n    // and then taking the very first element\r\n\r\n    const bandwidthBestRep = bandwidthPlaylistReps.filter(rep => rep.bandwidth === highestRemainingBandwidthRep.bandwidth)[0]; // if we're not going to limit renditions by player size, make an early decision.\r\n\r\n    if (limitRenditionByPlayerDimensions === false) {\r\n      const chosenRep = bandwidthBestRep || enabledPlaylistReps[0] || sortedPlaylistReps[0];\r\n      if (chosenRep && chosenRep.playlist) {\r\n        let type = 'sortedPlaylistReps';\r\n        if (bandwidthBestRep) {\r\n          type = 'bandwidthBestRep';\r\n        }\r\n        if (enabledPlaylistReps[0]) {\r\n          type = 'enabledPlaylistReps';\r\n        }\r\n        logFn(`choosing ${representationToString(chosenRep)} using ${type} with options`, options);\r\n        return chosenRep.playlist;\r\n      }\r\n      logFn('could not choose a playlist with options', options);\r\n      return null;\r\n    } // filter out playlists without resolution information\r\n\r\n    const haveResolution = bandwidthPlaylistReps.filter(rep => rep.width && rep.height); // sort variants by resolution\r\n\r\n    stableSort(haveResolution, (left, right) => left.width - right.width); // if we have the exact resolution as the player use it\r\n\r\n    const resolutionBestRepList = haveResolution.filter(rep => rep.width === playerWidth && rep.height === playerHeight);\r\n    highestRemainingBandwidthRep = resolutionBestRepList[resolutionBestRepList.length - 1]; // ensure that we pick the highest bandwidth variant that have exact resolution\r\n\r\n    const resolutionBestRep = resolutionBestRepList.filter(rep => rep.bandwidth === highestRemainingBandwidthRep.bandwidth)[0];\r\n    let resolutionPlusOneList;\r\n    let resolutionPlusOneSmallest;\r\n    let resolutionPlusOneRep; // find the smallest variant that is larger than the player\r\n    // if there is no match of exact resolution\r\n\r\n    if (!resolutionBestRep) {\r\n      resolutionPlusOneList = haveResolution.filter(rep => rep.width > playerWidth || rep.height > playerHeight); // find all the variants have the same smallest resolution\r\n\r\n      resolutionPlusOneSmallest = resolutionPlusOneList.filter(rep => rep.width === resolutionPlusOneList[0].width && rep.height === resolutionPlusOneList[0].height); // ensure that we also pick the highest bandwidth variant that\r\n      // is just-larger-than the video player\r\n\r\n      highestRemainingBandwidthRep = resolutionPlusOneSmallest[resolutionPlusOneSmallest.length - 1];\r\n      resolutionPlusOneRep = resolutionPlusOneSmallest.filter(rep => rep.bandwidth === highestRemainingBandwidthRep.bandwidth)[0];\r\n    }\r\n    let leastPixelDiffRep; // If this selector proves to be better than others,\r\n    // resolutionPlusOneRep and resolutionBestRep and all\r\n    // the code involving them should be removed.\r\n\r\n    if (playlistController.leastPixelDiffSelector) {\r\n      // find the variant that is closest to the player's pixel size\r\n      const leastPixelDiffList = haveResolution.map(rep => {\r\n        rep.pixelDiff = Math.abs(rep.width - playerWidth) + Math.abs(rep.height - playerHeight);\r\n        return rep;\r\n      }); // get the highest bandwidth, closest resolution playlist\r\n\r\n      stableSort(leastPixelDiffList, (left, right) => {\r\n        // sort by highest bandwidth if pixelDiff is the same\r\n        if (left.pixelDiff === right.pixelDiff) {\r\n          return right.bandwidth - left.bandwidth;\r\n        }\r\n        return left.pixelDiff - right.pixelDiff;\r\n      });\r\n      leastPixelDiffRep = leastPixelDiffList[0];\r\n    } // fallback chain of variants\r\n\r\n    const chosenRep = leastPixelDiffRep || resolutionPlusOneRep || resolutionBestRep || bandwidthBestRep || enabledPlaylistReps[0] || sortedPlaylistReps[0];\r\n    if (chosenRep && chosenRep.playlist) {\r\n      let type = 'sortedPlaylistReps';\r\n      if (leastPixelDiffRep) {\r\n        type = 'leastPixelDiffRep';\r\n      } else if (resolutionPlusOneRep) {\r\n        type = 'resolutionPlusOneRep';\r\n      } else if (resolutionBestRep) {\r\n        type = 'resolutionBestRep';\r\n      } else if (bandwidthBestRep) {\r\n        type = 'bandwidthBestRep';\r\n      } else if (enabledPlaylistReps[0]) {\r\n        type = 'enabledPlaylistReps';\r\n      }\r\n      logFn(`choosing ${representationToString(chosenRep)} using ${type} with options`, options);\r\n      return chosenRep.playlist;\r\n    }\r\n    logFn('could not choose a playlist with options', options);\r\n    return null;\r\n  };\r\n\r\n  /**\r\n   * Chooses the appropriate media playlist based on the most recent\r\n   * bandwidth estimate and the player size.\r\n   *\r\n   * Expects to be called within the context of an instance of VhsHandler\r\n   *\r\n   * @return {Playlist} the highest bitrate playlist less than the\r\n   * currently detected bandwidth, accounting for some amount of\r\n   * bandwidth variance\r\n   */\r\n\r\n  const lastBandwidthSelector = function () {\r\n    let pixelRatio = this.useDevicePixelRatio ? window.devicePixelRatio || 1 : 1;\r\n    if (!isNaN(this.customPixelRatio)) {\r\n      pixelRatio = this.customPixelRatio;\r\n    }\r\n    return simpleSelector(this.playlists.main, this.systemBandwidth, parseInt(safeGetComputedStyle(this.tech_.el(), 'width'), 10) * pixelRatio, parseInt(safeGetComputedStyle(this.tech_.el(), 'height'), 10) * pixelRatio, this.limitRenditionByPlayerDimensions, this.playlistController_);\r\n  };\r\n  /**\r\n   * Chooses the appropriate media playlist based on an\r\n   * exponential-weighted moving average of the bandwidth after\r\n   * filtering for player size.\r\n   *\r\n   * Expects to be called within the context of an instance of VhsHandler\r\n   *\r\n   * @param {number} decay - a number between 0 and 1. Higher values of\r\n   * this parameter will cause previous bandwidth estimates to lose\r\n   * significance more quickly.\r\n   * @return {Function} a function which can be invoked to create a new\r\n   * playlist selector function.\r\n   * @see https://en.wikipedia.org/wiki/Moving_average#Exponential_moving_average\r\n   */\r\n\r\n  const movingAverageBandwidthSelector = function (decay) {\r\n    let average = -1;\r\n    let lastSystemBandwidth = -1;\r\n    if (decay < 0 || decay > 1) {\r\n      throw new Error('Moving average bandwidth decay must be between 0 and 1.');\r\n    }\r\n    return function () {\r\n      let pixelRatio = this.useDevicePixelRatio ? window.devicePixelRatio || 1 : 1;\r\n      if (!isNaN(this.customPixelRatio)) {\r\n        pixelRatio = this.customPixelRatio;\r\n      }\r\n      if (average < 0) {\r\n        average = this.systemBandwidth;\r\n        lastSystemBandwidth = this.systemBandwidth;\r\n      } // stop the average value from decaying for every 250ms\r\n      // when the systemBandwidth is constant\r\n      // and\r\n      // stop average from setting to a very low value when the\r\n      // systemBandwidth becomes 0 in case of chunk cancellation\r\n\r\n      if (this.systemBandwidth > 0 && this.systemBandwidth !== lastSystemBandwidth) {\r\n        average = decay * this.systemBandwidth + (1 - decay) * average;\r\n        lastSystemBandwidth = this.systemBandwidth;\r\n      }\r\n      return simpleSelector(this.playlists.main, average, parseInt(safeGetComputedStyle(this.tech_.el(), 'width'), 10) * pixelRatio, parseInt(safeGetComputedStyle(this.tech_.el(), 'height'), 10) * pixelRatio, this.limitRenditionByPlayerDimensions, this.playlistController_);\r\n    };\r\n  };\r\n  /**\r\n   * Chooses the appropriate media playlist based on the potential to rebuffer\r\n   *\r\n   * @param {Object} settings\r\n   *        Object of information required to use this selector\r\n   * @param {Object} settings.main\r\n   *        Object representation of the main manifest\r\n   * @param {number} settings.currentTime\r\n   *        The current time of the player\r\n   * @param {number} settings.bandwidth\r\n   *        Current measured bandwidth\r\n   * @param {number} settings.duration\r\n   *        Duration of the media\r\n   * @param {number} settings.segmentDuration\r\n   *        Segment duration to be used in round trip time calculations\r\n   * @param {number} settings.timeUntilRebuffer\r\n   *        Time left in seconds until the player has to rebuffer\r\n   * @param {number} settings.currentTimeline\r\n   *        The current timeline segments are being loaded from\r\n   * @param {SyncController} settings.syncController\r\n   *        SyncController for determining if we have a sync point for a given playlist\r\n   * @return {Object|null}\r\n   *         {Object} return.playlist\r\n   *         The highest bandwidth playlist with the least amount of rebuffering\r\n   *         {Number} return.rebufferingImpact\r\n   *         The amount of time in seconds switching to this playlist will rebuffer. A\r\n   *         negative value means that switching will cause zero rebuffering.\r\n   */\r\n\r\n  const minRebufferMaxBandwidthSelector = function (settings) {\r\n    const {\r\n      main,\r\n      currentTime,\r\n      bandwidth,\r\n      duration,\r\n      segmentDuration,\r\n      timeUntilRebuffer,\r\n      currentTimeline,\r\n      syncController\r\n    } = settings; // filter out any playlists that have been excluded due to\r\n    // incompatible configurations\r\n\r\n    const compatiblePlaylists = main.playlists.filter(playlist => !Playlist.isIncompatible(playlist)); // filter out any playlists that have been disabled manually through the representations\r\n    // api or excluded temporarily due to playback errors.\r\n\r\n    let enabledPlaylists = compatiblePlaylists.filter(Playlist.isEnabled);\r\n    if (!enabledPlaylists.length) {\r\n      // if there are no enabled playlists, then they have all been excluded or disabled\r\n      // by the user through the representations api. In this case, ignore exclusion and\r\n      // fallback to what the user wants by using playlists the user has not disabled.\r\n      enabledPlaylists = compatiblePlaylists.filter(playlist => !Playlist.isDisabled(playlist));\r\n    }\r\n    const bandwidthPlaylists = enabledPlaylists.filter(Playlist.hasAttribute.bind(null, 'BANDWIDTH'));\r\n    const rebufferingEstimates = bandwidthPlaylists.map(playlist => {\r\n      const syncPoint = syncController.getSyncPoint(playlist, duration, currentTimeline, currentTime); // If there is no sync point for this playlist, switching to it will require a\r\n      // sync request first. This will double the request time\r\n\r\n      const numRequests = syncPoint ? 1 : 2;\r\n      const requestTimeEstimate = Playlist.estimateSegmentRequestTime(segmentDuration, bandwidth, playlist);\r\n      const rebufferingImpact = requestTimeEstimate * numRequests - timeUntilRebuffer;\r\n      return {\r\n        playlist,\r\n        rebufferingImpact\r\n      };\r\n    });\r\n    const noRebufferingPlaylists = rebufferingEstimates.filter(estimate => estimate.rebufferingImpact <= 0); // Sort by bandwidth DESC\r\n\r\n    stableSort(noRebufferingPlaylists, (a, b) => comparePlaylistBandwidth(b.playlist, a.playlist));\r\n    if (noRebufferingPlaylists.length) {\r\n      return noRebufferingPlaylists[0];\r\n    }\r\n    stableSort(rebufferingEstimates, (a, b) => a.rebufferingImpact - b.rebufferingImpact);\r\n    return rebufferingEstimates[0] || null;\r\n  };\r\n  /**\r\n   * Chooses the appropriate media playlist, which in this case is the lowest bitrate\r\n   * one with video.  If no renditions with video exist, return the lowest audio rendition.\r\n   *\r\n   * Expects to be called within the context of an instance of VhsHandler\r\n   *\r\n   * @return {Object|null}\r\n   *         {Object} return.playlist\r\n   *         The lowest bitrate playlist that contains a video codec.  If no such rendition\r\n   *         exists pick the lowest audio rendition.\r\n   */\r\n\r\n  const lowestBitrateCompatibleVariantSelector = function () {\r\n    // filter out any playlists that have been excluded due to\r\n    // incompatible configurations or playback errors\r\n    const playlists = this.playlists.main.playlists.filter(Playlist.isEnabled); // Sort ascending by bitrate\r\n\r\n    stableSort(playlists, (a, b) => comparePlaylistBandwidth(a, b)); // Parse and assume that playlists with no video codec have no video\r\n    // (this is not necessarily true, although it is generally true).\r\n    //\r\n    // If an entire manifest has no valid videos everything will get filtered\r\n    // out.\r\n\r\n    const playlistsWithVideo = playlists.filter(playlist => !!codecsForPlaylist(this.playlists.main, playlist).video);\r\n    return playlistsWithVideo[0] || null;\r\n  };\r\n\r\n  /**\r\n   * Combine all segments into a single Uint8Array\r\n   *\r\n   * @param {Object} segmentObj\r\n   * @return {Uint8Array} concatenated bytes\r\n   * @private\r\n   */\r\n  const concatSegments = segmentObj => {\r\n    let offset = 0;\r\n    let tempBuffer;\r\n    if (segmentObj.bytes) {\r\n      tempBuffer = new Uint8Array(segmentObj.bytes); // combine the individual segments into one large typed-array\r\n\r\n      segmentObj.segments.forEach(segment => {\r\n        tempBuffer.set(segment, offset);\r\n        offset += segment.byteLength;\r\n      });\r\n    }\r\n    return tempBuffer;\r\n  };\r\n  /**\r\n   * Example:\r\n   * https://host.com/path1/path2/path3/segment.ts?arg1=val1\r\n   * -->\r\n   * path3/segment.ts\r\n   *\r\n   * @param resolvedUri\r\n   * @return {string}\r\n   */\r\n\r\n  function compactSegmentUrlDescription(resolvedUri) {\r\n    try {\r\n      return new URL(resolvedUri).pathname.split('/').slice(-2).join('/');\r\n    } catch (e) {\r\n      return '';\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @file text-tracks.js\r\n   */\r\n  /**\r\n   * Create captions text tracks on video.js if they do not exist\r\n   *\r\n   * @param {Object} inbandTextTracks a reference to current inbandTextTracks\r\n   * @param {Object} tech the video.js tech\r\n   * @param {Object} captionStream the caption stream to create\r\n   * @private\r\n   */\r\n\r\n  const createCaptionsTrackIfNotExists = function (inbandTextTracks, tech, captionStream) {\r\n    if (!inbandTextTracks[captionStream]) {\r\n      tech.trigger({\r\n        type: 'usage',\r\n        name: 'vhs-608'\r\n      });\r\n      let instreamId = captionStream; // we need to translate SERVICEn for 708 to how mux.js currently labels them\r\n\r\n      if (/^cc708_/.test(captionStream)) {\r\n        instreamId = 'SERVICE' + captionStream.split('_')[1];\r\n      }\r\n      const track = tech.textTracks().getTrackById(instreamId);\r\n      if (track) {\r\n        // Resuse an existing track with a CC# id because this was\r\n        // very likely created by videojs-contrib-hls from information\r\n        // in the m3u8 for us to use\r\n        inbandTextTracks[captionStream] = track;\r\n      } else {\r\n        // This section gets called when we have caption services that aren't specified in the manifest.\r\n        // Manifest level caption services are handled in media-groups.js under CLOSED-CAPTIONS.\r\n        const captionServices = tech.options_.vhs && tech.options_.vhs.captionServices || {};\r\n        let label = captionStream;\r\n        let language = captionStream;\r\n        let def = false;\r\n        const captionService = captionServices[instreamId];\r\n        if (captionService) {\r\n          label = captionService.label;\r\n          language = captionService.language;\r\n          def = captionService.default;\r\n        } // Otherwise, create a track with the default `CC#` label and\r\n        // without a language\r\n\r\n        inbandTextTracks[captionStream] = tech.addRemoteTextTrack({\r\n          kind: 'captions',\r\n          id: instreamId,\r\n          // TODO: investigate why this doesn't seem to turn the caption on by default\r\n          default: def,\r\n          label,\r\n          language\r\n        }, false).track;\r\n      }\r\n    }\r\n  };\r\n  /**\r\n   * Add caption text track data to a source handler given an array of captions\r\n   *\r\n   * @param {Object}\r\n   *   @param {Object} inbandTextTracks the inband text tracks\r\n   *   @param {number} timestampOffset the timestamp offset of the source buffer\r\n   *   @param {Array} captionArray an array of caption data\r\n   * @private\r\n   */\r\n\r\n  const addCaptionData = function ({\r\n    inbandTextTracks,\r\n    captionArray,\r\n    timestampOffset\r\n  }) {\r\n    if (!captionArray) {\r\n      return;\r\n    }\r\n    const Cue = window.WebKitDataCue || window.VTTCue;\r\n    captionArray.forEach(caption => {\r\n      const track = caption.stream; // in CEA 608 captions, video.js/mux.js sends a content array\r\n      // with positioning data\r\n\r\n      if (caption.content) {\r\n        caption.content.forEach(value => {\r\n          const cue = new Cue(caption.startTime + timestampOffset, caption.endTime + timestampOffset, value.text);\r\n          cue.line = value.line;\r\n          cue.align = 'left';\r\n          cue.position = value.position;\r\n          cue.positionAlign = 'line-left';\r\n          inbandTextTracks[track].addCue(cue);\r\n        });\r\n      } else {\r\n        // otherwise, a text value with combined captions is sent\r\n        inbandTextTracks[track].addCue(new Cue(caption.startTime + timestampOffset, caption.endTime + timestampOffset, caption.text));\r\n      }\r\n    });\r\n  };\r\n  /**\r\n   * Define properties on a cue for backwards compatability,\r\n   * but warn the user that the way that they are using it\r\n   * is depricated and will be removed at a later date.\r\n   *\r\n   * @param {Cue} cue the cue to add the properties on\r\n   * @private\r\n   */\r\n\r\n  const deprecateOldCue = function (cue) {\r\n    Object.defineProperties(cue.frame, {\r\n      id: {\r\n        get() {\r\n          videojs.log.warn('cue.frame.id is deprecated. Use cue.value.key instead.');\r\n          return cue.value.key;\r\n        }\r\n      },\r\n      value: {\r\n        get() {\r\n          videojs.log.warn('cue.frame.value is deprecated. Use cue.value.data instead.');\r\n          return cue.value.data;\r\n        }\r\n      },\r\n      privateData: {\r\n        get() {\r\n          videojs.log.warn('cue.frame.privateData is deprecated. Use cue.value.data instead.');\r\n          return cue.value.data;\r\n        }\r\n      }\r\n    });\r\n  };\r\n  /**\r\n   * Add metadata text track data to a source handler given an array of metadata\r\n   *\r\n   * @param {Object}\r\n   *   @param {Object} inbandTextTracks the inband text tracks\r\n   *   @param {Array} metadataArray an array of meta data\r\n   *   @param {number} timestampOffset the timestamp offset of the source buffer\r\n   *   @param {number} videoDuration the duration of the video\r\n   * @private\r\n   */\r\n\r\n  const addMetadata = ({\r\n    inbandTextTracks,\r\n    metadataArray,\r\n    timestampOffset,\r\n    videoDuration\r\n  }) => {\r\n    if (!metadataArray) {\r\n      return;\r\n    }\r\n    const Cue = window.WebKitDataCue || window.VTTCue;\r\n    const metadataTrack = inbandTextTracks.metadataTrack_;\r\n    if (!metadataTrack) {\r\n      return;\r\n    }\r\n    metadataArray.forEach(metadata => {\r\n      const time = metadata.cueTime + timestampOffset; // if time isn't a finite number between 0 and Infinity, like NaN,\r\n      // ignore this bit of metadata.\r\n      // This likely occurs when you have an non-timed ID3 tag like TIT2,\r\n      // which is the \"Title/Songname/Content description\" frame\r\n\r\n      if (typeof time !== 'number' || window.isNaN(time) || time < 0 || !(time < Infinity)) {\r\n        return;\r\n      } // If we have no frames, we can't create a cue.\r\n\r\n      if (!metadata.frames || !metadata.frames.length) {\r\n        return;\r\n      }\r\n      metadata.frames.forEach(frame => {\r\n        const cue = new Cue(time, time, frame.value || frame.url || frame.data || '');\r\n        cue.frame = frame;\r\n        cue.value = frame;\r\n        deprecateOldCue(cue);\r\n        metadataTrack.addCue(cue);\r\n      });\r\n    });\r\n    if (!metadataTrack.cues || !metadataTrack.cues.length) {\r\n      return;\r\n    } // Updating the metadeta cues so that\r\n    // the endTime of each cue is the startTime of the next cue\r\n    // the endTime of last cue is the duration of the video\r\n\r\n    const cues = metadataTrack.cues;\r\n    const cuesArray = []; // Create a copy of the TextTrackCueList...\r\n    // ...disregarding cues with a falsey value\r\n\r\n    for (let i = 0; i < cues.length; i++) {\r\n      if (cues[i]) {\r\n        cuesArray.push(cues[i]);\r\n      }\r\n    } // Group cues by their startTime value\r\n\r\n    const cuesGroupedByStartTime = cuesArray.reduce((obj, cue) => {\r\n      const timeSlot = obj[cue.startTime] || [];\r\n      timeSlot.push(cue);\r\n      obj[cue.startTime] = timeSlot;\r\n      return obj;\r\n    }, {}); // Sort startTimes by ascending order\r\n\r\n    const sortedStartTimes = Object.keys(cuesGroupedByStartTime).sort((a, b) => Number(a) - Number(b)); // Map each cue group's endTime to the next group's startTime\r\n\r\n    sortedStartTimes.forEach((startTime, idx) => {\r\n      const cueGroup = cuesGroupedByStartTime[startTime];\r\n      const finiteDuration = isFinite(videoDuration) ? videoDuration : startTime;\r\n      const nextTime = Number(sortedStartTimes[idx + 1]) || finiteDuration; // Map each cue's endTime the next group's startTime\r\n\r\n      cueGroup.forEach(cue => {\r\n        cue.endTime = nextTime;\r\n      });\r\n    });\r\n  }; // object for mapping daterange attributes\r\n\r\n  const dateRangeAttr = {\r\n    id: 'ID',\r\n    class: 'CLASS',\r\n    startDate: 'START-DATE',\r\n    duration: 'DURATION',\r\n    endDate: 'END-DATE',\r\n    endOnNext: 'END-ON-NEXT',\r\n    plannedDuration: 'PLANNED-DURATION',\r\n    scte35Out: 'SCTE35-OUT',\r\n    scte35In: 'SCTE35-IN'\r\n  };\r\n  const dateRangeKeysToOmit = new Set(['id', 'class', 'startDate', 'duration', 'endDate', 'endOnNext', 'startTime', 'endTime', 'processDateRange']);\r\n  /**\r\n   * Add DateRange metadata text track to a source handler given an array of metadata\r\n   *\r\n   * @param {Object}\r\n   *   @param {Object} inbandTextTracks the inband text tracks\r\n   *   @param {Array} dateRanges parsed media playlist\r\n   * @private\r\n   */\r\n\r\n  const addDateRangeMetadata = ({\r\n    inbandTextTracks,\r\n    dateRanges\r\n  }) => {\r\n    const metadataTrack = inbandTextTracks.metadataTrack_;\r\n    if (!metadataTrack) {\r\n      return;\r\n    }\r\n    const Cue = window.WebKitDataCue || window.VTTCue;\r\n    dateRanges.forEach(dateRange => {\r\n      // we generate multiple cues for each date range with different attributes\r\n      for (const key of Object.keys(dateRange)) {\r\n        if (dateRangeKeysToOmit.has(key)) {\r\n          continue;\r\n        }\r\n        const cue = new Cue(dateRange.startTime, dateRange.endTime, '');\r\n        cue.id = dateRange.id;\r\n        cue.type = 'com.apple.quicktime.HLS';\r\n        cue.value = {\r\n          key: dateRangeAttr[key],\r\n          data: dateRange[key]\r\n        };\r\n        if (key === 'scte35Out' || key === 'scte35In') {\r\n          cue.value.data = new Uint8Array(cue.value.data.match(/[\\da-f]{2}/gi)).buffer;\r\n        }\r\n        metadataTrack.addCue(cue);\r\n      }\r\n      dateRange.processDateRange();\r\n    });\r\n  };\r\n  /**\r\n   * Create metadata text track on video.js if it does not exist\r\n   *\r\n   * @param {Object} inbandTextTracks a reference to current inbandTextTracks\r\n   * @param {string} dispatchType the inband metadata track dispatch type\r\n   * @param {Object} tech the video.js tech\r\n   * @private\r\n   */\r\n\r\n  const createMetadataTrackIfNotExists = (inbandTextTracks, dispatchType, tech) => {\r\n    if (inbandTextTracks.metadataTrack_) {\r\n      return;\r\n    }\r\n    inbandTextTracks.metadataTrack_ = tech.addRemoteTextTrack({\r\n      kind: 'metadata',\r\n      label: 'Timed Metadata'\r\n    }, false).track;\r\n    if (!videojs.browser.IS_ANY_SAFARI) {\r\n      inbandTextTracks.metadataTrack_.inBandMetadataTrackDispatchType = dispatchType;\r\n    }\r\n  };\r\n  /**\r\n   * Remove cues from a track on video.js.\r\n   *\r\n   * @param {Double} start start of where we should remove the cue\r\n   * @param {Double} end end of where the we should remove the cue\r\n   * @param {Object} track the text track to remove the cues from\r\n   * @private\r\n   */\r\n\r\n  const removeCuesFromTrack = function (start, end, track) {\r\n    let i;\r\n    let cue;\r\n    if (!track) {\r\n      return;\r\n    }\r\n    if (!track.cues) {\r\n      return;\r\n    }\r\n    i = track.cues.length;\r\n    while (i--) {\r\n      cue = track.cues[i]; // Remove any cue within the provided start and end time\r\n\r\n      if (cue.startTime >= start && cue.endTime <= end) {\r\n        track.removeCue(cue);\r\n      }\r\n    }\r\n  };\r\n  /**\r\n   * Remove duplicate cues from a track on video.js (a cue is considered a\r\n   * duplicate if it has the same time interval and text as another)\r\n   *\r\n   * @param {Object} track the text track to remove the duplicate cues from\r\n   * @private\r\n   */\r\n\r\n  const removeDuplicateCuesFromTrack = function (track) {\r\n    const cues = track.cues;\r\n    if (!cues) {\r\n      return;\r\n    }\r\n    const uniqueCues = {};\r\n    for (let i = cues.length - 1; i >= 0; i--) {\r\n      const cue = cues[i];\r\n      const cueKey = `${cue.startTime}-${cue.endTime}-${cue.text}`;\r\n      if (uniqueCues[cueKey]) {\r\n        track.removeCue(cue);\r\n      } else {\r\n        uniqueCues[cueKey] = cue;\r\n      }\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Returns a list of gops in the buffer that have a pts value of 3 seconds or more in\r\n   * front of current time.\r\n   *\r\n   * @param {Array} buffer\r\n   *        The current buffer of gop information\r\n   * @param {number} currentTime\r\n   *        The current time\r\n   * @param {Double} mapping\r\n   *        Offset to map display time to stream presentation time\r\n   * @return {Array}\r\n   *         List of gops considered safe to append over\r\n   */\r\n\r\n  const gopsSafeToAlignWith = (buffer, currentTime, mapping) => {\r\n    if (typeof currentTime === 'undefined' || currentTime === null || !buffer.length) {\r\n      return [];\r\n    } // pts value for current time + 3 seconds to give a bit more wiggle room\r\n\r\n    const currentTimePts = Math.ceil((currentTime - mapping + 3) * clock_1);\r\n    let i;\r\n    for (i = 0; i < buffer.length; i++) {\r\n      if (buffer[i].pts > currentTimePts) {\r\n        break;\r\n      }\r\n    }\r\n    return buffer.slice(i);\r\n  };\r\n  /**\r\n   * Appends gop information (timing and byteLength) received by the transmuxer for the\r\n   * gops appended in the last call to appendBuffer\r\n   *\r\n   * @param {Array} buffer\r\n   *        The current buffer of gop information\r\n   * @param {Array} gops\r\n   *        List of new gop information\r\n   * @param {boolean} replace\r\n   *        If true, replace the buffer with the new gop information. If false, append the\r\n   *        new gop information to the buffer in the right location of time.\r\n   * @return {Array}\r\n   *         Updated list of gop information\r\n   */\r\n\r\n  const updateGopBuffer = (buffer, gops, replace) => {\r\n    if (!gops.length) {\r\n      return buffer;\r\n    }\r\n    if (replace) {\r\n      // If we are in safe append mode, then completely overwrite the gop buffer\r\n      // with the most recent appeneded data. This will make sure that when appending\r\n      // future segments, we only try to align with gops that are both ahead of current\r\n      // time and in the last segment appended.\r\n      return gops.slice();\r\n    }\r\n    const start = gops[0].pts;\r\n    let i = 0;\r\n    for (i; i < buffer.length; i++) {\r\n      if (buffer[i].pts >= start) {\r\n        break;\r\n      }\r\n    }\r\n    return buffer.slice(0, i).concat(gops);\r\n  };\r\n  /**\r\n   * Removes gop information in buffer that overlaps with provided start and end\r\n   *\r\n   * @param {Array} buffer\r\n   *        The current buffer of gop information\r\n   * @param {Double} start\r\n   *        position to start the remove at\r\n   * @param {Double} end\r\n   *        position to end the remove at\r\n   * @param {Double} mapping\r\n   *        Offset to map display time to stream presentation time\r\n   */\r\n\r\n  const removeGopBuffer = (buffer, start, end, mapping) => {\r\n    const startPts = Math.ceil((start - mapping) * clock_1);\r\n    const endPts = Math.ceil((end - mapping) * clock_1);\r\n    const updatedBuffer = buffer.slice();\r\n    let i = buffer.length;\r\n    while (i--) {\r\n      if (buffer[i].pts <= endPts) {\r\n        break;\r\n      }\r\n    }\r\n    if (i === -1) {\r\n      // no removal because end of remove range is before start of buffer\r\n      return updatedBuffer;\r\n    }\r\n    let j = i + 1;\r\n    while (j--) {\r\n      if (buffer[j].pts <= startPts) {\r\n        break;\r\n      }\r\n    } // clamp remove range start to 0 index\r\n\r\n    j = Math.max(j, 0);\r\n    updatedBuffer.splice(j, i - j + 1);\r\n    return updatedBuffer;\r\n  };\r\n  const shallowEqual = function (a, b) {\r\n    // if both are undefined\r\n    // or one or the other is undefined\r\n    // they are not equal\r\n    if (!a && !b || !a && b || a && !b) {\r\n      return false;\r\n    } // they are the same object and thus, equal\r\n\r\n    if (a === b) {\r\n      return true;\r\n    } // sort keys so we can make sure they have\r\n    // all the same keys later.\r\n\r\n    const akeys = Object.keys(a).sort();\r\n    const bkeys = Object.keys(b).sort(); // different number of keys, not equal\r\n\r\n    if (akeys.length !== bkeys.length) {\r\n      return false;\r\n    }\r\n    for (let i = 0; i < akeys.length; i++) {\r\n      const key = akeys[i]; // different sorted keys, not equal\r\n\r\n      if (key !== bkeys[i]) {\r\n        return false;\r\n      } // different values, not equal\r\n\r\n      if (a[key] !== b[key]) {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  };\r\n\r\n  /**\r\n   * The segment loader has no recourse except to fetch a segment in the\r\n   * current playlist and use the internal timestamps in that segment to\r\n   * generate a syncPoint. This function returns a good candidate index\r\n   * for that process.\r\n   *\r\n   * @param {Array} segments - the segments array from a playlist.\r\n   * @return {number} An index of a segment from the playlist to load\r\n   */\r\n\r\n  const getSyncSegmentCandidate = function (currentTimeline, segments, targetTime) {\r\n    segments = segments || [];\r\n    const timelineSegments = [];\r\n    let time = 0;\r\n    for (let i = 0; i < segments.length; i++) {\r\n      const segment = segments[i];\r\n      if (currentTimeline === segment.timeline) {\r\n        timelineSegments.push(i);\r\n        time += segment.duration;\r\n        if (time > targetTime) {\r\n          return i;\r\n        }\r\n      }\r\n    }\r\n    if (timelineSegments.length === 0) {\r\n      return 0;\r\n    } // default to the last timeline segment\r\n\r\n    return timelineSegments[timelineSegments.length - 1];\r\n  }; // In the event of a quota exceeded error, keep at least one second of back buffer. This\r\n  // number was arbitrarily chosen and may be updated in the future, but seemed reasonable\r\n  // as a start to prevent any potential issues with removing content too close to the\r\n  // playhead.\r\n\r\n  const MIN_BACK_BUFFER = 1; // in ms\r\n\r\n  const CHECK_BUFFER_DELAY = 500;\r\n  const finite = num => typeof num === 'number' && isFinite(num); // With most content hovering around 30fps, if a segment has a duration less than a half\r\n  // frame at 30fps or one frame at 60fps, the bandwidth and throughput calculations will\r\n  // not accurately reflect the rest of the content.\r\n\r\n  const MIN_SEGMENT_DURATION_TO_SAVE_STATS = 1 / 60;\r\n  const illegalMediaSwitch = (loaderType, startingMedia, trackInfo) => {\r\n    // Although these checks should most likely cover non 'main' types, for now it narrows\r\n    // the scope of our checks.\r\n    if (loaderType !== 'main' || !startingMedia || !trackInfo) {\r\n      return null;\r\n    }\r\n    if (!trackInfo.hasAudio && !trackInfo.hasVideo) {\r\n      return 'Neither audio nor video found in segment.';\r\n    }\r\n    if (startingMedia.hasVideo && !trackInfo.hasVideo) {\r\n      return 'Only audio found in segment when we expected video.' + ' We can\\'t switch to audio only from a stream that had video.' + ' To get rid of this message, please add codec information to the manifest.';\r\n    }\r\n    if (!startingMedia.hasVideo && trackInfo.hasVideo) {\r\n      return 'Video found in segment when we expected only audio.' + ' We can\\'t switch to a stream with video from an audio only stream.' + ' To get rid of this message, please add codec information to the manifest.';\r\n    }\r\n    return null;\r\n  };\r\n  /**\r\n   * Calculates a time value that is safe to remove from the back buffer without interrupting\r\n   * playback.\r\n   *\r\n   * @param {TimeRange} seekable\r\n   *        The current seekable range\r\n   * @param {number} currentTime\r\n   *        The current time of the player\r\n   * @param {number} targetDuration\r\n   *        The target duration of the current playlist\r\n   * @return {number}\r\n   *         Time that is safe to remove from the back buffer without interrupting playback\r\n   */\r\n\r\n  const safeBackBufferTrimTime = (seekable, currentTime, targetDuration) => {\r\n    // 30 seconds before the playhead provides a safe default for trimming.\r\n    //\r\n    // Choosing a reasonable default is particularly important for high bitrate content and\r\n    // VOD videos/live streams with large windows, as the buffer may end up overfilled and\r\n    // throw an APPEND_BUFFER_ERR.\r\n    let trimTime = currentTime - Config.BACK_BUFFER_LENGTH;\r\n    if (seekable.length) {\r\n      // Some live playlists may have a shorter window of content than the full allowed back\r\n      // buffer. For these playlists, don't save content that's no longer within the window.\r\n      trimTime = Math.max(trimTime, seekable.start(0));\r\n    } // Don't remove within target duration of the current time to avoid the possibility of\r\n    // removing the GOP currently being played, as removing it can cause playback stalls.\r\n\r\n    const maxTrimTime = currentTime - targetDuration;\r\n    return Math.min(maxTrimTime, trimTime);\r\n  };\r\n  const segmentInfoString = segmentInfo => {\r\n    const {\r\n      startOfSegment,\r\n      duration,\r\n      segment,\r\n      part,\r\n      playlist: {\r\n        mediaSequence: seq,\r\n        id,\r\n        segments = []\r\n      },\r\n      mediaIndex: index,\r\n      partIndex,\r\n      timeline\r\n    } = segmentInfo;\r\n    const segmentLen = segments.length - 1;\r\n    let selection = 'mediaIndex/partIndex increment';\r\n    if (segmentInfo.getMediaInfoForTime) {\r\n      selection = `getMediaInfoForTime (${segmentInfo.getMediaInfoForTime})`;\r\n    } else if (segmentInfo.isSyncRequest) {\r\n      selection = 'getSyncSegmentCandidate (isSyncRequest)';\r\n    }\r\n    if (segmentInfo.independent) {\r\n      selection += ` with independent ${segmentInfo.independent}`;\r\n    }\r\n    const hasPartIndex = typeof partIndex === 'number';\r\n    const name = segmentInfo.segment.uri ? 'segment' : 'pre-segment';\r\n    const zeroBasedPartCount = hasPartIndex ? getKnownPartCount({\r\n      preloadSegment: segment\r\n    }) - 1 : 0;\r\n    return `${name} [${seq + index}/${seq + segmentLen}]` + (hasPartIndex ? ` part [${partIndex}/${zeroBasedPartCount}]` : '') + ` segment start/end [${segment.start} => ${segment.end}]` + (hasPartIndex ? ` part start/end [${part.start} => ${part.end}]` : '') + ` startOfSegment [${startOfSegment}]` + ` duration [${duration}]` + ` timeline [${timeline}]` + ` selected by [${selection}]` + ` playlist [${id}]`;\r\n  };\r\n  const timingInfoPropertyForMedia = mediaType => `${mediaType}TimingInfo`;\r\n  /**\r\n   * Returns the timestamp offset to use for the segment.\r\n   *\r\n   * @param {number} segmentTimeline\r\n   *        The timeline of the segment\r\n   * @param {number} currentTimeline\r\n   *        The timeline currently being followed by the loader\r\n   * @param {number} startOfSegment\r\n   *        The estimated segment start\r\n   * @param {TimeRange[]} buffered\r\n   *        The loader's buffer\r\n   * @param {boolean} overrideCheck\r\n   *        If true, no checks are made to see if the timestamp offset value should be set,\r\n   *        but sets it directly to a value.\r\n   *\r\n   * @return {number|null}\r\n   *         Either a number representing a new timestamp offset, or null if the segment is\r\n   *         part of the same timeline\r\n   */\r\n\r\n  const timestampOffsetForSegment = ({\r\n    segmentTimeline,\r\n    currentTimeline,\r\n    startOfSegment,\r\n    buffered,\r\n    overrideCheck\r\n  }) => {\r\n    // Check to see if we are crossing a discontinuity to see if we need to set the\r\n    // timestamp offset on the transmuxer and source buffer.\r\n    //\r\n    // Previously, we changed the timestampOffset if the start of this segment was less than\r\n    // the currently set timestampOffset, but this isn't desirable as it can produce bad\r\n    // behavior, especially around long running live streams.\r\n    if (!overrideCheck && segmentTimeline === currentTimeline) {\r\n      return null;\r\n    } // When changing renditions, it's possible to request a segment on an older timeline. For\r\n    // instance, given two renditions with the following:\r\n    //\r\n    // #EXTINF:10\r\n    // segment1\r\n    // #EXT-X-DISCONTINUITY\r\n    // #EXTINF:10\r\n    // segment2\r\n    // #EXTINF:10\r\n    // segment3\r\n    //\r\n    // And the current player state:\r\n    //\r\n    // current time: 8\r\n    // buffer: 0 => 20\r\n    //\r\n    // The next segment on the current rendition would be segment3, filling the buffer from\r\n    // 20s onwards. However, if a rendition switch happens after segment2 was requested,\r\n    // then the next segment to be requested will be segment1 from the new rendition in\r\n    // order to fill time 8 and onwards. Using the buffered end would result in repeated\r\n    // content (since it would position segment1 of the new rendition starting at 20s). This\r\n    // case can be identified when the new segment's timeline is a prior value. Instead of\r\n    // using the buffered end, the startOfSegment can be used, which, hopefully, will be\r\n    // more accurate to the actual start time of the segment.\r\n\r\n    if (segmentTimeline < currentTimeline) {\r\n      return startOfSegment;\r\n    } // segmentInfo.startOfSegment used to be used as the timestamp offset, however, that\r\n    // value uses the end of the last segment if it is available. While this value\r\n    // should often be correct, it's better to rely on the buffered end, as the new\r\n    // content post discontinuity should line up with the buffered end as if it were\r\n    // time 0 for the new content.\r\n\r\n    return buffered.length ? buffered.end(buffered.length - 1) : startOfSegment;\r\n  };\r\n  /**\r\n   * Returns whether or not the loader should wait for a timeline change from the timeline\r\n   * change controller before processing the segment.\r\n   *\r\n   * Primary timing in VHS goes by video. This is different from most media players, as\r\n   * audio is more often used as the primary timing source. For the foreseeable future, VHS\r\n   * will continue to use video as the primary timing source, due to the current logic and\r\n   * expectations built around it.\r\n\r\n   * Since the timing follows video, in order to maintain sync, the video loader is\r\n   * responsible for setting both audio and video source buffer timestamp offsets.\r\n   *\r\n   * Setting different values for audio and video source buffers could lead to\r\n   * desyncing. The following examples demonstrate some of the situations where this\r\n   * distinction is important. Note that all of these cases involve demuxed content. When\r\n   * content is muxed, the audio and video are packaged together, therefore syncing\r\n   * separate media playlists is not an issue.\r\n   *\r\n   * CASE 1: Audio prepares to load a new timeline before video:\r\n   *\r\n   * Timeline:       0                 1\r\n   * Audio Segments: 0 1 2 3 4 5 DISCO 6 7 8 9\r\n   * Audio Loader:                     ^\r\n   * Video Segments: 0 1 2 3 4 5 DISCO 6 7 8 9\r\n   * Video Loader              ^\r\n   *\r\n   * In the above example, the audio loader is preparing to load the 6th segment, the first\r\n   * after a discontinuity, while the video loader is still loading the 5th segment, before\r\n   * the discontinuity.\r\n   *\r\n   * If the audio loader goes ahead and loads and appends the 6th segment before the video\r\n   * loader crosses the discontinuity, then when appended, the 6th audio segment will use\r\n   * the timestamp offset from timeline 0. This will likely lead to desyncing. In addition,\r\n   * the audio loader must provide the audioAppendStart value to trim the content in the\r\n   * transmuxer, and that value relies on the audio timestamp offset. Since the audio\r\n   * timestamp offset is set by the video (main) loader, the audio loader shouldn't load the\r\n   * segment until that value is provided.\r\n   *\r\n   * CASE 2: Video prepares to load a new timeline before audio:\r\n   *\r\n   * Timeline:       0                 1\r\n   * Audio Segments: 0 1 2 3 4 5 DISCO 6 7 8 9\r\n   * Audio Loader:             ^\r\n   * Video Segments: 0 1 2 3 4 5 DISCO 6 7 8 9\r\n   * Video Loader                      ^\r\n   *\r\n   * In the above example, the video loader is preparing to load the 6th segment, the first\r\n   * after a discontinuity, while the audio loader is still loading the 5th segment, before\r\n   * the discontinuity.\r\n   *\r\n   * If the video loader goes ahead and loads and appends the 6th segment, then once the\r\n   * segment is loaded and processed, both the video and audio timestamp offsets will be\r\n   * set, since video is used as the primary timing source. This is to ensure content lines\r\n   * up appropriately, as any modifications to the video timing are reflected by audio when\r\n   * the video loader sets the audio and video timestamp offsets to the same value. However,\r\n   * setting the timestamp offset for audio before audio has had a chance to change\r\n   * timelines will likely lead to desyncing, as the audio loader will append segment 5 with\r\n   * a timestamp intended to apply to segments from timeline 1 rather than timeline 0.\r\n   *\r\n   * CASE 3: When seeking, audio prepares to load a new timeline before video\r\n   *\r\n   * Timeline:       0                 1\r\n   * Audio Segments: 0 1 2 3 4 5 DISCO 6 7 8 9\r\n   * Audio Loader:           ^\r\n   * Video Segments: 0 1 2 3 4 5 DISCO 6 7 8 9\r\n   * Video Loader            ^\r\n   *\r\n   * In the above example, both audio and video loaders are loading segments from timeline\r\n   * 0, but imagine that the seek originated from timeline 1.\r\n   *\r\n   * When seeking to a new timeline, the timestamp offset will be set based on the expected\r\n   * segment start of the loaded video segment. In order to maintain sync, the audio loader\r\n   * must wait for the video loader to load its segment and update both the audio and video\r\n   * timestamp offsets before it may load and append its own segment. This is the case\r\n   * whether the seek results in a mismatched segment request (e.g., the audio loader\r\n   * chooses to load segment 3 and the video loader chooses to load segment 4) or the\r\n   * loaders choose to load the same segment index from each playlist, as the segments may\r\n   * not be aligned perfectly, even for matching segment indexes.\r\n   *\r\n   * @param {Object} timelinechangeController\r\n   * @param {number} currentTimeline\r\n   *        The timeline currently being followed by the loader\r\n   * @param {number} segmentTimeline\r\n   *        The timeline of the segment being loaded\r\n   * @param {('main'|'audio')} loaderType\r\n   *        The loader type\r\n   * @param {boolean} audioDisabled\r\n   *        Whether the audio is disabled for the loader. This should only be true when the\r\n   *        loader may have muxed audio in its segment, but should not append it, e.g., for\r\n   *        the main loader when an alternate audio playlist is active.\r\n   *\r\n   * @return {boolean}\r\n   *         Whether the loader should wait for a timeline change from the timeline change\r\n   *         controller before processing the segment\r\n   */\r\n\r\n  const shouldWaitForTimelineChange = ({\r\n    timelineChangeController,\r\n    currentTimeline,\r\n    segmentTimeline,\r\n    loaderType,\r\n    audioDisabled\r\n  }) => {\r\n    if (currentTimeline === segmentTimeline) {\r\n      return false;\r\n    }\r\n    if (loaderType === 'audio') {\r\n      const lastMainTimelineChange = timelineChangeController.lastTimelineChange({\r\n        type: 'main'\r\n      }); // Audio loader should wait if:\r\n      //\r\n      // * main hasn't had a timeline change yet (thus has not loaded its first segment)\r\n      // * main hasn't yet changed to the timeline audio is looking to load\r\n\r\n      return !lastMainTimelineChange || lastMainTimelineChange.to !== segmentTimeline;\r\n    } // The main loader only needs to wait for timeline changes if there's demuxed audio.\r\n    // Otherwise, there's nothing to wait for, since audio would be muxed into the main\r\n    // loader's segments (or the content is audio/video only and handled by the main\r\n    // loader).\r\n\r\n    if (loaderType === 'main' && audioDisabled) {\r\n      const pendingAudioTimelineChange = timelineChangeController.pendingTimelineChange({\r\n        type: 'audio'\r\n      }); // Main loader should wait for the audio loader if audio is not pending a timeline\r\n      // change to the current timeline.\r\n      //\r\n      // Since the main loader is responsible for setting the timestamp offset for both\r\n      // audio and video, the main loader must wait for audio to be about to change to its\r\n      // timeline before setting the offset, otherwise, if audio is behind in loading,\r\n      // segments from the previous timeline would be adjusted by the new timestamp offset.\r\n      //\r\n      // This requirement means that video will not cross a timeline until the audio is\r\n      // about to cross to it, so that way audio and video will always cross the timeline\r\n      // together.\r\n      //\r\n      // In addition to normal timeline changes, these rules also apply to the start of a\r\n      // stream (going from a non-existent timeline, -1, to timeline 0). It's important\r\n      // that these rules apply to the first timeline change because if they did not, it's\r\n      // possible that the main loader will cross two timelines before the audio loader has\r\n      // crossed one. Logic may be implemented to handle the startup as a special case, but\r\n      // it's easier to simply treat all timeline changes the same.\r\n\r\n      if (pendingAudioTimelineChange && pendingAudioTimelineChange.to === segmentTimeline) {\r\n        return false;\r\n      }\r\n      return true;\r\n    }\r\n    return false;\r\n  };\r\n  const shouldFixBadTimelineChanges = timelineChangeController => {\r\n    if (!timelineChangeController) {\r\n      return false;\r\n    }\r\n    const pendingAudioTimelineChange = timelineChangeController.pendingTimelineChange({\r\n      type: 'audio'\r\n    });\r\n    const pendingMainTimelineChange = timelineChangeController.pendingTimelineChange({\r\n      type: 'main'\r\n    });\r\n    const hasPendingTimelineChanges = pendingAudioTimelineChange && pendingMainTimelineChange;\r\n    const differentPendingChanges = hasPendingTimelineChanges && pendingAudioTimelineChange.to !== pendingMainTimelineChange.to;\r\n    const isNotInitialPendingTimelineChange = hasPendingTimelineChanges && pendingAudioTimelineChange.from !== -1 && pendingMainTimelineChange.from !== -1;\r\n    if (isNotInitialPendingTimelineChange && differentPendingChanges) {\r\n      return true;\r\n    }\r\n    return false;\r\n  };\r\n  /**\r\n   * Check if the pending audio timeline change is behind the\r\n   * pending main timeline change.\r\n   *\r\n   * @param {SegmentLoader} segmentLoader\r\n   * @return {boolean}\r\n   */\r\n\r\n  const isAudioTimelineBehind = segmentLoader => {\r\n    const pendingAudioTimelineChange = segmentLoader.timelineChangeController_.pendingTimelineChange({\r\n      type: 'audio'\r\n    });\r\n    const pendingMainTimelineChange = segmentLoader.timelineChangeController_.pendingTimelineChange({\r\n      type: 'main'\r\n    });\r\n    const hasPendingTimelineChanges = pendingAudioTimelineChange && pendingMainTimelineChange;\r\n    return hasPendingTimelineChanges && pendingAudioTimelineChange.to < pendingMainTimelineChange.to;\r\n  };\r\n  /**\r\n   * A method to check if the player is waiting for a timeline change, and fixes\r\n   * certain scenarios where the timelines need to be updated.\r\n   *\r\n   * @param {SegmentLoader} segmentLoader\r\n   */\r\n\r\n  const checkAndFixTimelines = segmentLoader => {\r\n    const segmentInfo = segmentLoader.pendingSegment_;\r\n    if (!segmentInfo) {\r\n      return;\r\n    }\r\n    const waitingForTimelineChange = shouldWaitForTimelineChange({\r\n      timelineChangeController: segmentLoader.timelineChangeController_,\r\n      currentTimeline: segmentLoader.currentTimeline_,\r\n      segmentTimeline: segmentInfo.timeline,\r\n      loaderType: segmentLoader.loaderType_,\r\n      audioDisabled: segmentLoader.audioDisabled_\r\n    });\r\n    if (waitingForTimelineChange && shouldFixBadTimelineChanges(segmentLoader.timelineChangeController_)) {\r\n      if (isAudioTimelineBehind(segmentLoader)) {\r\n        segmentLoader.timelineChangeController_.trigger('audioTimelineBehind');\r\n        return;\r\n      }\r\n      segmentLoader.timelineChangeController_.trigger('fixBadTimelineChange');\r\n    }\r\n  };\r\n  const mediaDuration = timingInfos => {\r\n    let maxDuration = 0;\r\n    ['video', 'audio'].forEach(function (type) {\r\n      const typeTimingInfo = timingInfos[`${type}TimingInfo`];\r\n      if (!typeTimingInfo) {\r\n        return;\r\n      }\r\n      const {\r\n        start,\r\n        end\r\n      } = typeTimingInfo;\r\n      let duration;\r\n      if (typeof start === 'bigint' || typeof end === 'bigint') {\r\n        duration = window.BigInt(end) - window.BigInt(start);\r\n      } else if (typeof start === 'number' && typeof end === 'number') {\r\n        duration = end - start;\r\n      }\r\n      if (typeof duration !== 'undefined' && duration > maxDuration) {\r\n        maxDuration = duration;\r\n      }\r\n    }); // convert back to a number if it is lower than MAX_SAFE_INTEGER\r\n    // as we only need BigInt when we are above that.\r\n\r\n    if (typeof maxDuration === 'bigint' && maxDuration < Number.MAX_SAFE_INTEGER) {\r\n      maxDuration = Number(maxDuration);\r\n    }\r\n    return maxDuration;\r\n  };\r\n  const segmentTooLong = ({\r\n    segmentDuration,\r\n    maxDuration\r\n  }) => {\r\n    // 0 duration segments are most likely due to metadata only segments or a lack of\r\n    // information.\r\n    if (!segmentDuration) {\r\n      return false;\r\n    } // For HLS:\r\n    //\r\n    // https://tools.ietf.org/html/draft-pantos-http-live-streaming-23#section-4.3.3.1\r\n    // The EXTINF duration of each Media Segment in the Playlist\r\n    // file, when rounded to the nearest integer, MUST be less than or equal\r\n    // to the target duration; longer segments can trigger playback stalls\r\n    // or other errors.\r\n    //\r\n    // For DASH, the mpd-parser uses the largest reported segment duration as the target\r\n    // duration. Although that reported duration is occasionally approximate (i.e., not\r\n    // exact), a strict check may report that a segment is too long more often in DASH.\r\n\r\n    return Math.round(segmentDuration) > maxDuration + TIME_FUDGE_FACTOR;\r\n  };\r\n  const getTroublesomeSegmentDurationMessage = (segmentInfo, sourceType) => {\r\n    // Right now we aren't following DASH's timing model exactly, so only perform\r\n    // this check for HLS content.\r\n    if (sourceType !== 'hls') {\r\n      return null;\r\n    }\r\n    const segmentDuration = mediaDuration({\r\n      audioTimingInfo: segmentInfo.audioTimingInfo,\r\n      videoTimingInfo: segmentInfo.videoTimingInfo\r\n    }); // Don't report if we lack information.\r\n    //\r\n    // If the segment has a duration of 0 it is either a lack of information or a\r\n    // metadata only segment and shouldn't be reported here.\r\n\r\n    if (!segmentDuration) {\r\n      return null;\r\n    }\r\n    const targetDuration = segmentInfo.playlist.targetDuration;\r\n    const isSegmentWayTooLong = segmentTooLong({\r\n      segmentDuration,\r\n      maxDuration: targetDuration * 2\r\n    });\r\n    const isSegmentSlightlyTooLong = segmentTooLong({\r\n      segmentDuration,\r\n      maxDuration: targetDuration\r\n    });\r\n    const segmentTooLongMessage = `Segment with index ${segmentInfo.mediaIndex} ` + `from playlist ${segmentInfo.playlist.id} ` + `has a duration of ${segmentDuration} ` + `when the reported duration is ${segmentInfo.duration} ` + `and the target duration is ${targetDuration}. ` + 'For HLS content, a duration in excess of the target duration may result in ' + 'playback issues. See the HLS specification section on EXT-X-TARGETDURATION for ' + 'more details: ' + 'https://tools.ietf.org/html/draft-pantos-http-live-streaming-23#section-4.3.3.1';\r\n    if (isSegmentWayTooLong || isSegmentSlightlyTooLong) {\r\n      return {\r\n        severity: isSegmentWayTooLong ? 'warn' : 'info',\r\n        message: segmentTooLongMessage\r\n      };\r\n    }\r\n    return null;\r\n  };\r\n  /**\r\n   *\r\n   * @param {Object} options type of segment loader and segment either segmentInfo or simple segment\r\n   * @return a segmentInfo payload for events or errors.\r\n   */\r\n\r\n  const segmentInfoPayload = ({\r\n    type,\r\n    segment\r\n  }) => {\r\n    if (!segment) {\r\n      return;\r\n    }\r\n    const isEncrypted = Boolean(segment.key || segment.map && segment.map.ke);\r\n    const isMediaInitialization = Boolean(segment.map && !segment.map.bytes);\r\n    const start = segment.startOfSegment === undefined ? segment.start : segment.startOfSegment;\r\n    return {\r\n      type: type || segment.type,\r\n      uri: segment.resolvedUri || segment.uri,\r\n      start,\r\n      duration: segment.duration,\r\n      isEncrypted,\r\n      isMediaInitialization\r\n    };\r\n  };\r\n  /**\r\n   * An object that manages segment loading and appending.\r\n   *\r\n   * @class SegmentLoader\r\n   * @param {Object} options required and optional options\r\n   * @extends videojs.EventTarget\r\n   */\r\n\r\n  class SegmentLoader extends videojs.EventTarget {\r\n    constructor(settings, options = {}) {\r\n      super(); // check pre-conditions\r\n\r\n      if (!settings) {\r\n        throw new TypeError('Initialization settings are required');\r\n      }\r\n      if (typeof settings.currentTime !== 'function') {\r\n        throw new TypeError('No currentTime getter specified');\r\n      }\r\n      if (!settings.mediaSource) {\r\n        throw new TypeError('No MediaSource specified');\r\n      } // public properties\r\n\r\n      this.bandwidth = settings.bandwidth;\r\n      this.throughput = {\r\n        rate: 0,\r\n        count: 0\r\n      };\r\n      this.roundTrip = NaN;\r\n      this.resetStats_();\r\n      this.mediaIndex = null;\r\n      this.partIndex = null; // private settings\r\n\r\n      this.hasPlayed_ = settings.hasPlayed;\r\n      this.currentTime_ = settings.currentTime;\r\n      this.seekable_ = settings.seekable;\r\n      this.seeking_ = settings.seeking;\r\n      this.duration_ = settings.duration;\r\n      this.mediaSource_ = settings.mediaSource;\r\n      this.vhs_ = settings.vhs;\r\n      this.loaderType_ = settings.loaderType;\r\n      this.currentMediaInfo_ = void 0;\r\n      this.startingMediaInfo_ = void 0;\r\n      this.segmentMetadataTrack_ = settings.segmentMetadataTrack;\r\n      this.goalBufferLength_ = settings.goalBufferLength;\r\n      this.sourceType_ = settings.sourceType;\r\n      this.sourceUpdater_ = settings.sourceUpdater;\r\n      this.inbandTextTracks_ = settings.inbandTextTracks;\r\n      this.state_ = 'INIT';\r\n      this.timelineChangeController_ = settings.timelineChangeController;\r\n      this.shouldSaveSegmentTimingInfo_ = true;\r\n      this.parse708captions_ = settings.parse708captions;\r\n      this.useDtsForTimestampOffset_ = settings.useDtsForTimestampOffset;\r\n      this.captionServices_ = settings.captionServices;\r\n      this.exactManifestTimings = settings.exactManifestTimings;\r\n      this.addMetadataToTextTrack = settings.addMetadataToTextTrack; // private instance variables\r\n\r\n      this.checkBufferTimeout_ = null;\r\n      this.error_ = void 0;\r\n      this.currentTimeline_ = -1;\r\n      this.shouldForceTimestampOffsetAfterResync_ = false;\r\n      this.pendingSegment_ = null;\r\n      this.xhrOptions_ = null;\r\n      this.pendingSegments_ = [];\r\n      this.audioDisabled_ = false;\r\n      this.isPendingTimestampOffset_ = false; // TODO possibly move gopBuffer and timeMapping info to a separate controller\r\n\r\n      this.gopBuffer_ = [];\r\n      this.timeMapping_ = 0;\r\n      this.safeAppend_ = false;\r\n      this.appendInitSegment_ = {\r\n        audio: true,\r\n        video: true\r\n      };\r\n      this.playlistOfLastInitSegment_ = {\r\n        audio: null,\r\n        video: null\r\n      };\r\n      this.callQueue_ = []; // If the segment loader prepares to load a segment, but does not have enough\r\n      // information yet to start the loading process (e.g., if the audio loader wants to\r\n      // load a segment from the next timeline but the main loader hasn't yet crossed that\r\n      // timeline), then the load call will be added to the queue until it is ready to be\r\n      // processed.\r\n\r\n      this.loadQueue_ = [];\r\n      this.metadataQueue_ = {\r\n        id3: [],\r\n        caption: []\r\n      };\r\n      this.waitingOnRemove_ = false;\r\n      this.quotaExceededErrorRetryTimeout_ = null; // Fragmented mp4 playback\r\n\r\n      this.activeInitSegmentId_ = null;\r\n      this.initSegments_ = {}; // HLSe playback\r\n\r\n      this.cacheEncryptionKeys_ = settings.cacheEncryptionKeys;\r\n      this.keyCache_ = {};\r\n      this.decrypter_ = settings.decrypter; // Manages the tracking and generation of sync-points, mappings\r\n      // between a time in the display time and a segment index within\r\n      // a playlist\r\n\r\n      this.syncController_ = settings.syncController;\r\n      this.syncPoint_ = {\r\n        segmentIndex: 0,\r\n        time: 0\r\n      };\r\n      this.transmuxer_ = this.createTransmuxer_();\r\n      this.triggerSyncInfoUpdate_ = () => this.trigger('syncinfoupdate');\r\n      this.syncController_.on('syncinfoupdate', this.triggerSyncInfoUpdate_);\r\n      this.mediaSource_.addEventListener('sourceopen', () => {\r\n        if (!this.isEndOfStream_()) {\r\n          this.ended_ = false;\r\n        }\r\n      }); // ...for determining the fetch location\r\n\r\n      this.fetchAtBuffer_ = false;\r\n      this.logger_ = logger(`SegmentLoader[${this.loaderType_}]`);\r\n      Object.defineProperty(this, 'state', {\r\n        get() {\r\n          return this.state_;\r\n        },\r\n        set(newState) {\r\n          if (newState !== this.state_) {\r\n            this.logger_(`${this.state_} -> ${newState}`);\r\n            this.state_ = newState;\r\n            this.trigger('statechange');\r\n          }\r\n        }\r\n      });\r\n      this.sourceUpdater_.on('ready', () => {\r\n        if (this.hasEnoughInfoToAppend_()) {\r\n          this.processCallQueue_();\r\n        } else {\r\n          checkAndFixTimelines(this);\r\n        }\r\n      });\r\n      this.sourceUpdater_.on('codecschange', metadata => {\r\n        this.trigger(_extends$1({\r\n          type: 'codecschange'\r\n        }, metadata));\r\n      }); // Only the main loader needs to listen for pending timeline changes, as the main\r\n      // loader should wait for audio to be ready to change its timeline so that both main\r\n      // and audio timelines change together. For more details, see the\r\n      // shouldWaitForTimelineChange function.\r\n\r\n      if (this.loaderType_ === 'main') {\r\n        this.timelineChangeController_.on('pendingtimelinechange', () => {\r\n          if (this.hasEnoughInfoToAppend_()) {\r\n            this.processCallQueue_();\r\n          } else {\r\n            checkAndFixTimelines(this);\r\n          }\r\n        });\r\n      } // The main loader only listens on pending timeline changes, but the audio loader,\r\n      // since its loads follow main, needs to listen on timeline changes. For more details,\r\n      // see the shouldWaitForTimelineChange function.\r\n\r\n      if (this.loaderType_ === 'audio') {\r\n        this.timelineChangeController_.on('timelinechange', metadata => {\r\n          this.trigger(_extends$1({\r\n            type: 'timelinechange'\r\n          }, metadata));\r\n          if (this.hasEnoughInfoToLoad_()) {\r\n            this.processLoadQueue_();\r\n          } else {\r\n            checkAndFixTimelines(this);\r\n          }\r\n          if (this.hasEnoughInfoToAppend_()) {\r\n            this.processCallQueue_();\r\n          } else {\r\n            checkAndFixTimelines(this);\r\n          }\r\n        });\r\n      }\r\n    }\r\n    /**\r\n     * TODO: Current sync controller consists of many hls-specific strategies\r\n     * media sequence sync is also hls-specific, and we would like to be protocol-agnostic on this level\r\n     * this should be a part of the sync-controller and sync controller should expect different strategy list based on the protocol.\r\n     *\r\n     * @return {MediaSequenceSync|null}\r\n     * @private\r\n     */\r\n\r\n    get mediaSequenceSync_() {\r\n      return this.syncController_.getMediaSequenceSync(this.loaderType_);\r\n    }\r\n    createTransmuxer_() {\r\n      return segmentTransmuxer.createTransmuxer({\r\n        remux: false,\r\n        alignGopsAtEnd: this.safeAppend_,\r\n        keepOriginalTimestamps: true,\r\n        parse708captions: this.parse708captions_,\r\n        captionServices: this.captionServices_\r\n      });\r\n    }\r\n    /**\r\n     * reset all of our media stats\r\n     *\r\n     * @private\r\n     */\r\n\r\n    resetStats_() {\r\n      this.mediaBytesTransferred = 0;\r\n      this.mediaRequests = 0;\r\n      this.mediaRequestsAborted = 0;\r\n      this.mediaRequestsTimedout = 0;\r\n      this.mediaRequestsErrored = 0;\r\n      this.mediaTransferDuration = 0;\r\n      this.mediaSecondsLoaded = 0;\r\n      this.mediaAppends = 0;\r\n    }\r\n    /**\r\n     * dispose of the SegmentLoader and reset to the default state\r\n     */\r\n\r\n    dispose() {\r\n      this.trigger('dispose');\r\n      this.state = 'DISPOSED';\r\n      this.pause();\r\n      this.abort_();\r\n      if (this.transmuxer_) {\r\n        this.transmuxer_.terminate();\r\n      }\r\n      this.resetStats_();\r\n      if (this.checkBufferTimeout_) {\r\n        window.clearTimeout(this.checkBufferTimeout_);\r\n      }\r\n      if (this.syncController_ && this.triggerSyncInfoUpdate_) {\r\n        this.syncController_.off('syncinfoupdate', this.triggerSyncInfoUpdate_);\r\n      }\r\n      this.off();\r\n    }\r\n    setAudio(enable) {\r\n      this.audioDisabled_ = !enable;\r\n      if (enable) {\r\n        this.appendInitSegment_.audio = true;\r\n      } else {\r\n        // remove current track audio if it gets disabled\r\n        this.sourceUpdater_.removeAudio(0, this.duration_());\r\n      }\r\n    }\r\n    /**\r\n     * abort anything that is currently doing on with the SegmentLoader\r\n     * and reset to a default state\r\n     */\r\n\r\n    abort() {\r\n      if (this.state !== 'WAITING') {\r\n        if (this.pendingSegment_) {\r\n          this.pendingSegment_ = null;\r\n        }\r\n        this.timelineChangeController_.clearPendingTimelineChange(this.loaderType_);\r\n        return;\r\n      }\r\n      this.abort_(); // We aborted the requests we were waiting on, so reset the loader's state to READY\r\n      // since we are no longer \"waiting\" on any requests. XHR callback is not always run\r\n      // when the request is aborted. This will prevent the loader from being stuck in the\r\n      // WAITING state indefinitely.\r\n\r\n      this.state = 'READY'; // don't wait for buffer check timeouts to begin fetching the\r\n      // next segment\r\n\r\n      if (!this.paused()) {\r\n        this.monitorBuffer_();\r\n      }\r\n    }\r\n    /**\r\n     * abort all pending xhr requests and null any pending segements\r\n     *\r\n     * @private\r\n     */\r\n\r\n    abort_() {\r\n      if (this.pendingSegment_ && this.pendingSegment_.abortRequests) {\r\n        this.pendingSegment_.abortRequests();\r\n      } // clear out the segment being processed\r\n\r\n      this.pendingSegment_ = null;\r\n      this.callQueue_ = [];\r\n      this.loadQueue_ = [];\r\n      this.metadataQueue_.id3 = [];\r\n      this.metadataQueue_.caption = [];\r\n      this.timelineChangeController_.clearPendingTimelineChange(this.loaderType_);\r\n      this.waitingOnRemove_ = false;\r\n      window.clearTimeout(this.quotaExceededErrorRetryTimeout_);\r\n      this.quotaExceededErrorRetryTimeout_ = null;\r\n    }\r\n    checkForAbort_(requestId) {\r\n      // If the state is APPENDING, then aborts will not modify the state, meaning the first\r\n      // callback that happens should reset the state to READY so that loading can continue.\r\n      if (this.state === 'APPENDING' && !this.pendingSegment_) {\r\n        this.state = 'READY';\r\n        return true;\r\n      }\r\n      if (!this.pendingSegment_ || this.pendingSegment_.requestId !== requestId) {\r\n        return true;\r\n      }\r\n      return false;\r\n    }\r\n    /**\r\n     * set an error on the segment loader and null out any pending segements\r\n     *\r\n     * @param {Error} error the error to set on the SegmentLoader\r\n     * @return {Error} the error that was set or that is currently set\r\n     */\r\n\r\n    error(error) {\r\n      if (typeof error !== 'undefined') {\r\n        this.logger_('error occurred:', error);\r\n        this.error_ = error;\r\n      }\r\n      this.pendingSegment_ = null;\r\n      return this.error_;\r\n    }\r\n    endOfStream() {\r\n      this.ended_ = true;\r\n      if (this.transmuxer_) {\r\n        // need to clear out any cached data to prepare for the new segment\r\n        segmentTransmuxer.reset(this.transmuxer_);\r\n      }\r\n      this.gopBuffer_.length = 0;\r\n      this.pause();\r\n      this.trigger('ended');\r\n    }\r\n    /**\r\n     * Indicates which time ranges are buffered\r\n     *\r\n     * @return {TimeRange}\r\n     *         TimeRange object representing the current buffered ranges\r\n     */\r\n\r\n    buffered_() {\r\n      const trackInfo = this.getMediaInfo_();\r\n      if (!this.sourceUpdater_ || !trackInfo) {\r\n        return createTimeRanges();\r\n      }\r\n      if (this.loaderType_ === 'main') {\r\n        const {\r\n          hasAudio,\r\n          hasVideo,\r\n          isMuxed\r\n        } = trackInfo;\r\n        if (hasVideo && hasAudio && !this.audioDisabled_ && !isMuxed) {\r\n          return this.sourceUpdater_.buffered();\r\n        }\r\n        if (hasVideo) {\r\n          return this.sourceUpdater_.videoBuffered();\r\n        }\r\n      } // One case that can be ignored for now is audio only with alt audio,\r\n      // as we don't yet have proper support for that.\r\n\r\n      return this.sourceUpdater_.audioBuffered();\r\n    }\r\n    /**\r\n     * Gets and sets init segment for the provided map\r\n     *\r\n     * @param {Object} map\r\n     *        The map object representing the init segment to get or set\r\n     * @param {boolean=} set\r\n     *        If true, the init segment for the provided map should be saved\r\n     * @return {Object}\r\n     *         map object for desired init segment\r\n     */\r\n\r\n    initSegmentForMap(map, set = false) {\r\n      if (!map) {\r\n        return null;\r\n      }\r\n      const id = initSegmentId(map);\r\n      let storedMap = this.initSegments_[id];\r\n      if (set && !storedMap && map.bytes) {\r\n        this.initSegments_[id] = storedMap = {\r\n          resolvedUri: map.resolvedUri,\r\n          byterange: map.byterange,\r\n          bytes: map.bytes,\r\n          tracks: map.tracks,\r\n          timescales: map.timescales\r\n        };\r\n      }\r\n      return storedMap || map;\r\n    }\r\n    /**\r\n     * Gets and sets key for the provided key\r\n     *\r\n     * @param {Object} key\r\n     *        The key object representing the key to get or set\r\n     * @param {boolean=} set\r\n     *        If true, the key for the provided key should be saved\r\n     * @return {Object}\r\n     *         Key object for desired key\r\n     */\r\n\r\n    segmentKey(key, set = false) {\r\n      if (!key) {\r\n        return null;\r\n      }\r\n      const id = segmentKeyId(key);\r\n      let storedKey = this.keyCache_[id]; // TODO: We should use the HTTP Expires header to invalidate our cache per\r\n      // https://tools.ietf.org/html/draft-pantos-http-live-streaming-23#section-6.2.3\r\n\r\n      if (this.cacheEncryptionKeys_ && set && !storedKey && key.bytes) {\r\n        this.keyCache_[id] = storedKey = {\r\n          resolvedUri: key.resolvedUri,\r\n          bytes: key.bytes\r\n        };\r\n      }\r\n      const result = {\r\n        resolvedUri: (storedKey || key).resolvedUri\r\n      };\r\n      if (storedKey) {\r\n        result.bytes = storedKey.bytes;\r\n      }\r\n      return result;\r\n    }\r\n    /**\r\n     * Returns true if all configuration required for loading is present, otherwise false.\r\n     *\r\n     * @return {boolean} True if the all configuration is ready for loading\r\n     * @private\r\n     */\r\n\r\n    couldBeginLoading_() {\r\n      return this.playlist_ && !this.paused();\r\n    }\r\n    /**\r\n     * load a playlist and start to fill the buffer\r\n     */\r\n\r\n    load() {\r\n      // un-pause\r\n      this.monitorBuffer_(); // if we don't have a playlist yet, keep waiting for one to be\r\n      // specified\r\n\r\n      if (!this.playlist_) {\r\n        return;\r\n      } // if all the configuration is ready, initialize and begin loading\r\n\r\n      if (this.state === 'INIT' && this.couldBeginLoading_()) {\r\n        return this.init_();\r\n      } // if we're in the middle of processing a segment already, don't\r\n      // kick off an additional segment request\r\n\r\n      if (!this.couldBeginLoading_() || this.state !== 'READY' && this.state !== 'INIT') {\r\n        return;\r\n      }\r\n      this.state = 'READY';\r\n    }\r\n    /**\r\n     * Once all the starting parameters have been specified, begin\r\n     * operation. This method should only be invoked from the INIT\r\n     * state.\r\n     *\r\n     * @private\r\n     */\r\n\r\n    init_() {\r\n      this.state = 'READY'; // if this is the audio segment loader, and it hasn't been inited before, then any old\r\n      // audio data from the muxed content should be removed\r\n\r\n      this.resetEverything();\r\n      return this.monitorBuffer_();\r\n    }\r\n    /**\r\n     * set a playlist on the segment loader\r\n     *\r\n     * @param {PlaylistLoader} media the playlist to set on the segment loader\r\n     */\r\n\r\n    playlist(newPlaylist, options = {}) {\r\n      if (!newPlaylist) {\r\n        return;\r\n      }\r\n      if (this.playlist_ && this.playlist_.endList && newPlaylist.endList && this.playlist_.uri === newPlaylist.uri) {\r\n        // skip update if both prev and new are vod and have the same URI\r\n        return;\r\n      }\r\n      const oldPlaylist = this.playlist_;\r\n      const segmentInfo = this.pendingSegment_;\r\n      this.playlist_ = newPlaylist;\r\n      this.xhrOptions_ = options; // when we haven't started playing yet, the start of a live playlist\r\n      // is always our zero-time so force a sync update each time the playlist\r\n      // is refreshed from the server\r\n      //\r\n      // Use the INIT state to determine if playback has started, as the playlist sync info\r\n      // should be fixed once requests begin (as sync points are generated based on sync\r\n      // info), but not before then.\r\n\r\n      if (this.state === 'INIT') {\r\n        newPlaylist.syncInfo = {\r\n          mediaSequence: newPlaylist.mediaSequence,\r\n          time: 0\r\n        }; // Setting the date time mapping means mapping the program date time (if available)\r\n        // to time 0 on the player's timeline. The playlist's syncInfo serves a similar\r\n        // purpose, mapping the initial mediaSequence to time zero. Since the syncInfo can\r\n        // be updated as the playlist is refreshed before the loader starts loading, the\r\n        // program date time mapping needs to be updated as well.\r\n        //\r\n        // This mapping is only done for the main loader because a program date time should\r\n        // map equivalently between playlists.\r\n\r\n        if (this.loaderType_ === 'main') {\r\n          this.syncController_.setDateTimeMappingForStart(newPlaylist);\r\n        }\r\n      }\r\n      let oldId = null;\r\n      if (oldPlaylist) {\r\n        if (oldPlaylist.id) {\r\n          oldId = oldPlaylist.id;\r\n        } else if (oldPlaylist.uri) {\r\n          oldId = oldPlaylist.uri;\r\n        }\r\n      }\r\n      this.logger_(`playlist update [${oldId} => ${newPlaylist.id || newPlaylist.uri}]`);\r\n      if (this.mediaSequenceSync_) {\r\n        this.mediaSequenceSync_.update(newPlaylist, this.currentTime_());\r\n        this.logger_(`Playlist update:\r\ncurrentTime: ${this.currentTime_()}\r\nbufferedEnd: ${lastBufferedEnd(this.buffered_())}\r\n`, this.mediaSequenceSync_.diagnostics);\r\n      } // in VOD, this is always a rendition switch (or we updated our syncInfo above)\r\n      // in LIVE, we always want to update with new playlists (including refreshes)\r\n\r\n      this.trigger('syncinfoupdate'); // if we were unpaused but waiting for a playlist, start\r\n      // buffering now\r\n\r\n      if (this.state === 'INIT' && this.couldBeginLoading_()) {\r\n        return this.init_();\r\n      }\r\n      if (!oldPlaylist || oldPlaylist.uri !== newPlaylist.uri) {\r\n        if (this.mediaIndex !== null) {\r\n          // we must reset/resync the segment loader when we switch renditions and\r\n          // the segment loader is already synced to the previous rendition\r\n          // We only want to reset the loader here for LLHLS playback, as resetLoader sets fetchAtBuffer_\r\n          // to false, resulting in fetching segments at currentTime and causing repeated\r\n          // same-segment requests on playlist change. This erroneously drives up the playback watcher\r\n          // stalled segment count, as re-requesting segments at the currentTime or browser cached segments\r\n          // will not change the buffer.\r\n          // Reference for LLHLS fixes: https://github.com/videojs/http-streaming/pull/1201\r\n          const isLLHLS = !newPlaylist.endList && typeof newPlaylist.partTargetDuration === 'number';\r\n          if (isLLHLS) {\r\n            this.resetLoader();\r\n          } else {\r\n            this.resyncLoader();\r\n          }\r\n        }\r\n        this.currentMediaInfo_ = void 0;\r\n        this.trigger('playlistupdate'); // the rest of this function depends on `oldPlaylist` being defined\r\n\r\n        return;\r\n      } // we reloaded the same playlist so we are in a live scenario\r\n      // and we will likely need to adjust the mediaIndex\r\n\r\n      const mediaSequenceDiff = newPlaylist.mediaSequence - oldPlaylist.mediaSequence;\r\n      this.logger_(`live window shift [${mediaSequenceDiff}]`); // update the mediaIndex on the SegmentLoader\r\n      // this is important because we can abort a request and this value must be\r\n      // equal to the last appended mediaIndex\r\n\r\n      if (this.mediaIndex !== null) {\r\n        this.mediaIndex -= mediaSequenceDiff; // this can happen if we are going to load the first segment, but get a playlist\r\n        // update during that. mediaIndex would go from 0 to -1 if mediaSequence in the\r\n        // new playlist was incremented by 1.\r\n\r\n        if (this.mediaIndex < 0) {\r\n          this.mediaIndex = null;\r\n          this.partIndex = null;\r\n        } else {\r\n          const segment = this.playlist_.segments[this.mediaIndex]; // partIndex should remain the same for the same segment\r\n          // unless parts fell off of the playlist for this segment.\r\n          // In that case we need to reset partIndex and resync\r\n\r\n          if (this.partIndex && (!segment.parts || !segment.parts.length || !segment.parts[this.partIndex])) {\r\n            const mediaIndex = this.mediaIndex;\r\n            this.logger_(`currently processing part (index ${this.partIndex}) no longer exists.`);\r\n            this.resetLoader(); // We want to throw away the partIndex and the data associated with it,\r\n            // as the part was dropped from our current playlists segment.\r\n            // The mediaIndex will still be valid so keep that around.\r\n\r\n            this.mediaIndex = mediaIndex;\r\n          }\r\n        }\r\n      } // update the mediaIndex on the SegmentInfo object\r\n      // this is important because we will update this.mediaIndex with this value\r\n      // in `handleAppendsDone_` after the segment has been successfully appended\r\n\r\n      if (segmentInfo) {\r\n        segmentInfo.mediaIndex -= mediaSequenceDiff;\r\n        if (segmentInfo.mediaIndex < 0) {\r\n          segmentInfo.mediaIndex = null;\r\n          segmentInfo.partIndex = null;\r\n        } else {\r\n          // we need to update the referenced segment so that timing information is\r\n          // saved for the new playlist's segment, however, if the segment fell off the\r\n          // playlist, we can leave the old reference and just lose the timing info\r\n          if (segmentInfo.mediaIndex >= 0) {\r\n            segmentInfo.segment = newPlaylist.segments[segmentInfo.mediaIndex];\r\n          }\r\n          if (segmentInfo.partIndex >= 0 && segmentInfo.segment.parts) {\r\n            segmentInfo.part = segmentInfo.segment.parts[segmentInfo.partIndex];\r\n          }\r\n        }\r\n      }\r\n      this.syncController_.saveExpiredSegmentInfo(oldPlaylist, newPlaylist);\r\n    }\r\n    /**\r\n     * Prevent the loader from fetching additional segments. If there\r\n     * is a segment request outstanding, it will finish processing\r\n     * before the loader halts. A segment loader can be unpaused by\r\n     * calling load().\r\n     */\r\n\r\n    pause() {\r\n      if (this.checkBufferTimeout_) {\r\n        window.clearTimeout(this.checkBufferTimeout_);\r\n        this.checkBufferTimeout_ = null;\r\n      }\r\n    }\r\n    /**\r\n     * Returns whether the segment loader is fetching additional\r\n     * segments when given the opportunity. This property can be\r\n     * modified through calls to pause() and load().\r\n     */\r\n\r\n    paused() {\r\n      return this.checkBufferTimeout_ === null;\r\n    }\r\n    /**\r\n     * Delete all the buffered data and reset the SegmentLoader\r\n     *\r\n     * @param {Function} [done] an optional callback to be executed when the remove\r\n     * operation is complete\r\n     */\r\n\r\n    resetEverything(done) {\r\n      this.ended_ = false;\r\n      this.activeInitSegmentId_ = null;\r\n      this.appendInitSegment_ = {\r\n        audio: true,\r\n        video: true\r\n      };\r\n      this.resetLoader(); // remove from 0, the earliest point, to Infinity, to signify removal of everything.\r\n      // VTT Segment Loader doesn't need to do anything but in the regular SegmentLoader,\r\n      // we then clamp the value to duration if necessary.\r\n\r\n      this.remove(0, Infinity, done); // clears fmp4 captions\r\n\r\n      if (this.transmuxer_) {\r\n        this.transmuxer_.postMessage({\r\n          action: 'clearAllMp4Captions'\r\n        }); // reset the cache in the transmuxer\r\n\r\n        this.transmuxer_.postMessage({\r\n          action: 'reset'\r\n        });\r\n      }\r\n    }\r\n    /**\r\n     * Force the SegmentLoader to resync and start loading around the currentTime instead\r\n     * of starting at the end of the buffer\r\n     *\r\n     * Useful for fast quality changes\r\n     */\r\n\r\n    resetLoader() {\r\n      this.fetchAtBuffer_ = false;\r\n      if (this.mediaSequenceSync_) {\r\n        this.mediaSequenceSync_.resetAppendedStatus();\r\n      }\r\n      this.resyncLoader();\r\n    }\r\n    /**\r\n     * Force the SegmentLoader to restart synchronization and make a conservative guess\r\n     * before returning to the simple walk-forward method\r\n     */\r\n\r\n    resyncLoader() {\r\n      if (this.transmuxer_) {\r\n        // need to clear out any cached data to prepare for the new segment\r\n        segmentTransmuxer.reset(this.transmuxer_);\r\n      }\r\n      this.mediaIndex = null;\r\n      this.partIndex = null;\r\n      this.syncPoint_ = null;\r\n      this.isPendingTimestampOffset_ = false; // this is mainly to sync timing-info when switching between renditions with and without timestamp-rollover,\r\n      // so we don't want it for DASH or fragmented mp4 segments.\r\n\r\n      const isFmp4 = this.currentMediaInfo_ && this.currentMediaInfo_.isFmp4;\r\n      const isHlsTs = this.sourceType_ === 'hls' && !isFmp4;\r\n      if (isHlsTs) {\r\n        this.shouldForceTimestampOffsetAfterResync_ = true;\r\n      }\r\n      this.callQueue_ = [];\r\n      this.loadQueue_ = [];\r\n      this.metadataQueue_.id3 = [];\r\n      this.metadataQueue_.caption = [];\r\n      this.abort();\r\n      if (this.transmuxer_) {\r\n        this.transmuxer_.postMessage({\r\n          action: 'clearParsedMp4Captions'\r\n        });\r\n      }\r\n    }\r\n    /**\r\n     * Remove any data in the source buffer between start and end times\r\n     *\r\n     * @param {number} start - the start time of the region to remove from the buffer\r\n     * @param {number} end - the end time of the region to remove from the buffer\r\n     * @param {Function} [done] - an optional callback to be executed when the remove\r\n     * @param {boolean} force - force all remove operations to happen\r\n     * operation is complete\r\n     */\r\n\r\n    remove(start, end, done = () => {}, force = false) {\r\n      // clamp end to duration if we need to remove everything.\r\n      // This is due to a browser bug that causes issues if we remove to Infinity.\r\n      // videojs/videojs-contrib-hls#1225\r\n      if (end === Infinity) {\r\n        end = this.duration_();\r\n      } // skip removes that would throw an error\r\n      // commonly happens during a rendition switch at the start of a video\r\n      // from start 0 to end 0\r\n\r\n      if (end <= start) {\r\n        this.logger_('skipping remove because end ${end} is <= start ${start}');\r\n        return;\r\n      }\r\n      if (!this.sourceUpdater_ || !this.getMediaInfo_()) {\r\n        this.logger_('skipping remove because no source updater or starting media info'); // nothing to remove if we haven't processed any media\r\n\r\n        return;\r\n      } // set it to one to complete this function's removes\r\n\r\n      let removesRemaining = 1;\r\n      const removeFinished = () => {\r\n        removesRemaining--;\r\n        if (removesRemaining === 0) {\r\n          done();\r\n        }\r\n      };\r\n      if (force || !this.audioDisabled_) {\r\n        removesRemaining++;\r\n        this.sourceUpdater_.removeAudio(start, end, removeFinished);\r\n      } // While it would be better to only remove video if the main loader has video, this\r\n      // should be safe with audio only as removeVideo will call back even if there's no\r\n      // video buffer.\r\n      //\r\n      // In theory we can check to see if there's video before calling the remove, but in\r\n      // the event that we're switching between renditions and from video to audio only\r\n      // (when we add support for that), we may need to clear the video contents despite\r\n      // what the new media will contain.\r\n\r\n      if (force || this.loaderType_ === 'main') {\r\n        this.gopBuffer_ = removeGopBuffer(this.gopBuffer_, start, end, this.timeMapping_);\r\n        removesRemaining++;\r\n        this.sourceUpdater_.removeVideo(start, end, removeFinished);\r\n      } // remove any captions and ID3 tags\r\n\r\n      for (const track in this.inbandTextTracks_) {\r\n        removeCuesFromTrack(start, end, this.inbandTextTracks_[track]);\r\n      }\r\n      removeCuesFromTrack(start, end, this.segmentMetadataTrack_); // finished this function's removes\r\n\r\n      removeFinished();\r\n    }\r\n    /**\r\n     * (re-)schedule monitorBufferTick_ to run as soon as possible\r\n     *\r\n     * @private\r\n     */\r\n\r\n    monitorBuffer_() {\r\n      if (this.checkBufferTimeout_) {\r\n        window.clearTimeout(this.checkBufferTimeout_);\r\n      }\r\n      this.checkBufferTimeout_ = window.setTimeout(this.monitorBufferTick_.bind(this), 1);\r\n    }\r\n    /**\r\n     * As long as the SegmentLoader is in the READY state, periodically\r\n     * invoke fillBuffer_().\r\n     *\r\n     * @private\r\n     */\r\n\r\n    monitorBufferTick_() {\r\n      if (this.state === 'READY') {\r\n        this.fillBuffer_();\r\n      }\r\n      if (this.checkBufferTimeout_) {\r\n        window.clearTimeout(this.checkBufferTimeout_);\r\n      }\r\n      this.checkBufferTimeout_ = window.setTimeout(this.monitorBufferTick_.bind(this), CHECK_BUFFER_DELAY);\r\n    }\r\n    /**\r\n     * fill the buffer with segements unless the sourceBuffers are\r\n     * currently updating\r\n     *\r\n     * Note: this function should only ever be called by monitorBuffer_\r\n     * and never directly\r\n     *\r\n     * @private\r\n     */\r\n\r\n    fillBuffer_() {\r\n      // TODO since the source buffer maintains a queue, and we shouldn't call this function\r\n      // except when we're ready for the next segment, this check can most likely be removed\r\n      if (this.sourceUpdater_.updating()) {\r\n        return;\r\n      } // see if we need to begin loading immediately\r\n\r\n      const segmentInfo = this.chooseNextRequest_();\r\n      if (!segmentInfo) {\r\n        return;\r\n      }\r\n      const metadata = {\r\n        segmentInfo: segmentInfoPayload({\r\n          type: this.loaderType_,\r\n          segment: segmentInfo\r\n        })\r\n      };\r\n      this.trigger({\r\n        type: 'segmentselected',\r\n        metadata\r\n      });\r\n      if (typeof segmentInfo.timestampOffset === 'number') {\r\n        this.isPendingTimestampOffset_ = false;\r\n        this.timelineChangeController_.pendingTimelineChange({\r\n          type: this.loaderType_,\r\n          from: this.currentTimeline_,\r\n          to: segmentInfo.timeline\r\n        });\r\n      }\r\n      this.loadSegment_(segmentInfo);\r\n    }\r\n    /**\r\n     * Determines if we should call endOfStream on the media source based\r\n     * on the state of the buffer or if appened segment was the final\r\n     * segment in the playlist.\r\n     *\r\n     * @param {number} [mediaIndex] the media index of segment we last appended\r\n     * @param {Object} [playlist] a media playlist object\r\n     * @return {boolean} do we need to call endOfStream on the MediaSource\r\n     */\r\n\r\n    isEndOfStream_(mediaIndex = this.mediaIndex, playlist = this.playlist_, partIndex = this.partIndex) {\r\n      if (!playlist || !this.mediaSource_) {\r\n        return false;\r\n      }\r\n      const segment = typeof mediaIndex === 'number' && playlist.segments[mediaIndex]; // mediaIndex is zero based but length is 1 based\r\n\r\n      const appendedLastSegment = mediaIndex + 1 === playlist.segments.length; // true if there are no parts, or this is the last part.\r\n\r\n      const appendedLastPart = !segment || !segment.parts || partIndex + 1 === segment.parts.length; // if we've buffered to the end of the video, we need to call endOfStream\r\n      // so that MediaSources can trigger the `ended` event when it runs out of\r\n      // buffered data instead of waiting for me\r\n\r\n      return playlist.endList && this.mediaSource_.readyState === 'open' && appendedLastSegment && appendedLastPart;\r\n    }\r\n    /**\r\n     * Determines what request should be made given current segment loader state.\r\n     *\r\n     * @return {Object} a request object that describes the segment/part to load\r\n     */\r\n\r\n    chooseNextRequest_() {\r\n      const buffered = this.buffered_();\r\n      const bufferedEnd = lastBufferedEnd(buffered) || 0;\r\n      const bufferedTime = timeAheadOf(buffered, this.currentTime_());\r\n      const preloaded = !this.hasPlayed_() && bufferedTime >= 1;\r\n      const haveEnoughBuffer = bufferedTime >= this.goalBufferLength_();\r\n      const segments = this.playlist_.segments; // return no segment if:\r\n      // 1. we don't have segments\r\n      // 2. The video has not yet played and we already downloaded a segment\r\n      // 3. we already have enough buffered time\r\n\r\n      if (!segments.length || preloaded || haveEnoughBuffer) {\r\n        return null;\r\n      }\r\n      this.syncPoint_ = this.syncPoint_ || this.syncController_.getSyncPoint(this.playlist_, this.duration_(), this.currentTimeline_, this.currentTime_(), this.loaderType_);\r\n      const next = {\r\n        partIndex: null,\r\n        mediaIndex: null,\r\n        startOfSegment: null,\r\n        playlist: this.playlist_,\r\n        isSyncRequest: Boolean(!this.syncPoint_)\r\n      };\r\n      if (next.isSyncRequest) {\r\n        next.mediaIndex = getSyncSegmentCandidate(this.currentTimeline_, segments, bufferedEnd);\r\n        this.logger_(`choose next request. Can not find sync point. Fallback to media Index: ${next.mediaIndex}`);\r\n      } else if (this.mediaIndex !== null) {\r\n        const segment = segments[this.mediaIndex];\r\n        const partIndex = typeof this.partIndex === 'number' ? this.partIndex : -1;\r\n        next.startOfSegment = segment.end ? segment.end : bufferedEnd;\r\n        if (segment.parts && segment.parts[partIndex + 1]) {\r\n          next.mediaIndex = this.mediaIndex;\r\n          next.partIndex = partIndex + 1;\r\n        } else {\r\n          next.mediaIndex = this.mediaIndex + 1;\r\n        }\r\n      } else {\r\n        let segmentIndex;\r\n        let partIndex;\r\n        let startTime;\r\n        const targetTime = this.fetchAtBuffer_ ? bufferedEnd : this.currentTime_();\r\n        if (this.mediaSequenceSync_) {\r\n          this.logger_(`chooseNextRequest_ request after Quality Switch:\r\nFor TargetTime: ${targetTime}.\r\nCurrentTime: ${this.currentTime_()}\r\nBufferedEnd: ${bufferedEnd}\r\nFetch At Buffer: ${this.fetchAtBuffer_}\r\n`, this.mediaSequenceSync_.diagnostics);\r\n        }\r\n        if (this.mediaSequenceSync_ && this.mediaSequenceSync_.isReliable) {\r\n          const syncInfo = this.getSyncInfoFromMediaSequenceSync_(targetTime);\r\n          if (!syncInfo) {\r\n            const message = 'No sync info found while using media sequence sync';\r\n            this.error({\r\n              message,\r\n              metadata: {\r\n                errorType: videojs.Error.StreamingFailedToSelectNextSegment,\r\n                error: new Error(message)\r\n              }\r\n            });\r\n            this.logger_('chooseNextRequest_ - no sync info found using media sequence sync'); // no match\r\n\r\n            return null;\r\n          }\r\n          this.logger_(`chooseNextRequest_ mediaSequence syncInfo (${syncInfo.start} --> ${syncInfo.end})`);\r\n          segmentIndex = syncInfo.segmentIndex;\r\n          partIndex = syncInfo.partIndex;\r\n          startTime = syncInfo.start;\r\n        } else {\r\n          this.logger_('chooseNextRequest_ - fallback to a regular segment selection algorithm, based on a syncPoint.'); // fallback\r\n\r\n          const mediaInfoForTime = Playlist.getMediaInfoForTime({\r\n            exactManifestTimings: this.exactManifestTimings,\r\n            playlist: this.playlist_,\r\n            currentTime: targetTime,\r\n            startingPartIndex: this.syncPoint_.partIndex,\r\n            startingSegmentIndex: this.syncPoint_.segmentIndex,\r\n            startTime: this.syncPoint_.time\r\n          });\r\n          segmentIndex = mediaInfoForTime.segmentIndex;\r\n          partIndex = mediaInfoForTime.partIndex;\r\n          startTime = mediaInfoForTime.startTime;\r\n        }\r\n        next.getMediaInfoForTime = this.fetchAtBuffer_ ? `bufferedEnd ${targetTime}` : `currentTime ${targetTime}`;\r\n        next.mediaIndex = segmentIndex;\r\n        next.startOfSegment = startTime;\r\n        next.partIndex = partIndex;\r\n        this.logger_(`choose next request. Playlist switched and we have a sync point. Media Index: ${next.mediaIndex} `);\r\n      }\r\n      const nextSegment = segments[next.mediaIndex];\r\n      let nextPart = nextSegment && typeof next.partIndex === 'number' && nextSegment.parts && nextSegment.parts[next.partIndex]; // if the next segment index is invalid or\r\n      // the next partIndex is invalid do not choose a next segment.\r\n\r\n      if (!nextSegment || typeof next.partIndex === 'number' && !nextPart) {\r\n        return null;\r\n      } // if the next segment has parts, and we don't have a partIndex.\r\n      // Set partIndex to 0\r\n\r\n      if (typeof next.partIndex !== 'number' && nextSegment.parts) {\r\n        next.partIndex = 0;\r\n        nextPart = nextSegment.parts[0];\r\n      } // independentSegments applies to every segment in a playlist. If independentSegments appears in a main playlist,\r\n      // it applies to each segment in each media playlist.\r\n      // https://datatracker.ietf.org/doc/html/draft-pantos-http-live-streaming-23#section-4.3.5.1\r\n\r\n      const hasIndependentSegments = this.vhs_.playlists && this.vhs_.playlists.main && this.vhs_.playlists.main.independentSegments || this.playlist_.independentSegments; // if we have no buffered data then we need to make sure\r\n      // that the next part we append is \"independent\" if possible.\r\n      // So we check if the previous part is independent, and request\r\n      // it if it is.\r\n\r\n      if (!bufferedTime && nextPart && !hasIndependentSegments && !nextPart.independent) {\r\n        if (next.partIndex === 0) {\r\n          const lastSegment = segments[next.mediaIndex - 1];\r\n          const lastSegmentLastPart = lastSegment.parts && lastSegment.parts.length && lastSegment.parts[lastSegment.parts.length - 1];\r\n          if (lastSegmentLastPart && lastSegmentLastPart.independent) {\r\n            next.mediaIndex -= 1;\r\n            next.partIndex = lastSegment.parts.length - 1;\r\n            next.independent = 'previous segment';\r\n          }\r\n        } else if (nextSegment.parts[next.partIndex - 1].independent) {\r\n          next.partIndex -= 1;\r\n          next.independent = 'previous part';\r\n        }\r\n      }\r\n      const ended = this.mediaSource_ && this.mediaSource_.readyState === 'ended'; // do not choose a next segment if all of the following:\r\n      // 1. this is the last segment in the playlist\r\n      // 2. end of stream has been called on the media source already\r\n      // 3. the player is not seeking\r\n\r\n      if (next.mediaIndex >= segments.length - 1 && ended && !this.seeking_()) {\r\n        return null;\r\n      }\r\n      if (this.shouldForceTimestampOffsetAfterResync_) {\r\n        this.shouldForceTimestampOffsetAfterResync_ = false;\r\n        next.forceTimestampOffset = true;\r\n        this.logger_('choose next request. Force timestamp offset after loader resync');\r\n      }\r\n      return this.generateSegmentInfo_(next);\r\n    }\r\n    getSyncInfoFromMediaSequenceSync_(targetTime) {\r\n      if (!this.mediaSequenceSync_) {\r\n        return null;\r\n      } // we should pull the target time to the least available time if we drop out of sync for any reason\r\n\r\n      const finalTargetTime = Math.max(targetTime, this.mediaSequenceSync_.start);\r\n      if (targetTime !== finalTargetTime) {\r\n        this.logger_(`getSyncInfoFromMediaSequenceSync_. Pulled target time from ${targetTime} to ${finalTargetTime}`);\r\n      }\r\n      const mediaSequenceSyncInfo = this.mediaSequenceSync_.getSyncInfoForTime(finalTargetTime);\r\n      if (!mediaSequenceSyncInfo) {\r\n        // no match at all\r\n        return null;\r\n      }\r\n      if (!mediaSequenceSyncInfo.isAppended) {\r\n        // has a perfect match\r\n        return mediaSequenceSyncInfo;\r\n      } // has match, but segment was already appended.\r\n      // attempt to auto-advance to the nearest next segment:\r\n\r\n      const nextMediaSequenceSyncInfo = this.mediaSequenceSync_.getSyncInfoForTime(mediaSequenceSyncInfo.end);\r\n      if (!nextMediaSequenceSyncInfo) {\r\n        // no match at all\r\n        return null;\r\n      }\r\n      if (nextMediaSequenceSyncInfo.isAppended) {\r\n        this.logger_('getSyncInfoFromMediaSequenceSync_: We encounter unexpected scenario where next media sequence sync info is also appended!');\r\n      } // got match with the nearest next segment\r\n\r\n      return nextMediaSequenceSyncInfo;\r\n    }\r\n    generateSegmentInfo_(options) {\r\n      const {\r\n        independent,\r\n        playlist,\r\n        mediaIndex,\r\n        startOfSegment,\r\n        isSyncRequest,\r\n        partIndex,\r\n        forceTimestampOffset,\r\n        getMediaInfoForTime\r\n      } = options;\r\n      const segment = playlist.segments[mediaIndex];\r\n      const part = typeof partIndex === 'number' && segment.parts[partIndex];\r\n      const segmentInfo = {\r\n        requestId: 'segment-loader-' + Math.random(),\r\n        // resolve the segment URL relative to the playlist\r\n        uri: part && part.resolvedUri || segment.resolvedUri,\r\n        // the segment's mediaIndex at the time it was requested\r\n        mediaIndex,\r\n        partIndex: part ? partIndex : null,\r\n        // whether or not to update the SegmentLoader's state with this\r\n        // segment's mediaIndex\r\n        isSyncRequest,\r\n        startOfSegment,\r\n        // the segment's playlist\r\n        playlist,\r\n        // unencrypted bytes of the segment\r\n        bytes: null,\r\n        // when a key is defined for this segment, the encrypted bytes\r\n        encryptedBytes: null,\r\n        // The target timestampOffset for this segment when we append it\r\n        // to the source buffer\r\n        timestampOffset: null,\r\n        // The timeline that the segment is in\r\n        timeline: segment.timeline,\r\n        // The expected duration of the segment in seconds\r\n        duration: part && part.duration || segment.duration,\r\n        // retain the segment in case the playlist updates while doing an async process\r\n        segment,\r\n        part,\r\n        byteLength: 0,\r\n        transmuxer: this.transmuxer_,\r\n        // type of getMediaInfoForTime that was used to get this segment\r\n        getMediaInfoForTime,\r\n        independent\r\n      };\r\n      const overrideCheck = typeof forceTimestampOffset !== 'undefined' ? forceTimestampOffset : this.isPendingTimestampOffset_;\r\n      segmentInfo.timestampOffset = this.timestampOffsetForSegment_({\r\n        segmentTimeline: segment.timeline,\r\n        currentTimeline: this.currentTimeline_,\r\n        startOfSegment,\r\n        buffered: this.buffered_(),\r\n        overrideCheck\r\n      });\r\n      const audioBufferedEnd = lastBufferedEnd(this.sourceUpdater_.audioBuffered());\r\n      if (typeof audioBufferedEnd === 'number') {\r\n        // since the transmuxer is using the actual timing values, but the buffer is\r\n        // adjusted by the timestamp offset, we must adjust the value here\r\n        segmentInfo.audioAppendStart = audioBufferedEnd - this.sourceUpdater_.audioTimestampOffset();\r\n      }\r\n      if (this.sourceUpdater_.videoBuffered().length) {\r\n        segmentInfo.gopsToAlignWith = gopsSafeToAlignWith(this.gopBuffer_,\r\n        // since the transmuxer is using the actual timing values, but the time is\r\n        // adjusted by the timestmap offset, we must adjust the value here\r\n        this.currentTime_() - this.sourceUpdater_.videoTimestampOffset(), this.timeMapping_);\r\n      }\r\n      return segmentInfo;\r\n    } // get the timestampoffset for a segment,\r\n    // added so that vtt segment loader can override and prevent\r\n    // adding timestamp offsets.\r\n\r\n    timestampOffsetForSegment_(options) {\r\n      return timestampOffsetForSegment(options);\r\n    }\r\n    /**\r\n     * Determines if the network has enough bandwidth to complete the current segment\r\n     * request in a timely manner. If not, the request will be aborted early and bandwidth\r\n     * updated to trigger a playlist switch.\r\n     *\r\n     * @param {Object} stats\r\n     *        Object containing stats about the request timing and size\r\n     * @private\r\n     */\r\n\r\n    earlyAbortWhenNeeded_(stats) {\r\n      if (this.vhs_.tech_.paused() ||\r\n      // Don't abort if the current playlist is on the lowestEnabledRendition\r\n      // TODO: Replace using timeout with a boolean indicating whether this playlist is\r\n      //       the lowestEnabledRendition.\r\n      !this.xhrOptions_.timeout ||\r\n      // Don't abort if we have no bandwidth information to estimate segment sizes\r\n      !this.playlist_.attributes.BANDWIDTH) {\r\n        return;\r\n      } // Wait at least 1 second since the first byte of data has been received before\r\n      // using the calculated bandwidth from the progress event to allow the bitrate\r\n      // to stabilize\r\n\r\n      if (Date.now() - (stats.firstBytesReceivedAt || Date.now()) < 1000) {\r\n        return;\r\n      }\r\n      const currentTime = this.currentTime_();\r\n      const measuredBandwidth = stats.bandwidth;\r\n      const segmentDuration = this.pendingSegment_.duration;\r\n      const requestTimeRemaining = Playlist.estimateSegmentRequestTime(segmentDuration, measuredBandwidth, this.playlist_, stats.bytesReceived); // Subtract 1 from the timeUntilRebuffer so we still consider an early abort\r\n      // if we are only left with less than 1 second when the request completes.\r\n      // A negative timeUntilRebuffering indicates we are already rebuffering\r\n\r\n      const timeUntilRebuffer$1 = timeUntilRebuffer(this.buffered_(), currentTime, this.vhs_.tech_.playbackRate()) - 1; // Only consider aborting early if the estimated time to finish the download\r\n      // is larger than the estimated time until the player runs out of forward buffer\r\n\r\n      if (requestTimeRemaining <= timeUntilRebuffer$1) {\r\n        return;\r\n      }\r\n      const switchCandidate = minRebufferMaxBandwidthSelector({\r\n        main: this.vhs_.playlists.main,\r\n        currentTime,\r\n        bandwidth: measuredBandwidth,\r\n        duration: this.duration_(),\r\n        segmentDuration,\r\n        timeUntilRebuffer: timeUntilRebuffer$1,\r\n        currentTimeline: this.currentTimeline_,\r\n        syncController: this.syncController_\r\n      });\r\n      if (!switchCandidate) {\r\n        return;\r\n      }\r\n      const rebufferingImpact = requestTimeRemaining - timeUntilRebuffer$1;\r\n      const timeSavedBySwitching = rebufferingImpact - switchCandidate.rebufferingImpact;\r\n      let minimumTimeSaving = 0.5; // If we are already rebuffering, increase the amount of variance we add to the\r\n      // potential round trip time of the new request so that we are not too aggressive\r\n      // with switching to a playlist that might save us a fraction of a second.\r\n\r\n      if (timeUntilRebuffer$1 <= TIME_FUDGE_FACTOR) {\r\n        minimumTimeSaving = 1;\r\n      }\r\n      if (!switchCandidate.playlist || switchCandidate.playlist.uri === this.playlist_.uri || timeSavedBySwitching < minimumTimeSaving) {\r\n        return;\r\n      } // set the bandwidth to that of the desired playlist being sure to scale by\r\n      // BANDWIDTH_VARIANCE and add one so the playlist selector does not exclude it\r\n      // don't trigger a bandwidthupdate as the bandwidth is artifial\r\n\r\n      this.bandwidth = switchCandidate.playlist.attributes.BANDWIDTH * Config.BANDWIDTH_VARIANCE + 1;\r\n      this.trigger('earlyabort');\r\n    }\r\n    handleAbort_(segmentInfo) {\r\n      this.logger_(`Aborting ${segmentInfoString(segmentInfo)}`);\r\n      this.mediaRequestsAborted += 1;\r\n    }\r\n    /**\r\n     * XHR `progress` event handler\r\n     *\r\n     * @param {Event}\r\n     *        The XHR `progress` event\r\n     * @param {Object} simpleSegment\r\n     *        A simplified segment object copy\r\n     * @private\r\n     */\r\n\r\n    handleProgress_(event, simpleSegment) {\r\n      this.earlyAbortWhenNeeded_(simpleSegment.stats);\r\n      if (this.checkForAbort_(simpleSegment.requestId)) {\r\n        return;\r\n      }\r\n      this.trigger('progress');\r\n    }\r\n    handleTrackInfo_(simpleSegment, trackInfo) {\r\n      const {\r\n        hasAudio,\r\n        hasVideo\r\n      } = trackInfo;\r\n      const metadata = {\r\n        segmentInfo: segmentInfoPayload({\r\n          type: this.loaderType_,\r\n          segment: simpleSegment\r\n        }),\r\n        trackInfo: {\r\n          hasAudio,\r\n          hasVideo\r\n        }\r\n      };\r\n      this.trigger({\r\n        type: 'segmenttransmuxingtrackinfoavailable',\r\n        metadata\r\n      });\r\n      this.earlyAbortWhenNeeded_(simpleSegment.stats);\r\n      if (this.checkForAbort_(simpleSegment.requestId)) {\r\n        return;\r\n      }\r\n      if (this.checkForIllegalMediaSwitch(trackInfo)) {\r\n        return;\r\n      }\r\n      trackInfo = trackInfo || {}; // When we have track info, determine what media types this loader is dealing with.\r\n      // Guard against cases where we're not getting track info at all until we are\r\n      // certain that all streams will provide it.\r\n\r\n      if (!shallowEqual(this.currentMediaInfo_, trackInfo)) {\r\n        this.appendInitSegment_ = {\r\n          audio: true,\r\n          video: true\r\n        };\r\n        this.startingMediaInfo_ = trackInfo;\r\n        this.currentMediaInfo_ = trackInfo;\r\n        this.logger_('trackinfo update', trackInfo);\r\n        this.trigger('trackinfo');\r\n      } // trackinfo may cause an abort if the trackinfo\r\n      // causes a codec change to an unsupported codec.\r\n\r\n      if (this.checkForAbort_(simpleSegment.requestId)) {\r\n        return;\r\n      } // set trackinfo on the pending segment so that\r\n      // it can append.\r\n\r\n      this.pendingSegment_.trackInfo = trackInfo; // check if any calls were waiting on the track info\r\n\r\n      if (this.hasEnoughInfoToAppend_()) {\r\n        this.processCallQueue_();\r\n      } else {\r\n        checkAndFixTimelines(this);\r\n      }\r\n    }\r\n    handleTimingInfo_(simpleSegment, mediaType, timeType, time) {\r\n      this.earlyAbortWhenNeeded_(simpleSegment.stats);\r\n      if (this.checkForAbort_(simpleSegment.requestId)) {\r\n        return;\r\n      }\r\n      const segmentInfo = this.pendingSegment_;\r\n      const timingInfoProperty = timingInfoPropertyForMedia(mediaType);\r\n      segmentInfo[timingInfoProperty] = segmentInfo[timingInfoProperty] || {};\r\n      segmentInfo[timingInfoProperty][timeType] = time;\r\n      this.logger_(`timinginfo: ${mediaType} - ${timeType} - ${time}`); // check if any calls were waiting on the timing info\r\n\r\n      if (this.hasEnoughInfoToAppend_()) {\r\n        this.processCallQueue_();\r\n      } else {\r\n        checkAndFixTimelines(this);\r\n      }\r\n    }\r\n    handleCaptions_(simpleSegment, captionData) {\r\n      this.earlyAbortWhenNeeded_(simpleSegment.stats);\r\n      if (this.checkForAbort_(simpleSegment.requestId)) {\r\n        return;\r\n      } // This could only happen with fmp4 segments, but\r\n      // should still not happen in general\r\n\r\n      if (captionData.length === 0) {\r\n        this.logger_('SegmentLoader received no captions from a caption event');\r\n        return;\r\n      }\r\n      const segmentInfo = this.pendingSegment_; // Wait until we have some video data so that caption timing\r\n      // can be adjusted by the timestamp offset\r\n\r\n      if (!segmentInfo.hasAppendedData_) {\r\n        this.metadataQueue_.caption.push(this.handleCaptions_.bind(this, simpleSegment, captionData));\r\n        return;\r\n      }\r\n      const timestampOffset = this.sourceUpdater_.videoTimestampOffset() === null ? this.sourceUpdater_.audioTimestampOffset() : this.sourceUpdater_.videoTimestampOffset();\r\n      const captionTracks = {}; // get total start/end and captions for each track/stream\r\n\r\n      captionData.forEach(caption => {\r\n        // caption.stream is actually a track name...\r\n        // set to the existing values in tracks or default values\r\n        captionTracks[caption.stream] = captionTracks[caption.stream] || {\r\n          // Infinity, as any other value will be less than this\r\n          startTime: Infinity,\r\n          captions: [],\r\n          // 0 as an other value will be more than this\r\n          endTime: 0\r\n        };\r\n        const captionTrack = captionTracks[caption.stream];\r\n        captionTrack.startTime = Math.min(captionTrack.startTime, caption.startTime + timestampOffset);\r\n        captionTrack.endTime = Math.max(captionTrack.endTime, caption.endTime + timestampOffset);\r\n        captionTrack.captions.push(caption);\r\n      });\r\n      Object.keys(captionTracks).forEach(trackName => {\r\n        const {\r\n          startTime,\r\n          endTime,\r\n          captions\r\n        } = captionTracks[trackName];\r\n        const inbandTextTracks = this.inbandTextTracks_;\r\n        this.logger_(`adding cues from ${startTime} -> ${endTime} for ${trackName}`);\r\n        createCaptionsTrackIfNotExists(inbandTextTracks, this.vhs_.tech_, trackName); // clear out any cues that start and end at the same time period for the same track.\r\n        // We do this because a rendition change that also changes the timescale for captions\r\n        // will result in captions being re-parsed for certain segments. If we add them again\r\n        // without clearing we will have two of the same captions visible.\r\n\r\n        removeCuesFromTrack(startTime, endTime, inbandTextTracks[trackName]);\r\n        addCaptionData({\r\n          captionArray: captions,\r\n          inbandTextTracks,\r\n          timestampOffset\r\n        });\r\n      }); // Reset stored captions since we added parsed\r\n      // captions to a text track at this point\r\n\r\n      if (this.transmuxer_) {\r\n        this.transmuxer_.postMessage({\r\n          action: 'clearParsedMp4Captions'\r\n        });\r\n      }\r\n    }\r\n    handleId3_(simpleSegment, id3Frames, dispatchType) {\r\n      this.earlyAbortWhenNeeded_(simpleSegment.stats);\r\n      if (this.checkForAbort_(simpleSegment.requestId)) {\r\n        return;\r\n      }\r\n      const segmentInfo = this.pendingSegment_; // we need to have appended data in order for the timestamp offset to be set\r\n\r\n      if (!segmentInfo.hasAppendedData_) {\r\n        this.metadataQueue_.id3.push(this.handleId3_.bind(this, simpleSegment, id3Frames, dispatchType));\r\n        return;\r\n      }\r\n      this.addMetadataToTextTrack(dispatchType, id3Frames, this.duration_());\r\n    }\r\n    processMetadataQueue_() {\r\n      this.metadataQueue_.id3.forEach(fn => fn());\r\n      this.metadataQueue_.caption.forEach(fn => fn());\r\n      this.metadataQueue_.id3 = [];\r\n      this.metadataQueue_.caption = [];\r\n    }\r\n    processCallQueue_() {\r\n      const callQueue = this.callQueue_; // Clear out the queue before the queued functions are run, since some of the\r\n      // functions may check the length of the load queue and default to pushing themselves\r\n      // back onto the queue.\r\n\r\n      this.callQueue_ = [];\r\n      callQueue.forEach(fun => fun());\r\n    }\r\n    processLoadQueue_() {\r\n      const loadQueue = this.loadQueue_; // Clear out the queue before the queued functions are run, since some of the\r\n      // functions may check the length of the load queue and default to pushing themselves\r\n      // back onto the queue.\r\n\r\n      this.loadQueue_ = [];\r\n      loadQueue.forEach(fun => fun());\r\n    }\r\n    /**\r\n     * Determines whether the loader has enough info to load the next segment.\r\n     *\r\n     * @return {boolean}\r\n     *         Whether or not the loader has enough info to load the next segment\r\n     */\r\n\r\n    hasEnoughInfoToLoad_() {\r\n      // Since primary timing goes by video, only the audio loader potentially needs to wait\r\n      // to load.\r\n      if (this.loaderType_ !== 'audio') {\r\n        return true;\r\n      }\r\n      const segmentInfo = this.pendingSegment_; // A fill buffer must have already run to establish a pending segment before there's\r\n      // enough info to load.\r\n\r\n      if (!segmentInfo) {\r\n        return false;\r\n      } // The first segment can and should be loaded immediately so that source buffers are\r\n      // created together (before appending). Source buffer creation uses the presence of\r\n      // audio and video data to determine whether to create audio/video source buffers, and\r\n      // uses processed (transmuxed or parsed) media to determine the types required.\r\n\r\n      if (!this.getCurrentMediaInfo_()) {\r\n        return true;\r\n      }\r\n      if (\r\n      // Technically, instead of waiting to load a segment on timeline changes, a segment\r\n      // can be requested and downloaded and only wait before it is transmuxed or parsed.\r\n      // But in practice, there are a few reasons why it is better to wait until a loader\r\n      // is ready to append that segment before requesting and downloading:\r\n      //\r\n      // 1. Because audio and main loaders cross discontinuities together, if this loader\r\n      //    is waiting for the other to catch up, then instead of requesting another\r\n      //    segment and using up more bandwidth, by not yet loading, more bandwidth is\r\n      //    allotted to the loader currently behind.\r\n      // 2. media-segment-request doesn't have to have logic to consider whether a segment\r\n      // is ready to be processed or not, isolating the queueing behavior to the loader.\r\n      // 3. The audio loader bases some of its segment properties on timing information\r\n      //    provided by the main loader, meaning that, if the logic for waiting on\r\n      //    processing was in media-segment-request, then it would also need to know how\r\n      //    to re-generate the segment information after the main loader caught up.\r\n      shouldWaitForTimelineChange({\r\n        timelineChangeController: this.timelineChangeController_,\r\n        currentTimeline: this.currentTimeline_,\r\n        segmentTimeline: segmentInfo.timeline,\r\n        loaderType: this.loaderType_,\r\n        audioDisabled: this.audioDisabled_\r\n      })) {\r\n        return false;\r\n      }\r\n      return true;\r\n    }\r\n    getCurrentMediaInfo_(segmentInfo = this.pendingSegment_) {\r\n      return segmentInfo && segmentInfo.trackInfo || this.currentMediaInfo_;\r\n    }\r\n    getMediaInfo_(segmentInfo = this.pendingSegment_) {\r\n      return this.getCurrentMediaInfo_(segmentInfo) || this.startingMediaInfo_;\r\n    }\r\n    getPendingSegmentPlaylist() {\r\n      return this.pendingSegment_ ? this.pendingSegment_.playlist : null;\r\n    }\r\n    hasEnoughInfoToAppend_() {\r\n      if (!this.sourceUpdater_.ready()) {\r\n        return false;\r\n      } // If content needs to be removed or the loader is waiting on an append reattempt,\r\n      // then no additional content should be appended until the prior append is resolved.\r\n\r\n      if (this.waitingOnRemove_ || this.quotaExceededErrorRetryTimeout_) {\r\n        return false;\r\n      }\r\n      const segmentInfo = this.pendingSegment_;\r\n      const trackInfo = this.getCurrentMediaInfo_(); // no segment to append any data for or\r\n      // we do not have information on this specific\r\n      // segment yet\r\n\r\n      if (!segmentInfo || !trackInfo) {\r\n        return false;\r\n      }\r\n      const {\r\n        hasAudio,\r\n        hasVideo,\r\n        isMuxed\r\n      } = trackInfo;\r\n      if (hasVideo && !segmentInfo.videoTimingInfo) {\r\n        return false;\r\n      } // muxed content only relies on video timing information for now.\r\n\r\n      if (hasAudio && !this.audioDisabled_ && !isMuxed && !segmentInfo.audioTimingInfo) {\r\n        return false;\r\n      } // we need to allow an append here even if we're moving to different timelines.\r\n\r\n      if (shouldWaitForTimelineChange({\r\n        timelineChangeController: this.timelineChangeController_,\r\n        currentTimeline: this.currentTimeline_,\r\n        segmentTimeline: segmentInfo.timeline,\r\n        loaderType: this.loaderType_,\r\n        audioDisabled: this.audioDisabled_\r\n      })) {\r\n        return false;\r\n      }\r\n      return true;\r\n    }\r\n    handleData_(simpleSegment, result) {\r\n      this.earlyAbortWhenNeeded_(simpleSegment.stats);\r\n      if (this.checkForAbort_(simpleSegment.requestId)) {\r\n        return;\r\n      } // If there's anything in the call queue, then this data came later and should be\r\n      // executed after the calls currently queued.\r\n\r\n      if (this.callQueue_.length || !this.hasEnoughInfoToAppend_()) {\r\n        checkAndFixTimelines(this);\r\n        this.callQueue_.push(this.handleData_.bind(this, simpleSegment, result));\r\n        return;\r\n      }\r\n      const segmentInfo = this.pendingSegment_; // update the time mapping so we can translate from display time to media time\r\n\r\n      this.setTimeMapping_(segmentInfo.timeline); // for tracking overall stats\r\n\r\n      this.updateMediaSecondsLoaded_(segmentInfo.part || segmentInfo.segment); // Note that the state isn't changed from loading to appending. This is because abort\r\n      // logic may change behavior depending on the state, and changing state too early may\r\n      // inflate our estimates of bandwidth. In the future this should be re-examined to\r\n      // note more granular states.\r\n      // don't process and append data if the mediaSource is closed\r\n\r\n      if (this.mediaSource_.readyState === 'closed') {\r\n        return;\r\n      } // if this request included an initialization segment, save that data\r\n      // to the initSegment cache\r\n\r\n      if (simpleSegment.map) {\r\n        simpleSegment.map = this.initSegmentForMap(simpleSegment.map, true); // move over init segment properties to media request\r\n\r\n        segmentInfo.segment.map = simpleSegment.map;\r\n      } // if this request included a segment key, save that data in the cache\r\n\r\n      if (simpleSegment.key) {\r\n        this.segmentKey(simpleSegment.key, true);\r\n      }\r\n      segmentInfo.isFmp4 = simpleSegment.isFmp4;\r\n      segmentInfo.timingInfo = segmentInfo.timingInfo || {};\r\n      if (segmentInfo.isFmp4) {\r\n        this.trigger('fmp4');\r\n        segmentInfo.timingInfo.start = segmentInfo[timingInfoPropertyForMedia(result.type)].start;\r\n      } else {\r\n        const trackInfo = this.getCurrentMediaInfo_();\r\n        const useVideoTimingInfo = this.loaderType_ === 'main' && trackInfo && trackInfo.hasVideo;\r\n        let firstVideoFrameTimeForData;\r\n        if (useVideoTimingInfo) {\r\n          firstVideoFrameTimeForData = segmentInfo.videoTimingInfo.start;\r\n        } // Segment loader knows more about segment timing than the transmuxer (in certain\r\n        // aspects), so make any changes required for a more accurate start time.\r\n        // Don't set the end time yet, as the segment may not be finished processing.\r\n\r\n        segmentInfo.timingInfo.start = this.trueSegmentStart_({\r\n          currentStart: segmentInfo.timingInfo.start,\r\n          playlist: segmentInfo.playlist,\r\n          mediaIndex: segmentInfo.mediaIndex,\r\n          currentVideoTimestampOffset: this.sourceUpdater_.videoTimestampOffset(),\r\n          useVideoTimingInfo,\r\n          firstVideoFrameTimeForData,\r\n          videoTimingInfo: segmentInfo.videoTimingInfo,\r\n          audioTimingInfo: segmentInfo.audioTimingInfo\r\n        });\r\n      } // Init segments for audio and video only need to be appended in certain cases. Now\r\n      // that data is about to be appended, we can check the final cases to determine\r\n      // whether we should append an init segment.\r\n\r\n      this.updateAppendInitSegmentStatus(segmentInfo, result.type); // Timestamp offset should be updated once we get new data and have its timing info,\r\n      // as we use the start of the segment to offset the best guess (playlist provided)\r\n      // timestamp offset.\r\n\r\n      this.updateSourceBufferTimestampOffset_(segmentInfo); // if this is a sync request we need to determine whether it should\r\n      // be appended or not.\r\n\r\n      if (segmentInfo.isSyncRequest) {\r\n        // first save/update our timing info for this segment.\r\n        // this is what allows us to choose an accurate segment\r\n        // and the main reason we make a sync request.\r\n        this.updateTimingInfoEnd_(segmentInfo);\r\n        this.syncController_.saveSegmentTimingInfo({\r\n          segmentInfo,\r\n          shouldSaveTimelineMapping: this.loaderType_ === 'main'\r\n        });\r\n        const next = this.chooseNextRequest_(); // If the sync request isn't the segment that would be requested next\r\n        // after taking into account its timing info, do not append it.\r\n\r\n        if (next.mediaIndex !== segmentInfo.mediaIndex || next.partIndex !== segmentInfo.partIndex) {\r\n          this.logger_('sync segment was incorrect, not appending');\r\n          return;\r\n        } // otherwise append it like any other segment as our guess was correct.\r\n\r\n        this.logger_('sync segment was correct, appending');\r\n      } // Save some state so that in the future anything waiting on first append (and/or\r\n      // timestamp offset(s)) can process immediately. While the extra state isn't optimal,\r\n      // we need some notion of whether the timestamp offset or other relevant information\r\n      // has had a chance to be set.\r\n\r\n      segmentInfo.hasAppendedData_ = true; // Now that the timestamp offset should be set, we can append any waiting ID3 tags.\r\n\r\n      this.processMetadataQueue_();\r\n      this.appendData_(segmentInfo, result);\r\n    }\r\n    updateAppendInitSegmentStatus(segmentInfo, type) {\r\n      // alt audio doesn't manage timestamp offset\r\n      if (this.loaderType_ === 'main' && typeof segmentInfo.timestampOffset === 'number' &&\r\n      // in the case that we're handling partial data, we don't want to append an init\r\n      // segment for each chunk\r\n      !segmentInfo.changedTimestampOffset) {\r\n        // if the timestamp offset changed, the timeline may have changed, so we have to re-\r\n        // append init segments\r\n        this.appendInitSegment_ = {\r\n          audio: true,\r\n          video: true\r\n        };\r\n      }\r\n      if (this.playlistOfLastInitSegment_[type] !== segmentInfo.playlist) {\r\n        // make sure we append init segment on playlist changes, in case the media config\r\n        // changed\r\n        this.appendInitSegment_[type] = true;\r\n      }\r\n    }\r\n    getInitSegmentAndUpdateState_({\r\n      type,\r\n      initSegment,\r\n      map,\r\n      playlist\r\n    }) {\r\n      // \"The EXT-X-MAP tag specifies how to obtain the Media Initialization Section\r\n      // (Section 3) required to parse the applicable Media Segments.  It applies to every\r\n      // Media Segment that appears after it in the Playlist until the next EXT-X-MAP tag\r\n      // or until the end of the playlist.\"\r\n      // https://tools.ietf.org/html/draft-pantos-http-live-streaming-23#section-4.3.2.5\r\n      if (map) {\r\n        const id = initSegmentId(map);\r\n        if (this.activeInitSegmentId_ === id) {\r\n          // don't need to re-append the init segment if the ID matches\r\n          return null;\r\n        } // a map-specified init segment takes priority over any transmuxed (or otherwise\r\n        // obtained) init segment\r\n        //\r\n        // this also caches the init segment for later use\r\n\r\n        initSegment = this.initSegmentForMap(map, true).bytes;\r\n        this.activeInitSegmentId_ = id;\r\n      } // We used to always prepend init segments for video, however, that shouldn't be\r\n      // necessary. Instead, we should only append on changes, similar to what we've always\r\n      // done for audio. This is more important (though may not be that important) for\r\n      // frame-by-frame appending for LHLS, simply because of the increased quantity of\r\n      // appends.\r\n\r\n      if (initSegment && this.appendInitSegment_[type]) {\r\n        // Make sure we track the playlist that we last used for the init segment, so that\r\n        // we can re-append the init segment in the event that we get data from a new\r\n        // playlist. Discontinuities and track changes are handled in other sections.\r\n        this.playlistOfLastInitSegment_[type] = playlist; // Disable future init segment appends for this type. Until a change is necessary.\r\n\r\n        this.appendInitSegment_[type] = false; // we need to clear out the fmp4 active init segment id, since\r\n        // we are appending the muxer init segment\r\n\r\n        this.activeInitSegmentId_ = null;\r\n        return initSegment;\r\n      }\r\n      return null;\r\n    }\r\n    handleQuotaExceededError_({\r\n      segmentInfo,\r\n      type,\r\n      bytes\r\n    }, error) {\r\n      const audioBuffered = this.sourceUpdater_.audioBuffered();\r\n      const videoBuffered = this.sourceUpdater_.videoBuffered(); // For now we're ignoring any notion of gaps in the buffer, but they, in theory,\r\n      // should be cleared out during the buffer removals. However, log in case it helps\r\n      // debug.\r\n\r\n      if (audioBuffered.length > 1) {\r\n        this.logger_('On QUOTA_EXCEEDED_ERR, found gaps in the audio buffer: ' + timeRangesToArray(audioBuffered).join(', '));\r\n      }\r\n      if (videoBuffered.length > 1) {\r\n        this.logger_('On QUOTA_EXCEEDED_ERR, found gaps in the video buffer: ' + timeRangesToArray(videoBuffered).join(', '));\r\n      }\r\n      const audioBufferStart = audioBuffered.length ? audioBuffered.start(0) : 0;\r\n      const audioBufferEnd = audioBuffered.length ? audioBuffered.end(audioBuffered.length - 1) : 0;\r\n      const videoBufferStart = videoBuffered.length ? videoBuffered.start(0) : 0;\r\n      const videoBufferEnd = videoBuffered.length ? videoBuffered.end(videoBuffered.length - 1) : 0;\r\n      if (audioBufferEnd - audioBufferStart <= MIN_BACK_BUFFER && videoBufferEnd - videoBufferStart <= MIN_BACK_BUFFER) {\r\n        // Can't remove enough buffer to make room for new segment (or the browser doesn't\r\n        // allow for appends of segments this size). In the future, it may be possible to\r\n        // split up the segment and append in pieces, but for now, error out this playlist\r\n        // in an attempt to switch to a more manageable rendition.\r\n        this.logger_('On QUOTA_EXCEEDED_ERR, single segment too large to append to ' + 'buffer, triggering an error. ' + `Appended byte length: ${bytes.byteLength}, ` + `audio buffer: ${timeRangesToArray(audioBuffered).join(', ')}, ` + `video buffer: ${timeRangesToArray(videoBuffered).join(', ')}, `);\r\n        this.error({\r\n          message: 'Quota exceeded error with append of a single segment of content',\r\n          excludeUntil: Infinity\r\n        });\r\n        this.trigger('error');\r\n        return;\r\n      } // To try to resolve the quota exceeded error, clear back buffer and retry. This means\r\n      // that the segment-loader should block on future events until this one is handled, so\r\n      // that it doesn't keep moving onto further segments. Adding the call to the call\r\n      // queue will prevent further appends until waitingOnRemove_ and\r\n      // quotaExceededErrorRetryTimeout_ are cleared.\r\n      //\r\n      // Note that this will only block the current loader. In the case of demuxed content,\r\n      // the other load may keep filling as fast as possible. In practice, this should be\r\n      // OK, as it is a rare case when either audio has a high enough bitrate to fill up a\r\n      // source buffer, or video fills without enough room for audio to append (and without\r\n      // the availability of clearing out seconds of back buffer to make room for audio).\r\n      // But it might still be good to handle this case in the future as a TODO.\r\n\r\n      this.waitingOnRemove_ = true;\r\n      this.callQueue_.push(this.appendToSourceBuffer_.bind(this, {\r\n        segmentInfo,\r\n        type,\r\n        bytes\r\n      }));\r\n      const currentTime = this.currentTime_(); // Try to remove as much audio and video as possible to make room for new content\r\n      // before retrying.\r\n\r\n      const timeToRemoveUntil = currentTime - MIN_BACK_BUFFER;\r\n      this.logger_(`On QUOTA_EXCEEDED_ERR, removing audio/video from 0 to ${timeToRemoveUntil}`);\r\n      this.remove(0, timeToRemoveUntil, () => {\r\n        this.logger_(`On QUOTA_EXCEEDED_ERR, retrying append in ${MIN_BACK_BUFFER}s`);\r\n        this.waitingOnRemove_ = false; // wait the length of time alotted in the back buffer to prevent wasted\r\n        // attempts (since we can't clear less than the minimum)\r\n\r\n        this.quotaExceededErrorRetryTimeout_ = window.setTimeout(() => {\r\n          this.logger_('On QUOTA_EXCEEDED_ERR, re-processing call queue');\r\n          this.quotaExceededErrorRetryTimeout_ = null;\r\n          this.processCallQueue_();\r\n        }, MIN_BACK_BUFFER * 1000);\r\n      }, true);\r\n    }\r\n    handleAppendError_({\r\n      segmentInfo,\r\n      type,\r\n      bytes\r\n    }, error) {\r\n      // if there's no error, nothing to do\r\n      if (!error) {\r\n        return;\r\n      }\r\n      if (error.code === QUOTA_EXCEEDED_ERR) {\r\n        this.handleQuotaExceededError_({\r\n          segmentInfo,\r\n          type,\r\n          bytes\r\n        }); // A quota exceeded error should be recoverable with a future re-append, so no need\r\n        // to trigger an append error.\r\n\r\n        return;\r\n      }\r\n      this.logger_('Received non QUOTA_EXCEEDED_ERR on append', error); // If an append errors, we often can't recover.\r\n      // (see https://w3c.github.io/media-source/#sourcebuffer-append-error).\r\n      //\r\n      // Trigger a special error so that it can be handled separately from normal,\r\n      // recoverable errors.\r\n\r\n      this.error({\r\n        message: `${type} append of ${bytes.length}b failed for segment ` + `#${segmentInfo.mediaIndex} in playlist ${segmentInfo.playlist.id}`,\r\n        metadata: {\r\n          errorType: videojs.Error.StreamingFailedToAppendSegment\r\n        }\r\n      });\r\n      this.trigger('appenderror');\r\n    }\r\n    appendToSourceBuffer_({\r\n      segmentInfo,\r\n      type,\r\n      initSegment,\r\n      data,\r\n      bytes\r\n    }) {\r\n      // If this is a re-append, bytes were already created and don't need to be recreated\r\n      if (!bytes) {\r\n        const segments = [data];\r\n        let byteLength = data.byteLength;\r\n        if (initSegment) {\r\n          // if the media initialization segment is changing, append it before the content\r\n          // segment\r\n          segments.unshift(initSegment);\r\n          byteLength += initSegment.byteLength;\r\n        } // Technically we should be OK appending the init segment separately, however, we\r\n        // haven't yet tested that, and prepending is how we have always done things.\r\n\r\n        bytes = concatSegments({\r\n          bytes: byteLength,\r\n          segments\r\n        });\r\n      }\r\n      const metadata = {\r\n        segmentInfo: segmentInfoPayload({\r\n          type: this.loaderType_,\r\n          segment: segmentInfo\r\n        })\r\n      };\r\n      this.trigger({\r\n        type: 'segmentappendstart',\r\n        metadata\r\n      });\r\n      this.sourceUpdater_.appendBuffer({\r\n        segmentInfo,\r\n        type,\r\n        bytes\r\n      }, this.handleAppendError_.bind(this, {\r\n        segmentInfo,\r\n        type,\r\n        bytes\r\n      }));\r\n    }\r\n    handleSegmentTimingInfo_(type, requestId, segmentTimingInfo) {\r\n      if (!this.pendingSegment_ || requestId !== this.pendingSegment_.requestId) {\r\n        return;\r\n      }\r\n      const segment = this.pendingSegment_.segment;\r\n      const timingInfoProperty = `${type}TimingInfo`;\r\n      if (!segment[timingInfoProperty]) {\r\n        segment[timingInfoProperty] = {};\r\n      }\r\n      segment[timingInfoProperty].transmuxerPrependedSeconds = segmentTimingInfo.prependedContentDuration || 0;\r\n      segment[timingInfoProperty].transmuxedPresentationStart = segmentTimingInfo.start.presentation;\r\n      segment[timingInfoProperty].transmuxedDecodeStart = segmentTimingInfo.start.decode;\r\n      segment[timingInfoProperty].transmuxedPresentationEnd = segmentTimingInfo.end.presentation;\r\n      segment[timingInfoProperty].transmuxedDecodeEnd = segmentTimingInfo.end.decode; // mainly used as a reference for debugging\r\n\r\n      segment[timingInfoProperty].baseMediaDecodeTime = segmentTimingInfo.baseMediaDecodeTime;\r\n    }\r\n    appendData_(segmentInfo, result) {\r\n      const {\r\n        type,\r\n        data\r\n      } = result;\r\n      if (!data || !data.byteLength) {\r\n        return;\r\n      }\r\n      if (type === 'audio' && this.audioDisabled_) {\r\n        return;\r\n      }\r\n      const initSegment = this.getInitSegmentAndUpdateState_({\r\n        type,\r\n        initSegment: result.initSegment,\r\n        playlist: segmentInfo.playlist,\r\n        map: segmentInfo.isFmp4 ? segmentInfo.segment.map : null\r\n      });\r\n      this.appendToSourceBuffer_({\r\n        segmentInfo,\r\n        type,\r\n        initSegment,\r\n        data\r\n      });\r\n    }\r\n    /**\r\n     * load a specific segment from a request into the buffer\r\n     *\r\n     * @private\r\n     */\r\n\r\n    loadSegment_(segmentInfo) {\r\n      this.state = 'WAITING';\r\n      this.pendingSegment_ = segmentInfo;\r\n      this.trimBackBuffer_(segmentInfo);\r\n      if (typeof segmentInfo.timestampOffset === 'number') {\r\n        if (this.transmuxer_) {\r\n          this.transmuxer_.postMessage({\r\n            action: 'clearAllMp4Captions'\r\n          });\r\n        }\r\n      }\r\n      if (!this.hasEnoughInfoToLoad_()) {\r\n        checkAndFixTimelines(this);\r\n        this.loadQueue_.push(() => {\r\n          // regenerate the audioAppendStart, timestampOffset, etc as they\r\n          // may have changed since this function was added to the queue.\r\n          const options = _extends$1({}, segmentInfo, {\r\n            forceTimestampOffset: true\r\n          });\r\n          _extends$1(segmentInfo, this.generateSegmentInfo_(options));\r\n          this.isPendingTimestampOffset_ = false;\r\n          this.updateTransmuxerAndRequestSegment_(segmentInfo);\r\n        });\r\n        return;\r\n      }\r\n      this.updateTransmuxerAndRequestSegment_(segmentInfo);\r\n    }\r\n    updateTransmuxerAndRequestSegment_(segmentInfo) {\r\n      // We'll update the source buffer's timestamp offset once we have transmuxed data, but\r\n      // the transmuxer still needs to be updated before then.\r\n      //\r\n      // Even though keepOriginalTimestamps is set to true for the transmuxer, timestamp\r\n      // offset must be passed to the transmuxer for stream correcting adjustments.\r\n      if (this.shouldUpdateTransmuxerTimestampOffset_(segmentInfo.timestampOffset)) {\r\n        this.gopBuffer_.length = 0; // gopsToAlignWith was set before the GOP buffer was cleared\r\n\r\n        segmentInfo.gopsToAlignWith = [];\r\n        this.timeMapping_ = 0; // reset values in the transmuxer since a discontinuity should start fresh\r\n\r\n        this.transmuxer_.postMessage({\r\n          action: 'reset'\r\n        });\r\n        this.transmuxer_.postMessage({\r\n          action: 'setTimestampOffset',\r\n          timestampOffset: segmentInfo.timestampOffset\r\n        });\r\n      }\r\n      const simpleSegment = this.createSimplifiedSegmentObj_(segmentInfo);\r\n      const isEndOfStream = this.isEndOfStream_(segmentInfo.mediaIndex, segmentInfo.playlist, segmentInfo.partIndex);\r\n      const isWalkingForward = this.mediaIndex !== null;\r\n      const isDiscontinuity = segmentInfo.timeline !== this.currentTimeline_ &&\r\n      // currentTimeline starts at -1, so we shouldn't end the timeline switching to 0,\r\n      // the first timeline\r\n      segmentInfo.timeline > 0;\r\n      const isEndOfTimeline = isEndOfStream || isWalkingForward && isDiscontinuity;\r\n      this.logger_(`Requesting\r\n${compactSegmentUrlDescription(segmentInfo.uri)}\r\n${segmentInfoString(segmentInfo)}`); // If there's an init segment associated with this segment, but it is not cached (identified by a lack of bytes),\r\n      // then this init segment has never been seen before and should be appended.\r\n      //\r\n      // At this point the content type (audio/video or both) is not yet known, but it should be safe to set\r\n      // both to true and leave the decision of whether to append the init segment to append time.\r\n\r\n      if (simpleSegment.map && !simpleSegment.map.bytes) {\r\n        this.logger_('going to request init segment.');\r\n        this.appendInitSegment_ = {\r\n          video: true,\r\n          audio: true\r\n        };\r\n      }\r\n      segmentInfo.abortRequests = mediaSegmentRequest({\r\n        xhr: this.vhs_.xhr,\r\n        xhrOptions: this.xhrOptions_,\r\n        decryptionWorker: this.decrypter_,\r\n        segment: simpleSegment,\r\n        abortFn: this.handleAbort_.bind(this, segmentInfo),\r\n        progressFn: this.handleProgress_.bind(this),\r\n        trackInfoFn: this.handleTrackInfo_.bind(this),\r\n        timingInfoFn: this.handleTimingInfo_.bind(this),\r\n        videoSegmentTimingInfoFn: this.handleSegmentTimingInfo_.bind(this, 'video', segmentInfo.requestId),\r\n        audioSegmentTimingInfoFn: this.handleSegmentTimingInfo_.bind(this, 'audio', segmentInfo.requestId),\r\n        captionsFn: this.handleCaptions_.bind(this),\r\n        isEndOfTimeline,\r\n        endedTimelineFn: () => {\r\n          this.logger_('received endedtimeline callback');\r\n        },\r\n        id3Fn: this.handleId3_.bind(this),\r\n        dataFn: this.handleData_.bind(this),\r\n        doneFn: this.segmentRequestFinished_.bind(this),\r\n        onTransmuxerLog: ({\r\n          message,\r\n          level,\r\n          stream\r\n        }) => {\r\n          this.logger_(`${segmentInfoString(segmentInfo)} logged from transmuxer stream ${stream} as a ${level}: ${message}`);\r\n        },\r\n        triggerSegmentEventFn: ({\r\n          type,\r\n          segment,\r\n          keyInfo,\r\n          trackInfo,\r\n          timingInfo\r\n        }) => {\r\n          const segInfo = segmentInfoPayload({\r\n            segment\r\n          });\r\n          const metadata = {\r\n            segmentInfo: segInfo\r\n          }; // add other properties if necessary.\r\n\r\n          if (keyInfo) {\r\n            metadata.keyInfo = keyInfo;\r\n          }\r\n          if (trackInfo) {\r\n            metadata.trackInfo = trackInfo;\r\n          }\r\n          if (timingInfo) {\r\n            metadata.timingInfo = timingInfo;\r\n          }\r\n          this.trigger({\r\n            type,\r\n            metadata\r\n          });\r\n        }\r\n      });\r\n    }\r\n    /**\r\n     * trim the back buffer so that we don't have too much data\r\n     * in the source buffer\r\n     *\r\n     * @private\r\n     *\r\n     * @param {Object} segmentInfo - the current segment\r\n     */\r\n\r\n    trimBackBuffer_(segmentInfo) {\r\n      const removeToTime = safeBackBufferTrimTime(this.seekable_(), this.currentTime_(), this.playlist_.targetDuration || 10); // Chrome has a hard limit of 150MB of\r\n      // buffer and a very conservative \"garbage collector\"\r\n      // We manually clear out the old buffer to ensure\r\n      // we don't trigger the QuotaExceeded error\r\n      // on the source buffer during subsequent appends\r\n\r\n      if (removeToTime > 0) {\r\n        this.remove(0, removeToTime);\r\n      }\r\n    }\r\n    /**\r\n     * created a simplified copy of the segment object with just the\r\n     * information necessary to perform the XHR and decryption\r\n     *\r\n     * @private\r\n     *\r\n     * @param {Object} segmentInfo - the current segment\r\n     * @return {Object} a simplified segment object copy\r\n     */\r\n\r\n    createSimplifiedSegmentObj_(segmentInfo) {\r\n      const segment = segmentInfo.segment;\r\n      const part = segmentInfo.part;\r\n      const isEncrypted = segmentInfo.segment.key || segmentInfo.segment.map && segmentInfo.segment.map.key;\r\n      const isMediaInitialization = segmentInfo.segment.map && !segmentInfo.segment.map.bytes;\r\n      const simpleSegment = {\r\n        resolvedUri: part ? part.resolvedUri : segment.resolvedUri,\r\n        byterange: part ? part.byterange : segment.byterange,\r\n        requestId: segmentInfo.requestId,\r\n        transmuxer: segmentInfo.transmuxer,\r\n        audioAppendStart: segmentInfo.audioAppendStart,\r\n        gopsToAlignWith: segmentInfo.gopsToAlignWith,\r\n        part: segmentInfo.part,\r\n        type: this.loaderType_,\r\n        start: segmentInfo.startOfSegment,\r\n        duration: segmentInfo.duration,\r\n        isEncrypted,\r\n        isMediaInitialization\r\n      };\r\n      const previousSegment = segmentInfo.playlist.segments[segmentInfo.mediaIndex - 1];\r\n      if (previousSegment && previousSegment.timeline === segment.timeline) {\r\n        // The baseStartTime of a segment is used to handle rollover when probing the TS\r\n        // segment to retrieve timing information. Since the probe only looks at the media's\r\n        // times (e.g., PTS and DTS values of the segment), and doesn't consider the\r\n        // player's time (e.g., player.currentTime()), baseStartTime should reflect the\r\n        // media time as well. transmuxedDecodeEnd represents the end time of a segment, in\r\n        // seconds of media time, so should be used here. The previous segment is used since\r\n        // the end of the previous segment should represent the beginning of the current\r\n        // segment, so long as they are on the same timeline.\r\n        if (previousSegment.videoTimingInfo) {\r\n          simpleSegment.baseStartTime = previousSegment.videoTimingInfo.transmuxedDecodeEnd;\r\n        } else if (previousSegment.audioTimingInfo) {\r\n          simpleSegment.baseStartTime = previousSegment.audioTimingInfo.transmuxedDecodeEnd;\r\n        }\r\n      }\r\n      if (segment.key) {\r\n        // if the media sequence is greater than 2^32, the IV will be incorrect\r\n        // assuming 10s segments, that would be about 1300 years\r\n        const iv = segment.key.iv || new Uint32Array([0, 0, 0, segmentInfo.mediaIndex + segmentInfo.playlist.mediaSequence]);\r\n        simpleSegment.key = this.segmentKey(segment.key);\r\n        simpleSegment.key.iv = iv;\r\n      }\r\n      if (segment.map) {\r\n        simpleSegment.map = this.initSegmentForMap(segment.map);\r\n      }\r\n      return simpleSegment;\r\n    }\r\n    saveTransferStats_(stats) {\r\n      // every request counts as a media request even if it has been aborted\r\n      // or canceled due to a timeout\r\n      this.mediaRequests += 1;\r\n      if (stats) {\r\n        this.mediaBytesTransferred += stats.bytesReceived;\r\n        this.mediaTransferDuration += stats.roundTripTime;\r\n      }\r\n    }\r\n    saveBandwidthRelatedStats_(duration, stats) {\r\n      // byteLength will be used for throughput, and should be based on bytes receieved,\r\n      // which we only know at the end of the request and should reflect total bytes\r\n      // downloaded rather than just bytes processed from components of the segment\r\n      this.pendingSegment_.byteLength = stats.bytesReceived;\r\n      if (duration < MIN_SEGMENT_DURATION_TO_SAVE_STATS) {\r\n        this.logger_(`Ignoring segment's bandwidth because its duration of ${duration}` + ` is less than the min to record ${MIN_SEGMENT_DURATION_TO_SAVE_STATS}`);\r\n        return;\r\n      }\r\n      const metadata = {\r\n        bandwidthInfo: {\r\n          from: this.bandwidth,\r\n          to: stats.bandwidth\r\n        }\r\n      }; // player event with payload\r\n\r\n      this.trigger({\r\n        type: 'bandwidthupdated',\r\n        metadata\r\n      });\r\n      this.bandwidth = stats.bandwidth;\r\n      this.roundTrip = stats.roundTripTime;\r\n    }\r\n    handleTimeout_() {\r\n      // although the VTT segment loader bandwidth isn't really used, it's good to\r\n      // maintain functinality between segment loaders\r\n      this.mediaRequestsTimedout += 1;\r\n      this.bandwidth = 1;\r\n      this.roundTrip = NaN;\r\n      this.trigger('bandwidthupdate');\r\n      this.trigger('timeout');\r\n    }\r\n    /**\r\n     * Handle the callback from the segmentRequest function and set the\r\n     * associated SegmentLoader state and errors if necessary\r\n     *\r\n     * @private\r\n     */\r\n\r\n    segmentRequestFinished_(error, simpleSegment, result) {\r\n      // TODO handle special cases, e.g., muxed audio/video but only audio in the segment\r\n      // check the call queue directly since this function doesn't need to deal with any\r\n      // data, and can continue even if the source buffers are not set up and we didn't get\r\n      // any data from the segment\r\n      if (this.callQueue_.length) {\r\n        this.callQueue_.push(this.segmentRequestFinished_.bind(this, error, simpleSegment, result));\r\n        return;\r\n      }\r\n      this.saveTransferStats_(simpleSegment.stats); // The request was aborted and the SegmentLoader has already been reset\r\n\r\n      if (!this.pendingSegment_) {\r\n        return;\r\n      } // the request was aborted and the SegmentLoader has already started\r\n      // another request. this can happen when the timeout for an aborted\r\n      // request triggers due to a limitation in the XHR library\r\n      // do not count this as any sort of request or we risk double-counting\r\n\r\n      if (simpleSegment.requestId !== this.pendingSegment_.requestId) {\r\n        return;\r\n      } // an error occurred from the active pendingSegment_ so reset everything\r\n\r\n      if (error) {\r\n        this.pendingSegment_ = null;\r\n        this.state = 'READY'; // aborts are not a true error condition and nothing corrective needs to be done\r\n\r\n        if (error.code === REQUEST_ERRORS.ABORTED) {\r\n          return;\r\n        }\r\n        this.pause(); // the error is really just that at least one of the requests timed-out\r\n        // set the bandwidth to a very low value and trigger an ABR switch to\r\n        // take emergency action\r\n\r\n        if (error.code === REQUEST_ERRORS.TIMEOUT) {\r\n          this.handleTimeout_();\r\n          return;\r\n        } // if control-flow has arrived here, then the error is real\r\n        // emit an error event to exclude the current playlist\r\n\r\n        this.mediaRequestsErrored += 1;\r\n        this.error(error);\r\n        this.trigger('error');\r\n        return;\r\n      }\r\n      const segmentInfo = this.pendingSegment_; // the response was a success so set any bandwidth stats the request\r\n      // generated for ABR purposes\r\n\r\n      this.saveBandwidthRelatedStats_(segmentInfo.duration, simpleSegment.stats);\r\n      segmentInfo.endOfAllRequests = simpleSegment.endOfAllRequests;\r\n      if (result.gopInfo) {\r\n        this.gopBuffer_ = updateGopBuffer(this.gopBuffer_, result.gopInfo, this.safeAppend_);\r\n      } // Although we may have already started appending on progress, we shouldn't switch the\r\n      // state away from loading until we are officially done loading the segment data.\r\n\r\n      this.state = 'APPENDING'; // used for testing\r\n\r\n      this.trigger('appending');\r\n      this.waitForAppendsToComplete_(segmentInfo);\r\n    }\r\n    setTimeMapping_(timeline) {\r\n      const timelineMapping = this.syncController_.mappingForTimeline(timeline);\r\n      if (timelineMapping !== null) {\r\n        this.timeMapping_ = timelineMapping;\r\n      }\r\n    }\r\n    updateMediaSecondsLoaded_(segment) {\r\n      if (typeof segment.start === 'number' && typeof segment.end === 'number') {\r\n        this.mediaSecondsLoaded += segment.end - segment.start;\r\n      } else {\r\n        this.mediaSecondsLoaded += segment.duration;\r\n      }\r\n    }\r\n    shouldUpdateTransmuxerTimestampOffset_(timestampOffset) {\r\n      if (timestampOffset === null) {\r\n        return false;\r\n      } // note that we're potentially using the same timestamp offset for both video and\r\n      // audio\r\n\r\n      if (this.loaderType_ === 'main' && timestampOffset !== this.sourceUpdater_.videoTimestampOffset()) {\r\n        return true;\r\n      }\r\n      if (!this.audioDisabled_ && timestampOffset !== this.sourceUpdater_.audioTimestampOffset()) {\r\n        return true;\r\n      }\r\n      return false;\r\n    }\r\n    trueSegmentStart_({\r\n      currentStart,\r\n      playlist,\r\n      mediaIndex,\r\n      firstVideoFrameTimeForData,\r\n      currentVideoTimestampOffset,\r\n      useVideoTimingInfo,\r\n      videoTimingInfo,\r\n      audioTimingInfo\r\n    }) {\r\n      if (typeof currentStart !== 'undefined') {\r\n        // if start was set once, keep using it\r\n        return currentStart;\r\n      }\r\n      if (!useVideoTimingInfo) {\r\n        return audioTimingInfo.start;\r\n      }\r\n      const previousSegment = playlist.segments[mediaIndex - 1]; // The start of a segment should be the start of the first full frame contained\r\n      // within that segment. Since the transmuxer maintains a cache of incomplete data\r\n      // from and/or the last frame seen, the start time may reflect a frame that starts\r\n      // in the previous segment. Check for that case and ensure the start time is\r\n      // accurate for the segment.\r\n\r\n      if (mediaIndex === 0 || !previousSegment || typeof previousSegment.start === 'undefined' || previousSegment.end !== firstVideoFrameTimeForData + currentVideoTimestampOffset) {\r\n        return firstVideoFrameTimeForData;\r\n      }\r\n      return videoTimingInfo.start;\r\n    }\r\n    waitForAppendsToComplete_(segmentInfo) {\r\n      const trackInfo = this.getCurrentMediaInfo_(segmentInfo);\r\n      if (!trackInfo) {\r\n        this.error({\r\n          message: 'No starting media returned, likely due to an unsupported media format.',\r\n          playlistExclusionDuration: Infinity\r\n        });\r\n        this.trigger('error');\r\n        return;\r\n      } // Although transmuxing is done, appends may not yet be finished. Throw a marker\r\n      // on each queue this loader is responsible for to ensure that the appends are\r\n      // complete.\r\n\r\n      const {\r\n        hasAudio,\r\n        hasVideo,\r\n        isMuxed\r\n      } = trackInfo;\r\n      const waitForVideo = this.loaderType_ === 'main' && hasVideo;\r\n      const waitForAudio = !this.audioDisabled_ && hasAudio && !isMuxed;\r\n      segmentInfo.waitingOnAppends = 0; // segments with no data\r\n\r\n      if (!segmentInfo.hasAppendedData_) {\r\n        if (!segmentInfo.timingInfo && typeof segmentInfo.timestampOffset === 'number') {\r\n          // When there's no audio or video data in the segment, there's no audio or video\r\n          // timing information.\r\n          //\r\n          // If there's no audio or video timing information, then the timestamp offset\r\n          // can't be adjusted to the appropriate value for the transmuxer and source\r\n          // buffers.\r\n          //\r\n          // Therefore, the next segment should be used to set the timestamp offset.\r\n          this.isPendingTimestampOffset_ = true;\r\n        } // override settings for metadata only segments\r\n\r\n        segmentInfo.timingInfo = {\r\n          start: 0\r\n        };\r\n        segmentInfo.waitingOnAppends++;\r\n        if (!this.isPendingTimestampOffset_) {\r\n          // update the timestampoffset\r\n          this.updateSourceBufferTimestampOffset_(segmentInfo); // make sure the metadata queue is processed even though we have\r\n          // no video/audio data.\r\n\r\n          this.processMetadataQueue_();\r\n        } // append is \"done\" instantly with no data.\r\n\r\n        this.checkAppendsDone_(segmentInfo);\r\n        return;\r\n      } // Since source updater could call back synchronously, do the increments first.\r\n\r\n      if (waitForVideo) {\r\n        segmentInfo.waitingOnAppends++;\r\n      }\r\n      if (waitForAudio) {\r\n        segmentInfo.waitingOnAppends++;\r\n      }\r\n      if (waitForVideo) {\r\n        this.sourceUpdater_.videoQueueCallback(this.checkAppendsDone_.bind(this, segmentInfo));\r\n      }\r\n      if (waitForAudio) {\r\n        this.sourceUpdater_.audioQueueCallback(this.checkAppendsDone_.bind(this, segmentInfo));\r\n      }\r\n    }\r\n    checkAppendsDone_(segmentInfo) {\r\n      if (this.checkForAbort_(segmentInfo.requestId)) {\r\n        return;\r\n      }\r\n      segmentInfo.waitingOnAppends--;\r\n      if (segmentInfo.waitingOnAppends === 0) {\r\n        this.handleAppendsDone_();\r\n      }\r\n    }\r\n    checkForIllegalMediaSwitch(trackInfo) {\r\n      const illegalMediaSwitchError = illegalMediaSwitch(this.loaderType_, this.getCurrentMediaInfo_(), trackInfo);\r\n      if (illegalMediaSwitchError) {\r\n        this.error({\r\n          message: illegalMediaSwitchError,\r\n          playlistExclusionDuration: Infinity\r\n        });\r\n        this.trigger('error');\r\n        return true;\r\n      }\r\n      return false;\r\n    }\r\n    updateSourceBufferTimestampOffset_(segmentInfo) {\r\n      if (segmentInfo.timestampOffset === null ||\r\n      // we don't yet have the start for whatever media type (video or audio) has\r\n      // priority, timing-wise, so we must wait\r\n      typeof segmentInfo.timingInfo.start !== 'number' ||\r\n      // already updated the timestamp offset for this segment\r\n      segmentInfo.changedTimestampOffset ||\r\n      // the alt audio loader should not be responsible for setting the timestamp offset\r\n      this.loaderType_ !== 'main') {\r\n        return;\r\n      }\r\n      let didChange = false; // Primary timing goes by video, and audio is trimmed in the transmuxer, meaning that\r\n      // the timing info here comes from video. In the event that the audio is longer than\r\n      // the video, this will trim the start of the audio.\r\n      // This also trims any offset from 0 at the beginning of the media\r\n\r\n      segmentInfo.timestampOffset -= this.getSegmentStartTimeForTimestampOffsetCalculation_({\r\n        videoTimingInfo: segmentInfo.segment.videoTimingInfo,\r\n        audioTimingInfo: segmentInfo.segment.audioTimingInfo,\r\n        timingInfo: segmentInfo.timingInfo\r\n      }); // In the event that there are part segment downloads, each will try to update the\r\n      // timestamp offset. Retaining this bit of state prevents us from updating in the\r\n      // future (within the same segment), however, there may be a better way to handle it.\r\n\r\n      segmentInfo.changedTimestampOffset = true;\r\n      if (segmentInfo.timestampOffset !== this.sourceUpdater_.videoTimestampOffset()) {\r\n        this.sourceUpdater_.videoTimestampOffset(segmentInfo.timestampOffset);\r\n        didChange = true;\r\n      }\r\n      if (segmentInfo.timestampOffset !== this.sourceUpdater_.audioTimestampOffset()) {\r\n        this.sourceUpdater_.audioTimestampOffset(segmentInfo.timestampOffset);\r\n        didChange = true;\r\n      }\r\n      if (didChange) {\r\n        this.trigger('timestampoffset');\r\n      }\r\n    }\r\n    getSegmentStartTimeForTimestampOffsetCalculation_({\r\n      videoTimingInfo,\r\n      audioTimingInfo,\r\n      timingInfo\r\n    }) {\r\n      if (!this.useDtsForTimestampOffset_) {\r\n        return timingInfo.start;\r\n      }\r\n      if (videoTimingInfo && typeof videoTimingInfo.transmuxedDecodeStart === 'number') {\r\n        return videoTimingInfo.transmuxedDecodeStart;\r\n      } // handle audio only\r\n\r\n      if (audioTimingInfo && typeof audioTimingInfo.transmuxedDecodeStart === 'number') {\r\n        return audioTimingInfo.transmuxedDecodeStart;\r\n      } // handle content not transmuxed (e.g., MP4)\r\n\r\n      return timingInfo.start;\r\n    }\r\n    updateTimingInfoEnd_(segmentInfo) {\r\n      segmentInfo.timingInfo = segmentInfo.timingInfo || {};\r\n      const trackInfo = this.getMediaInfo_();\r\n      const useVideoTimingInfo = this.loaderType_ === 'main' && trackInfo && trackInfo.hasVideo;\r\n      const prioritizedTimingInfo = useVideoTimingInfo && segmentInfo.videoTimingInfo ? segmentInfo.videoTimingInfo : segmentInfo.audioTimingInfo;\r\n      if (!prioritizedTimingInfo) {\r\n        return;\r\n      }\r\n      segmentInfo.timingInfo.end = typeof prioritizedTimingInfo.end === 'number' ?\r\n      // End time may not exist in a case where we aren't parsing the full segment (one\r\n      // current example is the case of fmp4), so use the rough duration to calculate an\r\n      // end time.\r\n      prioritizedTimingInfo.end : prioritizedTimingInfo.start + segmentInfo.duration;\r\n    }\r\n    /**\r\n     * callback to run when appendBuffer is finished. detects if we are\r\n     * in a good state to do things with the data we got, or if we need\r\n     * to wait for more\r\n     *\r\n     * @private\r\n     */\r\n\r\n    handleAppendsDone_() {\r\n      // appendsdone can cause an abort\r\n      if (this.pendingSegment_) {\r\n        const metadata = {\r\n          segmentInfo: segmentInfoPayload({\r\n            type: this.loaderType_,\r\n            segment: this.pendingSegment_\r\n          })\r\n        };\r\n        this.trigger({\r\n          type: 'appendsdone',\r\n          metadata\r\n        });\r\n      }\r\n      if (!this.pendingSegment_) {\r\n        this.state = 'READY'; // TODO should this move into this.checkForAbort to speed up requests post abort in\r\n        // all appending cases?\r\n\r\n        if (!this.paused()) {\r\n          this.monitorBuffer_();\r\n        }\r\n        return;\r\n      }\r\n      const segmentInfo = this.pendingSegment_;\r\n      if (segmentInfo.part && segmentInfo.part.syncInfo) {\r\n        // low-latency flow\r\n        segmentInfo.part.syncInfo.markAppended();\r\n      } else if (segmentInfo.segment.syncInfo) {\r\n        // normal flow\r\n        segmentInfo.segment.syncInfo.markAppended();\r\n      } // Now that the end of the segment has been reached, we can set the end time. It's\r\n      // best to wait until all appends are done so we're sure that the primary media is\r\n      // finished (and we have its end time).\r\n\r\n      this.updateTimingInfoEnd_(segmentInfo);\r\n      if (this.shouldSaveSegmentTimingInfo_) {\r\n        // Timeline mappings should only be saved for the main loader. This is for multiple\r\n        // reasons:\r\n        //\r\n        // 1) Only one mapping is saved per timeline, meaning that if both the audio loader\r\n        //    and the main loader try to save the timeline mapping, whichever comes later\r\n        //    will overwrite the first. In theory this is OK, as the mappings should be the\r\n        //    same, however, it breaks for (2)\r\n        // 2) In the event of a live stream, the initial live point will make for a somewhat\r\n        //    arbitrary mapping. If audio and video streams are not perfectly in-sync, then\r\n        //    the mapping will be off for one of the streams, dependent on which one was\r\n        //    first saved (see (1)).\r\n        // 3) Primary timing goes by video in VHS, so the mapping should be video.\r\n        //\r\n        // Since the audio loader will wait for the main loader to load the first segment,\r\n        // the main loader will save the first timeline mapping, and ensure that there won't\r\n        // be a case where audio loads two segments without saving a mapping (thus leading\r\n        // to missing segment timing info).\r\n        this.syncController_.saveSegmentTimingInfo({\r\n          segmentInfo,\r\n          shouldSaveTimelineMapping: this.loaderType_ === 'main'\r\n        });\r\n      }\r\n      const segmentDurationMessage = getTroublesomeSegmentDurationMessage(segmentInfo, this.sourceType_);\r\n      if (segmentDurationMessage) {\r\n        if (segmentDurationMessage.severity === 'warn') {\r\n          videojs.log.warn(segmentDurationMessage.message);\r\n        } else {\r\n          this.logger_(segmentDurationMessage.message);\r\n        }\r\n      }\r\n      this.recordThroughput_(segmentInfo);\r\n      this.pendingSegment_ = null;\r\n      this.state = 'READY';\r\n      if (segmentInfo.isSyncRequest) {\r\n        this.trigger('syncinfoupdate'); // if the sync request was not appended\r\n        // then it was not the correct segment.\r\n        // throw it away and use the data it gave us\r\n        // to get the correct one.\r\n\r\n        if (!segmentInfo.hasAppendedData_) {\r\n          this.logger_(`Throwing away un-appended sync request ${segmentInfoString(segmentInfo)}`);\r\n          return;\r\n        }\r\n      }\r\n      this.logger_(`Appended ${segmentInfoString(segmentInfo)}`);\r\n      this.addSegmentMetadataCue_(segmentInfo);\r\n      this.fetchAtBuffer_ = true;\r\n      if (this.currentTimeline_ !== segmentInfo.timeline) {\r\n        this.timelineChangeController_.lastTimelineChange({\r\n          type: this.loaderType_,\r\n          from: this.currentTimeline_,\r\n          to: segmentInfo.timeline\r\n        }); // If audio is not disabled, the main segment loader is responsible for updating\r\n        // the audio timeline as well. If the content is video only, this won't have any\r\n        // impact.\r\n\r\n        if (this.loaderType_ === 'main' && !this.audioDisabled_) {\r\n          this.timelineChangeController_.lastTimelineChange({\r\n            type: 'audio',\r\n            from: this.currentTimeline_,\r\n            to: segmentInfo.timeline\r\n          });\r\n        }\r\n      }\r\n      this.currentTimeline_ = segmentInfo.timeline; // We must update the syncinfo to recalculate the seekable range before\r\n      // the following conditional otherwise it may consider this a bad \"guess\"\r\n      // and attempt to resync when the post-update seekable window and live\r\n      // point would mean that this was the perfect segment to fetch\r\n\r\n      this.trigger('syncinfoupdate');\r\n      const segment = segmentInfo.segment;\r\n      const part = segmentInfo.part;\r\n      const badSegmentGuess = segment.end && this.currentTime_() - segment.end > segmentInfo.playlist.targetDuration * 3;\r\n      const badPartGuess = part && part.end && this.currentTime_() - part.end > segmentInfo.playlist.partTargetDuration * 3; // If we previously appended a segment/part that ends more than 3 part/targetDurations before\r\n      // the currentTime_ that means that our conservative guess was too conservative.\r\n      // In that case, reset the loader state so that we try to use any information gained\r\n      // from the previous request to create a new, more accurate, sync-point.\r\n\r\n      if (badSegmentGuess || badPartGuess) {\r\n        this.logger_(`bad ${badSegmentGuess ? 'segment' : 'part'} ${segmentInfoString(segmentInfo)}`);\r\n        this.resetEverything();\r\n        return;\r\n      }\r\n      const isWalkingForward = this.mediaIndex !== null; // Don't do a rendition switch unless we have enough time to get a sync segment\r\n      // and conservatively guess\r\n\r\n      if (isWalkingForward) {\r\n        this.trigger('bandwidthupdate');\r\n      }\r\n      this.trigger('progress');\r\n      this.mediaIndex = segmentInfo.mediaIndex;\r\n      this.partIndex = segmentInfo.partIndex; // any time an update finishes and the last segment is in the\r\n      // buffer, end the stream. this ensures the \"ended\" event will\r\n      // fire if playback reaches that point.\r\n\r\n      if (this.isEndOfStream_(segmentInfo.mediaIndex, segmentInfo.playlist, segmentInfo.partIndex)) {\r\n        this.endOfStream();\r\n      } // used for testing\r\n\r\n      this.trigger('appended');\r\n      if (segmentInfo.hasAppendedData_) {\r\n        this.mediaAppends++;\r\n      }\r\n      if (!this.paused()) {\r\n        this.monitorBuffer_();\r\n      }\r\n    }\r\n    /**\r\n     * Records the current throughput of the decrypt, transmux, and append\r\n     * portion of the semgment pipeline. `throughput.rate` is a the cumulative\r\n     * moving average of the throughput. `throughput.count` is the number of\r\n     * data points in the average.\r\n     *\r\n     * @private\r\n     * @param {Object} segmentInfo the object returned by loadSegment\r\n     */\r\n\r\n    recordThroughput_(segmentInfo) {\r\n      if (segmentInfo.duration < MIN_SEGMENT_DURATION_TO_SAVE_STATS) {\r\n        this.logger_(`Ignoring segment's throughput because its duration of ${segmentInfo.duration}` + ` is less than the min to record ${MIN_SEGMENT_DURATION_TO_SAVE_STATS}`);\r\n        return;\r\n      }\r\n      const rate = this.throughput.rate; // Add one to the time to ensure that we don't accidentally attempt to divide\r\n      // by zero in the case where the throughput is ridiculously high\r\n\r\n      const segmentProcessingTime = Date.now() - segmentInfo.endOfAllRequests + 1; // Multiply by 8000 to convert from bytes/millisecond to bits/second\r\n\r\n      const segmentProcessingThroughput = Math.floor(segmentInfo.byteLength / segmentProcessingTime * 8 * 1000); // This is just a cumulative moving average calculation:\r\n      //   newAvg = oldAvg + (sample - oldAvg) / (sampleCount + 1)\r\n\r\n      this.throughput.rate += (segmentProcessingThroughput - rate) / ++this.throughput.count;\r\n    }\r\n    /**\r\n     * Adds a cue to the segment-metadata track with some metadata information about the\r\n     * segment\r\n     *\r\n     * @private\r\n     * @param {Object} segmentInfo\r\n     *        the object returned by loadSegment\r\n     * @method addSegmentMetadataCue_\r\n     */\r\n\r\n    addSegmentMetadataCue_(segmentInfo) {\r\n      if (!this.segmentMetadataTrack_) {\r\n        return;\r\n      }\r\n      const segment = segmentInfo.segment;\r\n      const start = segment.start;\r\n      const end = segment.end; // Do not try adding the cue if the start and end times are invalid.\r\n\r\n      if (!finite(start) || !finite(end)) {\r\n        return;\r\n      }\r\n      removeCuesFromTrack(start, end, this.segmentMetadataTrack_);\r\n      const Cue = window.WebKitDataCue || window.VTTCue;\r\n      const value = {\r\n        custom: segment.custom,\r\n        dateTimeObject: segment.dateTimeObject,\r\n        dateTimeString: segment.dateTimeString,\r\n        programDateTime: segment.programDateTime,\r\n        bandwidth: segmentInfo.playlist.attributes.BANDWIDTH,\r\n        resolution: segmentInfo.playlist.attributes.RESOLUTION,\r\n        codecs: segmentInfo.playlist.attributes.CODECS,\r\n        byteLength: segmentInfo.byteLength,\r\n        uri: segmentInfo.uri,\r\n        timeline: segmentInfo.timeline,\r\n        playlist: segmentInfo.playlist.id,\r\n        start,\r\n        end\r\n      };\r\n      const data = JSON.stringify(value);\r\n      const cue = new Cue(start, end, data); // Attach the metadata to the value property of the cue to keep consistency between\r\n      // the differences of WebKitDataCue in safari and VTTCue in other browsers\r\n\r\n      cue.value = value;\r\n      this.segmentMetadataTrack_.addCue(cue);\r\n    }\r\n  }\r\n  function noop() {}\r\n  const toTitleCase = function (string) {\r\n    if (typeof string !== 'string') {\r\n      return string;\r\n    }\r\n    return string.replace(/./, w => w.toUpperCase());\r\n  };\r\n\r\n  /**\r\n   * @file source-updater.js\r\n   */\r\n  const bufferTypes = ['video', 'audio'];\r\n  const updating = (type, sourceUpdater) => {\r\n    const sourceBuffer = sourceUpdater[`${type}Buffer`];\r\n    return sourceBuffer && sourceBuffer.updating || sourceUpdater.queuePending[type];\r\n  };\r\n  const nextQueueIndexOfType = (type, queue) => {\r\n    for (let i = 0; i < queue.length; i++) {\r\n      const queueEntry = queue[i];\r\n      if (queueEntry.type === 'mediaSource') {\r\n        // If the next entry is a media source entry (uses multiple source buffers), block\r\n        // processing to allow it to go through first.\r\n        return null;\r\n      }\r\n      if (queueEntry.type === type) {\r\n        return i;\r\n      }\r\n    }\r\n    return null;\r\n  };\r\n  const shiftQueue = (type, sourceUpdater) => {\r\n    if (sourceUpdater.queue.length === 0) {\r\n      return;\r\n    }\r\n    let queueIndex = 0;\r\n    let queueEntry = sourceUpdater.queue[queueIndex];\r\n    if (queueEntry.type === 'mediaSource') {\r\n      if (!sourceUpdater.updating() && sourceUpdater.mediaSource.readyState !== 'closed') {\r\n        sourceUpdater.queue.shift();\r\n        queueEntry.action(sourceUpdater);\r\n        if (queueEntry.doneFn) {\r\n          queueEntry.doneFn();\r\n        } // Only specific source buffer actions must wait for async updateend events. Media\r\n        // Source actions process synchronously. Therefore, both audio and video source\r\n        // buffers are now clear to process the next queue entries.\r\n\r\n        shiftQueue('audio', sourceUpdater);\r\n        shiftQueue('video', sourceUpdater);\r\n      } // Media Source actions require both source buffers, so if the media source action\r\n      // couldn't process yet (because one or both source buffers are busy), block other\r\n      // queue actions until both are available and the media source action can process.\r\n\r\n      return;\r\n    }\r\n    if (type === 'mediaSource') {\r\n      // If the queue was shifted by a media source action (this happens when pushing a\r\n      // media source action onto the queue), then it wasn't from an updateend event from an\r\n      // audio or video source buffer, so there's no change from previous state, and no\r\n      // processing should be done.\r\n      return;\r\n    } // Media source queue entries don't need to consider whether the source updater is\r\n    // started (i.e., source buffers are created) as they don't need the source buffers, but\r\n    // source buffer queue entries do.\r\n\r\n    if (!sourceUpdater.ready() || sourceUpdater.mediaSource.readyState === 'closed' || updating(type, sourceUpdater)) {\r\n      return;\r\n    }\r\n    if (queueEntry.type !== type) {\r\n      queueIndex = nextQueueIndexOfType(type, sourceUpdater.queue);\r\n      if (queueIndex === null) {\r\n        // Either there's no queue entry that uses this source buffer type in the queue, or\r\n        // there's a media source queue entry before the next entry of this type, in which\r\n        // case wait for that action to process first.\r\n        return;\r\n      }\r\n      queueEntry = sourceUpdater.queue[queueIndex];\r\n    }\r\n    sourceUpdater.queue.splice(queueIndex, 1); // Keep a record that this source buffer type is in use.\r\n    //\r\n    // The queue pending operation must be set before the action is performed in the event\r\n    // that the action results in a synchronous event that is acted upon. For instance, if\r\n    // an exception is thrown that can be handled, it's possible that new actions will be\r\n    // appended to an empty queue and immediately executed, but would not have the correct\r\n    // pending information if this property was set after the action was performed.\r\n\r\n    sourceUpdater.queuePending[type] = queueEntry;\r\n    queueEntry.action(type, sourceUpdater);\r\n    if (!queueEntry.doneFn) {\r\n      // synchronous operation, process next entry\r\n      sourceUpdater.queuePending[type] = null;\r\n      shiftQueue(type, sourceUpdater);\r\n      return;\r\n    }\r\n  };\r\n  const cleanupBuffer = (type, sourceUpdater) => {\r\n    const buffer = sourceUpdater[`${type}Buffer`];\r\n    const titleType = toTitleCase(type);\r\n    if (!buffer) {\r\n      return;\r\n    }\r\n    buffer.removeEventListener('updateend', sourceUpdater[`on${titleType}UpdateEnd_`]);\r\n    buffer.removeEventListener('error', sourceUpdater[`on${titleType}Error_`]);\r\n    sourceUpdater.codecs[type] = null;\r\n    sourceUpdater[`${type}Buffer`] = null;\r\n  };\r\n  const inSourceBuffers = (mediaSource, sourceBuffer) => mediaSource && sourceBuffer && Array.prototype.indexOf.call(mediaSource.sourceBuffers, sourceBuffer) !== -1;\r\n  const actions = {\r\n    appendBuffer: (bytes, segmentInfo, onError) => (type, sourceUpdater) => {\r\n      const sourceBuffer = sourceUpdater[`${type}Buffer`]; // can't do anything if the media source / source buffer is null\r\n      // or the media source does not contain this source buffer.\r\n\r\n      if (!inSourceBuffers(sourceUpdater.mediaSource, sourceBuffer)) {\r\n        return;\r\n      }\r\n      sourceUpdater.logger_(`Appending segment ${segmentInfo.mediaIndex}'s ${bytes.length} bytes to ${type}Buffer`);\r\n      try {\r\n        sourceBuffer.appendBuffer(bytes);\r\n      } catch (e) {\r\n        sourceUpdater.logger_(`Error with code ${e.code} ` + (e.code === QUOTA_EXCEEDED_ERR ? '(QUOTA_EXCEEDED_ERR) ' : '') + `when appending segment ${segmentInfo.mediaIndex} to ${type}Buffer`);\r\n        sourceUpdater.queuePending[type] = null;\r\n        onError(e);\r\n      }\r\n    },\r\n    remove: (start, end) => (type, sourceUpdater) => {\r\n      const sourceBuffer = sourceUpdater[`${type}Buffer`]; // can't do anything if the media source / source buffer is null\r\n      // or the media source does not contain this source buffer.\r\n\r\n      if (!inSourceBuffers(sourceUpdater.mediaSource, sourceBuffer)) {\r\n        return;\r\n      }\r\n      sourceUpdater.logger_(`Removing ${start} to ${end} from ${type}Buffer`);\r\n      try {\r\n        sourceBuffer.remove(start, end);\r\n      } catch (e) {\r\n        sourceUpdater.logger_(`Remove ${start} to ${end} from ${type}Buffer failed`);\r\n      }\r\n    },\r\n    timestampOffset: offset => (type, sourceUpdater) => {\r\n      const sourceBuffer = sourceUpdater[`${type}Buffer`]; // can't do anything if the media source / source buffer is null\r\n      // or the media source does not contain this source buffer.\r\n\r\n      if (!inSourceBuffers(sourceUpdater.mediaSource, sourceBuffer)) {\r\n        return;\r\n      }\r\n      sourceUpdater.logger_(`Setting ${type}timestampOffset to ${offset}`);\r\n      sourceBuffer.timestampOffset = offset;\r\n    },\r\n    callback: callback => (type, sourceUpdater) => {\r\n      callback();\r\n    },\r\n    endOfStream: error => sourceUpdater => {\r\n      if (sourceUpdater.mediaSource.readyState !== 'open') {\r\n        return;\r\n      }\r\n      sourceUpdater.logger_(`Calling mediaSource endOfStream(${error || ''})`);\r\n      try {\r\n        sourceUpdater.mediaSource.endOfStream(error);\r\n      } catch (e) {\r\n        videojs.log.warn('Failed to call media source endOfStream', e);\r\n      }\r\n    },\r\n    duration: duration => sourceUpdater => {\r\n      sourceUpdater.logger_(`Setting mediaSource duration to ${duration}`);\r\n      try {\r\n        sourceUpdater.mediaSource.duration = duration;\r\n      } catch (e) {\r\n        videojs.log.warn('Failed to set media source duration', e);\r\n      }\r\n    },\r\n    abort: () => (type, sourceUpdater) => {\r\n      if (sourceUpdater.mediaSource.readyState !== 'open') {\r\n        return;\r\n      }\r\n      const sourceBuffer = sourceUpdater[`${type}Buffer`]; // can't do anything if the media source / source buffer is null\r\n      // or the media source does not contain this source buffer.\r\n\r\n      if (!inSourceBuffers(sourceUpdater.mediaSource, sourceBuffer)) {\r\n        return;\r\n      }\r\n      sourceUpdater.logger_(`calling abort on ${type}Buffer`);\r\n      try {\r\n        sourceBuffer.abort();\r\n      } catch (e) {\r\n        videojs.log.warn(`Failed to abort on ${type}Buffer`, e);\r\n      }\r\n    },\r\n    addSourceBuffer: (type, codec) => sourceUpdater => {\r\n      const titleType = toTitleCase(type);\r\n      const mime = getMimeForCodec(codec);\r\n      sourceUpdater.logger_(`Adding ${type}Buffer with codec ${codec} to mediaSource`);\r\n      const sourceBuffer = sourceUpdater.mediaSource.addSourceBuffer(mime);\r\n      sourceBuffer.addEventListener('updateend', sourceUpdater[`on${titleType}UpdateEnd_`]);\r\n      sourceBuffer.addEventListener('error', sourceUpdater[`on${titleType}Error_`]);\r\n      sourceUpdater.codecs[type] = codec;\r\n      sourceUpdater[`${type}Buffer`] = sourceBuffer;\r\n    },\r\n    removeSourceBuffer: type => sourceUpdater => {\r\n      const sourceBuffer = sourceUpdater[`${type}Buffer`];\r\n      cleanupBuffer(type, sourceUpdater); // can't do anything if the media source / source buffer is null\r\n      // or the media source does not contain this source buffer.\r\n\r\n      if (!inSourceBuffers(sourceUpdater.mediaSource, sourceBuffer)) {\r\n        return;\r\n      }\r\n      sourceUpdater.logger_(`Removing ${type}Buffer with codec ${sourceUpdater.codecs[type]} from mediaSource`);\r\n      try {\r\n        sourceUpdater.mediaSource.removeSourceBuffer(sourceBuffer);\r\n      } catch (e) {\r\n        videojs.log.warn(`Failed to removeSourceBuffer ${type}Buffer`, e);\r\n      }\r\n    },\r\n    changeType: codec => (type, sourceUpdater) => {\r\n      const sourceBuffer = sourceUpdater[`${type}Buffer`];\r\n      const mime = getMimeForCodec(codec); // can't do anything if the media source / source buffer is null\r\n      // or the media source does not contain this source buffer.\r\n\r\n      if (!inSourceBuffers(sourceUpdater.mediaSource, sourceBuffer)) {\r\n        return;\r\n      } // do not update codec if we don't need to.\r\n      // Only update if we change the codec base.\r\n      // For example, going from avc1.640028 to avc1.64001f does not require a changeType call.\r\n\r\n      const newCodecBase = codec.substring(0, codec.indexOf('.'));\r\n      const oldCodec = sourceUpdater.codecs[type];\r\n      const oldCodecBase = oldCodec.substring(0, oldCodec.indexOf('.'));\r\n      if (oldCodecBase === newCodecBase) {\r\n        return;\r\n      }\r\n      const metadata = {\r\n        codecsChangeInfo: {\r\n          from: oldCodec,\r\n          to: codec\r\n        }\r\n      };\r\n      sourceUpdater.trigger({\r\n        type: 'codecschange',\r\n        metadata\r\n      });\r\n      sourceUpdater.logger_(`changing ${type}Buffer codec from ${oldCodec} to ${codec}`); // check if change to the provided type is supported\r\n\r\n      try {\r\n        sourceBuffer.changeType(mime);\r\n        sourceUpdater.codecs[type] = codec;\r\n      } catch (e) {\r\n        metadata.errorType = videojs.Error.StreamingCodecsChangeError;\r\n        metadata.error = e;\r\n        e.metadata = metadata;\r\n        sourceUpdater.error_ = e;\r\n        sourceUpdater.trigger('error');\r\n        videojs.log.warn(`Failed to changeType on ${type}Buffer`, e);\r\n      }\r\n    }\r\n  };\r\n  const pushQueue = ({\r\n    type,\r\n    sourceUpdater,\r\n    action,\r\n    doneFn,\r\n    name\r\n  }) => {\r\n    sourceUpdater.queue.push({\r\n      type,\r\n      action,\r\n      doneFn,\r\n      name\r\n    });\r\n    shiftQueue(type, sourceUpdater);\r\n  };\r\n  const onUpdateend = (type, sourceUpdater) => e => {\r\n    // Although there should, in theory, be a pending action for any updateend receieved,\r\n    // there are some actions that may trigger updateend events without set definitions in\r\n    // the w3c spec. For instance, setting the duration on the media source may trigger\r\n    // updateend events on source buffers. This does not appear to be in the spec. As such,\r\n    // if we encounter an updateend without a corresponding pending action from our queue\r\n    // for that source buffer type, process the next action.\r\n    const bufferedRangesForType = sourceUpdater[`${type}Buffered`]();\r\n    const descriptiveString = bufferedRangesToString(bufferedRangesForType);\r\n    sourceUpdater.logger_(`received \"updateend\" event for ${type} Source Buffer: `, descriptiveString);\r\n    if (sourceUpdater.queuePending[type]) {\r\n      const doneFn = sourceUpdater.queuePending[type].doneFn;\r\n      sourceUpdater.queuePending[type] = null;\r\n      if (doneFn) {\r\n        // if there's an error, report it\r\n        doneFn(sourceUpdater[`${type}Error_`]);\r\n      }\r\n    }\r\n    shiftQueue(type, sourceUpdater);\r\n  };\r\n  /**\r\n   * A queue of callbacks to be serialized and applied when a\r\n   * MediaSource and its associated SourceBuffers are not in the\r\n   * updating state. It is used by the segment loader to update the\r\n   * underlying SourceBuffers when new data is loaded, for instance.\r\n   *\r\n   * @class SourceUpdater\r\n   * @param {MediaSource} mediaSource the MediaSource to create the SourceBuffer from\r\n   * @param {string} mimeType the desired MIME type of the underlying SourceBuffer\r\n   */\r\n\r\n  class SourceUpdater extends videojs.EventTarget {\r\n    constructor(mediaSource) {\r\n      super();\r\n      this.mediaSource = mediaSource;\r\n      this.sourceopenListener_ = () => shiftQueue('mediaSource', this);\r\n      this.mediaSource.addEventListener('sourceopen', this.sourceopenListener_);\r\n      this.logger_ = logger('SourceUpdater'); // initial timestamp offset is 0\r\n\r\n      this.audioTimestampOffset_ = 0;\r\n      this.videoTimestampOffset_ = 0;\r\n      this.queue = [];\r\n      this.queuePending = {\r\n        audio: null,\r\n        video: null\r\n      };\r\n      this.delayedAudioAppendQueue_ = [];\r\n      this.videoAppendQueued_ = false;\r\n      this.codecs = {};\r\n      this.onVideoUpdateEnd_ = onUpdateend('video', this);\r\n      this.onAudioUpdateEnd_ = onUpdateend('audio', this);\r\n      this.onVideoError_ = e => {\r\n        // used for debugging\r\n        this.videoError_ = e;\r\n      };\r\n      this.onAudioError_ = e => {\r\n        // used for debugging\r\n        this.audioError_ = e;\r\n      };\r\n      this.createdSourceBuffers_ = false;\r\n      this.initializedEme_ = false;\r\n      this.triggeredReady_ = false;\r\n    }\r\n    initializedEme() {\r\n      this.initializedEme_ = true;\r\n      this.triggerReady();\r\n    }\r\n    hasCreatedSourceBuffers() {\r\n      // if false, likely waiting on one of the segment loaders to get enough data to create\r\n      // source buffers\r\n      return this.createdSourceBuffers_;\r\n    }\r\n    hasInitializedAnyEme() {\r\n      return this.initializedEme_;\r\n    }\r\n    ready() {\r\n      return this.hasCreatedSourceBuffers() && this.hasInitializedAnyEme();\r\n    }\r\n    createSourceBuffers(codecs) {\r\n      if (this.hasCreatedSourceBuffers()) {\r\n        // already created them before\r\n        return;\r\n      } // the intial addOrChangeSourceBuffers will always be\r\n      // two add buffers.\r\n\r\n      this.addOrChangeSourceBuffers(codecs);\r\n      this.createdSourceBuffers_ = true;\r\n      this.trigger('createdsourcebuffers');\r\n      this.triggerReady();\r\n    }\r\n    triggerReady() {\r\n      // only allow ready to be triggered once, this prevents the case\r\n      // where:\r\n      // 1. we trigger createdsourcebuffers\r\n      // 2. ie 11 synchronously initializates eme\r\n      // 3. the synchronous initialization causes us to trigger ready\r\n      // 4. We go back to the ready check in createSourceBuffers and ready is triggered again.\r\n      if (this.ready() && !this.triggeredReady_) {\r\n        this.triggeredReady_ = true;\r\n        this.trigger('ready');\r\n      }\r\n    }\r\n    /**\r\n     * Add a type of source buffer to the media source.\r\n     *\r\n     * @param {string} type\r\n     *        The type of source buffer to add.\r\n     *\r\n     * @param {string} codec\r\n     *        The codec to add the source buffer with.\r\n     */\r\n\r\n    addSourceBuffer(type, codec) {\r\n      pushQueue({\r\n        type: 'mediaSource',\r\n        sourceUpdater: this,\r\n        action: actions.addSourceBuffer(type, codec),\r\n        name: 'addSourceBuffer'\r\n      });\r\n    }\r\n    /**\r\n     * call abort on a source buffer.\r\n     *\r\n     * @param {string} type\r\n     *        The type of source buffer to call abort on.\r\n     */\r\n\r\n    abort(type) {\r\n      pushQueue({\r\n        type,\r\n        sourceUpdater: this,\r\n        action: actions.abort(type),\r\n        name: 'abort'\r\n      });\r\n    }\r\n    /**\r\n     * Call removeSourceBuffer and remove a specific type\r\n     * of source buffer on the mediaSource.\r\n     *\r\n     * @param {string} type\r\n     *        The type of source buffer to remove.\r\n     */\r\n\r\n    removeSourceBuffer(type) {\r\n      if (!this.canRemoveSourceBuffer()) {\r\n        videojs.log.error('removeSourceBuffer is not supported!');\r\n        return;\r\n      }\r\n      pushQueue({\r\n        type: 'mediaSource',\r\n        sourceUpdater: this,\r\n        action: actions.removeSourceBuffer(type),\r\n        name: 'removeSourceBuffer'\r\n      });\r\n    }\r\n    /**\r\n     * Whether or not the removeSourceBuffer function is supported\r\n     * on the mediaSource.\r\n     *\r\n     * @return {boolean}\r\n     *          if removeSourceBuffer can be called.\r\n     */\r\n\r\n    canRemoveSourceBuffer() {\r\n      // As of Firefox 83 removeSourceBuffer\r\n      // throws errors, so we report that it does not support this.\r\n      return !videojs.browser.IS_FIREFOX && window.MediaSource && window.MediaSource.prototype && typeof window.MediaSource.prototype.removeSourceBuffer === 'function';\r\n    }\r\n    /**\r\n     * Whether or not the changeType function is supported\r\n     * on our SourceBuffers.\r\n     *\r\n     * @return {boolean}\r\n     *         if changeType can be called.\r\n     */\r\n\r\n    static canChangeType() {\r\n      return window.SourceBuffer && window.SourceBuffer.prototype && typeof window.SourceBuffer.prototype.changeType === 'function';\r\n    }\r\n    /**\r\n     * Whether or not the changeType function is supported\r\n     * on our SourceBuffers.\r\n     *\r\n     * @return {boolean}\r\n     *         if changeType can be called.\r\n     */\r\n\r\n    canChangeType() {\r\n      return this.constructor.canChangeType();\r\n    }\r\n    /**\r\n     * Call the changeType function on a source buffer, given the code and type.\r\n     *\r\n     * @param {string} type\r\n     *        The type of source buffer to call changeType on.\r\n     *\r\n     * @param {string} codec\r\n     *        The codec string to change type with on the source buffer.\r\n     */\r\n\r\n    changeType(type, codec) {\r\n      if (!this.canChangeType()) {\r\n        videojs.log.error('changeType is not supported!');\r\n        return;\r\n      }\r\n      pushQueue({\r\n        type,\r\n        sourceUpdater: this,\r\n        action: actions.changeType(codec),\r\n        name: 'changeType'\r\n      });\r\n    }\r\n    /**\r\n     * Add source buffers with a codec or, if they are already created,\r\n     * call changeType on source buffers using changeType.\r\n     *\r\n     * @param {Object} codecs\r\n     *        Codecs to switch to\r\n     */\r\n\r\n    addOrChangeSourceBuffers(codecs) {\r\n      if (!codecs || typeof codecs !== 'object' || Object.keys(codecs).length === 0) {\r\n        throw new Error('Cannot addOrChangeSourceBuffers to undefined codecs');\r\n      }\r\n      Object.keys(codecs).forEach(type => {\r\n        const codec = codecs[type];\r\n        if (!this.hasCreatedSourceBuffers()) {\r\n          return this.addSourceBuffer(type, codec);\r\n        }\r\n        if (this.canChangeType()) {\r\n          this.changeType(type, codec);\r\n        }\r\n      });\r\n    }\r\n    /**\r\n     * Queue an update to append an ArrayBuffer.\r\n     *\r\n     * @param {MediaObject} object containing audioBytes and/or videoBytes\r\n     * @param {Function} done the function to call when done\r\n     * @see http://www.w3.org/TR/media-source/#widl-SourceBuffer-appendBuffer-void-ArrayBuffer-data\r\n     */\r\n\r\n    appendBuffer(options, doneFn) {\r\n      const {\r\n        segmentInfo,\r\n        type,\r\n        bytes\r\n      } = options;\r\n      this.processedAppend_ = true;\r\n      if (type === 'audio' && this.videoBuffer && !this.videoAppendQueued_) {\r\n        this.delayedAudioAppendQueue_.push([options, doneFn]);\r\n        this.logger_(`delayed audio append of ${bytes.length} until video append`);\r\n        return;\r\n      } // In the case of certain errors, for instance, QUOTA_EXCEEDED_ERR, updateend will\r\n      // not be fired. This means that the queue will be blocked until the next action\r\n      // taken by the segment-loader. Provide a mechanism for segment-loader to handle\r\n      // these errors by calling the doneFn with the specific error.\r\n\r\n      const onError = doneFn;\r\n      pushQueue({\r\n        type,\r\n        sourceUpdater: this,\r\n        action: actions.appendBuffer(bytes, segmentInfo || {\r\n          mediaIndex: -1\r\n        }, onError),\r\n        doneFn,\r\n        name: 'appendBuffer'\r\n      });\r\n      if (type === 'video') {\r\n        this.videoAppendQueued_ = true;\r\n        if (!this.delayedAudioAppendQueue_.length) {\r\n          return;\r\n        }\r\n        const queue = this.delayedAudioAppendQueue_.slice();\r\n        this.logger_(`queuing delayed audio ${queue.length} appendBuffers`);\r\n        this.delayedAudioAppendQueue_.length = 0;\r\n        queue.forEach(que => {\r\n          this.appendBuffer.apply(this, que);\r\n        });\r\n      }\r\n    }\r\n    /**\r\n     * Get the audio buffer's buffered timerange.\r\n     *\r\n     * @return {TimeRange}\r\n     *         The audio buffer's buffered time range\r\n     */\r\n\r\n    audioBuffered() {\r\n      // no media source/source buffer or it isn't in the media sources\r\n      // source buffer list\r\n      if (!inSourceBuffers(this.mediaSource, this.audioBuffer)) {\r\n        return createTimeRanges();\r\n      }\r\n      return this.audioBuffer.buffered ? this.audioBuffer.buffered : createTimeRanges();\r\n    }\r\n    /**\r\n     * Get the video buffer's buffered timerange.\r\n     *\r\n     * @return {TimeRange}\r\n     *         The video buffer's buffered time range\r\n     */\r\n\r\n    videoBuffered() {\r\n      // no media source/source buffer or it isn't in the media sources\r\n      // source buffer list\r\n      if (!inSourceBuffers(this.mediaSource, this.videoBuffer)) {\r\n        return createTimeRanges();\r\n      }\r\n      return this.videoBuffer.buffered ? this.videoBuffer.buffered : createTimeRanges();\r\n    }\r\n    /**\r\n     * Get a combined video/audio buffer's buffered timerange.\r\n     *\r\n     * @return {TimeRange}\r\n     *         the combined time range\r\n     */\r\n\r\n    buffered() {\r\n      const video = inSourceBuffers(this.mediaSource, this.videoBuffer) ? this.videoBuffer : null;\r\n      const audio = inSourceBuffers(this.mediaSource, this.audioBuffer) ? this.audioBuffer : null;\r\n      if (audio && !video) {\r\n        return this.audioBuffered();\r\n      }\r\n      if (video && !audio) {\r\n        return this.videoBuffered();\r\n      }\r\n      return bufferIntersection(this.audioBuffered(), this.videoBuffered());\r\n    }\r\n    /**\r\n     * Add a callback to the queue that will set duration on the mediaSource.\r\n     *\r\n     * @param {number} duration\r\n     *        The duration to set\r\n     *\r\n     * @param {Function} [doneFn]\r\n     *        function to run after duration has been set.\r\n     */\r\n\r\n    setDuration(duration, doneFn = noop) {\r\n      // In order to set the duration on the media source, it's necessary to wait for all\r\n      // source buffers to no longer be updating. \"If the updating attribute equals true on\r\n      // any SourceBuffer in sourceBuffers, then throw an InvalidStateError exception and\r\n      // abort these steps.\" (source: https://www.w3.org/TR/media-source/#attributes).\r\n      pushQueue({\r\n        type: 'mediaSource',\r\n        sourceUpdater: this,\r\n        action: actions.duration(duration),\r\n        name: 'duration',\r\n        doneFn\r\n      });\r\n    }\r\n    /**\r\n     * Add a mediaSource endOfStream call to the queue\r\n     *\r\n     * @param {Error} [error]\r\n     *        Call endOfStream with an error\r\n     *\r\n     * @param {Function} [doneFn]\r\n     *        A function that should be called when the\r\n     *        endOfStream call has finished.\r\n     */\r\n\r\n    endOfStream(error = null, doneFn = noop) {\r\n      if (typeof error !== 'string') {\r\n        error = undefined;\r\n      } // In order to set the duration on the media source, it's necessary to wait for all\r\n      // source buffers to no longer be updating. \"If the updating attribute equals true on\r\n      // any SourceBuffer in sourceBuffers, then throw an InvalidStateError exception and\r\n      // abort these steps.\" (source: https://www.w3.org/TR/media-source/#attributes).\r\n\r\n      pushQueue({\r\n        type: 'mediaSource',\r\n        sourceUpdater: this,\r\n        action: actions.endOfStream(error),\r\n        name: 'endOfStream',\r\n        doneFn\r\n      });\r\n    }\r\n    /**\r\n     * Queue an update to remove a time range from the buffer.\r\n     *\r\n     * @param {number} start where to start the removal\r\n     * @param {number} end where to end the removal\r\n     * @param {Function} [done=noop] optional callback to be executed when the remove\r\n     * operation is complete\r\n     * @see http://www.w3.org/TR/media-source/#widl-SourceBuffer-remove-void-double-start-unrestricted-double-end\r\n     */\r\n\r\n    removeAudio(start, end, done = noop) {\r\n      if (!this.audioBuffered().length || this.audioBuffered().end(0) === 0) {\r\n        done();\r\n        return;\r\n      }\r\n      pushQueue({\r\n        type: 'audio',\r\n        sourceUpdater: this,\r\n        action: actions.remove(start, end),\r\n        doneFn: done,\r\n        name: 'remove'\r\n      });\r\n    }\r\n    /**\r\n     * Queue an update to remove a time range from the buffer.\r\n     *\r\n     * @param {number} start where to start the removal\r\n     * @param {number} end where to end the removal\r\n     * @param {Function} [done=noop] optional callback to be executed when the remove\r\n     * operation is complete\r\n     * @see http://www.w3.org/TR/media-source/#widl-SourceBuffer-remove-void-double-start-unrestricted-double-end\r\n     */\r\n\r\n    removeVideo(start, end, done = noop) {\r\n      if (!this.videoBuffered().length || this.videoBuffered().end(0) === 0) {\r\n        done();\r\n        return;\r\n      }\r\n      pushQueue({\r\n        type: 'video',\r\n        sourceUpdater: this,\r\n        action: actions.remove(start, end),\r\n        doneFn: done,\r\n        name: 'remove'\r\n      });\r\n    }\r\n    /**\r\n     * Whether the underlying sourceBuffer is updating or not\r\n     *\r\n     * @return {boolean} the updating status of the SourceBuffer\r\n     */\r\n\r\n    updating() {\r\n      // the audio/video source buffer is updating\r\n      if (updating('audio', this) || updating('video', this)) {\r\n        return true;\r\n      }\r\n      return false;\r\n    }\r\n    /**\r\n     * Set/get the timestampoffset on the audio SourceBuffer\r\n     *\r\n     * @return {number} the timestamp offset\r\n     */\r\n\r\n    audioTimestampOffset(offset) {\r\n      if (typeof offset !== 'undefined' && this.audioBuffer &&\r\n      // no point in updating if it's the same\r\n      this.audioTimestampOffset_ !== offset) {\r\n        pushQueue({\r\n          type: 'audio',\r\n          sourceUpdater: this,\r\n          action: actions.timestampOffset(offset),\r\n          name: 'timestampOffset'\r\n        });\r\n        this.audioTimestampOffset_ = offset;\r\n      }\r\n      return this.audioTimestampOffset_;\r\n    }\r\n    /**\r\n     * Set/get the timestampoffset on the video SourceBuffer\r\n     *\r\n     * @return {number} the timestamp offset\r\n     */\r\n\r\n    videoTimestampOffset(offset) {\r\n      if (typeof offset !== 'undefined' && this.videoBuffer &&\r\n      // no point in updating if it's the same\r\n      this.videoTimestampOffset_ !== offset) {\r\n        pushQueue({\r\n          type: 'video',\r\n          sourceUpdater: this,\r\n          action: actions.timestampOffset(offset),\r\n          name: 'timestampOffset'\r\n        });\r\n        this.videoTimestampOffset_ = offset;\r\n      }\r\n      return this.videoTimestampOffset_;\r\n    }\r\n    /**\r\n     * Add a function to the queue that will be called\r\n     * when it is its turn to run in the audio queue.\r\n     *\r\n     * @param {Function} callback\r\n     *        The callback to queue.\r\n     */\r\n\r\n    audioQueueCallback(callback) {\r\n      if (!this.audioBuffer) {\r\n        return;\r\n      }\r\n      pushQueue({\r\n        type: 'audio',\r\n        sourceUpdater: this,\r\n        action: actions.callback(callback),\r\n        name: 'callback'\r\n      });\r\n    }\r\n    /**\r\n     * Add a function to the queue that will be called\r\n     * when it is its turn to run in the video queue.\r\n     *\r\n     * @param {Function} callback\r\n     *        The callback to queue.\r\n     */\r\n\r\n    videoQueueCallback(callback) {\r\n      if (!this.videoBuffer) {\r\n        return;\r\n      }\r\n      pushQueue({\r\n        type: 'video',\r\n        sourceUpdater: this,\r\n        action: actions.callback(callback),\r\n        name: 'callback'\r\n      });\r\n    }\r\n    /**\r\n     * dispose of the source updater and the underlying sourceBuffer\r\n     */\r\n\r\n    dispose() {\r\n      this.trigger('dispose');\r\n      bufferTypes.forEach(type => {\r\n        this.abort(type);\r\n        if (this.canRemoveSourceBuffer()) {\r\n          this.removeSourceBuffer(type);\r\n        } else {\r\n          this[`${type}QueueCallback`](() => cleanupBuffer(type, this));\r\n        }\r\n      });\r\n      this.videoAppendQueued_ = false;\r\n      this.delayedAudioAppendQueue_.length = 0;\r\n      if (this.sourceopenListener_) {\r\n        this.mediaSource.removeEventListener('sourceopen', this.sourceopenListener_);\r\n      }\r\n      this.off();\r\n    }\r\n  }\r\n  const uint8ToUtf8 = uintArray => decodeURIComponent(escape(String.fromCharCode.apply(null, uintArray)));\r\n  const bufferToHexString = buffer => {\r\n    const uInt8Buffer = new Uint8Array(buffer);\r\n    return Array.from(uInt8Buffer).map(byte => byte.toString(16).padStart(2, '0')).join('');\r\n  };\r\n\r\n  /**\r\n   * @file vtt-segment-loader.js\r\n   */\r\n  const VTT_LINE_TERMINATORS = new Uint8Array('\\n\\n'.split('').map(char => char.charCodeAt(0)));\r\n  class NoVttJsError extends Error {\r\n    constructor() {\r\n      super('Trying to parse received VTT cues, but there is no WebVTT. Make sure vtt.js is loaded.');\r\n    }\r\n  }\r\n  /**\r\n   * An object that manages segment loading and appending.\r\n   *\r\n   * @class VTTSegmentLoader\r\n   * @param {Object} options required and optional options\r\n   * @extends videojs.EventTarget\r\n   */\r\n\r\n  class VTTSegmentLoader extends SegmentLoader {\r\n    constructor(settings, options = {}) {\r\n      super(settings, options); // SegmentLoader requires a MediaSource be specified or it will throw an error;\r\n      // however, VTTSegmentLoader has no need of a media source, so delete the reference\r\n\r\n      this.mediaSource_ = null;\r\n      this.subtitlesTrack_ = null;\r\n      this.featuresNativeTextTracks_ = settings.featuresNativeTextTracks;\r\n      this.loadVttJs = settings.loadVttJs; // The VTT segment will have its own time mappings. Saving VTT segment timing info in\r\n      // the sync controller leads to improper behavior.\r\n\r\n      this.shouldSaveSegmentTimingInfo_ = false;\r\n    }\r\n    /**\r\n     * Indicates which time ranges are buffered\r\n     *\r\n     * @return {TimeRange}\r\n     *         TimeRange object representing the current buffered ranges\r\n     */\r\n\r\n    buffered_() {\r\n      if (!this.subtitlesTrack_ || !this.subtitlesTrack_.cues || !this.subtitlesTrack_.cues.length) {\r\n        return createTimeRanges();\r\n      }\r\n      const cues = this.subtitlesTrack_.cues;\r\n      const start = cues[0].startTime;\r\n      const end = cues[cues.length - 1].startTime;\r\n      return createTimeRanges([[start, end]]);\r\n    }\r\n    /**\r\n     * Gets and sets init segment for the provided map\r\n     *\r\n     * @param {Object} map\r\n     *        The map object representing the init segment to get or set\r\n     * @param {boolean=} set\r\n     *        If true, the init segment for the provided map should be saved\r\n     * @return {Object}\r\n     *         map object for desired init segment\r\n     */\r\n\r\n    initSegmentForMap(map, set = false) {\r\n      if (!map) {\r\n        return null;\r\n      }\r\n      const id = initSegmentId(map);\r\n      let storedMap = this.initSegments_[id];\r\n      if (set && !storedMap && map.bytes) {\r\n        // append WebVTT line terminators to the media initialization segment if it exists\r\n        // to follow the WebVTT spec (https://w3c.github.io/webvtt/#file-structure) that\r\n        // requires two or more WebVTT line terminators between the WebVTT header and the\r\n        // rest of the file\r\n        const combinedByteLength = VTT_LINE_TERMINATORS.byteLength + map.bytes.byteLength;\r\n        const combinedSegment = new Uint8Array(combinedByteLength);\r\n        combinedSegment.set(map.bytes);\r\n        combinedSegment.set(VTT_LINE_TERMINATORS, map.bytes.byteLength);\r\n        this.initSegments_[id] = storedMap = {\r\n          resolvedUri: map.resolvedUri,\r\n          byterange: map.byterange,\r\n          bytes: combinedSegment\r\n        };\r\n      }\r\n      return storedMap || map;\r\n    }\r\n    /**\r\n     * Returns true if all configuration required for loading is present, otherwise false.\r\n     *\r\n     * @return {boolean} True if the all configuration is ready for loading\r\n     * @private\r\n     */\r\n\r\n    couldBeginLoading_() {\r\n      return this.playlist_ && this.subtitlesTrack_ && !this.paused();\r\n    }\r\n    /**\r\n     * Once all the starting parameters have been specified, begin\r\n     * operation. This method should only be invoked from the INIT\r\n     * state.\r\n     *\r\n     * @private\r\n     */\r\n\r\n    init_() {\r\n      this.state = 'READY';\r\n      this.resetEverything();\r\n      return this.monitorBuffer_();\r\n    }\r\n    /**\r\n     * Set a subtitle track on the segment loader to add subtitles to\r\n     *\r\n     * @param {TextTrack=} track\r\n     *        The text track to add loaded subtitles to\r\n     * @return {TextTrack}\r\n     *        Returns the subtitles track\r\n     */\r\n\r\n    track(track) {\r\n      if (typeof track === 'undefined') {\r\n        return this.subtitlesTrack_;\r\n      }\r\n      this.subtitlesTrack_ = track; // if we were unpaused but waiting for a sourceUpdater, start\r\n      // buffering now\r\n\r\n      if (this.state === 'INIT' && this.couldBeginLoading_()) {\r\n        this.init_();\r\n      }\r\n      return this.subtitlesTrack_;\r\n    }\r\n    /**\r\n     * Remove any data in the source buffer between start and end times\r\n     *\r\n     * @param {number} start - the start time of the region to remove from the buffer\r\n     * @param {number} end - the end time of the region to remove from the buffer\r\n     */\r\n\r\n    remove(start, end) {\r\n      removeCuesFromTrack(start, end, this.subtitlesTrack_);\r\n    }\r\n    /**\r\n     * fill the buffer with segements unless the sourceBuffers are\r\n     * currently updating\r\n     *\r\n     * Note: this function should only ever be called by monitorBuffer_\r\n     * and never directly\r\n     *\r\n     * @private\r\n     */\r\n\r\n    fillBuffer_() {\r\n      // see if we need to begin loading immediately\r\n      const segmentInfo = this.chooseNextRequest_();\r\n      if (!segmentInfo) {\r\n        return;\r\n      }\r\n      if (this.syncController_.timestampOffsetForTimeline(segmentInfo.timeline) === null) {\r\n        // We don't have the timestamp offset that we need to sync subtitles.\r\n        // Rerun on a timestamp offset or user interaction.\r\n        const checkTimestampOffset = () => {\r\n          this.state = 'READY';\r\n          if (!this.paused()) {\r\n            // if not paused, queue a buffer check as soon as possible\r\n            this.monitorBuffer_();\r\n          }\r\n        };\r\n        this.syncController_.one('timestampoffset', checkTimestampOffset);\r\n        this.state = 'WAITING_ON_TIMELINE';\r\n        return;\r\n      }\r\n      this.loadSegment_(segmentInfo);\r\n    } // never set a timestamp offset for vtt segments.\r\n\r\n    timestampOffsetForSegment_() {\r\n      return null;\r\n    }\r\n    chooseNextRequest_() {\r\n      return this.skipEmptySegments_(super.chooseNextRequest_());\r\n    }\r\n    /**\r\n     * Prevents the segment loader from requesting segments we know contain no subtitles\r\n     * by walking forward until we find the next segment that we don't know whether it is\r\n     * empty or not.\r\n     *\r\n     * @param {Object} segmentInfo\r\n     *        a segment info object that describes the current segment\r\n     * @return {Object}\r\n     *         a segment info object that describes the current segment\r\n     */\r\n\r\n    skipEmptySegments_(segmentInfo) {\r\n      while (segmentInfo && segmentInfo.segment.empty) {\r\n        // stop at the last possible segmentInfo\r\n        if (segmentInfo.mediaIndex + 1 >= segmentInfo.playlist.segments.length) {\r\n          segmentInfo = null;\r\n          break;\r\n        }\r\n        segmentInfo = this.generateSegmentInfo_({\r\n          playlist: segmentInfo.playlist,\r\n          mediaIndex: segmentInfo.mediaIndex + 1,\r\n          startOfSegment: segmentInfo.startOfSegment + segmentInfo.duration,\r\n          isSyncRequest: segmentInfo.isSyncRequest\r\n        });\r\n      }\r\n      return segmentInfo;\r\n    }\r\n    stopForError(error) {\r\n      this.error(error);\r\n      this.state = 'READY';\r\n      this.pause();\r\n      this.trigger('error');\r\n    }\r\n    /**\r\n     * append a decrypted segement to the SourceBuffer through a SourceUpdater\r\n     *\r\n     * @private\r\n     */\r\n\r\n    segmentRequestFinished_(error, simpleSegment, result) {\r\n      if (!this.subtitlesTrack_) {\r\n        this.state = 'READY';\r\n        return;\r\n      }\r\n      this.saveTransferStats_(simpleSegment.stats); // the request was aborted\r\n\r\n      if (!this.pendingSegment_) {\r\n        this.state = 'READY';\r\n        this.mediaRequestsAborted += 1;\r\n        return;\r\n      }\r\n      if (error) {\r\n        if (error.code === REQUEST_ERRORS.TIMEOUT) {\r\n          this.handleTimeout_();\r\n        }\r\n        if (error.code === REQUEST_ERRORS.ABORTED) {\r\n          this.mediaRequestsAborted += 1;\r\n        } else {\r\n          this.mediaRequestsErrored += 1;\r\n        }\r\n        this.stopForError(error);\r\n        return;\r\n      }\r\n      const segmentInfo = this.pendingSegment_;\r\n      const isMp4WebVttSegmentWithCues = result.mp4VttCues && result.mp4VttCues.length;\r\n      if (isMp4WebVttSegmentWithCues) {\r\n        segmentInfo.mp4VttCues = result.mp4VttCues;\r\n      } // although the VTT segment loader bandwidth isn't really used, it's good to\r\n      // maintain functionality between segment loaders\r\n\r\n      this.saveBandwidthRelatedStats_(segmentInfo.duration, simpleSegment.stats); // if this request included a segment key, save that data in the cache\r\n\r\n      if (simpleSegment.key) {\r\n        this.segmentKey(simpleSegment.key, true);\r\n      }\r\n      this.state = 'APPENDING'; // used for tests\r\n\r\n      this.trigger('appending');\r\n      const segment = segmentInfo.segment;\r\n      if (segment.map) {\r\n        segment.map.bytes = simpleSegment.map.bytes;\r\n      }\r\n      segmentInfo.bytes = simpleSegment.bytes; // Make sure that vttjs has loaded, otherwise, load it and wait till it finished loading\r\n\r\n      if (typeof window.WebVTT !== 'function' && typeof this.loadVttJs === 'function') {\r\n        this.state = 'WAITING_ON_VTTJS'; // should be fine to call multiple times\r\n        // script will be loaded once but multiple listeners will be added to the queue, which is expected.\r\n\r\n        this.loadVttJs().then(() => this.segmentRequestFinished_(error, simpleSegment, result), () => this.stopForError({\r\n          message: 'Error loading vtt.js'\r\n        }));\r\n        return;\r\n      }\r\n      segment.requested = true;\r\n      try {\r\n        this.parseVTTCues_(segmentInfo);\r\n      } catch (e) {\r\n        this.stopForError({\r\n          message: e.message,\r\n          metadata: {\r\n            errorType: videojs.Error.StreamingVttParserError,\r\n            error: e\r\n          }\r\n        });\r\n        return;\r\n      }\r\n      if (!isMp4WebVttSegmentWithCues) {\r\n        this.updateTimeMapping_(segmentInfo, this.syncController_.timelines[segmentInfo.timeline], this.playlist_);\r\n      }\r\n      if (segmentInfo.cues.length) {\r\n        segmentInfo.timingInfo = {\r\n          start: segmentInfo.cues[0].startTime,\r\n          end: segmentInfo.cues[segmentInfo.cues.length - 1].endTime\r\n        };\r\n      } else {\r\n        segmentInfo.timingInfo = {\r\n          start: segmentInfo.startOfSegment,\r\n          end: segmentInfo.startOfSegment + segmentInfo.duration\r\n        };\r\n      }\r\n      if (segmentInfo.isSyncRequest) {\r\n        this.trigger('syncinfoupdate');\r\n        this.pendingSegment_ = null;\r\n        this.state = 'READY';\r\n        return;\r\n      }\r\n      segmentInfo.byteLength = segmentInfo.bytes.byteLength;\r\n      this.mediaSecondsLoaded += segment.duration; // Create VTTCue instances for each cue in the new segment and add them to\r\n      // the subtitle track\r\n\r\n      segmentInfo.cues.forEach(cue => {\r\n        this.subtitlesTrack_.addCue(this.featuresNativeTextTracks_ ? new window.VTTCue(cue.startTime, cue.endTime, cue.text) : cue);\r\n      }); // Remove any duplicate cues from the subtitle track. The WebVTT spec allows\r\n      // cues to have identical time-intervals, but if the text is also identical\r\n      // we can safely assume it is a duplicate that can be removed (ex. when a cue\r\n      // \"overlaps\" VTT segments)\r\n\r\n      removeDuplicateCuesFromTrack(this.subtitlesTrack_);\r\n      this.handleAppendsDone_();\r\n    }\r\n    handleData_(simpleSegment, result) {\r\n      const isVttType = simpleSegment && simpleSegment.type === 'vtt';\r\n      const isTextResult = result && result.type === 'text';\r\n      const isFmp4VttSegment = isVttType && isTextResult; // handle segment data for fmp4 encapsulated webvtt\r\n\r\n      if (isFmp4VttSegment) {\r\n        super.handleData_(simpleSegment, result);\r\n      }\r\n    }\r\n    updateTimingInfoEnd_() {// noop\r\n    }\r\n    /**\r\n     * Utility function for converting mp4 webvtt cue objects into VTTCues.\r\n     *\r\n     * @param {Object} segmentInfo with mp4 webvtt cues for parsing into VTTCue objecs\r\n     */\r\n\r\n    parseMp4VttCues_(segmentInfo) {\r\n      const timestampOffset = this.sourceUpdater_.videoTimestampOffset() === null ? this.sourceUpdater_.audioTimestampOffset() : this.sourceUpdater_.videoTimestampOffset();\r\n      segmentInfo.mp4VttCues.forEach(cue => {\r\n        const start = cue.start + timestampOffset;\r\n        const end = cue.end + timestampOffset;\r\n        const vttCue = new window.VTTCue(start, end, cue.cueText);\r\n        if (cue.settings) {\r\n          cue.settings.split(' ').forEach(cueSetting => {\r\n            const keyValString = cueSetting.split(':');\r\n            const key = keyValString[0];\r\n            const value = keyValString[1];\r\n            vttCue[key] = isNaN(value) ? value : Number(value);\r\n          });\r\n        }\r\n        segmentInfo.cues.push(vttCue);\r\n      });\r\n    }\r\n    /**\r\n     * Uses the WebVTT parser to parse the segment response\r\n     *\r\n     * @throws NoVttJsError\r\n     *\r\n     * @param {Object} segmentInfo\r\n     *        a segment info object that describes the current segment\r\n     * @private\r\n     */\r\n\r\n    parseVTTCues_(segmentInfo) {\r\n      let decoder;\r\n      let decodeBytesToString = false;\r\n      if (typeof window.WebVTT !== 'function') {\r\n        // caller is responsible for exception handling.\r\n        throw new NoVttJsError();\r\n      }\r\n      segmentInfo.cues = [];\r\n      segmentInfo.timestampmap = {\r\n        MPEGTS: 0,\r\n        LOCAL: 0\r\n      };\r\n      if (segmentInfo.mp4VttCues) {\r\n        this.parseMp4VttCues_(segmentInfo);\r\n        return;\r\n      }\r\n      if (typeof window.TextDecoder === 'function') {\r\n        decoder = new window.TextDecoder('utf8');\r\n      } else {\r\n        decoder = window.WebVTT.StringDecoder();\r\n        decodeBytesToString = true;\r\n      }\r\n      const parser = new window.WebVTT.Parser(window, window.vttjs, decoder);\r\n      parser.oncue = segmentInfo.cues.push.bind(segmentInfo.cues);\r\n      parser.ontimestampmap = map => {\r\n        segmentInfo.timestampmap = map;\r\n      };\r\n      parser.onparsingerror = error => {\r\n        videojs.log.warn('Error encountered when parsing cues: ' + error.message);\r\n      };\r\n      if (segmentInfo.segment.map) {\r\n        let mapData = segmentInfo.segment.map.bytes;\r\n        if (decodeBytesToString) {\r\n          mapData = uint8ToUtf8(mapData);\r\n        }\r\n        parser.parse(mapData);\r\n      }\r\n      let segmentData = segmentInfo.bytes;\r\n      if (decodeBytesToString) {\r\n        segmentData = uint8ToUtf8(segmentData);\r\n      }\r\n      parser.parse(segmentData);\r\n      parser.flush();\r\n    }\r\n    /**\r\n     * Updates the start and end times of any cues parsed by the WebVTT parser using\r\n     * the information parsed from the X-TIMESTAMP-MAP header and a TS to media time mapping\r\n     * from the SyncController\r\n     *\r\n     * @param {Object} segmentInfo\r\n     *        a segment info object that describes the current segment\r\n     * @param {Object} mappingObj\r\n     *        object containing a mapping from TS to media time\r\n     * @param {Object} playlist\r\n     *        the playlist object containing the segment\r\n     * @private\r\n     */\r\n\r\n    updateTimeMapping_(segmentInfo, mappingObj, playlist) {\r\n      const segment = segmentInfo.segment;\r\n      if (!mappingObj) {\r\n        // If the sync controller does not have a mapping of TS to Media Time for the\r\n        // timeline, then we don't have enough information to update the cue\r\n        // start/end times\r\n        return;\r\n      }\r\n      if (!segmentInfo.cues.length) {\r\n        // If there are no cues, we also do not have enough information to figure out\r\n        // segment timing. Mark that the segment contains no cues so we don't re-request\r\n        // an empty segment.\r\n        segment.empty = true;\r\n        return;\r\n      }\r\n      const {\r\n        MPEGTS,\r\n        LOCAL\r\n      } = segmentInfo.timestampmap;\r\n      /**\r\n       * From the spec:\r\n       * The MPEGTS media timestamp MUST use a 90KHz timescale,\r\n       * even when non-WebVTT Media Segments use a different timescale.\r\n       */\r\n\r\n      const mpegTsInSeconds = MPEGTS / clock_1;\r\n      const diff = mpegTsInSeconds - LOCAL + mappingObj.mapping;\r\n      segmentInfo.cues.forEach(cue => {\r\n        const duration = cue.endTime - cue.startTime;\r\n        const startTime = this.handleRollover_(cue.startTime + diff, mappingObj.time);\r\n        cue.startTime = Math.max(startTime, 0);\r\n        cue.endTime = Math.max(startTime + duration, 0);\r\n      });\r\n      if (!playlist.syncInfo) {\r\n        const firstStart = segmentInfo.cues[0].startTime;\r\n        const lastStart = segmentInfo.cues[segmentInfo.cues.length - 1].startTime;\r\n        playlist.syncInfo = {\r\n          mediaSequence: playlist.mediaSequence + segmentInfo.mediaIndex,\r\n          time: Math.min(firstStart, lastStart - segment.duration)\r\n        };\r\n      }\r\n    }\r\n    /**\r\n     * MPEG-TS PES timestamps are limited to 2^33.\r\n     * Once they reach 2^33, they roll over to 0.\r\n     * mux.js handles PES timestamp rollover for the following scenarios:\r\n     * [forward rollover(right)] ->\r\n     *    PES timestamps monotonically increase, and once they reach 2^33, they roll over to 0\r\n     * [backward rollover(left)] -->\r\n     *    we seek back to position before rollover.\r\n     *\r\n     * According to the HLS SPEC:\r\n     * When synchronizing WebVTT with PES timestamps, clients SHOULD account\r\n     * for cases where the 33-bit PES timestamps have wrapped and the WebVTT\r\n     * cue times have not.  When the PES timestamp wraps, the WebVTT Segment\r\n     * SHOULD have a X-TIMESTAMP-MAP header that maps the current WebVTT\r\n     * time to the new (low valued) PES timestamp.\r\n     *\r\n     * So we want to handle rollover here and align VTT Cue start/end time to the player's time.\r\n     */\r\n\r\n    handleRollover_(value, reference) {\r\n      if (reference === null) {\r\n        return value;\r\n      }\r\n      let valueIn90khz = value * clock_1;\r\n      const referenceIn90khz = reference * clock_1;\r\n      let offset;\r\n      if (referenceIn90khz < valueIn90khz) {\r\n        // - 2^33\r\n        offset = -8589934592;\r\n      } else {\r\n        // + 2^33\r\n        offset = 8589934592;\r\n      } // distance(value - reference) > 2^32\r\n\r\n      while (Math.abs(valueIn90khz - referenceIn90khz) > 4294967296) {\r\n        valueIn90khz += offset;\r\n      }\r\n      return valueIn90khz / clock_1;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @file ad-cue-tags.js\r\n   */\r\n  /**\r\n   * Searches for an ad cue that overlaps with the given mediaTime\r\n   *\r\n   * @param {Object} track\r\n   *        the track to find the cue for\r\n   *\r\n   * @param {number} mediaTime\r\n   *        the time to find the cue at\r\n   *\r\n   * @return {Object|null}\r\n   *         the found cue or null\r\n   */\r\n\r\n  const findAdCue = function (track, mediaTime) {\r\n    const cues = track.cues;\r\n    for (let i = 0; i < cues.length; i++) {\r\n      const cue = cues[i];\r\n      if (mediaTime >= cue.adStartTime && mediaTime <= cue.adEndTime) {\r\n        return cue;\r\n      }\r\n    }\r\n    return null;\r\n  };\r\n  const updateAdCues = function (media, track, offset = 0) {\r\n    if (!media.segments) {\r\n      return;\r\n    }\r\n    let mediaTime = offset;\r\n    let cue;\r\n    for (let i = 0; i < media.segments.length; i++) {\r\n      const segment = media.segments[i];\r\n      if (!cue) {\r\n        // Since the cues will span for at least the segment duration, adding a fudge\r\n        // factor of half segment duration will prevent duplicate cues from being\r\n        // created when timing info is not exact (e.g. cue start time initialized\r\n        // at 10.006677, but next call mediaTime is 10.003332 )\r\n        cue = findAdCue(track, mediaTime + segment.duration / 2);\r\n      }\r\n      if (cue) {\r\n        if ('cueIn' in segment) {\r\n          // Found a CUE-IN so end the cue\r\n          cue.endTime = mediaTime;\r\n          cue.adEndTime = mediaTime;\r\n          mediaTime += segment.duration;\r\n          cue = null;\r\n          continue;\r\n        }\r\n        if (mediaTime < cue.endTime) {\r\n          // Already processed this mediaTime for this cue\r\n          mediaTime += segment.duration;\r\n          continue;\r\n        } // otherwise extend cue until a CUE-IN is found\r\n\r\n        cue.endTime += segment.duration;\r\n      } else {\r\n        if ('cueOut' in segment) {\r\n          cue = new window.VTTCue(mediaTime, mediaTime + segment.duration, segment.cueOut);\r\n          cue.adStartTime = mediaTime; // Assumes tag format to be\r\n          // #EXT-X-CUE-OUT:30\r\n\r\n          cue.adEndTime = mediaTime + parseFloat(segment.cueOut);\r\n          track.addCue(cue);\r\n        }\r\n        if ('cueOutCont' in segment) {\r\n          // Entered into the middle of an ad cue\r\n          // Assumes tag formate to be\r\n          // #EXT-X-CUE-OUT-CONT:10/30\r\n          const [adOffset, adTotal] = segment.cueOutCont.split('/').map(parseFloat);\r\n          cue = new window.VTTCue(mediaTime, mediaTime + segment.duration, '');\r\n          cue.adStartTime = mediaTime - adOffset;\r\n          cue.adEndTime = cue.adStartTime + adTotal;\r\n          track.addCue(cue);\r\n        }\r\n      }\r\n      mediaTime += segment.duration;\r\n    }\r\n  };\r\n  class SyncInfo {\r\n    /**\r\n     * @param {number} start - media sequence start\r\n     * @param {number} end - media sequence end\r\n     * @param {number} segmentIndex - index for associated segment\r\n     * @param {number|null} [partIndex] - index for associated part\r\n     * @param {boolean} [appended] - appended indicator\r\n     *\r\n     */\r\n    constructor({\r\n      start,\r\n      end,\r\n      segmentIndex,\r\n      partIndex = null,\r\n      appended = false\r\n    }) {\r\n      this.start_ = start;\r\n      this.end_ = end;\r\n      this.segmentIndex_ = segmentIndex;\r\n      this.partIndex_ = partIndex;\r\n      this.appended_ = appended;\r\n    }\r\n    isInRange(targetTime) {\r\n      return targetTime >= this.start && targetTime < this.end;\r\n    }\r\n    markAppended() {\r\n      this.appended_ = true;\r\n    }\r\n    resetAppendedStatus() {\r\n      this.appended_ = false;\r\n    }\r\n    get isAppended() {\r\n      return this.appended_;\r\n    }\r\n    get start() {\r\n      return this.start_;\r\n    }\r\n    get end() {\r\n      return this.end_;\r\n    }\r\n    get segmentIndex() {\r\n      return this.segmentIndex_;\r\n    }\r\n    get partIndex() {\r\n      return this.partIndex_;\r\n    }\r\n  }\r\n  class SyncInfoData {\r\n    /**\r\n     *\r\n     * @param {SyncInfo} segmentSyncInfo - sync info for a given segment\r\n     * @param {Array<SyncInfo>} [partsSyncInfo] - sync infos for a list of parts for a given segment\r\n     */\r\n    constructor(segmentSyncInfo, partsSyncInfo = []) {\r\n      this.segmentSyncInfo_ = segmentSyncInfo;\r\n      this.partsSyncInfo_ = partsSyncInfo;\r\n    }\r\n    get segmentSyncInfo() {\r\n      return this.segmentSyncInfo_;\r\n    }\r\n    get partsSyncInfo() {\r\n      return this.partsSyncInfo_;\r\n    }\r\n    get hasPartsSyncInfo() {\r\n      return this.partsSyncInfo_.length > 0;\r\n    }\r\n    resetAppendStatus() {\r\n      this.segmentSyncInfo_.resetAppendedStatus();\r\n      this.partsSyncInfo_.forEach(partSyncInfo => partSyncInfo.resetAppendedStatus());\r\n    }\r\n  }\r\n  class MediaSequenceSync {\r\n    constructor() {\r\n      /**\r\n       * @type {Map<number, SyncInfoData>}\r\n       * @protected\r\n       */\r\n      this.storage_ = new Map();\r\n      this.diagnostics_ = '';\r\n      this.isReliable_ = false;\r\n      this.start_ = -Infinity;\r\n      this.end_ = Infinity;\r\n    }\r\n    get start() {\r\n      return this.start_;\r\n    }\r\n    get end() {\r\n      return this.end_;\r\n    }\r\n    get diagnostics() {\r\n      return this.diagnostics_;\r\n    }\r\n    get isReliable() {\r\n      return this.isReliable_;\r\n    }\r\n    resetAppendedStatus() {\r\n      this.storage_.forEach(syncInfoData => syncInfoData.resetAppendStatus());\r\n    }\r\n    /**\r\n     * update sync storage\r\n     *\r\n     * @param {Object} playlist\r\n     * @param {number} currentTime\r\n     *\r\n     * @return {void}\r\n     */\r\n\r\n    update(playlist, currentTime) {\r\n      const {\r\n        mediaSequence,\r\n        segments\r\n      } = playlist;\r\n      this.isReliable_ = this.isReliablePlaylist_(mediaSequence, segments);\r\n      if (!this.isReliable_) {\r\n        return;\r\n      }\r\n      return this.updateStorage_(segments, mediaSequence, this.calculateBaseTime_(mediaSequence, segments, currentTime));\r\n    }\r\n    /**\r\n     * @param {number} targetTime\r\n     * @return {SyncInfo|null}\r\n     */\r\n\r\n    getSyncInfoForTime(targetTime) {\r\n      for (const {\r\n        segmentSyncInfo,\r\n        partsSyncInfo\r\n      } of this.storage_.values()) {\r\n        // Normal segment flow:\r\n        if (!partsSyncInfo.length) {\r\n          if (segmentSyncInfo.isInRange(targetTime)) {\r\n            return segmentSyncInfo;\r\n          }\r\n        } else {\r\n          // Low latency flow:\r\n          for (const partSyncInfo of partsSyncInfo) {\r\n            if (partSyncInfo.isInRange(targetTime)) {\r\n              return partSyncInfo;\r\n            }\r\n          }\r\n        }\r\n      }\r\n      return null;\r\n    }\r\n    getSyncInfoForMediaSequence(mediaSequence) {\r\n      return this.storage_.get(mediaSequence);\r\n    }\r\n    updateStorage_(segments, startingMediaSequence, startingTime) {\r\n      const newStorage = new Map();\r\n      let newDiagnostics = '\\n';\r\n      let currentStart = startingTime;\r\n      let currentMediaSequence = startingMediaSequence;\r\n      this.start_ = currentStart;\r\n      segments.forEach((segment, segmentIndex) => {\r\n        const prevSyncInfoData = this.storage_.get(currentMediaSequence);\r\n        const segmentStart = currentStart;\r\n        const segmentEnd = segmentStart + segment.duration;\r\n        const segmentIsAppended = Boolean(prevSyncInfoData && prevSyncInfoData.segmentSyncInfo && prevSyncInfoData.segmentSyncInfo.isAppended);\r\n        const segmentSyncInfo = new SyncInfo({\r\n          start: segmentStart,\r\n          end: segmentEnd,\r\n          appended: segmentIsAppended,\r\n          segmentIndex\r\n        });\r\n        segment.syncInfo = segmentSyncInfo;\r\n        let currentPartStart = currentStart;\r\n        const partsSyncInfo = (segment.parts || []).map((part, partIndex) => {\r\n          const partStart = currentPartStart;\r\n          const partEnd = currentPartStart + part.duration;\r\n          const partIsAppended = Boolean(prevSyncInfoData && prevSyncInfoData.partsSyncInfo && prevSyncInfoData.partsSyncInfo[partIndex] && prevSyncInfoData.partsSyncInfo[partIndex].isAppended);\r\n          const partSyncInfo = new SyncInfo({\r\n            start: partStart,\r\n            end: partEnd,\r\n            appended: partIsAppended,\r\n            segmentIndex,\r\n            partIndex\r\n          });\r\n          currentPartStart = partEnd;\r\n          newDiagnostics += `Media Sequence: ${currentMediaSequence}.${partIndex} | Range: ${partStart} --> ${partEnd} | Appended: ${partIsAppended}\\n`;\r\n          part.syncInfo = partSyncInfo;\r\n          return partSyncInfo;\r\n        });\r\n        newStorage.set(currentMediaSequence, new SyncInfoData(segmentSyncInfo, partsSyncInfo));\r\n        newDiagnostics += `${compactSegmentUrlDescription(segment.resolvedUri)} | Media Sequence: ${currentMediaSequence} | Range: ${segmentStart} --> ${segmentEnd} | Appended: ${segmentIsAppended}\\n`;\r\n        currentMediaSequence++;\r\n        currentStart = segmentEnd;\r\n      });\r\n      this.end_ = currentStart;\r\n      this.storage_ = newStorage;\r\n      this.diagnostics_ = newDiagnostics;\r\n    }\r\n    calculateBaseTime_(mediaSequence, segments, fallback) {\r\n      if (!this.storage_.size) {\r\n        // Initial setup flow.\r\n        return 0;\r\n      }\r\n      if (this.storage_.has(mediaSequence)) {\r\n        // Normal flow.\r\n        return this.storage_.get(mediaSequence).segmentSyncInfo.start;\r\n      }\r\n      const minMediaSequenceFromStorage = Math.min(...this.storage_.keys()); // This case captures a race condition that can occur if we switch to a new media playlist that is out of date\r\n      // and still has an older Media Sequence. If this occurs, we extrapolate backwards to get the base time.\r\n\r\n      if (mediaSequence < minMediaSequenceFromStorage) {\r\n        const mediaSequenceDiff = minMediaSequenceFromStorage - mediaSequence;\r\n        let baseTime = this.storage_.get(minMediaSequenceFromStorage).segmentSyncInfo.start;\r\n        for (let i = 0; i < mediaSequenceDiff; i++) {\r\n          const segment = segments[i];\r\n          baseTime -= segment.duration;\r\n        }\r\n        return baseTime;\r\n      } // Fallback flow.\r\n      // There is a gap between last recorded playlist and a new one received.\r\n\r\n      return fallback;\r\n    }\r\n    isReliablePlaylist_(mediaSequence, segments) {\r\n      return mediaSequence !== undefined && mediaSequence !== null && Array.isArray(segments) && segments.length;\r\n    }\r\n  }\r\n  class DependantMediaSequenceSync extends MediaSequenceSync {\r\n    constructor(parent) {\r\n      super();\r\n      this.parent_ = parent;\r\n    }\r\n    calculateBaseTime_(mediaSequence, segments, fallback) {\r\n      if (!this.storage_.size) {\r\n        const info = this.parent_.getSyncInfoForMediaSequence(mediaSequence);\r\n        if (info) {\r\n          return info.segmentSyncInfo.start;\r\n        }\r\n        return 0;\r\n      }\r\n      return super.calculateBaseTime_(mediaSequence, segments, fallback);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @file sync-controller.js\r\n   */\r\n  // synchronize expired playlist segments.\r\n  // the max media sequence diff is 48 hours of live stream\r\n  // content with two second segments. Anything larger than that\r\n  // will likely be invalid.\r\n\r\n  const MAX_MEDIA_SEQUENCE_DIFF_FOR_SYNC = 86400;\r\n  const syncPointStrategies = [\r\n  // Stategy \"VOD\": Handle the VOD-case where the sync-point is *always*\r\n  //                the equivalence display-time 0 === segment-index 0\r\n  {\r\n    name: 'VOD',\r\n    run: (syncController, playlist, duration, currentTimeline, currentTime) => {\r\n      if (duration !== Infinity) {\r\n        const syncPoint = {\r\n          time: 0,\r\n          segmentIndex: 0,\r\n          partIndex: null\r\n        };\r\n        return syncPoint;\r\n      }\r\n      return null;\r\n    }\r\n  }, {\r\n    name: 'MediaSequence',\r\n    /**\r\n     * run media sequence strategy\r\n     *\r\n     * @param {SyncController} syncController\r\n     * @param {Object} playlist\r\n     * @param {number} duration\r\n     * @param {number} currentTimeline\r\n     * @param {number} currentTime\r\n     * @param {string} type\r\n     */\r\n    run: (syncController, playlist, duration, currentTimeline, currentTime, type) => {\r\n      const mediaSequenceSync = syncController.getMediaSequenceSync(type);\r\n      if (!mediaSequenceSync) {\r\n        return null;\r\n      }\r\n      if (!mediaSequenceSync.isReliable) {\r\n        return null;\r\n      }\r\n      const syncInfo = mediaSequenceSync.getSyncInfoForTime(currentTime);\r\n      if (!syncInfo) {\r\n        return null;\r\n      }\r\n      return {\r\n        time: syncInfo.start,\r\n        partIndex: syncInfo.partIndex,\r\n        segmentIndex: syncInfo.segmentIndex\r\n      };\r\n    }\r\n  },\r\n  // Stategy \"ProgramDateTime\": We have a program-date-time tag in this playlist\r\n  {\r\n    name: 'ProgramDateTime',\r\n    run: (syncController, playlist, duration, currentTimeline, currentTime) => {\r\n      if (!Object.keys(syncController.timelineToDatetimeMappings).length) {\r\n        return null;\r\n      }\r\n      let syncPoint = null;\r\n      let lastDistance = null;\r\n      const partsAndSegments = getPartsAndSegments(playlist);\r\n      currentTime = currentTime || 0;\r\n      for (let i = 0; i < partsAndSegments.length; i++) {\r\n        // start from the end and loop backwards for live\r\n        // or start from the front and loop forwards for non-live\r\n        const index = playlist.endList || currentTime === 0 ? i : partsAndSegments.length - (i + 1);\r\n        const partAndSegment = partsAndSegments[index];\r\n        const segment = partAndSegment.segment;\r\n        const datetimeMapping = syncController.timelineToDatetimeMappings[segment.timeline];\r\n        if (!datetimeMapping || !segment.dateTimeObject) {\r\n          continue;\r\n        }\r\n        const segmentTime = segment.dateTimeObject.getTime() / 1000;\r\n        let start = segmentTime + datetimeMapping; // take part duration into account.\r\n\r\n        if (segment.parts && typeof partAndSegment.partIndex === 'number') {\r\n          for (let z = 0; z < partAndSegment.partIndex; z++) {\r\n            start += segment.parts[z].duration;\r\n          }\r\n        }\r\n        const distance = Math.abs(currentTime - start); // Once the distance begins to increase, or if distance is 0, we have passed\r\n        // currentTime and can stop looking for better candidates\r\n\r\n        if (lastDistance !== null && (distance === 0 || lastDistance < distance)) {\r\n          break;\r\n        }\r\n        lastDistance = distance;\r\n        syncPoint = {\r\n          time: start,\r\n          segmentIndex: partAndSegment.segmentIndex,\r\n          partIndex: partAndSegment.partIndex\r\n        };\r\n      }\r\n      return syncPoint;\r\n    }\r\n  },\r\n  // Stategy \"Segment\": We have a known time mapping for a timeline and a\r\n  //                    segment in the current timeline with timing data\r\n  {\r\n    name: 'Segment',\r\n    run: (syncController, playlist, duration, currentTimeline, currentTime) => {\r\n      let syncPoint = null;\r\n      let lastDistance = null;\r\n      currentTime = currentTime || 0;\r\n      const partsAndSegments = getPartsAndSegments(playlist);\r\n      for (let i = 0; i < partsAndSegments.length; i++) {\r\n        // start from the end and loop backwards for live\r\n        // or start from the front and loop forwards for non-live\r\n        const index = playlist.endList || currentTime === 0 ? i : partsAndSegments.length - (i + 1);\r\n        const partAndSegment = partsAndSegments[index];\r\n        const segment = partAndSegment.segment;\r\n        const start = partAndSegment.part && partAndSegment.part.start || segment && segment.start;\r\n        if (segment.timeline === currentTimeline && typeof start !== 'undefined') {\r\n          const distance = Math.abs(currentTime - start); // Once the distance begins to increase, we have passed\r\n          // currentTime and can stop looking for better candidates\r\n\r\n          if (lastDistance !== null && lastDistance < distance) {\r\n            break;\r\n          }\r\n          if (!syncPoint || lastDistance === null || lastDistance >= distance) {\r\n            lastDistance = distance;\r\n            syncPoint = {\r\n              time: start,\r\n              segmentIndex: partAndSegment.segmentIndex,\r\n              partIndex: partAndSegment.partIndex\r\n            };\r\n          }\r\n        }\r\n      }\r\n      return syncPoint;\r\n    }\r\n  },\r\n  // Stategy \"Discontinuity\": We have a discontinuity with a known\r\n  //                          display-time\r\n  {\r\n    name: 'Discontinuity',\r\n    run: (syncController, playlist, duration, currentTimeline, currentTime) => {\r\n      let syncPoint = null;\r\n      currentTime = currentTime || 0;\r\n      if (playlist.discontinuityStarts && playlist.discontinuityStarts.length) {\r\n        let lastDistance = null;\r\n        for (let i = 0; i < playlist.discontinuityStarts.length; i++) {\r\n          const segmentIndex = playlist.discontinuityStarts[i];\r\n          const discontinuity = playlist.discontinuitySequence + i + 1;\r\n          const discontinuitySync = syncController.discontinuities[discontinuity];\r\n          if (discontinuitySync) {\r\n            const distance = Math.abs(currentTime - discontinuitySync.time); // Once the distance begins to increase, we have passed\r\n            // currentTime and can stop looking for better candidates\r\n\r\n            if (lastDistance !== null && lastDistance < distance) {\r\n              break;\r\n            }\r\n            if (!syncPoint || lastDistance === null || lastDistance >= distance) {\r\n              lastDistance = distance;\r\n              syncPoint = {\r\n                time: discontinuitySync.time,\r\n                segmentIndex,\r\n                partIndex: null\r\n              };\r\n            }\r\n          }\r\n        }\r\n      }\r\n      return syncPoint;\r\n    }\r\n  },\r\n  // Stategy \"Playlist\": We have a playlist with a known mapping of\r\n  //                     segment index to display time\r\n  {\r\n    name: 'Playlist',\r\n    run: (syncController, playlist, duration, currentTimeline, currentTime) => {\r\n      if (playlist.syncInfo) {\r\n        const syncPoint = {\r\n          time: playlist.syncInfo.time,\r\n          segmentIndex: playlist.syncInfo.mediaSequence - playlist.mediaSequence,\r\n          partIndex: null\r\n        };\r\n        return syncPoint;\r\n      }\r\n      return null;\r\n    }\r\n  }];\r\n  class SyncController extends videojs.EventTarget {\r\n    constructor(options = {}) {\r\n      super(); // ...for synching across variants\r\n\r\n      this.timelines = [];\r\n      this.discontinuities = [];\r\n      this.timelineToDatetimeMappings = {}; // TODO: this map should be only available for HLS. Since only HLS has MediaSequence.\r\n      //  For some reason this map helps with syncing between quality switch for MPEG-DASH as well.\r\n      //  Moreover if we disable this map for MPEG-DASH - quality switch will be broken.\r\n      //  MPEG-DASH should have its own separate sync strategy\r\n\r\n      const main = new MediaSequenceSync();\r\n      const audio = new DependantMediaSequenceSync(main);\r\n      const vtt = new DependantMediaSequenceSync(main);\r\n      this.mediaSequenceStorage_ = {\r\n        main,\r\n        audio,\r\n        vtt\r\n      };\r\n      this.logger_ = logger('SyncController');\r\n    }\r\n    /**\r\n     *\r\n     * @param {string} loaderType\r\n     * @return {MediaSequenceSync|null}\r\n     */\r\n\r\n    getMediaSequenceSync(loaderType) {\r\n      return this.mediaSequenceStorage_[loaderType] || null;\r\n    }\r\n    /**\r\n     * Find a sync-point for the playlist specified\r\n     *\r\n     * A sync-point is defined as a known mapping from display-time to\r\n     * a segment-index in the current playlist.\r\n     *\r\n     * @param {Playlist} playlist\r\n     *        The playlist that needs a sync-point\r\n     * @param {number} duration\r\n     *        Duration of the MediaSource (Infinite if playing a live source)\r\n     * @param {number} currentTimeline\r\n     *        The last timeline from which a segment was loaded\r\n     * @param {number} currentTime\r\n     *        Current player's time\r\n     * @param {string} type\r\n     *        Segment loader type\r\n     * @return {Object}\r\n     *          A sync-point object\r\n     */\r\n\r\n    getSyncPoint(playlist, duration, currentTimeline, currentTime, type) {\r\n      // Always use VOD sync point for VOD\r\n      if (duration !== Infinity) {\r\n        const vodSyncPointStrategy = syncPointStrategies.find(({\r\n          name\r\n        }) => name === 'VOD');\r\n        return vodSyncPointStrategy.run(this, playlist, duration);\r\n      }\r\n      const syncPoints = this.runStrategies_(playlist, duration, currentTimeline, currentTime, type);\r\n      if (!syncPoints.length) {\r\n        // Signal that we need to attempt to get a sync-point manually\r\n        // by fetching a segment in the playlist and constructing\r\n        // a sync-point from that information\r\n        return null;\r\n      } // If we have exact match just return it instead of finding the nearest distance\r\n\r\n      for (const syncPointInfo of syncPoints) {\r\n        const {\r\n          syncPoint,\r\n          strategy\r\n        } = syncPointInfo;\r\n        const {\r\n          segmentIndex,\r\n          time\r\n        } = syncPoint;\r\n        if (segmentIndex < 0) {\r\n          continue;\r\n        }\r\n        const selectedSegment = playlist.segments[segmentIndex];\r\n        const start = time;\r\n        const end = start + selectedSegment.duration;\r\n        this.logger_(`Strategy: ${strategy}. Current time: ${currentTime}. selected segment: ${segmentIndex}. Time: [${start} -> ${end}]}`);\r\n        if (currentTime >= start && currentTime < end) {\r\n          this.logger_('Found sync point with exact match: ', syncPoint);\r\n          return syncPoint;\r\n        }\r\n      } // Now find the sync-point that is closest to the currentTime because\r\n      // that should result in the most accurate guess about which segment\r\n      // to fetch\r\n\r\n      return this.selectSyncPoint_(syncPoints, {\r\n        key: 'time',\r\n        value: currentTime\r\n      });\r\n    }\r\n    /**\r\n     * Calculate the amount of time that has expired off the playlist during playback\r\n     *\r\n     * @param {Playlist} playlist\r\n     *        Playlist object to calculate expired from\r\n     * @param {number} duration\r\n     *        Duration of the MediaSource (Infinity if playling a live source)\r\n     * @return {number|null}\r\n     *          The amount of time that has expired off the playlist during playback. Null\r\n     *          if no sync-points for the playlist can be found.\r\n     */\r\n\r\n    getExpiredTime(playlist, duration) {\r\n      if (!playlist || !playlist.segments) {\r\n        return null;\r\n      }\r\n      const syncPoints = this.runStrategies_(playlist, duration, playlist.discontinuitySequence, 0); // Without sync-points, there is not enough information to determine the expired time\r\n\r\n      if (!syncPoints.length) {\r\n        return null;\r\n      }\r\n      const syncPoint = this.selectSyncPoint_(syncPoints, {\r\n        key: 'segmentIndex',\r\n        value: 0\r\n      }); // If the sync-point is beyond the start of the playlist, we want to subtract the\r\n      // duration from index 0 to syncPoint.segmentIndex instead of adding.\r\n\r\n      if (syncPoint.segmentIndex > 0) {\r\n        syncPoint.time *= -1;\r\n      }\r\n      return Math.abs(syncPoint.time + sumDurations({\r\n        defaultDuration: playlist.targetDuration,\r\n        durationList: playlist.segments,\r\n        startIndex: syncPoint.segmentIndex,\r\n        endIndex: 0\r\n      }));\r\n    }\r\n    /**\r\n     * Runs each sync-point strategy and returns a list of sync-points returned by the\r\n     * strategies\r\n     *\r\n     * @private\r\n     * @param {Playlist} playlist\r\n     *        The playlist that needs a sync-point\r\n     * @param {number} duration\r\n     *        Duration of the MediaSource (Infinity if playing a live source)\r\n     * @param {number} currentTimeline\r\n     *        The last timeline from which a segment was loaded\r\n     * @param {number} currentTime\r\n     *        Current player's time\r\n     * @param {string} type\r\n     *        Segment loader type\r\n     * @return {Array}\r\n     *          A list of sync-point objects\r\n     */\r\n\r\n    runStrategies_(playlist, duration, currentTimeline, currentTime, type) {\r\n      const syncPoints = []; // Try to find a sync-point in by utilizing various strategies...\r\n\r\n      for (let i = 0; i < syncPointStrategies.length; i++) {\r\n        const strategy = syncPointStrategies[i];\r\n        const syncPoint = strategy.run(this, playlist, duration, currentTimeline, currentTime, type);\r\n        if (syncPoint) {\r\n          syncPoint.strategy = strategy.name;\r\n          syncPoints.push({\r\n            strategy: strategy.name,\r\n            syncPoint\r\n          });\r\n        }\r\n      }\r\n      return syncPoints;\r\n    }\r\n    /**\r\n     * Selects the sync-point nearest the specified target\r\n     *\r\n     * @private\r\n     * @param {Array} syncPoints\r\n     *        List of sync-points to select from\r\n     * @param {Object} target\r\n     *        Object specifying the property and value we are targeting\r\n     * @param {string} target.key\r\n     *        Specifies the property to target. Must be either 'time' or 'segmentIndex'\r\n     * @param {number} target.value\r\n     *        The value to target for the specified key.\r\n     * @return {Object}\r\n     *          The sync-point nearest the target\r\n     */\r\n\r\n    selectSyncPoint_(syncPoints, target) {\r\n      let bestSyncPoint = syncPoints[0].syncPoint;\r\n      let bestDistance = Math.abs(syncPoints[0].syncPoint[target.key] - target.value);\r\n      let bestStrategy = syncPoints[0].strategy;\r\n      for (let i = 1; i < syncPoints.length; i++) {\r\n        const newDistance = Math.abs(syncPoints[i].syncPoint[target.key] - target.value);\r\n        if (newDistance < bestDistance) {\r\n          bestDistance = newDistance;\r\n          bestSyncPoint = syncPoints[i].syncPoint;\r\n          bestStrategy = syncPoints[i].strategy;\r\n        }\r\n      }\r\n      this.logger_(`syncPoint for [${target.key}: ${target.value}] chosen with strategy` + ` [${bestStrategy}]: [time:${bestSyncPoint.time},` + ` segmentIndex:${bestSyncPoint.segmentIndex}` + (typeof bestSyncPoint.partIndex === 'number' ? `,partIndex:${bestSyncPoint.partIndex}` : '') + ']');\r\n      return bestSyncPoint;\r\n    }\r\n    /**\r\n     * Save any meta-data present on the segments when segments leave\r\n     * the live window to the playlist to allow for synchronization at the\r\n     * playlist level later.\r\n     *\r\n     * @param {Playlist} oldPlaylist - The previous active playlist\r\n     * @param {Playlist} newPlaylist - The updated and most current playlist\r\n     */\r\n\r\n    saveExpiredSegmentInfo(oldPlaylist, newPlaylist) {\r\n      const mediaSequenceDiff = newPlaylist.mediaSequence - oldPlaylist.mediaSequence; // Ignore large media sequence gaps\r\n\r\n      if (mediaSequenceDiff > MAX_MEDIA_SEQUENCE_DIFF_FOR_SYNC) {\r\n        videojs.log.warn(`Not saving expired segment info. Media sequence gap ${mediaSequenceDiff} is too large.`);\r\n        return;\r\n      } // When a segment expires from the playlist and it has a start time\r\n      // save that information as a possible sync-point reference in future\r\n\r\n      for (let i = mediaSequenceDiff - 1; i >= 0; i--) {\r\n        const lastRemovedSegment = oldPlaylist.segments[i];\r\n        if (lastRemovedSegment && typeof lastRemovedSegment.start !== 'undefined') {\r\n          newPlaylist.syncInfo = {\r\n            mediaSequence: oldPlaylist.mediaSequence + i,\r\n            time: lastRemovedSegment.start\r\n          };\r\n          this.logger_(`playlist refresh sync: [time:${newPlaylist.syncInfo.time},` + ` mediaSequence: ${newPlaylist.syncInfo.mediaSequence}]`);\r\n          this.trigger('syncinfoupdate');\r\n          break;\r\n        }\r\n      }\r\n    }\r\n    /**\r\n     * Save the mapping from playlist's ProgramDateTime to display. This should only happen\r\n     * before segments start to load.\r\n     *\r\n     * @param {Playlist} playlist - The currently active playlist\r\n     */\r\n\r\n    setDateTimeMappingForStart(playlist) {\r\n      // It's possible for the playlist to be updated before playback starts, meaning time\r\n      // zero is not yet set. If, during these playlist refreshes, a discontinuity is\r\n      // crossed, then the old time zero mapping (for the prior timeline) would be retained\r\n      // unless the mappings are cleared.\r\n      this.timelineToDatetimeMappings = {};\r\n      if (playlist.segments && playlist.segments.length && playlist.segments[0].dateTimeObject) {\r\n        const firstSegment = playlist.segments[0];\r\n        const playlistTimestamp = firstSegment.dateTimeObject.getTime() / 1000;\r\n        this.timelineToDatetimeMappings[firstSegment.timeline] = -playlistTimestamp;\r\n      }\r\n    }\r\n    /**\r\n     * Calculates and saves timeline mappings, playlist sync info, and segment timing values\r\n     * based on the latest timing information.\r\n     *\r\n     * @param {Object} options\r\n     *        Options object\r\n     * @param {SegmentInfo} options.segmentInfo\r\n     *        The current active request information\r\n     * @param {boolean} options.shouldSaveTimelineMapping\r\n     *        If there's a timeline change, determines if the timeline mapping should be\r\n     *        saved for timeline mapping and program date time mappings.\r\n     */\r\n\r\n    saveSegmentTimingInfo({\r\n      segmentInfo,\r\n      shouldSaveTimelineMapping\r\n    }) {\r\n      const didCalculateSegmentTimeMapping = this.calculateSegmentTimeMapping_(segmentInfo, segmentInfo.timingInfo, shouldSaveTimelineMapping);\r\n      const segment = segmentInfo.segment;\r\n      if (didCalculateSegmentTimeMapping) {\r\n        this.saveDiscontinuitySyncInfo_(segmentInfo); // If the playlist does not have sync information yet, record that information\r\n        // now with segment timing information\r\n\r\n        if (!segmentInfo.playlist.syncInfo) {\r\n          segmentInfo.playlist.syncInfo = {\r\n            mediaSequence: segmentInfo.playlist.mediaSequence + segmentInfo.mediaIndex,\r\n            time: segment.start\r\n          };\r\n        }\r\n      }\r\n      const dateTime = segment.dateTimeObject;\r\n      if (segment.discontinuity && shouldSaveTimelineMapping && dateTime) {\r\n        this.timelineToDatetimeMappings[segment.timeline] = -(dateTime.getTime() / 1000);\r\n      }\r\n    }\r\n    timestampOffsetForTimeline(timeline) {\r\n      if (typeof this.timelines[timeline] === 'undefined') {\r\n        return null;\r\n      }\r\n      return this.timelines[timeline].time;\r\n    }\r\n    mappingForTimeline(timeline) {\r\n      if (typeof this.timelines[timeline] === 'undefined') {\r\n        return null;\r\n      }\r\n      return this.timelines[timeline].mapping;\r\n    }\r\n    /**\r\n     * Use the \"media time\" for a segment to generate a mapping to \"display time\" and\r\n     * save that display time to the segment.\r\n     *\r\n     * @private\r\n     * @param {SegmentInfo} segmentInfo\r\n     *        The current active request information\r\n     * @param {Object} timingInfo\r\n     *        The start and end time of the current segment in \"media time\"\r\n     * @param {boolean} shouldSaveTimelineMapping\r\n     *        If there's a timeline change, determines if the timeline mapping should be\r\n     *        saved in timelines.\r\n     * @return {boolean}\r\n     *          Returns false if segment time mapping could not be calculated\r\n     */\r\n\r\n    calculateSegmentTimeMapping_(segmentInfo, timingInfo, shouldSaveTimelineMapping) {\r\n      // TODO: remove side effects\r\n      const segment = segmentInfo.segment;\r\n      const part = segmentInfo.part;\r\n      let mappingObj = this.timelines[segmentInfo.timeline];\r\n      let start;\r\n      let end;\r\n      if (typeof segmentInfo.timestampOffset === 'number') {\r\n        mappingObj = {\r\n          time: segmentInfo.startOfSegment,\r\n          mapping: segmentInfo.startOfSegment - timingInfo.start\r\n        };\r\n        if (shouldSaveTimelineMapping) {\r\n          this.timelines[segmentInfo.timeline] = mappingObj;\r\n          this.trigger('timestampoffset');\r\n          this.logger_(`time mapping for timeline ${segmentInfo.timeline}: ` + `[time: ${mappingObj.time}] [mapping: ${mappingObj.mapping}]`);\r\n        }\r\n        start = segmentInfo.startOfSegment;\r\n        end = timingInfo.end + mappingObj.mapping;\r\n      } else if (mappingObj) {\r\n        start = timingInfo.start + mappingObj.mapping;\r\n        end = timingInfo.end + mappingObj.mapping;\r\n      } else {\r\n        return false;\r\n      }\r\n      if (part) {\r\n        part.start = start;\r\n        part.end = end;\r\n      } // If we don't have a segment start yet or the start value we got\r\n      // is less than our current segment.start value, save a new start value.\r\n      // We have to do this because parts will have segment timing info saved\r\n      // multiple times and we want segment start to be the earliest part start\r\n      // value for that segment.\r\n\r\n      if (!segment.start || start < segment.start) {\r\n        segment.start = start;\r\n      }\r\n      segment.end = end;\r\n      return true;\r\n    }\r\n    /**\r\n     * Each time we have discontinuity in the playlist, attempt to calculate the location\r\n     * in display of the start of the discontinuity and save that. We also save an accuracy\r\n     * value so that we save values with the most accuracy (closest to 0.)\r\n     *\r\n     * @private\r\n     * @param {SegmentInfo} segmentInfo - The current active request information\r\n     */\r\n\r\n    saveDiscontinuitySyncInfo_(segmentInfo) {\r\n      const playlist = segmentInfo.playlist;\r\n      const segment = segmentInfo.segment; // If the current segment is a discontinuity then we know exactly where\r\n      // the start of the range and it's accuracy is 0 (greater accuracy values\r\n      // mean more approximation)\r\n\r\n      if (segment.discontinuity) {\r\n        this.discontinuities[segment.timeline] = {\r\n          time: segment.start,\r\n          accuracy: 0\r\n        };\r\n      } else if (playlist.discontinuityStarts && playlist.discontinuityStarts.length) {\r\n        // Search for future discontinuities that we can provide better timing\r\n        // information for and save that information for sync purposes\r\n        for (let i = 0; i < playlist.discontinuityStarts.length; i++) {\r\n          const segmentIndex = playlist.discontinuityStarts[i];\r\n          const discontinuity = playlist.discontinuitySequence + i + 1;\r\n          const mediaIndexDiff = segmentIndex - segmentInfo.mediaIndex;\r\n          const accuracy = Math.abs(mediaIndexDiff);\r\n          if (!this.discontinuities[discontinuity] || this.discontinuities[discontinuity].accuracy > accuracy) {\r\n            let time;\r\n            if (mediaIndexDiff < 0) {\r\n              time = segment.start - sumDurations({\r\n                defaultDuration: playlist.targetDuration,\r\n                durationList: playlist.segments,\r\n                startIndex: segmentInfo.mediaIndex,\r\n                endIndex: segmentIndex\r\n              });\r\n            } else {\r\n              time = segment.end + sumDurations({\r\n                defaultDuration: playlist.targetDuration,\r\n                durationList: playlist.segments,\r\n                startIndex: segmentInfo.mediaIndex + 1,\r\n                endIndex: segmentIndex\r\n              });\r\n            }\r\n            this.discontinuities[discontinuity] = {\r\n              time,\r\n              accuracy\r\n            };\r\n          }\r\n        }\r\n      }\r\n    }\r\n    dispose() {\r\n      this.trigger('dispose');\r\n      this.off();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * The TimelineChangeController acts as a source for segment loaders to listen for and\r\n   * keep track of latest and pending timeline changes. This is useful to ensure proper\r\n   * sync, as each loader may need to make a consideration for what timeline the other\r\n   * loader is on before making changes which could impact the other loader's media.\r\n   *\r\n   * @class TimelineChangeController\r\n   * @extends videojs.EventTarget\r\n   */\r\n\r\n  class TimelineChangeController extends videojs.EventTarget {\r\n    constructor() {\r\n      super();\r\n      this.pendingTimelineChanges_ = {};\r\n      this.lastTimelineChanges_ = {};\r\n    }\r\n    clearPendingTimelineChange(type) {\r\n      this.pendingTimelineChanges_[type] = null;\r\n      this.trigger('pendingtimelinechange');\r\n    }\r\n    pendingTimelineChange({\r\n      type,\r\n      from,\r\n      to\r\n    }) {\r\n      if (typeof from === 'number' && typeof to === 'number') {\r\n        this.pendingTimelineChanges_[type] = {\r\n          type,\r\n          from,\r\n          to\r\n        };\r\n        this.trigger('pendingtimelinechange');\r\n      }\r\n      return this.pendingTimelineChanges_[type];\r\n    }\r\n    lastTimelineChange({\r\n      type,\r\n      from,\r\n      to\r\n    }) {\r\n      if (typeof from === 'number' && typeof to === 'number') {\r\n        this.lastTimelineChanges_[type] = {\r\n          type,\r\n          from,\r\n          to\r\n        };\r\n        delete this.pendingTimelineChanges_[type];\r\n        const metadata = {\r\n          timelineChangeInfo: {\r\n            from,\r\n            to\r\n          }\r\n        };\r\n        this.trigger({\r\n          type: 'timelinechange',\r\n          metadata\r\n        });\r\n      }\r\n      return this.lastTimelineChanges_[type];\r\n    }\r\n    dispose() {\r\n      this.trigger('dispose');\r\n      this.pendingTimelineChanges_ = {};\r\n      this.lastTimelineChanges_ = {};\r\n      this.off();\r\n    }\r\n  }\r\n\r\n  /* rollup-plugin-worker-factory start for worker!/home/runner/work/http-streaming/http-streaming/src/decrypter-worker.js */\r\n  const workerCode = transform(getWorkerString(function () {\r\n    /**\r\n     * @file stream.js\r\n     */\r\n\r\n    /**\r\n     * A lightweight readable stream implemention that handles event dispatching.\r\n     *\r\n     * @class Stream\r\n     */\r\n\r\n    var Stream = /*#__PURE__*/function () {\r\n      function Stream() {\r\n        this.listeners = {};\r\n      }\r\n      /**\r\n       * Add a listener for a specified event type.\r\n       *\r\n       * @param {string} type the event name\r\n       * @param {Function} listener the callback to be invoked when an event of\r\n       * the specified type occurs\r\n       */\r\n\r\n      var _proto = Stream.prototype;\r\n      _proto.on = function on(type, listener) {\r\n        if (!this.listeners[type]) {\r\n          this.listeners[type] = [];\r\n        }\r\n        this.listeners[type].push(listener);\r\n      }\r\n      /**\r\n       * Remove a listener for a specified event type.\r\n       *\r\n       * @param {string} type the event name\r\n       * @param {Function} listener  a function previously registered for this\r\n       * type of event through `on`\r\n       * @return {boolean} if we could turn it off or not\r\n       */;\r\n      _proto.off = function off(type, listener) {\r\n        if (!this.listeners[type]) {\r\n          return false;\r\n        }\r\n        var index = this.listeners[type].indexOf(listener); // TODO: which is better?\r\n        // In Video.js we slice listener functions\r\n        // on trigger so that it does not mess up the order\r\n        // while we loop through.\r\n        //\r\n        // Here we slice on off so that the loop in trigger\r\n        // can continue using it's old reference to loop without\r\n        // messing up the order.\r\n\r\n        this.listeners[type] = this.listeners[type].slice(0);\r\n        this.listeners[type].splice(index, 1);\r\n        return index > -1;\r\n      }\r\n      /**\r\n       * Trigger an event of the specified type on this stream. Any additional\r\n       * arguments to this function are passed as parameters to event listeners.\r\n       *\r\n       * @param {string} type the event name\r\n       */;\r\n      _proto.trigger = function trigger(type) {\r\n        var callbacks = this.listeners[type];\r\n        if (!callbacks) {\r\n          return;\r\n        } // Slicing the arguments on every invocation of this method\r\n        // can add a significant amount of overhead. Avoid the\r\n        // intermediate object creation for the common case of a\r\n        // single callback argument\r\n\r\n        if (arguments.length === 2) {\r\n          var length = callbacks.length;\r\n          for (var i = 0; i < length; ++i) {\r\n            callbacks[i].call(this, arguments[1]);\r\n          }\r\n        } else {\r\n          var args = Array.prototype.slice.call(arguments, 1);\r\n          var _length = callbacks.length;\r\n          for (var _i = 0; _i < _length; ++_i) {\r\n            callbacks[_i].apply(this, args);\r\n          }\r\n        }\r\n      }\r\n      /**\r\n       * Destroys the stream and cleans up.\r\n       */;\r\n      _proto.dispose = function dispose() {\r\n        this.listeners = {};\r\n      }\r\n      /**\r\n       * Forwards all `data` events on this stream to the destination stream. The\r\n       * destination stream should provide a method `push` to receive the data\r\n       * events as they arrive.\r\n       *\r\n       * @param {Stream} destination the stream that will receive all `data` events\r\n       * @see http://nodejs.org/api/stream.html#stream_readable_pipe_destination_options\r\n       */;\r\n      _proto.pipe = function pipe(destination) {\r\n        this.on('data', function (data) {\r\n          destination.push(data);\r\n        });\r\n      };\r\n      return Stream;\r\n    }();\r\n    /*! @name pkcs7 @version 1.0.4 @license Apache-2.0 */\r\n\r\n    /**\r\n     * Returns the subarray of a Uint8Array without PKCS#7 padding.\r\n     *\r\n     * @param padded {Uint8Array} unencrypted bytes that have been padded\r\n     * @return {Uint8Array} the unpadded bytes\r\n     * @see http://tools.ietf.org/html/rfc5652\r\n     */\r\n\r\n    function unpad(padded) {\r\n      return padded.subarray(0, padded.byteLength - padded[padded.byteLength - 1]);\r\n    }\r\n    /*! @name aes-decrypter @version 4.0.2 @license Apache-2.0 */\r\n\r\n    /**\r\n     * @file aes.js\r\n     *\r\n     * This file contains an adaptation of the AES decryption algorithm\r\n     * from the Standford Javascript Cryptography Library. That work is\r\n     * covered by the following copyright and permissions notice:\r\n     *\r\n     * Copyright 2009-2010 Emily Stark, Mike Hamburg, Dan Boneh.\r\n     * All rights reserved.\r\n     *\r\n     * Redistribution and use in source and binary forms, with or without\r\n     * modification, are permitted provided that the following conditions are\r\n     * met:\r\n     *\r\n     * 1. Redistributions of source code must retain the above copyright\r\n     *    notice, this list of conditions and the following disclaimer.\r\n     *\r\n     * 2. Redistributions in binary form must reproduce the above\r\n     *    copyright notice, this list of conditions and the following\r\n     *    disclaimer in the documentation and/or other materials provided\r\n     *    with the distribution.\r\n     *\r\n     * THIS SOFTWARE IS PROVIDED BY THE AUTHORS ``AS IS'' AND ANY EXPRESS OR\r\n     * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n     * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\r\n     * DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> OR CONTRIBUTORS BE\r\n     * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\r\n     * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\r\n     * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR\r\n     * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n     * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE\r\n     * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN\r\n     * IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n     *\r\n     * The views and conclusions contained in the software and documentation\r\n     * are those of the authors and should not be interpreted as representing\r\n     * official policies, either expressed or implied, of the authors.\r\n     */\r\n\r\n    /**\r\n     * Expand the S-box tables.\r\n     *\r\n     * @private\r\n     */\r\n\r\n    const precompute = function () {\r\n      const tables = [[[], [], [], [], []], [[], [], [], [], []]];\r\n      const encTable = tables[0];\r\n      const decTable = tables[1];\r\n      const sbox = encTable[4];\r\n      const sboxInv = decTable[4];\r\n      let i;\r\n      let x;\r\n      let xInv;\r\n      const d = [];\r\n      const th = [];\r\n      let x2;\r\n      let x4;\r\n      let x8;\r\n      let s;\r\n      let tEnc;\r\n      let tDec; // Compute double and third tables\r\n\r\n      for (i = 0; i < 256; i++) {\r\n        th[(d[i] = i << 1 ^ (i >> 7) * 283) ^ i] = i;\r\n      }\r\n      for (x = xInv = 0; !sbox[x]; x ^= x2 || 1, xInv = th[xInv] || 1) {\r\n        // Compute sbox\r\n        s = xInv ^ xInv << 1 ^ xInv << 2 ^ xInv << 3 ^ xInv << 4;\r\n        s = s >> 8 ^ s & 255 ^ 99;\r\n        sbox[x] = s;\r\n        sboxInv[s] = x; // Compute MixColumns\r\n\r\n        x8 = d[x4 = d[x2 = d[x]]];\r\n        tDec = x8 * 0x1010101 ^ x4 * 0x10001 ^ x2 * 0x101 ^ x * 0x1010100;\r\n        tEnc = d[s] * 0x101 ^ s * 0x1010100;\r\n        for (i = 0; i < 4; i++) {\r\n          encTable[i][x] = tEnc = tEnc << 24 ^ tEnc >>> 8;\r\n          decTable[i][s] = tDec = tDec << 24 ^ tDec >>> 8;\r\n        }\r\n      } // Compactify. Considerable speedup on Firefox.\r\n\r\n      for (i = 0; i < 5; i++) {\r\n        encTable[i] = encTable[i].slice(0);\r\n        decTable[i] = decTable[i].slice(0);\r\n      }\r\n      return tables;\r\n    };\r\n    let aesTables = null;\r\n    /**\r\n     * Schedule out an AES key for both encryption and decryption. This\r\n     * is a low-level class. Use a cipher mode to do bulk encryption.\r\n     *\r\n     * @class AES\r\n     * @param key {Array} The key as an array of 4, 6 or 8 words.\r\n     */\r\n\r\n    class AES {\r\n      constructor(key) {\r\n        /**\r\n        * The expanded S-box and inverse S-box tables. These will be computed\r\n        * on the client so that we don't have to send them down the wire.\r\n        *\r\n        * There are two tables, _tables[0] is for encryption and\r\n        * _tables[1] is for decryption.\r\n        *\r\n        * The first 4 sub-tables are the expanded S-box with MixColumns. The\r\n        * last (_tables[01][4]) is the S-box itself.\r\n        *\r\n        * @private\r\n        */\r\n        // if we have yet to precompute the S-box tables\r\n        // do so now\r\n        if (!aesTables) {\r\n          aesTables = precompute();\r\n        } // then make a copy of that object for use\r\n\r\n        this._tables = [[aesTables[0][0].slice(), aesTables[0][1].slice(), aesTables[0][2].slice(), aesTables[0][3].slice(), aesTables[0][4].slice()], [aesTables[1][0].slice(), aesTables[1][1].slice(), aesTables[1][2].slice(), aesTables[1][3].slice(), aesTables[1][4].slice()]];\r\n        let i;\r\n        let j;\r\n        let tmp;\r\n        const sbox = this._tables[0][4];\r\n        const decTable = this._tables[1];\r\n        const keyLen = key.length;\r\n        let rcon = 1;\r\n        if (keyLen !== 4 && keyLen !== 6 && keyLen !== 8) {\r\n          throw new Error('Invalid aes key size');\r\n        }\r\n        const encKey = key.slice(0);\r\n        const decKey = [];\r\n        this._key = [encKey, decKey]; // schedule encryption keys\r\n\r\n        for (i = keyLen; i < 4 * keyLen + 28; i++) {\r\n          tmp = encKey[i - 1]; // apply sbox\r\n\r\n          if (i % keyLen === 0 || keyLen === 8 && i % keyLen === 4) {\r\n            tmp = sbox[tmp >>> 24] << 24 ^ sbox[tmp >> 16 & 255] << 16 ^ sbox[tmp >> 8 & 255] << 8 ^ sbox[tmp & 255]; // shift rows and add rcon\r\n\r\n            if (i % keyLen === 0) {\r\n              tmp = tmp << 8 ^ tmp >>> 24 ^ rcon << 24;\r\n              rcon = rcon << 1 ^ (rcon >> 7) * 283;\r\n            }\r\n          }\r\n          encKey[i] = encKey[i - keyLen] ^ tmp;\r\n        } // schedule decryption keys\r\n\r\n        for (j = 0; i; j++, i--) {\r\n          tmp = encKey[j & 3 ? i : i - 4];\r\n          if (i <= 4 || j < 4) {\r\n            decKey[j] = tmp;\r\n          } else {\r\n            decKey[j] = decTable[0][sbox[tmp >>> 24]] ^ decTable[1][sbox[tmp >> 16 & 255]] ^ decTable[2][sbox[tmp >> 8 & 255]] ^ decTable[3][sbox[tmp & 255]];\r\n          }\r\n        }\r\n      }\r\n      /**\r\n       * Decrypt 16 bytes, specified as four 32-bit words.\r\n       *\r\n       * @param {number} encrypted0 the first word to decrypt\r\n       * @param {number} encrypted1 the second word to decrypt\r\n       * @param {number} encrypted2 the third word to decrypt\r\n       * @param {number} encrypted3 the fourth word to decrypt\r\n       * @param {Int32Array} out the array to write the decrypted words\r\n       * into\r\n       * @param {number} offset the offset into the output array to start\r\n       * writing results\r\n       * @return {Array} The plaintext.\r\n       */\r\n\r\n      decrypt(encrypted0, encrypted1, encrypted2, encrypted3, out, offset) {\r\n        const key = this._key[1]; // state variables a,b,c,d are loaded with pre-whitened data\r\n\r\n        let a = encrypted0 ^ key[0];\r\n        let b = encrypted3 ^ key[1];\r\n        let c = encrypted2 ^ key[2];\r\n        let d = encrypted1 ^ key[3];\r\n        let a2;\r\n        let b2;\r\n        let c2; // key.length === 2 ?\r\n\r\n        const nInnerRounds = key.length / 4 - 2;\r\n        let i;\r\n        let kIndex = 4;\r\n        const table = this._tables[1]; // load up the tables\r\n\r\n        const table0 = table[0];\r\n        const table1 = table[1];\r\n        const table2 = table[2];\r\n        const table3 = table[3];\r\n        const sbox = table[4]; // Inner rounds. Cribbed from OpenSSL.\r\n\r\n        for (i = 0; i < nInnerRounds; i++) {\r\n          a2 = table0[a >>> 24] ^ table1[b >> 16 & 255] ^ table2[c >> 8 & 255] ^ table3[d & 255] ^ key[kIndex];\r\n          b2 = table0[b >>> 24] ^ table1[c >> 16 & 255] ^ table2[d >> 8 & 255] ^ table3[a & 255] ^ key[kIndex + 1];\r\n          c2 = table0[c >>> 24] ^ table1[d >> 16 & 255] ^ table2[a >> 8 & 255] ^ table3[b & 255] ^ key[kIndex + 2];\r\n          d = table0[d >>> 24] ^ table1[a >> 16 & 255] ^ table2[b >> 8 & 255] ^ table3[c & 255] ^ key[kIndex + 3];\r\n          kIndex += 4;\r\n          a = a2;\r\n          b = b2;\r\n          c = c2;\r\n        } // Last round.\r\n\r\n        for (i = 0; i < 4; i++) {\r\n          out[(3 & -i) + offset] = sbox[a >>> 24] << 24 ^ sbox[b >> 16 & 255] << 16 ^ sbox[c >> 8 & 255] << 8 ^ sbox[d & 255] ^ key[kIndex++];\r\n          a2 = a;\r\n          a = b;\r\n          b = c;\r\n          c = d;\r\n          d = a2;\r\n        }\r\n      }\r\n    }\r\n    /**\r\n     * @file async-stream.js\r\n     */\r\n\r\n    /**\r\n     * A wrapper around the Stream class to use setTimeout\r\n     * and run stream \"jobs\" Asynchronously\r\n     *\r\n     * @class AsyncStream\r\n     * @extends Stream\r\n     */\r\n\r\n    class AsyncStream extends Stream {\r\n      constructor() {\r\n        super(Stream);\r\n        this.jobs = [];\r\n        this.delay = 1;\r\n        this.timeout_ = null;\r\n      }\r\n      /**\r\n       * process an async job\r\n       *\r\n       * @private\r\n       */\r\n\r\n      processJob_() {\r\n        this.jobs.shift()();\r\n        if (this.jobs.length) {\r\n          this.timeout_ = setTimeout(this.processJob_.bind(this), this.delay);\r\n        } else {\r\n          this.timeout_ = null;\r\n        }\r\n      }\r\n      /**\r\n       * push a job into the stream\r\n       *\r\n       * @param {Function} job the job to push into the stream\r\n       */\r\n\r\n      push(job) {\r\n        this.jobs.push(job);\r\n        if (!this.timeout_) {\r\n          this.timeout_ = setTimeout(this.processJob_.bind(this), this.delay);\r\n        }\r\n      }\r\n    }\r\n    /**\r\n     * @file decrypter.js\r\n     *\r\n     * An asynchronous implementation of AES-128 CBC decryption with\r\n     * PKCS#7 padding.\r\n     */\r\n\r\n    /**\r\n     * Convert network-order (big-endian) bytes into their little-endian\r\n     * representation.\r\n     */\r\n\r\n    const ntoh = function (word) {\r\n      return word << 24 | (word & 0xff00) << 8 | (word & 0xff0000) >> 8 | word >>> 24;\r\n    };\r\n    /**\r\n     * Decrypt bytes using AES-128 with CBC and PKCS#7 padding.\r\n     *\r\n     * @param {Uint8Array} encrypted the encrypted bytes\r\n     * @param {Uint32Array} key the bytes of the decryption key\r\n     * @param {Uint32Array} initVector the initialization vector (IV) to\r\n     * use for the first round of CBC.\r\n     * @return {Uint8Array} the decrypted bytes\r\n     *\r\n     * @see http://en.wikipedia.org/wiki/Advanced_Encryption_Standard\r\n     * @see http://en.wikipedia.org/wiki/Block_cipher_mode_of_operation#Cipher_Block_Chaining_.28CBC.29\r\n     * @see https://tools.ietf.org/html/rfc2315\r\n     */\r\n\r\n    const decrypt = function (encrypted, key, initVector) {\r\n      // word-level access to the encrypted bytes\r\n      const encrypted32 = new Int32Array(encrypted.buffer, encrypted.byteOffset, encrypted.byteLength >> 2);\r\n      const decipher = new AES(Array.prototype.slice.call(key)); // byte and word-level access for the decrypted output\r\n\r\n      const decrypted = new Uint8Array(encrypted.byteLength);\r\n      const decrypted32 = new Int32Array(decrypted.buffer); // temporary variables for working with the IV, encrypted, and\r\n      // decrypted data\r\n\r\n      let init0;\r\n      let init1;\r\n      let init2;\r\n      let init3;\r\n      let encrypted0;\r\n      let encrypted1;\r\n      let encrypted2;\r\n      let encrypted3; // iteration variable\r\n\r\n      let wordIx; // pull out the words of the IV to ensure we don't modify the\r\n      // passed-in reference and easier access\r\n\r\n      init0 = initVector[0];\r\n      init1 = initVector[1];\r\n      init2 = initVector[2];\r\n      init3 = initVector[3]; // decrypt four word sequences, applying cipher-block chaining (CBC)\r\n      // to each decrypted block\r\n\r\n      for (wordIx = 0; wordIx < encrypted32.length; wordIx += 4) {\r\n        // convert big-endian (network order) words into little-endian\r\n        // (javascript order)\r\n        encrypted0 = ntoh(encrypted32[wordIx]);\r\n        encrypted1 = ntoh(encrypted32[wordIx + 1]);\r\n        encrypted2 = ntoh(encrypted32[wordIx + 2]);\r\n        encrypted3 = ntoh(encrypted32[wordIx + 3]); // decrypt the block\r\n\r\n        decipher.decrypt(encrypted0, encrypted1, encrypted2, encrypted3, decrypted32, wordIx); // XOR with the IV, and restore network byte-order to obtain the\r\n        // plaintext\r\n\r\n        decrypted32[wordIx] = ntoh(decrypted32[wordIx] ^ init0);\r\n        decrypted32[wordIx + 1] = ntoh(decrypted32[wordIx + 1] ^ init1);\r\n        decrypted32[wordIx + 2] = ntoh(decrypted32[wordIx + 2] ^ init2);\r\n        decrypted32[wordIx + 3] = ntoh(decrypted32[wordIx + 3] ^ init3); // setup the IV for the next round\r\n\r\n        init0 = encrypted0;\r\n        init1 = encrypted1;\r\n        init2 = encrypted2;\r\n        init3 = encrypted3;\r\n      }\r\n      return decrypted;\r\n    };\r\n    /**\r\n     * The `Decrypter` class that manages decryption of AES\r\n     * data through `AsyncStream` objects and the `decrypt`\r\n     * function\r\n     *\r\n     * @param {Uint8Array} encrypted the encrypted bytes\r\n     * @param {Uint32Array} key the bytes of the decryption key\r\n     * @param {Uint32Array} initVector the initialization vector (IV) to\r\n     * @param {Function} done the function to run when done\r\n     * @class Decrypter\r\n     */\r\n\r\n    class Decrypter {\r\n      constructor(encrypted, key, initVector, done) {\r\n        const step = Decrypter.STEP;\r\n        const encrypted32 = new Int32Array(encrypted.buffer);\r\n        const decrypted = new Uint8Array(encrypted.byteLength);\r\n        let i = 0;\r\n        this.asyncStream_ = new AsyncStream(); // split up the encryption job and do the individual chunks asynchronously\r\n\r\n        this.asyncStream_.push(this.decryptChunk_(encrypted32.subarray(i, i + step), key, initVector, decrypted));\r\n        for (i = step; i < encrypted32.length; i += step) {\r\n          initVector = new Uint32Array([ntoh(encrypted32[i - 4]), ntoh(encrypted32[i - 3]), ntoh(encrypted32[i - 2]), ntoh(encrypted32[i - 1])]);\r\n          this.asyncStream_.push(this.decryptChunk_(encrypted32.subarray(i, i + step), key, initVector, decrypted));\r\n        } // invoke the done() callback when everything is finished\r\n\r\n        this.asyncStream_.push(function () {\r\n          // remove pkcs#7 padding from the decrypted bytes\r\n          done(null, unpad(decrypted));\r\n        });\r\n      }\r\n      /**\r\n       * a getter for step the maximum number of bytes to process at one time\r\n       *\r\n       * @return {number} the value of step 32000\r\n       */\r\n\r\n      static get STEP() {\r\n        // 4 * 8000;\r\n        return 32000;\r\n      }\r\n      /**\r\n       * @private\r\n       */\r\n\r\n      decryptChunk_(encrypted, key, initVector, decrypted) {\r\n        return function () {\r\n          const bytes = decrypt(encrypted, key, initVector);\r\n          decrypted.set(bytes, encrypted.byteOffset);\r\n        };\r\n      }\r\n    }\r\n    var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};\r\n    var win;\r\n    if (typeof window !== \"undefined\") {\r\n      win = window;\r\n    } else if (typeof commonjsGlobal !== \"undefined\") {\r\n      win = commonjsGlobal;\r\n    } else if (typeof self !== \"undefined\") {\r\n      win = self;\r\n    } else {\r\n      win = {};\r\n    }\r\n    var window_1 = win;\r\n    var isArrayBufferView = function isArrayBufferView(obj) {\r\n      if (ArrayBuffer.isView === 'function') {\r\n        return ArrayBuffer.isView(obj);\r\n      }\r\n      return obj && obj.buffer instanceof ArrayBuffer;\r\n    };\r\n    var BigInt = window_1.BigInt || Number;\r\n    [BigInt('0x1'), BigInt('0x100'), BigInt('0x10000'), BigInt('0x1000000'), BigInt('0x100000000'), BigInt('0x10000000000'), BigInt('0x1000000000000'), BigInt('0x100000000000000'), BigInt('0x10000000000000000')];\r\n    (function () {\r\n      var a = new Uint16Array([0xFFCC]);\r\n      var b = new Uint8Array(a.buffer, a.byteOffset, a.byteLength);\r\n      if (b[0] === 0xFF) {\r\n        return 'big';\r\n      }\r\n      if (b[0] === 0xCC) {\r\n        return 'little';\r\n      }\r\n      return 'unknown';\r\n    })();\r\n    /**\r\n     * Creates an object for sending to a web worker modifying properties that are TypedArrays\r\n     * into a new object with seperated properties for the buffer, byteOffset, and byteLength.\r\n     *\r\n     * @param {Object} message\r\n     *        Object of properties and values to send to the web worker\r\n     * @return {Object}\r\n     *         Modified message with TypedArray values expanded\r\n     * @function createTransferableMessage\r\n     */\r\n\r\n    const createTransferableMessage = function (message) {\r\n      const transferable = {};\r\n      Object.keys(message).forEach(key => {\r\n        const value = message[key];\r\n        if (isArrayBufferView(value)) {\r\n          transferable[key] = {\r\n            bytes: value.buffer,\r\n            byteOffset: value.byteOffset,\r\n            byteLength: value.byteLength\r\n          };\r\n        } else {\r\n          transferable[key] = value;\r\n        }\r\n      });\r\n      return transferable;\r\n    };\r\n    /* global self */\r\n\r\n    /**\r\n     * Our web worker interface so that things can talk to aes-decrypter\r\n     * that will be running in a web worker. the scope is passed to this by\r\n     * webworkify.\r\n     */\r\n\r\n    self.onmessage = function (event) {\r\n      const data = event.data;\r\n      const encrypted = new Uint8Array(data.encrypted.bytes, data.encrypted.byteOffset, data.encrypted.byteLength);\r\n      const key = new Uint32Array(data.key.bytes, data.key.byteOffset, data.key.byteLength / 4);\r\n      const iv = new Uint32Array(data.iv.bytes, data.iv.byteOffset, data.iv.byteLength / 4);\r\n      /* eslint-disable no-new, handle-callback-err */\r\n\r\n      new Decrypter(encrypted, key, iv, function (err, bytes) {\r\n        self.postMessage(createTransferableMessage({\r\n          source: data.source,\r\n          decrypted: bytes\r\n        }), [bytes.buffer]);\r\n      });\r\n      /* eslint-enable */\r\n    };\r\n  }));\r\n  var Decrypter = factory(workerCode);\r\n  /* rollup-plugin-worker-factory end for worker!/home/runner/work/http-streaming/http-streaming/src/decrypter-worker.js */\r\n\r\n  /**\r\n   * Convert the properties of an HLS track into an audioTrackKind.\r\n   *\r\n   * @private\r\n   */\r\n\r\n  const audioTrackKind_ = properties => {\r\n    let kind = properties.default ? 'main' : 'alternative';\r\n    if (properties.characteristics && properties.characteristics.indexOf('public.accessibility.describes-video') >= 0) {\r\n      kind = 'main-desc';\r\n    }\r\n    return kind;\r\n  };\r\n  /**\r\n   * Pause provided segment loader and playlist loader if active\r\n   *\r\n   * @param {SegmentLoader} segmentLoader\r\n   *        SegmentLoader to pause\r\n   * @param {Object} mediaType\r\n   *        Active media type\r\n   * @function stopLoaders\r\n   */\r\n\r\n  const stopLoaders = (segmentLoader, mediaType) => {\r\n    segmentLoader.abort();\r\n    segmentLoader.pause();\r\n    if (mediaType && mediaType.activePlaylistLoader) {\r\n      mediaType.activePlaylistLoader.pause();\r\n      mediaType.activePlaylistLoader = null;\r\n    }\r\n  };\r\n  /**\r\n   * Start loading provided segment loader and playlist loader\r\n   *\r\n   * @param {PlaylistLoader} playlistLoader\r\n   *        PlaylistLoader to start loading\r\n   * @param {Object} mediaType\r\n   *        Active media type\r\n   * @function startLoaders\r\n   */\r\n\r\n  const startLoaders = (playlistLoader, mediaType) => {\r\n    // Segment loader will be started after `loadedmetadata` or `loadedplaylist` from the\r\n    // playlist loader\r\n    mediaType.activePlaylistLoader = playlistLoader;\r\n    playlistLoader.load();\r\n  };\r\n  /**\r\n   * Returns a function to be called when the media group changes. It performs a\r\n   * non-destructive (preserve the buffer) resync of the SegmentLoader. This is because a\r\n   * change of group is merely a rendition switch of the same content at another encoding,\r\n   * rather than a change of content, such as switching audio from English to Spanish.\r\n   *\r\n   * @param {string} type\r\n   *        MediaGroup type\r\n   * @param {Object} settings\r\n   *        Object containing required information for media groups\r\n   * @return {Function}\r\n   *         Handler for a non-destructive resync of SegmentLoader when the active media\r\n   *         group changes.\r\n   * @function onGroupChanged\r\n   */\r\n\r\n  const onGroupChanged = (type, settings) => () => {\r\n    const {\r\n      segmentLoaders: {\r\n        [type]: segmentLoader,\r\n        main: mainSegmentLoader\r\n      },\r\n      mediaTypes: {\r\n        [type]: mediaType\r\n      }\r\n    } = settings;\r\n    const activeTrack = mediaType.activeTrack();\r\n    const activeGroup = mediaType.getActiveGroup();\r\n    const previousActiveLoader = mediaType.activePlaylistLoader;\r\n    const lastGroup = mediaType.lastGroup_; // the group did not change do nothing\r\n\r\n    if (activeGroup && lastGroup && activeGroup.id === lastGroup.id) {\r\n      return;\r\n    }\r\n    mediaType.lastGroup_ = activeGroup;\r\n    mediaType.lastTrack_ = activeTrack;\r\n    stopLoaders(segmentLoader, mediaType);\r\n    if (!activeGroup || activeGroup.isMainPlaylist) {\r\n      // there is no group active or active group is a main playlist and won't change\r\n      return;\r\n    }\r\n    if (!activeGroup.playlistLoader) {\r\n      if (previousActiveLoader) {\r\n        // The previous group had a playlist loader but the new active group does not\r\n        // this means we are switching from demuxed to muxed audio. In this case we want to\r\n        // do a destructive reset of the main segment loader and not restart the audio\r\n        // loaders.\r\n        mainSegmentLoader.resetEverything();\r\n      }\r\n      return;\r\n    } // Non-destructive resync\r\n\r\n    segmentLoader.resyncLoader();\r\n    startLoaders(activeGroup.playlistLoader, mediaType);\r\n  };\r\n  const onGroupChanging = (type, settings) => () => {\r\n    const {\r\n      segmentLoaders: {\r\n        [type]: segmentLoader\r\n      },\r\n      mediaTypes: {\r\n        [type]: mediaType\r\n      }\r\n    } = settings;\r\n    mediaType.lastGroup_ = null;\r\n    segmentLoader.abort();\r\n    segmentLoader.pause();\r\n  };\r\n  /**\r\n   * Returns a function to be called when the media track changes. It performs a\r\n   * destructive reset of the SegmentLoader to ensure we start loading as close to\r\n   * currentTime as possible.\r\n   *\r\n   * @param {string} type\r\n   *        MediaGroup type\r\n   * @param {Object} settings\r\n   *        Object containing required information for media groups\r\n   * @return {Function}\r\n   *         Handler for a destructive reset of SegmentLoader when the active media\r\n   *         track changes.\r\n   * @function onTrackChanged\r\n   */\r\n\r\n  const onTrackChanged = (type, settings) => () => {\r\n    const {\r\n      mainPlaylistLoader,\r\n      segmentLoaders: {\r\n        [type]: segmentLoader,\r\n        main: mainSegmentLoader\r\n      },\r\n      mediaTypes: {\r\n        [type]: mediaType\r\n      }\r\n    } = settings;\r\n    const activeTrack = mediaType.activeTrack();\r\n    const activeGroup = mediaType.getActiveGroup();\r\n    const previousActiveLoader = mediaType.activePlaylistLoader;\r\n    const lastTrack = mediaType.lastTrack_; // track did not change, do nothing\r\n\r\n    if (lastTrack && activeTrack && lastTrack.id === activeTrack.id) {\r\n      return;\r\n    }\r\n    mediaType.lastGroup_ = activeGroup;\r\n    mediaType.lastTrack_ = activeTrack;\r\n    stopLoaders(segmentLoader, mediaType);\r\n    if (!activeGroup) {\r\n      // there is no group active so we do not want to restart loaders\r\n      return;\r\n    }\r\n    if (activeGroup.isMainPlaylist) {\r\n      // track did not change, do nothing\r\n      if (!activeTrack || !lastTrack || activeTrack.id === lastTrack.id) {\r\n        return;\r\n      }\r\n      const pc = settings.vhs.playlistController_;\r\n      const newPlaylist = pc.selectPlaylist(); // media will not change do nothing\r\n\r\n      if (pc.media() === newPlaylist) {\r\n        return;\r\n      }\r\n      mediaType.logger_(`track change. Switching main audio from ${lastTrack.id} to ${activeTrack.id}`);\r\n      mainPlaylistLoader.pause();\r\n      mainSegmentLoader.resetEverything();\r\n      pc.fastQualityChange_(newPlaylist);\r\n      return;\r\n    }\r\n    if (type === 'AUDIO') {\r\n      if (!activeGroup.playlistLoader) {\r\n        // when switching from demuxed audio/video to muxed audio/video (noted by no\r\n        // playlist loader for the audio group), we want to do a destructive reset of the\r\n        // main segment loader and not restart the audio loaders\r\n        mainSegmentLoader.setAudio(true); // don't have to worry about disabling the audio of the audio segment loader since\r\n        // it should be stopped\r\n\r\n        mainSegmentLoader.resetEverything();\r\n        return;\r\n      } // although the segment loader is an audio segment loader, call the setAudio\r\n      // function to ensure it is prepared to re-append the init segment (or handle other\r\n      // config changes)\r\n\r\n      segmentLoader.setAudio(true);\r\n      mainSegmentLoader.setAudio(false);\r\n    }\r\n    if (previousActiveLoader === activeGroup.playlistLoader) {\r\n      // Nothing has actually changed. This can happen because track change events can fire\r\n      // multiple times for a \"single\" change. One for enabling the new active track, and\r\n      // one for disabling the track that was active\r\n      startLoaders(activeGroup.playlistLoader, mediaType);\r\n      return;\r\n    }\r\n    if (segmentLoader.track) {\r\n      // For WebVTT, set the new text track in the segmentloader\r\n      segmentLoader.track(activeTrack);\r\n    } // destructive reset\r\n\r\n    segmentLoader.resetEverything();\r\n    startLoaders(activeGroup.playlistLoader, mediaType);\r\n  };\r\n  const onError = {\r\n    /**\r\n     * Returns a function to be called when a SegmentLoader or PlaylistLoader encounters\r\n     * an error.\r\n     *\r\n     * @param {string} type\r\n     *        MediaGroup type\r\n     * @param {Object} settings\r\n     *        Object containing required information for media groups\r\n     * @return {Function}\r\n     *         Error handler. Logs warning (or error if the playlist is excluded) to\r\n     *         console and switches back to default audio track.\r\n     * @function onError.AUDIO\r\n     */\r\n    AUDIO: (type, settings) => () => {\r\n      const {\r\n        mediaTypes: {\r\n          [type]: mediaType\r\n        },\r\n        excludePlaylist\r\n      } = settings; // switch back to default audio track\r\n\r\n      const activeTrack = mediaType.activeTrack();\r\n      const activeGroup = mediaType.activeGroup();\r\n      const id = (activeGroup.filter(group => group.default)[0] || activeGroup[0]).id;\r\n      const defaultTrack = mediaType.tracks[id];\r\n      if (activeTrack === defaultTrack) {\r\n        // Default track encountered an error. All we can do now is exclude the current\r\n        // rendition and hope another will switch audio groups\r\n        excludePlaylist({\r\n          error: {\r\n            message: 'Problem encountered loading the default audio track.'\r\n          }\r\n        });\r\n        return;\r\n      }\r\n      videojs.log.warn('Problem encountered loading the alternate audio track.' + 'Switching back to default.');\r\n      for (const trackId in mediaType.tracks) {\r\n        mediaType.tracks[trackId].enabled = mediaType.tracks[trackId] === defaultTrack;\r\n      }\r\n      mediaType.onTrackChanged();\r\n    },\r\n    /**\r\n     * Returns a function to be called when a SegmentLoader or PlaylistLoader encounters\r\n     * an error.\r\n     *\r\n     * @param {string} type\r\n     *        MediaGroup type\r\n     * @param {Object} settings\r\n     *        Object containing required information for media groups\r\n     * @return {Function}\r\n     *         Error handler. Logs warning to console and disables the active subtitle track\r\n     * @function onError.SUBTITLES\r\n     */\r\n    SUBTITLES: (type, settings) => () => {\r\n      const {\r\n        mediaTypes: {\r\n          [type]: mediaType\r\n        }\r\n      } = settings;\r\n      videojs.log.warn('Problem encountered loading the subtitle track.' + 'Disabling subtitle track.');\r\n      const track = mediaType.activeTrack();\r\n      if (track) {\r\n        track.mode = 'disabled';\r\n      }\r\n      mediaType.onTrackChanged();\r\n    }\r\n  };\r\n  const setupListeners = {\r\n    /**\r\n     * Setup event listeners for audio playlist loader\r\n     *\r\n     * @param {string} type\r\n     *        MediaGroup type\r\n     * @param {PlaylistLoader|null} playlistLoader\r\n     *        PlaylistLoader to register listeners on\r\n     * @param {Object} settings\r\n     *        Object containing required information for media groups\r\n     * @function setupListeners.AUDIO\r\n     */\r\n    AUDIO: (type, playlistLoader, settings) => {\r\n      if (!playlistLoader) {\r\n        // no playlist loader means audio will be muxed with the video\r\n        return;\r\n      }\r\n      const {\r\n        tech,\r\n        requestOptions,\r\n        segmentLoaders: {\r\n          [type]: segmentLoader\r\n        }\r\n      } = settings;\r\n      playlistLoader.on('loadedmetadata', () => {\r\n        const media = playlistLoader.media();\r\n        segmentLoader.playlist(media, requestOptions); // if the video is already playing, or if this isn't a live video and preload\r\n        // permits, start downloading segments\r\n\r\n        if (!tech.paused() || media.endList && tech.preload() !== 'none') {\r\n          segmentLoader.load();\r\n        }\r\n      });\r\n      playlistLoader.on('loadedplaylist', () => {\r\n        segmentLoader.playlist(playlistLoader.media(), requestOptions); // If the player isn't paused, ensure that the segment loader is running\r\n\r\n        if (!tech.paused()) {\r\n          segmentLoader.load();\r\n        }\r\n      });\r\n      playlistLoader.on('error', onError[type](type, settings));\r\n    },\r\n    /**\r\n     * Setup event listeners for subtitle playlist loader\r\n     *\r\n     * @param {string} type\r\n     *        MediaGroup type\r\n     * @param {PlaylistLoader|null} playlistLoader\r\n     *        PlaylistLoader to register listeners on\r\n     * @param {Object} settings\r\n     *        Object containing required information for media groups\r\n     * @function setupListeners.SUBTITLES\r\n     */\r\n    SUBTITLES: (type, playlistLoader, settings) => {\r\n      const {\r\n        tech,\r\n        requestOptions,\r\n        segmentLoaders: {\r\n          [type]: segmentLoader\r\n        },\r\n        mediaTypes: {\r\n          [type]: mediaType\r\n        }\r\n      } = settings;\r\n      playlistLoader.on('loadedmetadata', () => {\r\n        const media = playlistLoader.media();\r\n        segmentLoader.playlist(media, requestOptions);\r\n        segmentLoader.track(mediaType.activeTrack()); // if the video is already playing, or if this isn't a live video and preload\r\n        // permits, start downloading segments\r\n\r\n        if (!tech.paused() || media.endList && tech.preload() !== 'none') {\r\n          segmentLoader.load();\r\n        }\r\n      });\r\n      playlistLoader.on('loadedplaylist', () => {\r\n        segmentLoader.playlist(playlistLoader.media(), requestOptions); // If the player isn't paused, ensure that the segment loader is running\r\n\r\n        if (!tech.paused()) {\r\n          segmentLoader.load();\r\n        }\r\n      });\r\n      playlistLoader.on('error', onError[type](type, settings));\r\n    }\r\n  };\r\n  const initialize = {\r\n    /**\r\n     * Setup PlaylistLoaders and AudioTracks for the audio groups\r\n     *\r\n     * @param {string} type\r\n     *        MediaGroup type\r\n     * @param {Object} settings\r\n     *        Object containing required information for media groups\r\n     * @function initialize.AUDIO\r\n     */\r\n    'AUDIO': (type, settings) => {\r\n      const {\r\n        vhs,\r\n        sourceType,\r\n        segmentLoaders: {\r\n          [type]: segmentLoader\r\n        },\r\n        requestOptions,\r\n        main: {\r\n          mediaGroups\r\n        },\r\n        mediaTypes: {\r\n          [type]: {\r\n            groups,\r\n            tracks,\r\n            logger_\r\n          }\r\n        },\r\n        mainPlaylistLoader\r\n      } = settings;\r\n      const audioOnlyMain = isAudioOnly(mainPlaylistLoader.main); // force a default if we have none\r\n\r\n      if (!mediaGroups[type] || Object.keys(mediaGroups[type]).length === 0) {\r\n        mediaGroups[type] = {\r\n          main: {\r\n            default: {\r\n              default: true\r\n            }\r\n          }\r\n        };\r\n        if (audioOnlyMain) {\r\n          mediaGroups[type].main.default.playlists = mainPlaylistLoader.main.playlists;\r\n        }\r\n      }\r\n      for (const groupId in mediaGroups[type]) {\r\n        if (!groups[groupId]) {\r\n          groups[groupId] = [];\r\n        }\r\n        for (const variantLabel in mediaGroups[type][groupId]) {\r\n          let properties = mediaGroups[type][groupId][variantLabel];\r\n          let playlistLoader;\r\n          if (audioOnlyMain) {\r\n            logger_(`AUDIO group '${groupId}' label '${variantLabel}' is a main playlist`);\r\n            properties.isMainPlaylist = true;\r\n            playlistLoader = null; // if vhs-json was provided as the source, and the media playlist was resolved,\r\n            // use the resolved media playlist object\r\n          } else if (sourceType === 'vhs-json' && properties.playlists) {\r\n            playlistLoader = new PlaylistLoader(properties.playlists[0], vhs, requestOptions);\r\n          } else if (properties.resolvedUri) {\r\n            playlistLoader = new PlaylistLoader(properties.resolvedUri, vhs, requestOptions); // TODO: dash isn't the only type with properties.playlists\r\n            // should we even have properties.playlists in this check.\r\n          } else if (properties.playlists && sourceType === 'dash') {\r\n            playlistLoader = new DashPlaylistLoader(properties.playlists[0], vhs, requestOptions, mainPlaylistLoader);\r\n          } else {\r\n            // no resolvedUri means the audio is muxed with the video when using this\r\n            // audio track\r\n            playlistLoader = null;\r\n          }\r\n          properties = merge({\r\n            id: variantLabel,\r\n            playlistLoader\r\n          }, properties);\r\n          setupListeners[type](type, properties.playlistLoader, settings);\r\n          groups[groupId].push(properties);\r\n          if (typeof tracks[variantLabel] === 'undefined') {\r\n            const track = new videojs.AudioTrack({\r\n              id: variantLabel,\r\n              kind: audioTrackKind_(properties),\r\n              enabled: false,\r\n              language: properties.language,\r\n              default: properties.default,\r\n              label: variantLabel\r\n            });\r\n            tracks[variantLabel] = track;\r\n          }\r\n        }\r\n      } // setup single error event handler for the segment loader\r\n\r\n      segmentLoader.on('error', onError[type](type, settings));\r\n    },\r\n    /**\r\n     * Setup PlaylistLoaders and TextTracks for the subtitle groups\r\n     *\r\n     * @param {string} type\r\n     *        MediaGroup type\r\n     * @param {Object} settings\r\n     *        Object containing required information for media groups\r\n     * @function initialize.SUBTITLES\r\n     */\r\n    'SUBTITLES': (type, settings) => {\r\n      const {\r\n        tech,\r\n        vhs,\r\n        sourceType,\r\n        segmentLoaders: {\r\n          [type]: segmentLoader\r\n        },\r\n        requestOptions,\r\n        main: {\r\n          mediaGroups\r\n        },\r\n        mediaTypes: {\r\n          [type]: {\r\n            groups,\r\n            tracks\r\n          }\r\n        },\r\n        mainPlaylistLoader\r\n      } = settings;\r\n      for (const groupId in mediaGroups[type]) {\r\n        if (!groups[groupId]) {\r\n          groups[groupId] = [];\r\n        }\r\n        for (const variantLabel in mediaGroups[type][groupId]) {\r\n          if (!vhs.options_.useForcedSubtitles && mediaGroups[type][groupId][variantLabel].forced) {\r\n            // Subtitle playlists with the forced attribute are not selectable in Safari.\r\n            // According to Apple's HLS Authoring Specification:\r\n            //   If content has forced subtitles and regular subtitles in a given language,\r\n            //   the regular subtitles track in that language MUST contain both the forced\r\n            //   subtitles and the regular subtitles for that language.\r\n            // Because of this requirement and that Safari does not add forced subtitles,\r\n            // forced subtitles are skipped here to maintain consistent experience across\r\n            // all platforms\r\n            continue;\r\n          }\r\n          let properties = mediaGroups[type][groupId][variantLabel];\r\n          let playlistLoader;\r\n          if (sourceType === 'hls') {\r\n            playlistLoader = new PlaylistLoader(properties.resolvedUri, vhs, requestOptions);\r\n          } else if (sourceType === 'dash') {\r\n            const playlists = properties.playlists.filter(p => p.excludeUntil !== Infinity);\r\n            if (!playlists.length) {\r\n              return;\r\n            }\r\n            playlistLoader = new DashPlaylistLoader(properties.playlists[0], vhs, requestOptions, mainPlaylistLoader);\r\n          } else if (sourceType === 'vhs-json') {\r\n            playlistLoader = new PlaylistLoader(\r\n            // if the vhs-json object included the media playlist, use the media playlist\r\n            // as provided, otherwise use the resolved URI to load the playlist\r\n            properties.playlists ? properties.playlists[0] : properties.resolvedUri, vhs, requestOptions);\r\n          }\r\n          properties = merge({\r\n            id: variantLabel,\r\n            playlistLoader\r\n          }, properties);\r\n          setupListeners[type](type, properties.playlistLoader, settings);\r\n          groups[groupId].push(properties);\r\n          if (typeof tracks[variantLabel] === 'undefined') {\r\n            const track = tech.addRemoteTextTrack({\r\n              id: variantLabel,\r\n              kind: 'subtitles',\r\n              default: properties.default && properties.autoselect,\r\n              language: properties.language,\r\n              label: variantLabel\r\n            }, false).track;\r\n            tracks[variantLabel] = track;\r\n          }\r\n        }\r\n      } // setup single error event handler for the segment loader\r\n\r\n      segmentLoader.on('error', onError[type](type, settings));\r\n    },\r\n    /**\r\n     * Setup TextTracks for the closed-caption groups\r\n     *\r\n     * @param {String} type\r\n     *        MediaGroup type\r\n     * @param {Object} settings\r\n     *        Object containing required information for media groups\r\n     * @function initialize['CLOSED-CAPTIONS']\r\n     */\r\n    'CLOSED-CAPTIONS': (type, settings) => {\r\n      const {\r\n        tech,\r\n        main: {\r\n          mediaGroups\r\n        },\r\n        mediaTypes: {\r\n          [type]: {\r\n            groups,\r\n            tracks\r\n          }\r\n        }\r\n      } = settings;\r\n      for (const groupId in mediaGroups[type]) {\r\n        if (!groups[groupId]) {\r\n          groups[groupId] = [];\r\n        }\r\n        for (const variantLabel in mediaGroups[type][groupId]) {\r\n          const properties = mediaGroups[type][groupId][variantLabel]; // Look for either 608 (CCn) or 708 (SERVICEn) caption services\r\n\r\n          if (!/^(?:CC|SERVICE)/.test(properties.instreamId)) {\r\n            continue;\r\n          }\r\n          const captionServices = tech.options_.vhs && tech.options_.vhs.captionServices || {};\r\n          let newProps = {\r\n            label: variantLabel,\r\n            language: properties.language,\r\n            instreamId: properties.instreamId,\r\n            default: properties.default && properties.autoselect\r\n          };\r\n          if (captionServices[newProps.instreamId]) {\r\n            newProps = merge(newProps, captionServices[newProps.instreamId]);\r\n          }\r\n          if (newProps.default === undefined) {\r\n            delete newProps.default;\r\n          } // No PlaylistLoader is required for Closed-Captions because the captions are\r\n          // embedded within the video stream\r\n\r\n          groups[groupId].push(merge({\r\n            id: variantLabel\r\n          }, properties));\r\n          if (typeof tracks[variantLabel] === 'undefined') {\r\n            const track = tech.addRemoteTextTrack({\r\n              id: newProps.instreamId,\r\n              kind: 'captions',\r\n              default: newProps.default,\r\n              language: newProps.language,\r\n              label: newProps.label\r\n            }, false).track;\r\n            tracks[variantLabel] = track;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  };\r\n  const groupMatch = (list, media) => {\r\n    for (let i = 0; i < list.length; i++) {\r\n      if (playlistMatch(media, list[i])) {\r\n        return true;\r\n      }\r\n      if (list[i].playlists && groupMatch(list[i].playlists, media)) {\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  };\r\n  /**\r\n   * Returns a function used to get the active group of the provided type\r\n   *\r\n   * @param {string} type\r\n   *        MediaGroup type\r\n   * @param {Object} settings\r\n   *        Object containing required information for media groups\r\n   * @return {Function}\r\n   *         Function that returns the active media group for the provided type. Takes an\r\n   *         optional parameter {TextTrack} track. If no track is provided, a list of all\r\n   *         variants in the group, otherwise the variant corresponding to the provided\r\n   *         track is returned.\r\n   * @function activeGroup\r\n   */\r\n\r\n  const activeGroup = (type, settings) => track => {\r\n    const {\r\n      mainPlaylistLoader,\r\n      mediaTypes: {\r\n        [type]: {\r\n          groups\r\n        }\r\n      }\r\n    } = settings;\r\n    const media = mainPlaylistLoader.media();\r\n    if (!media) {\r\n      return null;\r\n    }\r\n    let variants = null; // set to variants to main media active group\r\n\r\n    if (media.attributes[type]) {\r\n      variants = groups[media.attributes[type]];\r\n    }\r\n    const groupKeys = Object.keys(groups);\r\n    if (!variants) {\r\n      // find the mainPlaylistLoader media\r\n      // that is in a media group if we are dealing\r\n      // with audio only\r\n      if (type === 'AUDIO' && groupKeys.length > 1 && isAudioOnly(settings.main)) {\r\n        for (let i = 0; i < groupKeys.length; i++) {\r\n          const groupPropertyList = groups[groupKeys[i]];\r\n          if (groupMatch(groupPropertyList, media)) {\r\n            variants = groupPropertyList;\r\n            break;\r\n          }\r\n        } // use the main group if it exists\r\n      } else if (groups.main) {\r\n        variants = groups.main; // only one group, use that one\r\n      } else if (groupKeys.length === 1) {\r\n        variants = groups[groupKeys[0]];\r\n      }\r\n    }\r\n    if (typeof track === 'undefined') {\r\n      return variants;\r\n    }\r\n    if (track === null || !variants) {\r\n      // An active track was specified so a corresponding group is expected. track === null\r\n      // means no track is currently active so there is no corresponding group\r\n      return null;\r\n    }\r\n    return variants.filter(props => props.id === track.id)[0] || null;\r\n  };\r\n  const activeTrack = {\r\n    /**\r\n     * Returns a function used to get the active track of type provided\r\n     *\r\n     * @param {string} type\r\n     *        MediaGroup type\r\n     * @param {Object} settings\r\n     *        Object containing required information for media groups\r\n     * @return {Function}\r\n     *         Function that returns the active media track for the provided type. Returns\r\n     *         null if no track is active\r\n     * @function activeTrack.AUDIO\r\n     */\r\n    AUDIO: (type, settings) => () => {\r\n      const {\r\n        mediaTypes: {\r\n          [type]: {\r\n            tracks\r\n          }\r\n        }\r\n      } = settings;\r\n      for (const id in tracks) {\r\n        if (tracks[id].enabled) {\r\n          return tracks[id];\r\n        }\r\n      }\r\n      return null;\r\n    },\r\n    /**\r\n     * Returns a function used to get the active track of type provided\r\n     *\r\n     * @param {string} type\r\n     *        MediaGroup type\r\n     * @param {Object} settings\r\n     *        Object containing required information for media groups\r\n     * @return {Function}\r\n     *         Function that returns the active media track for the provided type. Returns\r\n     *         null if no track is active\r\n     * @function activeTrack.SUBTITLES\r\n     */\r\n    SUBTITLES: (type, settings) => () => {\r\n      const {\r\n        mediaTypes: {\r\n          [type]: {\r\n            tracks\r\n          }\r\n        }\r\n      } = settings;\r\n      for (const id in tracks) {\r\n        if (tracks[id].mode === 'showing' || tracks[id].mode === 'hidden') {\r\n          return tracks[id];\r\n        }\r\n      }\r\n      return null;\r\n    }\r\n  };\r\n  const getActiveGroup = (type, {\r\n    mediaTypes\r\n  }) => () => {\r\n    const activeTrack_ = mediaTypes[type].activeTrack();\r\n    if (!activeTrack_) {\r\n      return null;\r\n    }\r\n    return mediaTypes[type].activeGroup(activeTrack_);\r\n  };\r\n  /**\r\n   * Setup PlaylistLoaders and Tracks for media groups (Audio, Subtitles,\r\n   * Closed-Captions) specified in the main manifest.\r\n   *\r\n   * @param {Object} settings\r\n   *        Object containing required information for setting up the media groups\r\n   * @param {Tech} settings.tech\r\n   *        The tech of the player\r\n   * @param {Object} settings.requestOptions\r\n   *        XHR request options used by the segment loaders\r\n   * @param {PlaylistLoader} settings.mainPlaylistLoader\r\n   *        PlaylistLoader for the main source\r\n   * @param {VhsHandler} settings.vhs\r\n   *        VHS SourceHandler\r\n   * @param {Object} settings.main\r\n   *        The parsed main manifest\r\n   * @param {Object} settings.mediaTypes\r\n   *        Object to store the loaders, tracks, and utility methods for each media type\r\n   * @param {Function} settings.excludePlaylist\r\n   *        Excludes the current rendition and forces a rendition switch.\r\n   * @function setupMediaGroups\r\n   */\r\n\r\n  const setupMediaGroups = settings => {\r\n    ['AUDIO', 'SUBTITLES', 'CLOSED-CAPTIONS'].forEach(type => {\r\n      initialize[type](type, settings);\r\n    });\r\n    const {\r\n      mediaTypes,\r\n      mainPlaylistLoader,\r\n      tech,\r\n      vhs,\r\n      segmentLoaders: {\r\n        ['AUDIO']: audioSegmentLoader,\r\n        main: mainSegmentLoader\r\n      }\r\n    } = settings; // setup active group and track getters and change event handlers\r\n\r\n    ['AUDIO', 'SUBTITLES'].forEach(type => {\r\n      mediaTypes[type].activeGroup = activeGroup(type, settings);\r\n      mediaTypes[type].activeTrack = activeTrack[type](type, settings);\r\n      mediaTypes[type].onGroupChanged = onGroupChanged(type, settings);\r\n      mediaTypes[type].onGroupChanging = onGroupChanging(type, settings);\r\n      mediaTypes[type].onTrackChanged = onTrackChanged(type, settings);\r\n      mediaTypes[type].getActiveGroup = getActiveGroup(type, settings);\r\n    }); // DO NOT enable the default subtitle or caption track.\r\n    // DO enable the default audio track\r\n\r\n    const audioGroup = mediaTypes.AUDIO.activeGroup();\r\n    if (audioGroup) {\r\n      const groupId = (audioGroup.filter(group => group.default)[0] || audioGroup[0]).id;\r\n      mediaTypes.AUDIO.tracks[groupId].enabled = true;\r\n      mediaTypes.AUDIO.onGroupChanged();\r\n      mediaTypes.AUDIO.onTrackChanged();\r\n      const activeAudioGroup = mediaTypes.AUDIO.getActiveGroup(); // a similar check for handling setAudio on each loader is run again each time the\r\n      // track is changed, but needs to be handled here since the track may not be considered\r\n      // changed on the first call to onTrackChanged\r\n\r\n      if (!activeAudioGroup.playlistLoader) {\r\n        // either audio is muxed with video or the stream is audio only\r\n        mainSegmentLoader.setAudio(true);\r\n      } else {\r\n        // audio is demuxed\r\n        mainSegmentLoader.setAudio(false);\r\n        audioSegmentLoader.setAudio(true);\r\n      }\r\n    }\r\n    mainPlaylistLoader.on('mediachange', () => {\r\n      ['AUDIO', 'SUBTITLES'].forEach(type => mediaTypes[type].onGroupChanged());\r\n    });\r\n    mainPlaylistLoader.on('mediachanging', () => {\r\n      ['AUDIO', 'SUBTITLES'].forEach(type => mediaTypes[type].onGroupChanging());\r\n    }); // custom audio track change event handler for usage event\r\n\r\n    const onAudioTrackChanged = () => {\r\n      mediaTypes.AUDIO.onTrackChanged();\r\n      tech.trigger({\r\n        type: 'usage',\r\n        name: 'vhs-audio-change'\r\n      });\r\n    };\r\n    tech.audioTracks().addEventListener('change', onAudioTrackChanged);\r\n    tech.remoteTextTracks().addEventListener('change', mediaTypes.SUBTITLES.onTrackChanged);\r\n    vhs.on('dispose', () => {\r\n      tech.audioTracks().removeEventListener('change', onAudioTrackChanged);\r\n      tech.remoteTextTracks().removeEventListener('change', mediaTypes.SUBTITLES.onTrackChanged);\r\n    }); // clear existing audio tracks and add the ones we just created\r\n\r\n    tech.clearTracks('audio');\r\n    for (const id in mediaTypes.AUDIO.tracks) {\r\n      tech.audioTracks().addTrack(mediaTypes.AUDIO.tracks[id]);\r\n    }\r\n  };\r\n  /**\r\n   * Creates skeleton object used to store the loaders, tracks, and utility methods for each\r\n   * media type\r\n   *\r\n   * @return {Object}\r\n   *         Object to store the loaders, tracks, and utility methods for each media type\r\n   * @function createMediaTypes\r\n   */\r\n\r\n  const createMediaTypes = () => {\r\n    const mediaTypes = {};\r\n    ['AUDIO', 'SUBTITLES', 'CLOSED-CAPTIONS'].forEach(type => {\r\n      mediaTypes[type] = {\r\n        groups: {},\r\n        tracks: {},\r\n        activePlaylistLoader: null,\r\n        activeGroup: noop,\r\n        activeTrack: noop,\r\n        getActiveGroup: noop,\r\n        onGroupChanged: noop,\r\n        onTrackChanged: noop,\r\n        lastTrack_: null,\r\n        logger_: logger(`MediaGroups[${type}]`)\r\n      };\r\n    });\r\n    return mediaTypes;\r\n  };\r\n\r\n  /**\r\n   * A utility class for setting properties and maintaining the state of the content steering manifest.\r\n   *\r\n   * Content Steering manifest format:\r\n   * VERSION: number (required) currently only version 1 is supported.\r\n   * TTL: number in seconds (optional) until the next content steering manifest reload.\r\n   * RELOAD-URI: string (optional) uri to fetch the next content steering manifest.\r\n   * SERVICE-LOCATION-PRIORITY or PATHWAY-PRIORITY a non empty array of unique string values.\r\n   * PATHWAY-CLONES: array (optional) (HLS only) pathway clone objects to copy from other playlists.\r\n   */\r\n\r\n  class SteeringManifest {\r\n    constructor() {\r\n      this.priority_ = [];\r\n      this.pathwayClones_ = new Map();\r\n    }\r\n    set version(number) {\r\n      // Only version 1 is currently supported for both DASH and HLS.\r\n      if (number === 1) {\r\n        this.version_ = number;\r\n      }\r\n    }\r\n    set ttl(seconds) {\r\n      // TTL = time-to-live, default = 300 seconds.\r\n      this.ttl_ = seconds || 300;\r\n    }\r\n    set reloadUri(uri) {\r\n      if (uri) {\r\n        // reload URI can be relative to the previous reloadUri.\r\n        this.reloadUri_ = resolveUrl(this.reloadUri_, uri);\r\n      }\r\n    }\r\n    set priority(array) {\r\n      // priority must be non-empty and unique values.\r\n      if (array && array.length) {\r\n        this.priority_ = array;\r\n      }\r\n    }\r\n    set pathwayClones(array) {\r\n      // pathwayClones must be non-empty.\r\n      if (array && array.length) {\r\n        this.pathwayClones_ = new Map(array.map(clone => [clone.ID, clone]));\r\n      }\r\n    }\r\n    get version() {\r\n      return this.version_;\r\n    }\r\n    get ttl() {\r\n      return this.ttl_;\r\n    }\r\n    get reloadUri() {\r\n      return this.reloadUri_;\r\n    }\r\n    get priority() {\r\n      return this.priority_;\r\n    }\r\n    get pathwayClones() {\r\n      return this.pathwayClones_;\r\n    }\r\n  }\r\n  /**\r\n   * This class represents a content steering manifest and associated state. See both HLS and DASH specifications.\r\n   * HLS: https://developer.apple.com/streaming/HLSContentSteeringSpecification.pdf and\r\n   * https://datatracker.ietf.org/doc/draft-pantos-hls-rfc8216bis/ section 4.4.6.6.\r\n   * DASH: https://dashif.org/docs/DASH-IF-CTS-00XX-Content-Steering-Community-Review.pdf\r\n   *\r\n   * @param {function} xhr for making a network request from the browser.\r\n   * @param {function} bandwidth for fetching the current bandwidth from the main segment loader.\r\n   */\r\n\r\n  class ContentSteeringController extends videojs.EventTarget {\r\n    constructor(xhr, bandwidth) {\r\n      super();\r\n      this.currentPathway = null;\r\n      this.defaultPathway = null;\r\n      this.queryBeforeStart = false;\r\n      this.availablePathways_ = new Set();\r\n      this.steeringManifest = new SteeringManifest();\r\n      this.proxyServerUrl_ = null;\r\n      this.manifestType_ = null;\r\n      this.ttlTimeout_ = null;\r\n      this.request_ = null;\r\n      this.currentPathwayClones = new Map();\r\n      this.nextPathwayClones = new Map();\r\n      this.excludedSteeringManifestURLs = new Set();\r\n      this.logger_ = logger('Content Steering');\r\n      this.xhr_ = xhr;\r\n      this.getBandwidth_ = bandwidth;\r\n    }\r\n    /**\r\n     * Assigns the content steering tag properties to the steering controller\r\n     *\r\n     * @param {string} baseUrl the baseURL from the main manifest for resolving the steering manifest url\r\n     * @param {Object} steeringTag the content steering tag from the main manifest\r\n     */\r\n\r\n    assignTagProperties(baseUrl, steeringTag) {\r\n      this.manifestType_ = steeringTag.serverUri ? 'HLS' : 'DASH'; // serverUri is HLS serverURL is DASH\r\n\r\n      const steeringUri = steeringTag.serverUri || steeringTag.serverURL;\r\n      if (!steeringUri) {\r\n        this.logger_(`steering manifest URL is ${steeringUri}, cannot request steering manifest.`);\r\n        this.trigger('error');\r\n        return;\r\n      } // Content steering manifests can be encoded as a data URI. We can decode, parse and return early if that's the case.\r\n\r\n      if (steeringUri.startsWith('data:')) {\r\n        this.decodeDataUriManifest_(steeringUri.substring(steeringUri.indexOf(',') + 1));\r\n        return;\r\n      } // reloadUri is the resolution of the main manifest URL and steering URL.\r\n\r\n      this.steeringManifest.reloadUri = resolveUrl(baseUrl, steeringUri); // pathwayId is HLS defaultServiceLocation is DASH\r\n\r\n      this.defaultPathway = steeringTag.pathwayId || steeringTag.defaultServiceLocation; // currently only DASH supports the following properties on <ContentSteering> tags.\r\n\r\n      this.queryBeforeStart = steeringTag.queryBeforeStart;\r\n      this.proxyServerUrl_ = steeringTag.proxyServerURL; // trigger a steering event if we have a pathway from the content steering tag.\r\n      // this tells VHS which segment pathway to start with.\r\n      // If queryBeforeStart is true we need to wait for the steering manifest response.\r\n\r\n      if (this.defaultPathway && !this.queryBeforeStart) {\r\n        this.trigger('content-steering');\r\n      }\r\n    }\r\n    /**\r\n     * Requests the content steering manifest and parse the response. This should only be called after\r\n     * assignTagProperties was called with a content steering tag.\r\n     *\r\n     * @param {string} initialUri The optional uri to make the request with.\r\n     *    If set, the request should be made with exactly what is passed in this variable.\r\n     *    This scenario should only happen once on initalization.\r\n     */\r\n\r\n    requestSteeringManifest(initial) {\r\n      const reloadUri = this.steeringManifest.reloadUri;\r\n      if (!reloadUri) {\r\n        return;\r\n      } // We currently don't support passing MPD query parameters directly to the content steering URL as this requires\r\n      // ExtUrlQueryInfo tag support. See the DASH content steering spec section 8.1.\r\n      // This request URI accounts for manifest URIs that have been excluded.\r\n\r\n      const uri = initial ? reloadUri : this.getRequestURI(reloadUri); // If there are no valid manifest URIs, we should stop content steering.\r\n\r\n      if (!uri) {\r\n        this.logger_('No valid content steering manifest URIs. Stopping content steering.');\r\n        this.trigger('error');\r\n        this.dispose();\r\n        return;\r\n      }\r\n      const metadata = {\r\n        contentSteeringInfo: {\r\n          uri\r\n        }\r\n      };\r\n      this.trigger({\r\n        type: 'contentsteeringloadstart',\r\n        metadata\r\n      });\r\n      this.request_ = this.xhr_({\r\n        uri,\r\n        requestType: 'content-steering-manifest'\r\n      }, (error, errorInfo) => {\r\n        if (error) {\r\n          // If the client receives HTTP 410 Gone in response to a manifest request,\r\n          // it MUST NOT issue another request for that URI for the remainder of the\r\n          // playback session. It MAY continue to use the most-recently obtained set\r\n          // of Pathways.\r\n          if (errorInfo.status === 410) {\r\n            this.logger_(`manifest request 410 ${error}.`);\r\n            this.logger_(`There will be no more content steering requests to ${uri} this session.`);\r\n            this.excludedSteeringManifestURLs.add(uri);\r\n            return;\r\n          } // If the client receives HTTP 429 Too Many Requests with a Retry-After\r\n          // header in response to a manifest request, it SHOULD wait until the time\r\n          // specified by the Retry-After header to reissue the request.\r\n\r\n          if (errorInfo.status === 429) {\r\n            const retrySeconds = errorInfo.responseHeaders['retry-after'];\r\n            this.logger_(`manifest request 429 ${error}.`);\r\n            this.logger_(`content steering will retry in ${retrySeconds} seconds.`);\r\n            this.startTTLTimeout_(parseInt(retrySeconds, 10));\r\n            return;\r\n          } // If the Steering Manifest cannot be loaded and parsed correctly, the\r\n          // client SHOULD continue to use the previous values and attempt to reload\r\n          // it after waiting for the previously-specified TTL (or 5 minutes if\r\n          // none).\r\n\r\n          this.logger_(`manifest failed to load ${error}.`);\r\n          this.startTTLTimeout_();\r\n          return;\r\n        }\r\n        this.trigger({\r\n          type: 'contentsteeringloadcomplete',\r\n          metadata\r\n        });\r\n        let steeringManifestJson;\r\n        try {\r\n          steeringManifestJson = JSON.parse(this.request_.responseText);\r\n        } catch (parseError) {\r\n          const errorMetadata = {\r\n            errorType: videojs.Error.StreamingContentSteeringParserError,\r\n            error: parseError\r\n          };\r\n          this.trigger({\r\n            type: 'error',\r\n            metadata: errorMetadata\r\n          });\r\n        }\r\n        this.assignSteeringProperties_(steeringManifestJson);\r\n        const parsedMetadata = {\r\n          contentSteeringInfo: metadata.contentSteeringInfo,\r\n          contentSteeringManifest: {\r\n            version: this.steeringManifest.version,\r\n            reloadUri: this.steeringManifest.reloadUri,\r\n            priority: this.steeringManifest.priority\r\n          }\r\n        };\r\n        this.trigger({\r\n          type: 'contentsteeringparsed',\r\n          metadata: parsedMetadata\r\n        });\r\n        this.startTTLTimeout_();\r\n      });\r\n    }\r\n    /**\r\n     * Set the proxy server URL and add the steering manifest url as a URI encoded parameter.\r\n     *\r\n     * @param {string} steeringUrl the steering manifest url\r\n     * @return the steering manifest url to a proxy server with all parameters set\r\n     */\r\n\r\n    setProxyServerUrl_(steeringUrl) {\r\n      const steeringUrlObject = new window.URL(steeringUrl);\r\n      const proxyServerUrlObject = new window.URL(this.proxyServerUrl_);\r\n      proxyServerUrlObject.searchParams.set('url', encodeURI(steeringUrlObject.toString()));\r\n      return this.setSteeringParams_(proxyServerUrlObject.toString());\r\n    }\r\n    /**\r\n     * Decodes and parses the data uri encoded steering manifest\r\n     *\r\n     * @param {string} dataUri the data uri to be decoded and parsed.\r\n     */\r\n\r\n    decodeDataUriManifest_(dataUri) {\r\n      const steeringManifestJson = JSON.parse(window.atob(dataUri));\r\n      this.assignSteeringProperties_(steeringManifestJson);\r\n    }\r\n    /**\r\n     * Set the HLS or DASH content steering manifest request query parameters. For example:\r\n     * _HLS_pathway=\"<CURRENT-PATHWAY-ID>\" and _HLS_throughput=<THROUGHPUT>\r\n     * _DASH_pathway and _DASH_throughput\r\n     *\r\n     * @param {string} uri to add content steering server parameters to.\r\n     * @return a new uri as a string with the added steering query parameters.\r\n     */\r\n\r\n    setSteeringParams_(url) {\r\n      const urlObject = new window.URL(url);\r\n      const path = this.getPathway();\r\n      const networkThroughput = this.getBandwidth_();\r\n      if (path) {\r\n        const pathwayKey = `_${this.manifestType_}_pathway`;\r\n        urlObject.searchParams.set(pathwayKey, path);\r\n      }\r\n      if (networkThroughput) {\r\n        const throughputKey = `_${this.manifestType_}_throughput`;\r\n        urlObject.searchParams.set(throughputKey, networkThroughput);\r\n      }\r\n      return urlObject.toString();\r\n    }\r\n    /**\r\n     * Assigns the current steering manifest properties and to the SteeringManifest object\r\n     *\r\n     * @param {Object} steeringJson the raw JSON steering manifest\r\n     */\r\n\r\n    assignSteeringProperties_(steeringJson) {\r\n      this.steeringManifest.version = steeringJson.VERSION;\r\n      if (!this.steeringManifest.version) {\r\n        this.logger_(`manifest version is ${steeringJson.VERSION}, which is not supported.`);\r\n        this.trigger('error');\r\n        return;\r\n      }\r\n      this.steeringManifest.ttl = steeringJson.TTL;\r\n      this.steeringManifest.reloadUri = steeringJson['RELOAD-URI']; // HLS = PATHWAY-PRIORITY required. DASH = SERVICE-LOCATION-PRIORITY optional\r\n\r\n      this.steeringManifest.priority = steeringJson['PATHWAY-PRIORITY'] || steeringJson['SERVICE-LOCATION-PRIORITY']; // Pathway clones to be created/updated in HLS.\r\n      // See section 7.2 https://datatracker.ietf.org/doc/draft-pantos-hls-rfc8216bis/\r\n\r\n      this.steeringManifest.pathwayClones = steeringJson['PATHWAY-CLONES'];\r\n      this.nextPathwayClones = this.steeringManifest.pathwayClones; // 1. apply first pathway from the array.\r\n      // 2. if first pathway doesn't exist in manifest, try next pathway.\r\n      //    a. if all pathways are exhausted, ignore the steering manifest priority.\r\n      // 3. if segments fail from an established pathway, try all variants/renditions, then exclude the failed pathway.\r\n      //    a. exclude a pathway for a minimum of the last TTL duration. Meaning, from the next steering response,\r\n      //       the excluded pathway will be ignored.\r\n      //       See excludePathway usage in excludePlaylist().\r\n      // If there are no available pathways, we need to stop content steering.\r\n\r\n      if (!this.availablePathways_.size) {\r\n        this.logger_('There are no available pathways for content steering. Ending content steering.');\r\n        this.trigger('error');\r\n        this.dispose();\r\n      }\r\n      const chooseNextPathway = pathwaysByPriority => {\r\n        for (const path of pathwaysByPriority) {\r\n          if (this.availablePathways_.has(path)) {\r\n            return path;\r\n          }\r\n        } // If no pathway matches, ignore the manifest and choose the first available.\r\n\r\n        return [...this.availablePathways_][0];\r\n      };\r\n      const nextPathway = chooseNextPathway(this.steeringManifest.priority);\r\n      if (this.currentPathway !== nextPathway) {\r\n        this.currentPathway = nextPathway;\r\n        this.trigger('content-steering');\r\n      }\r\n    }\r\n    /**\r\n     * Returns the pathway to use for steering decisions\r\n     *\r\n     * @return {string} returns the current pathway or the default\r\n     */\r\n\r\n    getPathway() {\r\n      return this.currentPathway || this.defaultPathway;\r\n    }\r\n    /**\r\n     * Chooses the manifest request URI based on proxy URIs and server URLs.\r\n     * Also accounts for exclusion on certain manifest URIs.\r\n     *\r\n     * @param {string} reloadUri the base uri before parameters\r\n     *\r\n     * @return {string} the final URI for the request to the manifest server.\r\n     */\r\n\r\n    getRequestURI(reloadUri) {\r\n      if (!reloadUri) {\r\n        return null;\r\n      }\r\n      const isExcluded = uri => this.excludedSteeringManifestURLs.has(uri);\r\n      if (this.proxyServerUrl_) {\r\n        const proxyURI = this.setProxyServerUrl_(reloadUri);\r\n        if (!isExcluded(proxyURI)) {\r\n          return proxyURI;\r\n        }\r\n      }\r\n      const steeringURI = this.setSteeringParams_(reloadUri);\r\n      if (!isExcluded(steeringURI)) {\r\n        return steeringURI;\r\n      } // Return nothing if all valid manifest URIs are excluded.\r\n\r\n      return null;\r\n    }\r\n    /**\r\n     * Start the timeout for re-requesting the steering manifest at the TTL interval.\r\n     *\r\n     * @param {number} ttl time in seconds of the timeout. Defaults to the\r\n     *        ttl interval in the steering manifest\r\n     */\r\n\r\n    startTTLTimeout_(ttl = this.steeringManifest.ttl) {\r\n      // 300 (5 minutes) is the default value.\r\n      const ttlMS = ttl * 1000;\r\n      this.ttlTimeout_ = window.setTimeout(() => {\r\n        this.requestSteeringManifest();\r\n      }, ttlMS);\r\n    }\r\n    /**\r\n     * Clear the TTL timeout if necessary.\r\n     */\r\n\r\n    clearTTLTimeout_() {\r\n      window.clearTimeout(this.ttlTimeout_);\r\n      this.ttlTimeout_ = null;\r\n    }\r\n    /**\r\n     * aborts any current steering xhr and sets the current request object to null\r\n     */\r\n\r\n    abort() {\r\n      if (this.request_) {\r\n        this.request_.abort();\r\n      }\r\n      this.request_ = null;\r\n    }\r\n    /**\r\n     * aborts steering requests clears the ttl timeout and resets all properties.\r\n     */\r\n\r\n    dispose() {\r\n      this.off('content-steering');\r\n      this.off('error');\r\n      this.abort();\r\n      this.clearTTLTimeout_();\r\n      this.currentPathway = null;\r\n      this.defaultPathway = null;\r\n      this.queryBeforeStart = null;\r\n      this.proxyServerUrl_ = null;\r\n      this.manifestType_ = null;\r\n      this.ttlTimeout_ = null;\r\n      this.request_ = null;\r\n      this.excludedSteeringManifestURLs = new Set();\r\n      this.availablePathways_ = new Set();\r\n      this.steeringManifest = new SteeringManifest();\r\n    }\r\n    /**\r\n     * adds a pathway to the available pathways set\r\n     *\r\n     * @param {string} pathway the pathway string to add\r\n     */\r\n\r\n    addAvailablePathway(pathway) {\r\n      if (pathway) {\r\n        this.availablePathways_.add(pathway);\r\n      }\r\n    }\r\n    /**\r\n     * Clears all pathways from the available pathways set\r\n     */\r\n\r\n    clearAvailablePathways() {\r\n      this.availablePathways_.clear();\r\n    }\r\n    /**\r\n     * Removes a pathway from the available pathways set.\r\n     */\r\n\r\n    excludePathway(pathway) {\r\n      return this.availablePathways_.delete(pathway);\r\n    }\r\n    /**\r\n     * Checks the refreshed DASH manifest content steering tag for changes.\r\n     *\r\n     * @param {string} baseURL new steering tag on DASH manifest refresh\r\n     * @param {Object} newTag the new tag to check for changes\r\n     * @return a true or false whether the new tag has different values\r\n     */\r\n\r\n    didDASHTagChange(baseURL, newTag) {\r\n      return !newTag && this.steeringManifest.reloadUri || newTag && (resolveUrl(baseURL, newTag.serverURL) !== this.steeringManifest.reloadUri || newTag.defaultServiceLocation !== this.defaultPathway || newTag.queryBeforeStart !== this.queryBeforeStart || newTag.proxyServerURL !== this.proxyServerUrl_);\r\n    }\r\n    getAvailablePathways() {\r\n      return this.availablePathways_;\r\n    }\r\n  }\r\n  const debounce = (callback, wait) => {\r\n    let timeoutId = null;\r\n    return (...args) => {\r\n      clearTimeout(timeoutId);\r\n      timeoutId = setTimeout(() => {\r\n        callback.apply(null, args);\r\n      }, wait);\r\n    };\r\n  };\r\n  const ABORT_EARLY_EXCLUSION_SECONDS = 10;\r\n  let Vhs$1; // SegmentLoader stats that need to have each loader's\r\n  // values summed to calculate the final value\r\n\r\n  const loaderStats = ['mediaRequests', 'mediaRequestsAborted', 'mediaRequestsTimedout', 'mediaRequestsErrored', 'mediaTransferDuration', 'mediaBytesTransferred', 'mediaAppends'];\r\n  const sumLoaderStat = function (stat) {\r\n    return this.audioSegmentLoader_[stat] + this.mainSegmentLoader_[stat];\r\n  };\r\n  const shouldSwitchToMedia = function ({\r\n    currentPlaylist,\r\n    buffered,\r\n    currentTime,\r\n    nextPlaylist,\r\n    bufferLowWaterLine,\r\n    bufferHighWaterLine,\r\n    duration,\r\n    bufferBasedABR,\r\n    log\r\n  }) {\r\n    // we have no other playlist to switch to\r\n    if (!nextPlaylist) {\r\n      videojs.log.warn('We received no playlist to switch to. Please check your stream.');\r\n      return false;\r\n    }\r\n    const sharedLogLine = `allowing switch ${currentPlaylist && currentPlaylist.id || 'null'} -> ${nextPlaylist.id}`;\r\n    if (!currentPlaylist) {\r\n      log(`${sharedLogLine} as current playlist is not set`);\r\n      return true;\r\n    } // no need to switch if playlist is the same\r\n\r\n    if (nextPlaylist.id === currentPlaylist.id) {\r\n      return false;\r\n    } // determine if current time is in a buffered range.\r\n\r\n    const isBuffered = Boolean(findRange(buffered, currentTime).length); // If the playlist is live, then we want to not take low water line into account.\r\n    // This is because in LIVE, the player plays 3 segments from the end of the\r\n    // playlist, and if `BUFFER_LOW_WATER_LINE` is greater than the duration availble\r\n    // in those segments, a viewer will never experience a rendition upswitch.\r\n\r\n    if (!currentPlaylist.endList) {\r\n      // For LLHLS live streams, don't switch renditions before playback has started, as it almost\r\n      // doubles the time to first playback.\r\n      if (!isBuffered && typeof currentPlaylist.partTargetDuration === 'number') {\r\n        log(`not ${sharedLogLine} as current playlist is live llhls, but currentTime isn't in buffered.`);\r\n        return false;\r\n      }\r\n      log(`${sharedLogLine} as current playlist is live`);\r\n      return true;\r\n    }\r\n    const forwardBuffer = timeAheadOf(buffered, currentTime);\r\n    const maxBufferLowWaterLine = bufferBasedABR ? Config.EXPERIMENTAL_MAX_BUFFER_LOW_WATER_LINE : Config.MAX_BUFFER_LOW_WATER_LINE; // For the same reason as LIVE, we ignore the low water line when the VOD\r\n    // duration is below the max potential low water line\r\n\r\n    if (duration < maxBufferLowWaterLine) {\r\n      log(`${sharedLogLine} as duration < max low water line (${duration} < ${maxBufferLowWaterLine})`);\r\n      return true;\r\n    }\r\n    const nextBandwidth = nextPlaylist.attributes.BANDWIDTH;\r\n    const currBandwidth = currentPlaylist.attributes.BANDWIDTH; // when switching down, if our buffer is lower than the high water line,\r\n    // we can switch down\r\n\r\n    if (nextBandwidth < currBandwidth && (!bufferBasedABR || forwardBuffer < bufferHighWaterLine)) {\r\n      let logLine = `${sharedLogLine} as next bandwidth < current bandwidth (${nextBandwidth} < ${currBandwidth})`;\r\n      if (bufferBasedABR) {\r\n        logLine += ` and forwardBuffer < bufferHighWaterLine (${forwardBuffer} < ${bufferHighWaterLine})`;\r\n      }\r\n      log(logLine);\r\n      return true;\r\n    } // and if our buffer is higher than the low water line,\r\n    // we can switch up\r\n\r\n    if ((!bufferBasedABR || nextBandwidth > currBandwidth) && forwardBuffer >= bufferLowWaterLine) {\r\n      let logLine = `${sharedLogLine} as forwardBuffer >= bufferLowWaterLine (${forwardBuffer} >= ${bufferLowWaterLine})`;\r\n      if (bufferBasedABR) {\r\n        logLine += ` and next bandwidth > current bandwidth (${nextBandwidth} > ${currBandwidth})`;\r\n      }\r\n      log(logLine);\r\n      return true;\r\n    }\r\n    log(`not ${sharedLogLine} as no switching criteria met`);\r\n    return false;\r\n  };\r\n  /**\r\n   * the main playlist controller controller all interactons\r\n   * between playlists and segmentloaders. At this time this mainly\r\n   * involves a main playlist and a series of audio playlists\r\n   * if they are available\r\n   *\r\n   * @class PlaylistController\r\n   * @extends videojs.EventTarget\r\n   */\r\n\r\n  class PlaylistController extends videojs.EventTarget {\r\n    constructor(options) {\r\n      super(); // Adding a slight debounce to avoid duplicate calls during rapid quality changes, for example:\r\n      // When selecting quality from the quality list,\r\n      // where we may have multiple bandwidth profiles for the same vertical resolution.\r\n\r\n      this.fastQualityChange_ = debounce(this.fastQualityChange_.bind(this), 100);\r\n      const {\r\n        src,\r\n        withCredentials,\r\n        tech,\r\n        bandwidth,\r\n        externVhs,\r\n        useCueTags,\r\n        playlistExclusionDuration,\r\n        enableLowInitialPlaylist,\r\n        sourceType,\r\n        cacheEncryptionKeys,\r\n        bufferBasedABR,\r\n        leastPixelDiffSelector,\r\n        captionServices,\r\n        experimentalUseMMS\r\n      } = options;\r\n      if (!src) {\r\n        throw new Error('A non-empty playlist URL or JSON manifest string is required');\r\n      }\r\n      let {\r\n        maxPlaylistRetries\r\n      } = options;\r\n      if (maxPlaylistRetries === null || typeof maxPlaylistRetries === 'undefined') {\r\n        maxPlaylistRetries = Infinity;\r\n      }\r\n      Vhs$1 = externVhs;\r\n      this.bufferBasedABR = Boolean(bufferBasedABR);\r\n      this.leastPixelDiffSelector = Boolean(leastPixelDiffSelector);\r\n      this.withCredentials = withCredentials;\r\n      this.tech_ = tech;\r\n      this.vhs_ = tech.vhs;\r\n      this.player_ = options.player_;\r\n      this.sourceType_ = sourceType;\r\n      this.useCueTags_ = useCueTags;\r\n      this.playlistExclusionDuration = playlistExclusionDuration;\r\n      this.maxPlaylistRetries = maxPlaylistRetries;\r\n      this.enableLowInitialPlaylist = enableLowInitialPlaylist;\r\n      this.usingManagedMediaSource_ = false;\r\n      if (this.useCueTags_) {\r\n        this.cueTagsTrack_ = this.tech_.addTextTrack('metadata', 'ad-cues');\r\n        this.cueTagsTrack_.inBandMetadataTrackDispatchType = '';\r\n      }\r\n      this.requestOptions_ = {\r\n        withCredentials,\r\n        maxPlaylistRetries,\r\n        timeout: null\r\n      };\r\n      this.on('error', this.pauseLoading);\r\n      this.mediaTypes_ = createMediaTypes();\r\n      if (experimentalUseMMS && window.ManagedMediaSource) {\r\n        // Airplay source not yet implemented. Remote playback must be disabled.\r\n        this.tech_.el_.disableRemotePlayback = true;\r\n        this.mediaSource = new window.ManagedMediaSource();\r\n        this.usingManagedMediaSource_ = true;\r\n        videojs.log('Using ManagedMediaSource');\r\n      } else if (window.MediaSource) {\r\n        this.mediaSource = new window.MediaSource();\r\n      }\r\n      this.handleDurationChange_ = this.handleDurationChange_.bind(this);\r\n      this.handleSourceOpen_ = this.handleSourceOpen_.bind(this);\r\n      this.handleSourceEnded_ = this.handleSourceEnded_.bind(this);\r\n      this.load = this.load.bind(this);\r\n      this.pause = this.pause.bind(this);\r\n      this.mediaSource.addEventListener('durationchange', this.handleDurationChange_); // load the media source into the player\r\n\r\n      this.mediaSource.addEventListener('sourceopen', this.handleSourceOpen_);\r\n      this.mediaSource.addEventListener('sourceended', this.handleSourceEnded_);\r\n      this.mediaSource.addEventListener('startstreaming', this.load);\r\n      this.mediaSource.addEventListener('endstreaming', this.pause); // we don't have to handle sourceclose since dispose will handle termination of\r\n      // everything, and the MediaSource should not be detached without a proper disposal\r\n\r\n      this.seekable_ = createTimeRanges();\r\n      this.hasPlayed_ = false;\r\n      this.syncController_ = new SyncController(options);\r\n      this.segmentMetadataTrack_ = tech.addRemoteTextTrack({\r\n        kind: 'metadata',\r\n        label: 'segment-metadata'\r\n      }, false).track;\r\n      this.decrypter_ = new Decrypter();\r\n      this.sourceUpdater_ = new SourceUpdater(this.mediaSource);\r\n      this.inbandTextTracks_ = {};\r\n      this.timelineChangeController_ = new TimelineChangeController();\r\n      this.keyStatusMap_ = new Map();\r\n      const segmentLoaderSettings = {\r\n        vhs: this.vhs_,\r\n        parse708captions: options.parse708captions,\r\n        useDtsForTimestampOffset: options.useDtsForTimestampOffset,\r\n        captionServices,\r\n        mediaSource: this.mediaSource,\r\n        currentTime: this.tech_.currentTime.bind(this.tech_),\r\n        seekable: () => this.seekable(),\r\n        seeking: () => this.tech_.seeking(),\r\n        duration: () => this.duration(),\r\n        hasPlayed: () => this.hasPlayed_,\r\n        goalBufferLength: () => this.goalBufferLength(),\r\n        bandwidth,\r\n        syncController: this.syncController_,\r\n        decrypter: this.decrypter_,\r\n        sourceType: this.sourceType_,\r\n        inbandTextTracks: this.inbandTextTracks_,\r\n        cacheEncryptionKeys,\r\n        sourceUpdater: this.sourceUpdater_,\r\n        timelineChangeController: this.timelineChangeController_,\r\n        exactManifestTimings: options.exactManifestTimings,\r\n        addMetadataToTextTrack: this.addMetadataToTextTrack.bind(this)\r\n      }; // The source type check not only determines whether a special DASH playlist loader\r\n      // should be used, but also covers the case where the provided src is a vhs-json\r\n      // manifest object (instead of a URL). In the case of vhs-json, the default\r\n      // PlaylistLoader should be used.\r\n\r\n      this.mainPlaylistLoader_ = this.sourceType_ === 'dash' ? new DashPlaylistLoader(src, this.vhs_, merge(this.requestOptions_, {\r\n        addMetadataToTextTrack: this.addMetadataToTextTrack.bind(this)\r\n      })) : new PlaylistLoader(src, this.vhs_, merge(this.requestOptions_, {\r\n        addDateRangesToTextTrack: this.addDateRangesToTextTrack_.bind(this)\r\n      }));\r\n      this.setupMainPlaylistLoaderListeners_(); // setup segment loaders\r\n      // combined audio/video or just video when alternate audio track is selected\r\n\r\n      this.mainSegmentLoader_ = new SegmentLoader(merge(segmentLoaderSettings, {\r\n        segmentMetadataTrack: this.segmentMetadataTrack_,\r\n        loaderType: 'main'\r\n      }), options); // alternate audio track\r\n\r\n      this.audioSegmentLoader_ = new SegmentLoader(merge(segmentLoaderSettings, {\r\n        loaderType: 'audio'\r\n      }), options);\r\n      this.subtitleSegmentLoader_ = new VTTSegmentLoader(merge(segmentLoaderSettings, {\r\n        loaderType: 'vtt',\r\n        featuresNativeTextTracks: this.tech_.featuresNativeTextTracks,\r\n        loadVttJs: () => new Promise((resolve, reject) => {\r\n          function onLoad() {\r\n            tech.off('vttjserror', onError);\r\n            resolve();\r\n          }\r\n          function onError() {\r\n            tech.off('vttjsloaded', onLoad);\r\n            reject();\r\n          }\r\n          tech.one('vttjsloaded', onLoad);\r\n          tech.one('vttjserror', onError); // safe to call multiple times, script will be loaded only once:\r\n\r\n          tech.addWebVttScript_();\r\n        })\r\n      }), options);\r\n      const getBandwidth = () => {\r\n        return this.mainSegmentLoader_.bandwidth;\r\n      };\r\n      this.contentSteeringController_ = new ContentSteeringController(this.vhs_.xhr, getBandwidth);\r\n      this.setupSegmentLoaderListeners_();\r\n      if (this.bufferBasedABR) {\r\n        this.mainPlaylistLoader_.one('loadedplaylist', () => this.startABRTimer_());\r\n        this.tech_.on('pause', () => this.stopABRTimer_());\r\n        this.tech_.on('play', () => this.startABRTimer_());\r\n      } // Create SegmentLoader stat-getters\r\n      // mediaRequests_\r\n      // mediaRequestsAborted_\r\n      // mediaRequestsTimedout_\r\n      // mediaRequestsErrored_\r\n      // mediaTransferDuration_\r\n      // mediaBytesTransferred_\r\n      // mediaAppends_\r\n\r\n      loaderStats.forEach(stat => {\r\n        this[stat + '_'] = sumLoaderStat.bind(this, stat);\r\n      });\r\n      this.logger_ = logger('pc');\r\n      this.triggeredFmp4Usage = false;\r\n      if (this.tech_.preload() === 'none') {\r\n        this.loadOnPlay_ = () => {\r\n          this.loadOnPlay_ = null;\r\n          this.mainPlaylistLoader_.load();\r\n        };\r\n        this.tech_.one('play', this.loadOnPlay_);\r\n      } else {\r\n        this.mainPlaylistLoader_.load();\r\n      }\r\n      this.timeToLoadedData__ = -1;\r\n      this.mainAppendsToLoadedData__ = -1;\r\n      this.audioAppendsToLoadedData__ = -1;\r\n      const event = this.tech_.preload() === 'none' ? 'play' : 'loadstart'; // start the first frame timer on loadstart or play (for preload none)\r\n\r\n      this.tech_.one(event, () => {\r\n        const timeToLoadedDataStart = Date.now();\r\n        this.tech_.one('loadeddata', () => {\r\n          this.timeToLoadedData__ = Date.now() - timeToLoadedDataStart;\r\n          this.mainAppendsToLoadedData__ = this.mainSegmentLoader_.mediaAppends;\r\n          this.audioAppendsToLoadedData__ = this.audioSegmentLoader_.mediaAppends;\r\n        });\r\n      });\r\n    }\r\n    mainAppendsToLoadedData_() {\r\n      return this.mainAppendsToLoadedData__;\r\n    }\r\n    audioAppendsToLoadedData_() {\r\n      return this.audioAppendsToLoadedData__;\r\n    }\r\n    appendsToLoadedData_() {\r\n      const main = this.mainAppendsToLoadedData_();\r\n      const audio = this.audioAppendsToLoadedData_();\r\n      if (main === -1 || audio === -1) {\r\n        return -1;\r\n      }\r\n      return main + audio;\r\n    }\r\n    timeToLoadedData_() {\r\n      return this.timeToLoadedData__;\r\n    }\r\n    /**\r\n     * Run selectPlaylist and switch to the new playlist if we should\r\n     *\r\n     * @param {string} [reason=abr] a reason for why the ABR check is made\r\n     * @private\r\n     */\r\n\r\n    checkABR_(reason = 'abr') {\r\n      const nextPlaylist = this.selectPlaylist();\r\n      if (nextPlaylist && this.shouldSwitchToMedia_(nextPlaylist)) {\r\n        this.switchMedia_(nextPlaylist, reason);\r\n      }\r\n    }\r\n    switchMedia_(playlist, cause, delay) {\r\n      const oldMedia = this.media();\r\n      const oldId = oldMedia && (oldMedia.id || oldMedia.uri);\r\n      const newId = playlist && (playlist.id || playlist.uri);\r\n      if (oldId && oldId !== newId) {\r\n        this.logger_(`switch media ${oldId} -> ${newId} from ${cause}`);\r\n        const metadata = {\r\n          renditionInfo: {\r\n            id: newId,\r\n            bandwidth: playlist.attributes.BANDWIDTH,\r\n            resolution: playlist.attributes.RESOLUTION,\r\n            codecs: playlist.attributes.CODECS\r\n          },\r\n          cause\r\n        };\r\n        this.trigger({\r\n          type: 'renditionselected',\r\n          metadata\r\n        });\r\n        this.tech_.trigger({\r\n          type: 'usage',\r\n          name: `vhs-rendition-change-${cause}`\r\n        });\r\n      }\r\n      this.mainPlaylistLoader_.media(playlist, delay);\r\n    }\r\n    /**\r\n     * A function that ensures we switch our playlists inside of `mediaTypes`\r\n     * to match the current `serviceLocation` provided by the contentSteering controller.\r\n     * We want to check media types of `AUDIO`, `SUBTITLES`, and `CLOSED-CAPTIONS`.\r\n     *\r\n     * This should only be called on a DASH playback scenario while using content steering.\r\n     * This is necessary due to differences in how media in HLS manifests are generally tied to\r\n     * a video playlist, where in DASH that is not always the case.\r\n     */\r\n\r\n    switchMediaForDASHContentSteering_() {\r\n      ['AUDIO', 'SUBTITLES', 'CLOSED-CAPTIONS'].forEach(type => {\r\n        const mediaType = this.mediaTypes_[type];\r\n        const activeGroup = mediaType ? mediaType.activeGroup() : null;\r\n        const pathway = this.contentSteeringController_.getPathway();\r\n        if (activeGroup && pathway) {\r\n          // activeGroup can be an array or a single group\r\n          const mediaPlaylists = activeGroup.length ? activeGroup[0].playlists : activeGroup.playlists;\r\n          const dashMediaPlaylists = mediaPlaylists.filter(p => p.attributes.serviceLocation === pathway); // Switch the current active playlist to the correct CDN\r\n\r\n          if (dashMediaPlaylists.length) {\r\n            this.mediaTypes_[type].activePlaylistLoader.media(dashMediaPlaylists[0]);\r\n          }\r\n        }\r\n      });\r\n    }\r\n    /**\r\n     * Start a timer that periodically calls checkABR_\r\n     *\r\n     * @private\r\n     */\r\n\r\n    startABRTimer_() {\r\n      this.stopABRTimer_();\r\n      this.abrTimer_ = window.setInterval(() => this.checkABR_(), 250);\r\n    }\r\n    /**\r\n     * Stop the timer that periodically calls checkABR_\r\n     *\r\n     * @private\r\n     */\r\n\r\n    stopABRTimer_() {\r\n      // if we're scrubbing, we don't need to pause.\r\n      // This getter will be added to Video.js in version 7.11.\r\n      if (this.tech_.scrubbing && this.tech_.scrubbing()) {\r\n        return;\r\n      }\r\n      window.clearInterval(this.abrTimer_);\r\n      this.abrTimer_ = null;\r\n    }\r\n    /**\r\n     * Get a list of playlists for the currently selected audio playlist\r\n     *\r\n     * @return {Array} the array of audio playlists\r\n     */\r\n\r\n    getAudioTrackPlaylists_() {\r\n      const main = this.main();\r\n      const defaultPlaylists = main && main.playlists || []; // if we don't have any audio groups then we can only\r\n      // assume that the audio tracks are contained in main\r\n      // playlist array, use that or an empty array.\r\n\r\n      if (!main || !main.mediaGroups || !main.mediaGroups.AUDIO) {\r\n        return defaultPlaylists;\r\n      }\r\n      const AUDIO = main.mediaGroups.AUDIO;\r\n      const groupKeys = Object.keys(AUDIO);\r\n      let track; // get the current active track\r\n\r\n      if (Object.keys(this.mediaTypes_.AUDIO.groups).length) {\r\n        track = this.mediaTypes_.AUDIO.activeTrack(); // or get the default track from main if mediaTypes_ isn't setup yet\r\n      } else {\r\n        // default group is `main` or just the first group.\r\n        const defaultGroup = AUDIO.main || groupKeys.length && AUDIO[groupKeys[0]];\r\n        for (const label in defaultGroup) {\r\n          if (defaultGroup[label].default) {\r\n            track = {\r\n              label\r\n            };\r\n            break;\r\n          }\r\n        }\r\n      } // no active track no playlists.\r\n\r\n      if (!track) {\r\n        return defaultPlaylists;\r\n      }\r\n      const playlists = []; // get all of the playlists that are possible for the\r\n      // active track.\r\n\r\n      for (const group in AUDIO) {\r\n        if (AUDIO[group][track.label]) {\r\n          const properties = AUDIO[group][track.label];\r\n          if (properties.playlists && properties.playlists.length) {\r\n            playlists.push.apply(playlists, properties.playlists);\r\n          } else if (properties.uri) {\r\n            playlists.push(properties);\r\n          } else if (main.playlists.length) {\r\n            // if an audio group does not have a uri\r\n            // see if we have main playlists that use it as a group.\r\n            // if we do then add those to the playlists list.\r\n            for (let i = 0; i < main.playlists.length; i++) {\r\n              const playlist = main.playlists[i];\r\n              if (playlist.attributes && playlist.attributes.AUDIO && playlist.attributes.AUDIO === group) {\r\n                playlists.push(playlist);\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n      if (!playlists.length) {\r\n        return defaultPlaylists;\r\n      }\r\n      return playlists;\r\n    }\r\n    /**\r\n     * Register event handlers on the main playlist loader. A helper\r\n     * function for construction time.\r\n     *\r\n     * @private\r\n     */\r\n\r\n    setupMainPlaylistLoaderListeners_() {\r\n      this.mainPlaylistLoader_.on('loadedmetadata', () => {\r\n        const media = this.mainPlaylistLoader_.media();\r\n        const requestTimeout = media.targetDuration * 1.5 * 1000; // If we don't have any more available playlists, we don't want to\r\n        // timeout the request.\r\n\r\n        if (isLowestEnabledRendition(this.mainPlaylistLoader_.main, this.mainPlaylistLoader_.media())) {\r\n          this.requestOptions_.timeout = 0;\r\n        } else {\r\n          this.requestOptions_.timeout = requestTimeout;\r\n        } // if this isn't a live video and preload permits, start\r\n        // downloading segments\r\n\r\n        if (media.endList && this.tech_.preload() !== 'none') {\r\n          this.mainSegmentLoader_.playlist(media, this.requestOptions_);\r\n          this.mainSegmentLoader_.load();\r\n        }\r\n        setupMediaGroups({\r\n          sourceType: this.sourceType_,\r\n          segmentLoaders: {\r\n            AUDIO: this.audioSegmentLoader_,\r\n            SUBTITLES: this.subtitleSegmentLoader_,\r\n            main: this.mainSegmentLoader_\r\n          },\r\n          tech: this.tech_,\r\n          requestOptions: this.requestOptions_,\r\n          mainPlaylistLoader: this.mainPlaylistLoader_,\r\n          vhs: this.vhs_,\r\n          main: this.main(),\r\n          mediaTypes: this.mediaTypes_,\r\n          excludePlaylist: this.excludePlaylist.bind(this)\r\n        });\r\n        this.triggerPresenceUsage_(this.main(), media);\r\n        this.setupFirstPlay();\r\n        if (!this.mediaTypes_.AUDIO.activePlaylistLoader || this.mediaTypes_.AUDIO.activePlaylistLoader.media()) {\r\n          this.trigger('selectedinitialmedia');\r\n        } else {\r\n          // We must wait for the active audio playlist loader to\r\n          // finish setting up before triggering this event so the\r\n          // representations API and EME setup is correct\r\n          this.mediaTypes_.AUDIO.activePlaylistLoader.one('loadedmetadata', () => {\r\n            this.trigger('selectedinitialmedia');\r\n          });\r\n        }\r\n      });\r\n      this.mainPlaylistLoader_.on('loadedplaylist', () => {\r\n        if (this.loadOnPlay_) {\r\n          this.tech_.off('play', this.loadOnPlay_);\r\n        }\r\n        let updatedPlaylist = this.mainPlaylistLoader_.media();\r\n        if (!updatedPlaylist) {\r\n          // Add content steering listeners on first load and init.\r\n          this.attachContentSteeringListeners_();\r\n          this.initContentSteeringController_(); // exclude any variants that are not supported by the browser before selecting\r\n          // an initial media as the playlist selectors do not consider browser support\r\n\r\n          this.excludeUnsupportedVariants_();\r\n          let selectedMedia;\r\n          if (this.enableLowInitialPlaylist) {\r\n            selectedMedia = this.selectInitialPlaylist();\r\n          }\r\n          if (!selectedMedia) {\r\n            selectedMedia = this.selectPlaylist();\r\n          }\r\n          if (!selectedMedia || !this.shouldSwitchToMedia_(selectedMedia)) {\r\n            return;\r\n          }\r\n          this.initialMedia_ = selectedMedia;\r\n          this.switchMedia_(this.initialMedia_, 'initial'); // Under the standard case where a source URL is provided, loadedplaylist will\r\n          // fire again since the playlist will be requested. In the case of vhs-json\r\n          // (where the manifest object is provided as the source), when the media\r\n          // playlist's `segments` list is already available, a media playlist won't be\r\n          // requested, and loadedplaylist won't fire again, so the playlist handler must be\r\n          // called on its own here.\r\n\r\n          const haveJsonSource = this.sourceType_ === 'vhs-json' && this.initialMedia_.segments;\r\n          if (!haveJsonSource) {\r\n            return;\r\n          }\r\n          updatedPlaylist = this.initialMedia_;\r\n        }\r\n        this.handleUpdatedMediaPlaylist(updatedPlaylist);\r\n      });\r\n      this.mainPlaylistLoader_.on('error', () => {\r\n        const error = this.mainPlaylistLoader_.error;\r\n        this.excludePlaylist({\r\n          playlistToExclude: error.playlist,\r\n          error\r\n        });\r\n      });\r\n      this.mainPlaylistLoader_.on('mediachanging', () => {\r\n        this.mainSegmentLoader_.abort();\r\n        this.mainSegmentLoader_.pause();\r\n      });\r\n      this.mainPlaylistLoader_.on('mediachange', () => {\r\n        const media = this.mainPlaylistLoader_.media();\r\n        const requestTimeout = media.targetDuration * 1.5 * 1000; // If we don't have any more available playlists, we don't want to\r\n        // timeout the request.\r\n\r\n        if (isLowestEnabledRendition(this.mainPlaylistLoader_.main, this.mainPlaylistLoader_.media())) {\r\n          this.requestOptions_.timeout = 0;\r\n        } else {\r\n          this.requestOptions_.timeout = requestTimeout;\r\n        }\r\n        if (this.sourceType_ === 'dash') {\r\n          // we don't want to re-request the same hls playlist right after it was changed\r\n          // Initially it was implemented as workaround to restart playlist loader for live\r\n          // when playlist loader is paused because of playlist exclusions:\r\n          // see: https://github.com/videojs/http-streaming/pull/1339\r\n          // but this introduces duplicate \"loadedplaylist\" event.\r\n          // Ideally we want to re-think playlist loader life-cycle events,\r\n          // but simply checking \"paused\" state should help a lot\r\n          if (this.mainPlaylistLoader_.isPaused) {\r\n            this.mainPlaylistLoader_.load();\r\n          }\r\n        } // TODO: Create a new event on the PlaylistLoader that signals\r\n        // that the segments have changed in some way and use that to\r\n        // update the SegmentLoader instead of doing it twice here and\r\n        // on `loadedplaylist`\r\n\r\n        this.mainSegmentLoader_.pause();\r\n        this.mainSegmentLoader_.playlist(media, this.requestOptions_);\r\n        if (this.waitingForFastQualityPlaylistReceived_) {\r\n          this.runFastQualitySwitch_();\r\n        } else {\r\n          this.mainSegmentLoader_.load();\r\n        }\r\n        this.tech_.trigger({\r\n          type: 'mediachange',\r\n          bubbles: true\r\n        });\r\n      });\r\n      this.mainPlaylistLoader_.on('playlistunchanged', () => {\r\n        const updatedPlaylist = this.mainPlaylistLoader_.media(); // ignore unchanged playlists that have already been\r\n        // excluded for not-changing. We likely just have a really slowly updating\r\n        // playlist.\r\n\r\n        if (updatedPlaylist.lastExcludeReason_ === 'playlist-unchanged') {\r\n          return;\r\n        }\r\n        const playlistOutdated = this.stuckAtPlaylistEnd_(updatedPlaylist);\r\n        if (playlistOutdated) {\r\n          // Playlist has stopped updating and we're stuck at its end. Try to\r\n          // exclude it and switch to another playlist in the hope that that\r\n          // one is updating (and give the player a chance to re-adjust to the\r\n          // safe live point).\r\n          this.excludePlaylist({\r\n            error: {\r\n              message: 'Playlist no longer updating.',\r\n              reason: 'playlist-unchanged'\r\n            }\r\n          }); // useful for monitoring QoS\r\n\r\n          this.tech_.trigger('playliststuck');\r\n        }\r\n      });\r\n      this.mainPlaylistLoader_.on('renditiondisabled', () => {\r\n        this.tech_.trigger({\r\n          type: 'usage',\r\n          name: 'vhs-rendition-disabled'\r\n        });\r\n      });\r\n      this.mainPlaylistLoader_.on('renditionenabled', () => {\r\n        this.tech_.trigger({\r\n          type: 'usage',\r\n          name: 'vhs-rendition-enabled'\r\n        });\r\n      });\r\n      const playlistLoaderEvents = ['manifestrequeststart', 'manifestrequestcomplete', 'manifestparsestart', 'manifestparsecomplete', 'playlistrequeststart', 'playlistrequestcomplete', 'playlistparsestart', 'playlistparsecomplete', 'renditiondisabled', 'renditionenabled'];\r\n      playlistLoaderEvents.forEach(eventName => {\r\n        this.mainPlaylistLoader_.on(eventName, metadata => {\r\n          // trigger directly on the player to ensure early events are fired.\r\n          this.player_.trigger(_extends$1({}, metadata));\r\n        });\r\n      });\r\n    }\r\n    /**\r\n     * Given an updated media playlist (whether it was loaded for the first time, or\r\n     * refreshed for live playlists), update any relevant properties and state to reflect\r\n     * changes in the media that should be accounted for (e.g., cues and duration).\r\n     *\r\n     * @param {Object} updatedPlaylist the updated media playlist object\r\n     *\r\n     * @private\r\n     */\r\n\r\n    handleUpdatedMediaPlaylist(updatedPlaylist) {\r\n      if (this.useCueTags_) {\r\n        this.updateAdCues_(updatedPlaylist);\r\n      } // TODO: Create a new event on the PlaylistLoader that signals\r\n      // that the segments have changed in some way and use that to\r\n      // update the SegmentLoader instead of doing it twice here and\r\n      // on `mediachange`\r\n\r\n      this.mainSegmentLoader_.pause();\r\n      this.mainSegmentLoader_.playlist(updatedPlaylist, this.requestOptions_);\r\n      if (this.waitingForFastQualityPlaylistReceived_) {\r\n        this.runFastQualitySwitch_();\r\n      }\r\n      this.updateDuration(!updatedPlaylist.endList); // If the player isn't paused, ensure that the segment loader is running,\r\n      // as it is possible that it was temporarily stopped while waiting for\r\n      // a playlist (e.g., in case the playlist errored and we re-requested it).\r\n\r\n      if (!this.tech_.paused()) {\r\n        this.mainSegmentLoader_.load();\r\n        if (this.audioSegmentLoader_) {\r\n          this.audioSegmentLoader_.load();\r\n        }\r\n      }\r\n    }\r\n    /**\r\n     * A helper function for triggerring presence usage events once per source\r\n     *\r\n     * @private\r\n     */\r\n\r\n    triggerPresenceUsage_(main, media) {\r\n      const mediaGroups = main.mediaGroups || {};\r\n      let defaultDemuxed = true;\r\n      const audioGroupKeys = Object.keys(mediaGroups.AUDIO);\r\n      for (const mediaGroup in mediaGroups.AUDIO) {\r\n        for (const label in mediaGroups.AUDIO[mediaGroup]) {\r\n          const properties = mediaGroups.AUDIO[mediaGroup][label];\r\n          if (!properties.uri) {\r\n            defaultDemuxed = false;\r\n          }\r\n        }\r\n      }\r\n      if (defaultDemuxed) {\r\n        this.tech_.trigger({\r\n          type: 'usage',\r\n          name: 'vhs-demuxed'\r\n        });\r\n      }\r\n      if (Object.keys(mediaGroups.SUBTITLES).length) {\r\n        this.tech_.trigger({\r\n          type: 'usage',\r\n          name: 'vhs-webvtt'\r\n        });\r\n      }\r\n      if (Vhs$1.Playlist.isAes(media)) {\r\n        this.tech_.trigger({\r\n          type: 'usage',\r\n          name: 'vhs-aes'\r\n        });\r\n      }\r\n      if (audioGroupKeys.length && Object.keys(mediaGroups.AUDIO[audioGroupKeys[0]]).length > 1) {\r\n        this.tech_.trigger({\r\n          type: 'usage',\r\n          name: 'vhs-alternate-audio'\r\n        });\r\n      }\r\n      if (this.useCueTags_) {\r\n        this.tech_.trigger({\r\n          type: 'usage',\r\n          name: 'vhs-playlist-cue-tags'\r\n        });\r\n      }\r\n    }\r\n    shouldSwitchToMedia_(nextPlaylist) {\r\n      const currentPlaylist = this.mainPlaylistLoader_.media() || this.mainPlaylistLoader_.pendingMedia_;\r\n      const currentTime = this.tech_.currentTime();\r\n      const bufferLowWaterLine = this.bufferLowWaterLine();\r\n      const bufferHighWaterLine = this.bufferHighWaterLine();\r\n      const buffered = this.tech_.buffered();\r\n      return shouldSwitchToMedia({\r\n        buffered,\r\n        currentTime,\r\n        currentPlaylist,\r\n        nextPlaylist,\r\n        bufferLowWaterLine,\r\n        bufferHighWaterLine,\r\n        duration: this.duration(),\r\n        bufferBasedABR: this.bufferBasedABR,\r\n        log: this.logger_\r\n      });\r\n    }\r\n    /**\r\n     * Register event handlers on the segment loaders. A helper function\r\n     * for construction time.\r\n     *\r\n     * @private\r\n     */\r\n\r\n    setupSegmentLoaderListeners_() {\r\n      this.mainSegmentLoader_.on('bandwidthupdate', () => {\r\n        // Whether or not buffer based ABR or another ABR is used, on a bandwidth change it's\r\n        // useful to check to see if a rendition switch should be made.\r\n        this.checkABR_('bandwidthupdate');\r\n        this.tech_.trigger('bandwidthupdate');\r\n      });\r\n      this.mainSegmentLoader_.on('timeout', () => {\r\n        if (this.bufferBasedABR) {\r\n          // If a rendition change is needed, then it would've be done on `bandwidthupdate`.\r\n          // Here the only consideration is that for buffer based ABR there's no guarantee\r\n          // of an immediate switch (since the bandwidth is averaged with a timeout\r\n          // bandwidth value of 1), so force a load on the segment loader to keep it going.\r\n          this.mainSegmentLoader_.load();\r\n        }\r\n      }); // `progress` events are not reliable enough of a bandwidth measure to trigger buffer\r\n      // based ABR.\r\n\r\n      if (!this.bufferBasedABR) {\r\n        this.mainSegmentLoader_.on('progress', () => {\r\n          this.trigger('progress');\r\n        });\r\n      }\r\n      this.mainSegmentLoader_.on('error', () => {\r\n        const error = this.mainSegmentLoader_.error();\r\n        this.excludePlaylist({\r\n          playlistToExclude: error.playlist,\r\n          error\r\n        });\r\n      });\r\n      this.mainSegmentLoader_.on('appenderror', () => {\r\n        this.error = this.mainSegmentLoader_.error_;\r\n        this.trigger('error');\r\n      });\r\n      this.mainSegmentLoader_.on('syncinfoupdate', () => {\r\n        this.onSyncInfoUpdate_();\r\n      });\r\n      this.mainSegmentLoader_.on('timestampoffset', () => {\r\n        this.tech_.trigger({\r\n          type: 'usage',\r\n          name: 'vhs-timestamp-offset'\r\n        });\r\n      });\r\n      this.audioSegmentLoader_.on('syncinfoupdate', () => {\r\n        this.onSyncInfoUpdate_();\r\n      });\r\n      this.audioSegmentLoader_.on('appenderror', () => {\r\n        this.error = this.audioSegmentLoader_.error_;\r\n        this.trigger('error');\r\n      });\r\n      this.mainSegmentLoader_.on('ended', () => {\r\n        this.logger_('main segment loader ended');\r\n        this.onEndOfStream();\r\n      }); // There is the possibility of the video segment and the audio segment\r\n      // at a current time to be on different timelines. When this occurs, the player\r\n      // forwards playback to a point where these two segment types are back on the same\r\n      // timeline. This time will be just after the end of the audio segment that is on\r\n      // a previous timeline.\r\n\r\n      this.timelineChangeController_.on('audioTimelineBehind', () => {\r\n        const segmentInfo = this.audioSegmentLoader_.pendingSegment_;\r\n        if (!segmentInfo || !segmentInfo.segment || !segmentInfo.segment.syncInfo) {\r\n          return;\r\n        } // Update the current time to just after the faulty audio segment.\r\n        // This moves playback to a spot where both audio and video segments\r\n        // are on the same timeline.\r\n\r\n        const newTime = segmentInfo.segment.syncInfo.end + 0.01;\r\n        this.tech_.setCurrentTime(newTime);\r\n      });\r\n      this.timelineChangeController_.on('fixBadTimelineChange', () => {\r\n        // pause, reset-everything and load for all segment-loaders\r\n        this.logger_('Fix bad timeline change. Restarting al segment loaders...');\r\n        this.mainSegmentLoader_.pause();\r\n        this.mainSegmentLoader_.resetEverything();\r\n        if (this.mediaTypes_.AUDIO.activePlaylistLoader) {\r\n          this.audioSegmentLoader_.pause();\r\n          this.audioSegmentLoader_.resetEverything();\r\n        }\r\n        if (this.mediaTypes_.SUBTITLES.activePlaylistLoader) {\r\n          this.subtitleSegmentLoader_.pause();\r\n          this.subtitleSegmentLoader_.resetEverything();\r\n        } // start segment loader loading in case they are paused\r\n\r\n        this.load();\r\n      });\r\n      this.mainSegmentLoader_.on('earlyabort', event => {\r\n        // never try to early abort with the new ABR algorithm\r\n        if (this.bufferBasedABR) {\r\n          return;\r\n        }\r\n        this.delegateLoaders_('all', ['abort']);\r\n        this.excludePlaylist({\r\n          error: {\r\n            message: 'Aborted early because there isn\\'t enough bandwidth to complete ' + 'the request without rebuffering.'\r\n          },\r\n          playlistExclusionDuration: ABORT_EARLY_EXCLUSION_SECONDS\r\n        });\r\n      });\r\n      const updateCodecs = () => {\r\n        if (!this.sourceUpdater_.hasCreatedSourceBuffers()) {\r\n          return this.tryToCreateSourceBuffers_();\r\n        }\r\n        const codecs = this.getCodecsOrExclude_(); // no codecs means that the playlist was excluded\r\n\r\n        if (!codecs) {\r\n          return;\r\n        }\r\n        this.sourceUpdater_.addOrChangeSourceBuffers(codecs);\r\n      };\r\n      this.mainSegmentLoader_.on('trackinfo', updateCodecs);\r\n      this.audioSegmentLoader_.on('trackinfo', updateCodecs);\r\n      this.mainSegmentLoader_.on('fmp4', () => {\r\n        if (!this.triggeredFmp4Usage) {\r\n          this.tech_.trigger({\r\n            type: 'usage',\r\n            name: 'vhs-fmp4'\r\n          });\r\n          this.triggeredFmp4Usage = true;\r\n        }\r\n      });\r\n      this.audioSegmentLoader_.on('fmp4', () => {\r\n        if (!this.triggeredFmp4Usage) {\r\n          this.tech_.trigger({\r\n            type: 'usage',\r\n            name: 'vhs-fmp4'\r\n          });\r\n          this.triggeredFmp4Usage = true;\r\n        }\r\n      });\r\n      this.audioSegmentLoader_.on('ended', () => {\r\n        this.logger_('audioSegmentLoader ended');\r\n        this.onEndOfStream();\r\n      });\r\n      const segmentLoaderEvents = ['segmentselected', 'segmentloadstart', 'segmentloaded', 'segmentkeyloadstart', 'segmentkeyloadcomplete', 'segmentdecryptionstart', 'segmentdecryptioncomplete', 'segmenttransmuxingstart', 'segmenttransmuxingcomplete', 'segmenttransmuxingtrackinfoavailable', 'segmenttransmuxingtiminginfoavailable', 'segmentappendstart', 'appendsdone', 'bandwidthupdated', 'timelinechange', 'codecschange'];\r\n      segmentLoaderEvents.forEach(eventName => {\r\n        this.mainSegmentLoader_.on(eventName, metadata => {\r\n          this.player_.trigger(_extends$1({}, metadata));\r\n        });\r\n        this.audioSegmentLoader_.on(eventName, metadata => {\r\n          this.player_.trigger(_extends$1({}, metadata));\r\n        });\r\n        this.subtitleSegmentLoader_.on(eventName, metadata => {\r\n          this.player_.trigger(_extends$1({}, metadata));\r\n        });\r\n      });\r\n    }\r\n    mediaSecondsLoaded_() {\r\n      return Math.max(this.audioSegmentLoader_.mediaSecondsLoaded + this.mainSegmentLoader_.mediaSecondsLoaded);\r\n    }\r\n    /**\r\n     * Call load on our SegmentLoaders\r\n     */\r\n\r\n    load() {\r\n      this.mainSegmentLoader_.load();\r\n      if (this.mediaTypes_.AUDIO.activePlaylistLoader) {\r\n        this.audioSegmentLoader_.load();\r\n      }\r\n      if (this.mediaTypes_.SUBTITLES.activePlaylistLoader) {\r\n        this.subtitleSegmentLoader_.load();\r\n      }\r\n    }\r\n    /**\r\n     * Call pause on our SegmentLoaders\r\n     */\r\n\r\n    pause() {\r\n      this.mainSegmentLoader_.pause();\r\n      if (this.mediaTypes_.AUDIO.activePlaylistLoader) {\r\n        this.audioSegmentLoader_.pause();\r\n      }\r\n      if (this.mediaTypes_.SUBTITLES.activePlaylistLoader) {\r\n        this.subtitleSegmentLoader_.pause();\r\n      }\r\n    }\r\n    /**\r\n     * Re-tune playback quality level for the current player\r\n     * conditions. This method will perform destructive actions like removing\r\n     * already buffered content in order to readjust the currently active\r\n     * playlist quickly. This is good for manual quality changes\r\n     *\r\n     * @private\r\n     */\r\n\r\n    fastQualityChange_(media = this.selectPlaylist()) {\r\n      if (media && media === this.mainPlaylistLoader_.media()) {\r\n        this.logger_('skipping fastQualityChange because new media is same as old');\r\n        return;\r\n      }\r\n      this.switchMedia_(media, 'fast-quality'); // we would like to avoid race condition when we call fastQuality,\r\n      // reset everything and start loading segments from prev segments instead of new because new playlist is not received yet\r\n\r\n      this.waitingForFastQualityPlaylistReceived_ = true;\r\n    }\r\n    runFastQualitySwitch_() {\r\n      this.waitingForFastQualityPlaylistReceived_ = false;\r\n      this.mainSegmentLoader_.pause();\r\n      this.mainSegmentLoader_.resetEverything();\r\n      if (this.mediaTypes_.AUDIO.activePlaylistLoader) {\r\n        this.audioSegmentLoader_.pause();\r\n        this.audioSegmentLoader_.resetEverything();\r\n      }\r\n      if (this.mediaTypes_.SUBTITLES.activePlaylistLoader) {\r\n        this.subtitleSegmentLoader_.pause();\r\n        this.subtitleSegmentLoader_.resetEverything();\r\n      } // start segment loader loading in case they are paused\r\n\r\n      this.load();\r\n    }\r\n    /**\r\n     * Begin playback.\r\n     */\r\n\r\n    play() {\r\n      if (this.setupFirstPlay()) {\r\n        return;\r\n      }\r\n      if (this.tech_.ended()) {\r\n        this.tech_.setCurrentTime(0);\r\n      }\r\n      if (this.hasPlayed_) {\r\n        this.load();\r\n      }\r\n      const seekable = this.tech_.seekable(); // if the viewer has paused and we fell out of the live window,\r\n      // seek forward to the live point\r\n\r\n      if (this.tech_.duration() === Infinity) {\r\n        if (this.tech_.currentTime() < seekable.start(0)) {\r\n          return this.tech_.setCurrentTime(seekable.end(seekable.length - 1));\r\n        }\r\n      }\r\n    }\r\n    /**\r\n     * Seek to the latest media position if this is a live video and the\r\n     * player and video are loaded and initialized.\r\n     */\r\n\r\n    setupFirstPlay() {\r\n      const media = this.mainPlaylistLoader_.media(); // Check that everything is ready to begin buffering for the first call to play\r\n      //  If 1) there is no active media\r\n      //     2) the player is paused\r\n      //     3) the first play has already been setup\r\n      // then exit early\r\n\r\n      if (!media || this.tech_.paused() || this.hasPlayed_) {\r\n        return false;\r\n      } // when the video is a live stream and/or has a start time\r\n\r\n      if (!media.endList || media.start) {\r\n        const seekable = this.seekable();\r\n        if (!seekable.length) {\r\n          // without a seekable range, the player cannot seek to begin buffering at the\r\n          // live or start point\r\n          return false;\r\n        }\r\n        const seekableEnd = seekable.end(0);\r\n        let startPoint = seekableEnd;\r\n        if (media.start) {\r\n          const offset = media.start.timeOffset;\r\n          if (offset < 0) {\r\n            startPoint = Math.max(seekableEnd + offset, seekable.start(0));\r\n          } else {\r\n            startPoint = Math.min(seekableEnd, offset);\r\n          }\r\n        } // trigger firstplay to inform the source handler to ignore the next seek event\r\n\r\n        this.trigger('firstplay'); // seek to the live point\r\n\r\n        this.tech_.setCurrentTime(startPoint);\r\n      }\r\n      this.hasPlayed_ = true; // we can begin loading now that everything is ready\r\n\r\n      this.load();\r\n      return true;\r\n    }\r\n    /**\r\n     * handle the sourceopen event on the MediaSource\r\n     *\r\n     * @private\r\n     */\r\n\r\n    handleSourceOpen_() {\r\n      // Only attempt to create the source buffer if none already exist.\r\n      // handleSourceOpen is also called when we are \"re-opening\" a source buffer\r\n      // after `endOfStream` has been called (in response to a seek for instance)\r\n      this.tryToCreateSourceBuffers_(); // if autoplay is enabled, begin playback. This is duplicative of\r\n      // code in video.js but is required because play() must be invoked\r\n      // *after* the media source has opened.\r\n\r\n      if (this.tech_.autoplay()) {\r\n        const playPromise = this.tech_.play(); // Catch/silence error when a pause interrupts a play request\r\n        // on browsers which return a promise\r\n\r\n        if (typeof playPromise !== 'undefined' && typeof playPromise.then === 'function') {\r\n          playPromise.then(null, e => {});\r\n        }\r\n      }\r\n      this.trigger('sourceopen');\r\n    }\r\n    /**\r\n     * handle the sourceended event on the MediaSource\r\n     *\r\n     * @private\r\n     */\r\n\r\n    handleSourceEnded_() {\r\n      if (!this.inbandTextTracks_.metadataTrack_) {\r\n        return;\r\n      }\r\n      const cues = this.inbandTextTracks_.metadataTrack_.cues;\r\n      if (!cues || !cues.length) {\r\n        return;\r\n      }\r\n      const duration = this.duration();\r\n      cues[cues.length - 1].endTime = isNaN(duration) || Math.abs(duration) === Infinity ? Number.MAX_VALUE : duration;\r\n    }\r\n    /**\r\n     * handle the durationchange event on the MediaSource\r\n     *\r\n     * @private\r\n     */\r\n\r\n    handleDurationChange_() {\r\n      this.tech_.trigger('durationchange');\r\n    }\r\n    /**\r\n     * Calls endOfStream on the media source when all active stream types have called\r\n     * endOfStream\r\n     *\r\n     * @param {string} streamType\r\n     *        Stream type of the segment loader that called endOfStream\r\n     * @private\r\n     */\r\n\r\n    onEndOfStream() {\r\n      let isEndOfStream = this.mainSegmentLoader_.ended_;\r\n      if (this.mediaTypes_.AUDIO.activePlaylistLoader) {\r\n        const mainMediaInfo = this.mainSegmentLoader_.getCurrentMediaInfo_(); // if the audio playlist loader exists, then alternate audio is active\r\n\r\n        if (!mainMediaInfo || mainMediaInfo.hasVideo) {\r\n          // if we do not know if the main segment loader contains video yet or if we\r\n          // definitively know the main segment loader contains video, then we need to wait\r\n          // for both main and audio segment loaders to call endOfStream\r\n          isEndOfStream = isEndOfStream && this.audioSegmentLoader_.ended_;\r\n        } else {\r\n          // otherwise just rely on the audio loader\r\n          isEndOfStream = this.audioSegmentLoader_.ended_;\r\n        }\r\n      }\r\n      if (!isEndOfStream) {\r\n        return;\r\n      }\r\n      this.stopABRTimer_();\r\n      this.sourceUpdater_.endOfStream();\r\n    }\r\n    /**\r\n     * Check if a playlist has stopped being updated\r\n     *\r\n     * @param {Object} playlist the media playlist object\r\n     * @return {boolean} whether the playlist has stopped being updated or not\r\n     */\r\n\r\n    stuckAtPlaylistEnd_(playlist) {\r\n      const seekable = this.seekable();\r\n      if (!seekable.length) {\r\n        // playlist doesn't have enough information to determine whether we are stuck\r\n        return false;\r\n      }\r\n      const expired = this.syncController_.getExpiredTime(playlist, this.duration());\r\n      if (expired === null) {\r\n        return false;\r\n      } // does not use the safe live end to calculate playlist end, since we\r\n      // don't want to say we are stuck while there is still content\r\n\r\n      const absolutePlaylistEnd = Vhs$1.Playlist.playlistEnd(playlist, expired);\r\n      const currentTime = this.tech_.currentTime();\r\n      const buffered = this.tech_.buffered();\r\n      if (!buffered.length) {\r\n        // return true if the playhead reached the absolute end of the playlist\r\n        return absolutePlaylistEnd - currentTime <= SAFE_TIME_DELTA;\r\n      }\r\n      const bufferedEnd = buffered.end(buffered.length - 1); // return true if there is too little buffer left and buffer has reached absolute\r\n      // end of playlist\r\n\r\n      return bufferedEnd - currentTime <= SAFE_TIME_DELTA && absolutePlaylistEnd - bufferedEnd <= SAFE_TIME_DELTA;\r\n    }\r\n    /**\r\n     * Exclude a playlist for a set amount of time, making it unavailable for selection by\r\n     * the rendition selection algorithm, then force a new playlist (rendition) selection.\r\n     *\r\n     * @param {Object=} playlistToExclude\r\n     *                  the playlist to exclude, defaults to the currently selected playlist\r\n     * @param {Object=} error\r\n     *                  an optional error\r\n     * @param {number=} playlistExclusionDuration\r\n     *                  an optional number of seconds to exclude the playlist\r\n     */\r\n\r\n    excludePlaylist({\r\n      playlistToExclude = this.mainPlaylistLoader_.media(),\r\n      error = {},\r\n      playlistExclusionDuration\r\n    }) {\r\n      // If the `error` was generated by the playlist loader, it will contain\r\n      // the playlist we were trying to load (but failed) and that should be\r\n      // excluded instead of the currently selected playlist which is likely\r\n      // out-of-date in this scenario\r\n      playlistToExclude = playlistToExclude || this.mainPlaylistLoader_.media();\r\n      playlistExclusionDuration = playlistExclusionDuration || error.playlistExclusionDuration || this.playlistExclusionDuration; // If there is no current playlist, then an error occurred while we were\r\n      // trying to load the main OR while we were disposing of the tech\r\n\r\n      if (!playlistToExclude) {\r\n        this.error = error;\r\n        if (this.mediaSource.readyState !== 'open') {\r\n          this.trigger('error');\r\n        } else {\r\n          this.sourceUpdater_.endOfStream('network');\r\n        }\r\n        return;\r\n      }\r\n      playlistToExclude.playlistErrors_++;\r\n      const playlists = this.mainPlaylistLoader_.main.playlists;\r\n      const enabledPlaylists = playlists.filter(isEnabled);\r\n      const isFinalRendition = enabledPlaylists.length === 1 && enabledPlaylists[0] === playlistToExclude; // Don't exclude the only playlist unless it was excluded\r\n      // forever\r\n\r\n      if (playlists.length === 1 && playlistExclusionDuration !== Infinity) {\r\n        videojs.log.warn(`Problem encountered with playlist ${playlistToExclude.id}. ` + 'Trying again since it is the only playlist.');\r\n        this.tech_.trigger('retryplaylist'); // if this is a final rendition, we should delay\r\n\r\n        return this.mainPlaylistLoader_.load(isFinalRendition);\r\n      }\r\n      if (isFinalRendition) {\r\n        // If we're content steering, try other pathways.\r\n        if (this.main().contentSteering) {\r\n          const pathway = this.pathwayAttribute_(playlistToExclude); // Ignore at least 1 steering manifest refresh.\r\n\r\n          const reIncludeDelay = this.contentSteeringController_.steeringManifest.ttl * 1000;\r\n          this.contentSteeringController_.excludePathway(pathway);\r\n          this.excludeThenChangePathway_();\r\n          setTimeout(() => {\r\n            this.contentSteeringController_.addAvailablePathway(pathway);\r\n          }, reIncludeDelay);\r\n          return;\r\n        } // Since we're on the final non-excluded playlist, and we're about to exclude\r\n        // it, instead of erring the player or retrying this playlist, clear out the current\r\n        // exclusion list. This allows other playlists to be attempted in case any have been\r\n        // fixed.\r\n\r\n        let reincluded = false;\r\n        playlists.forEach(playlist => {\r\n          // skip current playlist which is about to be excluded\r\n          if (playlist === playlistToExclude) {\r\n            return;\r\n          }\r\n          const excludeUntil = playlist.excludeUntil; // a playlist cannot be reincluded if it wasn't excluded to begin with.\r\n\r\n          if (typeof excludeUntil !== 'undefined' && excludeUntil !== Infinity) {\r\n            reincluded = true;\r\n            delete playlist.excludeUntil;\r\n          }\r\n        });\r\n        if (reincluded) {\r\n          videojs.log.warn('Removing other playlists from the exclusion list because the last ' + 'rendition is about to be excluded.'); // Technically we are retrying a playlist, in that we are simply retrying a previous\r\n          // playlist. This is needed for users relying on the retryplaylist event to catch a\r\n          // case where the player might be stuck and looping through \"dead\" playlists.\r\n\r\n          this.tech_.trigger('retryplaylist');\r\n        }\r\n      } // Exclude this playlist\r\n\r\n      let excludeUntil;\r\n      if (playlistToExclude.playlistErrors_ > this.maxPlaylistRetries) {\r\n        excludeUntil = Infinity;\r\n      } else {\r\n        excludeUntil = Date.now() + playlistExclusionDuration * 1000;\r\n      }\r\n      playlistToExclude.excludeUntil = excludeUntil;\r\n      if (error.reason) {\r\n        playlistToExclude.lastExcludeReason_ = error.reason;\r\n      }\r\n      this.tech_.trigger('excludeplaylist');\r\n      this.tech_.trigger({\r\n        type: 'usage',\r\n        name: 'vhs-rendition-excluded'\r\n      }); // TODO: only load a new playlist if we're excluding the current playlist\r\n      // If this function was called with a playlist that's not the current active playlist\r\n      // (e.g., media().id !== playlistToExclude.id),\r\n      // then a new playlist should not be selected and loaded, as there's nothing wrong with the current playlist.\r\n\r\n      const nextPlaylist = this.selectPlaylist();\r\n      if (!nextPlaylist) {\r\n        this.error = 'Playback cannot continue. No available working or supported playlists.';\r\n        this.trigger('error');\r\n        return;\r\n      }\r\n      const logFn = error.internal ? this.logger_ : videojs.log.warn;\r\n      const errorMessage = error.message ? ' ' + error.message : '';\r\n      logFn(`${error.internal ? 'Internal problem' : 'Problem'} encountered with playlist ${playlistToExclude.id}.` + `${errorMessage} Switching to playlist ${nextPlaylist.id}.`); // if audio group changed reset audio loaders\r\n\r\n      if (nextPlaylist.attributes.AUDIO !== playlistToExclude.attributes.AUDIO) {\r\n        this.delegateLoaders_('audio', ['abort', 'pause']);\r\n      } // if subtitle group changed reset subtitle loaders\r\n\r\n      if (nextPlaylist.attributes.SUBTITLES !== playlistToExclude.attributes.SUBTITLES) {\r\n        this.delegateLoaders_('subtitle', ['abort', 'pause']);\r\n      }\r\n      this.delegateLoaders_('main', ['abort', 'pause']);\r\n      const delayDuration = nextPlaylist.targetDuration / 2 * 1000 || 5 * 1000;\r\n      const shouldDelay = typeof nextPlaylist.lastRequest === 'number' && Date.now() - nextPlaylist.lastRequest <= delayDuration; // delay if it's a final rendition or if the last refresh is sooner than half targetDuration\r\n\r\n      return this.switchMedia_(nextPlaylist, 'exclude', isFinalRendition || shouldDelay);\r\n    }\r\n    /**\r\n     * Pause all segment/playlist loaders\r\n     */\r\n\r\n    pauseLoading() {\r\n      this.delegateLoaders_('all', ['abort', 'pause']);\r\n      this.stopABRTimer_();\r\n    }\r\n    /**\r\n     * Call a set of functions in order on playlist loaders, segment loaders,\r\n     * or both types of loaders.\r\n     *\r\n     * @param {string} filter\r\n     *        Filter loaders that should call fnNames using a string. Can be:\r\n     *        * all - run on all loaders\r\n     *        * audio - run on all audio loaders\r\n     *        * subtitle - run on all subtitle loaders\r\n     *        * main - run on the main loaders\r\n     *\r\n     * @param {Array|string} fnNames\r\n     *        A string or array of function names to call.\r\n     */\r\n\r\n    delegateLoaders_(filter, fnNames) {\r\n      const loaders = [];\r\n      const dontFilterPlaylist = filter === 'all';\r\n      if (dontFilterPlaylist || filter === 'main') {\r\n        loaders.push(this.mainPlaylistLoader_);\r\n      }\r\n      const mediaTypes = [];\r\n      if (dontFilterPlaylist || filter === 'audio') {\r\n        mediaTypes.push('AUDIO');\r\n      }\r\n      if (dontFilterPlaylist || filter === 'subtitle') {\r\n        mediaTypes.push('CLOSED-CAPTIONS');\r\n        mediaTypes.push('SUBTITLES');\r\n      }\r\n      mediaTypes.forEach(mediaType => {\r\n        const loader = this.mediaTypes_[mediaType] && this.mediaTypes_[mediaType].activePlaylistLoader;\r\n        if (loader) {\r\n          loaders.push(loader);\r\n        }\r\n      });\r\n      ['main', 'audio', 'subtitle'].forEach(name => {\r\n        const loader = this[`${name}SegmentLoader_`];\r\n        if (loader && (filter === name || filter === 'all')) {\r\n          loaders.push(loader);\r\n        }\r\n      });\r\n      loaders.forEach(loader => fnNames.forEach(fnName => {\r\n        if (typeof loader[fnName] === 'function') {\r\n          loader[fnName]();\r\n        }\r\n      }));\r\n    }\r\n    /**\r\n     * set the current time on all segment loaders\r\n     *\r\n     * @param {TimeRange} currentTime the current time to set\r\n     * @return {TimeRange} the current time\r\n     */\r\n\r\n    setCurrentTime(currentTime) {\r\n      const buffered = findRange(this.tech_.buffered(), currentTime);\r\n      if (!(this.mainPlaylistLoader_ && this.mainPlaylistLoader_.media())) {\r\n        // return immediately if the metadata is not ready yet\r\n        return 0;\r\n      } // it's clearly an edge-case but don't thrown an error if asked to\r\n      // seek within an empty playlist\r\n\r\n      if (!this.mainPlaylistLoader_.media().segments) {\r\n        return 0;\r\n      } // if the seek location is already buffered, continue buffering as usual\r\n\r\n      if (buffered && buffered.length) {\r\n        return currentTime;\r\n      } // cancel outstanding requests so we begin buffering at the new\r\n      // location\r\n\r\n      this.mainSegmentLoader_.pause();\r\n      this.mainSegmentLoader_.resetEverything();\r\n      if (this.mediaTypes_.AUDIO.activePlaylistLoader) {\r\n        this.audioSegmentLoader_.pause();\r\n        this.audioSegmentLoader_.resetEverything();\r\n      }\r\n      if (this.mediaTypes_.SUBTITLES.activePlaylistLoader) {\r\n        this.subtitleSegmentLoader_.pause();\r\n        this.subtitleSegmentLoader_.resetEverything();\r\n      } // start segment loader loading in case they are paused\r\n\r\n      this.load();\r\n    }\r\n    /**\r\n     * get the current duration\r\n     *\r\n     * @return {TimeRange} the duration\r\n     */\r\n\r\n    duration() {\r\n      if (!this.mainPlaylistLoader_) {\r\n        return 0;\r\n      }\r\n      const media = this.mainPlaylistLoader_.media();\r\n      if (!media) {\r\n        // no playlists loaded yet, so can't determine a duration\r\n        return 0;\r\n      } // Don't rely on the media source for duration in the case of a live playlist since\r\n      // setting the native MediaSource's duration to infinity ends up with consequences to\r\n      // seekable behavior. See https://github.com/w3c/media-source/issues/5 for details.\r\n      //\r\n      // This is resolved in the spec by https://github.com/w3c/media-source/pull/92,\r\n      // however, few browsers have support for setLiveSeekableRange()\r\n      // https://developer.mozilla.org/en-US/docs/Web/API/MediaSource/setLiveSeekableRange\r\n      //\r\n      // Until a time when the duration of the media source can be set to infinity, and a\r\n      // seekable range specified across browsers, just return Infinity.\r\n\r\n      if (!media.endList) {\r\n        return Infinity;\r\n      } // Since this is a VOD video, it is safe to rely on the media source's duration (if\r\n      // available). If it's not available, fall back to a playlist-calculated estimate.\r\n\r\n      if (this.mediaSource) {\r\n        return this.mediaSource.duration;\r\n      }\r\n      return Vhs$1.Playlist.duration(media);\r\n    }\r\n    /**\r\n     * check the seekable range\r\n     *\r\n     * @return {TimeRange} the seekable range\r\n     */\r\n\r\n    seekable() {\r\n      return this.seekable_;\r\n    }\r\n    getSeekableRange_(playlistLoader, mediaType) {\r\n      const media = playlistLoader.media();\r\n      if (!media) {\r\n        return null;\r\n      }\r\n      const mediaSequenceSync = this.syncController_.getMediaSequenceSync(mediaType);\r\n      if (mediaSequenceSync && mediaSequenceSync.isReliable) {\r\n        const start = mediaSequenceSync.start;\r\n        const end = mediaSequenceSync.end;\r\n        if (!isFinite(start) || !isFinite(end)) {\r\n          return null;\r\n        }\r\n        const liveEdgeDelay = Vhs$1.Playlist.liveEdgeDelay(this.mainPlaylistLoader_.main, media); // Make sure our seekable end is not negative\r\n\r\n        const calculatedEnd = Math.max(0, end - liveEdgeDelay);\r\n        if (calculatedEnd < start) {\r\n          return null;\r\n        }\r\n        return createTimeRanges([[start, calculatedEnd]]);\r\n      }\r\n      const expired = this.syncController_.getExpiredTime(media, this.duration());\r\n      if (expired === null) {\r\n        return null;\r\n      }\r\n      const seekable = Vhs$1.Playlist.seekable(media, expired, Vhs$1.Playlist.liveEdgeDelay(this.mainPlaylistLoader_.main, media));\r\n      return seekable.length ? seekable : null;\r\n    }\r\n    computeFinalSeekable_(mainSeekable, audioSeekable) {\r\n      if (!audioSeekable) {\r\n        return mainSeekable;\r\n      }\r\n      const mainStart = mainSeekable.start(0);\r\n      const mainEnd = mainSeekable.end(0);\r\n      const audioStart = audioSeekable.start(0);\r\n      const audioEnd = audioSeekable.end(0);\r\n      if (audioStart > mainEnd || mainStart > audioEnd) {\r\n        // Seekables are far apart, rely on main\r\n        return mainSeekable;\r\n      } // Return the overlapping seekable range\r\n\r\n      return createTimeRanges([[Math.max(mainStart, audioStart), Math.min(mainEnd, audioEnd)]]);\r\n    }\r\n    onSyncInfoUpdate_() {\r\n      // TODO check for creation of both source buffers before updating seekable\r\n      //\r\n      // A fix was made to this function where a check for\r\n      // this.sourceUpdater_.hasCreatedSourceBuffers\r\n      // was added to ensure that both source buffers were created before seekable was\r\n      // updated. However, it originally had a bug where it was checking for a true and\r\n      // returning early instead of checking for false. Setting it to check for false to\r\n      // return early though created other issues. A call to play() would check for seekable\r\n      // end without verifying that a seekable range was present. In addition, even checking\r\n      // for that didn't solve some issues, as handleFirstPlay is sometimes worked around\r\n      // due to a media update calling load on the segment loaders, skipping a seek to live,\r\n      // thereby starting live streams at the beginning of the stream rather than at the end.\r\n      //\r\n      // This conditional should be fixed to wait for the creation of two source buffers at\r\n      // the same time as the other sections of code are fixed to properly seek to live and\r\n      // not throw an error due to checking for a seekable end when no seekable range exists.\r\n      //\r\n      // For now, fall back to the older behavior, with the understanding that the seekable\r\n      // range may not be completely correct, leading to a suboptimal initial live point.\r\n      if (!this.mainPlaylistLoader_) {\r\n        return;\r\n      }\r\n      const mainSeekable = this.getSeekableRange_(this.mainPlaylistLoader_, 'main');\r\n      if (!mainSeekable) {\r\n        return;\r\n      }\r\n      let audioSeekable;\r\n      if (this.mediaTypes_.AUDIO.activePlaylistLoader) {\r\n        audioSeekable = this.getSeekableRange_(this.mediaTypes_.AUDIO.activePlaylistLoader, 'audio');\r\n        if (!audioSeekable) {\r\n          return;\r\n        }\r\n      }\r\n      const oldSeekable = this.seekable_;\r\n      this.seekable_ = this.computeFinalSeekable_(mainSeekable, audioSeekable);\r\n      if (!this.seekable_) {\r\n        return;\r\n      }\r\n      if (oldSeekable && oldSeekable.length && this.seekable_.length) {\r\n        if (oldSeekable.start(0) === this.seekable_.start(0) && oldSeekable.end(0) === this.seekable_.end(0)) {\r\n          // Seekable range hasn't changed\r\n          return;\r\n        }\r\n      }\r\n      this.logger_(`seekable updated [${printableRange(this.seekable_)}]`);\r\n      const metadata = {\r\n        seekableRanges: this.seekable_\r\n      };\r\n      this.trigger({\r\n        type: 'seekablerangeschanged',\r\n        metadata\r\n      });\r\n      this.tech_.trigger('seekablechanged');\r\n    }\r\n    /**\r\n     * Update the player duration\r\n     */\r\n\r\n    updateDuration(isLive) {\r\n      if (this.updateDuration_) {\r\n        this.mediaSource.removeEventListener('sourceopen', this.updateDuration_);\r\n        this.updateDuration_ = null;\r\n      }\r\n      if (this.mediaSource.readyState !== 'open') {\r\n        this.updateDuration_ = this.updateDuration.bind(this, isLive);\r\n        this.mediaSource.addEventListener('sourceopen', this.updateDuration_);\r\n        return;\r\n      }\r\n      if (isLive) {\r\n        const seekable = this.seekable();\r\n        if (!seekable.length) {\r\n          return;\r\n        } // Even in the case of a live playlist, the native MediaSource's duration should not\r\n        // be set to Infinity (even though this would be expected for a live playlist), since\r\n        // setting the native MediaSource's duration to infinity ends up with consequences to\r\n        // seekable behavior. See https://github.com/w3c/media-source/issues/5 for details.\r\n        //\r\n        // This is resolved in the spec by https://github.com/w3c/media-source/pull/92,\r\n        // however, few browsers have support for setLiveSeekableRange()\r\n        // https://developer.mozilla.org/en-US/docs/Web/API/MediaSource/setLiveSeekableRange\r\n        //\r\n        // Until a time when the duration of the media source can be set to infinity, and a\r\n        // seekable range specified across browsers, the duration should be greater than or\r\n        // equal to the last possible seekable value.\r\n        // MediaSource duration starts as NaN\r\n        // It is possible (and probable) that this case will never be reached for many\r\n        // sources, since the MediaSource reports duration as the highest value without\r\n        // accounting for timestamp offset. For example, if the timestamp offset is -100 and\r\n        // we buffered times 0 to 100 with real times of 100 to 200, even though current\r\n        // time will be between 0 and 100, the native media source may report the duration\r\n        // as 200. However, since we report duration separate from the media source (as\r\n        // Infinity), and as long as the native media source duration value is greater than\r\n        // our reported seekable range, seeks will work as expected. The large number as\r\n        // duration for live is actually a strategy used by some players to work around the\r\n        // issue of live seekable ranges cited above.\r\n\r\n        if (isNaN(this.mediaSource.duration) || this.mediaSource.duration < seekable.end(seekable.length - 1)) {\r\n          this.sourceUpdater_.setDuration(seekable.end(seekable.length - 1));\r\n        }\r\n        return;\r\n      }\r\n      const buffered = this.tech_.buffered();\r\n      let duration = Vhs$1.Playlist.duration(this.mainPlaylistLoader_.media());\r\n      if (buffered.length > 0) {\r\n        duration = Math.max(duration, buffered.end(buffered.length - 1));\r\n      }\r\n      if (this.mediaSource.duration !== duration) {\r\n        this.sourceUpdater_.setDuration(duration);\r\n      }\r\n    }\r\n    /**\r\n     * dispose of the PlaylistController and everything\r\n     * that it controls\r\n     */\r\n\r\n    dispose() {\r\n      this.trigger('dispose');\r\n      this.decrypter_.terminate();\r\n      this.mainPlaylistLoader_.dispose();\r\n      this.mainSegmentLoader_.dispose();\r\n      this.contentSteeringController_.dispose();\r\n      this.keyStatusMap_.clear();\r\n      if (this.loadOnPlay_) {\r\n        this.tech_.off('play', this.loadOnPlay_);\r\n      }\r\n      ['AUDIO', 'SUBTITLES'].forEach(type => {\r\n        const groups = this.mediaTypes_[type].groups;\r\n        for (const id in groups) {\r\n          groups[id].forEach(group => {\r\n            if (group.playlistLoader) {\r\n              group.playlistLoader.dispose();\r\n            }\r\n          });\r\n        }\r\n      });\r\n      this.audioSegmentLoader_.dispose();\r\n      this.subtitleSegmentLoader_.dispose();\r\n      this.sourceUpdater_.dispose();\r\n      this.timelineChangeController_.dispose();\r\n      this.stopABRTimer_();\r\n      if (this.updateDuration_) {\r\n        this.mediaSource.removeEventListener('sourceopen', this.updateDuration_);\r\n      }\r\n      this.mediaSource.removeEventListener('durationchange', this.handleDurationChange_); // load the media source into the player\r\n\r\n      this.mediaSource.removeEventListener('sourceopen', this.handleSourceOpen_);\r\n      this.mediaSource.removeEventListener('sourceended', this.handleSourceEnded_);\r\n      this.off();\r\n    }\r\n    /**\r\n     * return the main playlist object if we have one\r\n     *\r\n     * @return {Object} the main playlist object that we parsed\r\n     */\r\n\r\n    main() {\r\n      return this.mainPlaylistLoader_.main;\r\n    }\r\n    /**\r\n     * return the currently selected playlist\r\n     *\r\n     * @return {Object} the currently selected playlist object that we parsed\r\n     */\r\n\r\n    media() {\r\n      // playlist loader will not return media if it has not been fully loaded\r\n      return this.mainPlaylistLoader_.media() || this.initialMedia_;\r\n    }\r\n    areMediaTypesKnown_() {\r\n      const usingAudioLoader = !!this.mediaTypes_.AUDIO.activePlaylistLoader;\r\n      const hasMainMediaInfo = !!this.mainSegmentLoader_.getCurrentMediaInfo_(); // if we are not using an audio loader, then we have audio media info\r\n      // otherwise check on the segment loader.\r\n\r\n      const hasAudioMediaInfo = !usingAudioLoader ? true : !!this.audioSegmentLoader_.getCurrentMediaInfo_(); // one or both loaders has not loaded sufficently to get codecs\r\n\r\n      if (!hasMainMediaInfo || !hasAudioMediaInfo) {\r\n        return false;\r\n      }\r\n      return true;\r\n    } // find from and to for codec switch event\r\n\r\n    getCodecsOrExclude_() {\r\n      const media = {\r\n        main: this.mainSegmentLoader_.getCurrentMediaInfo_() || {},\r\n        audio: this.audioSegmentLoader_.getCurrentMediaInfo_() || {}\r\n      };\r\n      const playlist = this.mainSegmentLoader_.getPendingSegmentPlaylist() || this.media(); // set \"main\" media equal to video\r\n\r\n      media.video = media.main;\r\n      const playlistCodecs = codecsForPlaylist(this.main(), playlist);\r\n      const codecs = {};\r\n      const usingAudioLoader = !!this.mediaTypes_.AUDIO.activePlaylistLoader;\r\n      if (media.main.hasVideo) {\r\n        codecs.video = playlistCodecs.video || media.main.videoCodec || DEFAULT_VIDEO_CODEC;\r\n      }\r\n      if (media.main.isMuxed) {\r\n        codecs.video += `,${playlistCodecs.audio || media.main.audioCodec || DEFAULT_AUDIO_CODEC}`;\r\n      }\r\n      if (media.main.hasAudio && !media.main.isMuxed || media.audio.hasAudio || usingAudioLoader) {\r\n        codecs.audio = playlistCodecs.audio || media.main.audioCodec || media.audio.audioCodec || DEFAULT_AUDIO_CODEC; // set audio isFmp4 so we use the correct \"supports\" function below\r\n\r\n        media.audio.isFmp4 = media.main.hasAudio && !media.main.isMuxed ? media.main.isFmp4 : media.audio.isFmp4;\r\n      } // no codecs, no playback.\r\n\r\n      if (!codecs.audio && !codecs.video) {\r\n        this.excludePlaylist({\r\n          playlistToExclude: playlist,\r\n          error: {\r\n            message: 'Could not determine codecs for playlist.'\r\n          },\r\n          playlistExclusionDuration: Infinity\r\n        });\r\n        return;\r\n      } // fmp4 relies on browser support, while ts relies on muxer support\r\n\r\n      const supportFunction = (isFmp4, codec) => isFmp4 ? browserSupportsCodec(codec, this.usingManagedMediaSource_) : muxerSupportsCodec(codec);\r\n      const unsupportedCodecs = {};\r\n      let unsupportedAudio;\r\n      ['video', 'audio'].forEach(function (type) {\r\n        if (codecs.hasOwnProperty(type) && !supportFunction(media[type].isFmp4, codecs[type])) {\r\n          const supporter = media[type].isFmp4 ? 'browser' : 'muxer';\r\n          unsupportedCodecs[supporter] = unsupportedCodecs[supporter] || [];\r\n          unsupportedCodecs[supporter].push(codecs[type]);\r\n          if (type === 'audio') {\r\n            unsupportedAudio = supporter;\r\n          }\r\n        }\r\n      });\r\n      if (usingAudioLoader && unsupportedAudio && playlist.attributes.AUDIO) {\r\n        const audioGroup = playlist.attributes.AUDIO;\r\n        this.main().playlists.forEach(variant => {\r\n          const variantAudioGroup = variant.attributes && variant.attributes.AUDIO;\r\n          if (variantAudioGroup === audioGroup && variant !== playlist) {\r\n            variant.excludeUntil = Infinity;\r\n          }\r\n        });\r\n        this.logger_(`excluding audio group ${audioGroup} as ${unsupportedAudio} does not support codec(s): \"${codecs.audio}\"`);\r\n      } // if we have any unsupported codecs exclude this playlist.\r\n\r\n      if (Object.keys(unsupportedCodecs).length) {\r\n        const message = Object.keys(unsupportedCodecs).reduce((acc, supporter) => {\r\n          if (acc) {\r\n            acc += ', ';\r\n          }\r\n          acc += `${supporter} does not support codec(s): \"${unsupportedCodecs[supporter].join(',')}\"`;\r\n          return acc;\r\n        }, '') + '.';\r\n        this.excludePlaylist({\r\n          playlistToExclude: playlist,\r\n          error: {\r\n            internal: true,\r\n            message\r\n          },\r\n          playlistExclusionDuration: Infinity\r\n        });\r\n        return;\r\n      } // check if codec switching is happening\r\n\r\n      if (this.sourceUpdater_.hasCreatedSourceBuffers() && !this.sourceUpdater_.canChangeType()) {\r\n        const switchMessages = [];\r\n        ['video', 'audio'].forEach(type => {\r\n          const newCodec = (parseCodecs(this.sourceUpdater_.codecs[type] || '')[0] || {}).type;\r\n          const oldCodec = (parseCodecs(codecs[type] || '')[0] || {}).type;\r\n          if (newCodec && oldCodec && newCodec.toLowerCase() !== oldCodec.toLowerCase()) {\r\n            switchMessages.push(`\"${this.sourceUpdater_.codecs[type]}\" -> \"${codecs[type]}\"`);\r\n          }\r\n        });\r\n        if (switchMessages.length) {\r\n          this.excludePlaylist({\r\n            playlistToExclude: playlist,\r\n            error: {\r\n              message: `Codec switching not supported: ${switchMessages.join(', ')}.`,\r\n              internal: true\r\n            },\r\n            playlistExclusionDuration: Infinity\r\n          });\r\n          return;\r\n        }\r\n      } // TODO: when using the muxer shouldn't we just return\r\n      // the codecs that the muxer outputs?\r\n\r\n      return codecs;\r\n    }\r\n    /**\r\n     * Create source buffers and exlude any incompatible renditions.\r\n     *\r\n     * @private\r\n     */\r\n\r\n    tryToCreateSourceBuffers_() {\r\n      // media source is not ready yet or sourceBuffers are already\r\n      // created.\r\n      if (this.mediaSource.readyState !== 'open' || this.sourceUpdater_.hasCreatedSourceBuffers()) {\r\n        return;\r\n      }\r\n      if (!this.areMediaTypesKnown_()) {\r\n        return;\r\n      }\r\n      const codecs = this.getCodecsOrExclude_(); // no codecs means that the playlist was excluded\r\n\r\n      if (!codecs) {\r\n        return;\r\n      }\r\n      this.sourceUpdater_.createSourceBuffers(codecs);\r\n      const codecString = [codecs.video, codecs.audio].filter(Boolean).join(',');\r\n      this.excludeIncompatibleVariants_(codecString);\r\n    }\r\n    /**\r\n     * Excludes playlists with codecs that are unsupported by the muxer and browser.\r\n     */\r\n\r\n    excludeUnsupportedVariants_() {\r\n      const playlists = this.main().playlists;\r\n      const ids = []; // TODO: why don't we have a property to loop through all\r\n      // playlist? Why did we ever mix indexes and keys?\r\n\r\n      Object.keys(playlists).forEach(key => {\r\n        const variant = playlists[key]; // check if we already processed this playlist.\r\n\r\n        if (ids.indexOf(variant.id) !== -1) {\r\n          return;\r\n        }\r\n        ids.push(variant.id);\r\n        const codecs = codecsForPlaylist(this.main, variant);\r\n        const unsupported = [];\r\n        if (codecs.audio && !muxerSupportsCodec(codecs.audio) && !browserSupportsCodec(codecs.audio, this.usingManagedMediaSource_)) {\r\n          unsupported.push(`audio codec ${codecs.audio}`);\r\n        }\r\n        if (codecs.video && !muxerSupportsCodec(codecs.video) && !browserSupportsCodec(codecs.video, this.usingManagedMediaSource_)) {\r\n          unsupported.push(`video codec ${codecs.video}`);\r\n        }\r\n        if (codecs.text && codecs.text === 'stpp.ttml.im1t') {\r\n          unsupported.push(`text codec ${codecs.text}`);\r\n        }\r\n        if (unsupported.length) {\r\n          variant.excludeUntil = Infinity;\r\n          this.logger_(`excluding ${variant.id} for unsupported: ${unsupported.join(', ')}`);\r\n        }\r\n      });\r\n    }\r\n    /**\r\n     * Exclude playlists that are known to be codec or\r\n     * stream-incompatible with the SourceBuffer configuration. For\r\n     * instance, Media Source Extensions would cause the video element to\r\n     * stall waiting for video data if you switched from a variant with\r\n     * video and audio to an audio-only one.\r\n     *\r\n     * @param {Object} media a media playlist compatible with the current\r\n     * set of SourceBuffers. Variants in the current main playlist that\r\n     * do not appear to have compatible codec or stream configurations\r\n     * will be excluded from the default playlist selection algorithm\r\n     * indefinitely.\r\n     * @private\r\n     */\r\n\r\n    excludeIncompatibleVariants_(codecString) {\r\n      const ids = [];\r\n      const playlists = this.main().playlists;\r\n      const codecs = unwrapCodecList(parseCodecs(codecString));\r\n      const codecCount_ = codecCount(codecs);\r\n      const videoDetails = codecs.video && parseCodecs(codecs.video)[0] || null;\r\n      const audioDetails = codecs.audio && parseCodecs(codecs.audio)[0] || null;\r\n      Object.keys(playlists).forEach(key => {\r\n        const variant = playlists[key]; // check if we already processed this playlist.\r\n        // or it if it is already excluded forever.\r\n\r\n        if (ids.indexOf(variant.id) !== -1 || variant.excludeUntil === Infinity) {\r\n          return;\r\n        }\r\n        ids.push(variant.id);\r\n        const exclusionReasons = []; // get codecs from the playlist for this variant\r\n\r\n        const variantCodecs = codecsForPlaylist(this.mainPlaylistLoader_.main, variant);\r\n        const variantCodecCount = codecCount(variantCodecs); // if no codecs are listed, we cannot determine that this\r\n        // variant is incompatible. Wait for mux.js to probe\r\n\r\n        if (!variantCodecs.audio && !variantCodecs.video) {\r\n          return;\r\n        } // TODO: we can support this by removing the\r\n        // old media source and creating a new one, but it will take some work.\r\n        // The number of streams cannot change\r\n\r\n        if (variantCodecCount !== codecCount_) {\r\n          exclusionReasons.push(`codec count \"${variantCodecCount}\" !== \"${codecCount_}\"`);\r\n        } // only exclude playlists by codec change, if codecs cannot switch\r\n        // during playback.\r\n\r\n        if (!this.sourceUpdater_.canChangeType()) {\r\n          const variantVideoDetails = variantCodecs.video && parseCodecs(variantCodecs.video)[0] || null;\r\n          const variantAudioDetails = variantCodecs.audio && parseCodecs(variantCodecs.audio)[0] || null; // the video codec cannot change\r\n\r\n          if (variantVideoDetails && videoDetails && variantVideoDetails.type.toLowerCase() !== videoDetails.type.toLowerCase()) {\r\n            exclusionReasons.push(`video codec \"${variantVideoDetails.type}\" !== \"${videoDetails.type}\"`);\r\n          } // the audio codec cannot change\r\n\r\n          if (variantAudioDetails && audioDetails && variantAudioDetails.type.toLowerCase() !== audioDetails.type.toLowerCase()) {\r\n            exclusionReasons.push(`audio codec \"${variantAudioDetails.type}\" !== \"${audioDetails.type}\"`);\r\n          }\r\n        }\r\n        if (exclusionReasons.length) {\r\n          variant.excludeUntil = Infinity;\r\n          this.logger_(`excluding ${variant.id}: ${exclusionReasons.join(' && ')}`);\r\n        }\r\n      });\r\n    }\r\n    updateAdCues_(media) {\r\n      let offset = 0;\r\n      const seekable = this.seekable();\r\n      if (seekable.length) {\r\n        offset = seekable.start(0);\r\n      }\r\n      updateAdCues(media, this.cueTagsTrack_, offset);\r\n    }\r\n    /**\r\n     * Calculates the desired forward buffer length based on current time\r\n     *\r\n     * @return {number} Desired forward buffer length in seconds\r\n     */\r\n\r\n    goalBufferLength() {\r\n      const currentTime = this.tech_.currentTime();\r\n      const initial = Config.GOAL_BUFFER_LENGTH;\r\n      const rate = Config.GOAL_BUFFER_LENGTH_RATE;\r\n      const max = Math.max(initial, Config.MAX_GOAL_BUFFER_LENGTH);\r\n      return Math.min(initial + currentTime * rate, max);\r\n    }\r\n    /**\r\n     * Calculates the desired buffer low water line based on current time\r\n     *\r\n     * @return {number} Desired buffer low water line in seconds\r\n     */\r\n\r\n    bufferLowWaterLine() {\r\n      const currentTime = this.tech_.currentTime();\r\n      const initial = Config.BUFFER_LOW_WATER_LINE;\r\n      const rate = Config.BUFFER_LOW_WATER_LINE_RATE;\r\n      const max = Math.max(initial, Config.MAX_BUFFER_LOW_WATER_LINE);\r\n      const newMax = Math.max(initial, Config.EXPERIMENTAL_MAX_BUFFER_LOW_WATER_LINE);\r\n      return Math.min(initial + currentTime * rate, this.bufferBasedABR ? newMax : max);\r\n    }\r\n    bufferHighWaterLine() {\r\n      return Config.BUFFER_HIGH_WATER_LINE;\r\n    }\r\n    addDateRangesToTextTrack_(dateRanges) {\r\n      createMetadataTrackIfNotExists(this.inbandTextTracks_, 'com.apple.streaming', this.tech_);\r\n      addDateRangeMetadata({\r\n        inbandTextTracks: this.inbandTextTracks_,\r\n        dateRanges\r\n      });\r\n    }\r\n    addMetadataToTextTrack(dispatchType, metadataArray, videoDuration) {\r\n      const timestampOffset = this.sourceUpdater_.videoBuffer ? this.sourceUpdater_.videoTimestampOffset() : this.sourceUpdater_.audioTimestampOffset(); // There's potentially an issue where we could double add metadata if there's a muxed\r\n      // audio/video source with a metadata track, and an alt audio with a metadata track.\r\n      // However, this probably won't happen, and if it does it can be handled then.\r\n\r\n      createMetadataTrackIfNotExists(this.inbandTextTracks_, dispatchType, this.tech_);\r\n      addMetadata({\r\n        inbandTextTracks: this.inbandTextTracks_,\r\n        metadataArray,\r\n        timestampOffset,\r\n        videoDuration\r\n      });\r\n    }\r\n    /**\r\n     * Utility for getting the pathway or service location from an HLS or DASH playlist.\r\n     *\r\n     * @param {Object} playlist for getting pathway from.\r\n     * @return the pathway attribute of a playlist\r\n     */\r\n\r\n    pathwayAttribute_(playlist) {\r\n      return playlist.attributes['PATHWAY-ID'] || playlist.attributes.serviceLocation;\r\n    }\r\n    /**\r\n     * Initialize available pathways and apply the tag properties.\r\n     */\r\n\r\n    initContentSteeringController_() {\r\n      const main = this.main();\r\n      if (!main.contentSteering) {\r\n        return;\r\n      }\r\n      for (const playlist of main.playlists) {\r\n        this.contentSteeringController_.addAvailablePathway(this.pathwayAttribute_(playlist));\r\n      }\r\n      this.contentSteeringController_.assignTagProperties(main.uri, main.contentSteering); // request the steering manifest immediately if queryBeforeStart is set.\r\n\r\n      if (this.contentSteeringController_.queryBeforeStart) {\r\n        // When queryBeforeStart is true, initial request should omit steering parameters.\r\n        this.contentSteeringController_.requestSteeringManifest(true);\r\n        return;\r\n      } // otherwise start content steering after playback starts\r\n\r\n      this.tech_.one('canplay', () => {\r\n        this.contentSteeringController_.requestSteeringManifest();\r\n      });\r\n    }\r\n    /**\r\n     * Reset the content steering controller and re-init.\r\n     */\r\n\r\n    resetContentSteeringController_() {\r\n      this.contentSteeringController_.clearAvailablePathways();\r\n      this.contentSteeringController_.dispose();\r\n      this.initContentSteeringController_();\r\n    }\r\n    /**\r\n     * Attaches the listeners for content steering.\r\n     */\r\n\r\n    attachContentSteeringListeners_() {\r\n      this.contentSteeringController_.on('content-steering', this.excludeThenChangePathway_.bind(this));\r\n      const contentSteeringEvents = ['contentsteeringloadstart', 'contentsteeringloadcomplete', 'contentsteeringparsed'];\r\n      contentSteeringEvents.forEach(eventName => {\r\n        this.contentSteeringController_.on(eventName, metadata => {\r\n          this.trigger(_extends$1({}, metadata));\r\n        });\r\n      });\r\n      if (this.sourceType_ === 'dash') {\r\n        this.mainPlaylistLoader_.on('loadedplaylist', () => {\r\n          const main = this.main(); // check if steering tag or pathways changed.\r\n\r\n          const didDashTagChange = this.contentSteeringController_.didDASHTagChange(main.uri, main.contentSteering);\r\n          const didPathwaysChange = () => {\r\n            const availablePathways = this.contentSteeringController_.getAvailablePathways();\r\n            const newPathways = [];\r\n            for (const playlist of main.playlists) {\r\n              const serviceLocation = playlist.attributes.serviceLocation;\r\n              if (serviceLocation) {\r\n                newPathways.push(serviceLocation);\r\n                if (!availablePathways.has(serviceLocation)) {\r\n                  return true;\r\n                }\r\n              }\r\n            } // If we have no new serviceLocations and previously had availablePathways\r\n\r\n            if (!newPathways.length && availablePathways.size) {\r\n              return true;\r\n            }\r\n            return false;\r\n          };\r\n          if (didDashTagChange || didPathwaysChange()) {\r\n            this.resetContentSteeringController_();\r\n          }\r\n        });\r\n      }\r\n    }\r\n    /**\r\n     * Simple exclude and change playlist logic for content steering.\r\n     */\r\n\r\n    excludeThenChangePathway_() {\r\n      const currentPathway = this.contentSteeringController_.getPathway();\r\n      if (!currentPathway) {\r\n        return;\r\n      }\r\n      this.handlePathwayClones_();\r\n      const main = this.main();\r\n      const playlists = main.playlists;\r\n      const ids = new Set();\r\n      let didEnablePlaylists = false;\r\n      Object.keys(playlists).forEach(key => {\r\n        const variant = playlists[key];\r\n        const pathwayId = this.pathwayAttribute_(variant);\r\n        const differentPathwayId = pathwayId && currentPathway !== pathwayId;\r\n        const steeringExclusion = variant.excludeUntil === Infinity && variant.lastExcludeReason_ === 'content-steering';\r\n        if (steeringExclusion && !differentPathwayId) {\r\n          delete variant.excludeUntil;\r\n          delete variant.lastExcludeReason_;\r\n          didEnablePlaylists = true;\r\n        }\r\n        const noExcludeUntil = !variant.excludeUntil && variant.excludeUntil !== Infinity;\r\n        const shouldExclude = !ids.has(variant.id) && differentPathwayId && noExcludeUntil;\r\n        if (!shouldExclude) {\r\n          return;\r\n        }\r\n        ids.add(variant.id);\r\n        variant.excludeUntil = Infinity;\r\n        variant.lastExcludeReason_ = 'content-steering'; // TODO: kind of spammy, maybe move this.\r\n\r\n        this.logger_(`excluding ${variant.id} for ${variant.lastExcludeReason_}`);\r\n      });\r\n      if (this.contentSteeringController_.manifestType_ === 'DASH') {\r\n        Object.keys(this.mediaTypes_).forEach(key => {\r\n          const type = this.mediaTypes_[key];\r\n          if (type.activePlaylistLoader) {\r\n            const currentPlaylist = type.activePlaylistLoader.media_; // Check if the current media playlist matches the current CDN\r\n\r\n            if (currentPlaylist && currentPlaylist.attributes.serviceLocation !== currentPathway) {\r\n              didEnablePlaylists = true;\r\n            }\r\n          }\r\n        });\r\n      }\r\n      if (didEnablePlaylists) {\r\n        this.changeSegmentPathway_();\r\n      }\r\n    }\r\n    /**\r\n     * Add, update, or delete playlists and media groups for\r\n     * the pathway clones for HLS Content Steering.\r\n     *\r\n     * See https://datatracker.ietf.org/doc/draft-pantos-hls-rfc8216bis/\r\n     *\r\n     * NOTE: Pathway cloning does not currently support the `PER_VARIANT_URIS` and\r\n     * `PER_RENDITION_URIS` as we do not handle `STABLE-VARIANT-ID` or\r\n     * `STABLE-RENDITION-ID` values.\r\n     */\r\n\r\n    handlePathwayClones_() {\r\n      const main = this.main();\r\n      const playlists = main.playlists;\r\n      const currentPathwayClones = this.contentSteeringController_.currentPathwayClones;\r\n      const nextPathwayClones = this.contentSteeringController_.nextPathwayClones;\r\n      const hasClones = currentPathwayClones && currentPathwayClones.size || nextPathwayClones && nextPathwayClones.size;\r\n      if (!hasClones) {\r\n        return;\r\n      }\r\n      for (const [id, clone] of currentPathwayClones.entries()) {\r\n        const newClone = nextPathwayClones.get(id); // Delete the old pathway clone.\r\n\r\n        if (!newClone) {\r\n          this.mainPlaylistLoader_.updateOrDeleteClone(clone);\r\n          this.contentSteeringController_.excludePathway(id);\r\n        }\r\n      }\r\n      for (const [id, clone] of nextPathwayClones.entries()) {\r\n        const oldClone = currentPathwayClones.get(id); // Create a new pathway if it is a new pathway clone object.\r\n\r\n        if (!oldClone) {\r\n          const playlistsToClone = playlists.filter(p => {\r\n            return p.attributes['PATHWAY-ID'] === clone['BASE-ID'];\r\n          });\r\n          playlistsToClone.forEach(p => {\r\n            this.mainPlaylistLoader_.addClonePathway(clone, p);\r\n          });\r\n          this.contentSteeringController_.addAvailablePathway(id);\r\n          continue;\r\n        } // There have not been changes to the pathway clone object, so skip.\r\n\r\n        if (this.equalPathwayClones_(oldClone, clone)) {\r\n          continue;\r\n        } // Update a preexisting cloned pathway.\r\n        // True is set for the update flag.\r\n\r\n        this.mainPlaylistLoader_.updateOrDeleteClone(clone, true);\r\n        this.contentSteeringController_.addAvailablePathway(id);\r\n      } // Deep copy contents of next to current pathways.\r\n\r\n      this.contentSteeringController_.currentPathwayClones = new Map(JSON.parse(JSON.stringify([...nextPathwayClones])));\r\n    }\r\n    /**\r\n     * Determines whether two pathway clone objects are equivalent.\r\n     *\r\n     * @param {Object} a The first pathway clone object.\r\n     * @param {Object} b The second pathway clone object.\r\n     * @return {boolean} True if the pathway clone objects are equal, false otherwise.\r\n     */\r\n\r\n    equalPathwayClones_(a, b) {\r\n      if (a['BASE-ID'] !== b['BASE-ID'] || a.ID !== b.ID || a['URI-REPLACEMENT'].HOST !== b['URI-REPLACEMENT'].HOST) {\r\n        return false;\r\n      }\r\n      const aParams = a['URI-REPLACEMENT'].PARAMS;\r\n      const bParams = b['URI-REPLACEMENT'].PARAMS; // We need to iterate through both lists of params because one could be\r\n      // missing a parameter that the other has.\r\n\r\n      for (const p in aParams) {\r\n        if (aParams[p] !== bParams[p]) {\r\n          return false;\r\n        }\r\n      }\r\n      for (const p in bParams) {\r\n        if (aParams[p] !== bParams[p]) {\r\n          return false;\r\n        }\r\n      }\r\n      return true;\r\n    }\r\n    /**\r\n     * Changes the current playlists for audio, video and subtitles after a new pathway\r\n     * is chosen from content steering.\r\n     */\r\n\r\n    changeSegmentPathway_() {\r\n      const nextPlaylist = this.selectPlaylist();\r\n      this.pauseLoading(); // Switch audio and text track playlists if necessary in DASH\r\n\r\n      if (this.contentSteeringController_.manifestType_ === 'DASH') {\r\n        this.switchMediaForDASHContentSteering_();\r\n      }\r\n      this.switchMedia_(nextPlaylist, 'content-steering');\r\n    }\r\n    /**\r\n     * Iterates through playlists and check their keyId set and compare with the\r\n     * keyStatusMap, only enable playlists that have a usable key. If the playlist\r\n     * has no keyId leave it enabled by default.\r\n     */\r\n\r\n    excludeNonUsablePlaylistsByKeyId_() {\r\n      if (!this.mainPlaylistLoader_ || !this.mainPlaylistLoader_.main) {\r\n        return;\r\n      }\r\n      let nonUsableKeyStatusCount = 0;\r\n      const NON_USABLE = 'non-usable';\r\n      this.mainPlaylistLoader_.main.playlists.forEach(playlist => {\r\n        const keyIdSet = this.mainPlaylistLoader_.getKeyIdSet(playlist); // If the playlist doesn't have keyIDs lets not exclude it.\r\n\r\n        if (!keyIdSet || !keyIdSet.size) {\r\n          return;\r\n        }\r\n        keyIdSet.forEach(key => {\r\n          const USABLE = 'usable';\r\n          const hasUsableKeyStatus = this.keyStatusMap_.has(key) && this.keyStatusMap_.get(key) === USABLE;\r\n          const nonUsableExclusion = playlist.lastExcludeReason_ === NON_USABLE && playlist.excludeUntil === Infinity;\r\n          if (!hasUsableKeyStatus) {\r\n            // Only exclude playlists that haven't already been excluded as non-usable.\r\n            if (playlist.excludeUntil !== Infinity && playlist.lastExcludeReason_ !== NON_USABLE) {\r\n              playlist.excludeUntil = Infinity;\r\n              playlist.lastExcludeReason_ = NON_USABLE;\r\n              this.logger_(`excluding playlist ${playlist.id} because the key ID ${key} doesn't exist in the keyStatusMap or is not ${USABLE}`);\r\n            } // count all nonUsableKeyStatus\r\n\r\n            nonUsableKeyStatusCount++;\r\n          } else if (hasUsableKeyStatus && nonUsableExclusion) {\r\n            delete playlist.excludeUntil;\r\n            delete playlist.lastExcludeReason_;\r\n            this.logger_(`enabling playlist ${playlist.id} because key ID ${key} is ${USABLE}`);\r\n          }\r\n        });\r\n      }); // If for whatever reason every playlist has a non usable key status. Lets try re-including the SD renditions as a failsafe.\r\n\r\n      if (nonUsableKeyStatusCount >= this.mainPlaylistLoader_.main.playlists.length) {\r\n        this.mainPlaylistLoader_.main.playlists.forEach(playlist => {\r\n          const isNonHD = playlist && playlist.attributes && playlist.attributes.RESOLUTION && playlist.attributes.RESOLUTION.height < 720;\r\n          const excludedForNonUsableKey = playlist.excludeUntil === Infinity && playlist.lastExcludeReason_ === NON_USABLE;\r\n          if (isNonHD && excludedForNonUsableKey) {\r\n            // Only delete the excludeUntil so we don't try and re-exclude these playlists.\r\n            delete playlist.excludeUntil;\r\n            videojs.log.warn(`enabling non-HD playlist ${playlist.id} because all playlists were excluded due to ${NON_USABLE} key IDs`);\r\n          }\r\n        });\r\n      }\r\n    }\r\n    /**\r\n     * Adds a keystatus to the keystatus map, tries to convert to string if necessary.\r\n     *\r\n     * @param {any} keyId the keyId to add a status for\r\n     * @param {string} status the status of the keyId\r\n     */\r\n\r\n    addKeyStatus_(keyId, status) {\r\n      const isString = typeof keyId === 'string';\r\n      const keyIdHexString = isString ? keyId : bufferToHexString(keyId);\r\n      const formattedKeyIdString = keyIdHexString.slice(0, 32).toLowerCase();\r\n      this.logger_(`KeyStatus '${status}' with key ID ${formattedKeyIdString} added to the keyStatusMap`);\r\n      this.keyStatusMap_.set(formattedKeyIdString, status);\r\n    }\r\n    /**\r\n     * Utility function for adding key status to the keyStatusMap and filtering usable encrypted playlists.\r\n     *\r\n     * @param {any} keyId the keyId from the keystatuschange event\r\n     * @param {string} status the key status string\r\n     */\r\n\r\n    updatePlaylistByKeyStatus(keyId, status) {\r\n      this.addKeyStatus_(keyId, status);\r\n      if (!this.waitingForFastQualityPlaylistReceived_) {\r\n        this.excludeNonUsableThenChangePlaylist_();\r\n      } // Listen to loadedplaylist with a single listener and check for new contentProtection elements when a playlist is updated.\r\n\r\n      this.mainPlaylistLoader_.off('loadedplaylist', this.excludeNonUsableThenChangePlaylist_.bind(this));\r\n      this.mainPlaylistLoader_.on('loadedplaylist', this.excludeNonUsableThenChangePlaylist_.bind(this));\r\n    }\r\n    excludeNonUsableThenChangePlaylist_() {\r\n      this.excludeNonUsablePlaylistsByKeyId_();\r\n      this.fastQualityChange_();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns a function that acts as the Enable/disable playlist function.\r\n   *\r\n   * @param {PlaylistLoader} loader - The main playlist loader\r\n   * @param {string} playlistID - id of the playlist\r\n   * @param {Function} changePlaylistFn - A function to be called after a\r\n   * playlist's enabled-state has been changed. Will NOT be called if a\r\n   * playlist's enabled-state is unchanged\r\n   * @param {boolean=} enable - Value to set the playlist enabled-state to\r\n   * or if undefined returns the current enabled-state for the playlist\r\n   * @return {Function} Function for setting/getting enabled\r\n   */\r\n\r\n  const enableFunction = (loader, playlistID, changePlaylistFn) => enable => {\r\n    const playlist = loader.main.playlists[playlistID];\r\n    const incompatible = isIncompatible(playlist);\r\n    const currentlyEnabled = isEnabled(playlist);\r\n    if (typeof enable === 'undefined') {\r\n      return currentlyEnabled;\r\n    }\r\n    if (enable) {\r\n      delete playlist.disabled;\r\n    } else {\r\n      playlist.disabled = true;\r\n    }\r\n    const metadata = {\r\n      renditionInfo: {\r\n        id: playlistID,\r\n        bandwidth: playlist.attributes.BANDWIDTH,\r\n        resolution: playlist.attributes.RESOLUTION,\r\n        codecs: playlist.attributes.CODECS\r\n      },\r\n      cause: 'fast-quality'\r\n    };\r\n    if (enable !== currentlyEnabled && !incompatible) {\r\n      // Ensure the outside world knows about our changes\r\n      if (enable) {\r\n        // call fast quality change only when the playlist is enabled\r\n        changePlaylistFn(playlist);\r\n        loader.trigger({\r\n          type: 'renditionenabled',\r\n          metadata\r\n        });\r\n      } else {\r\n        loader.trigger({\r\n          type: 'renditiondisabled',\r\n          metadata\r\n        });\r\n      }\r\n    }\r\n    return enable;\r\n  };\r\n  /**\r\n   * The representation object encapsulates the publicly visible information\r\n   * in a media playlist along with a setter/getter-type function (enabled)\r\n   * for changing the enabled-state of a particular playlist entry\r\n   *\r\n   * @class Representation\r\n   */\r\n\r\n  class Representation {\r\n    constructor(vhsHandler, playlist, id) {\r\n      const {\r\n        playlistController_: pc\r\n      } = vhsHandler;\r\n      const qualityChangeFunction = pc.fastQualityChange_.bind(pc); // some playlist attributes are optional\r\n\r\n      if (playlist.attributes) {\r\n        const resolution = playlist.attributes.RESOLUTION;\r\n        this.width = resolution && resolution.width;\r\n        this.height = resolution && resolution.height;\r\n        this.bandwidth = playlist.attributes.BANDWIDTH;\r\n        this.frameRate = playlist.attributes['FRAME-RATE'];\r\n      }\r\n      this.codecs = codecsForPlaylist(pc.main(), playlist);\r\n      this.playlist = playlist; // The id is simply the ordinality of the media playlist\r\n      // within the main playlist\r\n\r\n      this.id = id; // Partially-apply the enableFunction to create a playlist-\r\n      // specific variant\r\n\r\n      this.enabled = enableFunction(vhsHandler.playlists, playlist.id, qualityChangeFunction);\r\n    }\r\n  }\r\n  /**\r\n   * A mixin function that adds the `representations` api to an instance\r\n   * of the VhsHandler class\r\n   *\r\n   * @param {VhsHandler} vhsHandler - An instance of VhsHandler to add the\r\n   * representation API into\r\n   */\r\n\r\n  const renditionSelectionMixin = function (vhsHandler) {\r\n    // Add a single API-specific function to the VhsHandler instance\r\n    vhsHandler.representations = () => {\r\n      const main = vhsHandler.playlistController_.main();\r\n      const playlists = isAudioOnly(main) ? vhsHandler.playlistController_.getAudioTrackPlaylists_() : main.playlists;\r\n      if (!playlists) {\r\n        return [];\r\n      }\r\n      return playlists.filter(media => !isIncompatible(media)).map((e, i) => new Representation(vhsHandler, e, e.id));\r\n    };\r\n  };\r\n\r\n  /**\r\n   * @file playback-watcher.js\r\n   *\r\n   * Playback starts, and now my watch begins. It shall not end until my death. I shall\r\n   * take no wait, hold no uncleared timeouts, father no bad seeks. I shall wear no crowns\r\n   * and win no glory. I shall live and die at my post. I am the corrector of the underflow.\r\n   * I am the watcher of gaps. I am the shield that guards the realms of seekable. I pledge\r\n   * my life and honor to the Playback Watch, for this Player and all the Players to come.\r\n   */\r\n\r\n  const timerCancelEvents = ['seeking', 'seeked', 'pause', 'playing', 'error'];\r\n  /**\r\n   * @class PlaybackWatcher\r\n   */\r\n\r\n  class PlaybackWatcher extends videojs.EventTarget {\r\n    /**\r\n     * Represents an PlaybackWatcher object.\r\n     *\r\n     * @class\r\n     * @param {Object} options an object that includes the tech and settings\r\n     */\r\n    constructor(options) {\r\n      super();\r\n      this.playlistController_ = options.playlistController;\r\n      this.tech_ = options.tech;\r\n      this.seekable = options.seekable;\r\n      this.allowSeeksWithinUnsafeLiveWindow = options.allowSeeksWithinUnsafeLiveWindow;\r\n      this.liveRangeSafeTimeDelta = options.liveRangeSafeTimeDelta;\r\n      this.media = options.media;\r\n      this.playedRanges_ = [];\r\n      this.consecutiveUpdates = 0;\r\n      this.lastRecordedTime = null;\r\n      this.checkCurrentTimeTimeout_ = null;\r\n      this.logger_ = logger('PlaybackWatcher');\r\n      this.logger_('initialize');\r\n      const playHandler = () => this.monitorCurrentTime_();\r\n      const canPlayHandler = () => this.monitorCurrentTime_();\r\n      const waitingHandler = () => this.techWaiting_();\r\n      const cancelTimerHandler = () => this.resetTimeUpdate_();\r\n      const pc = this.playlistController_;\r\n      const loaderTypes = ['main', 'subtitle', 'audio'];\r\n      const loaderChecks = {};\r\n      loaderTypes.forEach(type => {\r\n        loaderChecks[type] = {\r\n          reset: () => this.resetSegmentDownloads_(type),\r\n          updateend: () => this.checkSegmentDownloads_(type)\r\n        };\r\n        pc[`${type}SegmentLoader_`].on('appendsdone', loaderChecks[type].updateend); // If a rendition switch happens during a playback stall where the buffer\r\n        // isn't changing we want to reset. We cannot assume that the new rendition\r\n        // will also be stalled, until after new appends.\r\n\r\n        pc[`${type}SegmentLoader_`].on('playlistupdate', loaderChecks[type].reset); // Playback stalls should not be detected right after seeking.\r\n        // This prevents one segment playlists (single vtt or single segment content)\r\n        // from being detected as stalling. As the buffer will not change in those cases, since\r\n        // the buffer is the entire video duration.\r\n\r\n        this.tech_.on(['seeked', 'seeking'], loaderChecks[type].reset);\r\n      });\r\n      /**\r\n       * We check if a seek was into a gap through the following steps:\r\n       * 1. We get a seeking event and we do not get a seeked event. This means that\r\n       *    a seek was attempted but not completed.\r\n       * 2. We run `fixesBadSeeks_` on segment loader appends. This means that we already\r\n       *    removed everything from our buffer and appended a segment, and should be ready\r\n       *    to check for gaps.\r\n       */\r\n\r\n      const setSeekingHandlers = fn => {\r\n        ['main', 'audio'].forEach(type => {\r\n          pc[`${type}SegmentLoader_`][fn]('appended', this.seekingAppendCheck_);\r\n        });\r\n      };\r\n      this.seekingAppendCheck_ = () => {\r\n        if (this.fixesBadSeeks_()) {\r\n          this.consecutiveUpdates = 0;\r\n          this.lastRecordedTime = this.tech_.currentTime();\r\n          setSeekingHandlers('off');\r\n        }\r\n      };\r\n      this.clearSeekingAppendCheck_ = () => setSeekingHandlers('off');\r\n      this.watchForBadSeeking_ = () => {\r\n        this.clearSeekingAppendCheck_();\r\n        setSeekingHandlers('on');\r\n      };\r\n      this.tech_.on('seeked', this.clearSeekingAppendCheck_);\r\n      this.tech_.on('seeking', this.watchForBadSeeking_);\r\n      this.tech_.on('waiting', waitingHandler);\r\n      this.tech_.on(timerCancelEvents, cancelTimerHandler);\r\n      this.tech_.on('canplay', canPlayHandler);\r\n      /*\r\n        An edge case exists that results in gaps not being skipped when they exist at the beginning of a stream. This case\r\n        is surfaced in one of two ways:\r\n         1)  The `waiting` event is fired before the player has buffered content, making it impossible\r\n            to find or skip the gap. The `waiting` event is followed by a `play` event. On first play\r\n            we can check if playback is stalled due to a gap, and skip the gap if necessary.\r\n        2)  A source with a gap at the beginning of the stream is loaded programatically while the player\r\n            is in a playing state. To catch this case, it's important that our one-time play listener is setup\r\n            even if the player is in a playing state\r\n      */\r\n\r\n      this.tech_.one('play', playHandler); // Define the dispose function to clean up our events\r\n\r\n      this.dispose = () => {\r\n        this.clearSeekingAppendCheck_();\r\n        this.logger_('dispose');\r\n        this.tech_.off('waiting', waitingHandler);\r\n        this.tech_.off(timerCancelEvents, cancelTimerHandler);\r\n        this.tech_.off('canplay', canPlayHandler);\r\n        this.tech_.off('play', playHandler);\r\n        this.tech_.off('seeking', this.watchForBadSeeking_);\r\n        this.tech_.off('seeked', this.clearSeekingAppendCheck_);\r\n        loaderTypes.forEach(type => {\r\n          pc[`${type}SegmentLoader_`].off('appendsdone', loaderChecks[type].updateend);\r\n          pc[`${type}SegmentLoader_`].off('playlistupdate', loaderChecks[type].reset);\r\n          this.tech_.off(['seeked', 'seeking'], loaderChecks[type].reset);\r\n        });\r\n        if (this.checkCurrentTimeTimeout_) {\r\n          window.clearTimeout(this.checkCurrentTimeTimeout_);\r\n        }\r\n        this.resetTimeUpdate_();\r\n      };\r\n    }\r\n    /**\r\n     * Periodically check current time to see if playback stopped\r\n     *\r\n     * @private\r\n     */\r\n\r\n    monitorCurrentTime_() {\r\n      this.checkCurrentTime_();\r\n      if (this.checkCurrentTimeTimeout_) {\r\n        window.clearTimeout(this.checkCurrentTimeTimeout_);\r\n      } // 42 = 24 fps // 250 is what Webkit uses // FF uses 15\r\n\r\n      this.checkCurrentTimeTimeout_ = window.setTimeout(this.monitorCurrentTime_.bind(this), 250);\r\n    }\r\n    /**\r\n     * Reset stalled download stats for a specific type of loader\r\n     *\r\n     * @param {string} type\r\n     *        The segment loader type to check.\r\n     *\r\n     * @listens SegmentLoader#playlistupdate\r\n     * @listens Tech#seeking\r\n     * @listens Tech#seeked\r\n     */\r\n\r\n    resetSegmentDownloads_(type) {\r\n      const loader = this.playlistController_[`${type}SegmentLoader_`];\r\n      if (this[`${type}StalledDownloads_`] > 0) {\r\n        this.logger_(`resetting possible stalled download count for ${type} loader`);\r\n      }\r\n      this[`${type}StalledDownloads_`] = 0;\r\n      this[`${type}Buffered_`] = loader.buffered_();\r\n    }\r\n    /**\r\n     * Checks on every segment `appendsdone` to see\r\n     * if segment appends are making progress. If they are not\r\n     * and we are still downloading bytes. We exclude the playlist.\r\n     *\r\n     * @param {string} type\r\n     *        The segment loader type to check.\r\n     *\r\n     * @listens SegmentLoader#appendsdone\r\n     */\r\n\r\n    checkSegmentDownloads_(type) {\r\n      const pc = this.playlistController_;\r\n      const loader = pc[`${type}SegmentLoader_`];\r\n      const buffered = loader.buffered_();\r\n      const isBufferedDifferent = isRangeDifferent(this[`${type}Buffered_`], buffered);\r\n      this[`${type}Buffered_`] = buffered; // if another watcher is going to fix the issue or\r\n      // the buffered value for this loader changed\r\n      // appends are working\r\n\r\n      if (isBufferedDifferent) {\r\n        const metadata = {\r\n          bufferedRanges: buffered\r\n        };\r\n        pc.trigger({\r\n          type: 'bufferedrangeschanged',\r\n          metadata\r\n        });\r\n        this.resetSegmentDownloads_(type);\r\n        return;\r\n      }\r\n      this[`${type}StalledDownloads_`]++;\r\n      this.logger_(`found #${this[`${type}StalledDownloads_`]} ${type} appends that did not increase buffer (possible stalled download)`, {\r\n        playlistId: loader.playlist_ && loader.playlist_.id,\r\n        buffered: timeRangesToArray(buffered)\r\n      }); // after 10 possibly stalled appends with no reset, exclude\r\n\r\n      if (this[`${type}StalledDownloads_`] < 10) {\r\n        return;\r\n      }\r\n      this.logger_(`${type} loader stalled download exclusion`);\r\n      this.resetSegmentDownloads_(type);\r\n      this.tech_.trigger({\r\n        type: 'usage',\r\n        name: `vhs-${type}-download-exclusion`\r\n      });\r\n      if (type === 'subtitle') {\r\n        return;\r\n      } // TODO: should we exclude audio tracks rather than main tracks\r\n      // when type is audio?\r\n\r\n      pc.excludePlaylist({\r\n        error: {\r\n          message: `Excessive ${type} segment downloading detected.`\r\n        },\r\n        playlistExclusionDuration: Infinity\r\n      });\r\n    }\r\n    /**\r\n     * The purpose of this function is to emulate the \"waiting\" event on\r\n     * browsers that do not emit it when they are waiting for more\r\n     * data to continue playback\r\n     *\r\n     * @private\r\n     */\r\n\r\n    checkCurrentTime_() {\r\n      if (this.tech_.paused() || this.tech_.seeking()) {\r\n        return;\r\n      }\r\n      const currentTime = this.tech_.currentTime();\r\n      const buffered = this.tech_.buffered();\r\n      if (this.lastRecordedTime === currentTime && (!buffered.length || currentTime + SAFE_TIME_DELTA >= buffered.end(buffered.length - 1))) {\r\n        // If current time is at the end of the final buffered region, then any playback\r\n        // stall is most likely caused by buffering in a low bandwidth environment. The tech\r\n        // should fire a `waiting` event in this scenario, but due to browser and tech\r\n        // inconsistencies. Calling `techWaiting_` here allows us to simulate\r\n        // responding to a native `waiting` event when the tech fails to emit one.\r\n        return this.techWaiting_();\r\n      }\r\n      if (this.consecutiveUpdates >= 5 && currentTime === this.lastRecordedTime) {\r\n        this.consecutiveUpdates++;\r\n        this.waiting_();\r\n      } else if (currentTime === this.lastRecordedTime) {\r\n        this.consecutiveUpdates++;\r\n      } else {\r\n        this.playedRanges_.push(createTimeRanges([this.lastRecordedTime, currentTime]));\r\n        const metadata = {\r\n          playedRanges: this.playedRanges_\r\n        };\r\n        this.playlistController_.trigger({\r\n          type: 'playedrangeschanged',\r\n          metadata\r\n        });\r\n        this.consecutiveUpdates = 0;\r\n        this.lastRecordedTime = currentTime;\r\n      }\r\n    }\r\n    /**\r\n     * Resets the 'timeupdate' mechanism designed to detect that we are stalled\r\n     *\r\n     * @private\r\n     */\r\n\r\n    resetTimeUpdate_() {\r\n      this.consecutiveUpdates = 0;\r\n    }\r\n    /**\r\n     * Fixes situations where there's a bad seek\r\n     *\r\n     * @return {boolean} whether an action was taken to fix the seek\r\n     * @private\r\n     */\r\n\r\n    fixesBadSeeks_() {\r\n      const seeking = this.tech_.seeking();\r\n      if (!seeking) {\r\n        return false;\r\n      } // TODO: It's possible that these seekable checks should be moved out of this function\r\n      // and into a function that runs on seekablechange. It's also possible that we only need\r\n      // afterSeekableWindow as the buffered check at the bottom is good enough to handle before\r\n      // seekable range.\r\n\r\n      const seekable = this.seekable();\r\n      const currentTime = this.tech_.currentTime();\r\n      const isAfterSeekableRange = this.afterSeekableWindow_(seekable, currentTime, this.media(), this.allowSeeksWithinUnsafeLiveWindow);\r\n      let seekTo;\r\n      if (isAfterSeekableRange) {\r\n        const seekableEnd = seekable.end(seekable.length - 1); // sync to live point (if VOD, our seekable was updated and we're simply adjusting)\r\n\r\n        seekTo = seekableEnd;\r\n      }\r\n      if (this.beforeSeekableWindow_(seekable, currentTime)) {\r\n        const seekableStart = seekable.start(0); // sync to the beginning of the live window\r\n        // provide a buffer of .1 seconds to handle rounding/imprecise numbers\r\n\r\n        seekTo = seekableStart + (\r\n        // if the playlist is too short and the seekable range is an exact time (can\r\n        // happen in live with a 3 segment playlist), then don't use a time delta\r\n        seekableStart === seekable.end(0) ? 0 : SAFE_TIME_DELTA);\r\n      }\r\n      if (typeof seekTo !== 'undefined') {\r\n        this.logger_(`Trying to seek outside of seekable at time ${currentTime} with ` + `seekable range ${printableRange(seekable)}. Seeking to ` + `${seekTo}.`);\r\n        this.tech_.setCurrentTime(seekTo);\r\n        return true;\r\n      }\r\n      const sourceUpdater = this.playlistController_.sourceUpdater_;\r\n      const buffered = this.tech_.buffered();\r\n      const audioBuffered = sourceUpdater.audioBuffer ? sourceUpdater.audioBuffered() : null;\r\n      const videoBuffered = sourceUpdater.videoBuffer ? sourceUpdater.videoBuffered() : null;\r\n      const media = this.media(); // verify that at least two segment durations or one part duration have been\r\n      // appended before checking for a gap.\r\n\r\n      const minAppendedDuration = media.partTargetDuration ? media.partTargetDuration : (media.targetDuration - TIME_FUDGE_FACTOR) * 2; // verify that at least two segment durations have been\r\n      // appended before checking for a gap.\r\n\r\n      const bufferedToCheck = [audioBuffered, videoBuffered];\r\n      for (let i = 0; i < bufferedToCheck.length; i++) {\r\n        // skip null buffered\r\n        if (!bufferedToCheck[i]) {\r\n          continue;\r\n        }\r\n        const timeAhead = timeAheadOf(bufferedToCheck[i], currentTime); // if we are less than two video/audio segment durations or one part\r\n        // duration behind we haven't appended enough to call this a bad seek.\r\n\r\n        if (timeAhead < minAppendedDuration) {\r\n          return false;\r\n        }\r\n      }\r\n      const nextRange = findNextRange(buffered, currentTime); // we have appended enough content, but we don't have anything buffered\r\n      // to seek over the gap\r\n\r\n      if (nextRange.length === 0) {\r\n        return false;\r\n      }\r\n      seekTo = nextRange.start(0) + SAFE_TIME_DELTA;\r\n      this.logger_(`Buffered region starts (${nextRange.start(0)}) ` + ` just beyond seek point (${currentTime}). Seeking to ${seekTo}.`);\r\n      this.tech_.setCurrentTime(seekTo);\r\n      return true;\r\n    }\r\n    /**\r\n     * Handler for situations when we determine the player is waiting.\r\n     *\r\n     * @private\r\n     */\r\n\r\n    waiting_() {\r\n      if (this.techWaiting_()) {\r\n        return;\r\n      } // All tech waiting checks failed. Use last resort correction\r\n\r\n      const currentTime = this.tech_.currentTime();\r\n      const buffered = this.tech_.buffered();\r\n      const currentRange = findRange(buffered, currentTime); // Sometimes the player can stall for unknown reasons within a contiguous buffered\r\n      // region with no indication that anything is amiss (seen in Firefox). Seeking to\r\n      // currentTime is usually enough to kickstart the player. This checks that the player\r\n      // is currently within a buffered region before attempting a corrective seek.\r\n      // Chrome does not appear to continue `timeupdate` events after a `waiting` event\r\n      // until there is ~ 3 seconds of forward buffer available. PlaybackWatcher should also\r\n      // make sure there is ~3 seconds of forward buffer before taking any corrective action\r\n      // to avoid triggering an `unknownwaiting` event when the network is slow.\r\n\r\n      if (currentRange.length && currentTime + 3 <= currentRange.end(0)) {\r\n        this.resetTimeUpdate_();\r\n        this.tech_.setCurrentTime(currentTime);\r\n        this.logger_(`Stopped at ${currentTime} while inside a buffered region ` + `[${currentRange.start(0)} -> ${currentRange.end(0)}]. Attempting to resume ` + 'playback by seeking to the current time.'); // unknown waiting corrections may be useful for monitoring QoS\r\n\r\n        this.tech_.trigger({\r\n          type: 'usage',\r\n          name: 'vhs-unknown-waiting'\r\n        });\r\n        return;\r\n      }\r\n    }\r\n    /**\r\n     * Handler for situations when the tech fires a `waiting` event\r\n     *\r\n     * @return {boolean}\r\n     *         True if an action (or none) was needed to correct the waiting. False if no\r\n     *         checks passed\r\n     * @private\r\n     */\r\n\r\n    techWaiting_() {\r\n      const seekable = this.seekable();\r\n      const currentTime = this.tech_.currentTime();\r\n      if (this.tech_.seeking()) {\r\n        // Tech is seeking or already waiting on another action, no action needed\r\n        return true;\r\n      }\r\n      if (this.beforeSeekableWindow_(seekable, currentTime)) {\r\n        const livePoint = seekable.end(seekable.length - 1);\r\n        this.logger_(`Fell out of live window at time ${currentTime}. Seeking to ` + `live point (seekable end) ${livePoint}`);\r\n        this.resetTimeUpdate_();\r\n        this.tech_.setCurrentTime(livePoint); // live window resyncs may be useful for monitoring QoS\r\n\r\n        this.tech_.trigger({\r\n          type: 'usage',\r\n          name: 'vhs-live-resync'\r\n        });\r\n        return true;\r\n      }\r\n      const sourceUpdater = this.tech_.vhs.playlistController_.sourceUpdater_;\r\n      const buffered = this.tech_.buffered();\r\n      const videoUnderflow = this.videoUnderflow_({\r\n        audioBuffered: sourceUpdater.audioBuffered(),\r\n        videoBuffered: sourceUpdater.videoBuffered(),\r\n        currentTime\r\n      });\r\n      if (videoUnderflow) {\r\n        // Even though the video underflowed and was stuck in a gap, the audio overplayed\r\n        // the gap, leading currentTime into a buffered range. Seeking to currentTime\r\n        // allows the video to catch up to the audio position without losing any audio\r\n        // (only suffering ~3 seconds of frozen video and a pause in audio playback).\r\n        this.resetTimeUpdate_();\r\n        this.tech_.setCurrentTime(currentTime); // video underflow may be useful for monitoring QoS\r\n\r\n        this.tech_.trigger({\r\n          type: 'usage',\r\n          name: 'vhs-video-underflow'\r\n        });\r\n        return true;\r\n      }\r\n      const nextRange = findNextRange(buffered, currentTime); // check for gap\r\n\r\n      if (nextRange.length > 0) {\r\n        this.logger_(`Stopped at ${currentTime} and seeking to ${nextRange.start(0)}`);\r\n        this.resetTimeUpdate_();\r\n        this.skipTheGap_(currentTime);\r\n        return true;\r\n      } // All checks failed. Returning false to indicate failure to correct waiting\r\n\r\n      return false;\r\n    }\r\n    afterSeekableWindow_(seekable, currentTime, playlist, allowSeeksWithinUnsafeLiveWindow = false) {\r\n      if (!seekable.length) {\r\n        // we can't make a solid case if there's no seekable, default to false\r\n        return false;\r\n      }\r\n      let allowedEnd = seekable.end(seekable.length - 1) + SAFE_TIME_DELTA;\r\n      const isLive = !playlist.endList;\r\n      const isLLHLS = typeof playlist.partTargetDuration === 'number';\r\n      if (isLive && (isLLHLS || allowSeeksWithinUnsafeLiveWindow)) {\r\n        allowedEnd = seekable.end(seekable.length - 1) + playlist.targetDuration * 3;\r\n      }\r\n      if (currentTime > allowedEnd) {\r\n        return true;\r\n      }\r\n      return false;\r\n    }\r\n    beforeSeekableWindow_(seekable, currentTime) {\r\n      if (seekable.length &&\r\n      // can't fall before 0 and 0 seekable start identifies VOD stream\r\n      seekable.start(0) > 0 && currentTime < seekable.start(0) - this.liveRangeSafeTimeDelta) {\r\n        return true;\r\n      }\r\n      return false;\r\n    }\r\n    videoUnderflow_({\r\n      videoBuffered,\r\n      audioBuffered,\r\n      currentTime\r\n    }) {\r\n      // audio only content will not have video underflow :)\r\n      if (!videoBuffered) {\r\n        return;\r\n      }\r\n      let gap; // find a gap in demuxed content.\r\n\r\n      if (videoBuffered.length && audioBuffered.length) {\r\n        // in Chrome audio will continue to play for ~3s when we run out of video\r\n        // so we have to check that the video buffer did have some buffer in the\r\n        // past.\r\n        const lastVideoRange = findRange(videoBuffered, currentTime - 3);\r\n        const videoRange = findRange(videoBuffered, currentTime);\r\n        const audioRange = findRange(audioBuffered, currentTime);\r\n        if (audioRange.length && !videoRange.length && lastVideoRange.length) {\r\n          gap = {\r\n            start: lastVideoRange.end(0),\r\n            end: audioRange.end(0)\r\n          };\r\n        } // find a gap in muxed content.\r\n      } else {\r\n        const nextRange = findNextRange(videoBuffered, currentTime); // Even if there is no available next range, there is still a possibility we are\r\n        // stuck in a gap due to video underflow.\r\n\r\n        if (!nextRange.length) {\r\n          gap = this.gapFromVideoUnderflow_(videoBuffered, currentTime);\r\n        }\r\n      }\r\n      if (gap) {\r\n        this.logger_(`Encountered a gap in video from ${gap.start} to ${gap.end}. ` + `Seeking to current time ${currentTime}`);\r\n        return true;\r\n      }\r\n      return false;\r\n    }\r\n    /**\r\n     * Timer callback. If playback still has not proceeded, then we seek\r\n     * to the start of the next buffered region.\r\n     *\r\n     * @private\r\n     */\r\n\r\n    skipTheGap_(scheduledCurrentTime) {\r\n      const buffered = this.tech_.buffered();\r\n      const currentTime = this.tech_.currentTime();\r\n      const nextRange = findNextRange(buffered, currentTime);\r\n      this.resetTimeUpdate_();\r\n      if (nextRange.length === 0 || currentTime !== scheduledCurrentTime) {\r\n        return;\r\n      }\r\n      this.logger_('skipTheGap_:', 'currentTime:', currentTime, 'scheduled currentTime:', scheduledCurrentTime, 'nextRange start:', nextRange.start(0)); // only seek if we still have not played\r\n\r\n      this.tech_.setCurrentTime(nextRange.start(0) + TIME_FUDGE_FACTOR);\r\n      const metadata = {\r\n        gapInfo: {\r\n          from: currentTime,\r\n          to: nextRange.start(0)\r\n        }\r\n      };\r\n      this.playlistController_.trigger({\r\n        type: 'gapjumped',\r\n        metadata\r\n      });\r\n      this.tech_.trigger({\r\n        type: 'usage',\r\n        name: 'vhs-gap-skip'\r\n      });\r\n    }\r\n    gapFromVideoUnderflow_(buffered, currentTime) {\r\n      // At least in Chrome, if there is a gap in the video buffer, the audio will continue\r\n      // playing for ~3 seconds after the video gap starts. This is done to account for\r\n      // video buffer underflow/underrun (note that this is not done when there is audio\r\n      // buffer underflow/underrun -- in that case the video will stop as soon as it\r\n      // encounters the gap, as audio stalls are more noticeable/jarring to a user than\r\n      // video stalls). The player's time will reflect the playthrough of audio, so the\r\n      // time will appear as if we are in a buffered region, even if we are stuck in a\r\n      // \"gap.\"\r\n      //\r\n      // Example:\r\n      // video buffer:   0 => 10.1, 10.2 => 20\r\n      // audio buffer:   0 => 20\r\n      // overall buffer: 0 => 10.1, 10.2 => 20\r\n      // current time: 13\r\n      //\r\n      // Chrome's video froze at 10 seconds, where the video buffer encountered the gap,\r\n      // however, the audio continued playing until it reached ~3 seconds past the gap\r\n      // (13 seconds), at which point it stops as well. Since current time is past the\r\n      // gap, findNextRange will return no ranges.\r\n      //\r\n      // To check for this issue, we see if there is a gap that starts somewhere within\r\n      // a 3 second range (3 seconds +/- 1 second) back from our current time.\r\n      const gaps = findGaps(buffered);\r\n      for (let i = 0; i < gaps.length; i++) {\r\n        const start = gaps.start(i);\r\n        const end = gaps.end(i); // gap is starts no more than 4 seconds back\r\n\r\n        if (currentTime - start < 4 && currentTime - start > 2) {\r\n          return {\r\n            start,\r\n            end\r\n          };\r\n        }\r\n      }\r\n      return null;\r\n    }\r\n  }\r\n  const defaultOptions = {\r\n    errorInterval: 30,\r\n    getSource(next) {\r\n      const tech = this.tech({\r\n        IWillNotUseThisInPlugins: true\r\n      });\r\n      const sourceObj = tech.currentSource_ || this.currentSource();\r\n      return next(sourceObj);\r\n    }\r\n  };\r\n  /**\r\n   * Main entry point for the plugin\r\n   *\r\n   * @param {Player} player a reference to a videojs Player instance\r\n   * @param {Object} [options] an object with plugin options\r\n   * @private\r\n   */\r\n\r\n  const initPlugin = function (player, options) {\r\n    let lastCalled = 0;\r\n    let seekTo = 0;\r\n    const localOptions = merge(defaultOptions, options);\r\n    player.ready(() => {\r\n      player.trigger({\r\n        type: 'usage',\r\n        name: 'vhs-error-reload-initialized'\r\n      });\r\n    });\r\n    /**\r\n     * Player modifications to perform that must wait until `loadedmetadata`\r\n     * has been triggered\r\n     *\r\n     * @private\r\n     */\r\n\r\n    const loadedMetadataHandler = function () {\r\n      if (seekTo) {\r\n        player.currentTime(seekTo);\r\n      }\r\n    };\r\n    /**\r\n     * Set the source on the player element, play, and seek if necessary\r\n     *\r\n     * @param {Object} sourceObj An object specifying the source url and mime-type to play\r\n     * @private\r\n     */\r\n\r\n    const setSource = function (sourceObj) {\r\n      if (sourceObj === null || sourceObj === undefined) {\r\n        return;\r\n      }\r\n      seekTo = player.duration() !== Infinity && player.currentTime() || 0;\r\n      player.one('loadedmetadata', loadedMetadataHandler);\r\n      player.src(sourceObj);\r\n      player.trigger({\r\n        type: 'usage',\r\n        name: 'vhs-error-reload'\r\n      });\r\n      player.play();\r\n    };\r\n    /**\r\n     * Attempt to get a source from either the built-in getSource function\r\n     * or a custom function provided via the options\r\n     *\r\n     * @private\r\n     */\r\n\r\n    const errorHandler = function () {\r\n      // Do not attempt to reload the source if a source-reload occurred before\r\n      // 'errorInterval' time has elapsed since the last source-reload\r\n      if (Date.now() - lastCalled < localOptions.errorInterval * 1000) {\r\n        player.trigger({\r\n          type: 'usage',\r\n          name: 'vhs-error-reload-canceled'\r\n        });\r\n        return;\r\n      }\r\n      if (!localOptions.getSource || typeof localOptions.getSource !== 'function') {\r\n        videojs.log.error('ERROR: reloadSourceOnError - The option getSource must be a function!');\r\n        return;\r\n      }\r\n      lastCalled = Date.now();\r\n      return localOptions.getSource.call(player, setSource);\r\n    };\r\n    /**\r\n     * Unbind any event handlers that were bound by the plugin\r\n     *\r\n     * @private\r\n     */\r\n\r\n    const cleanupEvents = function () {\r\n      player.off('loadedmetadata', loadedMetadataHandler);\r\n      player.off('error', errorHandler);\r\n      player.off('dispose', cleanupEvents);\r\n    };\r\n    /**\r\n     * Cleanup before re-initializing the plugin\r\n     *\r\n     * @param {Object} [newOptions] an object with plugin options\r\n     * @private\r\n     */\r\n\r\n    const reinitPlugin = function (newOptions) {\r\n      cleanupEvents();\r\n      initPlugin(player, newOptions);\r\n    };\r\n    player.on('error', errorHandler);\r\n    player.on('dispose', cleanupEvents); // Overwrite the plugin function so that we can correctly cleanup before\r\n    // initializing the plugin\r\n\r\n    player.reloadSourceOnError = reinitPlugin;\r\n  };\r\n  /**\r\n   * Reload the source when an error is detected as long as there\r\n   * wasn't an error previously within the last 30 seconds\r\n   *\r\n   * @param {Object} [options] an object with plugin options\r\n   */\r\n\r\n  const reloadSourceOnError = function (options) {\r\n    initPlugin(this, options);\r\n  };\r\n  var version$4 = \"3.16.2\";\r\n  var version$3 = \"7.1.0\";\r\n  var version$2 = \"1.3.1\";\r\n  var version$1 = \"7.2.0\";\r\n  var version = \"4.0.2\";\r\n  const Vhs = {\r\n    PlaylistLoader,\r\n    Playlist,\r\n    utils,\r\n    STANDARD_PLAYLIST_SELECTOR: lastBandwidthSelector,\r\n    INITIAL_PLAYLIST_SELECTOR: lowestBitrateCompatibleVariantSelector,\r\n    lastBandwidthSelector,\r\n    movingAverageBandwidthSelector,\r\n    comparePlaylistBandwidth,\r\n    comparePlaylistResolution,\r\n    xhr: xhrFactory()\r\n  }; // Define getter/setters for config properties\r\n\r\n  Object.keys(Config).forEach(prop => {\r\n    Object.defineProperty(Vhs, prop, {\r\n      get() {\r\n        videojs.log.warn(`using Vhs.${prop} is UNSAFE be sure you know what you are doing`);\r\n        return Config[prop];\r\n      },\r\n      set(value) {\r\n        videojs.log.warn(`using Vhs.${prop} is UNSAFE be sure you know what you are doing`);\r\n        if (typeof value !== 'number' || value < 0) {\r\n          videojs.log.warn(`value of Vhs.${prop} must be greater than or equal to 0`);\r\n          return;\r\n        }\r\n        Config[prop] = value;\r\n      }\r\n    });\r\n  });\r\n  const LOCAL_STORAGE_KEY = 'videojs-vhs';\r\n  /**\r\n   * Updates the selectedIndex of the QualityLevelList when a mediachange happens in vhs.\r\n   *\r\n   * @param {QualityLevelList} qualityLevels The QualityLevelList to update.\r\n   * @param {PlaylistLoader} playlistLoader PlaylistLoader containing the new media info.\r\n   * @function handleVhsMediaChange\r\n   */\r\n\r\n  const handleVhsMediaChange = function (qualityLevels, playlistLoader) {\r\n    const newPlaylist = playlistLoader.media();\r\n    let selectedIndex = -1;\r\n    for (let i = 0; i < qualityLevels.length; i++) {\r\n      if (qualityLevels[i].id === newPlaylist.id) {\r\n        selectedIndex = i;\r\n        break;\r\n      }\r\n    }\r\n    qualityLevels.selectedIndex_ = selectedIndex;\r\n    qualityLevels.trigger({\r\n      selectedIndex,\r\n      type: 'change'\r\n    });\r\n  };\r\n  /**\r\n   * Adds quality levels to list once playlist metadata is available\r\n   *\r\n   * @param {QualityLevelList} qualityLevels The QualityLevelList to attach events to.\r\n   * @param {Object} vhs Vhs object to listen to for media events.\r\n   * @function handleVhsLoadedMetadata\r\n   */\r\n\r\n  const handleVhsLoadedMetadata = function (qualityLevels, vhs) {\r\n    vhs.representations().forEach(rep => {\r\n      qualityLevels.addQualityLevel(rep);\r\n    });\r\n    handleVhsMediaChange(qualityLevels, vhs.playlists);\r\n  }; // VHS is a source handler, not a tech. Make sure attempts to use it\r\n  // as one do not cause exceptions.\r\n\r\n  Vhs.canPlaySource = function () {\r\n    return videojs.log.warn('VHS is no longer a tech. Please remove it from ' + 'your player\\'s techOrder.');\r\n  };\r\n  const emeKeySystems = (keySystemOptions, mainPlaylist, audioPlaylist) => {\r\n    if (!keySystemOptions) {\r\n      return keySystemOptions;\r\n    }\r\n    let codecs = {};\r\n    if (mainPlaylist && mainPlaylist.attributes && mainPlaylist.attributes.CODECS) {\r\n      codecs = unwrapCodecList(parseCodecs(mainPlaylist.attributes.CODECS));\r\n    }\r\n    if (audioPlaylist && audioPlaylist.attributes && audioPlaylist.attributes.CODECS) {\r\n      codecs.audio = audioPlaylist.attributes.CODECS;\r\n    }\r\n    const videoContentType = getMimeForCodec(codecs.video);\r\n    const audioContentType = getMimeForCodec(codecs.audio); // upsert the content types based on the selected playlist\r\n\r\n    const keySystemContentTypes = {};\r\n    for (const keySystem in keySystemOptions) {\r\n      keySystemContentTypes[keySystem] = {};\r\n      if (audioContentType) {\r\n        keySystemContentTypes[keySystem].audioContentType = audioContentType;\r\n      }\r\n      if (videoContentType) {\r\n        keySystemContentTypes[keySystem].videoContentType = videoContentType;\r\n      } // Default to using the video playlist's PSSH even though they may be different, as\r\n      // videojs-contrib-eme will only accept one in the options.\r\n      //\r\n      // This shouldn't be an issue for most cases as early intialization will handle all\r\n      // unique PSSH values, and if they aren't, then encrypted events should have the\r\n      // specific information needed for the unique license.\r\n\r\n      if (mainPlaylist.contentProtection && mainPlaylist.contentProtection[keySystem] && mainPlaylist.contentProtection[keySystem].pssh) {\r\n        keySystemContentTypes[keySystem].pssh = mainPlaylist.contentProtection[keySystem].pssh;\r\n      } // videojs-contrib-eme accepts the option of specifying: 'com.some.cdm': 'url'\r\n      // so we need to prevent overwriting the URL entirely\r\n\r\n      if (typeof keySystemOptions[keySystem] === 'string') {\r\n        keySystemContentTypes[keySystem].url = keySystemOptions[keySystem];\r\n      }\r\n    }\r\n    return merge(keySystemOptions, keySystemContentTypes);\r\n  };\r\n  /**\r\n   * @typedef {Object} KeySystems\r\n   *\r\n   * keySystems configuration for https://github.com/videojs/videojs-contrib-eme\r\n   * Note: not all options are listed here.\r\n   *\r\n   * @property {Uint8Array} [pssh]\r\n   *           Protection System Specific Header\r\n   */\r\n\r\n  /**\r\n   * Goes through all the playlists and collects an array of KeySystems options objects\r\n   * containing each playlist's keySystems and their pssh values, if available.\r\n   *\r\n   * @param {Object[]} playlists\r\n   *        The playlists to look through\r\n   * @param {string[]} keySystems\r\n   *        The keySystems to collect pssh values for\r\n   *\r\n   * @return {KeySystems[]}\r\n   *         An array of KeySystems objects containing available key systems and their\r\n   *         pssh values\r\n   */\r\n\r\n  const getAllPsshKeySystemsOptions = (playlists, keySystems) => {\r\n    return playlists.reduce((keySystemsArr, playlist) => {\r\n      if (!playlist.contentProtection) {\r\n        return keySystemsArr;\r\n      }\r\n      const keySystemsOptions = keySystems.reduce((keySystemsObj, keySystem) => {\r\n        const keySystemOptions = playlist.contentProtection[keySystem];\r\n        if (keySystemOptions && keySystemOptions.pssh) {\r\n          keySystemsObj[keySystem] = {\r\n            pssh: keySystemOptions.pssh\r\n          };\r\n        }\r\n        return keySystemsObj;\r\n      }, {});\r\n      if (Object.keys(keySystemsOptions).length) {\r\n        keySystemsArr.push(keySystemsOptions);\r\n      }\r\n      return keySystemsArr;\r\n    }, []);\r\n  };\r\n  /**\r\n   * Returns a promise that waits for the\r\n   * [eme plugin](https://github.com/videojs/videojs-contrib-eme) to create a key session.\r\n   *\r\n   * Works around https://bugs.chromium.org/p/chromium/issues/detail?id=895449 in non-IE11\r\n   * browsers.\r\n   *\r\n   * As per the above ticket, this is particularly important for Chrome, where, if\r\n   * unencrypted content is appended before encrypted content and the key session has not\r\n   * been created, a MEDIA_ERR_DECODE will be thrown once the encrypted content is reached\r\n   * during playback.\r\n   *\r\n   * @param {Object} player\r\n   *        The player instance\r\n   * @param {Object[]} sourceKeySystems\r\n   *        The key systems options from the player source\r\n   * @param {Object} [audioMedia]\r\n   *        The active audio media playlist (optional)\r\n   * @param {Object[]} mainPlaylists\r\n   *        The playlists found on the main playlist object\r\n   *\r\n   * @return {Object}\r\n   *         Promise that resolves when the key session has been created\r\n   */\r\n\r\n  const waitForKeySessionCreation = ({\r\n    player,\r\n    sourceKeySystems,\r\n    audioMedia,\r\n    mainPlaylists\r\n  }) => {\r\n    if (!player.eme.initializeMediaKeys) {\r\n      return Promise.resolve();\r\n    } // TODO should all audio PSSH values be initialized for DRM?\r\n    //\r\n    // All unique video rendition pssh values are initialized for DRM, but here only\r\n    // the initial audio playlist license is initialized. In theory, an encrypted\r\n    // event should be fired if the user switches to an alternative audio playlist\r\n    // where a license is required, but this case hasn't yet been tested. In addition, there\r\n    // may be many alternate audio playlists unlikely to be used (e.g., multiple different\r\n    // languages).\r\n\r\n    const playlists = audioMedia ? mainPlaylists.concat([audioMedia]) : mainPlaylists;\r\n    const keySystemsOptionsArr = getAllPsshKeySystemsOptions(playlists, Object.keys(sourceKeySystems));\r\n    const initializationFinishedPromises = [];\r\n    const keySessionCreatedPromises = []; // Since PSSH values are interpreted as initData, EME will dedupe any duplicates. The\r\n    // only place where it should not be deduped is for ms-prefixed APIs, but\r\n    // the existence of modern EME APIs in addition to\r\n    // ms-prefixed APIs on Edge should prevent this from being a concern.\r\n    // initializeMediaKeys also won't use the webkit-prefixed APIs.\r\n\r\n    keySystemsOptionsArr.forEach(keySystemsOptions => {\r\n      keySessionCreatedPromises.push(new Promise((resolve, reject) => {\r\n        player.tech_.one('keysessioncreated', resolve);\r\n      }));\r\n      initializationFinishedPromises.push(new Promise((resolve, reject) => {\r\n        player.eme.initializeMediaKeys({\r\n          keySystems: keySystemsOptions\r\n        }, err => {\r\n          if (err) {\r\n            reject(err);\r\n            return;\r\n          }\r\n          resolve();\r\n        });\r\n      }));\r\n    }); // The reasons Promise.race is chosen over Promise.any:\r\n    //\r\n    // * Promise.any is only available in Safari 14+.\r\n    // * None of these promises are expected to reject. If they do reject, it might be\r\n    //   better here for the race to surface the rejection, rather than mask it by using\r\n    //   Promise.any.\r\n\r\n    return Promise.race([\r\n    // If a session was previously created, these will all finish resolving without\r\n    // creating a new session, otherwise it will take until the end of all license\r\n    // requests, which is why the key session check is used (to make setup much faster).\r\n    Promise.all(initializationFinishedPromises),\r\n    // Once a single session is created, the browser knows DRM will be used.\r\n    Promise.race(keySessionCreatedPromises)]);\r\n  };\r\n  /**\r\n   * If the [eme](https://github.com/videojs/videojs-contrib-eme) plugin is available, and\r\n   * there are keySystems on the source, sets up source options to prepare the source for\r\n   * eme.\r\n   *\r\n   * @param {Object} player\r\n   *        The player instance\r\n   * @param {Object[]} sourceKeySystems\r\n   *        The key systems options from the player source\r\n   * @param {Object} media\r\n   *        The active media playlist\r\n   * @param {Object} [audioMedia]\r\n   *        The active audio media playlist (optional)\r\n   *\r\n   * @return {boolean}\r\n   *         Whether or not options were configured and EME is available\r\n   */\r\n\r\n  const setupEmeOptions = ({\r\n    player,\r\n    sourceKeySystems,\r\n    media,\r\n    audioMedia\r\n  }) => {\r\n    const sourceOptions = emeKeySystems(sourceKeySystems, media, audioMedia);\r\n    if (!sourceOptions) {\r\n      return false;\r\n    }\r\n    player.currentSource().keySystems = sourceOptions; // eme handles the rest of the setup, so if it is missing\r\n    // do nothing.\r\n\r\n    if (sourceOptions && !player.eme) {\r\n      videojs.log.warn('DRM encrypted source cannot be decrypted without a DRM plugin');\r\n      return false;\r\n    }\r\n    return true;\r\n  };\r\n  const getVhsLocalStorage = () => {\r\n    if (!window.localStorage) {\r\n      return null;\r\n    }\r\n    const storedObject = window.localStorage.getItem(LOCAL_STORAGE_KEY);\r\n    if (!storedObject) {\r\n      return null;\r\n    }\r\n    try {\r\n      return JSON.parse(storedObject);\r\n    } catch (e) {\r\n      // someone may have tampered with the value\r\n      return null;\r\n    }\r\n  };\r\n  const updateVhsLocalStorage = options => {\r\n    if (!window.localStorage) {\r\n      return false;\r\n    }\r\n    let objectToStore = getVhsLocalStorage();\r\n    objectToStore = objectToStore ? merge(objectToStore, options) : options;\r\n    try {\r\n      window.localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(objectToStore));\r\n    } catch (e) {\r\n      // Throws if storage is full (e.g., always on iOS 5+ Safari private mode, where\r\n      // storage is set to 0).\r\n      // https://developer.mozilla.org/en-US/docs/Web/API/Storage/setItem#Exceptions\r\n      // No need to perform any operation.\r\n      return false;\r\n    }\r\n    return objectToStore;\r\n  };\r\n  /**\r\n   * Parses VHS-supported media types from data URIs. See\r\n   * https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Data_URIs\r\n   * for information on data URIs.\r\n   *\r\n   * @param {string} dataUri\r\n   *        The data URI\r\n   *\r\n   * @return {string|Object}\r\n   *         The parsed object/string, or the original string if no supported media type\r\n   *         was found\r\n   */\r\n\r\n  const expandDataUri = dataUri => {\r\n    if (dataUri.toLowerCase().indexOf('data:application/vnd.videojs.vhs+json,') === 0) {\r\n      return JSON.parse(dataUri.substring(dataUri.indexOf(',') + 1));\r\n    } // no known case for this data URI, return the string as-is\r\n\r\n    return dataUri;\r\n  };\r\n  /**\r\n   * Adds a request hook to an xhr object\r\n   *\r\n   * @param {Object} xhr object to add the onRequest hook to\r\n   * @param {function} callback hook function for an xhr request\r\n   */\r\n\r\n  const addOnRequestHook = (xhr, callback) => {\r\n    if (!xhr._requestCallbackSet) {\r\n      xhr._requestCallbackSet = new Set();\r\n    }\r\n    xhr._requestCallbackSet.add(callback);\r\n  };\r\n  /**\r\n   * Adds a response hook to an xhr object\r\n   *\r\n   * @param {Object} xhr object to add the onResponse hook to\r\n   * @param {function} callback hook function for an xhr response\r\n   */\r\n\r\n  const addOnResponseHook = (xhr, callback) => {\r\n    if (!xhr._responseCallbackSet) {\r\n      xhr._responseCallbackSet = new Set();\r\n    }\r\n    xhr._responseCallbackSet.add(callback);\r\n  };\r\n  /**\r\n   * Removes a request hook on an xhr object, deletes the onRequest set if empty.\r\n   *\r\n   * @param {Object} xhr object to remove the onRequest hook from\r\n   * @param {function} callback hook function to remove\r\n   */\r\n\r\n  const removeOnRequestHook = (xhr, callback) => {\r\n    if (!xhr._requestCallbackSet) {\r\n      return;\r\n    }\r\n    xhr._requestCallbackSet.delete(callback);\r\n    if (!xhr._requestCallbackSet.size) {\r\n      delete xhr._requestCallbackSet;\r\n    }\r\n  };\r\n  /**\r\n   * Removes a response hook on an xhr object, deletes the onResponse set if empty.\r\n   *\r\n   * @param {Object} xhr object to remove the onResponse hook from\r\n   * @param {function} callback hook function to remove\r\n   */\r\n\r\n  const removeOnResponseHook = (xhr, callback) => {\r\n    if (!xhr._responseCallbackSet) {\r\n      return;\r\n    }\r\n    xhr._responseCallbackSet.delete(callback);\r\n    if (!xhr._responseCallbackSet.size) {\r\n      delete xhr._responseCallbackSet;\r\n    }\r\n  };\r\n  /**\r\n   * Whether the browser has built-in HLS support.\r\n   */\r\n\r\n  Vhs.supportsNativeHls = function () {\r\n    if (!document || !document.createElement) {\r\n      return false;\r\n    }\r\n    const video = document.createElement('video'); // native HLS is definitely not supported if HTML5 video isn't\r\n\r\n    if (!videojs.getTech('Html5').isSupported()) {\r\n      return false;\r\n    } // HLS manifests can go by many mime-types\r\n\r\n    const canPlay = [\r\n    // Apple santioned\r\n    'application/vnd.apple.mpegurl',\r\n    // Apple sanctioned for backwards compatibility\r\n    'audio/mpegurl',\r\n    // Very common\r\n    'audio/x-mpegurl',\r\n    // Very common\r\n    'application/x-mpegurl',\r\n    // Included for completeness\r\n    'video/x-mpegurl', 'video/mpegurl', 'application/mpegurl'];\r\n    return canPlay.some(function (canItPlay) {\r\n      return /maybe|probably/i.test(video.canPlayType(canItPlay));\r\n    });\r\n  }();\r\n  Vhs.supportsNativeDash = function () {\r\n    if (!document || !document.createElement || !videojs.getTech('Html5').isSupported()) {\r\n      return false;\r\n    }\r\n    return /maybe|probably/i.test(document.createElement('video').canPlayType('application/dash+xml'));\r\n  }();\r\n  Vhs.supportsTypeNatively = type => {\r\n    if (type === 'hls') {\r\n      return Vhs.supportsNativeHls;\r\n    }\r\n    if (type === 'dash') {\r\n      return Vhs.supportsNativeDash;\r\n    }\r\n    return false;\r\n  };\r\n  /**\r\n   * VHS is a source handler, not a tech. Make sure attempts to use it\r\n   * as one do not cause exceptions.\r\n   */\r\n\r\n  Vhs.isSupported = function () {\r\n    return videojs.log.warn('VHS is no longer a tech. Please remove it from ' + 'your player\\'s techOrder.');\r\n  };\r\n  /**\r\n   * A global function for setting an onRequest hook\r\n   *\r\n   * @param {function} callback for request modifiction\r\n   */\r\n\r\n  Vhs.xhr.onRequest = function (callback) {\r\n    addOnRequestHook(Vhs.xhr, callback);\r\n  };\r\n  /**\r\n   * A global function for setting an onResponse hook\r\n   *\r\n   * @param {callback} callback for response data retrieval\r\n   */\r\n\r\n  Vhs.xhr.onResponse = function (callback) {\r\n    addOnResponseHook(Vhs.xhr, callback);\r\n  };\r\n  /**\r\n   * Deletes a global onRequest callback if it exists\r\n   *\r\n   * @param {function} callback to delete from the global set\r\n   */\r\n\r\n  Vhs.xhr.offRequest = function (callback) {\r\n    removeOnRequestHook(Vhs.xhr, callback);\r\n  };\r\n  /**\r\n   * Deletes a global onResponse callback if it exists\r\n   *\r\n   * @param {function} callback to delete from the global set\r\n   */\r\n\r\n  Vhs.xhr.offResponse = function (callback) {\r\n    removeOnResponseHook(Vhs.xhr, callback);\r\n  };\r\n  const Component = videojs.getComponent('Component');\r\n  /**\r\n   * The Vhs Handler object, where we orchestrate all of the parts\r\n   * of VHS to interact with video.js\r\n   *\r\n   * @class VhsHandler\r\n   * @extends videojs.Component\r\n   * @param {Object} source the soruce object\r\n   * @param {Tech} tech the parent tech object\r\n   * @param {Object} options optional and required options\r\n   */\r\n\r\n  class VhsHandler extends Component {\r\n    constructor(source, tech, options) {\r\n      super(tech, options.vhs); // if a tech level `initialBandwidth` option was passed\r\n      // use that over the VHS level `bandwidth` option\r\n\r\n      if (typeof options.initialBandwidth === 'number') {\r\n        this.options_.bandwidth = options.initialBandwidth;\r\n      }\r\n      this.logger_ = logger('VhsHandler'); // we need access to the player in some cases,\r\n      // so, get it from Video.js via the `playerId`\r\n\r\n      if (tech.options_ && tech.options_.playerId) {\r\n        const _player = videojs.getPlayer(tech.options_.playerId);\r\n        this.player_ = _player;\r\n      }\r\n      this.tech_ = tech;\r\n      this.source_ = source;\r\n      this.stats = {};\r\n      this.ignoreNextSeekingEvent_ = false;\r\n      this.setOptions_();\r\n      if (this.options_.overrideNative && tech.overrideNativeAudioTracks && tech.overrideNativeVideoTracks) {\r\n        tech.overrideNativeAudioTracks(true);\r\n        tech.overrideNativeVideoTracks(true);\r\n      } else if (this.options_.overrideNative && (tech.featuresNativeVideoTracks || tech.featuresNativeAudioTracks)) {\r\n        // overriding native VHS only works if audio tracks have been emulated\r\n        // error early if we're misconfigured\r\n        throw new Error('Overriding native VHS requires emulated tracks. ' + 'See https://git.io/vMpjB');\r\n      } // listen for fullscreenchange events for this player so that we\r\n      // can adjust our quality selection quickly\r\n\r\n      this.on(document, ['fullscreenchange', 'webkitfullscreenchange', 'mozfullscreenchange', 'MSFullscreenChange'], event => {\r\n        const fullscreenElement = document.fullscreenElement || document.webkitFullscreenElement || document.mozFullScreenElement || document.msFullscreenElement;\r\n        if (fullscreenElement && fullscreenElement.contains(this.tech_.el())) {\r\n          this.playlistController_.fastQualityChange_();\r\n        } else {\r\n          // When leaving fullscreen, since the in page pixel dimensions should be smaller\r\n          // than full screen, see if there should be a rendition switch down to preserve\r\n          // bandwidth.\r\n          this.playlistController_.checkABR_();\r\n        }\r\n      });\r\n      this.on(this.tech_, 'seeking', function () {\r\n        if (this.ignoreNextSeekingEvent_) {\r\n          this.ignoreNextSeekingEvent_ = false;\r\n          return;\r\n        }\r\n        this.setCurrentTime(this.tech_.currentTime());\r\n      });\r\n      this.on(this.tech_, 'error', function () {\r\n        // verify that the error was real and we are loaded\r\n        // enough to have pc loaded.\r\n        if (this.tech_.error() && this.playlistController_) {\r\n          this.playlistController_.pauseLoading();\r\n        }\r\n      });\r\n      this.on(this.tech_, 'play', this.play);\r\n    }\r\n    /**\r\n     * Set VHS options based on options from configuration, as well as partial\r\n     * options to be passed at a later time.\r\n     *\r\n     * @param {Object} options A partial chunk of config options\r\n     */\r\n\r\n    setOptions_(options = {}) {\r\n      this.options_ = merge(this.options_, options); // defaults\r\n\r\n      this.options_.withCredentials = this.options_.withCredentials || false;\r\n      this.options_.limitRenditionByPlayerDimensions = this.options_.limitRenditionByPlayerDimensions === false ? false : true;\r\n      this.options_.useDevicePixelRatio = this.options_.useDevicePixelRatio || false;\r\n      this.options_.useBandwidthFromLocalStorage = typeof this.source_.useBandwidthFromLocalStorage !== 'undefined' ? this.source_.useBandwidthFromLocalStorage : this.options_.useBandwidthFromLocalStorage || false;\r\n      this.options_.useForcedSubtitles = this.options_.useForcedSubtitles || false;\r\n      this.options_.useNetworkInformationApi = this.options_.useNetworkInformationApi || false;\r\n      this.options_.useDtsForTimestampOffset = this.options_.useDtsForTimestampOffset || false;\r\n      this.options_.customTagParsers = this.options_.customTagParsers || [];\r\n      this.options_.customTagMappers = this.options_.customTagMappers || [];\r\n      this.options_.cacheEncryptionKeys = this.options_.cacheEncryptionKeys || false;\r\n      this.options_.llhls = this.options_.llhls === false ? false : true;\r\n      this.options_.bufferBasedABR = this.options_.bufferBasedABR || false;\r\n      if (typeof this.options_.playlistExclusionDuration !== 'number') {\r\n        this.options_.playlistExclusionDuration = 60;\r\n      }\r\n      if (typeof this.options_.bandwidth !== 'number') {\r\n        if (this.options_.useBandwidthFromLocalStorage) {\r\n          const storedObject = getVhsLocalStorage();\r\n          if (storedObject && storedObject.bandwidth) {\r\n            this.options_.bandwidth = storedObject.bandwidth;\r\n            this.tech_.trigger({\r\n              type: 'usage',\r\n              name: 'vhs-bandwidth-from-local-storage'\r\n            });\r\n          }\r\n          if (storedObject && storedObject.throughput) {\r\n            this.options_.throughput = storedObject.throughput;\r\n            this.tech_.trigger({\r\n              type: 'usage',\r\n              name: 'vhs-throughput-from-local-storage'\r\n            });\r\n          }\r\n        }\r\n      } // if bandwidth was not set by options or pulled from local storage, start playlist\r\n      // selection at a reasonable bandwidth\r\n\r\n      if (typeof this.options_.bandwidth !== 'number') {\r\n        this.options_.bandwidth = Config.INITIAL_BANDWIDTH;\r\n      } // If the bandwidth number is unchanged from the initial setting\r\n      // then this takes precedence over the enableLowInitialPlaylist option\r\n\r\n      this.options_.enableLowInitialPlaylist = this.options_.enableLowInitialPlaylist && this.options_.bandwidth === Config.INITIAL_BANDWIDTH; // grab options passed to player.src\r\n\r\n      ['withCredentials', 'useDevicePixelRatio', 'customPixelRatio', 'limitRenditionByPlayerDimensions', 'bandwidth', 'customTagParsers', 'customTagMappers', 'cacheEncryptionKeys', 'playlistSelector', 'initialPlaylistSelector', 'bufferBasedABR', 'liveRangeSafeTimeDelta', 'llhls', 'useForcedSubtitles', 'useNetworkInformationApi', 'useDtsForTimestampOffset', 'exactManifestTimings', 'leastPixelDiffSelector'].forEach(option => {\r\n        if (typeof this.source_[option] !== 'undefined') {\r\n          this.options_[option] = this.source_[option];\r\n        }\r\n      });\r\n      this.limitRenditionByPlayerDimensions = this.options_.limitRenditionByPlayerDimensions;\r\n      this.useDevicePixelRatio = this.options_.useDevicePixelRatio;\r\n      const customPixelRatio = this.options_.customPixelRatio; // Ensure the custom pixel ratio is a number greater than or equal to 0\r\n\r\n      if (typeof customPixelRatio === 'number' && customPixelRatio >= 0) {\r\n        this.customPixelRatio = customPixelRatio;\r\n      }\r\n    } // alias for public method to set options\r\n\r\n    setOptions(options = {}) {\r\n      this.setOptions_(options);\r\n    }\r\n    /**\r\n     * called when player.src gets called, handle a new source\r\n     *\r\n     * @param {Object} src the source object to handle\r\n     */\r\n\r\n    src(src, type) {\r\n      // do nothing if the src is falsey\r\n      if (!src) {\r\n        return;\r\n      }\r\n      this.setOptions_(); // add main playlist controller options\r\n\r\n      this.options_.src = expandDataUri(this.source_.src);\r\n      this.options_.tech = this.tech_;\r\n      this.options_.externVhs = Vhs;\r\n      this.options_.sourceType = simpleTypeFromSourceType(type); // Whenever we seek internally, we should update the tech\r\n\r\n      this.options_.seekTo = time => {\r\n        this.tech_.setCurrentTime(time);\r\n      }; // pass player to allow for player level eventing on construction.\r\n\r\n      this.options_.player_ = this.player_;\r\n      this.playlistController_ = new PlaylistController(this.options_);\r\n      const playbackWatcherOptions = merge({\r\n        liveRangeSafeTimeDelta: SAFE_TIME_DELTA\r\n      }, this.options_, {\r\n        seekable: () => this.seekable(),\r\n        media: () => this.playlistController_.media(),\r\n        playlistController: this.playlistController_\r\n      });\r\n      this.playbackWatcher_ = new PlaybackWatcher(playbackWatcherOptions);\r\n      this.attachStreamingEventListeners_();\r\n      this.playlistController_.on('error', () => {\r\n        const player = videojs.players[this.tech_.options_.playerId];\r\n        let error = this.playlistController_.error;\r\n        if (typeof error === 'object' && !error.code) {\r\n          error.code = 3;\r\n        } else if (typeof error === 'string') {\r\n          error = {\r\n            message: error,\r\n            code: 3\r\n          };\r\n        }\r\n        player.error(error);\r\n      });\r\n      const defaultSelector = this.options_.bufferBasedABR ? Vhs.movingAverageBandwidthSelector(0.55) : Vhs.STANDARD_PLAYLIST_SELECTOR; // `this` in selectPlaylist should be the VhsHandler for backwards\r\n      // compatibility with < v2\r\n\r\n      this.playlistController_.selectPlaylist = this.selectPlaylist ? this.selectPlaylist.bind(this) : defaultSelector.bind(this);\r\n      this.playlistController_.selectInitialPlaylist = Vhs.INITIAL_PLAYLIST_SELECTOR.bind(this); // re-expose some internal objects for backwards compatibility with < v2\r\n\r\n      this.playlists = this.playlistController_.mainPlaylistLoader_;\r\n      this.mediaSource = this.playlistController_.mediaSource; // Proxy assignment of some properties to the main playlist\r\n      // controller. Using a custom property for backwards compatibility\r\n      // with < v2\r\n\r\n      Object.defineProperties(this, {\r\n        selectPlaylist: {\r\n          get() {\r\n            return this.playlistController_.selectPlaylist;\r\n          },\r\n          set(selectPlaylist) {\r\n            this.playlistController_.selectPlaylist = selectPlaylist.bind(this);\r\n          }\r\n        },\r\n        throughput: {\r\n          get() {\r\n            return this.playlistController_.mainSegmentLoader_.throughput.rate;\r\n          },\r\n          set(throughput) {\r\n            this.playlistController_.mainSegmentLoader_.throughput.rate = throughput; // By setting `count` to 1 the throughput value becomes the starting value\r\n            // for the cumulative average\r\n\r\n            this.playlistController_.mainSegmentLoader_.throughput.count = 1;\r\n          }\r\n        },\r\n        bandwidth: {\r\n          get() {\r\n            let playerBandwidthEst = this.playlistController_.mainSegmentLoader_.bandwidth;\r\n            const networkInformation = window.navigator.connection || window.navigator.mozConnection || window.navigator.webkitConnection;\r\n            const tenMbpsAsBitsPerSecond = 10e6;\r\n            if (this.options_.useNetworkInformationApi && networkInformation) {\r\n              // downlink returns Mbps\r\n              // https://developer.mozilla.org/en-US/docs/Web/API/NetworkInformation/downlink\r\n              const networkInfoBandwidthEstBitsPerSec = networkInformation.downlink * 1000 * 1000; // downlink maxes out at 10 Mbps. In the event that both networkInformationApi and the player\r\n              // estimate a bandwidth greater than 10 Mbps, use the larger of the two estimates to ensure that\r\n              // high quality streams are not filtered out.\r\n\r\n              if (networkInfoBandwidthEstBitsPerSec >= tenMbpsAsBitsPerSecond && playerBandwidthEst >= tenMbpsAsBitsPerSecond) {\r\n                playerBandwidthEst = Math.max(playerBandwidthEst, networkInfoBandwidthEstBitsPerSec);\r\n              } else {\r\n                playerBandwidthEst = networkInfoBandwidthEstBitsPerSec;\r\n              }\r\n            }\r\n            return playerBandwidthEst;\r\n          },\r\n          set(bandwidth) {\r\n            this.playlistController_.mainSegmentLoader_.bandwidth = bandwidth; // setting the bandwidth manually resets the throughput counter\r\n            // `count` is set to zero that current value of `rate` isn't included\r\n            // in the cumulative average\r\n\r\n            this.playlistController_.mainSegmentLoader_.throughput = {\r\n              rate: 0,\r\n              count: 0\r\n            };\r\n          }\r\n        },\r\n        /**\r\n         * `systemBandwidth` is a combination of two serial processes bit-rates. The first\r\n         * is the network bitrate provided by `bandwidth` and the second is the bitrate of\r\n         * the entire process after that - decryption, transmuxing, and appending - provided\r\n         * by `throughput`.\r\n         *\r\n         * Since the two process are serial, the overall system bandwidth is given by:\r\n         *   sysBandwidth = 1 / (1 / bandwidth + 1 / throughput)\r\n         */\r\n        systemBandwidth: {\r\n          get() {\r\n            const invBandwidth = 1 / (this.bandwidth || 1);\r\n            let invThroughput;\r\n            if (this.throughput > 0) {\r\n              invThroughput = 1 / this.throughput;\r\n            } else {\r\n              invThroughput = 0;\r\n            }\r\n            const systemBitrate = Math.floor(1 / (invBandwidth + invThroughput));\r\n            return systemBitrate;\r\n          },\r\n          set() {\r\n            videojs.log.error('The \"systemBandwidth\" property is read-only');\r\n          }\r\n        }\r\n      });\r\n      if (this.options_.bandwidth) {\r\n        this.bandwidth = this.options_.bandwidth;\r\n      }\r\n      if (this.options_.throughput) {\r\n        this.throughput = this.options_.throughput;\r\n      }\r\n      Object.defineProperties(this.stats, {\r\n        bandwidth: {\r\n          get: () => this.bandwidth || 0,\r\n          enumerable: true\r\n        },\r\n        mediaRequests: {\r\n          get: () => this.playlistController_.mediaRequests_() || 0,\r\n          enumerable: true\r\n        },\r\n        mediaRequestsAborted: {\r\n          get: () => this.playlistController_.mediaRequestsAborted_() || 0,\r\n          enumerable: true\r\n        },\r\n        mediaRequestsTimedout: {\r\n          get: () => this.playlistController_.mediaRequestsTimedout_() || 0,\r\n          enumerable: true\r\n        },\r\n        mediaRequestsErrored: {\r\n          get: () => this.playlistController_.mediaRequestsErrored_() || 0,\r\n          enumerable: true\r\n        },\r\n        mediaTransferDuration: {\r\n          get: () => this.playlistController_.mediaTransferDuration_() || 0,\r\n          enumerable: true\r\n        },\r\n        mediaBytesTransferred: {\r\n          get: () => this.playlistController_.mediaBytesTransferred_() || 0,\r\n          enumerable: true\r\n        },\r\n        mediaSecondsLoaded: {\r\n          get: () => this.playlistController_.mediaSecondsLoaded_() || 0,\r\n          enumerable: true\r\n        },\r\n        mediaAppends: {\r\n          get: () => this.playlistController_.mediaAppends_() || 0,\r\n          enumerable: true\r\n        },\r\n        mainAppendsToLoadedData: {\r\n          get: () => this.playlistController_.mainAppendsToLoadedData_() || 0,\r\n          enumerable: true\r\n        },\r\n        audioAppendsToLoadedData: {\r\n          get: () => this.playlistController_.audioAppendsToLoadedData_() || 0,\r\n          enumerable: true\r\n        },\r\n        appendsToLoadedData: {\r\n          get: () => this.playlistController_.appendsToLoadedData_() || 0,\r\n          enumerable: true\r\n        },\r\n        timeToLoadedData: {\r\n          get: () => this.playlistController_.timeToLoadedData_() || 0,\r\n          enumerable: true\r\n        },\r\n        buffered: {\r\n          get: () => timeRangesToArray(this.tech_.buffered()),\r\n          enumerable: true\r\n        },\r\n        currentTime: {\r\n          get: () => this.tech_.currentTime(),\r\n          enumerable: true\r\n        },\r\n        currentSource: {\r\n          get: () => this.tech_.currentSource_,\r\n          enumerable: true\r\n        },\r\n        currentTech: {\r\n          get: () => this.tech_.name_,\r\n          enumerable: true\r\n        },\r\n        duration: {\r\n          get: () => this.tech_.duration(),\r\n          enumerable: true\r\n        },\r\n        main: {\r\n          get: () => this.playlists.main,\r\n          enumerable: true\r\n        },\r\n        playerDimensions: {\r\n          get: () => this.tech_.currentDimensions(),\r\n          enumerable: true\r\n        },\r\n        seekable: {\r\n          get: () => timeRangesToArray(this.tech_.seekable()),\r\n          enumerable: true\r\n        },\r\n        timestamp: {\r\n          get: () => Date.now(),\r\n          enumerable: true\r\n        },\r\n        videoPlaybackQuality: {\r\n          get: () => this.tech_.getVideoPlaybackQuality(),\r\n          enumerable: true\r\n        }\r\n      });\r\n      this.tech_.one('canplay', this.playlistController_.setupFirstPlay.bind(this.playlistController_));\r\n      this.tech_.on('bandwidthupdate', () => {\r\n        if (this.options_.useBandwidthFromLocalStorage) {\r\n          updateVhsLocalStorage({\r\n            bandwidth: this.bandwidth,\r\n            throughput: Math.round(this.throughput)\r\n          });\r\n        }\r\n      });\r\n      this.playlistController_.on('selectedinitialmedia', () => {\r\n        // Add the manual rendition mix-in to VhsHandler\r\n        renditionSelectionMixin(this);\r\n      });\r\n      this.playlistController_.sourceUpdater_.on('createdsourcebuffers', () => {\r\n        this.setupEme_();\r\n      }); // the bandwidth of the primary segment loader is our best\r\n      // estimate of overall bandwidth\r\n\r\n      this.on(this.playlistController_, 'progress', function () {\r\n        this.tech_.trigger('progress');\r\n      }); // In the live case, we need to ignore the very first `seeking` event since\r\n      // that will be the result of the seek-to-live behavior\r\n\r\n      this.on(this.playlistController_, 'firstplay', function () {\r\n        this.ignoreNextSeekingEvent_ = true;\r\n      });\r\n      this.setupQualityLevels_(); // do nothing if the tech has been disposed already\r\n      // this can occur if someone sets the src in player.ready(), for instance\r\n\r\n      if (!this.tech_.el()) {\r\n        return;\r\n      }\r\n      this.mediaSourceUrl_ = window.URL.createObjectURL(this.playlistController_.mediaSource); // If we are playing HLS with MSE in Safari, add source elements for both the blob and manifest URLs.\r\n      // The latter will enable Airplay playback on receiver devices.\r\n\r\n      if ((videojs.browser.IS_ANY_SAFARI || videojs.browser.IS_IOS) && this.options_.overrideNative && this.options_.sourceType === 'hls' && typeof this.tech_.addSourceElement === 'function') {\r\n        this.tech_.addSourceElement(this.mediaSourceUrl_);\r\n        this.tech_.addSourceElement(this.source_.src);\r\n      } else {\r\n        this.tech_.src(this.mediaSourceUrl_);\r\n      }\r\n    }\r\n    createKeySessions_() {\r\n      const audioPlaylistLoader = this.playlistController_.mediaTypes_.AUDIO.activePlaylistLoader;\r\n      this.logger_('waiting for EME key session creation');\r\n      waitForKeySessionCreation({\r\n        player: this.player_,\r\n        sourceKeySystems: this.source_.keySystems,\r\n        audioMedia: audioPlaylistLoader && audioPlaylistLoader.media(),\r\n        mainPlaylists: this.playlists.main.playlists\r\n      }).then(() => {\r\n        this.logger_('created EME key session');\r\n        this.playlistController_.sourceUpdater_.initializedEme();\r\n      }).catch(err => {\r\n        this.logger_('error while creating EME key session', err);\r\n        this.player_.error({\r\n          message: 'Failed to initialize media keys for EME',\r\n          code: 3\r\n        });\r\n      });\r\n    }\r\n    handleWaitingForKey_() {\r\n      // If waitingforkey is fired, it's possible that the data that's necessary to retrieve\r\n      // the key is in the manifest. While this should've happened on initial source load, it\r\n      // may happen again in live streams where the keys change, and the manifest info\r\n      // reflects the update.\r\n      //\r\n      // Because videojs-contrib-eme compares the PSSH data we send to that of PSSH data it's\r\n      // already requested keys for, we don't have to worry about this generating extraneous\r\n      // requests.\r\n      this.logger_('waitingforkey fired, attempting to create any new key sessions');\r\n      this.createKeySessions_();\r\n    }\r\n    /**\r\n     * If necessary and EME is available, sets up EME options and waits for key session\r\n     * creation.\r\n     *\r\n     * This function also updates the source updater so taht it can be used, as for some\r\n     * browsers, EME must be configured before content is appended (if appending unencrypted\r\n     * content before encrypted content).\r\n     */\r\n\r\n    setupEme_() {\r\n      const audioPlaylistLoader = this.playlistController_.mediaTypes_.AUDIO.activePlaylistLoader;\r\n      const didSetupEmeOptions = setupEmeOptions({\r\n        player: this.player_,\r\n        sourceKeySystems: this.source_.keySystems,\r\n        media: this.playlists.media(),\r\n        audioMedia: audioPlaylistLoader && audioPlaylistLoader.media()\r\n      });\r\n      this.player_.tech_.on('keystatuschange', e => {\r\n        this.playlistController_.updatePlaylistByKeyStatus(e.keyId, e.status);\r\n      });\r\n      this.handleWaitingForKey_ = this.handleWaitingForKey_.bind(this);\r\n      this.player_.tech_.on('waitingforkey', this.handleWaitingForKey_);\r\n      if (!didSetupEmeOptions) {\r\n        // If EME options were not set up, we've done all we could to initialize EME.\r\n        this.playlistController_.sourceUpdater_.initializedEme();\r\n        return;\r\n      }\r\n      this.createKeySessions_();\r\n    }\r\n    /**\r\n     * Initializes the quality levels and sets listeners to update them.\r\n     *\r\n     * @method setupQualityLevels_\r\n     * @private\r\n     */\r\n\r\n    setupQualityLevels_() {\r\n      const player = videojs.players[this.tech_.options_.playerId]; // if there isn't a player or there isn't a qualityLevels plugin\r\n      // or qualityLevels_ listeners have already been setup, do nothing.\r\n\r\n      if (!player || !player.qualityLevels || this.qualityLevels_) {\r\n        return;\r\n      }\r\n      this.qualityLevels_ = player.qualityLevels();\r\n      this.playlistController_.on('selectedinitialmedia', () => {\r\n        handleVhsLoadedMetadata(this.qualityLevels_, this);\r\n      });\r\n      this.playlists.on('mediachange', () => {\r\n        handleVhsMediaChange(this.qualityLevels_, this.playlists);\r\n      });\r\n    }\r\n    /**\r\n     * return the version\r\n     */\r\n\r\n    static version() {\r\n      return {\r\n        '@videojs/http-streaming': version$4,\r\n        'mux.js': version$3,\r\n        'mpd-parser': version$2,\r\n        'm3u8-parser': version$1,\r\n        'aes-decrypter': version\r\n      };\r\n    }\r\n    /**\r\n     * return the version\r\n     */\r\n\r\n    version() {\r\n      return this.constructor.version();\r\n    }\r\n    canChangeType() {\r\n      return SourceUpdater.canChangeType();\r\n    }\r\n    /**\r\n     * Begin playing the video.\r\n     */\r\n\r\n    play() {\r\n      this.playlistController_.play();\r\n    }\r\n    /**\r\n     * a wrapper around the function in PlaylistController\r\n     */\r\n\r\n    setCurrentTime(currentTime) {\r\n      this.playlistController_.setCurrentTime(currentTime);\r\n    }\r\n    /**\r\n     * a wrapper around the function in PlaylistController\r\n     */\r\n\r\n    duration() {\r\n      return this.playlistController_.duration();\r\n    }\r\n    /**\r\n     * a wrapper around the function in PlaylistController\r\n     */\r\n\r\n    seekable() {\r\n      return this.playlistController_.seekable();\r\n    }\r\n    /**\r\n     * Abort all outstanding work and cleanup.\r\n     */\r\n\r\n    dispose() {\r\n      if (this.playbackWatcher_) {\r\n        this.playbackWatcher_.dispose();\r\n      }\r\n      if (this.playlistController_) {\r\n        this.playlistController_.dispose();\r\n      }\r\n      if (this.qualityLevels_) {\r\n        this.qualityLevels_.dispose();\r\n      }\r\n      if (this.tech_ && this.tech_.vhs) {\r\n        delete this.tech_.vhs;\r\n      }\r\n      if (this.mediaSourceUrl_ && window.URL.revokeObjectURL) {\r\n        window.URL.revokeObjectURL(this.mediaSourceUrl_);\r\n        this.mediaSourceUrl_ = null;\r\n      }\r\n      if (this.tech_) {\r\n        this.tech_.off('waitingforkey', this.handleWaitingForKey_);\r\n      }\r\n      super.dispose();\r\n    }\r\n    convertToProgramTime(time, callback) {\r\n      return getProgramTime({\r\n        playlist: this.playlistController_.media(),\r\n        time,\r\n        callback\r\n      });\r\n    } // the player must be playing before calling this\r\n\r\n    seekToProgramTime(programTime, callback, pauseAfterSeek = true, retryCount = 2) {\r\n      return seekToProgramTime({\r\n        programTime,\r\n        playlist: this.playlistController_.media(),\r\n        retryCount,\r\n        pauseAfterSeek,\r\n        seekTo: this.options_.seekTo,\r\n        tech: this.options_.tech,\r\n        callback\r\n      });\r\n    }\r\n    /**\r\n     * Adds the onRequest, onResponse, offRequest and offResponse functions\r\n     * to the VhsHandler xhr Object.\r\n     */\r\n\r\n    setupXhrHooks_() {\r\n      /**\r\n       * A player function for setting an onRequest hook\r\n       *\r\n       * @param {function} callback for request modifiction\r\n       */\r\n      this.xhr.onRequest = callback => {\r\n        addOnRequestHook(this.xhr, callback);\r\n      };\r\n      /**\r\n       * A player function for setting an onResponse hook\r\n       *\r\n       * @param {callback} callback for response data retrieval\r\n       */\r\n\r\n      this.xhr.onResponse = callback => {\r\n        addOnResponseHook(this.xhr, callback);\r\n      };\r\n      /**\r\n       * Deletes a player onRequest callback if it exists\r\n       *\r\n       * @param {function} callback to delete from the player set\r\n       */\r\n\r\n      this.xhr.offRequest = callback => {\r\n        removeOnRequestHook(this.xhr, callback);\r\n      };\r\n      /**\r\n       * Deletes a player onResponse callback if it exists\r\n       *\r\n       * @param {function} callback to delete from the player set\r\n       */\r\n\r\n      this.xhr.offResponse = callback => {\r\n        removeOnResponseHook(this.xhr, callback);\r\n      }; // Trigger an event on the player to notify the user that vhs is ready to set xhr hooks.\r\n      // This allows hooks to be set before the source is set to vhs when handleSource is called.\r\n\r\n      this.player_.trigger('xhr-hooks-ready');\r\n    }\r\n    attachStreamingEventListeners_() {\r\n      const playlistControllerEvents = ['seekablerangeschanged', 'bufferedrangeschanged', 'contentsteeringloadstart', 'contentsteeringloadcomplete', 'contentsteeringparsed'];\r\n      const playbackWatcher = ['gapjumped', 'playedrangeschanged']; // re-emit streaming events and payloads on the player.\r\n\r\n      playlistControllerEvents.forEach(eventName => {\r\n        this.playlistController_.on(eventName, metadata => {\r\n          this.player_.trigger(_extends$1({}, metadata));\r\n        });\r\n      });\r\n      playbackWatcher.forEach(eventName => {\r\n        this.playbackWatcher_.on(eventName, metadata => {\r\n          this.player_.trigger(_extends$1({}, metadata));\r\n        });\r\n      });\r\n    }\r\n  }\r\n  /**\r\n   * The Source Handler object, which informs video.js what additional\r\n   * MIME types are supported and sets up playback. It is registered\r\n   * automatically to the appropriate tech based on the capabilities of\r\n   * the browser it is running in. It is not necessary to use or modify\r\n   * this object in normal usage.\r\n   */\r\n\r\n  const VhsSourceHandler = {\r\n    name: 'videojs-http-streaming',\r\n    VERSION: version$4,\r\n    canHandleSource(srcObj, options = {}) {\r\n      const localOptions = merge(videojs.options, options); // If not opting to experimentalUseMMS, and playback is only supported with MediaSource, cannot handle source\r\n\r\n      if (!localOptions.vhs.experimentalUseMMS && !browserSupportsCodec('avc1.4d400d,mp4a.40.2', false)) {\r\n        return false;\r\n      }\r\n      return VhsSourceHandler.canPlayType(srcObj.type, localOptions);\r\n    },\r\n    handleSource(source, tech, options = {}) {\r\n      const localOptions = merge(videojs.options, options);\r\n      tech.vhs = new VhsHandler(source, tech, localOptions);\r\n      tech.vhs.xhr = xhrFactory();\r\n      tech.vhs.setupXhrHooks_();\r\n      tech.vhs.src(source.src, source.type);\r\n      return tech.vhs;\r\n    },\r\n    canPlayType(type, options) {\r\n      const simpleType = simpleTypeFromSourceType(type);\r\n      if (!simpleType) {\r\n        return '';\r\n      }\r\n      const overrideNative = VhsSourceHandler.getOverrideNative(options);\r\n      const supportsTypeNatively = Vhs.supportsTypeNatively(simpleType);\r\n      const canUseMsePlayback = !supportsTypeNatively || overrideNative;\r\n      return canUseMsePlayback ? 'maybe' : '';\r\n    },\r\n    getOverrideNative(options = {}) {\r\n      const {\r\n        vhs = {}\r\n      } = options;\r\n      const defaultOverrideNative = !(videojs.browser.IS_ANY_SAFARI || videojs.browser.IS_IOS);\r\n      const {\r\n        overrideNative = defaultOverrideNative\r\n      } = vhs;\r\n      return overrideNative;\r\n    }\r\n  };\r\n  /**\r\n   * Check to see if either the native MediaSource or ManagedMediaSource\r\n   * objectx exist and support an MP4 container with both H.264 video\r\n   * and AAC-LC audio.\r\n   *\r\n   * @return {boolean} if  native media sources are supported\r\n   */\r\n\r\n  const supportsNativeMediaSources = () => {\r\n    return browserSupportsCodec('avc1.4d400d,mp4a.40.2', true);\r\n  }; // register source handlers with the appropriate techs\r\n\r\n  if (supportsNativeMediaSources()) {\r\n    videojs.getTech('Html5').registerSourceHandler(VhsSourceHandler, 0);\r\n  }\r\n  videojs.VhsHandler = VhsHandler;\r\n  videojs.VhsSourceHandler = VhsSourceHandler;\r\n  videojs.Vhs = Vhs;\r\n  if (!videojs.use) {\r\n    videojs.registerComponent('Vhs', Vhs);\r\n  }\r\n  videojs.options.vhs = videojs.options.vhs || {};\r\n  if (!videojs.getPlugin || !videojs.getPlugin('reloadSourceOnError')) {\r\n    videojs.registerPlugin('reloadSourceOnError', reloadSourceOnError);\r\n  }\r\n\r\n  return videojs;\r\n\r\n}));\r\n"],"names":["global","factory","exports","module","define","amd","globalThis","self","videojs","this","hooks_","hooks","type","fn","concat","removeHook","index","indexOf","slice","splice","FullscreenApi","prefixed","apiMap","specApi","browserApi","i","length","document","history","LogByTypeFactory","name","log","styles","level","args","lvl","levels","lvlRegExp","RegExp","resultName","unshift","toUpperCase","push","window","console","info","test","Array","isArray","log$1","createLogger$1","logByType","delimiter","createLogger","subName","subDelimiter","subStyles","resultDelimiter","undefined","resultStyles","createNewLogger","newName","newDelimiter","newStyles","all","off","debug","warn","error","DEFAULT","hasOwnProperty","Error","filter","fname","historyItem","clear","disable","enable","toString$1","Object","prototype","toString","keys","object","isObject$1","each","forEach","key","reduce","initial","accum","value","isPlain","call","constructor","merge$2","result","sources","source","values$1","defineLazyProperty","obj","getValue","setter","set","defineProperty","enumerable","writable","options","configurable","get","Obj","freeze","__proto__","isObject","merge","values","ANDROID_VERSION","IS_IPOD","IOS_VERSION","IS_ANDROID","IS_FIREFOX","IS_EDGE","IS_CHROMIUM","IS_CHROME","CHROMIUM_VERSION","CHROME_VERSION","IS_CHROMECAST_RECEIVER","Boolean","cast","framework","CastReceiverContext","IE_VERSION","IS_SAFARI","IS_WINDOWS","IS_IPAD","IS_IPHONE","IS_TIZEN","IS_WEBOS","IS_SMART_TV","TOUCH_ENABLED","isReal","navigator","maxTouchPoints","DocumentTouch","UAD","userAgentData","platform","brands","find","b","brand","version","USER_AGENT","userAgent","match","major","parseFloat","minor","exec","IS_IOS","IS_ANY_SAFARI","browser","isNonBlankString","str","trim","isEl","nodeType","isInFrame","parent","x","createQuerier","method","selector","context","querySelector","ctx","createEl","tagName","properties","attributes","content","el","createElement","getOwnPropertyNames","propName","val","textContent","attrName","setAttribute","appendContent","text","innerText","prependTo","child","firstChild","insertBefore","appendChild","hasClass","element","classToCheck","throwIfWhitespace","classList","contains","addClass","classesToAdd","add","prev","current","split","removeClass","classesToRemove","remove","toggleClass","classToToggle","predicate","className","toggle","setAttributes","attrValue","removeAttribute","getAttributes","tag","knownBooleans","attrs","attrVal","includes","getAttribute","attribute","blockTextSelection","body","focus","onselectstart","unblockTextSelection","getBoundingClientRect","parentNode","rect","k","height","computedStyle","width","findPosition","offsetParent","left","top","offsetWidth","offsetHeight","fullscreenElement","offsetLeft","offsetTop","getPointerPosition","event","translated","y","item","nodeName","toLowerCase","transform","map","Number","assignedSlot","parentElement","WebKitCSSMatrix","transformValue","getComputedStyle","matrix","m41","m42","host","position","boxTarget","target","box","boxW","boxH","offsetY","offsetX","changedTouches","pageX","pageY","Math","max","min","isTextNode$1","emptyEl","removeChild","normalizeContent","createTextNode","node","insertContent","isSingleLeftClick","button","buttons","$","$$","prop","computedStyleValue","e","getPropertyValue","copyStyleSheetsToWindow","win","styleSheets","styleSheet","cssRules","rule","cssText","join","style","head","link","rel","media","mediaText","href","Dom","isTextNode","videojs$1","_windowLoaded","autoSetup","vids","getElementsByTagName","audios","divs","mediaEls","mediaEl","autoSetupTimeout","player","wait","vjs","setTimeout","setWindowLoaded","removeEventListener","readyState","addEventListener","createStyleElement","setTextContent","DomData","WeakMap","_supportsPassive","_guid","newGUID","_cleanUpEvents","elem","has","data","handlers","dispatcher","detachEvent","disabled","delete","_handleMultipleEvents","types","callback","fixEvent","fixed_","returnTrue","returnFalse","isPropagationStopped","isImmediatePropagationStopped","old","deprecatedProps","preventDefault","srcElement","relatedTarget","fromElement","toElement","returnValue","defaultPrevented","stopPropagation","cancelBubble","stopImmediatePropagation","clientX","doc","documentElement","scrollLeft","clientLeft","clientY","scrollTop","clientTop","which","charCode","keyCode","passiveEvents","on","guid","hash","handlersCopy","m","n","opts","supportsPassive","passive","attachEvent","removeType","t","trigger","elemData","ownerDocument","bubbles","targetData","one","func","apply","arguments","any","Events","bind_","uid","bound","bind","throttle","last","performance","now","debounce$1","immediate","timeout","cancel","clearTimeout","debounced","later","Fn","UPDATE_REFRESH_INTERVAL","debounce","EVENT_MAP","EventTarget$2","ael","allowedEvents_","queueTrigger","Map","oldTimeout","size","dispatchEvent","objName","name_","isEvented","eventBusEl_","every","isValidEventType","validateTarget","fnName","validateEventType","validateListener","listener","normalizeListenArgs","isTargetingSelf","shift","listen","EventedMixin","removeListenerOnDispose","removeRemoverOnTargetDispose","wrapper","_this","largs","_this2","targetOrType","typeOrListener","evented","eventBusKey","assign","eventedCallbacks","el_","StatefulMixin","state","setState","stateUpdates","changes","from","to","stateful","defaultState","handleStateChanged","string","replace","w","toTitleCase$1","titleCaseEquals","str1","str2","Str","toTitleCase","Component$1","ready","play","player_","isDisposed_","parentComponent_","options_","id_","id","c","handleLanguagechange","children_","childIndex_","childNameIndex_","setTimeoutIds_","Set","setIntervalIds_","rafIds_","namedRafs_","clearingTimersOnDispose_","initChildren","reportTouchActivity","enableTouchActivity","dispose","readyQueue_","restoreEl","replaceChild","isDisposed","localize","tokens","defaultValue","code","language","languages","primaryCode","primaryLang","localizedString","ret","contentEl","contentEl_","children","getChildById","getChild","getDescendant","names","acc","currentChild","setIcon","iconName","experimentalSvgIcons","xmlnsURL","iconContainer","svgEl","createElementNS","setAttributeNS","useEl","iconIsSet_","addChild","component","componentName","componentClassName","componentClass","ComponentClass","getComponent","refNode","childFound","compEl","parentOptions","handleAdd","playerOptions","newChild","workingChildren","Tech","some","wchild","isTech","buildCSSClass","sync","isReady_","triggerReady","readyQueue","show","hide","lockShowing","unlockShowing","num","skipListeners","dimension","dimensions","widthOrHeight","pxIndex","parseInt","currentDimension","computedWidthOrHeight","isNaN","currentDimensions","currentWidth","currentHeight","getPositions","boundingClientRect","right","bottom","center","blur","handleKeyDown","spatialNavigation","enabled","handleKeyPress","emitTapEvents","touchStart","firstTouch","couldBeTap","touches","xdiff","ydiff","sqrt","noTap","reportUserActivity","report","touchHolding","clearInterval","setInterval","touchEnd","timeoutId","clearTimersOnDispose_","interval","intervalId","requestAnimationFrame","requestNamedAnimationFrame","cancelNamedAnimationFrame","cancelAnimationFrame","_ref4","idName","cancelName","getIsDisabled","getIsExpresslyInert","inert","getIsFocusable","tabIndex","getIsAvailableToBeFocused","isVisibleStyleProperty","elementStyle","thisVisibility","elementCenter","clientWidth","innerWidth","clientHeight","innerHeight","pointContainer","elementFromPoint","isVisible","opacity","ComponentToRegister","isComp","isPrototypeOf","reason","components_","Player","players","playerNames","pname","getRange","valueIndex","ranges","rangeIndex","maxIndex","rangeCheck","createTimeRangesObj","timeRangesObj","start","end","Symbol","iterator","createTimeRanges$1","registerComponent","defaultImplementation","seconds","guide","s","floor","h","gm","gh","Infinity","implementation","setFormatTime","customImplementation","resetFormatTime","formatTime","Time","createTimeRanges","createTimeRange","bufferedPercent","buffered","duration","bufferedDuration","MediaError","message","defaultMessages","isPromise","then","silencePromise","status","metadata","errorTypes","MEDIA_ERR_CUSTOM","MEDIA_ERR_ABORTED","MEDIA_ERR_NETWORK","MEDIA_ERR_DECODE","MEDIA_ERR_SRC_NOT_SUPPORTED","MEDIA_ERR_ENCRYPTED","trackToJson_","track","cues","cue","startTime","endTime","textTrackConverter","tech","trackEls","trackObjs","trackEl","json","src","textTracks","addedTrack","addRemoteTextTrack","addCue","ModalDialog","handleKeyDown_","close_","close","opened_","hasBeenOpened_","hasBeenFilled_","closeable","uncloseable","role","descEl_","description","super","label","previouslyActiveEl_","desc","open","fillAlways","fill","wasPlaying_","paused","pauseOnOpen","pause","hadControls_","controls","conditionalFocus_","opened","conditionalBlur_","temporary","closeable_","temp","controlText","fillWith","parentEl","nextSiblingEl","nextSibling","empty","closeButton","content_","activeEl","activeElement","playerEl","originalEvent","focusableEls","focusableEls_","focusIndex","shiftKey","allChildren","querySelectorAll","HTMLAnchorElement","HTMLAreaElement","hasAttribute","HTMLInputElement","HTMLSelectElement","HTMLTextAreaElement","HTMLButtonElement","HTMLIFrameElement","HTMLObjectElement","HTMLEmbedElement","TrackList","tracks","tracks_","addTrack","labelchange_","removeTrack","rtrack","l","getTrackById","change","addtrack","removetrack","labelchange","disableOthers$1","list","disableOthers","selected","TextTrackList","queueChange_","triggerSelectedlanguagechange","triggerSelectedlanguagechange_","kind","selectedlanguagechange_","TextTrackCueList","setCues_","length_","oldLength","cues_","defineProp","getCueById","VideoTrackKind","alternative","captions","main","sign","subtitles","commentary","AudioTrackKind","TextTrackKind","descriptions","chapters","TextTrackMode","hidden","showing","Track","trackProps","newLabel","parseUrl","url","URL","baseURI","getAbsoluteURL","getFileExtension","path","pathParts","pop","isCrossOrigin","winLoc","location","origin","Url","commonjsGlobal","createCommonjsModule","window_1","_extends_1","_extends","r","__esModule","_extends$1","isFunction_1","alert","confirm","prompt","_createForOfIteratorHelperLoose","o","allowArrayLike","it","next","minLen","_arrayLikeToArray","_unsupportedIterableToArray","done","TypeError","arr","len","arr2","interceptors","InterceptorsStorage","typeToInterceptorsMap_","enabled_","_proto","getIsEnabled","reset","addInterceptor","interceptor","interceptorsSet","removeInterceptor","clearInterceptorsByType","getForType","execute","payload","_step","_iterator","RetryManager","maxAttempts_","delayFactor_","fuzzFactor_","initialDelay_","getMaxAttempts","setMaxAttempts","maxAttempts","getDelayFactor","setDelayFactor","delayFactor","getFuzzFactor","setFuzzFactor","fuzzFactor","getInitialDelay","setInitialDelay","initialDelay","createRetry","_temp","_ref","Retry","currentDelay_","currentAttempt_","_proto2","moveToNextAttempt","delayDelta","shouldRetry","getCurrentDelay","getCurrentMinPossibleDelay","getCurrentMaxPossibleDelay","getCurrentFuzzedDelay","lowValue","highValue","random","retry","httpHandler","decodeResponseBody","err","response","responseBody","statusCode","cause","TextDecoder","charset","contentTypeHeader","contentType","_contentType$split","getCharset","headers","decode","String","fromCharCode","Uint8Array","createXHR","requestInterceptorsStorage","responseInterceptorsStorage","retryManager","lib","default_1","initParams","uri","params","_createXHR","requestType","requestInterceptorPayload","updatedPayload","called","getBody","xhr","responseText","responseType","responseXML","firefoxBugTakenEffect","getXml","isJson","JSON","parse","errorFunc","evt","timeoutTimer","retryTimeout","aborted","responseInterceptorPayload","failureResponse","responseUrl","responseURL","_updatedPayload","loadFunc","useXDR","rawRequest","getAllResponseHeaders","row","parseHeaders","_updatedPayload2","cors","XDomainRequest","XMLHttpRequest","stringify","onreadystatechange","onload","onerror","onprogress","onabort","ontimeout","username","password","withCredentials","abort","setRequestHeader","isEmpty","beforeSend","send","array","forEachArray","default","parseCues","srcContent","parser","WebVTT","Parser","vttjs","StringDecoder","errors","oncue","onparsingerror","onflush","groupCollapsed","groupEnd","flush","loadTrack","crossOrigin","tech_","loaded_","TextTrack","settings","srclang","mode","default_","activeCues_","preload_","preloadTextTracks","activeCues","changed","timeupdateHandler","rvf_","requestVideoFrameCallback","stopTracking","startTracking","defineProperties","newMode","ct","currentTime","active","cancelVideoFrameCallback","originalCue","VTTCue","originalCue_","removeCue","cuechange","AudioTrack","newEnabled","VideoTrack","newSelected","HTMLTrackElement","NONE","LOADED","load","LOADING","ERROR","NORMAL","audio","ListClass","changing_","enabledChange_","TrackClass","capitalName","video","selectedChange_","getterName","privateName","REMOTE","remoteText","remoteTextEl","trackElements","trackElements_","addTrackElement_","trackElement","getTrackElementByTrack_","trackElement_","removeTrackElement_","ALL","doccy","topLevel","document_1","_objCreate","create","F","ParsingError","errorData","parseTimeStamp","input","computeSeconds","f","Settings","parseOptions","keyValueDelim","groupDelim","groups","kv","parseCue","regionList","oInput","consumeTimeStamp","ts","Errors","BadTimeStamp","skipWhitespace","substr","v","region","alt","vals","vals0","integer","percent","vertical","line","lineAlign","snapToLines","align","middle","positionAlign","consumeCueSettings","BadSignature","dflt","defaultKey","a","TEXTAREA_ELEMENT","TAG_NAME","u","ruby","rt","lang","DEFAULT_COLOR_CLASS","white","lime","cyan","red","yellow","magenta","blue","black","TAG_ANNOTATION","NEEDS_PARENT","parseContent","nextToken","shouldAdd","localName","annotation","rootDiv","tagStack","innerHTML","createProcessingInstruction","classes","cl","bgColor","colorName","propValue","strongRTLRanges","isStrongRTLChar","currentRange","determineBidi","cueDiv","nodeStack","childNodes","pushNodes","nextTextNode","charCodeAt","StyleBox","CueStyleBox","styleOptions","color","backgroundColor","display","writingMode","unicodeBidi","applyStyles","div","direction","textAlign","font","whiteSpace","textPos","formatStyle","move","BoxPosition","lh","rects","getClientRects","lineHeight","moveBoxToLinePosition","styleBox","containerBox","boxPositions","boxPosition","linePos","textTrackList","mediaElement","trackList","count","computeLinePos","axis","step","round","maxPosition","initialAxis","abs","ceil","reverse","calculatedPercentage","bestPosition","specifiedPosition","percentage","overlapsOppositeAxis","within","overlapsAny","p","intersectPercentage","findBestPosition","toCSSCompatValues","WebVTT$1","unit","toMove","overlaps","b2","boxes","container","reference","getSimpleBoxPosition","decodeURIComponent","encodeURIComponent","convertCueToDOMTree","cuetext","processCues","overlay","paddedOverlay","margin","hasBeenReset","displayState","shouldCompute","fontSize","decoder","buffer","reportOrThrowError","collectNextLine","pos","parseHeader","ontimestampmap","parseTimestampMap","xy","anchor","VTTRegion","lines","regionAnchorX","regionAnchorY","viewportAnchorX","viewportAnchorY","scroll","onregion","parseRegion","stream","alreadyCollectedLine","hasSubstring","vtt","directionSetting","alignSetting","findAlignSetting","_id","_pauseOnExit","_startTime","_endTime","_text","_region","_vertical","_snapToLines","_line","_lineAlign","_position","_positionAlign","_size","_align","setting","findDirectionSetting","SyntaxError","getCueAsHTML","vttcue","scrollSetting","isValidPercentValue","vttregion","_width","_lines","_regionAnchorX","_regionAnchorY","_viewportAnchorX","_viewportAnchorY","_scroll","findScrollSetting","browserIndex","cueShim","regionShim","nativeVTTCue","nativeVTTRegion","shim","restore","onDurationChange_","onDurationChange","trackProgress_","trackProgress","trackCurrentTime_","trackCurrentTime","stopTrackingCurrentTime_","stopTrackingCurrentTime","disposeSourceHandler_","disposeSourceHandler","queuedHanders_","hasStarted_","props","featuresProgressEvents","manualProgressOn","featuresTimeupdateEvents","manualTimeUpdatesOn","nativeCaptions","nativeTextTracks","featuresNativeTextTracks","emulateTextTracks","autoRemoteTextTracks_","initTrackListeners","nativeControlsForTouch","triggerSourceset","manualProgress","manualProgressOff","stopTrackingProgress","progressInterval","numBufferedPercent","bufferedPercent_","duration_","manualTimeUpdates","manualTimeUpdatesOff","currentTimeInterval","manuallyTriggered","clearTracks","removeRemoteTextTrack","cleanupAutoTextTracks","setCrossOrigin","error_","played","setScrubbing","_isScrubbing","scrubbing","setCurrentTime","_seconds","trackListChanges","addWebVttScript_","script","remoteTracks","remoteTextTracks","handleAddTrack","handleRemoveTrack","updateDisplay","textTracksChanges","addTextTrack","createTrackHelper","createRemoteTextTrack","manualCleanup","htmlTrackElement","remoteTextTrackEls","getVideoPlaybackQuality","requestPictureInPicture","Promise","reject","disablePictureInPicture","setDisablePictureInPicture","cb","setPoster","playsinline","setPlaysinline","overrideNativeAudioTracks","override","overrideNativeVideoTracks","canPlayType","_type","srcObj","techs_","canPlaySource","defaultTechOrder_","featuresVolumeControl","featuresMuteControl","featuresFullscreenResize","featuresPlaybackRate","featuresSourceset","featuresVideoFrameCallback","withSourceHandlers","_Tech","registerSourceHandler","handler","sourceHandlers","can","selectSourceHandler","canHandleSource","sh","originalFn","sourceHandler_","setSource","nativeSourceHandler","currentSource_","handleSource","registerTech","middlewares","middlewareInstances","TERMINATOR","setSourceHelper","mediate","middleware","arg","callMethod","middlewareValue","middlewareIterator","terminated","executeRight","allowedGetters","muted","seekable","volume","ended","allowedSetters","setMuted","setVolume","allowedMediators","mw","mws","getOrCreateFactory","mwFactory","mwf","mwi","lastRun","mwrest","_src","MimetypesKind","opus","ogv","mp4","mov","m4v","mkv","m4a","mp3","aac","caf","flac","oga","wav","m3u8","mpd","jpg","jpeg","gif","png","svg","webp","getMimetype","ext","mimetype","filterSource","newsrc","srcobj","fixSource","backKeyCode","SpatialNavKeyCodes","codes","ff","rw","back","isEventKey","keyName","getEventName","SpatialNavigation","focusableComponents","isListening_","isPaused_","onKeyDown_","lastFocusedComponent_","updateFocusableComponents","refocusComponent","handlePlayerFocus_","handlePlayerBlur_","errorDisplay","stop","actualEvent","substring","action","performMediaAction_","userSeek_","liveTracker","isLive","nextSeekedFromUser","resume","nextFocusedElement","isChildrenOfPlayer","currentComponent","getCurrentComponent","closest","searchForTrackSelect_","currentTarget","searchForChildrenCandidates","componentsArray","items","findSuitableDOMChild","buttonContainer","searchForSuitableChild","suitableChild","curComp","currentFocusedComponent","currentPositions","candidates","isInDirection_","bestCandidate","findBestCandidate_","focusedComponent","currentCenter","minDistance","candidate","candidateCenter","distance","calculateDistance_","srcRect","targetRect","userActive","center1","center2","dx","dy","j","techOrder","techName","getTech","isSupported","loadTech_","ClickableComponent","handleMouseOver_","handleMouseOver","handleMouseOut_","handleMouseOut","handleClick_","handleClick","tabIndex_","createControlTextEl","controlTextEl_","controlText_","localizedText","nonIconControl","noUITitleAttributes","clickHandler","PosterImage","update","update_","crossorigin","poster","setSrc","loading","fontMap","monospace","sansSerif","serif","monospaceSansSerif","monospaceSerif","proportionalSansSerif","proportionalSerif","casual","smallcaps","constructColor","hex","tryUpdateStyle","getCSSPositionValue","updateDisplayHandler","updateDisplayOverlay","toggleDisplay","preselectTrack","screenOrientation","screen","orientation","changeOrientationEvent","modes","userPref","cache_","selectedLanguage","firstDesc","firstCaptions","preferredTrack","clearDisplay","allowMultipleShowingTracks","showingTracks","updateForTrack","descriptionsTrack","captionsSubtitlesTrack","CSS","supports","textTrackDisplay","vjsTextTrackCues","controlBarHeight","controlBar","playerHeight","vjsTextTrackCue","inset","insetStyles","videoHeight","playerWidth","playerAspectRatio","videoAspectRatio","videoWidth","insetInlineMatch","insetBlockMatch","updateDisplayState","overrides","textTrackSettings","getValues","textOpacity","backgroundOpacity","windowColor","windowOpacity","edgeStyle","textShadow","fontPercent","fontFamily","fontVariant","cueEl","isAudio","playerType","dir","Button","BigPlayButton","mouseused_","handleMouseDown","playPromise","playToggle","playFocus","PlayToggle","replay","handlePlay","handlePause","handleEnded","handleSeeked","TimeDisplay","updateTextNode_","span","labelText_","textNode_","enableSmoothSeeking","updateContent","time","formattedTime_","oldNode","CurrentTimeDisplay","getCache","DurationDisplay","RemainingTimeDisplay","displayNegative","remainingTimeDisplay","remainingTime","updateShowing","SeekToLive","updateLiveEdgeStatus","updateLiveEdgeStatusHandler_","textEl_","atLiveEdge","seekToLiveEdge","clamp","number","Num","Slider","handleMouseDown_","handleMouseUp_","handleMouseUp","handleMouseMove_","handleMouseMove","bar","barName","playerEvent","progress","getProgress","progress_","sizeKey","toFixed","getPercent","calculateDistance","spatialNavOptions","spatialNavEnabled","horizontalSeek","stepBack","stepForward","bool","vertical_","percentify","partEls_","loadedText","separator","percentageEl_","seekableEnd","bufferedEnd","percent_","part","dataset","seekBarRect","seekBarPoint","tooltipRect","playerRect","seekBarPointPx","spaceLeftOfPoint","spaceRightOfPoint","pullTooltipBy","write","updateTime","liveWindow","secondsBehind","PlayProgressBar","timeTooltip","MouseTimeDisplay","SeekBar","shouldDisableSeekWhileScrubbingOnMobile","disableSeekWhileScrubbingOnMobile","shouldDisableSeekWhileScrubbingOnMobile_","pendingSeekTime_","setEventHandlers_","updateInterval","enableIntervalHandler_","enableInterval_","disableIntervalHandler_","disableInterval_","toggleVisibility_","visibilityState","getCurrentTime_","liveCurrentTime","currentTime_","seekableStart","videoWasPlaying","newTime","mouseDown","mouseTimeDisplay","handleAction","gotoFraction","STEP_SECONDS","ProgressControl","throttledHandleMouseSeek","handleMouseSeek","handleMouseUpHandler_","handleMouseDownHandler_","seekBar","playProgressBar","seekBarEl","removeListenersAddedOnMousedownAndTouchstart","PictureInPictureToggle","handlePictureInPictureChange","handlePictureInPictureEnabledChange","handlePictureInPictureAudioModeChange","currentType","audioPosterMode","audioOnlyMode","isInPictureInPicture","exitPictureInPicture","pictureInPictureEnabled","enableDocumentPictureInPicture","FullscreenToggle","handleFullscreenChange","fsApi_","fullscreenEnabled","isFullscreen","exitFullscreen","requestFullscreen","rangeBarRect","rangeBarPoint","volumeBarPointPx","updateVolume","MouseVolumeLevelDisplay","VolumeBar","updateLastVolume_","updateARIAAttributes","mouseVolumeLevelDisplay","volumeBarEl","volumeBarRect","volumeBarPoint","checkMuted","ariaValue","volumeAsPercentage_","volumeBeforeDrag","lastVolume_","VolumeControl","volumeBar","checkVolumeSupport","throttledHandleMouseMove","orientationClass","MuteToggle","checkMuteSupport","vol","lastVolume","volumeToSet","updateIcon_","updateControlText_","VolumePanel","inline","volumeControl","handleKeyPressHandler_","volumePanelState_","muteToggle","handleVolumeControlKeyUp","sliderActive_","sliderInactive_","SkipForward","validOptions","skipTime","getSkipForwardTime","toLocaleString","skipButtons","forward","currentVideoTime","SkipBackward","getSkipBackwardTime","backward","Menu","menuButton_","menuButton","focusedChild_","boundHandleBlur_","handleBlur","boundHandleTapClick_","handleTapClick","addEventListenerForItem","removeEventListenerForItem","addItem","childComponent","contentElType","append","btn","buttonPressed_","unpressButton","childComponents","foundComponent","stepChild","MenuButton","buttonClass","handleMenuKeyUp_","handleMenuKeyUp","menu","handleMouseLeave","handleSubmenuKeyDown","createMenu","hideThreshold_","title","titleEl","titleComponent","createItems","buildWrapperCSSClass","menuButtonClass","pressButton","handleSubmenuKeyPress","TrackButton","updateHandler","MenuItem","selectable","isSelected_","multiSelectable","menuItemEl","TextTrackMenuItem","kinds","changeHandler","_this3","handleTracksChange","selectedLanguageChangeHandler","handleSelectedLanguageChange","onchange","Event","createEvent","initEvent","referenceTrack","shouldBeSelected","OffTextTrackMenuItem","allHidden","TextTrackButton","TrackMenuItem","label_","kinds_","kind_","ChaptersTrackMenuItem","ChaptersButton","selectCurrentItem_","track_","findChaptersTrack","setTrack","updateHandler_","remoteTextTrackEl","getMenuCaption","mi","DescriptionsButton","SubtitlesButton","CaptionSettingsMenuItem","CaptionsButton","SubsCapsMenuItem","parentSpan","SubsCapsButton","language_","AudioTrackMenuItem","audioTracks","_this4","featuresNativeAudioTracks","AudioTrackButton","PlaybackRateMenuItem","rate","playbackRate","PlaybackRateMenuButton","labelElId_","updateVisibility","updateLabel","handlePlaybackRateschange","labelEl_","rates","playbackRates","playbackRateSupported","Spacer","ControlBar","ErrorDisplay","TextTrackSelect","selectLabelledbyIds","legendId","labelId","SelectOptions","optionText","optionId","option","TextTrackFieldset","legendElement","legendText","selects","selectConfig","selectConfigs","selectClassName","textTrackSelect","TextTrackSettingsColors","textTrackComponentid","ElFgColorFieldset","fieldSets","ElBgColorFieldset","ElWinColorFieldset","TextTrackSettingsFont","TrackSettingsControls","defaultsDescription","resetButton","doneButton","COLOR_BLACK","COLOR_BLUE","COLOR_CYAN","COLOR_GREEN","COLOR_MAGENTA","COLOR_RED","COLOR_WHITE","COLOR_YELLOW","OPACITY_OPAQUE","OPACITY_SEMI","OPACITY_TRANS","parseOptionValue","renderModalComponents","endDialog","setDefaults","persistTextTrackSettings","bindFunctionsToSelectsAndButtons","restoreSettings","textTrackSettingsColors","textTrackSettingsFont","trackSettingsControls","saveSettings","config","selectedIndex","setValues","setSelectedOption","localStorage","getItem","setItem","removeItem","ttDisplay","RESIZE_OBSERVER_AVAILABLE","ResizeObserver","loadListener_","resizeObserver_","debouncedHandler_","resizeHandler","observe","contentWindow","unloadListener_","unobserve","disconnect","resizeObserver","defaults$1","trackingThreshold","liveTolerance","trackLiveHandler_","trackLive_","handlePlay_","handleFirstTimeupdate_","handleFirstTimeupdate","handleSeeked_","seekToLiveEdge_","reset_","handleDurationchange","toggleTracking","deltaTime","lastTime_","pastSeekEnd_","pastSeekEnd","isBehind","seekedBehindLive_","timeupdateSeen_","behindLiveEdge_","liveui","isTracking","hasStarted","trackingInterval_","timeDiff","nextSeekedFromUser_","lastSeekEnd_","seekableEnds","sort","seekableStarts","behindLiveEdge","updateDom_","els","techEl","techAriaAttrs","techAriaAttr","defaults","initialDisplay","takeFocus","class","preventScroll","forceDisplayTimeout","sourcesetLoad","srcUrls","innerHTMLDescriptorPolyfill","cloneNode","dummy","docFrag","createDocumentFragment","Element","getDescriptor","priority","descriptor","getOwnPropertyDescriptor","firstSourceWatch","resetSourceWatch_","innerDescriptor","HTMLMediaElement","getInnerHTMLDescriptor","appendWrapper","appendFn","retval","srcDescriptorPolyfill","setupSourceset","resetSourceset_","srcDescriptor","getSrcDescriptor","oldSetAttribute","oldLoad","currentSrc","Html5","crossoriginTracks","initNetworkState_","handleLateInit_","enableSourceset","setupSourcesetHandling_","isScrubbing_","hasChildNodes","nodes","nodesLength","removeNodes","proxyNativeTracks_","restoreMetadataTracksInIOSNativePlayer_","setControls","proxyWebkitFullscreen_","disposeMediaElement","metadataTracksPreFullscreenState","takeMetadataTrackSnapshot","storedMode","restoreTrackMode","storedTrack","overrideNative_","lowerCaseType","eventName","proxyNativeTracksForType_","elTracks","techTracks","listeners","removeOldTracks","removeTracks","found","playerElIngest","movingMediaElementInDOM","clone","techId","playerId","preload","settingsAttrs","attr","networkState","loadstartFired","setLoadstartFired","triggerLoadstart","eventsToTrigger","isScrubbing","fastSeek","checkProgress","NaN","endFn","beginFn","webkitPresentationMode","nativeIOSFullscreen","supportsFullScreen","webkitEnterFullScreen","enterFullScreen","HAVE_METADATA","exitFullScreen","webkitDisplayingFullscreen","webkitExitFullScreen","webkitKeys","addSourceElement","srcUrl","mimeType","sourceAttributes","sourceElement","removeSourceElement","sourceElements","resetMediaElement","videoPlaybackQuality","webkitDroppedFrameCount","webkitDecodedFrameCount","droppedVideoFrames","totalVideoFrames","creationTime","TEST_VID","canControlVolume","canControl","canMuteVolume","canControlPlaybackRate","canOverrideAttributes","noop","supportsNativeTextTracks","supportsNativeVideoTracks","videoTracks","supportsNativeAudioTracks","TECH_EVENTS_RETRIGGER","TECH_EVENTS_QUEUE","canplay","canplaythrough","playing","seeked","BREAKPOINT_ORDER","BREAKPOINT_CLASSES","charAt","DEFAULT_BREAKPOINTS","tiny","xsmall","small","medium","large","xlarge","huge","getTagSettings","boundDocumentFullscreenChange_","documentFullscreenChange_","boundFullWindowOnEscKey_","fullWindowOnEscKey","boundUpdateStyleEl_","updateStyleEl_","boundApplyInitTime_","applyInitTime_","boundUpdateCurrentBreakpoint_","updateCurrentBreakpoint_","boundHandleTechClick_","handleTechClick_","boundHandleTechDoubleClick_","handleTechDoubleClick_","boundHandleTechTouchStart_","handleTechTouchStart_","boundHandleTechTouchMove_","handleTechTouchMove_","boundHandleTechTouchEnd_","handleTechTouchEnd_","boundHandleTechTap_","handleTechTap_","boundUpdatePlayerHeightOnAudioOnlyMode_","updatePlayerHeightOnAudioOnlyMode_","isFullscreen_","isPosterFromTech_","queuedCallbacks_","userActive_","debugEnabled_","audioOnlyMode_","audioPosterMode_","audioOnlyCache_","hiddenChildren","tagAttributes","languagesToLower","languages_","resetCache_","poster_","controls_","changingSrc_","playCallbacks_","playTerminatedQueue_","autoplay","plugins","scrubbing_","fullscreenchange","fluid_","playerOptionsCopy","middleware_","parsedSVG","DOMParser","parseFromString","sprite","majorVersion","listenForUserActivity_","breakpoints","responsive","styleEl_","playerElIngest_","divEmbed","tabindex","deviceClassNames","VIDEOJS_NO_DYNAMIC_STYLE","defaultsStyleEl","fill_","fluid","aspectRatio","links","linkEl","techGet_","techCall_","posterImage","privDimension","parsedVal","ratio","aspectRatio_","width_","height_","idClass","ratioParts","ratioMultiplier","unloadTech_","titleTechName","camelTechName","techName_","normalizeAutoplay","techOptions","loop","techCanOverridePoster","TechClass","handleTechReady_","textTracksJson_","eventObj","seeking","handleTechLoadStart_","handleTechSourceset_","handleTechWaiting_","handleTechEnded_","handleTechSeeking_","handleTechPlay_","handleTechPause_","handleTechDurationChange_","handleTechFullscreenChange_","handleTechFullscreenError_","handleTechEnterPictureInPicture_","handleTechLeavePictureInPicture_","handleTechError_","handleTechPosterChange_","handleTechTextData_","handleTechRateChange_","usingNativeControls","addTechControlsListeners_","safety","removeTechControlsListeners_","manualAutoplay_","resolveMuted","previouslyMuted","restoreMuted","mutedPromise","catch","promise","updateSourceCaches_","matchingSources","findMimetype","sourceElSources","sourceEls","matchingSourceEls","sourceObj","updateSourceCaches","playerSrc","currentSource","eventSrc","lastSource_","techSrc","request","lastPlaybackRate","queued","timeWhenWaiting","timeUpdateListener","handleTechCanPlay_","handleTechCanPlayThrough_","handleTechPlaying_","handleTechSeeked_","userActions","click","doubleClick","pictureInPictureElement","userWasActive","cancelable","toggleFullscreenClass_","targetPlayer","isFs","matches","fullscreen","togglePictureInPictureClass_","initTime","inactivityTimeout","defaultPlaybackRate","reduceRight","resolve","play_","isSrcReady","isSafariOrIOS","waitToPlay_","resetProgressBar_","runPlayTerminatedQueue_","runPlayCallbacks_","queue","q","callbacks","isFinite","percentAsDecimal","defaultMuted","isFS","oldValue","fullscreenOptions","offHandler","errorHandler","requestFullscreenHelper_","fsOptions","preferFullWindow","enterFullWindow","exitFullscreenHelper_","exitFullWindow","isFullWindow","docOrigOverflow","overflow","isPiP","isInPictureInPicture_","documentPictureInPicture","pipContainer","titleBar","requestWindow","pipWindow","pipVideo","hotkeys","isContentEditable","excludeElement","handleHotkeys","fullscreenKey","keydownEvent","muteKey","playPauseKey","FSToggle","selectSource","techs","_ref6","findFirstPassingTechSourcePair","outerArray","innerArray","tester","outerChoice","innerChoice","foundSourceAndTech","finder","sourceOrder","handleSrc_","isRetry","resetRetryOnError_","middlewareSource","src_","notSupportedMessage","setTech","stopListeningForErrors","sourceTech","vhs","doReset_","resetControlBarUI_","resetPlaybackRate_","resetVolumeBar_","currentTimeDisplay","durationDisplay","progressControl","loadProgressBar","currentSources","techAutoplay","newPoster","usingNativeControls_","hookFunction","newErr","suppressNotSupportedError","triggerSuppressedError","userActivity_","mouseInProgress","lastMoveX","lastMoveY","handleActivity","handleMouseUpAndMouseLeave","screenX","screenY","isAudio_","enableAudioOnlyUI_","playerChildren","disableAudioOnlyUI_","exitPromises","enablePosterModeUI_","disablePosterModeUI_","toJSON","createModal","modal","currentBreakpoint","candidateBreakpoint","breakpoints_","breakpoint_","removeCurrentBreakpoint_","currentBreakpointClass","responsive_","loadMedia","artist","artwork","tt","getMedia","baseOptions","tagOptions","dataSetup","childName","previousLogLevel_","newRates","html5","userLanguage","navigationUI","pluginStorage","pluginExists","getPlugin","markPluginAsActive","triggerSetupEvent","before","createPluginFactory","PluginSubClass","plugin","instance","getEventHash","Plugin","VERSION","isBasic","basicPluginWrapper","createBasicPlugin","deprecateForMajor","oldName","warned","deprecate","BASE_PLUGIN_NAME","registerPlugin","usingPlugin","hasPlugin","normalizeId","getPlayer","rootNode","getRootNode","ShadowRoot","defaultView","PlayerComponent","hook","hookOnce","original","getPlayers","nId","getAllPlayers","comp","use","writeable","mergeOptions","deregisterPlugin","getPlugins","getPluginVersion","addLanguage","EventTarget","dom","NetworkBadStatus","NetworkRequestFailed","NetworkRequestAborted","NetworkRequestTimeout","NetworkBodyParserFailed","StreamingHlsPlaylistParserError","StreamingDashManifestParserError","StreamingContentSteeringParserError","StreamingVttParserError","StreamingFailedToSelectNextSegment","StreamingFailedToDecryptSegment","StreamingFailedToTransmuxSegment","StreamingFailedToAppendSegment","StreamingCodecsChangeError","_interopDefaultLegacy","videojs__default","QualityLevel","representation","bitrate","bandwidth","frameRate","QualityLevelList","levels_","selectedIndex_","addQualityLevel","qualityLevel","getQualityLevelById","removeQualityLevel","removed","addqualitylevel","removequalitylevel","initPlugin","originalPluginFn","qualityLevels","qualityLevelList","disposeHandler","resolveUrl$1","baseUrl","relativeUrl","protocolLess","removeLocation","newUrl","protocol","Stream","_length","_i","pipe","destination","decodeB64ToUint8Array","b64Text","decodedString","atob","Buffer","LineStream","nextNewline","TAB","parseByterange","byterangeString","offset","parseAttributes$1","parseResolution","resolution","ParseStream","customParsers","tagMappers","mapper","mappedLine","newLine","tagType","playlistType","allowed","URI","BYTERANGE","byterange","RESOLUTION","BANDWIDTH","dateTimeString","dateTimeObject","Date","IV","Uint32Array","PRECISE","subkey","clientAttributePattern","isHexaDecimal","isDecimalFloating","addParser","expression","customType","dataParser","segment","addTagMapper","camelCaseKeys","setHoldBack","manifest","serverControl","targetDuration","partTargetDuration","hb","phb","minTargetDuration","minPartDuration","lineStream","parseStream","mainDefinitions","searchParams","lastProgramDateTime","uris","currentMap","currentUri","hasParts","defaultMediaGroups","currentTimeline","allowCache","discontinuityStarts","dateRanges","iFramePlaylists","segments","lastByterangeEnd","lastPartByterangeEnd","dateRangeTags","parts","preloadHints","timeline","preloadSegment","entry","mediaGroup","rendition","definitions","def","endlist","endList","inf","mediaSequence","discontinuitySequence","METHOD","KEYFORMAT","contentProtection","KEYID","schemeIdUri","keyId","pssh","iv","playlist","playlists","mediaGroups","TYPE","NAME","mediaGroupType","autoselect","AUTOSELECT","LANGUAGE","instreamId","CHARACTERISTICS","characteristics","FORCED","forced","discontinuity","getTime","programDateTime","targetduration","timeOffset","precise","cueOut","cueOutCont","cueIn","skip","warnOnMissingAttributes_","segmentIndex","partIndex","renditionReports","canBlockReload","canSkipDateranges","hint","isPart","otherHint","required","partInf","partTarget","dateRange","endDate","startDate","plannedDuration","endOnNextYes","endOnNext","newDateInSeconds","dateRangeWithSameId","findIndex","dateRangeToFind","independentSegments","iFramesOnly","requiredCompatibilityversion","contentSteering","addDef","QUERYPARAM","VALUE","IMPORT","comment","custom","currentVersion","targetVersion","identifier","missing","chunk","regexs","webm","ogg","muxerVideo","muxerAudio","muxerText","mediaTypes","upperMediaTypes","translateLegacyCodec","codec","orig","profile","avcLevel","parseCodecs","codecString","codecs","codecType","details","mediaType","isAudioCodec","getMimeForCodec","browserSupportsCodec","withMMS","MediaSource","isTypeSupported","ManagedMediaSource","muxerSupportsCodec","MPEGURL_REGEX","DASH_REGEX","simpleTypeFromSourceType","isArrayBufferView","ArrayBuffer","isView","toUint8","bytes","byteOffset","byteLength","BigInt","BYTE_TABLE","Uint16Array","bytesToNumber","_ref$signed","signed","_ref$le","le","total","byte","exponent","numberToBytes","_temp2","_ref2$le","byteCount","countBits","countBytes","byteIndex","stringToBytes","stringIsBytes","unescape","view","bytesMatch","_temp3","_ref3","_ref3$offset","_ref3$mask","mask","bByte","oc","MIME_TYPE","HTML","isHTML","XML_APPLICATION","XML_TEXT","XML_XHTML_APPLICATION","XML_SVG_IMAGE","NAMESPACE$3","SVG","XML","XMLNS","conventions","ac","NAMESPACE","NAMESPACE$2","notEmptyString","orderedSetReducer","toOrderedSet","splitOnASCIIWhitespace","copy","dest","Class","Super","pt","NodeType","ELEMENT_NODE","ATTRIBUTE_NODE","TEXT_NODE","CDATA_SECTION_NODE","ENTITY_REFERENCE_NODE","ENTITY_NODE","PROCESSING_INSTRUCTION_NODE","COMMENT_NODE","DOCUMENT_NODE","DOCUMENT_TYPE_NODE","DOCUMENT_FRAGMENT_NODE","NOTATION_NODE","ExceptionCode","ExceptionMessage","INDEX_SIZE_ERR","DOMSTRING_SIZE_ERR","HIERARCHY_REQUEST_ERR","WRONG_DOCUMENT_ERR","INVALID_CHARACTER_ERR","NO_DATA_ALLOWED_ERR","NO_MODIFICATION_ALLOWED_ERR","NOT_FOUND_ERR","NOT_SUPPORTED_ERR","INUSE_ATTRIBUTE_ERR","DOMException","captureStackTrace","NodeList","LiveNodeList","refresh","_node","_refresh","_updateLiveList","inc","_inc","ls","__set__","$$length","NamedNodeMap","_findNodeIndex","_addNamedNode","newAttr","oldAttr","ownerElement","_onRemoveAttribute","namespaceURI","_nsMap","prefix","_onAddAttribute","_removeNamedNode","lastIndex","DOMImplementation$1","Node","_xmlEncoder","_visitNode","Document","_onUpdateChild","cs","_removeChild","previous","previousSibling","lastChild","isDocTypeNode","isElementNode","isElementInsertionPossible","parentChildNodes","docTypeNode","isElementReplacementPossible","assertPreInsertionValidity1to5","hasValidParentNodeType","hasInsertableNodeType","assertPreInsertionValidityInDocument","nodeChildNodes","nodeChildElements","parentElementChild","assertPreReplacementValidityInDocument","hasDoctypeChildThatIsNotChild","_insertBefore","_inDocumentAssertion","cp","newFirst","newLast","pre","Attr","CharacterData","Text","Comment","CDATASection","DocumentType","Notation","Entity","EntityReference","DocumentFragment","ProcessingInstruction","XMLSerializer","nodeSerializeToString","isHtml","nodeFilter","buf","lookupPrefix","visibleNamespaces","namespace","serializeToString","needNamespaceDefine","ns","addSerializedAttribute","qualifiedName","prefixedNodeName","defaultNS","ai","nsi","pubid","publicId","sysid","systemId","sub","internalSubset","importNode","deep","node2","attrs2","_ownerElement","setAttributeNode","INVALID_STATE_ERR","SYNTAX_ERR","INVALID_MODIFICATION_ERR","NAMESPACE_ERR","INVALID_ACCESS_ERR","getNamedItem","setNamedItem","setNamedItemNS","getNamedItemNS","removeNamedItem","removeNamedItemNS","hasFeature","feature","createDocument","doctype","root","createDocumentType","nodeValue","refChild","oldChild","normalize","appendData","hasAttributes","lookupNamespaceURI","isDefaultNamespace","importedNode","getElementById","rtv","getElementsByClassName","classNames","classNamesSet","base","nodeClassNames","nodeClassNamesSet","createComment","createCDATASection","createAttribute","specified","createEntityReference","pl","createAttributeNS","getAttributeNode","removeAttributeNode","_appendSingleChild","setAttributeNodeNS","removeAttributeNS","getAttributeNodeNS","hasAttributeNS","getAttributeNS","getElementsByTagNameNS","substringData","insertData","replaceData","deleteData","splitText","newText","newNode","getTextContent","DOMImplementation","entities","XML_ENTITIES","amp","apos","gt","lt","quot","HTML_ENTITIES","Aacute","aacute","Abreve","abreve","acd","acE","Acirc","acirc","acute","Acy","acy","AElig","aelig","af","Afr","afr","Agrave","agrave","alefsym","aleph","Alpha","alpha","Amacr","amacr","amalg","AMP","And","and","andand","andd","andslope","andv","ang","ange","angle","angmsd","angmsdaa","angmsdab","angmsdac","angmsdad","angmsdae","angmsdaf","angmsdag","angmsdah","angrt","angrtvb","angrtvbd","angsph","angst","angzarr","Aogon","aogon","Aopf","aopf","ap","apacir","apE","ape","apid","ApplyFunction","approx","approxeq","Aring","aring","Ascr","ascr","Assign","ast","asymp","asympeq","Atilde","atilde","Auml","auml","awconint","awint","backcong","backepsilon","backprime","backsim","backsimeq","Backslash","Barv","barvee","Barwed","barwed","barwedge","bbrk","bbrktbrk","bcong","Bcy","bcy","bdquo","becaus","Because","because","bemptyv","bepsi","bernou","Bernoullis","Beta","beta","beth","between","Bfr","bfr","bigcap","bigcirc","bigcup","bigodot","bigoplus","bigotimes","bigsqcup","bigstar","bigtriangledown","bigtriangleup","biguplus","bigvee","bigwedge","bkarow","blacklozenge","blacksquare","blacktriangle","blacktriangledown","blacktriangleleft","blacktriangleright","blank","blk12","blk14","blk34","block","bne","bnequiv","bNot","bnot","Bopf","bopf","bot","bowtie","boxbox","boxDL","boxDl","boxdL","boxdl","boxDR","boxDr","boxdR","boxdr","boxh","boxHD","boxHd","boxhD","boxhd","boxHU","boxHu","boxhU","boxhu","boxminus","boxplus","boxtimes","boxUL","boxUl","boxuL","boxul","boxUR","boxUr","boxuR","boxur","boxV","boxv","boxVH","boxVh","boxvH","boxvh","boxVL","boxVl","boxvL","boxvl","boxVR","boxVr","boxvR","boxvr","bprime","Breve","breve","brvbar","Bscr","bscr","bsemi","bsim","bsime","bsol","bsolb","bsolhsub","bull","bullet","bump","bumpE","bumpe","Bumpeq","bumpeq","Cacute","cacute","Cap","cap","capand","capbrcup","capcap","capcup","capdot","CapitalDifferentialD","caps","caret","caron","Cayleys","ccaps","Ccaron","ccaron","Ccedil","ccedil","Ccirc","ccirc","Cconint","ccups","ccupssm","Cdot","cdot","cedil","Cedilla","cemptyv","cent","CenterDot","centerdot","Cfr","cfr","CHcy","chcy","check","checkmark","Chi","chi","cir","circ","circeq","circlearrowleft","circlearrowright","circledast","circledcirc","circleddash","CircleDot","circledR","circledS","CircleMinus","CirclePlus","CircleTimes","cirE","cire","cirfnint","cirmid","cirscir","ClockwiseContourIntegral","CloseCurlyDoubleQuote","CloseCurlyQuote","clubs","clubsuit","Colon","colon","Colone","colone","coloneq","comma","commat","compfn","complement","complexes","cong","congdot","Congruent","Conint","conint","ContourIntegral","Copf","copf","coprod","Coproduct","COPY","copysr","CounterClockwiseContourIntegral","crarr","Cross","cross","Cscr","cscr","csub","csube","csup","csupe","ctdot","cudarrl","cudarrr","cuepr","cuesc","cularr","cularrp","Cup","cup","cupbrcap","CupCap","cupcap","cupcup","cupdot","cupor","cups","curarr","curarrm","curlyeqprec","curlyeqsucc","curlyvee","curlywedge","curren","curvearrowleft","curvearrowright","cuvee","cuwed","cwconint","cwint","cylcty","Dagger","dagger","daleth","Darr","dArr","darr","dash","Dashv","dashv","dbkarow","dblac","Dcaron","dcaron","Dcy","dcy","DD","dd","ddagger","ddarr","DDotrahd","ddotseq","deg","Del","Delta","delta","demptyv","dfisht","Dfr","dfr","dHar","dharl","dharr","DiacriticalAcute","DiacriticalDot","DiacriticalDoubleAcute","DiacriticalGrave","DiacriticalTilde","diam","Diamond","diamond","diamondsuit","diams","die","DifferentialD","digamma","disin","divide","divideontimes","divonx","DJcy","djcy","dlcorn","dlcrop","dollar","Dopf","dopf","Dot","dot","DotDot","doteq","doteqdot","DotEqual","dotminus","dotplus","dotsquare","doublebarwedge","DoubleContourIntegral","DoubleDot","DoubleDownArrow","DoubleLeftArrow","DoubleLeftRightArrow","DoubleLeftTee","DoubleLongLeftArrow","DoubleLongLeftRightArrow","DoubleLongRightArrow","DoubleRightArrow","DoubleRightTee","DoubleUpArrow","DoubleUpDownArrow","DoubleVerticalBar","DownArrow","Downarrow","downarrow","DownArrowBar","DownArrowUpArrow","DownBreve","downdownarrows","downharpoonleft","downharpoonright","DownLeftRightVector","DownLeftTeeVector","DownLeftVector","DownLeftVectorBar","DownRightTeeVector","DownRightVector","DownRightVectorBar","DownTee","DownTeeArrow","drbkarow","drcorn","drcrop","Dscr","dscr","DScy","dscy","dsol","Dstrok","dstrok","dtdot","dtri","dtrif","duarr","duhar","dwangle","DZcy","dzcy","dzigrarr","Eacute","eacute","easter","Ecaron","ecaron","ecir","Ecirc","ecirc","ecolon","Ecy","ecy","eDDot","Edot","eDot","edot","ee","efDot","Efr","efr","eg","Egrave","egrave","egs","egsdot","elinters","ell","elsdot","Emacr","emacr","emptyset","EmptySmallSquare","emptyv","EmptyVerySmallSquare","emsp","emsp13","emsp14","ENG","eng","ensp","Eogon","eogon","Eopf","eopf","epar","eparsl","eplus","epsi","Epsilon","epsilon","epsiv","eqcirc","eqcolon","eqsim","eqslantgtr","eqslantless","Equal","equals","EqualTilde","equest","Equilibrium","equiv","equivDD","eqvparsl","erarr","erDot","Escr","escr","esdot","Esim","esim","Eta","eta","ETH","eth","Euml","euml","euro","excl","exist","Exists","expectation","ExponentialE","exponentiale","fallingdotseq","Fcy","fcy","female","ffilig","fflig","ffllig","Ffr","ffr","filig","FilledSmallSquare","FilledVerySmallSquare","fjlig","flat","fllig","fltns","fnof","Fopf","fopf","ForAll","forall","fork","forkv","Fouriertrf","fpartint","frac12","frac13","frac14","frac15","frac16","frac18","frac23","frac25","frac34","frac35","frac38","frac45","frac56","frac58","frac78","frasl","frown","Fscr","fscr","gacute","Gamma","gamma","Gammad","gammad","gap","Gbreve","gbreve","Gcedil","Gcirc","gcirc","Gcy","gcy","Gdot","gdot","gE","ge","gEl","gel","geq","geqq","geqslant","ges","gescc","gesdot","gesdoto","gesdotol","gesl","gesles","Gfr","gfr","Gg","gg","ggg","gimel","GJcy","gjcy","gl","gla","glE","glj","gnap","gnapprox","gnE","gne","gneq","gneqq","gnsim","Gopf","gopf","grave","GreaterEqual","GreaterEqualLess","GreaterFullEqual","GreaterGreater","GreaterLess","GreaterSlantEqual","GreaterTilde","Gscr","gscr","gsim","gsime","gsiml","Gt","GT","gtcc","gtcir","gtdot","gtlPar","gtquest","gtrapprox","gtrarr","gtrdot","gtreqless","gtreqqless","gtrless","gtrsim","gvertneqq","gvnE","Hacek","hairsp","half","hamilt","HARDcy","hardcy","hArr","harr","harrcir","harrw","Hat","hbar","Hcirc","hcirc","hearts","heartsuit","hellip","hercon","Hfr","hfr","HilbertSpace","hksearow","hkswarow","hoarr","homtht","hookleftarrow","hookrightarrow","Hopf","hopf","horbar","HorizontalLine","Hscr","hscr","hslash","Hstrok","hstrok","HumpDownHump","HumpEqual","hybull","hyphen","Iacute","iacute","ic","Icirc","icirc","Icy","icy","Idot","IEcy","iecy","iexcl","iff","Ifr","ifr","Igrave","igrave","ii","iiiint","iiint","iinfin","iiota","IJlig","ijlig","Im","Imacr","imacr","image","ImaginaryI","imagline","imagpart","imath","imof","imped","Implies","in","incare","infin","infintie","inodot","Int","int","intcal","integers","Integral","intercal","Intersection","intlarhk","intprod","InvisibleComma","InvisibleTimes","IOcy","iocy","Iogon","iogon","Iopf","iopf","Iota","iota","iprod","iquest","Iscr","iscr","isin","isindot","isinE","isins","isinsv","isinv","Itilde","itilde","Iukcy","iukcy","Iuml","iuml","Jcirc","jcirc","Jcy","jcy","Jfr","jfr","jmath","Jopf","jopf","Jscr","jscr","Jsercy","jsercy","Jukcy","jukcy","Kappa","kappa","kappav","Kcedil","kcedil","Kcy","kcy","Kfr","kfr","kgreen","KHcy","khcy","KJcy","kjcy","Kopf","kopf","Kscr","kscr","lAarr","Lacute","lacute","laemptyv","lagran","Lambda","lambda","Lang","langd","langle","lap","Laplacetrf","laquo","Larr","lArr","larr","larrb","larrbfs","larrfs","larrhk","larrlp","larrpl","larrsim","larrtl","lat","lAtail","latail","late","lates","lBarr","lbarr","lbbrk","lbrace","lbrack","lbrke","lbrksld","lbrkslu","Lcaron","lcaron","Lcedil","lcedil","lceil","lcub","Lcy","lcy","ldca","ldquo","ldquor","ldrdhar","ldrushar","ldsh","lE","LeftAngleBracket","LeftArrow","Leftarrow","leftarrow","LeftArrowBar","LeftArrowRightArrow","leftarrowtail","LeftCeiling","LeftDoubleBracket","LeftDownTeeVector","LeftDownVector","LeftDownVectorBar","LeftFloor","leftharpoondown","leftharpoonup","leftleftarrows","LeftRightArrow","Leftrightarrow","leftrightarrow","leftrightarrows","leftrightharpoons","leftrightsquigarrow","LeftRightVector","LeftTee","LeftTeeArrow","LeftTeeVector","leftthreetimes","LeftTriangle","LeftTriangleBar","LeftTriangleEqual","LeftUpDownVector","LeftUpTeeVector","LeftUpVector","LeftUpVectorBar","LeftVector","LeftVectorBar","lEg","leg","leq","leqq","leqslant","les","lescc","lesdot","lesdoto","lesdotor","lesg","lesges","lessapprox","lessdot","lesseqgtr","lesseqqgtr","LessEqualGreater","LessFullEqual","LessGreater","lessgtr","LessLess","lesssim","LessSlantEqual","LessTilde","lfisht","lfloor","Lfr","lfr","lg","lgE","lHar","lhard","lharu","lharul","lhblk","LJcy","ljcy","Ll","ll","llarr","llcorner","Lleftarrow","llhard","lltri","Lmidot","lmidot","lmoust","lmoustache","lnap","lnapprox","lnE","lne","lneq","lneqq","lnsim","loang","loarr","lobrk","LongLeftArrow","Longleftarrow","longleftarrow","LongLeftRightArrow","Longleftrightarrow","longleftrightarrow","longmapsto","LongRightArrow","Longrightarrow","longrightarrow","looparrowleft","looparrowright","lopar","Lopf","lopf","loplus","lotimes","lowast","lowbar","LowerLeftArrow","LowerRightArrow","loz","lozenge","lozf","lpar","lparlt","lrarr","lrcorner","lrhar","lrhard","lrm","lrtri","lsaquo","Lscr","lscr","Lsh","lsh","lsim","lsime","lsimg","lsqb","lsquo","lsquor","Lstrok","lstrok","Lt","LT","ltcc","ltcir","ltdot","lthree","ltimes","ltlarr","ltquest","ltri","ltrie","ltrif","ltrPar","lurdshar","luruhar","lvertneqq","lvnE","macr","male","malt","maltese","mapsto","mapstodown","mapstoleft","mapstoup","marker","mcomma","Mcy","mcy","mdash","mDDot","measuredangle","MediumSpace","Mellintrf","Mfr","mfr","mho","micro","mid","midast","midcir","middot","minus","minusb","minusd","minusdu","MinusPlus","mlcp","mldr","mnplus","models","Mopf","mopf","mp","Mscr","mscr","mstpos","Mu","mu","multimap","mumap","nabla","Nacute","nacute","nang","nap","napE","napid","napos","napprox","natur","natural","naturals","nbsp","nbump","nbumpe","ncap","Ncaron","ncaron","Ncedil","ncedil","ncong","ncongdot","ncup","Ncy","ncy","ndash","ne","nearhk","neArr","nearr","nearrow","nedot","NegativeMediumSpace","NegativeThickSpace","NegativeThinSpace","NegativeVeryThinSpace","nequiv","nesear","nesim","NestedGreaterGreater","NestedLessLess","NewLine","nexist","nexists","Nfr","nfr","ngE","nge","ngeq","ngeqq","ngeqslant","nges","nGg","ngsim","nGt","ngt","ngtr","nGtv","nhArr","nharr","nhpar","ni","nis","nisd","niv","NJcy","njcy","nlArr","nlarr","nldr","nlE","nle","nLeftarrow","nleftarrow","nLeftrightarrow","nleftrightarrow","nleq","nleqq","nleqslant","nles","nless","nLl","nlsim","nLt","nlt","nltri","nltrie","nLtv","nmid","NoBreak","NonBreakingSpace","Nopf","nopf","Not","not","NotCongruent","NotCupCap","NotDoubleVerticalBar","NotElement","NotEqual","NotEqualTilde","NotExists","NotGreater","NotGreaterEqual","NotGreaterFullEqual","NotGreaterGreater","NotGreaterLess","NotGreaterSlantEqual","NotGreaterTilde","NotHumpDownHump","NotHumpEqual","notin","notindot","notinE","notinva","notinvb","notinvc","NotLeftTriangle","NotLeftTriangleBar","NotLeftTriangleEqual","NotLess","NotLessEqual","NotLessGreater","NotLessLess","NotLessSlantEqual","NotLessTilde","NotNestedGreaterGreater","NotNestedLessLess","notni","notniva","notnivb","notnivc","NotPrecedes","NotPrecedesEqual","NotPrecedesSlantEqual","NotReverseElement","NotRightTriangle","NotRightTriangleBar","NotRightTriangleEqual","NotSquareSubset","NotSquareSubsetEqual","NotSquareSuperset","NotSquareSupersetEqual","NotSubset","NotSubsetEqual","NotSucceeds","NotSucceedsEqual","NotSucceedsSlantEqual","NotSucceedsTilde","NotSuperset","NotSupersetEqual","NotTilde","NotTildeEqual","NotTildeFullEqual","NotTildeTilde","NotVerticalBar","npar","nparallel","nparsl","npart","npolint","npr","nprcue","npre","nprec","npreceq","nrArr","nrarr","nrarrc","nrarrw","nRightarrow","nrightarrow","nrtri","nrtrie","nsc","nsccue","nsce","Nscr","nscr","nshortmid","nshortparallel","nsim","nsime","nsimeq","nsmid","nspar","nsqsube","nsqsupe","nsub","nsubE","nsube","nsubset","nsubseteq","nsubseteqq","nsucc","nsucceq","nsup","nsupE","nsupe","nsupset","nsupseteq","nsupseteqq","ntgl","Ntilde","ntilde","ntlg","ntriangleleft","ntrianglelefteq","ntriangleright","ntrianglerighteq","Nu","nu","numero","numsp","nvap","nVDash","nVdash","nvDash","nvdash","nvge","nvgt","nvHarr","nvinfin","nvlArr","nvle","nvlt","nvltrie","nvrArr","nvrtrie","nvsim","nwarhk","nwArr","nwarr","nwarrow","nwnear","Oacute","oacute","oast","ocir","Ocirc","ocirc","Ocy","ocy","odash","Odblac","odblac","odiv","odot","odsold","OElig","oelig","ofcir","Ofr","ofr","ogon","Ograve","ograve","ogt","ohbar","ohm","oint","olarr","olcir","olcross","oline","olt","Omacr","omacr","Omega","omega","Omicron","omicron","omid","ominus","Oopf","oopf","opar","OpenCurlyDoubleQuote","OpenCurlyQuote","operp","oplus","Or","or","orarr","ord","order","orderof","ordf","ordm","origof","oror","orslope","orv","oS","Oscr","oscr","Oslash","oslash","osol","Otilde","otilde","Otimes","otimes","otimesas","Ouml","ouml","ovbar","OverBar","OverBrace","OverBracket","OverParenthesis","par","para","parallel","parsim","parsl","PartialD","Pcy","pcy","percnt","period","permil","perp","pertenk","Pfr","pfr","Phi","phi","phiv","phmmat","phone","Pi","pi","pitchfork","piv","planck","planckh","plankv","plus","plusacir","plusb","pluscir","plusdo","plusdu","pluse","PlusMinus","plusmn","plussim","plustwo","pm","Poincareplane","pointint","Popf","popf","pound","Pr","pr","prap","prcue","prE","prec","precapprox","preccurlyeq","Precedes","PrecedesEqual","PrecedesSlantEqual","PrecedesTilde","preceq","precnapprox","precneqq","precnsim","precsim","Prime","prime","primes","prnap","prnE","prnsim","prod","Product","profalar","profline","profsurf","Proportion","Proportional","propto","prsim","prurel","Pscr","pscr","Psi","psi","puncsp","Qfr","qfr","qint","Qopf","qopf","qprime","Qscr","qscr","quaternions","quatint","quest","questeq","QUOT","rAarr","race","Racute","racute","radic","raemptyv","Rang","rang","rangd","range","rangle","raquo","Rarr","rArr","rarr","rarrap","rarrb","rarrbfs","rarrc","rarrfs","rarrhk","rarrlp","rarrpl","rarrsim","Rarrtl","rarrtl","rarrw","rAtail","ratail","rationals","RBarr","rBarr","rbarr","rbbrk","rbrace","rbrack","rbrke","rbrksld","rbrkslu","Rcaron","rcaron","Rcedil","rcedil","rceil","rcub","Rcy","rcy","rdca","rdldhar","rdquo","rdquor","rdsh","Re","real","realine","realpart","reals","REG","reg","ReverseElement","ReverseEquilibrium","ReverseUpEquilibrium","rfisht","rfloor","Rfr","rfr","rHar","rhard","rharu","rharul","Rho","rho","rhov","RightAngleBracket","RightArrow","Rightarrow","rightarrow","RightArrowBar","RightArrowLeftArrow","rightarrowtail","RightCeiling","RightDoubleBracket","RightDownTeeVector","RightDownVector","RightDownVectorBar","RightFloor","rightharpoondown","rightharpoonup","rightleftarrows","rightleftharpoons","rightrightarrows","rightsquigarrow","RightTee","RightTeeArrow","RightTeeVector","rightthreetimes","RightTriangle","RightTriangleBar","RightTriangleEqual","RightUpDownVector","RightUpTeeVector","RightUpVector","RightUpVectorBar","RightVector","RightVectorBar","ring","risingdotseq","rlarr","rlhar","rlm","rmoust","rmoustache","rnmid","roang","roarr","robrk","ropar","Ropf","ropf","roplus","rotimes","RoundImplies","rpar","rpargt","rppolint","rrarr","Rrightarrow","rsaquo","Rscr","rscr","Rsh","rsh","rsqb","rsquo","rsquor","rthree","rtimes","rtri","rtrie","rtrif","rtriltri","RuleDelayed","ruluhar","rx","Sacute","sacute","sbquo","Sc","sc","scap","Scaron","scaron","sccue","scE","sce","Scedil","scedil","Scirc","scirc","scnap","scnE","scnsim","scpolint","scsim","Scy","scy","sdot","sdotb","sdote","searhk","seArr","searr","searrow","sect","semi","seswar","setminus","setmn","sext","Sfr","sfr","sfrown","sharp","SHCHcy","shchcy","SHcy","shcy","ShortDownArrow","ShortLeftArrow","shortmid","shortparallel","ShortRightArrow","ShortUpArrow","shy","Sigma","sigma","sigmaf","sigmav","sim","simdot","sime","simeq","simg","simgE","siml","simlE","simne","simplus","simrarr","slarr","SmallCircle","smallsetminus","smashp","smeparsl","smid","smile","smt","smte","smtes","SOFTcy","softcy","sol","solb","solbar","Sopf","sopf","spades","spadesuit","spar","sqcap","sqcaps","sqcup","sqcups","Sqrt","sqsub","sqsube","sqsubset","sqsubseteq","sqsup","sqsupe","sqsupset","sqsupseteq","squ","Square","square","SquareIntersection","SquareSubset","SquareSubsetEqual","SquareSuperset","SquareSupersetEqual","SquareUnion","squarf","squf","srarr","Sscr","sscr","ssetmn","ssmile","sstarf","Star","star","starf","straightepsilon","straightphi","strns","Sub","subdot","subE","sube","subedot","submult","subnE","subne","subplus","subrarr","Subset","subset","subseteq","subseteqq","SubsetEqual","subsetneq","subsetneqq","subsim","subsub","subsup","succ","succapprox","succcurlyeq","Succeeds","SucceedsEqual","SucceedsSlantEqual","SucceedsTilde","succeq","succnapprox","succneqq","succnsim","succsim","SuchThat","Sum","sum","sung","Sup","sup","sup1","sup2","sup3","supdot","supdsub","supE","supe","supedot","Superset","SupersetEqual","suphsol","suphsub","suplarr","supmult","supnE","supne","supplus","Supset","supset","supseteq","supseteqq","supsetneq","supsetneqq","supsim","supsub","supsup","swarhk","swArr","swarr","swarrow","swnwar","szlig","Tab","Tau","tau","tbrk","Tcaron","tcaron","Tcedil","tcedil","Tcy","tcy","tdot","telrec","Tfr","tfr","there4","Therefore","therefore","Theta","theta","thetasym","thetav","thickapprox","thicksim","ThickSpace","thinsp","ThinSpace","thkap","thksim","THORN","thorn","Tilde","tilde","TildeEqual","TildeFullEqual","TildeTilde","times","timesb","timesbar","timesd","tint","toea","topbot","topcir","Topf","topf","topfork","tosa","tprime","TRADE","trade","triangle","triangledown","triangleleft","trianglelefteq","triangleq","triangleright","trianglerighteq","tridot","trie","triminus","TripleDot","triplus","trisb","tritime","trpezium","Tscr","tscr","TScy","tscy","TSHcy","tshcy","Tstrok","tstrok","twixt","twoheadleftarrow","twoheadrightarrow","Uacute","uacute","Uarr","uArr","uarr","Uarrocir","Ubrcy","ubrcy","Ubreve","ubreve","Ucirc","ucirc","Ucy","ucy","udarr","Udblac","udblac","udhar","ufisht","Ufr","ufr","Ugrave","ugrave","uHar","uharl","uharr","uhblk","ulcorn","ulcorner","ulcrop","ultri","Umacr","umacr","uml","UnderBar","UnderBrace","UnderBracket","UnderParenthesis","Union","UnionPlus","Uogon","uogon","Uopf","uopf","UpArrow","Uparrow","uparrow","UpArrowBar","UpArrowDownArrow","UpDownArrow","Updownarrow","updownarrow","UpEquilibrium","upharpoonleft","upharpoonright","uplus","UpperLeftArrow","UpperRightArrow","Upsi","upsi","upsih","Upsilon","upsilon","UpTee","UpTeeArrow","upuparrows","urcorn","urcorner","urcrop","Uring","uring","urtri","Uscr","uscr","utdot","Utilde","utilde","utri","utrif","uuarr","Uuml","uuml","uwangle","vangrt","varepsilon","varkappa","varnothing","varphi","varpi","varpropto","vArr","varr","varrho","varsigma","varsubsetneq","varsubsetneqq","varsupsetneq","varsupsetneqq","vartheta","vartriangleleft","vartriangleright","Vbar","vBar","vBarv","Vcy","vcy","VDash","Vdash","vDash","vdash","Vdashl","Vee","vee","veebar","veeeq","vellip","Verbar","verbar","Vert","vert","VerticalBar","VerticalLine","VerticalSeparator","VerticalTilde","VeryThinSpace","Vfr","vfr","vltri","vnsub","vnsup","Vopf","vopf","vprop","vrtri","Vscr","vscr","vsubnE","vsubne","vsupnE","vsupne","Vvdash","vzigzag","Wcirc","wcirc","wedbar","Wedge","wedge","wedgeq","weierp","Wfr","wfr","Wopf","wopf","wp","wr","wreath","Wscr","wscr","xcap","xcirc","xcup","xdtri","Xfr","xfr","xhArr","xharr","Xi","xi","xlArr","xlarr","xmap","xnis","xodot","Xopf","xopf","xoplus","xotime","xrArr","xrarr","Xscr","xscr","xsqcup","xuplus","xutri","xvee","xwedge","Yacute","yacute","YAcy","yacy","Ycirc","ycirc","Ycy","ycy","yen","Yfr","yfr","YIcy","yicy","Yopf","yopf","Yscr","yscr","YUcy","yucy","Yuml","yuml","Zacute","zacute","Zcaron","zcaron","Zcy","zcy","Zdot","zdot","zeetrf","ZeroWidthSpace","Zeta","zeta","Zfr","zfr","ZHcy","zhcy","zigrarr","Zopf","zopf","Zscr","zscr","zwj","zwnj","entityMap","NAMESPACE$1","nameStartChar","nameChar","tagNamePattern","ParseError$1","locator","XMLReader$1","copyLocator","lineNumber","columnNumber","parseElementStartPart","currentNSMap","entityReplacer","addAttribute","qname","startIndex","attributeNames","fatalError","addValue","warning","setTagName","closed","appendElement$1","domBuilder","localNSMap","qName","nsp","nsPrefix","_copy","startPrefixMapping","startElement","endElement","endPrefixMapping","parseHtmlSpecialContent","elStartEnd","elEndStart","characters","fixSelfClosed","closeMap","lastIndexOf","parseDCC","startCDATA","endCDATA","matchs","lastMatch","startDTD","endDTD","parseInstruction","processingInstruction","ElementAttributes","defaultNSMap","startDocument","defaultNSMapCopy","fixedFromCharCode","surrogate1","surrogate2","appendText","xt","lineEnd","linePattern","lineStart","parseStack","tagStart","currentElement","endMatch","locator2","parse$1","endDocument","getLocalName","getLocator","getQName","getURI","sax","XMLReader","ParseError","normalizeLineEndings","DOMParser$1","DOMHandler","cdata","_locator","_toString","chars","java","appendElement","hander","xmlns","setDocumentLocator","errorImpl","isCallback","Function","build","msg","buildErrorHandler","xml","documentURI","ins","ignorableWhitespace","ch","charNode","skippedEntity","comm","impl","dt","__DOMHandler","merge$1","objects","flatten","lists","urlTypeToSegment","_ref10","indexRange","resolvedUri","startRange","endRange","MAX_SAFE_INTEGER","parseEndNumber","endNumber","segmentRange","static","timescale","sourceDuration","periodDuration","segmentDuration","dynamic","NOW","clientOffset","availabilityStartTime","periodStart","minimumUpdatePeriod","timeShiftBufferDepth","periodStartWC","segmentCount","availableStart","availableEnd","parseByDuration","startNumber","toSegments","sectionDuration","segmentsFromBase","initialization","presentationTime","initSegment","sourceURL","segmentTimeInfo","addSidxSegmentsToPlaylist$1","sidx","sidxByteRange","sidxEnd","mediaReferences","references","referenceType","firstOffset","referencedSize","subsegmentDuration","endIndex","SUPPORTED_MEDIA_TYPES","getUniqueTimelineStarts","timelineStarts","keyFunction","_ref11","getMediaGroupPlaylists","mediaGroupPlaylists","master","group","groupKey","labelKey","mediaProperties","updateMediaSequenceForPlaylist","_ref12","positionManifestOnTimeline","_ref15","oldManifest","newManifest","oldPlaylists","newPlaylists","_ref13","oldPlaylist","findPlaylistWithName","firstNewSegment","oldMatchingSegmentIndex","oldSegment","updateSequenceNumbers","generateSidxKey","byteRangeToString","mergeDiscontiguousPlaylists","playlistsByBaseUrl","cur","allPlaylists","playlistGroup","mergedPlaylists","addSidxSegmentsToPlaylist","sidxMapping","sidxKey","sidxMatch","addSidxSegmentsToPlaylists","formatAudioPlaylist","isAudioOnly","CODECS","serviceLocation","AUDIO","SUBTITLES","formatVttPlaylist","_ref17","m3u8Attributes","vttPlaylist","formatVideoPlaylist","_ref18","videoOnly","_ref19","audioOnly","_ref20","vttOnly","_ref21","flattenMediaGroupPlaylists","mediaGroupObject","labelContents","toM3u8","_ref23","dashPlaylists","locations","previousManifest","eventStream","suggestedPresentationDelay","videoPlaylists","audioPlaylists","vttPlaylists","captionServices","VIDEO","organizedAudioGroup","mainPlaylist","formattedPlaylists","roleLabel","formatted","organizeAudioPlaylists","organizedVttGroup","organizeVttPlaylists","playlistTimelineStarts","_ref24","subs","cc","svcObj","svc","service","channel","easyReader","getLiveRValue","parseByTimeline","segmentTimeline","sIndex","S","d","repeat","segmentTime","nextS","identifierPattern","constructTemplateUrl","format","identifierReplacement","segmentsFromTemplate","templateValues","RepresentationID","Bandwidth","mapSegment","parseTemplateInfo","presentationTimeOffset","segmentsFromList","segmentUrls","segmentUrlMap","segmentUrlObject","segmentUrl","mediaRange","SegmentURLToSegmentObject","generateSegments","_ref25","segmentAttributes","segmentsFn","segmentInfo","template","segmentsInfo","toPlaylists","representations","findChildren","_ref26","getContent","parseDuration","year","month","day","hour","minute","second","parsers","mediaPresentationDuration","parseDivisionValue","parsedValue","parseAttributes","parseFn","keySystemsMap","buildBaseUrls","baseUrlElements","baseUrlElement","initialBaseUrl","resolvedBaseUrl","finalBaseUrl","getSegmentInformation","adaptationSet","segmentTemplate","segmentList","segmentBase","segmentTimelineParentNode","segmentInitializationParentNode","segmentInitialization","toEventStream","eventStreamAttributes","eventAttributes","messageData","contentEncoding","toRepresentations","periodAttributes","periodBaseUrls","periodSegmentInfo","adaptationSetAttributes","adaptationSetBaseUrls","roleAttributes","accessibility","flags","opt","parseCaptionServiceMetadata","labelVal","keySystem","psshNode","adaptationSetSegmentInfo","repBaseUrlElements","repBaseUrls","representationSegmentInfo","inheritBaseUrls","toAdaptationSets","mpdAttributes","mpdBaseUrls","adaptationSets","generateContentSteeringInformation","contentSteeringNodes","eventHandler","infoFromContentSteeringTag","serverURL","queryBeforeStart","getPeriodStart","_ref27","priorPeriodAttributes","mpdType","inheritAttributes","manifestUri","periodNodes","periods","priorPeriod","contentSteeringInfo","representationInfo","stringToMpdXml","manifestString","parseUTCTiming","UTCTimingNode","parseUTCTimingScheme","MAX_UINT32","pow","getUint64","uint8","dv","DataView","getBigUint64","getUint32","parseSidx_1","subarray","referenceId","earliestPresentationTime","referenceCount","getUint16","startsWithSap","sapType","sapDeltaTime","ID3","getId3Offset","returnSize","getId3Size","normalizePath$1","findBox","paths","complete","normalizePaths$1","results","EBML_TAGS","EBML","DocType","Segment","SegmentInfo","Tracks","TrackNumber","DefaultDuration","TrackEntry","TrackType","FlagDefault","CodecID","CodecPrivate","Cluster","Timestamp","TimestampScale","BlockGroup","BlockDuration","Block","SimpleBlock","LENGTH_TABLE","getvint","removeLength","getLength","valueBytes","normalizePath","getInfinityDataSize","innerid","dataHeader","findEbml","normalizePaths","dataStart","dataEnd","NAL_TYPE_ONE","NAL_TYPE_TWO","EMULATION_PREVENTION","discardEmulationPreventionBytes","positions","newLength","newData","sourceIndex","findNal","dataType","nalLimit","nalStart","nalsFound","nalOffset","nalType","CONSTANTS","_isLikely","docType","matroska","fmp4","moof","moov","ac3","avi","riff","findH264Nal","findH265Nal","isLikelyTypes","isLikelyFn","secondsToVideoTs","secondsToAudioTs","videoTsToSeconds","audioTsToSeconds","isLikely","detectContainerForBytes","sampleRate","timestamp","clock_1","resolveUrl","resolveManifestRedirect","req","logger","filterRanges","timeRanges","findRange","TIME_FUDGE_FACTOR","findNextRange","printableRange","strArr","timeRangesToArray","timeRangesList","lastBufferedEnd","timeAheadOf","segmentDurationWithParts","getPartsAndSegments","si","getLastParts","lastSegment","getKnownPartCount","_ref28","partCount","liveEdgeDelay","partHoldBack","holdBack","intervalDuration","endSequence","expired","backwardDuration","forwardDuration","totalDuration","sumDurations","defaultDuration","durationList","durations","playlistEnd","useSafeLiveEnd","liveEdgePadding","lastSegmentEndTime","isExcluded","excludeUntil","isIncompatible","isEnabled","excluded","isLowestEnabledRendition","currentBandwidth","MAX_VALUE","playlistMatch","someAudioVariant","groupName","variant","Playlist","getMediaInfoForTime","startingSegmentIndex","startingPartIndex","exactManifestTimings","partsAndSegments","partAndSegment","isExtremelyCloseToTheEnd","isDisabled","isAes","estimateSegmentRequestTime","bytesReceived","createPlaylistID","groupID","forEachMediaGroup","setupMediaPlaylist","_ref32","playlistErrors_","setupMediaPlaylists","resolveMediaGroupUris","addPropertiesToMain","createGroupID","phonyUri","audioOnlyMain","groupId","DateRangesStorage","offset_","pendingDateRanges_","processedDateRanges_","setOffset","firstSegment","setPendingDateRanges","trimProcessedDateRanges_","pendingDateRange","processDateRange","getDateRangesToProcess","dateRangeClasses","dateRangesToProcess","classListIndex","getStreamingNetworkErrorMetadata","_ref33","parseFailure","isBadStatus","isFailure","errorMetadata","isBadStatusOrParseFailure","errorType","timedout","erroType","EventTarget$1","updateSegment","skipped","updateSegments","oldSegments","newSegments","newIndex","newSegment","resolveSegmentUris","baseUri","getAllSegments","isPlaylistUnchanged","updateMain$1","newMedia","unchangedCheck","oldMedia","mergedPlaylist","skippedSegments","refreshDelay","lastPart","lastDuration","playlistMetadataPayload","renditions","PlaylistLoader","logger_","vhs_","addDateRangesToTextTrack_","addDateRangesToTextTrack","vhsOptions","customTagParsers","customTagMappers","llhls","dateRangesStorage_","handleMediaupdatetimeout_","handleLoadedPlaylist_","mediaPlaylist","availableDateRanges","parameters","nextMSN","nextPart","_HLS_part","_HLS_msn","canSkipUntil","_HLS_skip","parsedUri","addLLHLSQueryDirectives","playlistRequestError","haveMetadata","playlistString","startingState","parseManifest_","_ref31","onwarn","oninfo","customParser","parseManifest","_ref35","_ref36","playlistObject","playlistInfo","lastRequest","pendingMedia_","media_","updateMediaUpdateTimeout_","parsedPlaylist","stopRequest","mediaUpdateTimeout","finalRenditionTimeout","oldRequest","shouldDelay","delay","mediaChange","mainPlaylistRef","started","setupInitialPlaylist","srcUri","mainForMedia","updateOrDeleteClone","isUpdate","pathway","ID","oldPlaylistUri","oldPlaylistId","newPlaylistUri","createCloneURI_","newPlaylistId","createCloneAttributes_","updatedPlaylist","createClonePlaylist_","updateOrDeleteCloneMedia","oldMediaPlaylist","createClonedMediaGroups_","addClonePathway","basePlaylist","playlistId","baseID","newUri","newPlaylistID","newMediaPlaylist","newProps","hostname","HOST","PARAMS","oldAttributes","getKeyIdSet","keyIds","keysystem","callbackWrapper","reqResponse","responseTime","roundTripTime","requestTime","responseHeaders","xhrFactory","XhrFunction","beforeRequest","Vhs","_requestCallbackSet","_responseCallbackSet","xhrMethod","beforeRequestOptions","requestSet","newOptions","requestCallback","callAllRequestHooks","responseSet","responseCallback","callAllResponseHooks","originalAbort","segmentXhrHeaders","Range","byterangeEnd","byterangeStart","byterangeStr","textRange","formatHexString","formatAsciiString","createTransferableMessage","transferable","initSegmentId","segmentKeyId","hexDump","ascii","utils","tagDump","_ref38","textRanges","getProgramTime","_ref39","matchedSegment","segmentEnd","videoTimingInfo","transmuxedPresentationEnd","estimatedStart","transmuxedPresentationStart","findSegmentForPlayerTime","seekTime","programTimeObject","mediaSeconds","programTime","playerTime","transmuxerPrependedSeconds","offsetFromSegmentStart","playerTimeToProgramTime","toISOString","seekToProgramTime","_ref40","retryCount","seekTo","pauseAfterSeek","verifyProgramDateTimeTags","lastSegmentStart","lastSegmentDuration","findSegmentForProgramTime","mediaOffset","comparisonTimeStamp","segmentDateTime","segmentTimeEpoch","getOffsetFromTimestamp","seekToTime","callbackOnCompleted","containerRequest","id3Offset","finished","endRequestAndCallback","_bytes","progressListener","newPart","_len","buffers","_key","totalLen","tempBuffer","concatTypedArrays","overrideMimeType","loaded","dashPlaylistUnchanged","aSegment","bSegment","aByterange","bByterange","dashGroupId","parseMainXml","_ref42","mainXml","parsedManifestInfo","updateMain","oldMain","newMain","noChanges","playlistUpdate","removeOldMediaGroupLabels","equivalentSidx","compareSidxEntry","oldSidxMapping","newSidxMapping","currentSidxInfo","savedSidxInfo","sidxInfo","DashPlaylistLoader","srcUrlOrPlaylist","mainPlaylistLoader","mainPlaylistLoader_","isMain_","addMetadataToTextTrack","refreshXml_","refreshMedia_","loadedPlaylists_","sidxMapping_","childPlaylist_","isPaused","requestErrored_","addSidxSegments_","mediaRequest_","fin","sidxContainer","internal","playlistExclusionDuration","minimumUpdatePeriodTimeout_","createMupOnMedia_","hasPendingRequest","sidxChanged","isFinalRendition","updateMinimumUpdatePeriodTimeout_","haveMain_","requestMain_","mainChanged","manifestInfo","mainXml_","date","mainLoaded_","handleMain_","syncClientServerClock_","utcTiming","clientOffset_","serverTime","addEventStreamToMetadataTrack_","parsedManifest","mpl","mup","createMUPTimeout_","mediaGroupSidx","filterChangedSidxMappings","mediaID","mediaChanged","createMediaUpdateTimeout","metadataArray","eventStreamNode","cueTime","frames","defaultKID","Config","GOAL_BUFFER_LENGTH","MAX_GOAL_BUFFER_LENGTH","BACK_BUFFER_LENGTH","GOAL_BUFFER_LENGTH_RATE","INITIAL_BANDWIDTH","BANDWIDTH_VARIANCE","BUFFER_LOW_WATER_LINE","MAX_BUFFER_LOW_WATER_LINE","EXPERIMENTAL_MAX_BUFFER_LOW_WATER_LINE","BUFFER_LOW_WATER_LINE_RATE","BUFFER_HIGH_WATER_LINE","browserWorkerPolyFill","workerObj","objectUrl","createObjectURL","Blob","blob","BlobBuilder","getBlob","worker","Worker","objURL","terminate","revokeObjectURL","getWorkerString","workerCode$1","Stream$8","init","flushSource","partialFlush","endTimeline","dinf","esds","ftyp","mfhd","minf","mvex","mvhd","trak","tkhd","mdia","mdhd","hdlr","sdtp","stbl","stsd","traf","trex","trun$1","MAJOR_BRAND","MINOR_VERSION","AVC1_BRAND","VIDEO_HDLR","AUDIO_HDLR","HDLR_TYPES","VMHD","SMHD","DREF","STCO","STSC","STSZ","STTS","videoSample","audioSample","audioTrun","videoTrun","trunHeader","MAX_UINT32$1","numbers","avc1","avcC","btrt","dref","mdat","mp4a","pasp","smhd","stco","stsc","stsz","stts","styp","tfdt","tfhd","trun","vmhd","setUint32","audioobjecttype","samplingfrequencyindex","channelcount","samplerate","sequenceNumber","trackFragments","samples","dependsOn","isDependedOn","hasRedundancy","avc1Box","sps","pps","sequenceParameterSets","pictureParameterSets","profileIdc","profileCompatibility","levelIdc","sarRatio","hSpacing","vSpacing","samplesize","trackFragmentHeader","trackFragmentDecodeTime","trackFragmentRun","sampleDependencyTable","upperWordBaseMediaDecodeTime","lowerWordBaseMediaDecodeTime","baseMediaDecodeTime","durationPresent","sizePresent","flagsPresent","compositionTimeOffset","bytesOffest","header","sample","isLeading","paddingValue","isNonSyncSample","degradationPriority","silence","audioTsToVideoTs","videoTsToAudioTs","metadataTsToSeconds","mp4Generator","fileType","movie","sampleForFrame","frame","dataOffset","pts","dts","keyFrame","frameUtils$1","groupNalsIntoFrames","nalUnits","currentNal","currentFrame","nalCount","nalUnitType","groupFramesIntoGops","currentGop","gops","extendFirstKeyFrame","generateSampleTable","baseDataOffset","concatenateNalData","nalsByteLength","numberOfNals","generateSampleTableForFrame","concatenateNalDataForFrame","highPrefix","lowPrefix","zeroFill","timelineStartPts","keepOriginalTimestamps","clock$2","ONE_SECOND_IN_TS","coneOfSilence","metaTable","clock$1","audioFrameUtils$1","prefixWithSilence","audioAppendStartTs","videoBaseMediaDecodeTime","baseMediaDecodeTimeTs","frameDuration","silentFrame","firstFrame","audioGapDuration","audioFillFrameCount","audioFillDuration","trimAdtsFramesByEarliestDts","adtsFrames","earliestAllowedDts","minSegmentDts","minSegmentPts","concatenateFrameData","sumFrameByteLengths","ONE_SECOND_IN_TS$3","trackDecodeInfo$1","clearDtsInfo","maxSegmentDts","maxSegmentPts","calculateTrackBaseMediaDecodeTime","timelineStartInfo","collectDtsInfo","captionPacketParser","parseSei","payloadType","payloadSize","parseUserData","sei","parseCaptionPackets","userData","ccData","emulationPreventionBytesPositions","USER_DATA_REGISTERED_ITU_T_T35","Stream$7","cea708Parser","CaptionStream$2","parse708captions_","parse708captions","captionPackets_","ccStreams_","Cea608Stream","cc708Stream_","Cea708Stream","newCaptionPackets","escapedRBSP","latestDts_","ignoreNextEqualDts_","numSameDts_","flushCCStreams","flushType","flushStream","idx","presortIndex","packet","dispatchCea608Packet","dispatchCea708Packet","activeCea608Channel_","ccStream","setsTextOrXDSActive","setsChannel1Active","setsChannel2Active","CHARACTER_TRANSLATION_708","within708TextBlock","Cea708Window","windowNum","clearText","pendingNewLine","winAttr","penAttr","penLoc","penColor","visible","rowLock","columnLock","relativePositioning","anchorVertical","anchorHorizontal","anchorPoint","rowCount","virtualRowCount","columnCount","windowStyle","penStyle","getText","rows","rowIdx","beforeRowOverflow","addText","backspace","Cea708Service","serviceNum","encoding","currentWindow","windows","createTextDecoder","startPts","setCurrentWindow","textDecoder_","serviceProps","captionServiceEncodings","serviceName","serviceEncodings","current708Packet","services","new708Packet","add708Bytes","push708Packet","ptsVals","byte0","byte1","packet708","packetData","blockSize","seq","sizeCode","pushServiceBlock","initService","handleText","multiByteCharacter","extendedCommands","defineWindow","clearWindows","deleteWindows","displayWindows","hideWindows","toggleWindows","setWindowAttributes","setPenAttributes","setPenColor","setPenLocation","isExtended","getPts","flushDisplayed","char","charCodeArray","newCode","isMultiByte","extended","currentByte","nextByte","unicode","firstByte","secondByte","fillOpacity","fillRed","fillGreen","fillBlue","borderType","borderRed","borderGreen","borderBlue","wordWrap","printDirection","scrollDirection","justify","effectSpeed","effectDirection","displayEffect","displayedText","winId","endPts","pushCaption","textTag","penSize","italics","underline","edgeType","fontStyle","fgOpacity","fgRed","fgGreen","fgBlue","bgOpacity","bgRed","bgGreen","bgBlue","edgeRed","edgeGreen","edgeBlue","column","CHARACTER_TRANSLATION","getCharFromCode","ROWS","createDisplayBuffer","BOTTOM_ROW","indent","field","dataChannel","field_","dataChannel_","setConstants","swap","char0","char1","lastControlCode_","PADDING_","RESUME_CAPTION_LOADING_","mode_","END_OF_CAPTION_","clearFormatting","displayed_","nonDisplayed_","startPts_","ROLL_UP_2_ROWS_","rollUpRows_","setRollUp","ROLL_UP_3_ROWS_","ROLL_UP_4_ROWS_","CARRIAGE_RETURN_","shiftRowsUp_","BACKSPACE_","row_","ERASE_DISPLAYED_MEMORY_","ERASE_NON_DISPLAYED_MEMORY_","RESUME_DIRECT_CAPTIONING_","isSpecialCharacter","column_","isExtCharacter","isMidRowCode","addFormatting","isOffsetControlCode","isPAC","formatting_","indentations","isColorPAC","isNormalChar","logWarning","topRow_","BASE_","EXT_","CONTROL_","OFFSET_","newBaseRow","popOn","baseRow","rollUp","paintOn","captionStream","CaptionStream","streamTypes","H264_STREAM_TYPE","ADTS_STREAM_TYPE","METADATA_STREAM_TYPE","Stream$6","handleRollover$1","TimestampRolloverStream$1","lastDTS","referenceDTS","type_","MetadataStream","timestampRolloverStream","TimestampRolloverStream","handleRollover","typedArray","fromIndex","currentIndex","typedArrayIndexOf","textEncodingDescriptionByte","percentEncode$1","parseUtf8","parseIso88591$1","parseSyncSafeInteger$1","frameParsers","mimeTypeEndIndex","descriptionEndIndex","pictureType","pictureData","owner","privateData","parseId3","parseId3Frames","frameSize","frameStart","tagSize","parseSyncSafeInteger","StreamTypes$3","id3","bufferSize","dispatchType","dataAlignmentIndicator","timeStamp","TransportPacketStream","TransportParseStream","ElementaryStream","metadataStream","Stream$4","CaptionStream$1","StreamTypes$2","bytesInBuffer","everything","parsePsi","parsePat","parsePmt","packetsWaitingForPmt","programMapTable","payloadUnitStartIndicator","pat","section_number","last_section_number","pmtPid","pmt","tableEnd","streamType","pid","processPes_","STREAM_TYPES","h264","adts","segmentHadPmt","timedMetadata","forceFlush","packetFlushable","fragment","trackId","pes","ptsDtsFlags","startPrefix","packetLength","parsePes","flushStreams_","m2ts$1","PAT_PID","MP2T_PACKET_LENGTH","AdtsStream$1","m2ts_1","ONE_SECOND_IN_TS$2","ADTS_SAMPLING_FREQUENCIES$1","handlePartialSegments","frameNum","skipWarn_","frameLength","protectionSkipBytes","oldBuffer","sampleCount","adtsFrameDuration","ExpGolomb$1","workingData","workingBytesAvailable","workingWord","workingBitsAvailable","bitsAvailable","loadWord","workingBytes","availableBytes","skipBits","skipBytes","readBits","bits","valu","skipLeadingZeros","leadingZeroCount","skipUnsignedExpGolomb","skipExpGolomb","readUnsignedExpGolomb","clz","readExpGolomb","readBoolean","readUnsignedByte","H264Stream$1","NalByteStream","PROFILES_WITH_OPTIONAL_SPS_DATA","Stream$2","ExpGolomb","syncPoint","swapBuffer","currentPts","currentDts","readSequenceParameterSet","skipScalingList","nalByteStream","nalUnitTypeCode","expGolombDecoder","lastScale","nextScale","chromaFormatIdc","picOrderCntType","numRefFramesInPicOrderCntCycle","picWidthInMbsMinus1","picHeightInMapUnitsMinus1","frameMbsOnlyFlag","scalingListCount","frameCropLeftOffset","frameCropRightOffset","frameCropTopOffset","frameCropBottomOffset","AacStream$1","H264Stream","ADTS_SAMPLING_FREQUENCIES","parseId3TagSize","isLikelyAacData","parseAdtsSize","lowThree","parseType","parseSampleRate","parseAacTimestamp","percentEncode","aacUtils","setTimestamp","bytesLeft","tempLength","VideoSegmentStream","AudioSegmentStream","Transmuxer","CoalesceStream","frameUtils","audioFrameUtils","trackDecodeInfo","m2ts","clock","AdtsStream","AacStream","ONE_SECOND_IN_TS$1","AUDIO_PROPERTIES","VIDEO_PROPERTIES","retriggerForStream","addPipelineLogRetriggers","transmuxer","pipeline","arrayEquals","generateSegmentTimingInfo","startDts","endDts","prependedContentDuration","firstSequenceNumber","setEarliestDts","earliestDts","setVideoBaseMediaDecodeTime","setAudioAppendStart","videoClockCyclesOfSilencePrefixed","gopsToAlignWith","minPTS","gopCache_","nalUnit","gopForFusion","firstGop","lastGop","resetStream_","getGopForFusion_","alignedGops","alignGopsAtEnd","alignGopsAtEnd_","alignGopsAtStart_","gop","dtsDistance","nearestGopObj","currentGopObj","nearestDistance","alignIndex","gopIndex","alignEndIndex","matchFound","trimIndex","alignGopsWith","newGopsToAlignWith","numberOfTracks","remux","remuxTracks","pendingTracks","videoTrack","pendingBoxes","pendingCaptions","pendingMetadata","pendingBytes","emittedTracks","output","audioTrack","caption","captionStreams","setRemux","hasFlushed","transmuxPipeline_","setupAacPipeline","aacStream","audioTimestampRolloverStream","timedMetadataTimestampRolloverStream","adtsStream","coalesceStream","headOfPipeline","audioSegmentStream","getLogTrigger_","hasAudio","hasVideo","setupTsPipeline","packetStream","elementaryStream","h264Stream","videoSegmentStream","id3Frame","setBaseMediaDecodeTime","isAac","resetCaptions","inspectMp4","textifyMp4","bin","parseType_1","toUnsigned$2","parseType$3","findBox$5","subresults","findBox_1","toUnsigned$1","getUint64$4","parseTfdt$3","parseTfhd$2","baseDataOffsetPresent","sampleDescriptionIndexPresent","defaultSampleDurationPresent","defaultSampleSizePresent","defaultSampleFlagsPresent","durationIsEmpty","defaultBaseIsMoof","sampleDescriptionIndex","defaultSampleDuration","defaultSampleSize","defaultSampleFlags","baseDataOffsetIsMoof","getUint64$3","parseSampleFlags","parseTrun$2","dataOffsetPresent","firstSampleFlagsPresent","sampleDurationPresent","sampleSizePresent","sampleFlagsPresent","sampleCompositionTimeOffsetPresent","getInt32","getUint64$2","parseMp4Date","parseType$2","nalParse","avcStream","avcView","dataReferenceIndex","horizresolution","vertresolution","frameCount","depth","numOfPictureParameterSets","nalSize","configurationVersion","avcProfileIndication","avcLevelIndication","lengthSizeMinusOne","numOfSequenceParameterSets","bufferSizeDB","maxBitrate","avgBitrate","edts","elst","getUint8","edits","entryCount","mediaTime","mediaRate","esId","streamPriority","decoderConfig","objectProfileIndication","decoderConfigDescriptor","audioObjectType","samplingFrequencyIndex","channelConfiguration","majorBrand","minorVersion","compatibleBrands","dataReferences","handlerType","escape","nals","modificationTime","streamDescriptor","nextTrackId","pdin","balance","ctts","compositionOffsets","sampleOffset","stss","syncSamples","chunkOffsets","sampleToChunks","firstChunk","samplesPerChunk","sampleDescriptions","sampleSize","entries","timeToSamples","sampleDelta","layer","alternateGroup","defaultSampleDescriptionIndex","sampleDependsOn","sampleIsDependedOn","sampleHasRedundancy","samplePaddingValue","sampleIsDifferenceSample","sampleDegradationPriority","graphicsmode","opcolor","ab","z","inspectedMp4","compositionStartTime","getVideoTrackIds","getTracks","getTimescaleFromMediaHeader$1","getEmsgID3","mp4Inspector","inspect","textify","parseTraf","parseTfdt","parseHdlr","parseTfhd","parseTrun","parseSidx","uint8ToCString","curChar","retString","getUint64$1","isValidEmsgBox","emsg","hasScheme","scheme_id_uri","isValidV0Box","isDefined","presentation_time_delta","isValidV1Box","presentation_time","emsg$1","parseEmsgBox","boxData","event_duration","emsgBox","message_data","scaleTime","timeDelta","toUnsigned","toHexString","findBox$3","parseType$1","parseTfhd$1","parseTrun$1","parseTfdt$2","window$2","lowestTime","baseTime","scale","timescales","trafBoxes","parsedTrun","traks","videoTrackIds","hdlrs","tkhds","tkhdVersion","codecConfig","codecBox","segmentData","emsgBoxes","parsedBox","parsedId3Frames","probe$2","getTimescaleFromMediaHeader","findBox$2","window$1","getMdatTrafPairs","trafs","mdats","mdatTrafPairs","matchingTraf","parseSamples","truns","allSamples","findBox$1","parseTfdt$1","getMdatTrafPairs$1","parseSamples$1","mapToSample","approximateOffset","parseCaptionNals","videoTrackId","captionNals","pair","headerInfo","seiNal","lastMatchedSample","logs","seiNals","matchingSample","findSeiNals","captionParser","segmentCache","parsedCaptions","parsingPartial","isInitialized","isPartial","isNewInit","parsedData","cachedSegment","trackNals","parseEmbeddedCaptions","pushNals","nal","clearParsedCaptions","resetCaptionStream","clearAllCaptions","webvttParser","parseSegment","vttCues","mdatBox","trafBox","tfdtBox","tfhdBox","trunBoxes","mdatOffset","textDecoder","sampleData","vttcBox","paylBox","sttgBox","cueText","StreamTypes$1","parsePid","parsePayloadUnitStartIndicator","parseAdaptionField","parseNalUnitType","probe$1","pusi","payloadOffset","parsePesType","parsePesTime","videoPacketContainsKeyFrame","frameBuffer","frameI","frameSyncPoint","foundKeyFrame","StreamTypes","probe","parseAudioPes_","pesType","parsed","endLoop","table","parseVideoPes_","firstKeyFrame","inspectTs_","parsePsi_","tsInspector","baseTimestamp","audioCount","audioTimescale","inspectAac_","audioBaseTimestamp","dtsTime","ptsTime","videoBaseTimestamp","adjustTimestamp_","MessageHandlers","initArray","postMessage","gopInfo","timingInfo","videoSegmentTimingInfo","presentation","audioSegmentTimingInfo","trackInfo","audioTimingInfo","wireTransmuxerEvents","pushMp4Captions","trackIds","initMp4WebVttParser","webVttParser","getMp4WebVttText","mp4VttCues","probeMp4StartTime","probeMp4Tracks","probeEmsgID3","id3Frames","emsgData","probeTs","baseStartTime","tsStartTime","timeInfo","videoStart","audioStart","clearAllMp4Captions","clearParsedMp4Captions","setTimestampOffset","timestampOffset","appendStart","onmessage","messageHandlers","TransmuxWorker","processTransmux","audioAppendStart","onData","onTrackInfo","onAudioTimingInfo","onVideoTimingInfo","onVideoSegmentTimingInfo","onAudioSegmentTimingInfo","onId3","onCaptions","onDone","onEndedTimeline","onTransmuxerLog","isEndOfTimeline","triggerSegmentEventFn","transmuxedData","waitForEndedTimelineEvent","currentTransmux","videoFrameDtsTime","videoFramePtsTime","handleData_","handleGopInfo_","_ref48","handleDone_","dequeue","segmentInfoPayload","transmuxQueue","processAction","enqueueAction","transmux","segmentTransmuxer","term","workerCallback","endAction","listenForEndEvent","isArrayBuffer","transfers","REQUEST_ERRORS","abortAll","activeXhrs","handleErrors","handleKeyResponse","finishProcessingFn","errorObj","keyInfo","parseInitSegment","_ref50","initMp4Text","handleSegmentResponse","_ref52","newBytes","stringToArrayBuffer","lastReachedChar","stats","getRequestStats","encryptedBytes","transmuxAndNotify","_ref53","trackInfoFn","timingInfoFn","videoSegmentTimingInfoFn","audioSegmentTimingInfoFn","id3Fn","captionsFn","endedTimelineFn","dataFn","doneFn","fmp4Tracks","isMuxed","audioStartFn","audioEndFn","videoStartFn","videoEndFn","probeResult","handleSegmentBytes","_ref54","bytesAsUint8Array","isLikelyFmp4MediaSegment","isFmp4","_ref49","parseMp4TextSegment","audioCodec","videoCodec","finishLoading","_ref55","_ref56","decrypt","decryptionWorker","decryptionHandler","decrypted","keyBytes","decryptError","encrypted","waitForCompletion","_ref59","didError","segmentFinish","_ref58","requestId","decryptedBytes","decryptSegment","endOfAllRequests","parseError","handleProgress","_ref61","progressFn","progressEvent","getProgressStats","firstBytesReceivedAt","mediaSegmentRequest","_ref62","xhrOptions","abortFn","keyRequestOptions","keyRequestCallback","keyXhr","mapKeyRequestOptions","mapKeyRequestCallback","mapKeyXhr","initSegmentOptions","initSegmentRequestCallback","_ref51","handleInitSegmentResponse","initSegmentXhr","segmentRequestOptions","segmentRequestCallback","segmentXhr","loadendState","activeXhr","_ref60","calledAbortFn","handleLoadEnd","logFn$1","isMaat","mediaAttributes","unwrapCodecList","codecList","_ref63","codecCount","codecObj","codecsForPlaylist","codecInfo","getCodecs","audioGroup","defaultCodecs","audioGroupId","audioType","codecsFromDefault","logFn","representationToString","safeGetComputedStyle","property","stableSort","sortFn","newArray","cmp","comparePlaylistBandwidth","leftBandwidth","rightBandwidth","simpleSelector","playerBandwidth","limitRenditionByPlayerDimensions","playlistController","getAudioTrackPlaylists_","sortedPlaylistReps","rep","enabledPlaylistReps","bandwidthPlaylistReps","highestRemainingBandwidthRep","bandwidthBestRep","chosenRep","haveResolution","resolutionBestRepList","resolutionBestRep","resolutionPlusOneList","resolutionPlusOneSmallest","resolutionPlusOneRep","leastPixelDiffRep","leastPixelDiffSelector","leastPixelDiffList","pixelDiff","lastBandwidthSelector","pixelRatio","useDevicePixelRatio","devicePixelRatio","customPixelRatio","systemBandwidth","playlistController_","compactSegmentUrlDescription","pathname","addMetadata","_ref65","inbandTextTracks","videoDuration","Cue","WebKitDataCue","metadataTrack","metadataTrack_","deprecateOldCue","cuesArray","cuesGroupedByStartTime","timeSlot","sortedStartTimes","cueGroup","finiteDuration","nextTime","dateRangeAttr","scte35Out","scte35In","dateRangeKeysToOmit","createMetadataTrackIfNotExists","inBandMetadataTrackDispatchType","removeCuesFromTrack","finite","segmentInfoString","startOfSegment","mediaIndex","segmentLen","selection","isSyncRequest","independent","hasPartIndex","zeroBasedPartCount","timingInfoPropertyForMedia","shouldWaitForTimelineChange","_ref68","timelineChangeController","loaderType","audioDisabled","lastMainTimelineChange","lastTimelineChange","pendingAudioTimelineChange","pendingTimelineChange","checkAndFixTimelines","segmentLoader","pendingSegment_","timelineChangeController_","currentTimeline_","loaderType_","audioDisabled_","pendingMainTimelineChange","hasPendingTimelineChanges","differentPendingChanges","shouldFixBadTimelineChanges","isAudioTimelineBehind","segmentTooLong","_ref69","maxDuration","getTroublesomeSegmentDurationMessage","sourceType","timingInfos","typeTimingInfo","mediaDuration","isSegmentWayTooLong","isSegmentSlightlyTooLong","segmentTooLongMessage","severity","_ref70","isEncrypted","ke","isMediaInitialization","SegmentLoader","mediaSource","throughput","roundTrip","resetStats_","hasPlayed_","hasPlayed","seekable_","seeking_","mediaSource_","currentMediaInfo_","startingMediaInfo_","segmentMetadataTrack_","segmentMetadataTrack","goalBufferLength_","goalBufferLength","sourceType_","sourceUpdater_","sourceUpdater","inbandTextTracks_","state_","shouldSaveSegmentTimingInfo_","useDtsForTimestampOffset_","useDtsForTimestampOffset","captionServices_","checkBufferTimeout_","shouldForceTimestampOffsetAfterResync_","xhrOptions_","pendingSegments_","isPendingTimestampOffset_","gopBuffer_","timeMapping_","safeAppend_","appendInitSegment_","playlistOfLastInitSegment_","callQueue_","loadQueue_","metadataQueue_","waitingOnRemove_","quotaExceededErrorRetryTimeout_","activeInitSegmentId_","initSegments_","cacheEncryptionKeys_","cacheEncryptionKeys","keyCache_","decrypter_","decrypter","syncController_","syncController","syncPoint_","transmuxer_","createTransmuxer_","triggerSyncInfoUpdate_","isEndOfStream_","ended_","fetchAtBuffer_","newState","hasEnoughInfoToAppend_","processCallQueue_","hasEnoughInfoToLoad_","processLoadQueue_","mediaSequenceSync_","getMediaSequenceSync","mediaBytesTransferred","mediaRequests","mediaRequestsAborted","mediaRequestsTimedout","mediaRequestsErrored","mediaTransferDuration","mediaSecondsLoaded","mediaAppends","abort_","setAudio","removeAudio","clearPendingTimelineChange","monitorBuffer_","abortRequests","checkForAbort_","endOfStream","buffered_","getMediaInfo_","videoBuffered","audioBuffered","initSegmentForMap","storedMap","segmentKey","storedKey","couldBeginLoading_","playlist_","init_","resetEverything","newPlaylist","syncInfo","setDateTimeMappingForStart","oldId","diagnostics","resetLoader","resyncLoader","mediaSequenceDiff","saveExpiredSegmentInfo","resetAppendedStatus","force","removesRemaining","removeFinished","mapping","updatedBuffer","removeGopBuffer","removeVideo","monitorBufferTick_","fillBuffer_","updating","chooseNextRequest_","loadSegment_","appendedLastSegment","appendedLastPart","bufferedTime","preloaded","haveEnoughBuffer","getSyncPoint","targetTime","timelineSegments","getSyncSegmentCandidate","isReliable","getSyncInfoFromMediaSequenceSync_","mediaInfoForTime","nextSegment","hasIndependentSegments","lastSegmentLastPart","forceTimestampOffset","generateSegmentInfo_","finalTargetTime","mediaSequenceSyncInfo","getSyncInfoForTime","isAppended","nextMediaSequenceSyncInfo","overrideCheck","timestampOffsetForSegment_","audioBufferedEnd","audioTimestampOffset","currentTimePts","gopsSafeToAlignWith","videoTimestampOffset","_ref67","timestampOffsetForSegment","earlyAbortWhenNeeded_","measuredBandwidth","requestTimeRemaining","timeUntilRebuffer$1","timeUntilRebuffer","switchCandidate","compatiblePlaylists","enabledPlaylists","rebufferingEstimates","numRequests","rebufferingImpact","noRebufferingPlaylists","estimate","minRebufferMaxBandwidthSelector","timeSavedBySwitching","minimumTimeSaving","handleAbort_","handleProgress_","simpleSegment","handleTrackInfo_","checkForIllegalMediaSwitch","akeys","bkeys","shallowEqual","handleTimingInfo_","timeType","timingInfoProperty","handleCaptions_","captionData","hasAppendedData_","captionTracks","captionTrack","trackName","captionService","createCaptionsTrackIfNotExists","captionArray","addCaptionData","handleId3_","processMetadataQueue_","callQueue","fun","loadQueue","getCurrentMediaInfo_","getPendingSegmentPlaylist","setTimeMapping_","updateMediaSecondsLoaded_","useVideoTimingInfo","firstVideoFrameTimeForData","trueSegmentStart_","currentStart","currentVideoTimestampOffset","updateAppendInitSegmentStatus","updateSourceBufferTimestampOffset_","updateTimingInfoEnd_","saveSegmentTimingInfo","shouldSaveTimelineMapping","appendData_","changedTimestampOffset","getInitSegmentAndUpdateState_","handleQuotaExceededError_","audioBufferStart","audioBufferEnd","videoBufferStart","videoBufferEnd","appendToSourceBuffer_","timeToRemoveUntil","MIN_BACK_BUFFER","handleAppendError_","segmentObj","concatSegments","appendBuffer","handleSegmentTimingInfo_","segmentTimingInfo","transmuxedDecodeStart","transmuxedDecodeEnd","trimBackBuffer_","updateTransmuxerAndRequestSegment_","shouldUpdateTransmuxerTimestampOffset_","createSimplifiedSegmentObj_","isEndOfStream","isWalkingForward","isDiscontinuity","segmentRequestFinished_","_ref75","_ref76","removeToTime","trimTime","maxTrimTime","safeBackBufferTrimTime","previousSegment","saveTransferStats_","saveBandwidthRelatedStats_","bandwidthInfo","handleTimeout_","updateGopBuffer","waitForAppendsToComplete_","timelineMapping","mappingForTimeline","waitForVideo","waitForAudio","waitingOnAppends","checkAppendsDone_","videoQueueCallback","audioQueueCallback","handleAppendsDone_","illegalMediaSwitchError","startingMedia","illegalMediaSwitch","didChange","getSegmentStartTimeForTimestampOffsetCalculation_","prioritizedTimingInfo","markAppended","segmentDurationMessage","recordThroughput_","addSegmentMetadataCue_","badSegmentGuess","badPartGuess","segmentProcessingTime","segmentProcessingThroughput","bufferTypes","sourceBuffer","queuePending","shiftQueue","queueIndex","queueEntry","nextQueueIndexOfType","cleanupBuffer","titleType","inSourceBuffers","sourceBuffers","actions","onError","mime","addSourceBuffer","removeSourceBuffer","newCodecBase","oldCodec","codecsChangeInfo","changeType","pushQueue","_ref79","onUpdateend","descriptiveString","bufferedRangesStr","bufferedRangesToString","SourceUpdater","sourceopenListener_","audioTimestampOffset_","videoTimestampOffset_","delayedAudioAppendQueue_","videoAppendQueued_","onVideoUpdateEnd_","onAudioUpdateEnd_","onVideoError_","videoError_","onAudioError_","audioError_","createdSourceBuffers_","initializedEme_","triggeredReady_","initializedEme","hasCreatedSourceBuffers","hasInitializedAnyEme","createSourceBuffers","addOrChangeSourceBuffers","canRemoveSourceBuffer","SourceBuffer","canChangeType","processedAppend_","videoBuffer","que","audioBuffer","bufferA","bufferB","arity","extents","bufferIntersection","setDuration","uint8ToUtf8","uintArray","VTT_LINE_TERMINATORS","NoVttJsError","VTTSegmentLoader","subtitlesTrack_","featuresNativeTextTracks_","loadVttJs","combinedByteLength","combinedSegment","timestampOffsetForTimeline","checkTimestampOffset","skipEmptySegments_","stopForError","isMp4WebVttSegmentWithCues","requested","parseVTTCues_","updateTimeMapping_","timelines","uniqueCues","cueKey","removeDuplicateCuesFromTrack","isVttType","isTextResult","parseMp4VttCues_","vttCue","cueSetting","keyValString","decodeBytesToString","timestampmap","MPEGTS","LOCAL","mapData","mappingObj","diff","handleRollover_","firstStart","lastStart","valueIn90khz","referenceIn90khz","findAdCue","adStartTime","adEndTime","SyncInfo","appended","start_","end_","segmentIndex_","partIndex_","appended_","isInRange","SyncInfoData","segmentSyncInfo","partsSyncInfo","segmentSyncInfo_","partsSyncInfo_","hasPartsSyncInfo","resetAppendStatus","partSyncInfo","MediaSequenceSync","storage_","diagnostics_","isReliable_","syncInfoData","isReliablePlaylist_","updateStorage_","calculateBaseTime_","getSyncInfoForMediaSequence","startingMediaSequence","startingTime","newStorage","newDiagnostics","currentMediaSequence","prevSyncInfoData","segmentStart","segmentIsAppended","currentPartStart","partStart","partEnd","partIsAppended","fallback","minMediaSequenceFromStorage","DependantMediaSequenceSync","parent_","syncPointStrategies","run","mediaSequenceSync","timelineToDatetimeMappings","lastDistance","datetimeMapping","discontinuitySync","discontinuities","SyncController","mediaSequenceStorage_","_ref81","syncPoints","runStrategies_","syncPointInfo","strategy","selectSyncPoint_","getExpiredTime","bestSyncPoint","bestDistance","bestStrategy","newDistance","lastRemovedSegment","playlistTimestamp","didCalculateSegmentTimeMapping","calculateSegmentTimeMapping_","saveDiscontinuitySyncInfo_","dateTime","accuracy","mediaIndexDiff","TimelineChangeController","pendingTimelineChanges_","lastTimelineChanges_","timelineChangeInfo","workerCode","aesTables","AES","tmp","tables","encTable","decTable","sbox","sboxInv","xInv","th","x2","x4","x8","tEnc","tDec","precompute","_tables","keyLen","rcon","encKey","decKey","encrypted0","encrypted1","encrypted2","encrypted3","out","a2","c2","nInnerRounds","kIndex","table0","table1","table2","table3","AsyncStream","jobs","timeout_","processJob_","job","ntoh","word","Decrypter","initVector","STEP","encrypted32","Int32Array","asyncStream_","decryptChunk_","padded","decipher","decrypted32","init0","init1","init2","init3","wordIx","audioTrackKind_","stopLoaders","activePlaylistLoader","startLoaders","playlistLoader","excludePlaylist","activeTrack","activeGroup","defaultTrack","onTrackChanged","setupListeners","requestOptions","segmentLoaders","initialize","variantLabel","isMainPlaylist","useForcedSubtitles","groupMatch","setupMediaGroups","audioSegmentLoader","mainSegmentLoader","variants","groupKeys","groupPropertyList","onGroupChanged","getActiveGroup","previousActiveLoader","lastGroup","lastGroup_","lastTrack_","onGroupChanging","lastTrack","pc","selectPlaylist","fastQualityChange_","activeTrack_","onAudioTrackChanged","SteeringManifest","priority_","pathwayClones_","version_","ttl","ttl_","reloadUri","reloadUri_","pathwayClones","ContentSteeringController","currentPathway","defaultPathway","availablePathways_","steeringManifest","proxyServerUrl_","manifestType_","ttlTimeout_","request_","currentPathwayClones","nextPathwayClones","excludedSteeringManifestURLs","xhr_","getBandwidth_","assignTagProperties","steeringTag","serverUri","steeringUri","startsWith","decodeDataUriManifest_","pathwayId","defaultServiceLocation","proxyServerURL","requestSteeringManifest","getRequestURI","errorInfo","retrySeconds","startTTLTimeout_","steeringManifestJson","assignSteeringProperties_","parsedMetadata","contentSteeringManifest","setProxyServerUrl_","steeringUrl","steeringUrlObject","proxyServerUrlObject","encodeURI","setSteeringParams_","dataUri","urlObject","getPathway","networkThroughput","pathwayKey","throughputKey","steeringJson","TTL","nextPathway","pathwaysByPriority","chooseNextPathway","proxyURI","steeringURI","ttlMS","clearTTLTimeout_","addAvailablePathway","clearAvailablePathways","excludePathway","didDASHTagChange","baseURL","newTag","getAvailablePathways","Vhs$1","loaderStats","sumLoaderStat","stat","audioSegmentLoader_","mainSegmentLoader_","PlaylistController","externVhs","useCueTags","enableLowInitialPlaylist","bufferBasedABR","experimentalUseMMS","maxPlaylistRetries","useCueTags_","usingManagedMediaSource_","cueTagsTrack_","requestOptions_","pauseLoading","mediaTypes_","createMediaTypes","disableRemotePlayback","handleDurationChange_","handleSourceOpen_","handleSourceEnded_","keyStatusMap_","segmentLoaderSettings","setupMainPlaylistLoaderListeners_","subtitleSegmentLoader_","onLoad","contentSteeringController_","setupSegmentLoaderListeners_","startABRTimer_","stopABRTimer_","triggeredFmp4Usage","loadOnPlay_","timeToLoadedData__","mainAppendsToLoadedData__","audioAppendsToLoadedData__","timeToLoadedDataStart","mainAppendsToLoadedData_","audioAppendsToLoadedData_","appendsToLoadedData_","timeToLoadedData_","checkABR_","nextPlaylist","shouldSwitchToMedia_","switchMedia_","newId","renditionInfo","switchMediaForDASHContentSteering_","dashMediaPlaylists","abrTimer_","defaultPlaylists","defaultGroup","requestTimeout","triggerPresenceUsage_","setupFirstPlay","selectedMedia","attachContentSteeringListeners_","initContentSteeringController_","excludeUnsupportedVariants_","selectInitialPlaylist","initialMedia_","handleUpdatedMediaPlaylist","playlistToExclude","waitingForFastQualityPlaylistReceived_","runFastQualitySwitch_","lastExcludeReason_","stuckAtPlaylistEnd_","updateAdCues_","updateDuration","defaultDemuxed","audioGroupKeys","currentPlaylist","bufferLowWaterLine","bufferHighWaterLine","sharedLogLine","isBuffered","forwardBuffer","maxBufferLowWaterLine","nextBandwidth","currBandwidth","logLine","shouldSwitchToMedia","onSyncInfoUpdate_","onEndOfStream","delegateLoaders_","updateCodecs","tryToCreateSourceBuffers_","getCodecsOrExclude_","mediaSecondsLoaded_","startPoint","mainMediaInfo","absolutePlaylistEnd","pathwayAttribute_","reIncludeDelay","excludeThenChangePathway_","reincluded","errorMessage","delayDuration","fnNames","loaders","dontFilterPlaylist","loader","getSeekableRange_","calculatedEnd","computeFinalSeekable_","mainSeekable","audioSeekable","mainStart","mainEnd","audioEnd","oldSeekable","seekableRanges","updateDuration_","areMediaTypesKnown_","usingAudioLoader","hasMainMediaInfo","hasAudioMediaInfo","playlistCodecs","supportFunction","unsupportedCodecs","unsupportedAudio","supporter","switchMessages","newCodec","excludeIncompatibleVariants_","ids","unsupported","codecCount_","videoDetails","audioDetails","exclusionReasons","variantCodecs","variantCodecCount","variantVideoDetails","variantAudioDetails","adOffset","adTotal","updateAdCues","newMax","_ref66","addDateRangeMetadata","resetContentSteeringController_","availablePathways","newPathways","didPathwaysChange","handlePathwayClones_","didEnablePlaylists","differentPathwayId","noExcludeUntil","changeSegmentPathway_","oldClone","equalPathwayClones_","aParams","bParams","excludeNonUsablePlaylistsByKeyId_","nonUsableKeyStatusCount","keyIdSet","hasUsableKeyStatus","nonUsableExclusion","isNonHD","excludedForNonUsableKey","addKeyStatus_","formattedKeyIdString","uInt8Buffer","padStart","bufferToHexString","updatePlaylistByKeyStatus","excludeNonUsableThenChangePlaylist_","Representation","vhsHandler","qualityChangeFunction","playlistID","changePlaylistFn","incompatible","currentlyEnabled","timerCancelEvents","PlaybackWatcher","allowSeeksWithinUnsafeLiveWindow","liveRangeSafeTimeDelta","playedRanges_","consecutiveUpdates","lastRecordedTime","checkCurrentTimeTimeout_","playHandler","monitorCurrentTime_","canPlayHandler","waitingHandler","techWaiting_","cancelTimerHandler","resetTimeUpdate_","loaderTypes","loaderChecks","resetSegmentDownloads_","updateend","checkSegmentDownloads_","setSeekingHandlers","seekingAppendCheck_","fixesBadSeeks_","clearSeekingAppendCheck_","watchForBadSeeking_","checkCurrentTime_","isBufferedDifferent","isRangeDifferent","bufferedRanges","waiting_","playedRanges","afterSeekableWindow_","beforeSeekableWindow_","minAppendedDuration","bufferedToCheck","nextRange","livePoint","videoUnderflow_","skipTheGap_","allowedEnd","isLLHLS","lastVideoRange","videoRange","audioRange","gapFromVideoUnderflow_","scheduledCurrentTime","gapInfo","gaps","findGaps","defaultOptions","errorInterval","getSource","IWillNotUseThisInPlugins","lastCalled","localOptions","loadedMetadataHandler","cleanupEvents","reloadSourceOnError","STANDARD_PLAYLIST_SELECTOR","INITIAL_PLAYLIST_SELECTOR","movingAverageBandwidthSelector","decay","average","lastSystemBandwidth","comparePlaylistResolution","leftWidth","rightWidth","handleVhsMediaChange","waitForKeySessionCreation","_ref89","sourceKeySystems","audioMedia","mainPlaylists","eme","initializeMediaKeys","keySystemsOptionsArr","keySystems","keySystemsArr","keySystemsOptions","keySystemsObj","keySystemOptions","getAllPsshKeySystemsOptions","initializationFinishedPromises","keySessionCreatedPromises","setupEmeOptions","_ref90","sourceOptions","audioPlaylist","videoContentType","audioContentType","keySystemContentTypes","emeKeySystems","getVhsLocalStorage","storedObject","addOnRequestHook","addOnResponseHook","removeOnRequestHook","removeOnResponseHook","supportsNativeHls","canItPlay","supportsNativeDash","supportsTypeNatively","onRequest","onResponse","offRequest","offResponse","Component","VhsHandler","initialBandwidth","_player","source_","ignoreNextSeekingEvent_","setOptions_","overrideNative","featuresNativeVideoTracks","webkitFullscreenElement","mozFullScreenElement","msFullscreenElement","useBandwidthFromLocalStorage","useNetworkInformationApi","setOptions","playbackWatcherOptions","playbackWatcher_","attachStreamingEventListeners_","defaultSelector","playerBandwidthEst","networkInformation","connection","mozConnection","webkitConnection","networkInfoBandwidthEstBitsPerSec","downlink","invBandwidth","invThroughput","mediaRequests_","mediaRequestsAborted_","mediaRequestsTimedout_","mediaRequestsErrored_","mediaTransferDuration_","mediaBytesTransferred_","mediaAppends_","mainAppendsToLoadedData","audioAppendsToLoadedData","appendsToLoadedData","timeToLoadedData","currentTech","playerDimensions","objectToStore","updateVhsLocalStorage","setupEme_","setupQualityLevels_","mediaSourceUrl_","createKeySessions_","audioPlaylistLoader","handleWaitingForKey_","didSetupEmeOptions","qualityLevels_","convertToProgramTime","setupXhrHooks_","VhsSourceHandler","simpleType","getOverrideNative","defaultOverrideNative"],"mappings":"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"}