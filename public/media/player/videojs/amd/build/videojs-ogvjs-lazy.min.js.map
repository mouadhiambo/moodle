{"version":3,"file":"videojs-ogvjs-lazy.min.js","sources":["../src/videojs-ogvjs-lazy.js"],"sourcesContent":["/**\r\n * videojs-ogvjs\r\n * @version 1.0.0\r\n * @copyright 2023 Huong Nguyen <huongnv13@gmail.com>\r\n * @license MIT\r\n */\r\ndefine(['media_videojs/video-lazy', './local/ogv/ogv'], (function (videojs, ogv) { 'use strict';\r\n\r\n\t// We can access public classes either as ogv.OGVPlayer or just OGVPlayer.\r\n\t// But ogv.OGVPlayer will make the lint tools happier.\r\n\tconst OGVCompat = ogv.OGVCompat;\r\n\tconst OGVLoader = ogv.OGVLoader;\r\n\tconst OGVPlayer = ogv.OGVPlayer;\r\n\tconst Tech = videojs.getComponent('Tech');\r\n\r\n\tconst androidOS = 'Android';\r\n\tconst iPhoneOS = 'iPhoneOS';\r\n\tconst iPadOS = 'iPadOS';\r\n\tconst otherOS = 'Other';\r\n\r\n\t/**\r\n\t * Object.defineProperty but \"lazy\", which means that the value is only set after\r\n\t * it retrieved the first time, rather than being set right away.\r\n\t *\r\n\t * @param {Object} obj the object to set the property on.\r\n\t * @param {string} key the key for the property to set.\r\n\t * @param {Function} getValue the function used to get the value when it is needed.\r\n\t * @param {boolean} setter whether a setter should be allowed or not.\r\n\t */\r\n\tconst defineLazyProperty = (obj, key, getValue, setter = true) => {\r\n\t\tconst set = (value) => {\r\n\t\t\tObject.defineProperty(obj, key, {value, enumerable: true, writable: true});\r\n\t\t};\r\n\r\n\t\tconst options = {\r\n\t\t\tconfigurable: true,\r\n\t\t\tenumerable: true,\r\n\t\t\tget() {\r\n\t\t\t\tconst value = getValue();\r\n\r\n\t\t\t\tset(value);\r\n\t\t\t\treturn value;\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tif (setter) {\r\n\t\t\toptions.set = set;\r\n\t\t}\r\n\r\n\t\treturn Object.defineProperty(obj, key, options);\r\n\t};\r\n\r\n\t/**\r\n\t * Get the device's OS.\r\n\t *\r\n\t * @return {string} Device's OS.\r\n\t */\r\n\tconst getDeviceOS = () => {\r\n\t\t/* global navigator */\r\n\t\tconst ua = navigator.userAgent;\r\n\r\n\t\tif (/android/i.test(ua)) {\r\n\t\t\treturn androidOS;\r\n\t\t} else if (/iPad|iPhone|iPod/.test(ua)) {\r\n\t\t\treturn iPhoneOS;\r\n\t\t} else if ((navigator.platform === 'MacIntel' && navigator.maxTouchPoints > 1)) {\r\n\t\t\treturn iPadOS;\r\n\t\t}\r\n\t\treturn otherOS;\r\n\t};\r\n\r\n\t/**\r\n\t * OgvJS Media Controller - Wrapper for ogv.js Media API\r\n\t *\r\n\t * @mixes Tech~SourceHandlerAdditions\r\n\t * @extends Tech\r\n\t */\r\n\tclass OgvJS extends Tech {\r\n\r\n\t\t/**\r\n\t\t * Create an instance of this Tech.\r\n\t\t *\r\n\t\t * @param {Object} [options] The key/value store of player options.\r\n\t\t * @param {Component~ReadyCallback} ready Callback function to call when the `OgvJS` Tech is ready.\r\n\t\t */\r\n\t\tconstructor(options, ready) {\r\n\t\t\tsuper(options, ready);\r\n\r\n\t\t\tthis.el_.src = options.source.src;\r\n\t\t\tOgvJS.setIfAvailable(this.el_, 'autoplay', options.autoplay);\r\n\t\t\tOgvJS.setIfAvailable(this.el_, 'loop', options.loop);\r\n\t\t\tOgvJS.setIfAvailable(this.el_, 'poster', options.poster);\r\n\t\t\tOgvJS.setIfAvailable(this.el_, 'preload', options.preload);\r\n\r\n\t\t\tthis.on('loadedmetadata', () => {\r\n\t\t\t\tif (getDeviceOS() === iPhoneOS) {\r\n\t\t\t\t\t// iPhoneOS add some inline styles to the canvas, we need to remove it.\r\n\t\t\t\t\tconst canvas = this.el_.getElementsByTagName('canvas')[0];\r\n\r\n\t\t\t\t\tcanvas.style.removeProperty('width');\r\n\t\t\t\t\tcanvas.style.removeProperty('margin');\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\tthis.triggerReady();\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Create the 'OgvJS' Tech's DOM element.\r\n\t\t *\r\n\t\t * @return {Element} The element that gets created.\r\n\t\t */\r\n\t\tcreateEl() {\r\n\t\t\tconst options = this.options_;\r\n\r\n\t\t\tif (options.base) {\r\n\t\t\t\tOGVLoader.base = options.base;\r\n\t\t\t} else {\r\n\t\t\t\tthrow new Error('Please specify the base for the ogv.js library');\r\n\t\t\t}\r\n\r\n\t\t\tconst el = new OGVPlayer(options);\r\n\r\n\t\t\tel.className += ' vjs-tech';\r\n\t\t\toptions.tag = el;\r\n\r\n\t\t\treturn el;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Start playback\r\n\t\t *\r\n\t\t * @method play\r\n\t\t */\r\n\t\tplay() {\r\n\t\t\tthis.el_.play();\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Get the current playback speed.\r\n\t\t *\r\n\t\t * @return {number}\r\n\t\t * @method playbackRate\r\n\t\t */\r\n\t\tplaybackRate() {\r\n\t\t\treturn this.el_.playbackRate || 1;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Set the playback speed.\r\n\t\t *\r\n\t\t * @param {number} val Speed for the player to play.\r\n\t\t * @method setPlaybackRate\r\n\t\t */\r\n\t\tsetPlaybackRate(val) {\r\n\t\t\tif (this.el_.hasOwnProperty('playbackRate')) {\r\n\t\t\t\tthis.el_.playbackRate = val;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Returns a TimeRanges object that represents the ranges of the media resource that the user agent has played.\r\n\t\t *\r\n\t\t * @return {TimeRangeObject} the range of points on the media timeline that has been reached through normal playback\r\n\t\t */\r\n\t\tplayed() {\r\n\t\t\treturn this.el_.played;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Pause playback\r\n\t\t *\r\n\t\t * @method pause\r\n\t\t */\r\n\t\tpause() {\r\n\t\t\tthis.el_.pause();\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Is the player paused or not.\r\n\t\t *\r\n\t\t * @return {boolean}\r\n\t\t * @method paused\r\n\t\t */\r\n\t\tpaused() {\r\n\t\t\treturn this.el_.paused;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Get current playing time.\r\n\t\t *\r\n\t\t * @return {number}\r\n\t\t * @method currentTime\r\n\t\t */\r\n\t\tcurrentTime() {\r\n\t\t\treturn this.el_.currentTime;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Set current playing time.\r\n\t\t *\r\n\t\t * @param {number} seconds Current time of audio/video.\r\n\t\t * @method setCurrentTime\r\n\t\t */\r\n\t\tsetCurrentTime(seconds) {\r\n\t\t\ttry {\r\n\t\t\t\tthis.el_.currentTime = seconds;\r\n\t\t\t} catch (e) {\r\n\t\t\t\tvideojs.log(e, 'Media is not ready. (Video.JS)');\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Get media's duration.\r\n\t\t *\r\n\t\t * @return {number}\r\n\t\t * @method duration\r\n\t\t */\r\n\t\tduration() {\r\n\t\t\tif (this.el_.duration && this.el_.duration !== Infinity) {\r\n\t\t\t\treturn this.el_.duration;\r\n\t\t\t}\r\n\r\n\t\t\treturn 0;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Get a TimeRange object that represents the intersection\r\n\t\t * of the time ranges for which the user agent has all\r\n\t\t * relevant media.\r\n\t\t *\r\n\t\t * @return {TimeRangeObject}\r\n\t\t * @method buffered\r\n\t\t */\r\n\t\tbuffered() {\r\n\t\t\treturn this.el_.buffered;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Get current volume level.\r\n\t\t *\r\n\t\t * @return {number}\r\n\t\t * @method volume\r\n\t\t */\r\n\t\tvolume() {\r\n\t\t\treturn this.el_.hasOwnProperty('volume') ? this.el_.volume : 1;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Set current playing volume level.\r\n\t\t *\r\n\t\t * @param {number} percentAsDecimal Volume percent as a decimal.\r\n\t\t * @method setVolume\r\n\t\t */\r\n\t\tsetVolume(percentAsDecimal) {\r\n\t\t\t// Apple does not allow iOS and iPadOS devices to set the volume on UI.\r\n\t\t\tif (getDeviceOS() !== iPhoneOS && getDeviceOS() !== iPadOS && this.el_.hasOwnProperty('volume')) {\r\n\t\t\t\tthis.el_.volume = percentAsDecimal;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Is the player muted or not.\r\n\t\t *\r\n\t\t * @return {boolean}\r\n\t\t * @method muted\r\n\t\t */\r\n\t\tmuted() {\r\n\t\t\treturn this.el_.muted;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Mute the player.\r\n\t\t *\r\n\t\t * @param {boolean} muted True to mute the player.\r\n\t\t */\r\n\t\tsetMuted(muted) {\r\n\t\t\tthis.el_.muted = !!muted;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Is the player muted by default or not.\r\n\t\t *\r\n\t\t * @return {boolean}\r\n\t\t * @method defaultMuted\r\n\t\t */\r\n\t\tdefaultMuted() {\r\n\t\t\treturn this.el_.defaultMuted || false;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Get the player width.\r\n\t\t *\r\n\t\t * @return {number}\r\n\t\t * @method width\r\n\t\t */\r\n\t\twidth() {\r\n\t\t\treturn this.el_.offsetWidth;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Get the player height.\r\n\t\t *\r\n\t\t * @return {number}\r\n\t\t * @method height\r\n\t\t */\r\n\t\theight() {\r\n\t\t\treturn this.el_.offsetHeight;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Get the video width.\r\n\t\t *\r\n\t\t * @return {number}\r\n\t\t * @method videoWidth\r\n\t\t */\r\n\t\tvideoWidth() {\r\n\t\t\treturn this.el_.videoWidth;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Get the video height.\r\n\t\t *\r\n\t\t * @return {number}\r\n\t\t * @method videoHeight\r\n\t\t */\r\n\t\tvideoHeight() {\r\n\t\t\treturn this.el_.videoHeight;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Get/set media source.\r\n\t\t *\r\n\t\t * @param {Object=} src Source object\r\n\t\t * @return {Object}\r\n\t\t * @method src\r\n\t\t */\r\n\t\tsrc(src) {\r\n\t\t\tif (typeof src === 'undefined') {\r\n\t\t\t\treturn this.el_.src;\r\n\t\t\t}\r\n\t\t\tthis.el_.src = src;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Load the media into the player.\r\n\t\t *\r\n\t\t * @method load\r\n\t\t */\r\n\t\tload() {\r\n\t\t\tthis.el_.load();\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Get current media source.\r\n\t\t *\r\n\t\t * @return {Object}\r\n\t\t * @method currentSrc\r\n\t\t */\r\n\t\tcurrentSrc() {\r\n\t\t\tif (this.currentSource_) {\r\n\t\t\t\treturn this.currentSource_.src;\r\n\t\t\t}\r\n\t\t\treturn this.el_.currentSrc;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Get media poster URL.\r\n\t\t *\r\n\t\t * @return {string}\r\n\t\t * @method poster\r\n\t\t */\r\n\t\tposter() {\r\n\t\t\treturn this.el_.poster;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Set media poster URL.\r\n\t\t *\r\n\t\t * @param {string} url the poster image's url.\r\n\t\t * @method\r\n\t\t */\r\n\t\tsetPoster(url) {\r\n\t\t\tthis.el_.poster = url;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Is the media preloaded or not.\r\n\t\t *\r\n\t\t * @return {string}\r\n\t\t * @method preload\r\n\t\t */\r\n\t\tpreload() {\r\n\t\t\treturn this.el_.preload || 'none';\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Set the media preload method.\r\n\t\t *\r\n\t\t * @param {string} val Value for preload attribute.\r\n\t\t * @method setPreload\r\n\t\t */\r\n\t\tsetPreload(val) {\r\n\t\t\tif (this.el_.hasOwnProperty('preload')) {\r\n\t\t\t\tthis.el_.preload = val;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Is the media auto-played or not.\r\n\t\t *\r\n\t\t * @return {boolean}\r\n\t\t * @method autoplay\r\n\t\t */\r\n\t\tautoplay() {\r\n\t\t\treturn this.el_.autoplay || false;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Set media autoplay method.\r\n\t\t *\r\n\t\t * @param {boolean} val Value for autoplay attribute.\r\n\t\t * @method setAutoplay\r\n\t\t */\r\n\t\tsetAutoplay(val) {\r\n\t\t\tif (this.el_.hasOwnProperty('autoplay')) {\r\n\t\t\t\tthis.el_.autoplay = !!val;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Does the media has controls or not.\r\n\t\t *\r\n\t\t * @return {boolean}\r\n\t\t * @method controls\r\n\t\t */\r\n\t\tcontrols() {\r\n\t\t\treturn this.el_.controls || false;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Set the media controls method.\r\n\t\t *\r\n\t\t * @param {boolean} val Value for controls attribute.\r\n\t\t * @method setControls\r\n\t\t */\r\n\t\tsetControls(val) {\r\n\t\t\tif (this.el_.hasOwnProperty('controls')) {\r\n\t\t\t\tthis.el_.controls = !!val;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Is the media looped or not.\r\n\t\t *\r\n\t\t * @return {boolean}\r\n\t\t * @method loop\r\n\t\t */\r\n\t\tloop() {\r\n\t\t\treturn this.el_.loop || false;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Set the media loop method.\r\n\t\t *\r\n\t\t * @param {boolean} val Value for loop attribute.\r\n\t\t * @method setLoop\r\n\t\t */\r\n\t\tsetLoop(val) {\r\n\t\t\tif (this.el_.hasOwnProperty('loop')) {\r\n\t\t\t\tthis.el_.loop = !!val;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Get a TimeRanges object that represents the\r\n\t\t * ranges of the media resource to which it is possible\r\n\t\t * for the user agent to seek.\r\n\t\t *\r\n\t\t * @return {TimeRangeObject}\r\n\t\t * @method seekable\r\n\t\t */\r\n\t\tseekable() {\r\n\t\t\treturn this.el_.seekable;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Is player in the \"seeking\" state or not.\r\n\t\t *\r\n\t\t * @return {boolean}\r\n\t\t * @method seeking\r\n\t\t */\r\n\t\tseeking() {\r\n\t\t\treturn this.el_.seeking;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Is the media ended or not.\r\n\t\t *\r\n\t\t * @return {boolean}\r\n\t\t * @method ended\r\n\t\t */\r\n\t\tended() {\r\n\t\t\treturn this.el_.ended;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Get the current state of network activity\r\n\t\t * NETWORK_EMPTY (numeric value 0)\r\n\t\t * NETWORK_IDLE (numeric value 1)\r\n\t\t * NETWORK_LOADING (numeric value 2)\r\n\t\t * NETWORK_NO_SOURCE (numeric value 3)\r\n\t\t *\r\n\t\t * @return {number}\r\n\t\t * @method networkState\r\n\t\t */\r\n\t\tnetworkState() {\r\n\t\t\treturn this.el_.networkState;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Get the current state of the player.\r\n\t\t * HAVE_NOTHING (numeric value 0)\r\n\t\t * HAVE_METADATA (numeric value 1)\r\n\t\t * HAVE_CURRENT_DATA (numeric value 2)\r\n\t\t * HAVE_FUTURE_DATA (numeric value 3)\r\n\t\t * HAVE_ENOUGH_DATA (numeric value 4)\r\n\t\t *\r\n\t\t * @return {number}\r\n\t\t * @method readyState\r\n\t\t */\r\n\t\treadyState() {\r\n\t\t\treturn this.el_.readyState;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Does the player support native fullscreen mode or not. (Mobile devices)\r\n\t\t *\r\n\t\t * @return {boolean}\r\n\t\t */\r\n\t\tsupportsFullScreen() {\r\n\t\t\t// iOS devices have some problem with HTML5 fullscreen api so we need to fallback to fullWindow mode.\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Get media player error.\r\n\t\t *\r\n\t\t * @return {string}\r\n\t\t * @method error\r\n\t\t */\r\n\t\terror() {\r\n\t\t\treturn this.el_.error;\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * List of available events of the media player.\r\n\t *\r\n\t * @private\r\n\t * @type {Array}\r\n\t */\r\n\tOgvJS.Events = [\r\n\t\t'loadstart',\r\n\t\t'suspend',\r\n\t\t'abort',\r\n\t\t'error',\r\n\t\t'emptied',\r\n\t\t'stalled',\r\n\t\t'loadedmetadata',\r\n\t\t'loadeddata',\r\n\t\t'canplay',\r\n\t\t'canplaythrough',\r\n\t\t'playing',\r\n\t\t'waiting',\r\n\t\t'seeking',\r\n\t\t'seeked',\r\n\t\t'ended',\r\n\t\t'durationchange',\r\n\t\t'timeupdate',\r\n\t\t'progress',\r\n\t\t'play',\r\n\t\t'pause',\r\n\t\t'ratechange',\r\n\t\t'resize',\r\n\t\t'volumechange'\r\n\t];\r\n\r\n\t/**\r\n\t * Set the value for the player is it has that property.\r\n\t *\r\n\t * @param {Element} el\r\n\t * @param {string} name\r\n\t * @param value\r\n\t */\r\n\tOgvJS.setIfAvailable = (el, name, value) => {\r\n\t\tif (el.hasOwnProperty(name)) {\r\n\t\t\tel[name] = value;\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Check if browser/device is supported by Ogv.JS.\r\n\t *\r\n\t * @return {boolean}\r\n\t */\r\n\tOgvJS.isSupported = () => {\r\n\t\treturn OGVCompat.supported('OGVPlayer');\r\n\t};\r\n\r\n\t/**\r\n\t * Check if the tech can support the given type.\r\n\t *\r\n\t * @param {string} type The mimetype to check\r\n\t * @return {string} 'probably', 'maybe', or '' (empty string)\r\n\t */\r\n\tOgvJS.canPlayType = (type) => {\r\n\t\treturn (type.indexOf('/ogg') !== -1 || type.indexOf('/webm')) ? 'maybe' : '';\r\n\t};\r\n\r\n\t/**\r\n\t * Check if the tech can support the given source\r\n\t *\r\n\t * @param srcObj The source object\r\n\t * @return {string} The options passed to the tech\r\n\t */\r\n\tOgvJS.canPlaySource = (srcObj) => {\r\n\t\treturn OgvJS.canPlayType(srcObj.type);\r\n\t};\r\n\r\n\t/**\r\n\t * Check if the volume can be changed in this browser/device.\r\n\t * Volume cannot be changed in a lot of mobile devices.\r\n\t * Specifically, it can't be changed on iOS and iPadOS.\r\n\t *\r\n\t * @return {boolean} True if volume can be controlled.\r\n\t */\r\n\tOgvJS.canControlVolume = () => {\r\n\t\tif (getDeviceOS() === iPhoneOS || getDeviceOS() === iPadOS) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tconst p = new OGVPlayer();\r\n\r\n\t\treturn p.hasOwnProperty('volume');\r\n\t};\r\n\r\n\t/**\r\n\t * Check if the volume can be muted in this browser/device.\r\n\t *\r\n\t * @return {boolean} True if volume can be muted.\r\n\t */\r\n\tOgvJS.canMuteVolume = () => {\r\n\t\treturn true;\r\n\t};\r\n\r\n\t/**\r\n\t * Check if the playback rate can be changed in this browser/device.\r\n\t *\r\n\t * @return {boolean} True if playback rate can be controlled.\r\n\t */\r\n\tOgvJS.canControlPlaybackRate = () => {\r\n\t\treturn true;\r\n\t};\r\n\r\n\t/**\r\n\t * Check to see if native 'TextTracks' are supported by this browser/device.\r\n\t *\r\n\t * @return {boolean} True if native 'TextTracks' are supported.\r\n\t */\r\n\tOgvJS.supportsNativeTextTracks = () => {\r\n\t\treturn false;\r\n\t};\r\n\r\n\t/**\r\n\t * Check if the fullscreen resize is supported by this browser/device.\r\n\t *\r\n\t * @return {boolean} True if the fullscreen resize is supported.\r\n\t */\r\n\tOgvJS.supportsFullscreenResize = () => {\r\n\t\treturn true;\r\n\t};\r\n\r\n\t/**\r\n\t * Check if the progress events is supported by this browser/device.\r\n\t *\r\n\t * @return {boolean} True if the progress events is supported.\r\n\t */\r\n\tOgvJS.supportsProgressEvents = () => {\r\n\t\treturn true;\r\n\t};\r\n\r\n\t/**\r\n\t * Check if the time update events is supported by this browser/device.\r\n\t *\r\n\t * @return {boolean} True if the time update events is supported.\r\n\t */\r\n\tOgvJS.supportsTimeupdateEvents = () => {\r\n\t\treturn true;\r\n\t};\r\n\r\n\t/**\r\n\t * Boolean indicating whether the 'OgvJS' tech supports volume control.\r\n\t *\r\n\t * @type {boolean}\r\n\t * @default {@link OgvJS.canControlVolume}\r\n\t */\r\n\t/**\r\n\t * Boolean indicating whether the 'OgvJS' tech supports muting volume.\r\n\t *\r\n\t * @type {boolean}\r\n\t * @default {@link OgvJS.canMuteVolume}\r\n\t */\r\n\t/**\r\n\t * Boolean indicating whether the 'OgvJS' tech supports changing the speed at which the media plays.\r\n\t * Examples:\r\n\t *   - Set player to play 2x (twice) as fast.\r\n\t *   - Set player to play 0.5x (half) as fast.\r\n\t *\r\n\t * @type {boolean}\r\n\t * @default {@link OgvJS.canControlPlaybackRate}\r\n\t */\r\n\t/**\r\n\t * Boolean indicating whether the 'OgvJS' tech currently supports native 'TextTracks'.\r\n\t *\r\n\t * @type {boolean}\r\n\t * @default {@link OgvJS.supportsNativeTextTracks}\r\n\t */\r\n\t/**\r\n\t * Boolean indicating whether the 'OgvJS' tech currently supports fullscreen resize.\r\n\t *\r\n\t * @type {boolean}\r\n\t * @default {@link OgvJS.supportsFullscreenResize}\r\n\t */\r\n\t/**\r\n\t * Boolean indicating whether the 'OgvJS' tech currently supports progress events.\r\n\t *\r\n\t * @type {boolean}\r\n\t * @default {@link OgvJS.supportsProgressEvents}\r\n\t */\r\n\t/**\r\n\t * Boolean indicating whether the 'OgvJS' tech currently supports time update events.\r\n\t *\r\n\t * @type {boolean}\r\n\t * @default {@link OgvJS.supportsTimeupdateEvents}\r\n\t */\r\n\t[\r\n\t\t['featuresVolumeControl', 'canControlVolume'],\r\n\t\t['featuresMuteControl', 'canMuteVolume'],\r\n\t\t['featuresPlaybackRate', 'canControlPlaybackRate'],\r\n\t\t['featuresNativeTextTracks', 'supportsNativeTextTracks'],\r\n\t\t['featuresFullscreenResize', 'supportsFullscreenResize'],\r\n\t\t['featuresProgressEvents', 'supportsProgressEvents'],\r\n\t\t['featuresTimeupdateEvents', 'supportsTimeupdateEvents']\r\n\t].forEach(([key, fn]) => {\r\n\t\tdefineLazyProperty(OgvJS.prototype, key, () => OgvJS[fn](), true);\r\n\t});\r\n\r\n\tTech.registerTech('OgvJS', OgvJS);\r\n\r\n\treturn OgvJS;\r\n\r\n}));\r\n"],"names":["define","videojs","ogv","OGVCompat","OGVLoader","OGVPlayer","Tech","getComponent","getDeviceOS","ua","navigator","userAgent","test","platform","maxTouchPoints","OgvJS","constructor","options","ready","el_","src","source","setIfAvailable","this","autoplay","loop","poster","preload","on","canvas","getElementsByTagName","style","removeProperty","triggerReady","createEl","options_","base","Error","el","className","tag","play","playbackRate","setPlaybackRate","val","hasOwnProperty","played","pause","paused","currentTime","setCurrentTime","seconds","e","log","duration","Infinity","buffered","volume","setVolume","percentAsDecimal","muted","setMuted","defaultMuted","width","offsetWidth","height","offsetHeight","videoWidth","videoHeight","load","currentSrc","currentSource_","setPoster","url","setPreload","setAutoplay","controls","setControls","setLoop","seekable","seeking","ended","networkState","readyState","supportsFullScreen","error","Events","name","value","isSupported","supported","canPlayType","type","indexOf","canPlaySource","srcObj","canControlVolume","canMuteVolume","canControlPlaybackRate","supportsNativeTextTracks","supportsFullscreenResize","supportsProgressEvents","supportsTimeupdateEvents","forEach","_ref","key","fn","obj","getValue","set","Object","defineProperty","enumerable","writable","configurable","get","defineLazyProperty","prototype","registerTech"],"mappings":"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"}