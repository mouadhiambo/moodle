define("theme_boost/bootstrap/util/config",["exports","../dom/manipulator","./index"],(function(_exports,_manipulator,_index){var obj;function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter((function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable}))),keys.push.apply(keys,symbols)}return keys}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach((function(key){_defineProperty(target,key,source[key])})):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach((function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key))}))}return target}function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}Object.defineProperty(_exports,"__esModule",{value:!0}),_exports.default=void 0,_manipulator=(obj=_manipulator)&&obj.__esModule?obj:{default:obj};var _default=class{static get Default(){return{}}static get DefaultType(){return{}}static get NAME(){throw new Error('You have to implement the static method "NAME", for each component!')}_getConfig(config){return config=this._mergeConfigObj(config),config=this._configAfterMerge(config),this._typeCheckConfig(config),config}_configAfterMerge(config){return config}_mergeConfigObj(config,element){const jsonConfig=(0,_index.isElement)(element)?_manipulator.default.getDataAttribute(element,"config"):{};return _objectSpread(_objectSpread(_objectSpread(_objectSpread({},this.constructor.Default),"object"==typeof jsonConfig?jsonConfig:{}),(0,_index.isElement)(element)?_manipulator.default.getDataAttributes(element):{}),"object"==typeof config?config:{})}_typeCheckConfig(config){let configTypes=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.constructor.DefaultType;for(const[property,expectedTypes]of Object.entries(configTypes)){const value=config[property],valueType=(0,_index.isElement)(value)?"element":(0,_index.toType)(value);if(!new RegExp(expectedTypes).test(valueType))throw new TypeError("".concat(this.constructor.NAME.toUpperCase(),': Option "').concat(property,'" provided type "').concat(valueType,'" but expected type "').concat(expectedTypes,'".'))}}};return _exports.default=_default,_exports.default}));

//# sourceMappingURL=config.min.js.map