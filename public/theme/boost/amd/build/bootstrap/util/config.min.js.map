{"version":3,"file":"config.min.js","sources":["../../../src/bootstrap/util/config.js"],"sourcesContent":["/**\r\n * --------------------------------------------------------------------------\r\n * Bootstrap util/config.js\r\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\r\n * --------------------------------------------------------------------------\r\n */\r\n\r\nimport Manipulator from '../dom/manipulator'\r\nimport { isElement, toType } from './index'\r\n\r\n/**\r\n * Class definition\r\n */\r\n\r\nclass Config {\r\n  // Getters\r\n  static get Default() {\r\n    return {}\r\n  }\r\n\r\n  static get DefaultType() {\r\n    return {}\r\n  }\r\n\r\n  static get NAME() {\r\n    throw new Error('You have to implement the static method \"NAME\", for each component!')\r\n  }\r\n\r\n  _getConfig(config) {\r\n    config = this._mergeConfigObj(config)\r\n    config = this._configAfterMerge(config)\r\n    this._typeCheckConfig(config)\r\n    return config\r\n  }\r\n\r\n  _configAfterMerge(config) {\r\n    return config\r\n  }\r\n\r\n  _mergeConfigObj(config, element) {\r\n    const jsonConfig = isElement(element) ? Manipulator.getDataAttribute(element, 'config') : {} // try to parse\r\n\r\n    return {\r\n      ...this.constructor.Default,\r\n      ...(typeof jsonConfig === 'object' ? jsonConfig : {}),\r\n      ...(isElement(element) ? Manipulator.getDataAttributes(element) : {}),\r\n      ...(typeof config === 'object' ? config : {})\r\n    }\r\n  }\r\n\r\n  _typeCheckConfig(config, configTypes = this.constructor.DefaultType) {\r\n    for (const [property, expectedTypes] of Object.entries(configTypes)) {\r\n      const value = config[property]\r\n      const valueType = isElement(value) ? 'element' : toType(value)\r\n\r\n      if (!new RegExp(expectedTypes).test(valueType)) {\r\n        throw new TypeError(\r\n          `${this.constructor.NAME.toUpperCase()}: Option \"${property}\" provided type \"${valueType}\" but expected type \"${expectedTypes}\".`\r\n        )\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport default Config\r\n"],"names":["Default","DefaultType","NAME","Error","_getConfig","config","this","_mergeConfigObj","_configAfterMerge","_typeCheckConfig","element","jsonConfig","Manipulator","getDataAttribute","constructor","getDataAttributes","configTypes","property","expectedTypes","Object","entries","value","valueType","RegExp","test","TypeError","toUpperCase"],"mappings":"mtCAgBaA,2BACF,GAGEC,+BACF,GAGEC,wBACH,IAAIC,MAAM,uEAGlBC,WAAWC,eACTA,OAASC,KAAKC,gBAAgBF,QAC9BA,OAASC,KAAKE,kBAAkBH,aAC3BI,iBAAiBJ,QACfA,OAGTG,kBAAkBH,eACTA,OAGTE,gBAAgBF,OAAQK,eAChBC,YAAa,oBAAUD,SAAWE,qBAAYC,iBAAiBH,QAAS,UAAY,qEAGrFJ,KAAKQ,YAAYd,SACM,iBAAfW,WAA0BA,WAAa,KAC9C,oBAAUD,SAAWE,qBAAYG,kBAAkBL,SAAW,IAC5C,iBAAXL,OAAsBA,OAAS,IAI9CI,iBAAiBJ,YAAQW,mEAAcV,KAAKQ,YAAYb,gBACjD,MAAOgB,SAAUC,iBAAkBC,OAAOC,QAAQJ,aAAc,OAC7DK,MAAQhB,OAAOY,UACfK,WAAY,oBAAUD,OAAS,WAAY,iBAAOA,WAEnD,IAAIE,OAAOL,eAAeM,KAAKF,iBAC5B,IAAIG,oBACLnB,KAAKQ,YAAYZ,KAAKwB,mCAA0BT,qCAA4BK,0CAAiCJ"}