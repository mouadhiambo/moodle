{"version":3,"file":"sanitizer.min.js","sources":["../../../src/bootstrap/util/sanitizer.js"],"sourcesContent":["/**\r\n * --------------------------------------------------------------------------\r\n * Bootstrap util/sanitizer.js\r\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\r\n * --------------------------------------------------------------------------\r\n */\r\n\r\n// js-docs-start allow-list\r\nconst ARIA_ATTRIBUTE_PATTERN = /^aria-[\\w-]*$/i\r\n\r\nexport const DefaultAllowlist = {\r\n  // Global attributes allowed on any supplied element below.\r\n  '*': ['class', 'dir', 'id', 'lang', 'role', ARIA_ATTRIBUTE_PATTERN],\r\n  a: ['target', 'href', 'title', 'rel'],\r\n  area: [],\r\n  b: [],\r\n  br: [],\r\n  col: [],\r\n  code: [],\r\n  dd: [],\r\n  div: [],\r\n  dl: [],\r\n  dt: [],\r\n  em: [],\r\n  hr: [],\r\n  h1: [],\r\n  h2: [],\r\n  h3: [],\r\n  h4: [],\r\n  h5: [],\r\n  h6: [],\r\n  i: [],\r\n  img: ['src', 'srcset', 'alt', 'title', 'width', 'height'],\r\n  li: [],\r\n  ol: [],\r\n  p: [],\r\n  pre: [],\r\n  s: [],\r\n  small: [],\r\n  span: [],\r\n  sub: [],\r\n  sup: [],\r\n  strong: [],\r\n  u: [],\r\n  ul: []\r\n}\r\n// js-docs-end allow-list\r\n\r\nconst uriAttributes = new Set([\r\n  'background',\r\n  'cite',\r\n  'href',\r\n  'itemtype',\r\n  'longdesc',\r\n  'poster',\r\n  'src',\r\n  'xlink:href'\r\n])\r\n\r\n/**\r\n * A pattern that recognizes URLs that are safe wrt. XSS in URL navigation\r\n * contexts.\r\n *\r\n * Shout-out to Angular https://github.com/angular/angular/blob/15.2.8/packages/core/src/sanitization/url_sanitizer.ts#L38\r\n */\r\n// eslint-disable-next-line unicorn/better-regex\r\nconst SAFE_URL_PATTERN = /^(?!javascript:)(?:[a-z0-9+.-]+:|[^&:/?#]*(?:[/?#]|$))/i\r\n\r\nconst allowedAttribute = (attribute, allowedAttributeList) => {\r\n  const attributeName = attribute.nodeName.toLowerCase()\r\n\r\n  if (allowedAttributeList.includes(attributeName)) {\r\n    if (uriAttributes.has(attributeName)) {\r\n      return Boolean(SAFE_URL_PATTERN.test(attribute.nodeValue))\r\n    }\r\n\r\n    return true\r\n  }\r\n\r\n  // Check if a regular expression validates the attribute.\r\n  return allowedAttributeList.filter(attributeRegex => attributeRegex instanceof RegExp)\r\n    .some(regex => regex.test(attributeName))\r\n}\r\n\r\nexport function sanitizeHtml(unsafeHtml, allowList, sanitizeFunction) {\r\n  if (!unsafeHtml.length) {\r\n    return unsafeHtml\r\n  }\r\n\r\n  if (sanitizeFunction && typeof sanitizeFunction === 'function') {\r\n    return sanitizeFunction(unsafeHtml)\r\n  }\r\n\r\n  const domParser = new window.DOMParser()\r\n  const createdDocument = domParser.parseFromString(unsafeHtml, 'text/html')\r\n  const elements = [].concat(...createdDocument.body.querySelectorAll('*'))\r\n\r\n  for (const element of elements) {\r\n    const elementName = element.nodeName.toLowerCase()\r\n\r\n    if (!Object.keys(allowList).includes(elementName)) {\r\n      element.remove()\r\n      continue\r\n    }\r\n\r\n    const attributeList = [].concat(...element.attributes)\r\n    const allowedAttributes = [].concat(allowList['*'] || [], allowList[elementName] || [])\r\n\r\n    for (const attribute of attributeList) {\r\n      if (!allowedAttribute(attribute, allowedAttributes)) {\r\n        element.removeAttribute(attribute.nodeName)\r\n      }\r\n    }\r\n  }\r\n\r\n  return createdDocument.body.innerHTML\r\n}\r\n"],"names":["unsafeHtml","allowList","sanitizeFunction","length","createdDocument","window","DOMParser","parseFromString","elements","concat","body","querySelectorAll","element","elementName","nodeName","toLowerCase","Object","keys","includes","remove","attributeList","attributes","allowedAttributes","attribute","allowedAttribute","removeAttribute","innerHTML","DefaultAllowlist","a","area","b","br","col","code","dd","div","dl","dt","em","hr","h1","h2","h3","h4","h5","h6","i","img","li","ol","p","pre","s","small","span","sub","sup","strong","u","ul","uriAttributes","Set","SAFE_URL_PATTERN","allowedAttributeList","attributeName","has","Boolean","test","nodeValue","filter","attributeRegex","RegExp","some","regex"],"mappings":"sMAoF6BA,WAAYC,UAAWC,sBAC7CF,WAAWG,cACPH,cAGLE,kBAAgD,mBAArBA,wBACtBA,iBAAiBF,kBAIpBI,iBADY,IAAIC,OAAOC,WACKC,gBAAgBP,WAAY,aACxDQ,SAAW,GAAGC,UAAUL,gBAAgBM,KAAKC,iBAAiB,UAE/D,MAAMC,WAAWJ,SAAU,OACxBK,YAAcD,QAAQE,SAASC,kBAEhCC,OAAOC,KAAKhB,WAAWiB,SAASL,aAAc,CACjDD,QAAQO,wBAIJC,cAAgB,GAAGX,UAAUG,QAAQS,YACrCC,kBAAoB,GAAGb,OAAOR,UAAU,MAAQ,GAAIA,UAAUY,cAAgB,QAE/E,MAAMU,aAAaH,cACjBI,iBAAiBD,UAAWD,oBAC/BV,QAAQa,gBAAgBF,UAAUT,iBAKjCV,gBAAgBM,KAAKgB,iBAzGjBC,iBAAmB,KAEzB,CAAC,QAAS,MAAO,KAAM,OAAQ,OAJP,kBAK7BC,EAAG,CAAC,SAAU,OAAQ,QAAS,OAC/BC,KAAM,GACNC,EAAG,GACHC,GAAI,GACJC,IAAK,GACLC,KAAM,GACNC,GAAI,GACJC,IAAK,GACLC,GAAI,GACJC,GAAI,GACJC,GAAI,GACJC,GAAI,GACJC,GAAI,GACJC,GAAI,GACJC,GAAI,GACJC,GAAI,GACJC,GAAI,GACJC,GAAI,GACJC,EAAG,GACHC,IAAK,CAAC,MAAO,SAAU,MAAO,QAAS,QAAS,UAChDC,GAAI,GACJC,GAAI,GACJC,EAAG,GACHC,IAAK,GACLC,EAAG,GACHC,MAAO,GACPC,KAAM,GACNC,IAAK,GACLC,IAAK,GACLC,OAAQ,GACRC,EAAG,GACHC,GAAI,qDAIAC,cAAgB,IAAIC,IAAI,CAC5B,aACA,OACA,OACA,WACA,WACA,SACA,MACA,eAUIC,iBAAmB,0DAEnBtC,iBAAmB,CAACD,UAAWwC,8BAC7BC,cAAgBzC,UAAUT,SAASC,qBAErCgD,qBAAqB7C,SAAS8C,gBAC5BJ,cAAcK,IAAID,gBACbE,QAAQJ,iBAAiBK,KAAK5C,UAAU6C,YAO5CL,qBAAqBM,QAAOC,gBAAkBA,0BAA0BC,SAC5EC,MAAKC,OAASA,MAAMN,KAAKH"}