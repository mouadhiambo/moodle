{"version":3,"file":"helper.min.js","sources":["../src/helper.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * The helper module or AI Subsystem.\r\n *\r\n * @module     core_ai/helper\r\n * @copyright  2024 Huong Nguyen <huongnv13@gmail.com>\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\nexport default class AIHelper {\r\n    /**\r\n     * Replace double line breaks with <br> and with </p><p> for paragraphs.\r\n     * This is to handle the difference in response from the AI to what is expected by the editor.\r\n     *\r\n     * @param {String} text The text to replace.\r\n     * @returns {String}\r\n     */\r\n    static replaceLineBreaks(text) {\r\n        // Replace double line breaks with </p><p> for paragraphs\r\n        const textWithParagraphs = text.replace(/\\n{2,}|\\r\\n/g, '<br/><br/>');\r\n\r\n        // Replace remaining single line breaks with <br> tags\r\n        const textWithBreaks = textWithParagraphs.replace(/\\n/g, '<br/>');\r\n\r\n        // Add opening and closing <p> tags to wrap the entire content\r\n        return `<p>${textWithBreaks}</p>`;\r\n    }\r\n\r\n    /**\r\n     * Replace markdown formatting.\r\n     * Even when asked not to, AI models will sometimes return markdown.\r\n     *\r\n     * @param {String} text The text to replace.\r\n     * @returns {String}\r\n     */\r\n    static replaceMarkdown(text) {\r\n        // Replace markdown bold formatting HTML equivalent.\r\n        const textWithMarkdown = text.replace(/\\*\\*(.*?)\\*\\*/g, '<strong>$1</strong>');\r\n\r\n        return textWithMarkdown;\r\n    }\r\n\r\n    /**\r\n     * Format the response provided by the AI model.\r\n     *\r\n     * @param {String} text The text to format.\r\n     * @returns {String}\r\n     */\r\n    static formatResponse(text) {\r\n        let formattedText = this.replaceLineBreaks(text) ;\r\n        formattedText = this.replaceMarkdown(formattedText);\r\n\r\n        return formattedText;\r\n    }\r\n\r\n    /**\r\n     * Populate fields using settings that match key to name of input.\r\n     *\r\n     * @param {Object} settings The settings to populate with.\r\n     * @param {String} containerId The target container.\r\n     */\r\n    static populateFields = (settings, containerId) => {\r\n        const container = document.getElementById(containerId);\r\n\r\n        if (container) {\r\n            for (const [key, value] of Object.entries(settings)) {\r\n                const field = container.querySelector(`[name=\"${key}\"]`);\r\n                if (field) {\r\n                    field.value = value;\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Reset all fields in a container.\r\n     *\r\n     * @param {String} containerId The target container.\r\n     */\r\n    static clearFields = (containerId) => {\r\n        const container = document.getElementById(containerId);\r\n\r\n        if (container) {\r\n            const allFormElements = container.querySelectorAll('input, select, textarea');\r\n            allFormElements.forEach(element => {\r\n                if (element.type === 'checkbox' || element.type === 'radio') {\r\n                    element.checked = false;\r\n                } else if (element.tagName === 'SELECT') {\r\n                    element.selectedIndex = 0;\r\n                } else {\r\n                    element.value = '';\r\n                }\r\n            });\r\n        }\r\n    };\r\n}\r\n"],"names":["AIHelper","text","textWithBreaks","replace","formattedText","this","replaceLineBreaks","replaceMarkdown","settings","containerId","container","document","getElementById","key","value","Object","entries","field","querySelector","querySelectorAll","forEach","element","type","checked","tagName","selectedIndex"],"mappings":";;;;;;;2FAsBqBA,kCAQQC,YAKfC,eAHqBD,KAAKE,QAAQ,eAAgB,cAGdA,QAAQ,MAAO,4BAG5CD,8CAUMD,aAEMA,KAAKE,QAAQ,iBAAkB,6CAWtCF,UACdG,cAAgBC,KAAKC,kBAAkBL,aAC3CG,cAAgBC,KAAKE,gBAAgBH,eAE9BA,gEA3CMJ,2BAoDO,CAACQ,SAAUC,qBACzBC,UAAYC,SAASC,eAAeH,gBAEtCC,cACK,MAAOG,IAAKC,SAAUC,OAAOC,QAAQR,UAAW,OAC3CS,MAAQP,UAAUQ,+BAAwBL,WAC5CI,QACAA,MAAMH,MAAQA,2BA3Dbd,wBAsEKS,oBACZC,UAAYC,SAASC,eAAeH,gBAEtCC,UAAW,CACaA,UAAUS,iBAAiB,2BACnCC,SAAQC,UACC,aAAjBA,QAAQC,MAAwC,UAAjBD,QAAQC,KACvCD,QAAQE,SAAU,EACS,WAApBF,QAAQG,QACfH,QAAQI,cAAgB,EAExBJ,QAAQP,MAAQ"}