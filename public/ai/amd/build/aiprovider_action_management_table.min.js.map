{"version":3,"file":"aiprovider_action_management_table.min.js","sources":["../src/aiprovider_action_management_table.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/ //\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\nimport PluginManagementTable from 'core_admin/plugin_management_table';\r\nimport {call as fetchMany} from 'core/ajax';\r\n\r\nlet watching = false;\r\n\r\n/**\r\n * Handles setting plugin state for the AI provider management table.\r\n *\r\n * @module     core_ai/aiprovider_action_management_table\r\n * @copyright  2024 Matt Porritt <matt.porritt@moodle.com>\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\nexport default class extends PluginManagementTable {\r\n\r\n    /**\r\n     * Constructor for the class.\r\n     *\r\n     * @param {int} providerid The provider id.\r\n     */\r\n    constructor(providerid) {\r\n        super(); // Call the parent constructor, so inherited properties and methods initialize properly.\r\n        this.providerid = providerid; // Store provider id as an instance field.\r\n    }\r\n\r\n    /**\r\n     * Initialise an instance of the class.\r\n     *\r\n     * @param {int} providerid The provider id.\r\n     */\r\n    static init(providerid) {\r\n        if (watching) {\r\n            return;\r\n        }\r\n        watching = true;\r\n        new this(providerid);\r\n    }\r\n\r\n    /**\r\n     * Set the plugin state (enabled or disabled).\r\n     *\r\n     * @param {string} methodname The web service to call.\r\n     * @param {string} plugin The name of the plugin and action to set the state for.\r\n     * @param {number} state The state to set.\r\n     * @returns {Promise}\r\n     */\r\n    setPluginState(methodname, plugin, state) {\r\n        const providerid = this.providerid;\r\n        return fetchMany([{\r\n            methodname,\r\n            args: {\r\n                plugin,\r\n                state,\r\n                providerid,\r\n            },\r\n        }])[0];\r\n    }\r\n\r\n}\r\n"],"names":["watching","PluginManagementTable","constructor","providerid","this","setPluginState","methodname","plugin","state","args"],"mappings":"0VAiBIA,UAAW;;;;;;;4BAScC,iCAOzBC,YAAYC,yBAEHA,WAAaA,uBAQVA,YACJH,WAGJA,UAAW,MACPI,KAAKD,aAWbE,eAAeC,WAAYC,OAAQC,aACzBL,WAAaC,KAAKD,kBACjB,cAAU,CAAC,CACdG,WAAAA,WACAG,KAAM,CACFF,OAAAA,OACAC,MAAAA,MACAL,WAAAA,eAEJ"}