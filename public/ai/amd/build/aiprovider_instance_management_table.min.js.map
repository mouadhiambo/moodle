{"version":3,"file":"aiprovider_instance_management_table.min.js","sources":["../src/aiprovider_instance_management_table.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\nimport PluginManagementTable from 'core_admin/plugin_management_table';\r\nimport {call as fetchMany} from 'core/ajax';\r\nimport {refreshTableContent} from 'core_table/dynamic';\r\nimport Pending from 'core/pending';\r\nimport {fetchNotifications} from 'core/notification';\r\nimport {prefetchStrings} from 'core/prefetch';\r\nimport {getString} from 'core/str';\r\nimport DeleteCancelModal from 'core/modal_delete_cancel';\r\nimport ModalEvents from 'core/modal_events';\r\n\r\nlet watching = false;\r\n\r\n/**\r\n * Handles setting plugin state for the AI provider management table.\r\n *\r\n * @module     core_ai/aiprovider_instance_management_table\r\n * @copyright  2024 Matt Porritt <matt.porritt@moodle.com>\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\nexport default class extends PluginManagementTable {\r\n    constructor() {\r\n        super();\r\n        this.addClickHandler(this.handleDelete);\r\n    }\r\n\r\n    /**\r\n     * Initialise an instance of the class.\r\n     *\r\n     * This is just a way of making it easier to initialise an instance of the class from PHP.\r\n     */\r\n    static init() {\r\n        if (watching) {\r\n            return;\r\n        }\r\n\r\n        prefetchStrings('core_ai', [\r\n            'providerinstancedelete',\r\n            'providerinstancedeleteconfirm',\r\n        ]);\r\n\r\n        watching = true;\r\n        new this();\r\n    }\r\n\r\n    /**\r\n     * Call the delete service.\r\n     *\r\n     * @param {string} methodname The web service to call\r\n     * @param {number} providerid The provider id.\r\n     * @return {Promise} The promise.\r\n     */\r\n    deleteProvider(methodname, providerid) {\r\n        return fetchMany([{\r\n            methodname,\r\n            args: {\r\n                providerid,\r\n            },\r\n        }])[0];\r\n    }\r\n\r\n    /**\r\n     * Handle delete.\r\n     *\r\n     * @param {HTMLElement} tableRoot\r\n     * @param {Event} e\r\n     */\r\n    async handleDelete(tableRoot, e) {\r\n        const deleteElement = e.target.closest('[data-delete-method]');\r\n        if (deleteElement) {\r\n            e.preventDefault();\r\n            const providerId = e.target.dataset.id;\r\n            const deleteMethod = e.target.dataset.deleteMethod;\r\n            const bodyParams = {\r\n                provider: e.target.dataset.provider,\r\n                name: e.target.dataset.name,\r\n            };\r\n            const modal = await DeleteCancelModal.create({\r\n                title: getString('providerinstancedelete', 'core_ai'),\r\n                body: getString('providerinstancedeleteconfirm', 'core_ai', bodyParams),\r\n                show: true,\r\n                removeOnClose: true,\r\n            });\r\n\r\n            // Handle delete event.\r\n            modal.getRoot().on(ModalEvents.delete, async(e) => {\r\n                e.preventDefault();\r\n                const pendingPromise = new Pending('core_table/dynamic:deleteProvider');\r\n                await this.deleteProvider(deleteMethod, providerId);\r\n                // Reload the table, so we get the updated list of providers, and any messages.\r\n                await Promise.all([\r\n                    refreshTableContent(tableRoot),\r\n                    fetchNotifications(),\r\n                ]);\r\n                modal.destroy();\r\n                pendingPromise.resolve();\r\n            });\r\n        }\r\n    }\r\n}\r\n"],"names":["watching","PluginManagementTable","constructor","addClickHandler","this","handleDelete","deleteProvider","methodname","providerid","args","tableRoot","e","target","closest","preventDefault","providerId","dataset","id","deleteMethod","bodyParams","provider","name","modal","DeleteCancelModal","create","title","body","show","removeOnClose","getRoot","on","ModalEvents","delete","async","pendingPromise","Pending","Promise","all","destroy","resolve"],"mappings":"0wBAyBIA,UAAW;;;;;;;4BAScC,iCACzBC,2BAESC,gBAAgBC,KAAKC,4BAStBL,yCAIY,UAAW,CACvB,yBACA,kCAGJA,UAAW,MACPI,MAURE,eAAeC,WAAYC,mBAChB,cAAU,CAAC,CACdD,WAAAA,WACAE,KAAM,CACFD,WAAAA,eAEJ,sBASWE,UAAWC,MACJA,EAAEC,OAAOC,QAAQ,wBACpB,CACfF,EAAEG,uBACIC,WAAaJ,EAAEC,OAAOI,QAAQC,GAC9BC,aAAeP,EAAEC,OAAOI,QAAQE,aAChCC,WAAa,CACfC,SAAUT,EAAEC,OAAOI,QAAQI,SAC3BC,KAAMV,EAAEC,OAAOI,QAAQK,MAErBC,YAAcC,6BAAkBC,OAAO,CACzCC,OAAO,kBAAU,yBAA0B,WAC3CC,MAAM,kBAAU,gCAAiC,UAAWP,YAC5DQ,MAAM,EACNC,eAAe,IAInBN,MAAMO,UAAUC,GAAGC,sBAAYC,QAAQC,MAAAA,IACnCtB,EAAEG,uBACIoB,eAAiB,IAAIC,iBAAQ,2CAC7B/B,KAAKE,eAAeY,aAAcH,kBAElCqB,QAAQC,IAAI,EACd,gCAAoB3B,YACpB,wCAEJY,MAAMgB,UACNJ,eAAeK"}