{"version":3,"file":"block_management_table.min.js","sources":["../src/block_management_table.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\nimport PluginManagementTable from './plugin_management_table';\r\nimport {refreshTableContent} from 'core_table/dynamic';\r\nimport {call as fetchMany} from 'core/ajax';\r\nimport Pending from 'core/pending';\r\nimport {fetchNotifications} from 'core/notification';\r\n\r\nexport default class extends PluginManagementTable {\r\n    constructor() {\r\n        super();\r\n        this.addClickHandler(this.handleBlockProtectToggle);\r\n    }\r\n\r\n    /**\r\n     * Set the block protection state.\r\n     *\r\n     * @param {string} plugin\r\n     * @param {number} state\r\n     * @returns {Promise}\r\n     */\r\n    setBlockProtectState(plugin, state) {\r\n        return fetchMany([{\r\n            methodname: 'core_admin_set_block_protection',\r\n            args: {\r\n                plugin,\r\n                state,\r\n            },\r\n        }])[0];\r\n    }\r\n\r\n    /**\r\n     * Handle toggling of block protection.\r\n     *\r\n     * @param {HTMLElement} tableRoot\r\n     * @param {Event} e\r\n     */\r\n    async handleBlockProtectToggle(tableRoot, e) {\r\n        const stateToggle = e.target.closest('[data-action=\"toggleprotectstate\"]');\r\n        if (stateToggle) {\r\n            e.preventDefault();\r\n            const pendingPromise = new Pending('core_table/dynamic:processAction');\r\n\r\n            await this.setBlockProtectState(\r\n                stateToggle.dataset.plugin,\r\n                stateToggle.dataset.targetState === '1' ? 1 : 0\r\n            );\r\n\r\n            const [updatedRoot] = await Promise.all([\r\n                refreshTableContent(tableRoot),\r\n                fetchNotifications(),\r\n            ]);\r\n\r\n            // Refocus on the link that as pressed in the first place.\r\n            updatedRoot.querySelector(`[data-action=\"toggleprotectstate\"][data-plugin=\"${stateToggle.dataset.plugin}\"]`).focus();\r\n            pendingPromise.resolve();\r\n        }\r\n    }\r\n}\r\n"],"names":["PluginManagementTable","constructor","addClickHandler","this","handleBlockProtectToggle","setBlockProtectState","plugin","state","methodname","args","tableRoot","e","stateToggle","target","closest","preventDefault","pendingPromise","Pending","dataset","targetState","updatedRoot","Promise","all","querySelector","focus","resolve"],"mappings":"uhBAqB6BA,iCACzBC,2BAESC,gBAAgBC,KAAKC,0BAU9BC,qBAAqBC,OAAQC,cAClB,cAAU,CAAC,CACdC,WAAY,kCACZC,KAAM,CACFH,OAAAA,OACAC,MAAAA,UAEJ,kCASuBG,UAAWC,SAChCC,YAAcD,EAAEE,OAAOC,QAAQ,yCACjCF,YAAa,CACbD,EAAEI,uBACIC,eAAiB,IAAIC,iBAAQ,0CAE7Bd,KAAKE,qBACPO,YAAYM,QAAQZ,OACgB,MAApCM,YAAYM,QAAQC,YAAsB,EAAI,SAG3CC,mBAAqBC,QAAQC,IAAI,EACpC,gCAAoBZ,YACpB,wCAIJU,YAAYG,wEAAiEX,YAAYM,QAAQZ,cAAYkB,QAC7GR,eAAeS"}